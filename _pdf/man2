.\" Copyright (c) 1983, 1990, 1991 The Regents of the University of California.
.\" All rights reserved.
.\"
.\" %%%LICENSE_START(BSD_4_CLAUSE_UCB)
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\" %%%LICENSE_END
.\"
.\" Modified 1993-07-24 by Rik Faith <faith@cs.unc.edu>
.\" Modified 1996-10-21 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified 1998-2000 by Andi Kleen to match Linux 2.2 reality
.\" Modified 2002-04-23 by Roger Luethi <rl@hellgate.ch>
.\" Modified 2004-06-17 by Michael Kerrisk <mtk.manpages@gmail.com>
.\" 2008-12-04, mtk, Add documentation of accept4()
.\"
.TH ACCEPT 2 2010-09-10 "Linux" "Linux Programmer's Manual"
.SH NAME
accept, accept4 \- accept a connection on a socket
.SH SYNOPSIS
.nf
.BR "#include <sys/types.h>" "          /* See NOTES */"
.B #include <sys/socket.h>

.BI "int accept(int " sockfd ", struct sockaddr *" addr ", socklen_t *" addrlen );

.BR "#define _GNU_SOURCE" "             /* See feature_test_macros(7) */"
.B #include <sys/socket.h>

.BI "int accept4(int " sockfd ", struct sockaddr *" addr ,
.BI "            socklen_t *" addrlen ", int " flags );
.fi
.SH DESCRIPTION
The
.BR accept ()
system call is used with connection-based socket types
.RB ( SOCK_STREAM ,
.BR SOCK_SEQPACKET ).
It extracts the first connection request on the queue of pending
connections for the listening socket,
.IR sockfd ,
creates a new connected socket, and returns a new file
descriptor referring to that socket.
The newly created socket is not in the listening state.
The original socket
.I sockfd
is unaffected by this call.
.PP
The argument
.I sockfd
is a socket that has been created with
.BR socket (2),
bound to a local address with
.BR bind (2),
and is listening for connections after a
.BR listen (2).

The argument
.I addr
is a pointer to a
.I sockaddr
structure.
This structure is filled in with the address of the peer socket,
as known to the communications layer.
The exact format of the address returned
.I addr
is determined by the socket's address family (see
.BR socket (2)
and the respective protocol man pages).
When
.I addr
is NULL, nothing is filled in; in this case,
.I addrlen
is not used, and should also be NULL.

The
.I addrlen
argument is a value-result argument:
the caller must initialize it to contain the
size (in bytes) of the structure pointed to by
.IR addr ;
on return it will contain the actual size of the peer address.

The returned address is truncated if the buffer provided is too small;
in this case,
.I addrlen
will return a value greater than was supplied to the call.
.PP
If no pending
connections are present on the queue, and the socket is not marked as
nonblocking,
.BR accept ()
blocks the caller until a connection is present.
If the socket is marked
nonblocking and no pending connections are present on the queue,
.BR accept ()
fails with the error
.BR EAGAIN
or
.BR EWOULDBLOCK .
.PP
In order to be notified of incoming connections on a socket, you can use
.BR select (2)
or
.BR poll (2).
A readable event will be delivered when a new connection is attempted and you
may then call
.BR accept ()
to get a socket for that connection.
Alternatively, you can set the socket to deliver
.B SIGIO
when activity occurs on a socket; see
.BR socket (7)
for details.
.PP
For certain protocols which require an explicit confirmation,
such as
DECNet,
.BR accept ()
can be thought of as merely dequeuing the next connection request and not
implying confirmation.
Confirmation can be implied by
a normal read or write on the new file descriptor, and rejection can be
implied by closing the new socket.
Currently only
DECNet
has these semantics on Linux.

If
.IR flags
is 0, then
.BR accept4 ()
is the same as
.BR accept ().
The following values can be bitwise ORed in
.IR flags
to obtain different behavior:
.TP 16
.B SOCK_NONBLOCK
Set the
.BR O_NONBLOCK
file status flag on the new open file description.
Using this flag saves extra calls to
.BR fcntl (2)
to achieve the same result.
.TP
.B SOCK_CLOEXEC
Set the close-on-exec
.RB ( FD_CLOEXEC )
flag on the new file descriptor.
See the description of the
.B O_CLOEXEC
flag in
.BR open (2)
for reasons why this may be useful.
.SH RETURN VALUE
On success,
these system calls return a nonnegative integer that is a descriptor
for the accepted socket.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SS Error handling
Linux
.BR accept ()
(and
.BR accept4 ())
passes already-pending network errors on the new socket
as an error code from
.BR accept ().
This behavior differs from other BSD socket
implementations.
For reliable operation the application should detect
the network errors defined for the protocol after
.BR accept ()
and treat
them like
.B EAGAIN
by retrying.
In the case of TCP/IP, these are
.BR ENETDOWN ,
.BR EPROTO ,
.BR ENOPROTOOPT ,
.BR EHOSTDOWN ,
.BR ENONET ,
.BR EHOSTUNREACH ,
.BR EOPNOTSUPP ,
and
.BR ENETUNREACH .
.SH ERRORS
.TP
.BR EAGAIN " or " EWOULDBLOCK
.\" Actually EAGAIN on Linux
The socket is marked nonblocking and no connections are
present to be accepted.
POSIX.1-2001 allows either error to be returned for this case,
and does not require these constants to have the same value,
so a portable application should check for both possibilities.
.TP
.B EBADF
The descriptor is invalid.
.TP
.B ECONNABORTED
A connection has been aborted.
.TP
.B EFAULT
The
.I addr
argument is not in a writable part of the user address space.
.TP
.B EINTR
The system call was interrupted by a signal that was caught
before a valid connection arrived; see
.BR signal (7).
.TP
.B EINVAL
Socket is not listening for connections, or
.I addrlen
is invalid (e.g., is negative).
.TP
.B EINVAL
.RB ( accept4 ())
invalid value in
.IR flags .
.TP
.B EMFILE
The per-process limit of open file descriptors has been reached.
.TP
.B ENFILE
The system limit on the total number of open files has been reached.
.TP
.BR ENOBUFS ", " ENOMEM
Not enough free memory.
This often means that the memory allocation is limited by the socket buffer
limits, not by the system memory.
.TP
.B ENOTSOCK
The descriptor references a file, not a socket.
.TP
.B EOPNOTSUPP
The referenced socket is not of type
.BR SOCK_STREAM .
.TP
.B EPROTO
Protocol error.
.PP
In addition, Linux
.BR accept ()
may fail if:
.TP
.B EPERM
Firewall rules forbid connection.
.PP
In addition, network errors for the new socket and as defined
for the protocol may be returned.
Various Linux kernels can
return other errors such as
.BR ENOSR ,
.BR ESOCKTNOSUPPORT ,
.BR EPROTONOSUPPORT ,
.BR ETIMEDOUT .
The value
.B ERESTARTSYS
may be seen during a trace.
.SH VERSIONS
The
.BR accept4 ()
system call is available starting with Linux 2.6.28;
support in glibc is available starting with version 2.10.
.SH CONFORMING TO
.BR accept ():
POSIX.1-2001,
SVr4, 4.4BSD,
.RB ( accept ()
first appeared in 4.2BSD).
.\" The BSD man page documents five possible error returns
.\" (EBADF, ENOTSOCK, EOPNOTSUPP, EWOULDBLOCK, EFAULT).
.\" POSIX.1-2001 documents errors
.\" EAGAIN, EBADF, ECONNABORTED, EINTR, EINVAL, EMFILE,
.\" ENFILE, ENOBUFS, ENOMEM, ENOTSOCK, EOPNOTSUPP, EPROTO, EWOULDBLOCK.
.\" In addition, SUSv2 documents EFAULT and ENOSR.

.BR accept4 ()
is a nonstandard Linux extension.
.LP
On Linux, the new socket returned by
.BR accept ()
does \fInot\fP inherit file status flags such as
.B O_NONBLOCK
and
.B O_ASYNC
from the listening socket.
This behavior differs from the canonical BSD sockets implementation.
.\" Some testing seems to show that Tru64 5.1 and HP-UX 11 also
.\" do not inherit file status flags -- MTK Jun 05
Portable programs should not rely on inheritance or noninheritance
of file status flags and always explicitly set all required flags on
the socket returned from
.BR accept ().
.SH NOTES
POSIX.1-2001 does not require the inclusion of
.IR <sys/types.h> ,
and this header file is not required on Linux.
However, some historical (BSD) implementations required this header
file, and portable applications are probably wise to include it.

There may not always be a connection waiting after a
.B SIGIO
is delivered or
.BR select (2)
or
.BR poll (2)
return a readability event because the connection might have been
removed by an asynchronous network error or another thread before
.BR accept ()
is called.
If this happens, then the call will block waiting for the next
connection to arrive.
To ensure that
.BR accept ()
never blocks, the passed socket
.I sockfd
needs to have the
.B O_NONBLOCK
flag set (see
.BR socket (7)).
.SS The socklen_t type
The third argument of
.BR accept ()
was originally declared as an \fIint *\fP (and is that under libc4 and libc5
and on many other systems like 4.x BSD, SunOS 4, SGI); a POSIX.1g draft
standard wanted to change it into a \fIsize_t *\fP, and that is what it is
for SunOS 5.
Later POSIX drafts have \fIsocklen_t *\fP,
and so do the Single UNIX Specification and glibc2.
Quoting Linus Torvalds:

.\" .I fails: only italicizes a single line
"_Any_ sane library _must_ have "socklen_t" be the same size
as int.
Anything else breaks any BSD socket layer stuff.
POSIX initially \fIdid\fP make it a size_t, and I (and hopefully others, but
obviously not too many) complained to them very loudly indeed.
Making it a size_t is completely broken, exactly because size_t very
seldom is the same size as "int" on 64-bit architectures, for example.
And it
\fIhas\fP to be the same size as "int" because that's what the BSD socket
interface is.
Anyway, the POSIX people eventually got a clue, and created "socklen_t".
They shouldn't have touched it in the first place, but once they did
they felt it had to have a named type for some unfathomable reason
(probably somebody didn't like losing face over having done the original
stupid thing, so they silently just renamed their blunder)."
.SH EXAMPLE
See
.BR bind (2).
.SH SEE ALSO
.BR bind (2),
.BR connect (2),
.BR listen (2),
.BR select (2),
.BR socket (2),
.BR socket (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" This manpage is Copyright (C) 1992 Drew Eckhardt;
.\"             and Copyright (C) 1993 Michael Haardt, Ian Jackson.
.\" and Copyright (C) 2004, 2006, 2007, 2014 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified 1993-07-21 Rik Faith (faith@cs.unc.edu)
.\" Modified 1994-08-21 by Michael Chastain (mec@shell.portal.com):
.\"   Removed note about old kernel (pre-1.1.44) using wrong id on path.
.\" Modified 1996-03-18 by Martin Schulze (joey@infodrom.north.de):
.\"   Stated more clearly how it behaves with symbolic links.
.\" Added correction due to Nick Duffek (nsd@bbc.com), aeb, 960426
.\" Modified 1996-09-07 by Michael Haardt:
.\"   Restrictions for NFS
.\" Modified 1997-09-09 by Joseph S. Myers <jsm28@cam.ac.uk>
.\" Modified 1998-01-13 by Michael Haardt:
.\"   Using access is often insecure
.\" Modified 2001-10-16 by aeb
.\" Modified 2002-04-23 by Roger Luethi <rl@hellgate.ch>
.\" Modified 2004-06-23 by Michael Kerrisk
.\" 2007-06-10, mtk, various parts rewritten, and added BUGS section.
.\"
.TH ACCESS 2 2015-02-21 "Linux" "Linux Programmer's Manual"
.SH NAME
access, faccessat \- check user's permissions for a file
.SH SYNOPSIS
.nf
.B #include <unistd.h>
.sp
.BI "int access(const char *" pathname ", int " mode );

.BR "#include <fcntl.h>           " "/* Definition of AT_* constants */"
.B #include <unistd.h>
.sp
.BI "int faccessat(int " dirfd ", const char *" pathname ", int " \
mode ", int " flags );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR faccessat ():
.PD 0
.ad l
.RS 4
.TP 4
Since glibc 2.10:
_XOPEN_SOURCE\ >=\ 700 || _POSIX_C_SOURCE\ >=\ 200809L
.TP
Before glibc 2.10:
_ATFILE_SOURCE
.RE
.ad
.PD
.fi
.SH DESCRIPTION
.BR access ()
checks whether the calling process can access the file
.IR pathname .
If
.I pathname
is a symbolic link, it is dereferenced.

The
.I mode
specifies the accessibility check(s) to be performed,
and is either the value
.BR F_OK ,
.\" F_OK is defined as 0 on every system that I know of.
or a mask consisting of the bitwise OR of one or more of
.BR R_OK ", " W_OK ", and " X_OK .
.B F_OK
tests for the existence of the file.
.BR R_OK ", " W_OK ", and " X_OK
test whether the file exists and grants read, write, and
execute permissions, respectively.

The check is done using the calling process's
.I real
UID and GID, rather than the effective IDs as is done when
actually attempting an operation (e.g.,
.BR open (2))
on the file.
Similarly, for the root user, the check uses the set of
permitted capabilities rather than the set of effective
capabilities; and for non-root users, the check uses an empty set
of capabilities.

This allows set-user-ID programs and capability-endowed programs
to easily determine the invoking user's authority.
In other words,
.BR access ()
does not answer the "can I read/write/execute this file?" question.
It answers a slightly different question:
"(assuming I'm a setuid binary) can
.I the user who invoked me
read/write/execute this file?",
which gives set-user-ID programs the possibility to
prevent malicious users from causing them to read files
which users shouldn't be able to read.

If the calling process is privileged (i.e., its real UID is zero),
then an
.B X_OK
check is successful for a regular file if execute permission
is enabled for any of the file owner, group, or other.
.SS faccessat()
The
.BR faccessat ()
system call operates in exactly the same way as
.BR access (),
except for the differences described here.

If the pathname given in
.I pathname
is relative, then it is interpreted relative to the directory
referred to by the file descriptor
.I dirfd
(rather than relative to the current working directory of
the calling process, as is done by
.BR access ()
for a relative pathname).

If
.I pathname
is relative and
.I dirfd
is the special value
.BR AT_FDCWD ,
then
.I pathname
is interpreted relative to the current working
directory of the calling process (like
.BR access ()).

If
.I pathname
is absolute, then
.I dirfd
is ignored.

.I flags
is constructed by ORing together zero or more of the following values:
.TP
.B AT_EACCESS
Perform access checks using the effective user and group IDs.
By default,
.BR faccessat ()
uses the real IDs (like
.BR access ()).
.TP
.B AT_SYMLINK_NOFOLLOW
If
.I pathname
is a symbolic link, do not dereference it:
instead return information about the link itself.
.PP
See
.BR openat (2)
for an explanation of the need for
.BR faccessat ().
.SH RETURN VALUE
On success (all requested permissions granted, or
.I mode
is
.B F_OK
and the file exists), zero is returned.
On error (at least one bit in
.I mode
asked for a permission that is denied, or
.I mode
is
.B F_OK
and the file does not exist, or some other error occurred),
\-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.BR access ()
and
.BR faccessat ()
shall fail if:
.TP
.B EACCES
The requested access would be denied to the file, or search permission
is denied for one of the directories in the path prefix of
.IR pathname .
(See also
.BR path_resolution (7).)
.TP
.B ELOOP
Too many symbolic links were encountered in resolving
.IR pathname .
.TP
.B ENAMETOOLONG
.I pathname
is too long.
.TP
.B ENOENT
A component of
.I pathname
does not exist or is a dangling symbolic link.
.TP
.B ENOTDIR
A component used as a directory in
.I pathname
is not, in fact, a directory.
.TP
.B EROFS
Write permission was requested for a file on a read-only filesystem.
.PP
.BR access ()
and
.BR faccessat ()
may fail if:
.TP
.B EFAULT
.I pathname
points outside your accessible address space.
.TP
.B EINVAL
.I mode
was incorrectly specified.
.TP
.B EIO
An I/O error occurred.
.TP
.B ENOMEM
Insufficient kernel memory was available.
.TP
.B ETXTBSY
Write access was requested to an executable which is being
executed.
.PP
The following additional errors can occur for
.BR faccessat ():
.TP
.B EBADF
.I dirfd
is not a valid file descriptor.
.TP
.B EINVAL
Invalid flag specified in
.IR flags .
.TP
.B ENOTDIR
.I pathname
is relative and
.I dirfd
is a file descriptor referring to a file other than a directory.
.SH VERSIONS
.BR faccessat ()
was added to Linux in kernel 2.6.16;
library support was added to glibc in version 2.4.
.SH CONFORMING TO
.BR access ():
SVr4, 4.3BSD, POSIX.1-2001, POSIX.1-2008.

.BR faccessat ():
POSIX.1-2008.
.SH NOTES
.PP
.BR Warning :
Using these calls to check if a user is authorized to, for example,
open a file before actually doing so using
.BR open (2)
creates a security hole, because the user might exploit the short time
interval between checking and opening the file to manipulate it.
.BR "For this reason, the use of this system call should be avoided" .
(In the example just described,
a safer alternative would be to temporarily switch the process's
effective user ID to the real ID and then call
.BR open (2).)
.PP
.BR access ()
always dereferences symbolic links.
If you need to check the permissions on a symbolic link, use
.BR faccessat (2)
with the flag
.BR AT_SYMLINK_NOFOLLOW .
.PP
These calls return an error if any of the access types in
.I mode
is denied, even if some of the other access types in
.I mode
are permitted.
.PP
If the calling process has appropriate privileges (i.e., is superuser),
POSIX.1-2001 permits an implementation to indicate success for an
.B X_OK
check even if none of the execute file permission bits are set.
.\" HPU-UX 11 and Tru64 5.1 do this.
Linux does not do this.
.PP
A file is accessible only if the permissions on each of the
directories in the path prefix of
.I pathname
grant search (i.e., execute) access.
If any directory is inaccessible, then the
.BR access ()
call will fail, regardless of the permissions on the file itself.
.PP
Only access bits are checked, not the file type or contents.
Therefore, if a directory is found to be writable,
it probably means that files can be created in the directory,
and not that the directory can be written as a file.
Similarly, a DOS file may be found to be "executable," but the
.BR execve (2)
call will still fail.
.PP
These calls
may not work correctly on NFSv2 filesystems with UID mapping enabled,
because UID mapping is done on the server and hidden from the client,
which checks permissions.  (NFS versions 3 and higher perform the check on
the server.)
Similar problems can occur to FUSE mounts.
.\"
.\"
.SS C library/kernel ABI differences
The raw
.BR faccessat ()
system call takes only the first three arguments.
The
.B AT_EACCESS
and
.B AT_SYMLINK_NOFOLLOW
flags are actually implemented within the glibc wrapper function for
.BR faccessat ().
If either of these flags is specified, then the wrapper function employs
.BR fstatat (2)
to determine access permissions.
.SS Glibc notes
On older kernels where
.BR faccessat ()
is unavailable (and when the
.B AT_EACCESS
and
.B AT_SYMLINK_NOFOLLOW
flags are not specified),
the glibc wrapper function falls back to the use of
.BR access ().
When
.I pathname
is a relative pathname,
glibc constructs a pathname based on the symbolic link in
.IR /proc/self/fd
that corresponds to the
.IR dirfd
argument.
.SH BUGS
In kernel 2.4 (and earlier) there is some strangeness in the handling of
.B X_OK
tests for superuser.
If all categories of execute permission are disabled
for a nondirectory file, then the only
.BR access ()
test that returns \-1 is when
.I mode
is specified as just
.BR X_OK ;
if
.B R_OK
or
.B W_OK
is also specified in
.IR mode ,
then
.BR access ()
returns 0 for such files.
.\" This behavior appears to have been an implementation accident.
Early 2.6 kernels (up to and including 2.6.3)
also behaved in the same way as kernel 2.4.

In kernels before 2.6.20,
these calls ignored the effect of the
.B MS_NOEXEC
flag if it was used to
.BR mount (2)
the underlying filesystem.
Since kernel 2.6.20, the
.B MS_NOEXEC
is honored
.SH SEE ALSO
.BR chmod (2),
.BR chown (2),
.BR open (2),
.BR setgid (2),
.BR setuid (2),
.BR stat (2),
.BR euidaccess (3),
.BR credentials (7),
.BR path_resolution (7),
.BR symlink (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1993 Michael Haardt
.\" (michael@moria.de),
.\" Fri Apr  2 11:32:09 MET DST 1993
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.\" Modified 1993-07-22 by Rik Faith <faith@cs.unc.edu>
.\" Modified 1993-08-10 by Alan Cox <iiitac@pyramid.swansea.ac.uk>
.\" Modified 1998-11-04 by Tigran Aivazian <tigran@sco.com>
.\" Modified 2004-05-27, 2004-06-17, 2004-06-23 by Michael Kerrisk
.\"
.TH ACCT 2 2008-06-16 "Linux" "Linux Programmer's Manual"
.SH NAME
acct \- switch process accounting on or off
.SH SYNOPSIS
.ad l
.nf
.B #include <unistd.h>
.sp
.BI "int acct(const char *" filename );
.fi
.ad b
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR acct ():
_BSD_SOURCE || (_XOPEN_SOURCE && _XOPEN_SOURCE\ <\ 500)
.SH DESCRIPTION
The
.BR acct ()
system call enables or disables process accounting.
If called with the name of an existing file as its argument,
accounting is turned on,
and records for each terminating process are appended to
.I filename
as it terminates.
An argument of NULL causes accounting to be turned off.
.SH RETURN VALUE
On success, zero is returned.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EACCES
Write permission is denied for the specified file,
or search permission is denied for one of the directories
in the path prefix of
.I filename
(see also
.BR path_resolution (7)),
or
.I filename
is not a regular file.
.TP
.B EFAULT
.I filename
points outside your accessible address space.
.TP
.B EIO
Error writing to the file
.IR filename .
.TP
.B EISDIR
.I filename
is a directory.
.TP
.B ELOOP
Too many symbolic links were encountered in resolving
.IR filename .
.TP
.B ENAMETOOLONG
.I filename
was too long.
.TP
.B ENFILE
The system limit on the total number of open files has been reached.
.TP
.B ENOENT
The specified filename does not exist.
.TP
.B ENOMEM
Out of memory.
.TP
.B ENOSYS
BSD process accounting has not been enabled when the operating system
kernel was compiled.
The kernel configuration parameter controlling this feature is
.BR CONFIG_BSD_PROCESS_ACCT .
.TP
.B ENOTDIR
A component used as a directory in
.I filename
is not in fact a directory.
.TP
.B EPERM
The calling process has insufficient privilege to enable process accounting.
On Linux the
.B CAP_SYS_PACCT
capability is required.
.TP
.B EROFS
.I filename
refers to a file on a read-only filesystem.
.TP
.B EUSERS
There are no more free file structures or we ran out of memory.
.SH CONFORMING TO
SVr4, 4.3BSD (but not POSIX).
.\" SVr4 documents an EBUSY error condition, but no EISDIR or ENOSYS.
.\" Also AIX and HP-UX document EBUSY (attempt is made
.\" to enable accounting when it is already enabled), as does Solaris
.\" (attempt is made to enable accounting using the same file that is
.\" currently being used).
.SH NOTES
No accounting is produced for programs running when a system crash occurs.
In particular, nonterminating processes are never accounted for.

The structure of the records written to the accounting file is described in
.BR acct (5).
.SH SEE ALSO
.BR acct (5)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2006 Red Hat, Inc. All Rights Reserved.
.\" Written by David Howells (dhowells@redhat.com)
.\"
.\" %%%LICENSE_START(GPLv2+_SW_ONEPARA)
.\" This program is free software; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License
.\" as published by the Free Software Foundation; either version
.\" 2 of the License, or (at your option) any later version.
.\" %%%LICENSE_END
.\"
.TH ADD_KEY 2 2015-05-07 Linux "Linux Key Management Calls"
.SH NAME
add_key \- add a key to the kernel's key management facility
.SH SYNOPSIS
.nf
.B #include <keyutils.h>
.sp
.BI "key_serial_t add_key(const char *" type ", const char *" description ,
.BI "                     const void *" payload ", size_t " plen ,
.BI "                     key_serial_t " keyring ");"
.fi
.SH DESCRIPTION
.BR add_key ()
asks the kernel to create or update a key of the given
.I type
and
.IR description ,
instantiate it with the
.I payload
of length
.IR plen ,
and to attach it to the nominated
.I keyring
and to return its serial number.
.P
The key type may reject the data if it's in the wrong format or in some other
way invalid.
.P
If the destination
.I keyring
already contains a key that matches the specified
.IR type " and " description,
then, if the key type supports it, that key will be updated rather than a new
key being created; if not, a new key will be created and it will displace the
link to the extant key from the keyring.
.P
The destination
.I keyring
serial number may be that of a valid keyring to which the caller has write
permission, or it may be a special keyring ID:
.TP
.B KEY_SPEC_THREAD_KEYRING
This specifies the caller's thread-specific keyring.
.TP
.B KEY_SPEC_PROCESS_KEYRING
This specifies the caller's process-specific keyring.
.TP
.B KEY_SPEC_SESSION_KEYRING
This specifies the caller's session-specific keyring.
.TP
.B KEY_SPEC_USER_KEYRING
This specifies the caller's UID-specific keyring.
.TP
.B KEY_SPEC_USER_SESSION_KEYRING
This specifies the caller's UID-session keyring.
.SH KEY TYPES
There are a number of key types available in the core key management code, and
these can be specified to this function:
.TP
.B \*(lquser\*(rq
Keys of the user-defined key type may contain a blob of arbitrary data, and the
.I description
may be any valid string, though it is preferred that the description be
prefixed with a string representing the service to which the key is of interest
and a colon (for instance
.RB \*(lq afs:mykey \*(rq).
The
.I payload
may be empty or NULL for keys of this type.
.TP
.B \*(lqkeyring\*(rq
Keyrings are special key types that may contain links to sequences of other
keys of any type.
If this interface is used to create a keyring, then a NULL
.I payload
should be specified, and
.I plen
should be zero.
.SH RETURN VALUE
On success
.BR add_key ()
returns the serial number of the key it created or updated.
On error, the value \-1
will be returned and errno will have been set to an appropriate error.
.SH ERRORS
.TP
.B ENOKEY
The keyring doesn't exist.
.TP
.B EKEYEXPIRED
The keyring has expired.
.TP
.B EKEYREVOKED
The keyring has been revoked.
.TP
.B EINVAL
The payload data was invalid.
.TP
.B ENOMEM
Insufficient memory to create a key.
.TP
.B EDQUOT
The key quota for this user would be exceeded by creating this key or linking
it to the keyring.
.TP
.B EACCES
The keyring wasn't available for modification by the user.
.SH LINKING
Although this is a Linux system call, it is not present in
.I libc
but can be found rather in
.IR libkeyutils .
When linking,
.B -lkeyutils
should be specified to the linker.
.SH SEE ALSO
.BR keyctl (1),
.BR keyctl (2),
.BR request_key (2),
.BR keyctl (3),
.BR keyrings (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1995 Michael Chastain (mec@shell.portal.com), 15 April 1995.
.\" and Copyright (C) 2014 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.\" Modified 1997-01-31 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified 1997-07-30 by Paul Slootman <paul@wurtel.demon.nl>
.\" Modified 2004-05-27 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.TH ADJTIMEX 2 2014-12-31 "Linux" "Linux Programmer's Manual"
.SH NAME
adjtimex \- tune kernel clock
.SH SYNOPSIS
.nf
.BR "#define _BSD_SOURCE" "      /* See feature_test_macros(7) */"
.B #include <sys/timex.h>

.BI "int adjtimex(struct timex *" "buf" );
.fi
.SH DESCRIPTION
Linux uses David L. Mills' clock adjustment algorithm (see RFC\ 5905).
The system call
.BR adjtimex ()
reads and optionally sets adjustment parameters for this algorithm.
It takes a pointer to a
.I timex
structure, updates kernel parameters from field values,
and returns the same structure with current kernel values.
This structure is declared as follows:
.PP
.in +4n
.nf
struct timex {
    int  modes;      /* Mode selector */
    long offset;     /* Time offset; nanoseconds, if STA_NANO
                        status flag is set, otherwise microseconds */
    long freq;       /* Frequency offset, in units of 2^-16 ppm
                        (parts per million, see NOTES below) */
    long maxerror;   /* Maximum error (microseconds) */
    long esterror;   /* Estimated error (microseconds) */
    int  status;     /* Clock command/status */
    long constant;   /* PLL (phase-locked loop) time constant */
    long precision;  /* Clock precision (microseconds, read-only) */
    long tolerance;  /* Clock frequency tolerance (ppm, read-only) */
    struct timeval time;
                     /* Current time (read-only, except for
                        ADJ_SETOFFSET); upon return, time.tv_usec
                        contains nanoseconds, if STA_NANO status
                        flag is set, otherwise microseconds */
    long tick;       /* Microseconds between clock ticks */
    long ppsfreq;    /* PPS (pulse per second) frequency (in units
                        of 2^-16 ppm\-\-see NOTES, read-only) */
    long jitter;     /* PPS jitter (read-only); nanoseconds, if
                        STA_NANO status flag is set, otherwise
                        microseconds */
    int  shift;      /* PPS interval duration (seconds, read-only) */
    long stabil;     /* PPS stability (2^-16 ppm\-\-see NOTES,
                        read-only) */
    long jitcnt;     /* PPS jitter limit exceeded (read-only) */
    long calcnt;     /* PPS calibration intervals (read-only) */
    long errcnt;     /* PPS calibration errors (read-only) */
    long stbcnt;     /* PPS stability limit exceeded (read-only) */
    int tai;         /* TAI offset, as set by previous ADJ_TAI
                        operation (seconds, read-only,
                        since Linux 2.6.26) */
    /* Further padding bytes to allow for future expansion */
};
.fi
.in
.PP
The
.I modes
field determines which parameters, if any, to set.
It is a bit mask containing a
.RI bitwise- or
combination of zero or more of the following bits:
.TP
.BR ADJ_OFFSET
Set time offset from
.IR buf.offset .
.TP
.BR ADJ_FREQUENCY
Set frequency offset from
.IR buf.freq .
.TP
.BR ADJ_MAXERROR
Set maximum time error from
.IR buf.maxerror .
.TP
.BR ADJ_ESTERROR
Set estimated time error from
.IR buf.esterror .
.TP
.BR ADJ_STATUS
Set clock status from
.IR buf.status .
.TP
.BR ADJ_TIMECONST
Set PLL time constant from
.IR buf.constant .
If the
.B STA_NANO
status flag (see below) is clear, the kernel adds 4 to this value.
.TP
.BR ADJ_SETOFFSET " (since Linux 2.6.29)"
.\" commit 094aa1881fdc1b8889b442eb3511b31f3ec2b762
.\" Author: Richard Cochran <richardcochran@gmail.com>
Add
.I buf.time
to the current time.
If
.I buf.status
includes the
.B ADJ_NANO
flag, then
.I buf.time.tv_usec
is interpreted as a nanosecond value;
otherwise it is interpreted as microseconds.
.TP
.BR ADJ_MICRO " (since Linux 2.6.36)"
.\" commit eea83d896e318bda54be2d2770d2c5d6668d11db
.\" Author: Roman Zippel <zippel@linux-m68k.org>
Select microsecond resolution.
.TP
.BR ADJ_NANO " (since Linux 2.6.36)"
.\" commit eea83d896e318bda54be2d2770d2c5d6668d11db
.\" Author: Roman Zippel <zippel@linux-m68k.org>
Select nanosecond resolution.
Only one of
.BR ADJ_MICRO
and
.BR ADJ_NANO
should be specified.
.TP
.BR ADJ_TAI " (since Linux 2.6.26)"
.\" commit 153b5d054ac2d98ea0d86504884326b6777f683d
Set TAI (Atomic International Time) offset from
.IR buf->constant .

.BR ADJ_TAI
should not be used in conjunction with
.BR ADJ_TIMECONST ,
since the latter mode also employs the
.IR buf->constant
field.

For a complete explanation of TAI
and the difference between TAI and UTC, see
.UR http://www.bipm.org/en/bipm/tai/tai.html
.I BIPM
.UE
.TP
.BR ADJ_TICK
Set tick value from
.IR buf.tick .
.PP
Alternatively,
.I modes
can be specified as either of the following (multibit mask) values,
in which case other bits should not be specified in
.IR modes :
.\" In general, the other bits are ignored, but ADJ_OFFSET_SINGLESHOT 0x8001
.\" ORed with ADJ_NANO (0x2000) gives 0xa0001 == ADJ_OFFSET_SS_READ!!
.TP
.BR ADJ_OFFSET_SINGLESHOT
.\" In user space, ADJ_OFFSET_SINGLESHOT is 0x8001
.\" In kernel space it is 0x0001, and must be ANDed with ADJ_ADJTIME (0x8000)
Old-fashioned
.BR adjtime ():
(gradually) adjust time by value specified in
.IR buf.offset ,
which specifies an adjustment in microseconds.
.TP
.BR ADJ_OFFSET_SS_READ " (functional since Linux 2.6.28)"
.\" In user space, ADJ_OFFSET_SS_READ is 0xa001
.\" In kernel space there is ADJ_OFFSET_READONLY (0x2000) anded with
.\" ADJ_ADJTIME (0x8000) and ADJ_OFFSET_SINGLESHOT (0x0001) to give 0xa001)
Return (in
.IR buf.offset )
the remaining amount of time to be adjusted after an earlier
.BR ADJ_OFFSET_SINGLESHOT
operation.
This feature was added in Linux 2.6.24,
.\" commit 52bfb36050c8529d9031d2c2513b281a360922ec
but did not work correctly
.\" commit 916c7a855174e3b53d182b97a26b2e27a29726a1
until Linux 2.6.28.
.PP
Ordinary users are restricted to a value of either 0 or
.B ADJ_OFFSET_SS_READ
for
.IR modes .
Only the superuser may set any parameters.

The
.I buf.status
field is a bit mask that is used to set and/or retrieve status
bits associated with the NTP implementation.
Some bits in the mask are both readable and settable,
while others are read-only.
.TP
.BR STA_PLL
Enable phase-locked loop (PLL) updates (read-write) via
.BR ADJ_OFFSET .
.TP
.BR STA_PPSFREQ
Enable PPS freq discipline (read-write).
.TP
.BR STA_PPSTIME
Enable PPS time discipline (read-write).
.TP
.BR STA_FLL
Select frequency-locked loop (FLL) mode (read-write).
.TP
.BR STA_INS
Insert leap second (read-write).
.TP
.BR STA_DEL
Delete leap second (read-write).
.TP
.BR STA_UNSYNC
Clock unsynchronized (read-write).
.TP
.BR STA_FREQHOLD
Hold frequency (read-write).
.TP
.BR STA_PPSSIGNAL
PPS signal present (read-only).
.TP
.BR STA_PPSJITTER
PPS signal jitter exceeded (read-only).
.TP
.BR STA_PPSWANDER
PPS signal wander exceeded (read-only).
.TP
.BR STA_PPSERROR
PPS signal calibration error (read-only).
.TP
.BR STA_CLOCKERR
Clock hardware fault (read-only).
.TP
.BR STA_NANO " (since Linux 2.6.26)"
.\" commit eea83d896e318bda54be2d2770d2c5d6668d11db
.\" Author: Roman Zippel <zippel@linux-m68k.org>
Resolution (0 = microsecond, 1 = nanoseconds; read-only).
Set via
.BR ADJ_NANO ,
cleared via
.BR ADJ_MICRO .
.TP
.BR STA_MODE " (since Linux 2.6.26)"
.\" commit eea83d896e318bda54be2d2770d2c5d6668d11db
.\" Author: Roman Zippel <zippel@linux-m68k.org>
Mode (0 = Phase Locked Loop, 1 = Frequency Locked Loop; read-only).
.TP
.BR STA_CLK " (since Linux 2.6.26)"
.\" commit eea83d896e318bda54be2d2770d2c5d6668d11db
.\" Author: Roman Zippel <zippel@linux-m68k.org>
Clock source (0 = A, 1 = B; read-only).
.\" FIXME It would be helpful to have some explanation of what
.\"       "Clock source" is.
.PP
Attempts to set read-only
.I status
bits are silently ignored.
.SH RETURN VALUE
On success,
.BR adjtimex ()
returns the clock state; that is, one of the following values:
.TP 12
.BR TIME_OK
Clock synchronized.
.TP
.BR TIME_INS
Insert leap second.
.TP
.BR TIME_DEL
Delete leap second.
.TP
.BR TIME_OOP
Leap second in progress.
.TP
.BR TIME_WAIT
Leap second has occurred.
.TP
.BR TIME_ERROR
Clock not synchronized.
The symbolic name
.B TIME_BAD
is a synonym for
.BR TIME_ERROR ,
provided for backward compatibility.
.PP
On failure,
.BR adjtimex ()
returns \-1 and sets
.IR errno .
.SH ERRORS
.TP
.B EFAULT
.I buf
does not point to writable memory.
.TP
.B EINVAL
An attempt was made to set
.I buf.offset
to a value outside the range \-131071 to +131071,
or to set
.I buf.status
to a value other than those listed above,
or to set
.I buf.tick
to a value outside the range
.RB 900000/ HZ
to
.RB 1100000/ HZ ,
where
.B HZ
is the system timer interrupt frequency.
.TP
.B EPERM
.I buf.modes
is neither 0 nor
.BR ADJ_OFFSET_SS_READ ,
and the caller does not have sufficient privilege.
Under Linux, the
.B CAP_SYS_TIME
capability is required.
.SH NOTES
In struct
.IR timex ,
.IR freq ,
.IR ppsfreq ,
and
.I stabil
are ppm (parts per million) with a 16-bit fractional part,
which means that a value of 1 in one of those fields
actually means 2^-16 ppm, and 2^16=65536 is 1 ppm.
This is the case for both input values (in the case of
.IR freq )
and output values.
.SH CONFORMING TO
.BR adjtimex ()
is Linux-specific and should not be used in programs
intended to be portable.
See
.BR adjtime (3)
for a more portable, but less flexible,
method of adjusting the system clock.
.SH SEE ALSO
.BR settimeofday (2),
.BR adjtime (3),
.BR capabilities (7),
.BR time (7),
.BR adjtimex (8)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" This manpage is Copyright (C) 1992 Drew Eckhardt;
.\"             and Copyright (C) 1993 Michael Haardt, Ian Jackson.
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified Wed Jul 21 19:42:57 1993 by Rik Faith <faith@cs.unc.edu>
.\" Modified Sun Jul 21 21:25:26 1996 by Andries Brouwer <aeb@cwi.nl>
.\" Modified Wed Nov  6 03:46:05 1996 by Eric S. Raymond <esr@thyrsus.com>
.\"
.TH ALARM 2 2014-02-23 "Linux" "Linux Programmer's Manual"
.SH NAME
alarm \- set an alarm clock for delivery of a signal
.SH SYNOPSIS
.nf
.B #include <unistd.h>
.sp
.BI "unsigned int alarm(unsigned int " seconds );
.fi
.SH DESCRIPTION
.BR alarm ()
arranges for a
.B SIGALRM
signal to be delivered to the calling process in
.I seconds
seconds.

If
.I seconds
is zero, any pending alarm is canceled.

In any event any previously set
.BR alarm ()
is canceled.
.SH RETURN VALUE
.BR alarm ()
returns the number of seconds remaining until any previously scheduled
alarm was due to be delivered, or zero if there was no previously
scheduled alarm.
.SH CONFORMING TO
SVr4, POSIX.1-2001, 4.3BSD.
.SH NOTES
.BR alarm ()
and
.BR setitimer (2)
share the same timer; calls to one will interfere with use of the
other.

Alarms created by
.BR alarm ()
are preserved across
.BR execve (2)
and are not inherited by children created via
.BR fork (2).
.PP
.BR sleep (3)
may be implemented using
.BR SIGALRM ;
mixing calls to
.BR alarm ()
and
.BR sleep (3)
is a bad idea.

Scheduling delays can, as ever, cause the execution of the process to
be delayed by an arbitrary amount of time.
.SH SEE ALSO
.BR gettimeofday (2),
.BR pause (2),
.BR select (2),
.BR setitimer (2),
.BR sigaction (2),
.BR signal (2),
.BR sleep (3),
.BR time (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 2003 Andries E. Brouwer (aeb@cwi.nl)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH ALLOC_HUGEPAGES 2 2007-05-31 "Linux" "Linux Programmer's Manual"
.SH NAME
alloc_hugepages, free_hugepages \- allocate or free huge pages
.SH SYNOPSIS
.nf
.BI "void *alloc_hugepages(int " key ", void *" addr ", size_t " len ,
.BI "                      int " prot ", int " flag );
.\" asmlinkage unsigned long sys_alloc_hugepages(int key, unsigned long addr,
.\" unsigned long len, int prot, int flag);
.sp
.BI "int free_hugepages(void *" addr );
.\" asmlinkage int sys_free_hugepages(unsigned long addr);
.fi
.SH DESCRIPTION
The system calls
.BR alloc_hugepages ()
and
.BR free_hugepages ()
were introduced in Linux 2.5.36 and removed again in 2.5.54.
They existed only on i386 and ia64 (when built with
.BR CONFIG_HUGETLB_PAGE ).
In Linux 2.4.20, the syscall numbers exist,
but the calls fail with the error
.BR ENOSYS .
.LP
On i386 the memory management hardware knows about ordinary pages (4 KiB)
and huge pages (2 or 4 MiB).
Similarly ia64 knows about huge pages of
several sizes.
These system calls serve to map huge pages into the
process's memory or to free them again.
Huge pages are locked into memory, and are not swapped.
.LP
The
.I key
argument is an identifier.
When zero the pages are private, and
not inherited by children.
When positive the pages are shared with other applications using the same
.IR key ,
and inherited by child processes.
.LP
The
.I addr
argument of
.BR free_hugepages ()
tells which page is being freed: it was the return value of a
call to
.BR alloc_hugepages ().
(The memory is first actually freed when all users have released it.)
The
.I addr
argument of
.BR alloc_hugepages ()
is a hint, that the kernel may or may not follow.
Addresses must be properly aligned.
.LP
The
.I len
argument is the length of the required segment.
It must be a multiple of the huge page size.
.LP
The
.I prot
argument specifies the memory protection of the segment.
It is one of
.BR PROT_READ ,
.BR PROT_WRITE ,
.BR PROT_EXEC .
.LP
The
.I flag
argument is ignored, unless
.I key
is positive.
In that case, if
.I flag
is
.BR IPC_CREAT ,
then a new huge page segment is created when none
with the given key existed.
If this flag is not set, then
.B ENOENT
is returned when no segment with the given key exists.
.SH RETURN VALUE
On success,
.BR alloc_hugepages ()
returns the allocated virtual address, and
.BR free_hugepages ()
returns zero.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B ENOSYS
The system call is not supported on this kernel.
.SH FILES
.I /proc/sys/vm/nr_hugepages
Number of configured hugetlb pages.
This can be read and written.
.LP
.I /proc/meminfo
Gives info on the number of configured hugetlb pages and on their size
in the three variables HugePages_Total, HugePages_Free, Hugepagesize.
.SH CONFORMING TO
These calls are specific to Linux on Intel processors, and should not be
used in programs intended to be portable.
.SH NOTES
These system calls are gone;
they existed only in Linux 2.5.36 through to 2.5.54.
Now the hugetlbfs filesystem can be used instead.
Memory backed by huge pages (if the CPU supports them) is obtained by
using
.BR mmap (2)
to map files in this virtual filesystem.
.LP
The maximal number of huge pages can be specified using the
.B hugepages=
boot parameter.

.\" requires CONFIG_HUGETLB_PAGE (under "Processor type and features")
.\" and CONFIG_HUGETLBFS (under "Filesystems").
.\" mount -t hugetlbfs hugetlbfs /huge
.\" SHM_HUGETLB
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2003 Andi Kleen
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH ARCH_PRCTL 2 2015-02-21 "Linux" "Linux Programmer's Manual"
.SH NAME
arch_prctl \- set architecture-specific thread state
.SH SYNOPSIS
.nf
.B #include <asm/prctl.h>
.br
.B #include <sys/prctl.h>
.sp
.BI "int arch_prctl(int " code ", unsigned long " addr );
.BI "int arch_prctl(int " code ", unsigned long *" addr );
.fi
.SH DESCRIPTION
The
.BR arch_prctl ()
function sets architecture-specific process or thread state.
.I code
selects a subfunction
and passes argument
.I addr
to it;
.I addr
is interpreted as either an
.I "unsigned long"
for the "set" operations, or as an
.IR "unsigned long\ *" ,
for the "get" operations.
.LP
Subfunctions for x86-64 are:
.TP
.B ARCH_SET_FS
Set the 64-bit base for the
.I FS
register to
.IR addr .
.TP
.B ARCH_GET_FS
Return the 64-bit base value for the
.I FS
register of the current thread in the
.I unsigned long
pointed to by
.IR addr .
.TP
.B ARCH_SET_GS
Set the 64-bit base for the
.I GS
register to
.IR addr .
.TP
.B ARCH_GET_GS
Return the 64-bit base value for the
.I GS
register of the current thread in the
.I unsigned long
pointed to by
.IR addr .
.SH RETURN VALUE
On success,
.BR arch_prctl ()
returns 0; on error, \-1 is returned, and
.I errno
is set to indicate the error.
.SH ERRORS
.TP
.B EFAULT
.I addr
points to an unmapped address or is outside the process address space.
.TP
.B EINVAL
.I code
is not a valid subcommand.
.TP
.B EPERM
.I addr
is outside the process address space.
.\" .SH AUTHOR
.\" Man page written by Andi Kleen.
.SH CONFORMING TO
.BR arch_prctl ()
is a Linux/x86-64 extension and should not be used in programs intended
to be portable.
.SH NOTES
.BR arch_prctl ()
is supported only on Linux/x86-64 for 64-bit programs currently.

The 64-bit base changes when a new 32-bit segment selector is loaded.

.B ARCH_SET_GS
is disabled in some kernels.

Context switches for 64-bit segment bases are rather expensive.
As an optimization, if a 32-bit TLS base address is used,
.BR arch_prctl (2)
may use a real TLS entry as if
.BR set_thread_area (2)
had been called, instead of manipulating the segment base register directly.
Memory in the first 2GB of address space can be allocated by using
.BR mmap (2)
with the
.B MAP_32BIT
flag.

Because of the aforementioned optimization, using
.BR arch_prctl (2)
and
.BR set_thread_area (2)
in the same thread is dangerous, as they may overwrite each other's
TLS entries.

As of version 2.7, glibc provides no prototype for
.BR arch_prctl ().
You have to declare it yourself for now.
This may be fixed in future glibc versions.

.I FS
may be already used by the threading library.
Programs that use
.B ARCH_SET_FS
directly are very likely to crash.
.SH SEE ALSO
.BR mmap (2),
.BR modify_ldt (2),
.BR prctl (2),
.BR set_thread_area (2)

AMD X86-64 Programmer's manual
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1995 Michael Chastain (mec@shell.portal.com), 15 April 1995.
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.\" Modified 1997-01-31 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified 2004-06-17 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.TH BDFLUSH 2 2014-08-19 "Linux" "Linux Programmer's Manual"
.SH NAME
bdflush \- start, flush, or tune buffer-dirty-flush daemon
.SH SYNOPSIS
.nf
.B #include <sys/kdaemon.h>

.BI "int bdflush(int "  func ", long *" address );
.BI "int bdflush(int "  func ", long " data );
.fi
.SH DESCRIPTION
.IR Note :
Since Linux 2.6,
.\" As noted in a changes in the 2.5.12 source
this system call is deprecated and does nothing.
It is likely to disappear altogether in a future kernel release.
Nowadays, the task performed by
.BR bdflush ()
is handled by the kernel
.I pdflush
thread.

.BR bdflush ()
starts, flushes, or tunes the buffer-dirty-flush daemon.
Only a privileged process (one with the
.B CAP_SYS_ADMIN
capability) may call
.BR bdflush ().
.PP
If
.I func
is negative or 0, and no daemon has been started, then
.BR bdflush ()
enters the daemon code and never returns.
.PP
If
.I func
is 1,
some dirty buffers are written to disk.
.PP
If
.I func
is 2 or more and is even (low bit is 0), then
.I address
is the address of a long word,
and the tuning parameter numbered
.RI "(" "func" "\-2)/2"
is returned to the caller in that address.
.PP
If
.I func
is 3 or more and is odd (low bit is 1), then
.I data
is a long word,
and the kernel sets tuning parameter numbered
.RI "(" "func" "\-3)/2"
to that value.
.PP
The set of parameters, their values, and their valid ranges
are defined in the Linux kernel source file
.IR fs/buffer.c .
.SH RETURN VALUE
If
.I func
is negative or 0 and the daemon successfully starts,
.BR bdflush ()
never returns.
Otherwise, the return value is 0 on success and \-1 on failure, with
.I errno
set to indicate the error.
.SH ERRORS
.TP
.B EBUSY
An attempt was made to enter the daemon code after
another process has already entered.
.TP
.B EFAULT
.I address
points outside your accessible address space.
.TP
.B EINVAL
An attempt was made to read or write an invalid parameter number,
or to write an invalid value to a parameter.
.TP
.B EPERM
Caller does not have the
.B CAP_SYS_ADMIN
capability.
.SH CONFORMING TO
.BR bdflush ()
is Linux-specific and should not be used in programs
intended to be portable.
.SH SEE ALSO
.BR fsync (2),
.BR sync (2),
.BR sync (1)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 Rickard E. Faith (faith@cs.unc.edu)
.\" Portions extracted from /usr/include/sys/socket.h, which does not have
.\" any authorship information in it.  It is probably available under the GPL.
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\"
.\" Other portions are from the 6.9 (Berkeley) 3/10/91 man page:
.\"
.\" Copyright (c) 1983 The Regents of the University of California.
.\" All rights reserved.
.\"
.\" %%%LICENSE_START(BSD_4_CLAUSE_UCB)
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"     This product includes software developed by the University of
.\"     California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\" %%%LICENSE_END
.\"
.\" Modified Mon Oct 21 23:05:29 EDT 1996 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified 1998 by Andi Kleen
.\" $Id: bind.2,v 1.3 1999/04/23 19:56:07 freitag Exp $
.\" Modified 2004-06-23 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.TH BIND 2 2014-08-19 "Linux" "Linux Programmer's Manual"
.SH NAME
bind \- bind a name to a socket
.SH SYNOPSIS
.nf
.BR "#include <sys/types.h>" "          /* See NOTES */"
.B #include <sys/socket.h>
.sp
.BI "int bind(int " sockfd ", const struct sockaddr *" addr ,
.BI "         socklen_t " addrlen );
.fi
.SH DESCRIPTION
When a socket is created with
.BR socket (2),
it exists in a name space (address family) but has no address assigned to it.
.BR bind ()
assigns the address specified by
.I addr
to the socket referred to by the file descriptor
.IR sockfd .
.I addrlen
specifies the size, in bytes, of the address structure pointed to by
.IR addr .
Traditionally, this operation is called \(lqassigning a name to a socket\(rq.
.PP
It is normally necessary to assign a local address using
.BR bind ()
before a
.B SOCK_STREAM
socket may receive connections (see
.BR accept (2)).

The rules used in name binding vary between address families.
Consult the manual entries in Section 7 for detailed information.
For
.B AF_INET
see
.BR ip (7),
for
.B AF_INET6
see
.BR ipv6 (7),
for
.B AF_UNIX
see
.BR unix (7),
for
.B AF_APPLETALK
see
.BR ddp (7),
for
.B AF_PACKET
see
.BR packet (7),
for
.B AF_X25
see
.BR x25 (7)
and for
.B AF_NETLINK
see
.BR netlink (7).

The actual structure passed for the
.I addr
argument will depend on the address family.
The
.I sockaddr
structure is defined as something like:
.in +4n
.nf

struct sockaddr {
    sa_family_t sa_family;
    char        sa_data[14];
}

.fi
.in
The only purpose of this structure is to cast the structure
pointer passed in
.I addr
in order to avoid compiler warnings.
See EXAMPLE below.
.SH RETURN VALUE
On success, zero is returned.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EACCES
.\" e.g., privileged port in AF_INET domain
The address is protected, and the user is not the superuser.
.TP
.B EADDRINUSE
The given address is already in use.
.TP
.B EADDRINUSE
(Internet domain sockets)
The port number was specified as zero in the socket address structure,
but, upon attempting to bind to an ephemeral port,
it was determined that all port numbers in the ephemeral port range
are currently in use.
See the discussion of
.I /proc/sys/net/ipv4/ip_local_port_range
.BR ip (7).
.TP
.TP
.B EBADF
.I sockfd
is not a valid descriptor.
.TP
.B EINVAL
The socket is already bound to an address.
.\" This may change in the future: see
.\" .I linux/unix/sock.c for details.
.TP
.B EINVAL
.I addrlen
is wrong, or
.I addr
is not a valid address for this socket's domain.
.TP
.B ENOTSOCK
.I sockfd
is a descriptor for a file, not a socket.
.PP
The following errors are specific to UNIX domain
.RB ( AF_UNIX )
sockets:
.TP
.B EACCES
Search permission is denied on a component of the path prefix.
(See also
.BR path_resolution (7).)
.TP
.B EADDRNOTAVAIL
A nonexistent interface was requested or the requested
address was not local.
.TP
.B EFAULT
.I addr
points outside the user's accessible address space.
.TP
.B ELOOP
Too many symbolic links were encountered in resolving
.IR addr .
.TP
.B ENAMETOOLONG
.I addr
is too long.
.TP
.B ENOENT
The file does not exist.
.TP
.B ENOMEM
Insufficient kernel memory was available.
.TP
.B ENOTDIR
A component of the path prefix is not a directory.
.TP
.B EROFS
The socket inode would reside on a read-only filesystem.
.SH CONFORMING TO
SVr4, 4.4BSD, POSIX.1-2001
.RB ( bind ()
first appeared in 4.2BSD).
.\" SVr4 documents an additional
.\" .B ENOSR
.\" general error condition, and
.\" additional
.\" .B EIO
.\" and
.\" .B EISDIR
.\" UNIX-domain error conditions.
.SH NOTES
POSIX.1-2001 does not require the inclusion of
.IR <sys/types.h> ,
and this header file is not required on Linux.
However, some historical (BSD) implementations required this header
file, and portable applications are probably wise to include it.

The third argument of
.BR bind ()
is in reality an
.I int
(and this is what 4.x BSD and libc4 and libc5 have).
Some POSIX confusion resulted in the present
.IR socklen_t ,
also used by glibc.
See also
.BR accept (2).
.SH BUGS
The transparent proxy options are not described.
.\" FIXME Document transparent proxy options
.SH EXAMPLE
An example of the use of
.BR bind ()
with Internet domain sockets can be found in
.BR getaddrinfo (3).

The following example shows how to bind a stream socket in the UNIX
.RB ( AF_UNIX )
domain, and accept connections:
.\" listen.7 refers to this example.
.\" accept.7 refers to this example.
.\" unix.7 refers to this example.

.nf
#include <sys/socket.h>
#include <sys/un.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#define MY_SOCK_PATH "/somepath"
#define LISTEN_BACKLOG 50

#define handle_error(msg) \\
    do { perror(msg); exit(EXIT_FAILURE); } while (0)

int
main(int argc, char *argv[])
{
    int sfd, cfd;
    struct sockaddr_un my_addr, peer_addr;
    socklen_t peer_addr_size;

    sfd = socket(AF_UNIX, SOCK_STREAM, 0);
    if (sfd == \-1)
        handle_error("socket");

    memset(&my_addr, 0, sizeof(struct sockaddr_un));
                        /* Clear structure */
    my_addr.sun_family = AF_UNIX;
    strncpy(my_addr.sun_path, MY_SOCK_PATH,
            sizeof(my_addr.sun_path) \- 1);

    if (bind(sfd, (struct sockaddr *) &my_addr,
            sizeof(struct sockaddr_un)) == \-1)
        handle_error("bind");

    if (listen(sfd, LISTEN_BACKLOG) == \-1)
        handle_error("listen");

    /* Now we can accept incoming connections one
       at a time using accept(2) */

    peer_addr_size = sizeof(struct sockaddr_un);
    cfd = accept(sfd, (struct sockaddr *) &peer_addr,
                 &peer_addr_size);
    if (cfd == \-1)
        handle_error("accept");

    /* Code to deal with incoming connection(s)... */

    /* When no longer required, the socket pathname, MY_SOCK_PATH
       should be deleted using unlink(2) or remove(3) */
}
.fi
.SH SEE ALSO
.BR accept (2),
.BR connect (2),
.BR getsockname (2),
.BR listen (2),
.BR socket (2),
.BR getaddrinfo (3),
.BR getifaddrs (3),
.BR ip (7),
.BR ipv6 (7),
.BR path_resolution (7),
.BR socket (7),
.BR unix (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1993 Michael Haardt
.\" (michael@moria.de),
.\" Fri Apr  2 11:32:09 MET DST 1993
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.\" Modified Wed Jul 21 19:52:58 1993 by Rik Faith <faith@cs.unc.edu>
.\" Modified Sun Aug 21 17:40:38 1994 by Rik Faith <faith@cs.unc.edu>
.\"
.TH BRK 2 2014-08-19 "Linux" "Linux Programmer's Manual"
.SH NAME
brk, sbrk \- change data segment size
.SH SYNOPSIS
.B #include <unistd.h>
.sp
.BI "int brk(void *" addr );
.sp
.BI "void *sbrk(intptr_t " increment );
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR brk (),
.BR sbrk ():
.ad l
.RS 4
.PD 0
.TP 4
Since glibc 2.12:
.nf
_BSD_SOURCE || _SVID_SOURCE ||
    (_XOPEN_SOURCE\ >=\ 500 ||
        _XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED) &&
    !(_POSIX_C_SOURCE\ >=\ 200112L || _XOPEN_SOURCE\ >=\ 600)
.TP 4
.fi
Before glibc 2.12:
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE\ >=\ 500 ||
_XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED
.PD
.RE
.ad b
.SH DESCRIPTION
.BR brk ()
and
.BR sbrk ()
change the location of the
.IR "program break" ,
which defines the end of the process's data segment
(i.e., the program break is the first location after the end of the
uninitialized data segment).
Increasing the program break has the effect of
allocating memory to the process;
decreasing the break deallocates memory.

.BR brk ()
sets the end of the data segment to the value specified by
.IR addr ,
when that value is reasonable, the system has enough memory,
and the process does not exceed its maximum data size (see
.BR setrlimit (2)).

.BR sbrk ()
increments the program's data space by
.I increment
bytes.
Calling
.BR sbrk ()
with an
.I increment
of 0 can be used to find the current location of the program break.
.SH RETURN VALUE
On success,
.BR brk ()
returns zero.
On error, \-1 is returned, and
.I errno
is set to
.BR ENOMEM .

On success,
.BR sbrk ()
returns the previous program break.
(If the break was increased,
then this value is a pointer to the start of the newly allocated memory).
On error,
.I "(void\ *)\ \-1"
is returned, and
.I errno
is set to
.BR ENOMEM .
.SH CONFORMING TO
4.3BSD; SUSv1, marked LEGACY in SUSv2, removed in POSIX.1-2001.
.\"
.\" .BR brk ()
.\" and
.\" .BR sbrk ()
.\" are not defined in the C Standard and are deliberately excluded from the
.\" POSIX.1-1990 standard (see paragraphs B.1.1.1.3 and B.8.3.3).
.SH NOTES
Avoid using
.BR brk ()
and
.BR sbrk ():
the
.BR malloc (3)
memory allocation package is the
portable and comfortable way of allocating memory.

Various systems use various types for the argument of
.BR sbrk ().
Common are \fIint\fP, \fIssize_t\fP, \fIptrdiff_t\fP, \fIintptr_t\fP.
.\" One sees
.\" \fIint\fP (e.g., XPGv4, DU 4.0, HP-UX 11, FreeBSD 4.0, OpenBSD 3.2),
.\" \fIssize_t\fP (OSF1 2.0, Irix 5.3, 6.5),
.\" \fIptrdiff_t\fP (libc4, libc5, ulibc, glibc 2.0, 2.1),
.\" \fIintptr_t\fP (e.g., XPGv5, AIX, SunOS 5.8, 5.9, FreeBSD 4.7, NetBSD 1.6,
.\" Tru64 5.1, glibc2.2).
.SS C library/kernel ABI differences
The return value described above for
.BR brk ()
is the behavior provided by the glibc wrapper function for the Linux
.BR brk ()
system call.
(On most other implementations, the return value from
.BR brk ()
is the same; this return value was also specified in SUSv2.)
However,
the actual Linux system call returns the new program break on success.
On failure, the system call returns the current break.
The glibc wrapper function does some work
(i.e., checks whether the new break is less than
.IR addr )
to provide the 0 and \-1 return values described above.

On Linux,
.BR sbrk ()
is implemented as a library function that uses the
.BR brk ()
system call, and does some internal bookkeeping so that it can
return the old break value.
.SH SEE ALSO
.BR execve (2),
.BR getrlimit (2),
.BR end (3),
.BR malloc (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Written by Ralf Baechle (ralf@waldorf-gmbh.de),
.\" Copyright (c) 1994, 1995 Waldorf GMBH
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.TH CACHEFLUSH 2 2015-02-21 "Linux" "Linux Programmer's Manual"
.SH NAME
cacheflush \- flush contents of instruction and/or data cache
.SH SYNOPSIS
.nf
.B #include <asm/cachectl.h>
.sp
.BI "int cacheflush(char *" addr ", int "nbytes ", int "cache );
.fi
.SH DESCRIPTION
.BR cacheflush ()
flushes the contents of the indicated cache(s) for the
user addresses in the range
.I addr
to
.IR (addr+nbytes-1) .
.I cache
may be one of:
.TP
.B ICACHE
Flush the instruction cache.
.TP
.B DCACHE
Write back to memory and invalidate the affected valid cache lines.
.TP
.B BCACHE
Same as
.BR (ICACHE|DCACHE) .
.SH RETURN VALUE
.BR cacheflush ()
returns 0 on success or \-1 on error.
If errors are detected,
.I errno
will indicate the error.
.SH ERRORS
.TP
.B EFAULT
Some or all of the address range
.I addr
to
.I (addr+nbytes-1)
is not accessible.
.TP
.B EINVAL
.I cache
is not one of
.BR ICACHE ,
.BR DCACHE ,
or
.BR BCACHE
(but see BUGS).
.SH CONFORMING TO
Historically, this system calls was available on all MIPS UNIX variants
including RISC/os, IRIX, Ultrix, NetBSD, OpenBSD, and FreeBSD
(and also on some non-UNIX MIPS operating systems), so that
the existence of this call in MIPS operating systems is a de-facto
standard.
.SS Caveat
.BR cacheflush ()
should not be used in programs intended to be portable.
On Linux, this call first appeared on the MIPS architecture,
but nowadays, Linux provides a
.BR cacheflush ()
system call on some other architectures, but with different arguments.
.SH BUGS
Linux kernels older than version 2.6.11 ignore the
.I addr
and
.I nbytes
arguments, making this function fairly expensive.
Therefore, the whole cache is always flushed.

This function is always behaving as if
.BR BCACHE
has been passed for the
.I cache
argument and does not do any error checking on the
.I cache
argument.
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" written by Andrew Morgan <morgan@kernel.org>
.\"
.\" %%%LICENSE_START(GPL_NOVERSION_ONELINE)
.\" may be distributed as per GPL
.\" %%%LICENSE_END
.\"
.\" Modified by David A. Wheeler <dwheeler@ida.org>
.\" Modified 2004-05-27, mtk
.\" Modified 2004-06-21, aeb
.\" Modified 2008-04-28, morgan of kernel.org
.\"     Update in line with addition of file capabilities and
.\"     64-bit capability sets in kernel 2.6.2[45].
.\" Modified 2009-01-26, andi kleen
.\"
.TH CAPGET 2 2015-02-21 "Linux" "Linux Programmer's Manual"
.SH NAME
capget, capset \- set/get capabilities of thread(s)
.SH SYNOPSIS
.B #include <sys/capability.h>
.sp
.BI "int capget(cap_user_header_t " hdrp ", cap_user_data_t " datap );
.sp
.BI "int capset(cap_user_header_t " hdrp ", const cap_user_data_t " datap );
.SH DESCRIPTION
As of Linux 2.2,
the power of the superuser (root) has been partitioned into
a set of discrete capabilities.
Each thread has a set of effective capabilities identifying
which capabilities (if any) it may currently exercise.
Each thread also has a set of inheritable capabilities that may be
passed through an
.BR execve (2)
call, and a set of permitted capabilities
that it can make effective or inheritable.
.PP
These two system calls are the raw kernel interface for getting and
setting thread capabilities.
Not only are these system calls specific to Linux,
but the kernel API is likely to change and use of
these system calls (in particular the format of the
.I cap_user_*_t
types) is subject to extension with each kernel revision,
but old programs will keep working.
.sp
The portable interfaces are
.BR cap_set_proc (3)
and
.BR cap_get_proc (3);
if possible, you should use those interfaces in applications.
If you wish to use the Linux extensions in applications, you should
use the easier-to-use interfaces
.BR capsetp (3)
and
.BR capgetp (3).
.SS Current details
Now that you have been warned, some current kernel details.
The structures are defined as follows.
.sp
.nf
.in +4n
#define _LINUX_CAPABILITY_VERSION_1  0x19980330
#define _LINUX_CAPABILITY_U32S_1     1

        /* V2 added in Linux 2.6.25; deprecated */
#define _LINUX_CAPABILITY_VERSION_2  0x20071026
.\" commit e338d263a76af78fe8f38a72131188b58fceb591
.\" Added 64 bit capability support
#define _LINUX_CAPABILITY_U32S_2     2

        /* V3 added in Linux 2.6.26 */
#define _LINUX_CAPABILITY_VERSION_3  0x20080522
.\" commit ca05a99a54db1db5bca72eccb5866d2a86f8517f
#define _LINUX_CAPABILITY_U32S_3     2


typedef struct __user_cap_header_struct {
   __u32 version;
   int pid;
} *cap_user_header_t;

typedef struct __user_cap_data_struct {
   __u32 effective;
   __u32 permitted;
   __u32 inheritable;
} *cap_user_data_t;
.fi
.in -4n
.sp
The
.IR effective ,
.IR permitted ,
and
.I inheritable
fields are bit masks of the capabilities defined in
.BR capabilities (7).
Note that the
.B CAP_*
values are bit indexes and need to be bit-shifted before ORing into
the bit fields.
To define the structures for passing to the system call, you have to use the
.I struct __user_cap_header_struct
and
.I struct __user_cap_data_struct
names because the typedefs are only pointers.

Kernels prior to 2.6.25 prefer
32-bit capabilities with version
.BR _LINUX_CAPABILITY_VERSION_1 .
Linux 2.6.25 added 64-bit capability sets, with version
.BR _LINUX_CAPABILITY_VERSION_2 .
There was, however, an API glitch, and Linux 2.6.26 added
.BR _LINUX_CAPABILITY_VERSION_3
to fix the problem.

Note that 64-bit capabilities use
.IR datap [0]
and
.IR datap [1],
whereas 32-bit capabilities use only
.IR datap [0].

On kernels that support file capabilities (VFS capability support),
these system calls behave slightly differently.
This support was added as an option in Linux 2.6.24,
and became fixed (nonoptional) in Linux 2.6.33.

For
.BR capget ()
calls, one can probe the capabilities of any process by specifying its
process ID with the
.I hdrp->pid
field value.
.SS With VFS capability support
VFS Capability support creates a file-attribute method for adding
capabilities to privileged executables.
This privilege model obsoletes kernel support for one process
asynchronously setting the capabilities of another.
That is, with VFS support, for
.BR capset ()
calls the only permitted values for
.I hdrp->pid
are 0 or
.BR getpid (2),
which are equivalent.
.SS Without VFS capability support
When the kernel does not support VFS capabilities,
.BR capset ()
calls can operate on the capabilities of the thread specified by the
.I pid
field of
.I hdrp
when that is nonzero, or on the capabilities of the calling thread if
.I pid
is 0.
If
.I pid
refers to a single-threaded process, then
.I pid
can be specified as a traditional process ID;
operating on a thread of a multithreaded process requires a thread ID
of the type returned by
.BR gettid (2).
For
.BR capset (),
.I pid
can also be: \-1, meaning perform the change on all threads except the
caller and
.BR init (1);
or a value less than \-1, in which case the change is applied
to all members of the process group whose ID is \-\fIpid\fP.

For details on the data, see
.BR capabilities (7).
.SH RETURN VALUE
On success, zero is returned.
On error, \-1 is returned, and
.I errno
is set appropriately.

The calls will fail with the error
.BR EINVAL ,
and set the
.I version
field of
.I hdrp
to the kernel preferred value of
.B _LINUX_CAPABILITY_VERSION_?
when an unsupported
.I version
value is specified.
In this way, one can probe what the current
preferred capability revision is.
.SH ERRORS
.TP
.B EFAULT
Bad memory address.
.I hdrp
must not be NULL.
.I datap
may be NULL only when the user is trying to determine the preferred
capability version format supported by the kernel.
.TP
.B EINVAL
One of the arguments was invalid.
.TP
.B EPERM
An attempt was made to add a capability to the Permitted set, or to set
a capability in the Effective or Inheritable sets that is not in the
Permitted set.
.TP
.B EPERM
The caller attempted to use
.BR capset ()
to modify the capabilities of a thread other than itself,
but lacked sufficient privilege.
For kernels supporting VFS
capabilities, this is never permitted.
For kernels lacking VFS
support, the
.B CAP_SETPCAP
capability is required.
(A bug in kernels before 2.6.11 meant that this error could also
occur if a thread without this capability tried to change its
own capabilities by specifying the
.I pid
field as a nonzero value (i.e., the value returned by
.BR getpid (2))
instead of 0.)
.TP
.B ESRCH
No such thread.
.SH CONFORMING TO
These system calls are Linux-specific.
.SH NOTES
The portable interface to the capability querying and setting
functions is provided by the
.I libcap
library and is available here:
.br
.UR http://git.kernel.org/cgit\:/linux\:/kernel\:/git\:/morgan\:\:/libcap.git
.UE
.SH SEE ALSO
.BR clone (2),
.BR gettid (2),
.BR capabilities (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1992 Drew Eckhardt (drew@cs.colorado.edu), March 28, 1992
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified by Michael Haardt <michael@moria.de>
.\" Modified 1993-07-21 by Rik Faith <faith@cs.unc.edu>
.\" Modified 1995-04-15 by Michael Chastain <mec@shell.portal.com>:
.\"   Added 'fchdir'. Fixed bugs in error section.
.\" Modified 1996-10-21 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified 1997-08-21 by Joseph S. Myers <jsm28@cam.ac.uk>
.\" Modified 2004-06-23 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.TH CHDIR 2 2010-11-25 "Linux" "Linux Programmer's Manual"
.SH NAME
chdir, fchdir \- change working directory
.SH SYNOPSIS
.B #include <unistd.h>
.sp
.BI "int chdir(const char *" path );
.br
.BI "int fchdir(int " fd );
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR fchdir ():
.PD 0
.ad l
.RS 4
_BSD_SOURCE || _XOPEN_SOURCE\ >=\ 500 ||
_XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED
.br
|| /* Since glibc 2.12: */ _POSIX_C_SOURCE\ >=\ 200809L
.RE
.ad
.PD
.SH DESCRIPTION
.BR chdir ()
changes the current working directory of the calling process to the
directory specified in
.IR path .
.PP
.BR fchdir ()
is identical to
.BR chdir ();
the only difference is that the directory is given as an
open file descriptor.
.SH RETURN VALUE
On success, zero is returned.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
Depending on the filesystem, other errors can be returned.
The more
general errors for
.BR chdir ()
are listed below:
.TP
.B EACCES
Search permission is denied for one of the components of
.IR path .
(See also
.BR path_resolution (7).)
.TP
.B EFAULT
.I path
points outside your accessible address space.
.TP
.B EIO
An I/O error occurred.
.TP
.B ELOOP
Too many symbolic links were encountered in resolving
.IR path .
.TP
.B ENAMETOOLONG
.I path
is too long.
.TP
.B ENOENT
The file does not exist.
.TP
.B ENOMEM
Insufficient kernel memory was available.
.TP
.B ENOTDIR
A component of
.I path
is not a directory.
.PP
The general errors for
.BR fchdir ()
are listed below:
.TP
.B EACCES
Search permission was denied on the directory open on
.IR fd .
.TP
.B EBADF
.I fd
is not a valid file descriptor.
.SH CONFORMING TO
SVr4, 4.4BSD, POSIX.1-2001.
.SH NOTES
The current working directory is the starting point for interpreting
relative pathnames (those not starting with \(aq/\(aq).

A child process created via
.BR fork (2)
inherits its parent's current working directory.
The current working directory is left unchanged by
.BR execve (2).
.SH SEE ALSO
.BR chroot (2),
.BR getcwd (3),
.BR path_resolution (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1992 Drew Eckhardt (drew@cs.colorado.edu), March 28, 1992
.\" and Copyright (C) 2006, 2014 Michael Kerrisk
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified by Michael Haardt <michael@moria.de>
.\" Modified 1993-07-21 by Rik Faith <faith@cs.unc.edu>
.\" Modified 1997-01-12 by Michael Haardt
.\"   <michael@cantor.informatik.rwth-aachen.de>: NFS details
.\" Modified 2004-06-23 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.TH CHMOD 2 2014-08-19 "Linux" "Linux Programmer's Manual"
.SH NAME
chmod, fchmod, fchmodat \- change permissions of a file
.SH SYNOPSIS
.nf
.B #include <sys/stat.h>
.sp
.BI "int chmod(const char *" pathname ", mode_t " mode );
.br
.BI "int fchmod(int " fd ", mode_t " mode );
.sp
.BR "#include <fcntl.h>" "           /* Definition of AT_* constants */"
.B #include <sys/stat.h>
.sp
.BI "int fchmodat(int " dirfd ", const char *" pathname ", mode_t " \
mode ", int " flags );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.PD 0
.BR fchmod ():
.RS 4
_BSD_SOURCE ||
_XOPEN_SOURCE\ >=\ 500 ||
_XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED
.br
|| /* Since glibc 2.12: */ _POSIX_C_SOURCE\ >=\ 200809L
.RE
.PD
.sp
.BR fchmodat ():
.PD 0
.ad l
.RS 4
.TP 4
Since glibc 2.10:
_XOPEN_SOURCE\ >=\ 700 || _POSIX_C_SOURCE\ >=\ 200809L
.TP
Before glibc 2.10:
_ATFILE_SOURCE
.RE
.ad
.PD
.ad
.SH DESCRIPTION
The
.BR chmod ()
and
.BR fchmod ()
system calls change the permissions of a file.
They differ only in how the file is specified:
.IP * 2
.BR chmod ()
changes the permissions of the file specified whose pathname is given in
.IR pathname ,
which is dereferenced if it is a symbolic link.
.IP *
.BR fchmod ()
changes the permissions of the file referred to by the open file descriptor
.IR fd .
.PP
The new file permissions are specified in
.IR mode ,
which is a bit mask created by ORing together zero or
more of the following:
.TP 18
.BR S_ISUID "  (04000)"
set-user-ID (set process effective user ID on
.BR execve (2))
.TP
.BR S_ISGID "  (02000)"
set-group-ID (set process effective group ID on
.BR execve (2);
mandatory locking, as described in
.BR fcntl (2);
take a new file's group from parent directory, as described in
.BR chown (2)
and
.BR mkdir (2))
.TP
.BR S_ISVTX "  (01000)"
sticky bit (restricted deletion flag, as described in
.BR unlink (2))
.TP
.BR S_IRUSR "  (00400)"
read by owner
.TP
.BR S_IWUSR "  (00200)"
write by owner
.TP
.BR S_IXUSR "  (00100)"
execute/search by owner ("search" applies for directories,
and means that entries within the directory can be accessed)
.TP
.BR S_IRGRP "  (00040)"
read by group
.TP
.BR S_IWGRP "  (00020)"
write by group
.TP
.BR S_IXGRP "  (00010)"
execute/search by group
.TP
.BR S_IROTH "  (00004)"
read by others
.TP
.BR S_IWOTH "  (00002)"
write by others
.TP
.BR S_IXOTH "  (00001)"
execute/search by others
.PP
The effective UID of the calling process must match the owner of the file,
or the process must be privileged (Linux: it must have the
.B CAP_FOWNER
capability).

If the calling process is not privileged (Linux: does not have the
.B CAP_FSETID
capability), and the group of the file does not match
the effective group ID of the process or one of its
supplementary group IDs, the
.B S_ISGID
bit will be turned off,
but this will not cause an error to be returned.

As a security measure, depending on the filesystem,
the set-user-ID and set-group-ID execution bits
may be turned off if a file is written.
(On Linux this occurs if the writing process does not have the
.B CAP_FSETID
capability.)
On some filesystems, only the superuser can set the sticky bit,
which may have a special meaning.
For the sticky bit, and for set-user-ID and set-group-ID bits on
directories, see
.BR stat (2).

On NFS filesystems, restricting the permissions will immediately influence
already open files, because the access control is done on the server, but
open files are maintained by the client.
Widening the permissions may be
delayed for other clients if attribute caching is enabled on them.
.\"
.\"
.SS fchmodat()
The
.BR fchmodat ()
system call operates in exactly the same way as
.BR chmod (),
except for the differences described here.

If the pathname given in
.I pathname
is relative, then it is interpreted relative to the directory
referred to by the file descriptor
.I dirfd
(rather than relative to the current working directory of
the calling process, as is done by
.BR chmod ()
for a relative pathname).

If
.I pathname
is relative and
.I dirfd
is the special value
.BR AT_FDCWD ,
then
.I pathname
is interpreted relative to the current working
directory of the calling process (like
.BR chmod ()).

If
.I pathname
is absolute, then
.I dirfd
is ignored.

.I flags
can either be 0, or include the following flag:
.TP
.B AT_SYMLINK_NOFOLLOW
If
.I pathname
is a symbolic link, do not dereference it:
instead operate on the link itself.
This flag is not currently implemented.
.PP
See
.BR openat (2)
for an explanation of the need for
.BR fchmodat ().
.SH RETURN VALUE
On success, zero is returned.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
Depending on the filesystem,
errors other than those listed below can be returned.

The more general errors for
.BR chmod ()
are listed below:
.TP
.B EACCES
Search permission is denied on a component of the path prefix.
(See also
.BR path_resolution (7).)
.TP
.B EFAULT
.I pathname
points outside your accessible address space.
.TP
.B EIO
An I/O error occurred.
.TP
.B ELOOP
Too many symbolic links were encountered in resolving
.IR pathname .
.TP
.B ENAMETOOLONG
.I pathname
is too long.
.TP
.B ENOENT
The file does not exist.
.TP
.B ENOMEM
Insufficient kernel memory was available.
.TP
.B ENOTDIR
A component of the path prefix is not a directory.
.TP
.B EPERM
The effective UID does not match the owner of the file,
and the process is not privileged (Linux: it does not have the
.B CAP_FOWNER
capability).
.TP
.B EROFS
The named file resides on a read-only filesystem.
.PP
The general errors for
.BR fchmod ()
are listed below:
.TP
.B EBADF
The file descriptor
.I fd
is not valid.
.TP
.B EIO
See above.
.TP
.B EPERM
See above.
.TP
.B EROFS
See above.
.PP
The same errors that occur for
.BR chmod ()
can also occur for
.BR fchmodat ().
The following additional errors can occur for
.BR fchmodat ():
.TP
.B EBADF
.I dirfd
is not a valid file descriptor.
.TP
.B EINVAL
Invalid flag specified in
.IR flags .
.TP
.B ENOTDIR
.I pathname
is relative and
.I dirfd
is a file descriptor referring to a file other than a directory.
.TP
.B ENOTSUP
.I flags
specified
.BR AT_SYMLINK_NOFOLLOW ,
which is not supported.
.SH VERSIONS
.BR fchmodat ()
was added to Linux in kernel 2.6.16;
library support was added to glibc in version 2.4.
.SH CONFORMING TO
.BR chmod (),
.BR fchmod ():
4.4BSD, SVr4, POSIX.1-2001i, POSIX.1-2008.

.BR fchmodat ():
POSIX.1-2008.
.SH NOTES
.SS C library/kernel ABI differences
The GNU C library
.BR fchmodat ()
wrapper function implements the POSIX-specified
interface described in this page.
This interface differs from the underlying Linux system call, which does
.I not
have a
.I flags
argument.
.SS Glibc notes
On older kernels where
.BR fchmodat ()
is unavailable, the glibc wrapper function falls back to the use of
.BR chmod ().
When
.I pathname
is a relative pathname,
glibc constructs a pathname based on the symbolic link in
.IR /proc/self/fd
that corresponds to the
.IR dirfd
argument.
.SH SEE ALSO
.BR chown (2),
.BR execve (2),
.BR open (2),
.BR stat (2),
.BR path_resolution (7),
.BR symlink (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1992 Drew Eckhardt (drew@cs.colorado.edu), March 28, 1992
.\" and Copyright (c) 1998 Andries Brouwer (aeb@cwi.nl)
.\" and Copyright (c) 2006, 2007, 2008, 2014 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified by Michael Haardt <michael@moria.de>
.\" Modified 1993-07-21 by Rik Faith <faith@cs.unc.edu>
.\" Modified 1996-07-09 by Andries Brouwer <aeb@cwi.nl>
.\" Modified 1996-11-06 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified 1997-05-18 by Michael Haardt <michael@cantor.informatik.rwth-aachen.de>
.\" Modified 2004-06-23 by Michael Kerrisk <mtk.manpages@gmail.com>
.\" 2007-07-08, mtk, added an example program; updated SYNOPSIS
.\" 2008-05-08, mtk, Describe rules governing ownership of new files
.\"     (bsdgroups versus sysvgroups, and the effect of the parent
.\"     directory's set-group-ID mode bit).
.\"
.TH CHOWN 2 2015-05-07 "Linux" "Linux Programmer's Manual"
.SH NAME
chown, fchown, lchown, fchownat \- change ownership of a file
.SH SYNOPSIS
.nf
.B #include <unistd.h>
.sp
.BI "int chown(const char *" pathname ", uid_t " owner ", gid_t " group );
.br
.BI "int fchown(int " fd ", uid_t " owner ", gid_t " group );
.br
.BI "int lchown(const char *" pathname ", uid_t " owner ", gid_t " group );
.sp
.BR "#include <fcntl.h>           " "/* Definition of AT_* constants */"
.B #include <unistd.h>
.sp
.BI "int fchownat(int " dirfd ", const char *" pathname ,
.BI "             uid_t " owner ", gid_t " group ", int " flags );
.fi
.sp
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR fchown (),
.BR lchown ():
.PD 0
.ad l
.RS 4
_BSD_SOURCE || _XOPEN_SOURCE\ >=\ 500 ||
_XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED
.br
|| /* Since glibc 2.12: */ _POSIX_C_SOURCE\ >=\ 200809L
.RE
.sp
.BR fchownat ():
.PD 0
.ad l
.RS 4
.TP 4
Since glibc 2.10:
_XOPEN_SOURCE\ >=\ 700 || _POSIX_C_SOURCE\ >=\ 200809L
.TP
Before glibc 2.10:
_ATFILE_SOURCE
.RE
.ad
.PD
.SH DESCRIPTION
These system calls change the owner and group of a file.
The
.BR chown (),
.BR fchown (),
and
.BR lchown ()
system calls differ only in how the file is specified:
.IP * 2
.BR chown ()
changes the ownership of the file specified by
.IR pathname ,
which is dereferenced if it is a symbolic link.
.IP *
.BR fchown ()
changes the ownership of the file referred to by the open file descriptor
.IR fd .
.IP *
.BR lchown ()
is like
.BR chown (),
but does not dereference symbolic links.
.PP
Only a privileged process (Linux: one with the
.B CAP_CHOWN
capability) may change the owner of a file.
The owner of a file may change the group of the file
to any group of which that owner is a member.
A privileged process (Linux: with
.BR CAP_CHOWN )
may change the group arbitrarily.

If the
.I owner
or
.I group
is specified as \-1, then that ID is not changed.

When the owner or group of an executable file are
changed by an unprivileged user the
.B S_ISUID
and
.B S_ISGID
mode bits are cleared.
POSIX does not specify whether
this also should happen when root does the
.BR chown ();
the Linux behavior depends on the kernel version.
.\" In Linux 2.0 kernels, superuser was like everyone else
.\" In 2.2, up to 2.2.12, these bits were not cleared for superuser.
.\" Since 2.2.13, superuser is once more like everyone else.
In case of a non-group-executable file (i.e., one for which the
.B S_IXGRP
bit is not set) the
.B S_ISGID
bit indicates mandatory locking, and is not cleared by a
.BR chown ().
.SS fchownat()
The
.BR fchownat ()
system call operates in exactly the same way as
.BR chown (),
except for the differences described here.

If the pathname given in
.I pathname
is relative, then it is interpreted relative to the directory
referred to by the file descriptor
.I dirfd
(rather than relative to the current working directory of
the calling process, as is done by
.BR chown ()
for a relative pathname).

If
.I pathname
is relative and
.I dirfd
is the special value
.BR AT_FDCWD ,
then
.I pathname
is interpreted relative to the current working
directory of the calling process (like
.BR chown ()).

If
.I pathname
is absolute, then
.I dirfd
is ignored.

The
.I flags
argument is a bit mask created by ORing together
0 or more of the following values;
.TP
.BR AT_EMPTY_PATH " (since Linux 2.6.39)"
.\" commit 65cfc6722361570bfe255698d9cd4dccaf47570d
If
.I pathname
is an empty string, operate on the file referred to by
.IR dirfd
(which may have been obtained using the
.BR open (2)
.B O_PATH
flag).
In this case,
.I dirfd
can refer to any type of file, not just a directory.
If
.I dirfd
is
.BR AT_FDCWD ,
the call operates on the current working directory.
This flag is Linux-specific; define
.B _GNU_SOURCE
.\" Before glibc 2.16, defining _ATFILE_SOURCE sufficed
to obtain its definition.

.TP
.B AT_SYMLINK_NOFOLLOW
If
.I pathname
is a symbolic link, do not dereference it:
instead operate on the link itself, like
.BR lchown ().
(By default,
.BR fchownat ()
dereferences symbolic links, like
.BR chown ().)
.PP
See
.BR openat (2)
for an explanation of the need for
.BR fchownat ().
.SH RETURN VALUE
On success, zero is returned.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
Depending on the filesystem,
errors other than those listed below can be returned.

The more general errors for
.BR chown ()
are listed below.
.TP
.B EACCES
Search permission is denied on a component of the path prefix.
(See also
.BR path_resolution (7).)
.TP
.B EFAULT
.I pathname
points outside your accessible address space.
.TP
.B ELOOP
Too many symbolic links were encountered in resolving
.IR pathname .
.TP
.B ENAMETOOLONG
.I pathname
is too long.
.TP
.B ENOENT
The file does not exist.
.TP
.B ENOMEM
Insufficient kernel memory was available.
.TP
.B ENOTDIR
A component of the path prefix is not a directory.
.TP
.B EPERM
The calling process did not have the required permissions
(see above) to change owner and/or group.
.TP
.B EROFS
The named file resides on a read-only filesystem.
.PP
The general errors for
.BR fchown ()
are listed below:
.TP
.B EBADF
The descriptor is not valid.
.TP
.B EIO
A low-level I/O error occurred while modifying the inode.
.TP
.B ENOENT
See above.
.TP
.B EPERM
See above.
.TP
.B EROFS
See above.
.PP
The same errors that occur for
.BR chown ()
can also occur for
.BR fchownat ().
The following additional errors can occur for
.BR fchownat ():
.TP
.B EBADF
.I dirfd
is not a valid file descriptor.
.TP
.B EINVAL
Invalid flag specified in
.IR flags .
.TP
.B ENOTDIR
.I pathname
is relative and
.I dirfd
is a file descriptor referring to a file other than a directory.
.SH VERSIONS
.BR fchownat ()
was added to Linux in kernel 2.6.16;
library support was added to glibc in version 2.4.
.SH CONFORMING TO
.BR chown (),
.BR fchown (),
.BR lchown ():
4.4BSD, SVr4, POSIX.1-2001, POSIX.1-2008.

The 4.4BSD version can be
used only by the superuser (that is, ordinary users cannot give away files).
.\" chown():
.\" SVr4 documents EINVAL, EINTR, ENOLINK and EMULTIHOP returns, but no
.\" ENOMEM.  POSIX.1 does not document ENOMEM or ELOOP error conditions.
.\" fchown():
.\" SVr4 documents additional EINVAL, EIO, EINTR, and ENOLINK
.\" error conditions.

.BR fchownat ():
POSIX.1-2008.
.SH NOTES
.SS Ownership of new files
When a new file is created (by, for example,
.BR open (2)
or
.BR mkdir (2)),
its owner is made the same as the filesystem user ID of the
creating process.
The group of the file depends on a range of factors,
including the type of filesystem,
the options used to mount the filesystem,
and whether or not the set-group-ID mode bit is enabled
on the parent directory.
If the filesystem supports the
.I "\-o\ grpid"
(or, synonymously
.IR "\-o\ bsdgroups" )
and
.I "\-o\ nogrpid"
(or, synonymously
.IR "\-o\ sysvgroups" )
.BR mount (8)
options, then the rules are as follows:
.IP * 2
If the filesystem is mounted with
.IR "\-o\ grpid" ,
then the group of a new file is made
the same as that of the parent directory.
.IP *
If the filesystem is mounted with
.IR "\-o\ nogrpid"
and the set-group-ID bit is disabled on the parent directory,
then the group of a new file is made the same as the
process's filesystem GID.
.IP *
If the filesystem is mounted with
.IR "\-o\ nogrpid"
and the set-group-ID bit is enabled on the parent directory,
then the group of a new file is made
the same as that of the parent directory.
.PP
As at Linux 2.6.25,
the
.IR "\-o\ grpid"
and
.IR "\-o\ nogrpid"
mount options are supported by ext2, ext3, ext4, and XFS.
Filesystems that don't support these mount options follow the
.IR "\-o\ nogrpid"
rules.
.SS Glibc notes
On older kernels where
.BR fchownat ()
is unavailable, the glibc wrapper function falls back to the use of
.BR chown ()
and
.BR lchown ().
When
.I pathname
is a relative pathname,
glibc constructs a pathname based on the symbolic link in
.IR /proc/self/fd
that corresponds to the
.IR dirfd
argument.
.SS NFS
The
.BR chown ()
semantics are deliberately violated on NFS filesystems
which have UID mapping enabled.
Additionally, the semantics of all system
calls which access the file contents are violated, because
.BR chown ()
may cause immediate access revocation on already open files.
Client side
caching may lead to a delay between the time where ownership have
been changed to allow access for a user and the time where the file can
actually be accessed by the user on other clients.
.SS Historical details
The original Linux
.BR chown (),
.BR fchown (),
and
.BR lchown ()
system calls supported only 16-bit user and group IDs.
Subsequently, Linux 2.4 added
.BR chown32 (),
.BR fchown32 (),
and
.BR lchown32 (),
supporting 32-bit IDs.
The glibc
.BR chown (),
.BR fchown (),
and
.BR lchown ()
wrapper functions transparently deal with the variations across kernel versions.

In versions of Linux prior to 2.1.81 (and distinct from 2.1.46),
.BR chown ()
did not follow symbolic links.
Since Linux 2.1.81,
.BR chown ()
does follow symbolic links, and there is a new system call
.BR lchown ()
that does not follow symbolic links.
Since Linux 2.1.86, this new call (that has the same semantics
as the old
.BR chown ())
has got the same syscall number, and
.BR chown ()
got the newly introduced number.
.SH EXAMPLE
.PP
The following program changes the ownership of the file named in
its second command-line argument to the value specified in its
first command-line argument.
The new owner can be specified either as a numeric user ID,
or as a username (which is converted to a user ID by using
.BR getpwnam (3)
to perform a lookup in the system password file).
.SS Program source
.nf
#include <pwd.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

int
main(int argc, char *argv[])
{
    uid_t uid;
    struct passwd *pwd;
    char *endptr;

    if (argc != 3 || argv[1][0] == \(aq\\0\(aq) {
        fprintf(stderr, "%s <owner> <file>\\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    uid = strtol(argv[1], &endptr, 10);  /* Allow a numeric string */

    if (*endptr != \(aq\\0\(aq) {         /* Was not pure numeric string */
        pwd = getpwnam(argv[1]);   /* Try getting UID for username */
        if (pwd == NULL) {
            perror("getpwnam");
            exit(EXIT_FAILURE);
        }

        uid = pwd\->pw_uid;
    }

    if (chown(argv[2], uid, \-1) == \-1) {
        perror("chown");
        exit(EXIT_FAILURE);
    }

    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR chmod (2),
.BR flock (2),
.BR path_resolution (7),
.BR symlink (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1992 Drew Eckhardt (drew@cs.colorado.edu), March 28, 1992
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified by Michael Haardt <michael@moria.de>
.\" Modified 1993-07-21 by Rik Faith <faith@cs.unc.edu>
.\" Modified 1994-08-21 by Michael Chastain <mec@shell.portal.com>
.\" Modified 1996-06-13 by aeb
.\" Modified 1996-11-06 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified 1997-08-21 by Joseph S. Myers <jsm28@cam.ac.uk>
.\" Modified 2004-06-23 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.TH CHROOT 2 2010-09-20 "Linux" "Linux Programmer's Manual"
.SH NAME
chroot \- change root directory
.SH SYNOPSIS
.B #include <unistd.h>
.sp
.BI "int chroot(const char *" path );
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR chroot ():
.ad l
.RS 4
.PD 0
.TP 4
Since glibc 2.2.2:
.nf
_BSD_SOURCE ||
    (_XOPEN_SOURCE\ >=\ 500 ||
        _XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED) &&
    !(_POSIX_C_SOURCE\ >=\ 200112L || _XOPEN_SOURCE\ >=\ 600)
.TP 4
.fi
Before glibc 2.2.2: none
.PD
.RE
.ad b
.SH DESCRIPTION
.BR chroot ()
changes the root directory of the calling process to that specified in
.IR path .
This directory will be used for pathnames beginning with \fI/\fP.
The root directory is inherited by all children of the calling process.

Only a privileged process (Linux: one with the
.B CAP_SYS_CHROOT
capability) may call
.BR chroot ().

This call changes an ingredient in the pathname resolution process
and does nothing else.

This call does not change the current working directory,
so that after the call \(aq\fI.\fP\(aq can
be outside the tree rooted at \(aq\fI/\fP\(aq.
In particular, the superuser can escape from a "chroot jail"
by doing:
.nf

    mkdir foo; chroot foo; cd ..
.fi

This call does not close open file descriptors, and such file
descriptors may allow access to files outside the chroot tree.
.SH RETURN VALUE
On success, zero is returned.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
Depending on the filesystem, other errors can be returned.
The more general errors are listed below:
.TP
.B EACCES
Search permission is denied on a component of the path prefix.
(See also
.BR path_resolution (7).)
.\" Also search permission is required on the final component,
.\" maybe just to guarantee that it is a directory?
.TP
.B EFAULT
.I path
points outside your accessible address space.
.TP
.B EIO
An I/O error occurred.
.TP
.B ELOOP
Too many symbolic links were encountered in resolving
.IR path .
.TP
.B ENAMETOOLONG
.I path
is too long.
.TP
.B ENOENT
The file does not exist.
.TP
.B ENOMEM
Insufficient kernel memory was available.
.TP
.B ENOTDIR
A component of
.I path
is not a directory.
.TP
.B EPERM
The caller has insufficient privilege.
.SH CONFORMING TO
SVr4, 4.4BSD, SUSv2 (marked LEGACY).
This function is not part of POSIX.1-2001.
.\" SVr4 documents additional EINTR, ENOLINK and EMULTIHOP error conditions.
.\" X/OPEN does not document EIO, ENOMEM or EFAULT error conditions.
.SH NOTES
A child process created via
.BR fork (2)
inherits its parent's root directory.
The root directory is left unchanged by
.BR execve (2).

FreeBSD has a stronger
.BR jail ()
system call.
.\" FIXME . eventually say something about containers,
.\" virtual servers, etc.?
.SH SEE ALSO
.BR chdir (2),
.BR path_resolution (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2003 Nick Clifford (zaf@nrc.co.nz), Jan 25, 2003
.\" Copyright (c) 2003 Andries Brouwer (aeb@cwi.nl), Aug 24, 2003
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" 2003-08-23 Martin Schulze <joey@infodrom.org> improvements
.\" 2003-08-24 aeb, large parts rewritten
.\" 2004-08-06 Christoph Lameter <clameter@sgi.com>, SMP note
.\"
.TH CLOCK_GETRES 2 2013-12-28 "" "Linux Programmer's Manual"
.SH NAME
clock_getres, clock_gettime, clock_settime \- clock and time functions
.SH SYNOPSIS
.B #include <time.h>
.sp
.BI "int clock_getres(clockid_t " clk_id ", struct timespec *" res );

.BI "int clock_gettime(clockid_t " clk_id ", struct timespec *" tp );

.BI "int clock_settime(clockid_t " clk_id ", const struct timespec *" tp );
.sp
Link with \fI\-lrt\fP (only for glibc versions before 2.17).
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR clock_getres (),
.BR clock_gettime (),
.BR clock_settime ():
.RS
_POSIX_C_SOURCE\ >=\ 199309L
.RE
.ad b
.SH DESCRIPTION
The function
.BR clock_getres ()
finds the resolution (precision) of the specified clock
.IR clk_id ,
and, if
.I res
is non-NULL, stores it in the \fIstruct timespec\fP pointed to by
.IR res .
The resolution of clocks depends on the implementation and cannot be
configured by a particular process.
If the time value pointed to by the argument
.I tp
of
.BR clock_settime ()
is not a multiple of
.IR res ,
then it is truncated to a multiple of
.IR res .
.PP
The functions
.BR clock_gettime ()
and
.BR clock_settime ()
retrieve and set the time of the specified clock
.IR clk_id .
.PP
The
.I res
and
.I tp
arguments are
.I timespec
structures, as specified in
.IR <time.h> :
.sp
.in +4n
.nf
struct timespec {
    time_t   tv_sec;        /* seconds */
    long     tv_nsec;       /* nanoseconds */
};
.fi
.in
.PP
The
.I clk_id
argument is the identifier of the particular clock on which to act.
A clock may be system-wide and hence visible for all processes, or
per-process if it measures time only within a single process.
.LP
All implementations support the system-wide real-time clock,
which is identified by
.BR CLOCK_REALTIME .
Its time represents seconds and nanoseconds since the Epoch.
When its time is changed, timers for a relative interval are
unaffected, but timers for an absolute point in time are affected.
.LP
More clocks may be implemented.
The interpretation of the
corresponding time values and the effect on timers is unspecified.
.LP
Sufficiently recent versions of glibc and the Linux kernel
support the following clocks:
.TP
.B CLOCK_REALTIME
System-wide clock that measures real (i.e., wall-clock) time.
Setting this clock requires appropriate privileges.
This clock is affected by discontinuous jumps in the system time
(e.g., if the system administrator manually changes the clock),
and by the incremental adjustments performed by
.BR adjtime (3)
and NTP.
.TP
.BR CLOCK_REALTIME_COARSE " (since Linux 2.6.32; Linux-specific)"
.\" Added in commit da15cfdae03351c689736f8d142618592e3cebc3
A faster but less precise version of
.BR CLOCK_REALTIME .
Use when you need very fast, but not fine-grained timestamps.
.TP
.TP
.B CLOCK_MONOTONIC
Clock that cannot be set and represents monotonic time since
some unspecified starting point.
This clock is not affected by discontinuous jumps in the system time
(e.g., if the system administrator manually changes the clock),
but is affected by the incremental adjustments performed by
.BR adjtime (3)
and NTP.
.TP
.BR CLOCK_MONOTONIC_COARSE " (since Linux 2.6.32; Linux-specific)"
.\" Added in commit da15cfdae03351c689736f8d142618592e3cebc3
A faster but less precise version of
.BR CLOCK_MONOTONIC .
Use when you need very fast, but not fine-grained timestamps.
.TP
.BR CLOCK_MONOTONIC_RAW " (since Linux 2.6.28; Linux-specific)"
.\" Added in commit 2d42244ae71d6c7b0884b5664cf2eda30fb2ae68, John Stultz
Similar to
.BR CLOCK_MONOTONIC ,
but provides access to a raw hardware-based time
that is not subject to NTP adjustments or
the incremental adjustments performed by
.BR adjtime (3).
.TP
.BR CLOCK_BOOTTIME " (since Linux 2.6.39; Linux-specific)"
.\" commit 7fdd7f89006dd5a4c702fa0ce0c272345fa44ae0
.\" commit 70a08cca1227dc31c784ec930099a4417a06e7d0
Identical to
.BR CLOCK_MONOTONIC ,
except it also includes any time that the system is suspended.
This allows applications to get a suspend-aware monotonic clock
without having to deal with the complications of
.BR CLOCK_REALTIME ,
which may have discontinuities if the time is changed using
.BR settimeofday (2).
.TP
.BR CLOCK_PROCESS_CPUTIME_ID " (since Linux 2.6.12)"
Per-process CPU-time clock
(measures CPU time consumed by all threads in the process).
.TP
.BR CLOCK_THREAD_CPUTIME_ID " (since Linux 2.6.12)"
Thread-specific CPU-time clock.
.SH RETURN VALUE
.BR clock_gettime (),
.BR clock_settime ()
and
.BR clock_getres ()
return 0 for success, or \-1 for failure (in which case
.I errno
is set appropriately).
.SH ERRORS
.TP
.B EFAULT
.I tp
points outside the accessible address space.
.TP
.B EINVAL
The
.I clk_id
specified is not supported on this system.
.\" Linux also gives this error on attempts to set CLOCK_PROCESS_CPUTIME_ID
.\" and CLOCK_THREAD_CPUTIME_ID, when probably the proper error should be
.\" EPERM.
.TP
.B EPERM
.BR clock_settime ()
does not have permission to set the clock indicated.
.SH VERSIONS
These system calls first appeared in Linux 2.6.
.SH CONFORMING TO
SUSv2, POSIX.1-2001.
.SH AVAILABILITY
On POSIX systems on which these functions are available, the symbol
.B _POSIX_TIMERS
is defined in \fI<unistd.h>\fP to a value greater than 0.
The symbols
.BR _POSIX_MONOTONIC_CLOCK ,
.BR _POSIX_CPUTIME ,
.B _POSIX_THREAD_CPUTIME
indicate that
.BR CLOCK_MONOTONIC ,
.BR CLOCK_PROCESS_CPUTIME_ID ,
.B CLOCK_THREAD_CPUTIME_ID
are available.
(See also
.BR sysconf (3).)
.SH NOTES
.SS Historical note for SMP systems
Before Linux added kernel support for
.B CLOCK_PROCESS_CPUTIME_ID
and
.BR CLOCK_THREAD_CPUTIME_ID ,
glibc implemented these clocks on many platforms using timer
registers from the CPUs
(TSC on i386, AR.ITC on Itanium).
These registers may differ between CPUs and as a consequence
these clocks may return
.B bogus results
if a process is migrated to another CPU.
.PP
If the CPUs in an SMP system have different clock sources, then
there is no way to maintain a correlation between the timer registers since
each CPU will run at a slightly different frequency.
If that is the case, then
.I clock_getcpuclockid(0)
will return
.B ENOENT
to signify this condition.
The two clocks will then be useful only if it
can be ensured that a process stays on a certain CPU.
.PP
The processors in an SMP system do not start all at exactly the same
time and therefore the timer registers are typically running at an offset.
Some architectures include code that attempts to limit these offsets on bootup.
However, the code cannot guarantee to accurately tune the offsets.
Glibc contains no provisions to deal with these offsets (unlike the Linux
Kernel).
Typically these offsets are small and therefore the effects may be
negligible in most cases.

Since glibc 2.4,
the wrapper functions for the system calls described in this page avoid
the abovementioned problems by employing the kernel implementation of
.B CLOCK_PROCESS_CPUTIME_ID
and
.BR CLOCK_THREAD_CPUTIME_ID ,
on systems that provide such an implementation
(i.e., Linux 2.6.12 and later).
.SH BUGS
According to POSIX.1-2001, a process with "appropriate privileges" may set the
.B CLOCK_PROCESS_CPUTIME_ID
and
.B CLOCK_THREAD_CPUTIME_ID
clocks using
.BR clock_settime ().
On Linux, these clocks are not settable
(i.e., no process has "appropriate privileges").
.\" See http://bugzilla.kernel.org/show_bug.cgi?id=11972
.SH SEE ALSO
.BR date (1),
.BR gettimeofday (2),
.BR settimeofday (2),
.BR time (2),
.BR adjtime (3),
.BR clock_getcpuclockid (3),
.BR ctime (3),
.BR ftime (3),
.BR pthread_getcpuclockid (3),
.BR sysconf (3),
.BR time (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2008, Linux Foundation, written by Michael Kerrisk
.\" <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH CLOCK_NANOSLEEP 2 2014-12-31 "Linux" "Linux Programmer's Manual"
.SH NAME
clock_nanosleep \- high-resolution sleep with specifiable clock
.SH SYNOPSIS
.B #include <time.h>
.nf
.sp
.BI "int clock_nanosleep(clockid_t " clock_id ", int " flags ,
.BI "                    const struct timespec *" request ,
.BI "                    struct timespec *" remain );
.fi
.sp
Link with \fI\-lrt\fP (only for glibc versions before 2.17).
.sp
.ad l
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR clock_nanosleep ():
.RS 4
_XOPEN_SOURCE\ >=\ 600 || _POSIX_C_SOURCE\ >=\ 200112L
.RE
.ad
.SH DESCRIPTION
Like
.BR nanosleep (2),
.BR clock_nanosleep ()
allows the calling thread to sleep for an interval specified
with nanosecond precision.
It differs in allowing the caller to select the clock against
which the sleep interval is to be measured,
and in allowing the sleep interval to be specified as
either an absolute or a relative value.

The time values passed to and returned by this call are specified using
.I timespec
structures, defined as follows:
.sp
.in +4n
.nf
struct timespec {
    time_t tv_sec;        /* seconds */
    long   tv_nsec;       /* nanoseconds [0 .. 999999999] */
};
.fi
.in

The
.I clock_id
argument specifies the clock against which the sleep interval
is to be measured.
This argument can have one of the following values:
.TP 17
.BR CLOCK_REALTIME
A settable system-wide real-time clock.
.TP
.BR CLOCK_MONOTONIC
A nonsettable, monotonically increasing clock that measures time
since some unspecified point in the past that does not change after
system startup.
.\" On Linux this clock measures time since boot.
.TP
.BR CLOCK_PROCESS_CPUTIME_ID
A settable per-process clock that measures CPU time consumed
by all threads in the process.
.\" There is some trickery between glibc and the kernel
.\" to deal with the CLOCK_PROCESS_CPUTIME_ID case.
.PP
See
.BR clock_getres (2)
for further details on these clocks.
In addition, the CPU clock IDs returned by
.BR clock_getcpuclockid (3)
and
.BR pthread_getcpuclockid (3)
can also be passed in
.IR clock_id .

If
.I flags
is 0, then the value specified in
.I request
is interpreted as an interval relative to the current
value of the clock specified by
.IR clock_id .

If
.I flags
is
.BR TIMER_ABSTIME ,
then
.I request
is interpreted as an absolute time as measured by the clock,
.IR clock_id .
If
.I request
is less than or equal to the current value of the clock,
then
.BR clock_nanosleep ()
returns immediately without suspending the calling thread.

.BR clock_nanosleep ()
suspends the execution of the calling thread
until either at least the time specified by
.IR request
has elapsed,
or a signal is delivered that causes a signal handler to be called or
that terminates the process.

If the call is interrupted by a signal handler,
.BR clock_nanosleep ()
fails with the error
.BR EINTR .
In addition, if
.I remain
is not NULL, and
.I flags
was not
.BR TIMER_ABSTIME ,
it returns the remaining unslept time in
.IR remain .
This value can then be used to call
.BR clock_nanosleep ()
again and complete a (relative) sleep.
.SH RETURN VALUE
On successfully sleeping for the requested interval,
.BR clock_nanosleep ()
returns 0.
If the call is interrupted by a signal handler or encounters an error,
then it returns one of the positive error number listed in ERRORS.
.SH ERRORS
.TP
.B EFAULT
.I request
or
.I remain
specified an invalid address.
.TP
.B EINTR
The sleep was interrupted by a signal handler.
.TP
.B EINVAL
The value in the
.I tv_nsec
field was not in the range 0 to 999999999 or
.I tv_sec
was negative.
.TP
.B EINVAL
.I clock_id
was invalid.
.RB ( CLOCK_THREAD_CPUTIME_ID
is not a permitted value for
.IR clock_id .)
.SH VERSIONS
The
.BR clock_nanosleep ()
system call first appeared in Linux 2.6.
Support is available in glibc since version 2.1.
.SH CONFORMING TO
POSIX.1-2001.
.SH NOTES
If the interval specified in
.I request
is not an exact multiple of the granularity underlying clock (see
.BR time (7)),
then the interval will be rounded up to the next multiple.
Furthermore, after the sleep completes, there may still be a delay before
the CPU becomes free to once again execute the calling thread.

Using an absolute timer is useful for preventing
timer drift problems of the type described in
.BR nanosleep (2).
(Such problems are exacerbated in programs that try to restart
a relative sleep that is repeatedly interrupted by signals.)
To perform a relative sleep that avoids these problems, call
.BR clock_gettime (2)
for the desired clock,
add the desired interval to the returned time value,
and then call
.BR clock_nanosleep ()
with the
.B TIMER_ABSTIME
flag.

.BR clock_nanosleep ()
is never restarted after being interrupted by a signal handler,
regardless of the use of the
.BR sigaction (2)
.B SA_RESTART
flag.

The
.I remain
argument is unused, and unnecessary, when
.I flags
is
.BR TIMER_ABSTIME .
(An absolute sleep can be restarted using the same
.I request
argument.)

POSIX.1 specifies that
.BR clock_nanosleep ()
has no effect on signals dispositions or the signal mask.

POSIX.1 specifies that after changing the value of the
.B CLOCK_REALTIME
clock via
.BR clock_settime (2),
the new clock value shall be used to determine the time
at which a thread blocked on an absolute
.BR clock_nanosleep ()
will wake up;
if the new clock value falls past the end of the sleep interval, then the
.BR clock_nanosleep ()
call will return immediately.

POSIX.1 specifies that
changing the value of the
.B CLOCK_REALTIME
clock via
.BR clock_settime (2)
shall have no effect on a thread that is blocked on a relative
.BR clock_nanosleep ().
.SH SEE ALSO
.BR clock_getres (2),
.BR nanosleep (2),
.BR restart_syscall (2),
.BR timer_create (2),
.BR sleep (3),
.BR usleep (3),
.BR time (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1992 Drew Eckhardt <drew@cs.colorado.edu>, March 28, 1992
.\" and Copyright (c) Michael Kerrisk, 2001, 2002, 2005, 2013
.\"
.\" %%%LICENSE_START(GPL_NOVERSION_ONELINE)
.\" May be distributed under the GNU General Public License.
.\" %%%LICENSE_END
.\"
.\" Modified by Michael Haardt <michael@moria.de>
.\" Modified 24 Jul 1993 by Rik Faith <faith@cs.unc.edu>
.\" Modified 21 Aug 1994 by Michael Chastain <mec@shell.portal.com>:
.\"   New man page (copied from 'fork.2').
.\" Modified 10 June 1995 by Andries Brouwer <aeb@cwi.nl>
.\" Modified 25 April 1998 by Xavier Leroy <Xavier.Leroy@inria.fr>
.\" Modified 26 Jun 2001 by Michael Kerrisk
.\"     Mostly upgraded to 2.4.x
.\"     Added prototype for sys_clone() plus description
.\"	Added CLONE_THREAD with a brief description of thread groups
.\"	Added CLONE_PARENT and revised entire page remove ambiguity
.\"		between "calling process" and "parent process"
.\"	Added CLONE_PTRACE and CLONE_VFORK
.\"	Added EPERM and EINVAL error codes
.\"	Renamed "__clone" to "clone" (which is the prototype in <sched.h>)
.\"	various other minor tidy ups and clarifications.
.\" Modified 26 Jun 2001 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"	Updated notes for 2.4.7+ behavior of CLONE_THREAD
.\" Modified 15 Oct 2002 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"	Added description for CLONE_NEWNS, which was added in 2.4.19
.\" Slightly rephrased, aeb.
.\" Modified 1 Feb 2003 - added CLONE_SIGHAND restriction, aeb.
.\" Modified 1 Jan 2004 - various updates, aeb
.\" Modified 2004-09-10 - added CLONE_PARENT_SETTID etc. - aeb.
.\" 2005-04-12, mtk, noted the PID caching behavior of NPTL's getpid()
.\"	wrapper under BUGS.
.\" 2005-05-10, mtk, added CLONE_SYSVSEM, CLONE_UNTRACED, CLONE_STOPPED.
.\" 2005-05-17, mtk, Substantially enhanced discussion of CLONE_THREAD.
.\" 2008-11-18, mtk, order CLONE_* flags alphabetically
.\" 2008-11-18, mtk, document CLONE_NEWPID
.\" 2008-11-19, mtk, document CLONE_NEWUTS
.\" 2008-11-19, mtk, document CLONE_NEWIPC
.\" 2008-11-19, Jens Axboe, mtk, document CLONE_IO
.\"
.TH CLONE 2 2015-03-29 "Linux" "Linux Programmer's Manual"
.SH NAME
clone, __clone2 \- create a child process
.SH SYNOPSIS
.nf
/* Prototype for the glibc wrapper function */

.B #include <sched.h>

.BI "int clone(int (*" "fn" ")(void *), void *" child_stack ,
.BI "          int " flags ", void *" "arg" ", ... "
.BI "          /* pid_t *" ptid ", struct user_desc *" tls \
", pid_t *" ctid " */ );"

/* Prototype for the raw system call */

.BI "long clone(unsigned long " flags ", void *" child_stack ,
.BI "          void *" ptid ", void *" ctid ,
.BI "          struct pt_regs *" regs );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc wrapper function (see
.BR feature_test_macros (7)):
.in
.sp
.BR clone ():
.ad l
.RS 4
.PD 0
.TP 4
Since glibc 2.14:
_GNU_SOURCE
.TP 4
.\" See http://sources.redhat.com/bugzilla/show_bug.cgi?id=4749
Before glibc 2.14:
_BSD_SOURCE || _SVID_SOURCE
    /* _GNU_SOURCE also suffices */
.PD
.RE
.ad b
.SH DESCRIPTION
.BR clone ()
creates a new process, in a manner similar to
.BR fork (2).

This page describes both the glibc
.BR clone ()
wrapper function and the underlying system call on which it is based.
The main text describes the wrapper function;
the differences for the raw system call
are described toward the end of this page.

Unlike
.BR fork (2),
.BR clone ()
allows the child process to share parts of its execution context with
the calling process, such as the memory space, the table of file
descriptors, and the table of signal handlers.
(Note that on this manual
page, "calling process" normally corresponds to "parent process".
But see the description of
.B CLONE_PARENT
below.)

One use of
.BR clone ()
is to implement threads: multiple threads of control in a program that
run concurrently in a shared memory space.

When the child process is created with
.BR clone (),
it executes the function
.IR fn ( arg ).
(This differs from
.BR fork (2),
where execution continues in the child from the point
of the
.BR fork (2)
call.)
The
.I fn
argument is a pointer to a function that is called by the child
process at the beginning of its execution.
The
.I arg
argument is passed to the
.I fn
function.

When the
.IR fn ( arg )
function application returns, the child process terminates.
The integer returned by
.I fn
is the exit code for the child process.
The child process may also terminate explicitly by calling
.BR exit (2)
or after receiving a fatal signal.

The
.I child_stack
argument specifies the location of the stack used by the child process.
Since the child and calling process may share memory,
it is not possible for the child process to execute in the
same stack as the calling process.
The calling process must therefore
set up memory space for the child stack and pass a pointer to this
space to
.BR clone ().
Stacks grow downward on all processors that run Linux
(except the HP PA processors), so
.I child_stack
usually points to the topmost address of the memory space set up for
the child stack.

The low byte of
.I flags
contains the number of the
.I "termination signal"
sent to the parent when the child dies.
If this signal is specified as anything other than
.BR SIGCHLD ,
then the parent process must specify the
.B __WALL
or
.B __WCLONE
options when waiting for the child with
.BR wait (2).
If no signal is specified, then the parent process is not signaled
when the child terminates.

.I flags
may also be bitwise-or'ed with zero or more of the following constants,
in order to specify what is shared between the calling process
and the child process:
.TP
.BR CLONE_CHILD_CLEARTID " (since Linux 2.5.49)"
Erase the child thread ID at the location
.I ctid
in child memory when the child exits, and do a wakeup on the futex
at that address.
The address involved may be changed by the
.BR set_tid_address (2)
system call.
This is used by threading libraries.
.TP
.BR CLONE_CHILD_SETTID " (since Linux 2.5.49)"
Store the child thread ID at the location
.I ctid
in the child's memory.
.TP
.BR CLONE_FILES " (since Linux 2.0)"
If
.B CLONE_FILES
is set, the calling process and the child process share the same file
descriptor table.
Any file descriptor created by the calling process or by the child
process is also valid in the other process.
Similarly, if one of the processes closes a file descriptor,
or changes its associated flags (using the
.BR fcntl (2)
.B F_SETFD
operation), the other process is also affected.
If a process sharing a file descriptor table calls
.BR execve (2),
its file descriptor table is duplicated (unshared).

If
.B CLONE_FILES
is not set, the child process inherits a copy of all file descriptors
opened in the calling process at the time of
.BR clone ().
(The duplicated file descriptors in the child refer to the
same open file descriptions (see
.BR open (2))
as the corresponding file descriptors in the calling process.)
Subsequent operations that open or close file descriptors,
or change file descriptor flags,
performed by either the calling
process or the child process do not affect the other process.
.TP
.BR CLONE_FS " (since Linux 2.0)"
If
.B CLONE_FS
is set, the caller and the child process share the same filesystem
information.
This includes the root of the filesystem, the current
working directory, and the umask.
Any call to
.BR chroot (2),
.BR chdir (2),
or
.BR umask (2)
performed by the calling process or the child process also affects the
other process.

If
.B CLONE_FS
is not set, the child process works on a copy of the filesystem
information of the calling process at the time of the
.BR clone ()
call.
Calls to
.BR chroot (2),
.BR chdir (2),
.BR umask (2)
performed later by one of the processes do not affect the other process.
.TP
.BR CLONE_IO " (since Linux 2.6.25)"
If
.B CLONE_IO
is set, then the new process shares an I/O context with
the calling process.
If this flag is not set, then (as with
.BR fork (2))
the new process has its own I/O context.

.\" The following based on text from Jens Axboe
The I/O context is the I/O scope of the disk scheduler (i.e,
what the I/O scheduler uses to model scheduling of a process's I/O).
If processes share the same I/O context,
they are treated as one by the I/O scheduler.
As a consequence, they get to share disk time.
For some I/O schedulers,
.\" the anticipatory and CFQ scheduler
if two processes share an I/O context,
they will be allowed to interleave their disk access.
If several threads are doing I/O on behalf of the same process
.RB ( aio_read (3),
for instance), they should employ
.BR CLONE_IO
to get better I/O performance.
.\" with CFQ and AS.

If the kernel is not configured with the
.B CONFIG_BLOCK
option, this flag is a no-op.
.TP
.BR CLONE_NEWIPC " (since Linux 2.6.19)"
If
.B CLONE_NEWIPC
is set, then create the process in a new IPC namespace.
If this flag is not set, then (as with
.BR fork (2)),
the process is created in the same IPC namespace as
the calling process.
This flag is intended for the implementation of containers.

An IPC namespace provides an isolated view of System\ V IPC objects (see
.BR svipc (7))
and (since Linux 2.6.30)
.\" commit 7eafd7c74c3f2e67c27621b987b28397110d643f
.\" https://lwn.net/Articles/312232/
POSIX message queues
(see
.BR mq_overview (7)).
The common characteristic of these IPC mechanisms is that IPC
objects are identified by mechanisms other than filesystem
pathnames.

Objects created in an IPC namespace are visible to all other processes
that are members of that namespace,
but are not visible to processes in other IPC namespaces.

When an IPC namespace is destroyed
(i.e., when the last process that is a member of the namespace terminates),
all IPC objects in the namespace are automatically destroyed.

Only a privileged process
.RB ( CAP_SYS_ADMIN )
can employ
.BR CLONE_NEWIPC .
This flag can't be specified in conjunction with
.BR CLONE_SYSVSEM .

For further information on IPC namespaces, see
.BR namespaces (7).
.TP
.BR CLONE_NEWNET " (since Linux 2.6.24)"
(The implementation of this flag was completed only
by about kernel version 2.6.29.)

If
.B CLONE_NEWNET
is set, then create the process in a new network namespace.
If this flag is not set, then (as with
.BR fork (2))
the process is created in the same network namespace as
the calling process.
This flag is intended for the implementation of containers.

A network namespace provides an isolated view of the networking stack
(network device interfaces, IPv4 and IPv6 protocol stacks,
IP routing tables, firewall rules, the
.I /proc/net
and
.I /sys/class/net
directory trees, sockets, etc.).
A physical network device can live in exactly one
network namespace.
A virtual network device ("veth") pair provides a pipe-like abstraction
.\" FIXME . Add pointer to veth(4) page when it is eventually completed
that can be used to create tunnels between network namespaces,
and can be used to create a bridge to a physical network device
in another namespace.

When a network namespace is freed
(i.e., when the last process in the namespace terminates),
its physical network devices are moved back to the
initial network namespace (not to the parent of the process).
For further information on network namespaces, see
.BR namespaces (7).

Only a privileged process
.RB ( CAP_SYS_ADMIN )
can employ
.BR CLONE_NEWNET .
.TP
.BR CLONE_NEWNS " (since Linux 2.4.19)"
If
.B CLONE_NEWNS
is set, the cloned child is started in a new mount namespace,
initialized with a copy of the namespace of the parent.
If
.B CLONE_NEWNS
is not set, the child lives in the same mount
namespace as the parent.

For further information on mount namespaces, see
.BR namespaces (7).

Only a privileged process
.RB ( CAP_SYS_ADMIN )
can employ
.BR CLONE_NEWNS .
It is not permitted to specify both
.B CLONE_NEWNS
and
.B CLONE_FS
.\" See https://lwn.net/Articles/543273/
in the same
.BR clone ()
call.
.TP
.BR CLONE_NEWPID " (since Linux 2.6.24)"
.\" This explanation draws a lot of details from
.\" http://lwn.net/Articles/259217/
.\" Authors: Pavel Emelyanov <xemul@openvz.org>
.\" and Kir Kolyshkin <kir@openvz.org>
.\"
.\" The primary kernel commit is 30e49c263e36341b60b735cbef5ca37912549264
.\" Author: Pavel Emelyanov <xemul@openvz.org>
If
.B CLONE_NEWPID
is set, then create the process in a new PID namespace.
If this flag is not set, then (as with
.BR fork (2))
the process is created in the same PID namespace as
the calling process.
This flag is intended for the implementation of containers.

For further information on PID namespaces, see
.BR namespaces (7)
and
.BR pid_namespaces (7)

Only a privileged process
.RB ( CAP_SYS_ADMIN )
can employ
.BR CLONE_NEWPID .
This flag can't be specified in conjunction with
.BR CLONE_THREAD
or
.BR CLONE_PARENT .
.TP
.BR CLONE_NEWUSER
(This flag first became meaningful for
.BR clone ()
in Linux 2.6.23,
the current
.BR clone ()
semantics were merged in Linux 3.5,
and the final pieces to make the user namespaces completely usable were
merged in Linux 3.8.)

If
.B CLONE_NEWUSER
is set, then create the process in a new user namespace.
If this flag is not set, then (as with
.BR fork (2))
the process is created in the same user namespace as the calling process.

For further information on user namespaces, see
.BR namespaces (7)
and
.BR user_namespaces (7)

Before Linux 3.8, use of
.BR CLONE_NEWUSER
required that the caller have three capabilities:
.BR CAP_SYS_ADMIN ,
.BR CAP_SETUID ,
and
.BR CAP_SETGID .
.\" Before Linux 2.6.29, it appears that only CAP_SYS_ADMIN was needed
Starting with Linux 3.8,
no privileges are needed to create a user namespace.

This flag can't be specified in conjunction with
.BR CLONE_THREAD
or
.BR CLONE_PARENT .
For security reasons,
.\" commit e66eded8309ebf679d3d3c1f5820d1f2ca332c71
.\" https://lwn.net/Articles/543273/
.\" The fix actually went into 3.9 and into 3.8.3. However, user namespaces
.\" were, for practical purposes, unusable in earlier 3.8.x because of the
.\" various filesystems that didn't support userns.
.BR CLONE_NEWUSER
cannot be specified in conjunction with
.BR CLONE_FS .

For further information on user namespaces, see
.BR user_namespaces (7).
.TP
.BR CLONE_NEWUTS " (since Linux 2.6.19)"
If
.B CLONE_NEWUTS
is set, then create the process in a new UTS namespace,
whose identifiers are initialized by duplicating the identifiers
from the UTS namespace of the calling process.
If this flag is not set, then (as with
.BR fork (2))
the process is created in the same UTS namespace as
the calling process.
This flag is intended for the implementation of containers.

A UTS namespace is the set of identifiers returned by
.BR uname (2);
among these, the domain name and the hostname can be modified by
.BR setdomainname (2)
and
.BR sethostname (2),
respectively.
Changes made to the identifiers in a UTS namespace
are visible to all other processes in the same namespace,
but are not visible to processes in other UTS namespaces.

Only a privileged process
.RB ( CAP_SYS_ADMIN )
can employ
.BR CLONE_NEWUTS .

For further information on UTS namespaces, see
.BR namespaces (7).
.TP
.BR CLONE_PARENT " (since Linux 2.3.12)"
If
.B CLONE_PARENT
is set, then the parent of the new child (as returned by
.BR getppid (2))
will be the same as that of the calling process.

If
.B CLONE_PARENT
is not set, then (as with
.BR fork (2))
the child's parent is the calling process.

Note that it is the parent process, as returned by
.BR getppid (2),
which is signaled when the child terminates, so that
if
.B CLONE_PARENT
is set, then the parent of the calling process, rather than the
calling process itself, will be signaled.
.TP
.BR CLONE_PARENT_SETTID " (since Linux 2.5.49)"
Store the child thread ID at the location
.I ptid
in the parent's memory.
(In Linux 2.5.32-2.5.48 there was a flag
.B CLONE_SETTID
that did this.)
.TP
.BR CLONE_PID " (obsolete)"
If
.B CLONE_PID
is set, the child process is created with the same process ID as
the calling process.
This is good for hacking the system, but otherwise
of not much use.
Since 2.3.21 this flag can be
specified only by the system boot process (PID 0).
It disappeared in Linux 2.5.16.
Since then, the kernel silently ignores it without error.
.TP
.BR CLONE_PTRACE " (since Linux 2.2)"
If
.B CLONE_PTRACE
is specified, and the calling process is being traced,
then trace the child also (see
.BR ptrace (2)).
.TP
.BR CLONE_SETTLS " (since Linux 2.5.32)"
The
.I newtls
argument is the new TLS (Thread Local Storage) descriptor.
(See
.BR set_thread_area (2).)
.TP
.BR CLONE_SIGHAND " (since Linux 2.0)"
If
.B CLONE_SIGHAND
is set, the calling process and the child process share the same table of
signal handlers.
If the calling process or child process calls
.BR sigaction (2)
to change the behavior associated with a signal, the behavior is
changed in the other process as well.
However, the calling process and child
processes still have distinct signal masks and sets of pending
signals.
So, one of them may block or unblock some signals using
.BR sigprocmask (2)
without affecting the other process.

If
.B CLONE_SIGHAND
is not set, the child process inherits a copy of the signal handlers
of the calling process at the time
.BR clone ()
is called.
Calls to
.BR sigaction (2)
performed later by one of the processes have no effect on the other
process.

Since Linux 2.6.0-test6,
.I flags
must also include
.B CLONE_VM
if
.B CLONE_SIGHAND
is specified
.TP
.BR CLONE_STOPPED " (since Linux 2.6.0-test2)"
If
.B CLONE_STOPPED
is set, then the child is initially stopped (as though it was sent a
.B SIGSTOP
signal), and must be resumed by sending it a
.B SIGCONT
signal.

This flag was
.I deprecated
from Linux 2.6.25 onward,
and was
.I removed
altogether in Linux 2.6.38.
Since then, the kernel silently ignores it without error.
.\" glibc 2.8 removed this defn from bits/sched.h
.TP
.BR CLONE_SYSVSEM " (since Linux 2.5.10)"
If
.B CLONE_SYSVSEM
is set, then the child and the calling process share
a single list of System V semaphore adjustment
.RI ( semadj )
values (see
.BR semop (2)).
In this case, the shared list accumulates
.I semadj
values across all processes sharing the list,
and semaphore adjustments are performed only when the last process
that is sharing the list terminates (or ceases sharing the list using
.BR unshare (2)).
If this flag is not set, then the child has a separate
.I semadj
list that is initially empty.
.TP
.BR CLONE_THREAD " (since Linux 2.4.0-test8)"
If
.B CLONE_THREAD
is set, the child is placed in the same thread group as the calling process.
To make the remainder of the discussion of
.B CLONE_THREAD
more readable, the term "thread" is used to refer to the
processes within a thread group.

Thread groups were a feature added in Linux 2.4 to support the
POSIX threads notion of a set of threads that share a single PID.
Internally, this shared PID is the so-called
thread group identifier (TGID) for the thread group.
Since Linux 2.4, calls to
.BR getpid (2)
return the TGID of the caller.

The threads within a group can be distinguished by their (system-wide)
unique thread IDs (TID).
A new thread's TID is available as the function result
returned to the caller of
.BR clone (),
and a thread can obtain
its own TID using
.BR gettid (2).

When a call is made to
.BR clone ()
without specifying
.BR CLONE_THREAD ,
then the resulting thread is placed in a new thread group
whose TGID is the same as the thread's TID.
This thread is the
.I leader
of the new thread group.

A new thread created with
.B CLONE_THREAD
has the same parent process as the caller of
.BR clone ()
(i.e., like
.BR CLONE_PARENT ),
so that calls to
.BR getppid (2)
return the same value for all of the threads in a thread group.
When a
.B CLONE_THREAD
thread terminates, the thread that created it using
.BR clone ()
is not sent a
.B SIGCHLD
(or other termination) signal;
nor can the status of such a thread be obtained
using
.BR wait (2).
(The thread is said to be
.IR detached .)

After all of the threads in a thread group terminate
the parent process of the thread group is sent a
.B SIGCHLD
(or other termination) signal.

If any of the threads in a thread group performs an
.BR execve (2),
then all threads other than the thread group leader are terminated,
and the new program is executed in the thread group leader.

If one of the threads in a thread group creates a child using
.BR fork (2),
then any thread in the group can
.BR wait (2)
for that child.

Since Linux 2.5.35,
.I flags
must also include
.B CLONE_SIGHAND
if
.B CLONE_THREAD
is specified
(and note that, since Linux 2.6.0-test6,
.BR CLONE_SIGHAND
also requires
.BR CLONE_VM
to be included).

Signals may be sent to a thread group as a whole (i.e., a TGID) using
.BR kill (2),
or to a specific thread (i.e., TID) using
.BR tgkill (2).

Signal dispositions and actions are process-wide:
if an unhandled signal is delivered to a thread, then
it will affect (terminate, stop, continue, be ignored in)
all members of the thread group.

Each thread has its own signal mask, as set by
.BR sigprocmask (2),
but signals can be pending either: for the whole process
(i.e., deliverable to any member of the thread group),
when sent with
.BR kill (2);
or for an individual thread, when sent with
.BR tgkill (2).
A call to
.BR sigpending (2)
returns a signal set that is the union of the signals pending for the
whole process and the signals that are pending for the calling thread.

If
.BR kill (2)
is used to send a signal to a thread group,
and the thread group has installed a handler for the signal, then
the handler will be invoked in exactly one, arbitrarily selected
member of the thread group that has not blocked the signal.
If multiple threads in a group are waiting to accept the same signal using
.BR sigwaitinfo (2),
the kernel will arbitrarily select one of these threads
to receive a signal sent using
.BR kill (2).
.TP
.BR CLONE_UNTRACED " (since Linux 2.5.46)"
If
.B CLONE_UNTRACED
is specified, then a tracing process cannot force
.B CLONE_PTRACE
on this child process.
.TP
.BR CLONE_VFORK " (since Linux 2.2)"
If
.B CLONE_VFORK
is set, the execution of the calling process is suspended
until the child releases its virtual memory
resources via a call to
.BR execve (2)
or
.BR _exit (2)
(as with
.BR vfork (2)).

If
.B CLONE_VFORK
is not set, then both the calling process and the child are schedulable
after the call, and an application should not rely on execution occurring
in any particular order.
.TP
.BR CLONE_VM " (since Linux 2.0)"
If
.B CLONE_VM
is set, the calling process and the child process run in the same memory
space.
In particular, memory writes performed by the calling process
or by the child process are also visible in the other process.
Moreover, any memory mapping or unmapping performed with
.BR mmap (2)
or
.BR munmap (2)
by the child or calling process also affects the other process.

If
.B CLONE_VM
is not set, the child process runs in a separate copy of the memory
space of the calling process at the time of
.BR clone ().
Memory writes or file mappings/unmappings performed by one of the
processes do not affect the other, as with
.BR fork (2).
.SS C library/kernel ABI differences
The raw
.BR clone ()
system call corresponds more closely to
.BR fork (2)
in that execution in the child continues from the point of the
call.
As such, the
.I fn
and
.I arg
arguments of the
.BR clone ()
wrapper function are omitted.
Furthermore, the argument order changes.
The raw system call interface on x86 and many other architectures is roughly:
.in +4
.nf

.BI "long clone(unsigned long " flags ", void *" child_stack ,
.BI "           void *" ptid ", void *" ctid ,
.BI "           struct pt_regs *" regs );

.fi
.in
Another difference for the raw system call is that the
.I child_stack
argument may be zero, in which case copy-on-write semantics ensure that the
child gets separate copies of stack pages when either process modifies
the stack.
In this case, for correct operation, the
.B CLONE_VM
option should not be specified.

For some architectures, the order of the arguments for the system call
differs from that shown above.
On the score, microblaze, ARM, ARM 64, PA-RISC, arc, Power PC, xtensa,
and MIPS architectures,
the order of the fourth and fifth arguments is reversed.
On the cris and s390 architectures,
the order of the first and second arguments is reversed.
.SS blackfin, m68k, and sparc
The argument-passing conventions on
blackfin, m68k, and sparc are different from the descriptions above.
For details, see the kernel (and glibc) source.
.SS ia64
On ia64, a different interface is used:
.nf

.BI "int __clone2(int (*" "fn" ")(void *), "
.BI "             void *" child_stack_base ", size_t " stack_size ,
.BI "             int " flags ", void *" "arg" ", ... "
.BI "          /* pid_t *" ptid ", struct user_desc *" tls \
", pid_t *" ctid " */ );"
.fi
.PP
The prototype shown above is for the glibc wrapper function;
the raw system call interface has no
.I fn
or
.I arg
argument, and changes the order of the arguments so that
.I flags
is the first argument, and
.I tls
is the last argument.
.PP
.BR __clone2 ()
operates in the same way as
.BR clone (),
except that
.I child_stack_base
points to the lowest address of the child's stack area,
and
.I stack_size
specifies the size of the stack pointed to by
.IR child_stack_base .
.SS Linux 2.4 and earlier
In Linux 2.4 and earlier,
.BR clone ()
does not take arguments
.IR ptid ,
.IR tls ,
and
.IR ctid .
.SH RETURN VALUE
.\" gettid(2) returns current->pid;
.\" getpid(2) returns current->tgid;
On success, the thread ID of the child process is returned
in the caller's thread of execution.
On failure, \-1 is returned
in the caller's context, no child process will be created, and
.I errno
will be set appropriately.
.SH ERRORS
.TP
.B EAGAIN
Too many processes are already running; see
.BR fork (2).
.TP
.B EINVAL
.B CLONE_SIGHAND
was specified, but
.B CLONE_VM
was not.
(Since Linux 2.6.0-test6.)
.TP
.B EINVAL
.B CLONE_THREAD
was specified, but
.B CLONE_SIGHAND
was not.
(Since Linux 2.5.35.)
.\" .TP
.\" .B EINVAL
.\" Precisely one of
.\" .B CLONE_DETACHED
.\" and
.\" .B CLONE_THREAD
.\" was specified.
.\" (Since Linux 2.6.0-test6.)
.TP
.B EINVAL
.\" commit e66eded8309ebf679d3d3c1f5820d1f2ca332c71
Both
.B CLONE_FS
and
.B CLONE_NEWNS
were specified in
.IR flags .
.TP
.BR EINVAL " (since Linux 3.9)"
Both
.B CLONE_NEWUSER
and
.B CLONE_FS
were specified in
.IR flags .
.TP
.B EINVAL
Both
.B CLONE_NEWIPC
and
.B CLONE_SYSVSEM
were specified in
.IR flags .
.TP
.B EINVAL
One (or both) of
.BR CLONE_NEWPID
or
.BR CLONE_NEWUSER
and one (or both) of
.BR CLONE_THREAD
or
.BR CLONE_PARENT
were specified in
.IR flags .
.TP
.B EINVAL
Returned by
.BR clone ()
when a zero value is specified for
.IR child_stack .
.TP
.B EINVAL
.BR CLONE_NEWIPC
was specified in
.IR flags ,
but the kernel was not configured with the
.B CONFIG_SYSVIPC
and
.BR CONFIG_IPC_NS
options.
.TP
.B EINVAL
.BR CLONE_NEWNET
was specified in
.IR flags ,
but the kernel was not configured with the
.B CONFIG_NET_NS
option.
.TP
.B EINVAL
.BR CLONE_NEWPID
was specified in
.IR flags ,
but the kernel was not configured with the
.B CONFIG_PID_NS
option.
.TP
.B EINVAL
.BR CLONE_NEWUTS
was specified in
.IR flags ,
but the kernel was not configured with the
.B CONFIG_UTS
option.
.TP
.B ENOMEM
Cannot allocate sufficient memory to allocate a task structure for the
child, or to copy those parts of the caller's context that need to be
copied.
.TP
.B EPERM
.BR CLONE_NEWIPC ,
.BR CLONE_NEWNET ,
.BR CLONE_NEWNS ,
.BR CLONE_NEWPID ,
or
.BR CLONE_NEWUTS
was specified by an unprivileged process (process without \fBCAP_SYS_ADMIN\fP).
.TP
.B EPERM
.B CLONE_PID
was specified by a process other than process 0.
.TP
.B EPERM
.BR CLONE_NEWUSER
was specified in
.IR flags ,
but either the effective user ID or the effective group ID of the caller
does not have a mapping in the parent namespace (see
.BR user_namespaces (7)).
.TP
.BR EPERM " (since Linux 3.9)"
.\" commit 3151527ee007b73a0ebd296010f1c0454a919c7d
.B CLONE_NEWUSER
was specified in
.I flags
and the caller is in a chroot environment
.\" FIXME What is the rationale for this restriction?
(i.e., the caller's root directory does not match the root directory
of the mount namespace in which it resides).
.TP
.BR EUSERS " (since Linux 3.11)"
.B CLONE_NEWUSER
was specified in
.IR flags ,
and the call would cause the limit on the number of
nested user namespaces to be exceeded.
See
.BR user_namespaces (7).
.SH VERSIONS
There is no entry for
.BR clone ()
in libc5.
glibc2 provides
.BR clone ()
as described in this manual page.
.SH CONFORMING TO
.BR clone ()
is Linux-specific and should not be used in programs
intended to be portable.
.SH NOTES
In the kernel 2.4.x series,
.B CLONE_THREAD
generally does not make the parent of the new thread the same
as the parent of the calling process.
However, for kernel versions 2.4.7 to 2.4.18 the
.B CLONE_THREAD
flag implied the
.B CLONE_PARENT
flag (as in kernel 2.6).

For a while there was
.B CLONE_DETACHED
(introduced in 2.5.32):
parent wants no child-exit signal.
In 2.6.2 the need to give this
together with
.B CLONE_THREAD
disappeared.
This flag is still defined, but has no effect.

On i386,
.BR clone ()
should not be called through vsyscall, but directly through
.IR "int $0x80" .
.SH BUGS
Versions of the GNU C library that include the NPTL threading library
contain a wrapper function for
.BR getpid (2)
that performs caching of PIDs.
This caching relies on support in the glibc wrapper for
.BR clone (),
but as currently implemented,
the cache may not be up to date in some circumstances.
In particular,
if a signal is delivered to the child immediately after the
.BR clone ()
call, then a call to
.BR getpid (2)
in a handler for the signal may return the PID
of the calling process ("the parent"),
if the clone wrapper has not yet had a chance to update the PID
cache in the child.
(This discussion ignores the case where the child was created using
.BR CLONE_THREAD ,
when
.BR getpid (2)
.I should
return the same value in the child and in the process that called
.BR clone (),
since the caller and the child are in the same thread group.
The stale-cache problem also does not occur if the
.I flags
argument includes
.BR CLONE_VM .)
To get the truth, it may be necessary to use code such as the following:
.nf

    #include <syscall.h>

    pid_t mypid;

    mypid = syscall(SYS_getpid);
.fi
.\" See also the following bug reports
.\" https://bugzilla.redhat.com/show_bug.cgi?id=417521
.\" http://sourceware.org/bugzilla/show_bug.cgi?id=6910
.SH EXAMPLE
The following program demonstrates the use of
.BR clone ()
to create a child process that executes in a separate UTS namespace.
The child changes the hostname in its UTS namespace.
Both parent and child then display the system hostname,
making it possible to see that the hostname
differs in the UTS namespaces of the parent and child.
For an example of the use of this program, see
.BR setns (2).
.SS Program source
.nf
#define _GNU_SOURCE
#include <sys/wait.h>
#include <sys/utsname.h>
#include <sched.h>
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

#define errExit(msg)    do { perror(msg); exit(EXIT_FAILURE); \\
                        } while (0)

static int              /* Start function for cloned child */
childFunc(void *arg)
{
    struct utsname uts;

    /* Change hostname in UTS namespace of child */

    if (sethostname(arg, strlen(arg)) == \-1)
        errExit("sethostname");

    /* Retrieve and display hostname */

    if (uname(&uts) == \-1)
        errExit("uname");
    printf("uts.nodename in child:  %s\\n", uts.nodename);

    /* Keep the namespace open for a while, by sleeping.
       This allows some experimentation\-\-for example, another
       process might join the namespace. */

    sleep(200);

    return 0;           /* Child terminates now */
}

#define STACK_SIZE (1024 * 1024)    /* Stack size for cloned child */

int
main(int argc, char *argv[])
{
    char *stack;                    /* Start of stack buffer */
    char *stackTop;                 /* End of stack buffer */
    pid_t pid;
    struct utsname uts;

    if (argc < 2) {
        fprintf(stderr, "Usage: %s <child\-hostname>\\n", argv[0]);
        exit(EXIT_SUCCESS);
    }

    /* Allocate stack for child */

    stack = malloc(STACK_SIZE);
    if (stack == NULL)
        errExit("malloc");
    stackTop = stack + STACK_SIZE;  /* Assume stack grows downward */

    /* Create child that has its own UTS namespace;
       child commences execution in childFunc() */

    pid = clone(childFunc, stackTop, CLONE_NEWUTS | SIGCHLD, argv[1]);
    if (pid == \-1)
        errExit("clone");
    printf("clone() returned %ld\\n", (long) pid);

    /* Parent falls through to here */

    sleep(1);           /* Give child time to change its hostname */

    /* Display hostname in parent\(aqs UTS namespace. This will be
       different from hostname in child\(aqs UTS namespace. */

    if (uname(&uts) == \-1)
        errExit("uname");
    printf("uts.nodename in parent: %s\\n", uts.nodename);

    if (waitpid(pid, NULL, 0) == \-1)    /* Wait for child */
        errExit("waitpid");
    printf("child has terminated\\n");

    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR fork (2),
.BR futex (2),
.BR getpid (2),
.BR gettid (2),
.BR kcmp (2),
.BR set_thread_area (2),
.BR set_tid_address (2),
.BR setns (2),
.BR tkill (2),
.BR unshare (2),
.BR wait (2),
.BR capabilities (7),
.BR namespaces (7),
.BR pthreads (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" This manpage is Copyright (C) 1992 Drew Eckhardt;
.\"             and Copyright (C) 1993 Michael Haardt, Ian Jackson.
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified Wed Jul 21 22:40:25 1993 by Rik Faith <faith@cs.unc.edu>
.\" Modified Sat Feb 18 15:27:48 1995 by Michael Haardt
.\" Modified Sun Apr 14 11:40:50 1996 by Andries Brouwer <aeb@cwi.nl>:
.\"   corrected description of effect on locks (thanks to
.\"   Tigran Aivazian <tigran@sco.com>).
.\" Modified Fri Jan 31 16:21:46 1997 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified 2000-07-22 by Nicolás Lichtmaier <nick@debian.org>
.\"   added note about close(2) not guaranteeing that data is safe on close.
.\"
.TH CLOSE 2 2013-12-30 "Linux" "Linux Programmer's Manual"
.SH NAME
close \- close a file descriptor
.SH SYNOPSIS
.nf
.B #include <unistd.h>
.sp
.BI "int close(int " fd );
.fi
.SH DESCRIPTION
.BR close ()
closes a file descriptor, so that it no longer refers to any file and
may be reused.
Any record locks (see
.BR fcntl (2))
held on the file it was associated with,
and owned by the process, are removed (regardless of the file
descriptor that was used to obtain the lock).
.PP
If
.I fd
is the last file descriptor referring to the underlying
open file description (see
.BR open (2)),
the resources associated with the open file description are freed;
if the descriptor was the last reference to a file which has been
removed using
.BR unlink (2),
the file is deleted.
.SH RETURN VALUE
.BR close ()
returns zero on success.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EBADF
.I fd
isn't a valid open file descriptor.
.TP
.B EINTR
The
.BR close ()
call was interrupted by a signal; see
.BR signal (7).
.TP
.B EIO
An I/O error occurred.
.SH CONFORMING TO
SVr4, 4.3BSD, POSIX.1-2001.
.\" SVr4 documents an additional ENOLINK error condition.
.SH NOTES
Not checking the return value of
.BR close ()
is a common but nevertheless
serious programming error.
It is quite possible that errors on a
previous
.BR write (2)
operation are first reported at the final
.BR close ().
Not checking the return value when closing the file may lead to
silent loss of data.
This can especially be observed with NFS
and with disk quota.
Note that the return value should be used only for diagnostics.
In particular
.BR close ()
should not be retried after an
.B EINTR
since this may cause a reused descriptor from another thread to be closed.
.PP
A successful close does not guarantee that the data has been successfully
saved to disk, as the kernel defers writes.
It is not common for a filesystem
to flush the buffers when the stream is closed.
If you need to be sure that
the data is physically stored, use
.BR fsync (2).
(It will depend on the disk hardware at this point.)
.PP
It is probably unwise to close file descriptors while
they may be in use by system calls in
other threads in the same process.
Since a file descriptor may be reused,
there are some obscure race conditions
that may cause unintended side effects.
.\" Date: Tue, 4 Sep 2007 13:57:35 +0200
.\" From: Fredrik Noring <noring@nocrew.org>
.\" One such race involves signals and ERESTARTSYS. If a file descriptor
.\" in use by a system call is closed and then reused by e.g. an
.\" independent open() in some unrelated thread, before the original system
.\" call has restarted after ERESTARTSYS, the original system call will
.\" later restart with the reused file descriptor. This is most likely a
.\" serious programming error.
.SH SEE ALSO
.BR fcntl (2),
.BR fsync (2),
.BR open (2),
.BR shutdown (2),
.BR unlink (2),
.BR fclose (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 Rickard E. Faith (faith@cs.unc.edu)
.\" Portions extracted from /usr/include/sys/socket.h, which does not have
.\" any authorship information in it.  It is probably available under the GPL.
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\"
.\" Other portions are from the 6.9 (Berkeley) 3/10/91 man page:
.\"
.\" Copyright (c) 1983 The Regents of the University of California.
.\" All rights reserved.
.\"
.\" %%%LICENSE_START(BSD_4_CLAUSE_UCB)
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"     This product includes software developed by the University of
.\"     California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\" %%%LICENSE_END
.\"
.\" Modified 1997-01-31 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified 1998, 1999 by Andi Kleen
.\" Modified 2004-06-23 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.TH CONNECT 2 2014-09-06 "Linux" "Linux Programmer's Manual"
.SH NAME
connect \- initiate a connection on a socket
.SH SYNOPSIS
.nf
.BR "#include <sys/types.h>" "          /* See NOTES */"
.br
.B #include <sys/socket.h>
.sp
.BI "int connect(int " sockfd ", const struct sockaddr *" addr ,
.BI "            socklen_t " addrlen );
.fi
.SH DESCRIPTION
The
.BR connect ()
system call connects the socket referred to by the file descriptor
.I sockfd
to the address specified by
.IR addr .
The
.I addrlen
argument specifies the size of
.IR addr .
The format of the address in
.I addr
is determined by the address space of the socket
.IR sockfd ;
see
.BR socket (2)
for further details.

If the socket
.I sockfd
is of type
.BR SOCK_DGRAM ,
then
.I addr
is the address to which datagrams are sent by default, and the only
address from which datagrams are received.
If the socket is of type
.B SOCK_STREAM
or
.BR SOCK_SEQPACKET ,
this call attempts to make a connection to the socket that is bound
to the address specified by
.IR addr .
.PP
Generally, connection-based protocol sockets may successfully
.BR connect ()
only once; connectionless protocol sockets may use
.BR connect ()
multiple times to change their association.
Connectionless sockets may
dissolve the association by connecting to an address with the
.I sa_family
member of
.I sockaddr
set to
.BR AF_UNSPEC
(supported on Linux since kernel 2.2).
.SH RETURN VALUE
If the connection or binding succeeds, zero is returned.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
The following are general socket errors only.
There may be other domain-specific error codes.
.TP
.B EACCES
For UNIX domain sockets, which are identified by pathname:
Write permission is denied on the socket file,
or search permission is denied for one of the directories
in the path prefix.
(See also
.BR path_resolution (7).)
.TP
.BR EACCES ", " EPERM
The user tried to connect to a broadcast address without having the socket
broadcast flag enabled or the connection request failed because of a local
firewall rule.
.TP
.B EADDRINUSE
Local address is already in use.
.TP
.B EADDRNOTAVAIL
(Internet domain sockets)
The socket referred to by
.I sockfd
had not previously been bound to an address and,
upon attempting to bind it to an ephemeral port,
it was determined that all port numbers in the ephemeral port range
are currently in use.
See the discussion of
.I /proc/sys/net/ipv4/ip_local_port_range
in
.BR ip (7).
.TP
.B EAFNOSUPPORT
The passed address didn't have the correct address family in its
.I sa_family
field.
.TP
.B EAGAIN
Insufficient entries in the routing cache.
.TP
.B EALREADY
The socket is nonblocking and a previous connection attempt has not yet
been completed.
.TP
.B EBADF
The file descriptor is not a valid index in the descriptor table.
.TP
.B ECONNREFUSED
No-one listening on the remote address.
.TP
.B EFAULT
The socket structure address is outside the user's address space.
.TP
.B EINPROGRESS
The socket is nonblocking and the connection cannot be completed
immediately.
It is possible to
.BR select (2)
or
.BR poll (2)
for completion by selecting the socket for writing.
After
.BR select (2)
indicates writability, use
.BR getsockopt (2)
to read the
.B SO_ERROR
option at level
.B SOL_SOCKET
to determine whether
.BR connect ()
completed successfully
.RB ( SO_ERROR
is zero) or unsuccessfully
.RB ( SO_ERROR
is one of the usual error codes listed here,
explaining the reason for the failure).
.TP
.B EINTR
The system call was interrupted by a signal that was caught; see
.BR signal (7).
.\" For TCP, the connection will complete asynchronously.
.\" See http://lkml.org/lkml/2005/7/12/254
.TP
.B EISCONN
The socket is already connected.
.TP
.B ENETUNREACH
Network is unreachable.
.TP
.B ENOTSOCK
The file descriptor is not associated with a socket.
.TP
.B EPROTOTYPE
The socket type does not support the requested communications protocol.
This error can occur, for example,
on an attempt to connect a UNIX domain datagram socket to a stream socket.
.TP
.B ETIMEDOUT
Timeout while attempting connection.
The server may be too
busy to accept new connections.
Note that for IP sockets the timeout may
be very long when syncookies are enabled on the server.
.SH CONFORMING TO
SVr4, 4.4BSD, (the
.BR connect ()
function first appeared in 4.2BSD), POSIX.1-2001.
.\" SVr4 documents the additional
.\" general error codes
.\" .BR EADDRNOTAVAIL ,
.\" .BR EINVAL ,
.\" .BR EAFNOSUPPORT ,
.\" .BR EALREADY ,
.\" .BR EINTR ,
.\" .BR EPROTOTYPE ,
.\" and
.\" .BR ENOSR .
.\" It also
.\" documents many additional error conditions not described here.
.SH NOTES
POSIX.1-2001 does not require the inclusion of
.IR <sys/types.h> ,
and this header file is not required on Linux.
However, some historical (BSD) implementations required this header
file, and portable applications are probably wise to include it.

The third argument of
.BR connect ()
is in reality an
.I int
(and this is what 4.x BSD and libc4 and libc5 have).
Some POSIX confusion resulted in the present
.IR socklen_t ,
also used by glibc.
See also
.BR accept (2).

If
.BR connect ()
fails, consider the state of the socket as unspecified.
Portable applications should close the socket and create a new one for
reconnecting.
.SH EXAMPLE
An example of the use of
.BR connect ()
is shown in
.BR getaddrinfo (3).
.SH SEE ALSO
.BR accept (2),
.BR bind (2),
.BR getsockname (2),
.BR listen (2),
.BR socket (2),
.BR path_resolution (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 1996 Free Software Foundation, Inc.
.\"
.\" %%%LICENSE_START(GPL_NOVERSION_ONELINE)
.\" This file is distributed according to the GNU General Public License.
.\" %%%LICENSE_END
.\"
.\" 2006-02-09, some reformatting by Luc Van Oostenryck; some
.\" reformatting and rewordings by mtk
.\"
.TH CREATE_MODULE 2 2014-05-10 "Linux" "Linux Programmer's Manual"
.SH NAME
create_module \- create a loadable module entry
.SH SYNOPSIS
.nf
.B #include <linux/module.h>
.sp
.BI "caddr_t create_module(const char *" name ", size_t " size );
.fi

.IR Note :
No declaration of this function is provided in glibc headers; see NOTES.
.SH DESCRIPTION
.IR Note :
This system call is present only in kernels before Linux 2.6.

.BR create_module ()
attempts to create a loadable module entry and reserve the kernel memory
that will be needed to hold the module.
This system call requires privilege.
.SH RETURN VALUE
On success, returns the kernel address at which the module will reside.
On error, \-1 is returned and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EEXIST
A module by that name already exists.
.TP
.B EFAULT
.I name
is outside the program's accessible address space.
.TP
.B EINVAL
The requested size is too small even for the module header information.
.TP
.B ENOMEM
The kernel could not allocate a contiguous block of memory large
enough for the module.
.TP
.B ENOSYS
.BR create_module ()
is not supported in this version of the kernel
(e.g., the kernel is version 2.6 or later).
.TP
.B EPERM
The caller was not privileged
(did not have the
.B CAP_SYS_MODULE
capability).
.SH VERSIONS
This system call is present on Linux only up until kernel 2.4;
it was removed in Linux 2.6.
.\" Removed in Linux 2.5.48
.SH CONFORMING TO
.BR create_module ()
is Linux-specific.
.SH NOTES
The
.BR create_module ()
system call is not supported by glibc.
No declaration is provided in glibc headers, but,
through a quirk of history, glibc does export an ABI for this system call.
Therefore, in order to employ this system call,
it is sufficient to manually declare the interface in your code;
alternatively, you can invoke the system call using
.BR syscall (2).
.SH SEE ALSO
.BR delete_module (2),
.BR init_module (2),
.BR query_module (2)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2012 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH DELETE_MODULE 2 2014-05-10 "Linux" "Linux Programmer's Manual"
.SH NAME
delete_module \- unload a kernel module
.SH SYNOPSIS
.nf
.BI "int delete_module(const char *" name ", int " flags );
.fi

.IR Note :
No declaration of this function is provided in glibc headers; see NOTES.
.SH DESCRIPTION
The
.BR delete_module ()
system call attempts to remove the unused loadable module entry
identified by
.IR name .
If the module has an
.I exit
function, then that function is executed before unloading the module.
The
.IR flags
argument is used to modify the behavior of the system call,
as described below.
This system call requires privilege.

Module removal is attempted according to the following rules:
.IP 1. 4
If there are other loaded modules that depend on
(i.e., refer to symbols defined in) this module,
then the call fails.
.IP 2.
Otherwise, if the reference count for the module
(i.e., the number of processes currently using the module)
is zero, then the module is immediately unloaded.
.IP 3.
If a module has a nonzero reference count,
then the behavior depends on the bits set in
.IR flags .
In normal usage (see NOTES), the
.BR O_NONBLOCK
flag is always specified, and the
.BR O_TRUNC
flag may additionally be specified.
.\"  	O_TRUNC == KMOD_REMOVE_FORCE in kmod library
.\"  	O_NONBLOCK == KMOD_REMOVE_NOWAIT in kmod library

The various combinations for
.I flags
have the following effect:
.RS 4
.TP
.B flags == O_NONBLOCK
The call returns immediately, with an error.
.TP
.B flags == (O_NONBLOCK | O_TRUNC)
The module is unloaded immediately,
regardless of whether it has a nonzero reference count.
.TP
.B (flags & O_NONBLOCK) == 0
If
.I flags
does not specify
.BR O_NONBLOCK ,
the following steps occur:
.RS
.IP * 3
The module is marked so that no new references are permitted.
.IP *
If the module's reference count is nonzero,
the caller is placed in an uninterruptible sleep state
.RB ( TASK_UNINTERRUPTIBLE )
until the reference count is zero, at which point the call unblocks.
.IP *
The module is unloaded in the usual way.
.RE
.RE
.PP
The
.B O_TRUNC
flag has one further effect on the rules described above.
By default, if a module has an
.I init
function but no
.I exit
function, then an attempt to remove the module will fail.
However, if
.BR O_TRUNC
was specified, this requirement is bypassed.
.PP
Using the
.B O_TRUNC
flag is dangerous!
If the kernel was not built with
.BR CONFIG_MODULE_FORCE_UNLOAD ,
this flag is silently ignored.
(Normally,
.BR CONFIG_MODULE_FORCE_UNLOAD
is enabled.)
Using this flag taints the kernel (TAINT_FORCED_RMMOD).
.SH RETURN VALUE
On success, zero is returned.
On error, \-1 is returned and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EBUSY
The module is not "live"
(i.e., it is still being initialized or is already marked for removal);
or, the module has
an
.I init
function but has no
.I exit
function, and
.B O_TRUNC
was not specified in
.IR flags .
.TP
.B EFAULT
.I name
refers to a location outside the process's accessible address space.
.TP
.B ENOENT
No module by that name exists.
.TP
.B EPERM
The caller was not privileged
(did not have the
.B CAP_SYS_MODULE
capability),
or module unloading is disabled
(see
.IR /proc/sys/kernel/modules_disabled
in
.BR proc (5)).
.TP
.B EWOULDBLOCK
Other modules depend on this module;
or,
.BR O_NONBLOCK
was specified in
.IR flags ,
but the reference count of this module is nonzero and
.B O_TRUNC
was not specified in
.IR flags .
.SH CONFORMING TO
.BR delete_module ()
is Linux-specific.
.SH NOTES
The
.BR delete_module ()
system call is not supported by glibc.
No declaration is provided in glibc headers, but,
through a quirk of history, glibc does export an ABI for this system call.
Therefore, in order to employ this system call,
it is sufficient to manually declare the interface in your code;
alternatively, you can invoke the system call using
.BR syscall (2).

The uninterruptible sleep that may occur if
.BR O_NONBLOCK
is omitted from
.IR flags
is considered undesirable, because the sleeping process is left
in an unkillable state.
As at Linux 3.7, specifying
.BR O_NONBLOCK
is optional, but in future kernels it is likely to become mandatory.
.SS Linux 2.4 and earlier
In Linux 2.4 and earlier, the system call took only one argument:

.BI "   int delete_module(const char *" name );

If
.I name
is NULL, all unused modules marked auto-clean are removed.

Some further details of differences in the behavior of
.BR delete_module ()
in Linux 2.4 and earlier are
.I not
currently explained in this manual page.
.SH SEE ALSO
.BR create_module (2),
.BR init_module (2),
.BR query_module (2),
.BR lsmod (8),
.BR modprobe (8),
.BR rmmod (8)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" This manpage is Copyright (C) 1992 Drew Eckhardt;
.\" and Copyright (C) 1993 Michael Haardt, Ian Jackson.
.\" and Copyright (C) 2005, 2008 Michael Kerrisk <mtk.manpages@gmail.com>
.\" and Copyright (C) 2014 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified 1993-07-21, Rik Faith <faith@cs.unc.edu>
.\" Modified 1994-08-21, Michael Chastain <mec@shell.portal.com>:
.\"   Fixed typoes.
.\" Modified 1997-01-31, Eric S. Raymond <esr@thyrsus.com>
.\" Modified 2002-09-28, aeb
.\" 2009-01-12, mtk, reordered text in DESCRIPTION and added some
.\"     details for dup2().
.\" 2008-10-09, mtk: add description of dup3()
.\"
.TH DUP 2 2015-01-22 "Linux" "Linux Programmer's Manual"
.SH NAME
dup, dup2, dup3 \- duplicate a file descriptor
.SH SYNOPSIS
.nf
.B #include <unistd.h>
.sp
.BI "int dup(int " oldfd );
.BI "int dup2(int " oldfd ", int " newfd );
.sp
.BR "#define _GNU_SOURCE" "             /* See feature_test_macros(7) */"
.BR "#include <fcntl.h>" "              /* Obtain O_* constant definitions */
.B #include <unistd.h>
.sp
.BI "int dup3(int " oldfd ", int " newfd ", int " flags );
.fi
.SH DESCRIPTION
The
.BR dup ()
system call creates a copy of the file descriptor
.IR oldfd ,
using the lowest-numbered unused descriptor for the new descriptor.

After a successful return,
the old and new file descriptors may be used interchangeably.
They refer to the same open file description (see
.BR open (2))
and thus share file offset and file status flags;
for example, if the file offset is modified by using
.BR lseek (2)
on one of the descriptors, the offset is also changed for the other.

The two descriptors do not share file descriptor flags
(the close-on-exec flag).
The close-on-exec flag
.RB ( FD_CLOEXEC ;
see
.BR fcntl (2))
for the duplicate descriptor is off.
.\"
.SS dup2()
The
.BR dup2 ()
system call performs the same task as
.BR dup (),
but instead of using the lowest-numbered unused file descriptor,
it uses the descriptor number specified in
.IR newfd .
If the descriptor
.IR newfd
was previously open, it is silently closed before being reused.

The steps of closing and reusing the file descriptor
.IR newfd
are performed
.IR atomically .
This is important, because trying to implement equivalent functionality using
.BR close (2)
and
.BR dup ()
would be
subject to race conditions, whereby
.I newfd
might be reused between the two steps.
Such reuse could happen because the main program is interrupted
by a signal handler that allocates a file descriptor,
or because a parallel thread allocates a file descriptor.

Note the following points:
.IP * 3
If
.I oldfd
is not a valid file descriptor, then the call fails, and
.I newfd
is not closed.
.IP *
If
.I oldfd
is a valid file descriptor, and
.I newfd
has the same value as
.IR oldfd ,
then
.BR dup2 ()
does nothing, and returns
.IR newfd .
.\"
.SS dup3()
.BR dup3 ()
is the same as
.BR dup2 (),
except that:
.IP * 3
The caller can force the close-on-exec flag to be set
for the new file descriptor by specifying
.BR O_CLOEXEC
in
.IR flags .
See the description of the same flag in
.BR open (2)
for reasons why this may be useful.
.IP *
.\" Ulrich Drepper, LKML, 2008-10-09:
.\"	We deliberately decided on this change.  Otherwise, what is the
.\"	result of dup3(fd, fd, O_CLOEXEC)?
If
.IR oldfd
equals
.IR newfd ,
then
.BR dup3 ()
fails with the error
.BR EINVAL .
.SH RETURN VALUE
On success, these system calls
return the new descriptor.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EBADF
.I oldfd
isn't an open file descriptor.
.TP
.B EBADF
.I newfd
is out of the allowed range for file descriptors (see the discussion of
.BR RLIMIT_NOFILE
in
.BR getrlimit (2)).
.TP
.B EBUSY
(Linux only) This may be returned by
.BR dup2 ()
or
.BR dup3 ()
during a race condition with
.BR open (2)
and
.BR dup ().
.TP
.B EINTR
The
.BR dup2 ()
or
.BR dup3 ()
call was interrupted by a signal; see
.BR signal (7).
.TP
.B EINVAL
.RB ( dup3 ())
.I flags
contain an invalid value.
.TP
.B EINVAL
.RB ( dup3 ())
.\" FIXME . To confirm with Al Viro that this was intended, and its rationale
.I oldfd
was equal to
.IR newfd .
.TP
.B EMFILE
The process already has the maximum number of file
descriptors open and tried to open a new one (see the discussion of
.BR RLIMIT_NOFILE
in
.BR getrlimit (2)).
.SH VERSIONS
.BR dup3 ()
was added to Linux in version 2.6.27;
glibc support is available starting with
version 2.9.
.SH CONFORMING TO
.BR dup (),
.BR dup2 ():
SVr4, 4.3BSD, POSIX.1-2001.

.BR dup3 ()
is Linux-specific.
.\" SVr4 documents additional
.\" EINTR and ENOLINK error conditions.  POSIX.1 adds EINTR.
.\" The EBUSY return is Linux-specific.
.SH NOTES
The error returned by
.BR dup2 ()
is different from that returned by
.BR fcntl( "..., " F_DUPFD ", ..." )
when
.I newfd
is out of range.
On some systems,
.BR dup2 ()
also sometimes returns
.B EINVAL
like
.BR F_DUPFD .

If
.I newfd
was open, any errors that would have been reported at
.BR close (2)
time are lost.
If this is of concern,
then\(emunless the program is single-threaded and does not allocate
file descriptors in signal handlers\(emthe correct approach is
.I not
to close
.I newfd
before calling
.BR dup2 (),
because of the race condition described above.
Instead, code something like the following could be used:

.nf
    /* Obtain a duplicate of 'newfd' that can subsequently
       be used to check for close() errors; an EBADF error
       means that 'newfd' was not open. */

    tmpfd = dup(newfd);
    if (tmpfd == \-1 && errno != EBADF) {
        /* Handle unexpected dup() error */
    }

    /* Atomically duplicate 'oldfd' on 'newfd' */

    if (dup2(oldfd, newfd) == \-1) {
        /* Handle dup2() error */
    }

    /* Now check for close() errors on the file originally
       referred to by 'newfd' */

    if (tmpfd != \-1) {
        if (close(tmpfd) == \-1) {
            /* Handle errors from close */
        }
    }
.fi
.SH SEE ALSO
.BR close (2),
.BR fcntl (2),
.BR open (2)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\"  Copyright (C) 2003  Davide Libenzi
.\"  Davide Libenzi <davidel@xmailserver.org>
.\"
.\" %%%LICENSE_START(GPLv2+_SW_3_PARA)
.\"  This program is free software; you can redistribute it and/or modify
.\"  it under the terms of the GNU General Public License as published by
.\"  the Free Software Foundation; either version 2 of the License, or
.\"  (at your option) any later version.
.\"
.\"  This program is distributed in the hope that it will be useful,
.\"  but WITHOUT ANY WARRANTY; without even the implied warranty of
.\"  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\"  GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.\" Modified 2004-06-17 by Michael Kerrisk <mtk.manpages@gmail.com>
.\" Modified 2005-04-04 by Marko Kohtala <marko.kohtala@gmail.com>
.\" 2008-10-10, mtk: add description of epoll_create1()
.\"
.TH EPOLL_CREATE 2 2012-04-15 "Linux" "Linux Programmer's Manual"
.SH NAME
epoll_create, epoll_create1 \- open an epoll file descriptor
.SH SYNOPSIS
.nf
.B #include <sys/epoll.h>
.sp
.BI "int epoll_create(int " size );
.BI "int epoll_create1(int " flags );
.fi
.SH DESCRIPTION
.BR epoll_create ()
creates an
.BR epoll (7)
instance.
Since Linux 2.6.8, the
.I size
argument is ignored, but must be greater than zero; see NOTES below.

.BR epoll_create ()
returns a file descriptor referring to the new epoll instance.
This file descriptor is used for all the subsequent calls to the
.B epoll
interface.
When no longer required, the file descriptor returned by
.BR epoll_create ()
should be closed by using
.BR close (2).
When all file descriptors referring to an epoll instance have been closed,
the kernel destroys the instance
and releases the associated resources for reuse.
.SS epoll_create1()
If
.I flags
is 0, then, other than the fact that the obsolete
.I size
argument is dropped,
.BR epoll_create1 ()
is the same as
.BR epoll_create ().
The following value can be included in
.IR flags
to obtain different behavior:
.TP
.B EPOLL_CLOEXEC
Set the close-on-exec
.RB ( FD_CLOEXEC )
flag on the new file descriptor.
See the description of the
.B O_CLOEXEC
flag in
.BR open (2)
for reasons why this may be useful.
.SH RETURN VALUE
On success,
these system calls
return a nonnegative file descriptor.
On error, \-1 is returned, and
.I errno
is set to indicate the error.
.SH ERRORS
.TP
.B EINVAL
.I size
is not positive.
.TP
.B EINVAL
.RB ( epoll_create1 ())
Invalid value specified in
.IR flags .
.TP
.B EMFILE
The per-user limit on the number of epoll instances imposed by
.I /proc/sys/fs/epoll/max_user_instances
was encountered.
See
.BR epoll (7)
for further details.
.TP
.B ENFILE
The system limit on the total number of open files has been reached.
.TP
.B ENOMEM
There was insufficient memory to create the kernel object.
.SH VERSIONS
.BR epoll_create ()
was added to the kernel in version 2.6.
Library support is provided in glibc starting with version 2.3.2.

.\" To be precise: kernel 2.5.44.
.\" The interface should be finalized by Linux kernel 2.5.66.
.BR epoll_create1 ()
was added to the kernel in version 2.6.27.
Library support is provided in glibc starting with version 2.9.
.SH CONFORMING TO
.BR epoll_create ()
is Linux-specific.
.SH NOTES
In the initial
.BR epoll_create ()
implementation, the
.I size
argument informed the kernel of the number of file descriptors
that the caller expected to add to the
.B epoll
instance.
The kernel used this information as a hint for the amount of
space to initially allocate in internal data structures describing events.
(If necessary, the kernel would allocate more space
if the caller's usage exceeded the hint given in
.IR size .)
Nowadays,
this hint is no longer required
(the kernel dynamically sizes the required data structures
without needing the hint), but
.I size
must still be greater than zero,
in order to ensure backward compatibility when new
.B epoll
applications are run on older kernels.
.SH SEE ALSO
.BR close (2),
.BR epoll_ctl (2),
.BR epoll_wait (2),
.BR epoll (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\"  Copyright (C) 2003  Davide Libenzi
.\"  Davide Libenzi <davidel@xmailserver.org>
.\"
.\" %%%LICENSE_START(GPLv2+_SW_3_PARA)
.\"  This program is free software; you can redistribute it and/or modify
.\"  it under the terms of the GNU General Public License as published by
.\"  the Free Software Foundation; either version 2 of the License, or
.\"  (at your option) any later version.
.\"
.\"  This program is distributed in the hope that it will be useful,
.\"  but WITHOUT ANY WARRANTY; without even the implied warranty of
.\"  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\"  GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.TH EPOLL_CTL 2 2015-05-07 "Linux" "Linux Programmer's Manual"
.SH NAME
epoll_ctl \- control interface for an epoll descriptor
.SH SYNOPSIS
.B #include <sys/epoll.h>
.sp
.BI "int epoll_ctl(int " epfd ", int " op ", int " fd \
", struct epoll_event *" event );
.SH DESCRIPTION
This system call performs control operations on the
.BR epoll (7)
instance
referred to by the file descriptor
.IR epfd .
It requests that the operation
.I op
be performed for the target file descriptor,
.IR fd .

Valid values for the
.I op
argument are:
.TP
.B EPOLL_CTL_ADD
Register the target file descriptor
.I fd
on the
.B epoll
instance referred to by the file descriptor
.I epfd
and associate the event
.I event
with the internal file linked to
.IR fd .
.TP
.B EPOLL_CTL_MOD
Change the event
.I event
associated with the target file descriptor
.IR fd .
.TP
.B EPOLL_CTL_DEL
Remove (deregister) the target file descriptor
.I fd
from the
.B epoll
instance referred to by
.IR epfd .
The
.I event
is ignored and can be NULL (but see BUGS below).
.PP
The
.I event
argument describes the object linked to the file descriptor
.IR fd .
The
.I struct epoll_event
is defined as:
.sp
.in +4n
.nf
typedef union epoll_data {
    void        *ptr;
    int          fd;
    uint32_t     u32;
    uint64_t     u64;
} epoll_data_t;

struct epoll_event {
    uint32_t     events;      /* Epoll events */
    epoll_data_t data;        /* User data variable */
};
.fi
.in

The
.I events
member is a bit set composed using the following available event
types:
.TP
.B EPOLLIN
The associated file is available for
.BR read (2)
operations.
.TP
.B EPOLLOUT
The associated file is available for
.BR write (2)
operations.
.TP
.BR EPOLLRDHUP " (since Linux 2.6.17)"
Stream socket peer closed connection,
or shut down writing half of connection.
(This flag is especially useful for writing simple code to detect
peer shutdown when using Edge Triggered monitoring.)
.TP
.B EPOLLPRI
There is urgent data available for
.BR read (2)
operations.
.TP
.B EPOLLERR
Error condition happened on the associated file descriptor.
.BR epoll_wait (2)
will always wait for this event; it is not necessary to set it in
.IR events .
.TP
.B EPOLLHUP
Hang up happened on the associated file descriptor.
.BR epoll_wait (2)
will always wait for this event; it is not necessary to set it in
.IR events .
Note that when reading from a channel such as a pipe or a stream socket,
this event merely indicates that the peer closed its end of the channel.
Subsequent reads from the channel will return 0 (end of file)
only after all outstanding data in the channel has been consumed.
.TP
.B EPOLLET
Sets the Edge Triggered behavior for the associated file descriptor.
The default behavior for
.B epoll
is Level Triggered.
See
.BR epoll (7)
for more detailed information about Edge and Level Triggered event
distribution architectures.
.TP
.BR EPOLLONESHOT " (since Linux 2.6.2)"
Sets the one-shot behavior for the associated file descriptor.
This means that after an event is pulled out with
.BR epoll_wait (2)
the associated file descriptor is internally disabled and no other events
will be reported by the
.B epoll
interface.
The user must call
.BR epoll_ctl ()
with
.B EPOLL_CTL_MOD
to rearm the file descriptor with a new event mask.
.TP
.BR EPOLLWAKEUP " (since Linux 3.5)"
.\" commit 4d7e30d98939a0340022ccd49325a3d70f7e0238
If
.B EPOLLONESHOT
and
.B EPOLLET
are clear and the process has the
.B CAP_BLOCK_SUSPEND
capability,
ensure that the system does not enter "suspend" or
"hibernate" while this event is pending or being processed.
The event is considered as being "processed" from the time
when it is returned by a call to
.BR epoll_wait (2)
until the next call to
.BR epoll_wait (2)
on the same
.BR epoll (7)
file descriptor,
the closure of that file descriptor,
the removal of the event file descriptor with
.BR EPOLL_CTL_DEL ,
or the clearing of
.B EPOLLWAKEUP
for the event file descriptor with
.BR EPOLL_CTL_MOD .
See also BUGS.
.SH RETURN VALUE
When successful,
.BR epoll_ctl ()
returns zero.
When an error occurs,
.BR epoll_ctl ()
returns \-1 and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EBADF
.I epfd
or
.I fd
is not a valid file descriptor.
.TP
.B EEXIST
.I op
was
.BR EPOLL_CTL_ADD ,
and the supplied file descriptor
.I fd
is already registered with this epoll instance.
.TP
.B EINVAL
.I epfd
is not an
.B epoll
file descriptor,
or
.I fd
is the same as
.IR epfd ,
or the requested operation
.I op
is not supported by this interface.
.TP
.B ENOENT
.I op
was
.B EPOLL_CTL_MOD
or
.BR EPOLL_CTL_DEL ,
and
.I fd
is not registered with this epoll instance.
.TP
.B ENOMEM
There was insufficient memory to handle the requested
.I op
control operation.
.TP
.B ENOSPC
The limit imposed by
.I /proc/sys/fs/epoll/max_user_watches
was encountered while trying to register
.RB ( EPOLL_CTL_ADD )
a new file descriptor on an epoll instance.
See
.BR epoll (7)
for further details.
.TP
.B EPERM
The target file
.I fd
does not support
.BR epoll .
This error can occur if
.I fd
refers to, for example, a regular file or a directory.
.SH VERSIONS
.BR epoll_ctl ()
was added to the kernel in version 2.6.
.\" To be precise: kernel 2.5.44.
.\" The interface should be finalized by Linux kernel 2.5.66.
.SH CONFORMING TO
.BR epoll_ctl ()
is Linux-specific.
Library support is provided in glibc starting with version 2.3.2.
.SH NOTES
The
.B epoll
interface supports all file descriptors that support
.BR poll (2).
.SH BUGS
In kernel versions before 2.6.9, the
.B EPOLL_CTL_DEL
operation required a non-null pointer in
.IR event ,
even though this argument is ignored.
Since Linux 2.6.9,
.I event
can be specified as NULL
when using
.BR EPOLL_CTL_DEL .
Applications that need to be portable to kernels before 2.6.9
should specify a non-null pointer in
.IR event .

If
.B EPOLLWAKEUP
is specified in
.IR flags ,
but the caller does not have the
.BR CAP_BLOCK_SUSPEND
capability, then the
.B EPOLLWAKEUP
flag is
.IR "silently ignored" .
This unfortunate behavior is necessary because no validity
checks were performed on the
.IR flags
argument in the original implementation, and the addition of the
.B EPOLLWAKEUP
with a check that caused the call to fail if the caller did not have the
.B CAP_BLOCK_SUSPEND
capability caused a breakage in at least one existing user-space
application that happened to randomly (and uselessly) specify this bit.
.\" commit a8159414d7e3af7233e7a5a82d1c5d85379bd75c (behavior change)
.\" https://lwn.net/Articles/520198/
A robust application should therefore double check that it has the
.B CAP_BLOCK_SUSPEND
capability if attempting to use the
.B EPOLLWAKEUP
flag.
.SH SEE ALSO
.BR epoll_create (2),
.BR epoll_wait (2),
.BR poll (2),
.BR epoll (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\"  Copyright (C) 2003  Davide Libenzi
.\"  Davide Libenzi <davidel@xmailserver.org>
.\"
.\" %%%LICENSE_START(GPLv2+_SW_3_PARA)
.\"  This program is free software; you can redistribute it and/or modify
.\"  it under the terms of the GNU General Public License as published by
.\"  the Free Software Foundation; either version 2 of the License, or
.\"  (at your option) any later version.
.\"
.\"  This program is distributed in the hope that it will be useful,
.\"  but WITHOUT ANY WARRANTY; without even the implied warranty of
.\"  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\"  GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.\" 2007-04-30: mtk, Added description of epoll_pwait()
.\"
.TH EPOLL_WAIT 2 2015-05-07 "Linux" "Linux Programmer's Manual"
.SH NAME
epoll_wait, epoll_pwait \- wait for an I/O event on an epoll file descriptor
.SH SYNOPSIS
.nf
.B #include <sys/epoll.h>
.sp
.BI "int epoll_wait(int " epfd ", struct epoll_event *" events ,
.BI "               int " maxevents ", int " timeout );
.BI "int epoll_pwait(int " epfd ", struct epoll_event *" events ,
.BI "               int " maxevents ", int " timeout ,
.BI "               const sigset_t *" sigmask );
.fi
.SH DESCRIPTION
The
.BR epoll_wait ()
system call waits for events on the
.BR epoll (7)
instance referred to by the file descriptor
.IR epfd .
The memory area pointed to by
.I events
will contain the events that will be available for the caller.
Up to
.I maxevents
are returned by
.BR epoll_wait ().
The
.I maxevents
argument must be greater than zero.

The
.I timeout
argument specifies the number of milliseconds that
.BR epoll_wait ()
will block.
The call will block until either:
.IP * 3
a file descriptor delivers an event;
.IP *
the call is interrupted by a signal handler; or
.IP *
the timeout expires.
.PP
Note that the
.I timeout
interval will be rounded up to the system clock granularity,
and kernel scheduling delays mean that the blocking interval
may overrun by a small amount.
Specifying a
.I timeout
of \-1 causes
.BR epoll_wait ()
to block indefinitely, while specifying a
.I timeout
equal to zero cause
.BR epoll_wait ()
to return immediately, even if no events are available.

The
.I struct epoll_event
is defined as:
.sp
.in +4n
.nf
typedef union epoll_data {
    void    *ptr;
    int      fd;
    uint32_t u32;
    uint64_t u64;
} epoll_data_t;

struct epoll_event {
    uint32_t     events;    /* Epoll events */
    epoll_data_t data;      /* User data variable */
};
.fi
.in

The
.I data
of each returned structure will contain the same data the user set with an
.BR epoll_ctl (2)
.RB ( EPOLL_CTL_ADD ", " EPOLL_CTL_MOD )
while the
.I events
member will contain the returned event bit field.
.SS epoll_pwait()
The relationship between
.BR epoll_wait ()
and
.BR epoll_pwait ()
is analogous to the relationship between
.BR select (2)
and
.BR pselect (2):
like
.BR pselect (2),
.BR epoll_pwait ()
allows an application to safely wait until either a file descriptor
becomes ready or until a signal is caught.

The following
.BR epoll_pwait ()
call:
.nf

    ready = epoll_pwait(epfd, &events, maxevents, timeout, &sigmask);

.fi
is equivalent to
.I atomically
executing the following calls:
.nf

    sigset_t origmask;

    pthread_sigmask(SIG_SETMASK, &sigmask, &origmask);
    ready = epoll_wait(epfd, &events, maxevents, timeout);
    pthread_sigmask(SIG_SETMASK, &origmask, NULL);
.fi
.PP
The
.I sigmask
argument may be specified as NULL, in which case
.BR epoll_pwait ()
is equivalent to
.BR epoll_wait ().
.SH RETURN VALUE
When successful,
.BR epoll_wait ()
returns the number of file descriptors ready for the requested I/O, or zero
if no file descriptor became ready during the requested
.I timeout
milliseconds.
When an error occurs,
.BR epoll_wait ()
returns \-1 and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EBADF
.I epfd
is not a valid file descriptor.
.TP
.B EFAULT
The memory area pointed to by
.I events
is not accessible with write permissions.
.TP
.B EINTR
The call was interrupted by a signal handler before either (1) any of the
requested events occurred or (2) the
.I timeout
expired; see
.BR signal (7).
.TP
.B EINVAL
.I epfd
is not an
.B epoll
file descriptor, or
.I maxevents
is less than or equal to zero.
.SH VERSIONS
.BR epoll_wait ()
was added to the kernel in version 2.6.
.\" To be precise: kernel 2.5.44.
.\" The interface should be finalized by Linux kernel 2.5.66.
Library support is provided in glibc starting with version 2.3.2.

.BR epoll_pwait ()
was added to Linux in kernel 2.6.19.
Library support is provided in glibc starting with version 2.6.
.SH CONFORMING TO
.BR epoll_wait ()
is Linux-specific.
.SH NOTES
While one thread is blocked in a call to
.BR epoll_pwait (),
it is possible for another thread to add a file descriptor to the waited-upon
.B epoll
instance.
If the new file descriptor becomes ready,
it will cause the
.BR epoll_wait ()
call to unblock.

For a discussion of what may happen if a file descriptor in an
.B epoll
instance being monitored by
.BR epoll_wait ()
is closed in another thread, see
.BR select (2).
.SH BUGS
In kernels before 2.6.37, a
.I timeout
value larger than approximately
.I LONG_MAX / HZ
milliseconds is treated as \-1 (i.e., infinity).
Thus, for example, on a system where the
.I sizeof(long)
is 4 and the kernel
.I HZ
value is 1000,
this means that timeouts greater than 35.79 minutes are treated as infinity.
.SS C library/kernel ABI differences
The raw
.BR epoll_pwait ()
system call has a sixth argument,
.IR "size_t sigsetsize" ,
which specifies the size in bytes of the
.IR sigmask
argument.
The glibc
.BR epoll_pwait ()
wrapper function specifies this argument as a fixed value
(equal to
.IR sizeof(sigset_t) ).
.SH SEE ALSO
.BR epoll_create (2),
.BR epoll_ctl (2),
.BR epoll (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2008 Michael Kerrisk <mtk.manpages@gmail.com>
.\" starting from a version by Davide Libenzi <davidel@xmailserver.org>
.\"
.\" %%%LICENSE_START(GPLv2+_SW_3_PARA)
.\" This program is free software; you can redistribute it and/or modify
.\" it under the terms of the GNU General Public License as published by
.\" the Free Software Foundation; either version 2 of the License, or
.\" (at your option) any later version.
.\"
.\" This program is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.\" 2008-10-10, mtk: describe eventfd2(), and EFD_NONBLOCK and EFD_CLOEXEC
.\"
.TH EVENTFD 2 2014-07-08 Linux "Linux Programmer's Manual"
.SH NAME
eventfd \- create a file descriptor for event notification
.SH SYNOPSIS
.B #include <sys/eventfd.h>
.sp
.BI "int eventfd(unsigned int " initval ", int " flags );
.SH DESCRIPTION
.BR eventfd ()
creates an "eventfd object" that can be used as
an event wait/notify mechanism by user-space applications,
and by the kernel to notify user-space applications of events.
The object contains an unsigned 64-bit integer
.RI ( uint64_t )
counter that is maintained by the kernel.
This counter is initialized with the value specified in the argument
.IR initval .

The following values may be bitwise ORed in
.IR flags
to change the behavior of
.BR eventfd ():
.TP
.BR EFD_CLOEXEC " (since Linux 2.6.27)"
Set the close-on-exec
.RB ( FD_CLOEXEC )
flag on the new file descriptor.
See the description of the
.B O_CLOEXEC
flag in
.BR open (2)
for reasons why this may be useful.
.TP
.BR EFD_NONBLOCK " (since Linux 2.6.27)"
Set the
.BR O_NONBLOCK
file status flag on the new open file description.
Using this flag saves extra calls to
.BR fcntl (2)
to achieve the same result.
.TP
.BR EFD_SEMAPHORE " (since Linux 2.6.30)"
Provide semaphore-like semantics for reads from the new file descriptor.
See below.
.PP
In Linux up to version 2.6.26, the
.I flags
argument is unused, and must be specified as zero.

As its return value,
.BR eventfd ()
returns a new file descriptor that can be used to refer to the
eventfd object.
The following operations can be performed on the file descriptor:
.TP
.BR read (2)
Each successful
.BR read (2)
returns an 8-byte integer.
A
.BR read (2)
will fail with the error
.B EINVAL
if the size of the supplied buffer is less than 8 bytes.
.IP
The value returned by
.BR read (2)
is in host byte order\(emthat is,
the native byte order for integers on the host machine.
.IP
The semantics of
.BR read (2)
depend on whether the eventfd counter currently has a nonzero value
and whether the
.BR EFD_SEMAPHORE
flag was specified when creating the eventfd file descriptor:
.RS
.IP * 3
If
.BR EFD_SEMAPHORE
was not specified and the eventfd counter has a nonzero value, then a
.BR read (2)
returns 8 bytes containing that value,
and the counter's value is reset to zero.
.IP *
If
.BR EFD_SEMAPHORE
was specified and the eventfd counter has a nonzero value, then a
.BR read (2)
returns 8 bytes containing the value 1,
and the counter's value is decremented by 1.
.IP *
If the eventfd counter is zero at the time of the call to
.BR read (2),
then the call either blocks until the counter becomes nonzero
(at which time, the
.BR read (2)
proceeds as described above)
or fails with the error
.B EAGAIN
if the file descriptor has been made nonblocking.
.RE
.TP
.BR write (2)
A
.BR write (2)
call adds the 8-byte integer value supplied in its
buffer to the counter.
The maximum value that may be stored in the counter is the largest
unsigned 64-bit value minus 1 (i.e., 0xfffffffffffffffe).
If the addition would cause the counter's value to exceed
the maximum, then the
.BR write (2)
either blocks until a
.BR read (2)
is performed on the file descriptor,
or fails with the error
.B EAGAIN
if the file descriptor has been made nonblocking.
.IP
A
.BR write (2)
will fail with the error
.B EINVAL
if the size of the supplied buffer is less than 8 bytes,
or if an attempt is made to write the value 0xffffffffffffffff.
.TP
.BR poll "(2), " select "(2) (and similar)"
The returned file descriptor supports
.BR poll (2)
(and analogously
.BR epoll (7))
and
.BR select (2),
as follows:
.RS
.IP * 3
The file descriptor is readable
(the
.BR select (2)
.I readfds
argument; the
.BR poll (2)
.B POLLIN
flag)
if the counter has a value greater than 0.
.IP *
The file descriptor is writable
(the
.BR select (2)
.I writefds
argument; the
.BR poll (2)
.B POLLOUT
flag)
if it is possible to write a value of at least "1" without blocking.
.IP *
If an overflow of the counter value was detected,
then
.BR select (2)
indicates the file descriptor as being both readable and writable, and
.BR poll (2)
returns a
.B POLLERR
event.
As noted above,
.BR write (2)
can never overflow the counter.
However an overflow can occur if 2^64
eventfd "signal posts" were performed by the KAIO
subsystem (theoretically possible, but practically unlikely).
If an overflow has occurred, then
.BR read (2)
will return that maximum
.I uint64_t
value (i.e., 0xffffffffffffffff).
.RE
.IP
The eventfd file descriptor also supports the other file-descriptor
multiplexing APIs:
.BR pselect (2)
and
.BR ppoll (2).
.TP
.BR close (2)
When the file descriptor is no longer required it should be closed.
When all file descriptors associated with the same eventfd object
have been closed, the resources for object are freed by the kernel.
.PP
A copy of the file descriptor created by
.BR eventfd ()
is inherited by the child produced by
.BR fork (2).
The duplicate file descriptor is associated with the same
eventfd object.
File descriptors created by
.BR eventfd ()
are preserved across
.BR execve (2),
unless the close-on-exec flag has been set.
.SH RETURN VALUE
On success,
.BR eventfd ()
returns a new eventfd file descriptor.
On error, \-1 is returned and
.I errno
is set to indicate the error.
.SH ERRORS
.TP
.B EINVAL
An unsupported value was specified in
.IR flags .
.TP
.B EMFILE
The per-process limit on open file descriptors has been reached.
.TP
.B ENFILE
The system-wide limit on the total number of open files has been
reached.
.TP
.B ENODEV
.\" Note from Davide:
.\" The ENODEV error is basically never going to happen if
.\" the kernel boots correctly. That error happen only if during
.\" the kernel initialization, some error occur in the anonymous
.\" inode source initialization.
Could not mount (internal) anonymous inode device.
.TP
.B ENOMEM
There was insufficient memory to create a new
eventfd file descriptor.
.SH VERSIONS
.BR eventfd ()
is available on Linux since kernel 2.6.22.
Working support is provided in glibc since version 2.8.
.\" eventfd() is in glibc 2.7, but reportedly does not build
The
.BR eventfd2 ()
system call (see NOTES) is available on Linux since kernel 2.6.27.
Since version 2.9, the glibc
.BR eventfd ()
wrapper will employ the
.BR eventfd2 ()
system call, if it is supported by the kernel.
.SH CONFORMING TO
.BR eventfd ()
and
.BR eventfd2 ()
are Linux-specific.
.SH NOTES
Applications can use an eventfd file descriptor instead of a pipe (see
.BR pipe (2))
in all cases where a pipe is used simply to signal events.
The kernel overhead of an eventfd file descriptor
is much lower than that of a pipe,
and only one file descriptor is
required (versus the two required for a pipe).

When used in the kernel, an eventfd
file descriptor can provide a bridge from kernel to user space, allowing,
for example, functionalities like KAIO (kernel AIO)
.\" or eventually syslets/threadlets
to signal to a file descriptor that some operation is complete.

A key point about an eventfd file descriptor is that it can be
monitored just like any other file descriptor using
.BR select (2),
.BR poll (2),
or
.BR epoll (7).
This means that an application can simultaneously monitor the
readiness of "traditional" files and the readiness of other
kernel mechanisms that support the eventfd interface.
(Without the
.BR eventfd ()
interface, these mechanisms could not be multiplexed via
.BR select (2),
.BR poll (2),
or
.BR epoll (7).)
.SS C library/kernel ABI differences
There are two underlying Linux system calls:
.BR eventfd ()
and the more recent
.BR eventfd2 ().
The former system call does not implement a
.I flags
argument.
The latter system call implements the
.I flags
values described above.
The glibc wrapper function will use
.BR eventfd2 ()
where it is available.
.SS Additional glibc features
The GNU C library defines an additional type,
and two functions that attempt to abstract some of the details of
reading and writing on an eventfd file descriptor:
.in +4n
.nf

typedef uint64_t eventfd_t;

int eventfd_read(int fd, eventfd_t *value);
int eventfd_write(int fd, eventfd_t value);
.fi
.in

The functions perform the read and write operations on an
eventfd file descriptor,
returning 0 if the correct number of bytes was transferred,
or \-1 otherwise.
.SH EXAMPLE
.PP
The following program creates an eventfd file descriptor
and then forks to create a child process.
While the parent briefly sleeps,
the child writes each of the integers supplied in the program's
command-line arguments to the eventfd file descriptor.
When the parent has finished sleeping,
it reads from the eventfd file descriptor.

The following shell session shows a sample run of the program:
.in +4n
.nf

.RB "$" " ./a.out 1 2 4 7 14"
Child writing 1 to efd
Child writing 2 to efd
Child writing 4 to efd
Child writing 7 to efd
Child writing 14 to efd
Child completed write loop
Parent about to read
Parent read 28 (0x1c) from efd
.fi
.in
.SS Program source
\&
.nf
#include <sys/eventfd.h>
#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>
#include <stdint.h>             /* Definition of uint64_t */

#define handle_error(msg) \\
    do { perror(msg); exit(EXIT_FAILURE); } while (0)

int
main(int argc, char *argv[])
{
    int efd, j;
    uint64_t u;
    ssize_t s;

    if (argc < 2) {
        fprintf(stderr, "Usage: %s <num>...\\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    efd = eventfd(0, 0);
    if (efd == \-1)
        handle_error("eventfd");

    switch (fork()) {
    case 0:
        for (j = 1; j < argc; j++) {
            printf("Child writing %s to efd\\n", argv[j]);
            u = strtoull(argv[j], NULL, 0);
                    /* strtoull() allows various bases */
            s = write(efd, &u, sizeof(uint64_t));
            if (s != sizeof(uint64_t))
                handle_error("write");
        }
        printf("Child completed write loop\\n");

        exit(EXIT_SUCCESS);

    default:
        sleep(2);

        printf("Parent about to read\\n");
        s = read(efd, &u, sizeof(uint64_t));
        if (s != sizeof(uint64_t))
            handle_error("read");
        printf("Parent read %llu (0x%llx) from efd\\n",
                (unsigned long long) u, (unsigned long long) u);
        exit(EXIT_SUCCESS);

    case \-1:
        handle_error("fork");
    }
}
.fi
.SH SEE ALSO
.BR futex (2),
.BR pipe (2),
.BR poll (2),
.BR read (2),
.BR select (2),
.BR signalfd (2),
.BR timerfd_create (2),
.BR write (2),
.BR epoll (7),
.BR sem_overview (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1992 Drew Eckhardt (drew@cs.colorado.edu), March 28, 1992
.\" and Copyright (c) 2006 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified by Michael Haardt <michael@moria.de>
.\" Modified 1993-07-21 by Rik Faith <faith@cs.unc.edu>
.\" Modified 1994-08-21 by Michael Chastain <mec@shell.portal.com>:
.\" Modified 1997-01-31 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified 1999-11-12 by Urs Thuermann <urs@isnogud.escape.de>
.\" Modified 2004-06-23 by Michael Kerrisk <mtk.manpages@gmail.com>
.\" 2006-09-04 Michael Kerrisk <mtk.manpages@gmail.com>
.\"     Added list of process attributes that are not preserved on exec().
.\" 2007-09-14 Ollie Wild <aaw@google.com>, mtk
.\"     Add text describing limits on command-line arguments + environment
.\"
.TH EXECVE 2 2015-05-07 "Linux" "Linux Programmer's Manual"
.SH NAME
execve \- execute program
.SH SYNOPSIS
.B #include <unistd.h>
.sp
.BI "int execve(const char *" filename ", char *const " argv "[], "
.br
.BI "           char *const " envp []);
.SH DESCRIPTION
.BR execve ()
executes the program pointed to by \fIfilename\fP.
\fIfilename\fP must be either a binary executable, or a script
starting with a line of the form:

.in +4n
.nf
\fB#!\fP \fIinterpreter \fP[optional-arg]
.fi
.in

For details of the latter case, see "Interpreter scripts" below.

\fIargv\fP is an array of argument strings passed to the new program.
By convention, the first of these strings should contain the filename
associated with the file being executed.
\fIenvp\fP is an array of strings, conventionally of the form
\fBkey=value\fP, which are passed as environment to the new program.
Both \fIargv\fP and \fIenvp\fP must be terminated by a null pointer.
The argument vector and environment can be accessed by the
called program's main function, when it is defined as:

.in +4n
.nf
int main(int argc, char *argv[], char *envp[])
.fi
.in

.BR execve ()
does not return on success, and the text, data, bss, and
stack of the calling process are overwritten by that of the program
loaded.

If the current program is being ptraced, a \fBSIGTRAP\fP is sent to it
after a successful
.BR execve ().

If the set-user-ID bit is set on the program file pointed to by
\fIfilename\fP,
and the underlying filesystem is not mounted
.I nosuid
(the
.B MS_NOSUID
flag for
.BR mount (2)),
and the calling process is not being ptraced,
then the effective user ID of the calling process is changed
to that of the owner of the program file.
Similarly, when the set-group-ID
bit of the program file is set the effective group ID of the calling
process is set to the group of the program file.

The effective user ID of the process is copied to the saved set-user-ID;
similarly, the effective group ID is copied to the saved set-group-ID.
This copying takes place after any effective ID changes that occur
because of the set-user-ID and set-group-ID mode bits.

If the executable is an a.out dynamically linked
binary executable containing
shared-library stubs, the Linux dynamic linker
.BR ld.so (8)
is called at the start of execution to bring
needed shared libraries into memory
and link the executable with them.

If the executable is a dynamically linked ELF executable, the
interpreter named in the PT_INTERP segment is used to load the needed
shared libraries.
This interpreter is typically
.I /lib/ld-linux.so.2
for binaries linked with glibc.

All process attributes are preserved during an
.BR execve (),
except the following:
.IP * 3
The dispositions of any signals that are being caught are
reset to the default
.RB ( signal (7)).
.IP *
Any alternate signal stack is not preserved
.RB ( sigaltstack (2)).
.IP *
Memory mappings are not preserved
.RB ( mmap (2)).
.IP *
Attached System\ V shared memory segments are detached
.RB ( shmat (2)).
.IP *
POSIX shared memory regions are unmapped
.RB ( shm_open (3)).
.IP *
Open POSIX message queue descriptors are closed
.RB ( mq_overview (7)).
.IP *
Any open POSIX named semaphores are closed
.RB ( sem_overview (7)).
.IP *
POSIX timers are not preserved
.RB ( timer_create (2)).
.IP *
Any open directory streams are closed
.RB ( opendir (3)).
.IP *
Memory locks are not preserved
.RB ( mlock (2),
.BR mlockall (2)).
.IP *
Exit handlers are not preserved
.RB ( atexit (3),
.BR on_exit (3)).
.IP *
The floating-point environment is reset to the default (see
.BR fenv (3)).
.PP
The process attributes in the preceding list are all specified
in POSIX.1-2001.
The following Linux-specific process attributes are also
not preserved during an
.BR execve ():
.IP * 3
The
.BR prctl (2)
.B PR_SET_DUMPABLE
flag is set,
unless a set-user-ID or set-group ID program is being executed,
in which case it is cleared.
.IP *
The
.BR prctl (2)
.B PR_SET_KEEPCAPS
flag is cleared.
.IP *
(Since Linux 2.4.36 / 2.6.23)
If a set-user-ID or set-group-ID program is being executed,
then the parent death signal set by
.BR prctl (2)
.B PR_SET_PDEATHSIG
flag is cleared.
.IP *
The process name, as set by
.BR prctl (2)
.B PR_SET_NAME
(and displayed by
.IR "ps\ \-o comm" ),
is reset to the name of the new executable file.
.IP *
The
.B SECBIT_KEEP_CAPS
.I securebits
flag is cleared.
See
.BR capabilities (7).
.IP *
The termination signal is reset to
.B SIGCHLD
(see
.BR clone (2)).
.IP *
The file descriptor table is unshared, undoing the effect of the
.B CLONE_FILES
flag of
.BR clone (2).
.PP
Note the following further points:
.IP * 3
All threads other than the calling thread are destroyed during an
.BR execve ().
Mutexes, condition variables, and other pthreads objects are not preserved.
.IP *
The equivalent of \fIsetlocale(LC_ALL, "C")\fP
is executed at program start-up.
.IP *
POSIX.1-2001 specifies that the dispositions of any signals that
are ignored or set to the default are left unchanged.
POSIX.1-2001 specifies one exception: if
.B SIGCHLD
is being ignored,
then an implementation may leave the disposition unchanged or
reset it to the default; Linux does the former.
.IP *
Any outstanding asynchronous I/O operations are canceled
.RB ( aio_read (3),
.BR aio_write (3)).
.IP *
For the handling of capabilities during
.BR execve (),
see
.BR capabilities (7).
.IP *
By default, file descriptors remain open across an
.BR execve ().
File descriptors that are marked close-on-exec are closed;
see the description of
.B FD_CLOEXEC
in
.BR fcntl (2).
(If a file descriptor is closed, this will cause the release
of all record locks obtained on the underlying file by this process.
See
.BR fcntl (2)
for details.)
POSIX.1-2001 says that if file descriptors 0, 1, and 2 would
otherwise be closed after a successful
.BR execve (),
and the process would gain privilege because the set-user_ID or
set-group_ID mode bit was set on the executed file,
then the system may open an unspecified file for each of these
file descriptors.
As a general principle, no portable program, whether privileged or not,
can assume that these three file descriptors will remain
closed across an
.BR execve ().
.\" On Linux it appears that these file descriptors are
.\" always open after an execve(), and it looks like
.\" Solaris 8 and FreeBSD 6.1 are the same. -- mtk, 30 Apr 2007
.SS Interpreter scripts
An interpreter script is a text file that has execute
permission enabled and whose first line is of the form:

.in +4n
.nf
\fB#!\fP \fIinterpreter \fP[optional-arg]
.fi
.in

The
.I interpreter
must be a valid pathname for an
executable which is not itself a script.
If the
.I filename
argument of
.BR execve ()
specifies an interpreter script, then
.I interpreter
will be invoked with the following arguments:

.in +4n
.nf
\fIinterpreter\fP [optional-arg] \fIfilename\fP arg...
.fi
.in

where
.I arg...
is the series of words pointed to by the
.I argv
argument of
.BR execve (),
starting at
.IR argv [1].

For portable use,
.I optional-arg
should either be absent, or be specified as a single word (i.e., it
should not contain white space); see NOTES below.
.SS Limits on size of arguments and environment
Most UNIX implementations impose some limit on the total size
of the command-line argument
.RI ( argv )
and environment
.RI ( envp )
strings that may be passed to a new program.
POSIX.1 allows an implementation to advertise this limit using the
.B ARG_MAX
constant (either defined in
.I <limits.h>
or available at run time using the call
.IR "sysconf(_SC_ARG_MAX)" ).

On Linux prior to kernel 2.6.23, the memory used to store the
environment and argument strings was limited to 32 pages
(defined by the kernel constant
.BR MAX_ARG_PAGES ).
On architectures with a 4-kB page size,
this yields a maximum size of 128 kB.

On kernel 2.6.23 and later, most architectures support a size limit
derived from the soft
.B RLIMIT_STACK
resource limit (see
.BR getrlimit (2))
that is in force at the time of the
.BR execve ()
call.
(Architectures with no memory management unit are excepted:
they maintain the limit that was in effect before kernel 2.6.23.)
This change allows programs to have a much larger
argument and/or environment list.
.\" For some background on the changes to ARG_MAX in kernels 2.6.23 and
.\" 2.6.25, see:
.\"     http://sourceware.org/bugzilla/show_bug.cgi?id=5786
.\"     http://bugzilla.kernel.org/show_bug.cgi?id=10095
.\"     http://thread.gmane.org/gmane.linux.kernel/646709/focus=648101,
.\"     checked into 2.6.25 as commit a64e715fc74b1a7dcc5944f848acc38b2c4d4ee2.
For these architectures, the total size is limited to 1/4 of the allowed
stack size.
(Imposing the 1/4-limit
ensures that the new program always has some stack space.)
.\" Ollie: That doesn't include the lists of pointers, though,
.\" so the actual usage is a bit higher (1 pointer per argument).
Since Linux 2.6.25,
the kernel places a floor of 32 pages on this size limit,
so that, even when
.BR RLIMIT_STACK
is set very low,
applications are guaranteed to have at least as much argument and
environment space as was provided by Linux 2.6.23 and earlier.
(This guarantee was not provided in Linux 2.6.23 and 2.6.24.)
Additionally, the limit per string is 32 pages (the kernel constant
.BR MAX_ARG_STRLEN ),
and the maximum number of strings is 0x7FFFFFFF.
.SH RETURN VALUE
On success,
.BR execve ()
does not return, on error \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B E2BIG
The total number of bytes in the environment
.RI ( envp )
and argument list
.RI ( argv )
is too large.
.TP
.B EACCES
Search permission is denied on a component of the path prefix of
.I filename
or the name of a script interpreter.
(See also
.BR path_resolution (7).)
.TP
.B EACCES
The file or a script interpreter is not a regular file.
.TP
.B EACCES
Execute permission is denied for the file or a script or ELF interpreter.
.TP
.B EACCES
The filesystem is mounted
.IR noexec .
.TP
.BR EAGAIN " (since Linux 3.1)"
.\" commit 72fa59970f8698023045ab0713d66f3f4f96945c
Having changed its real UID using one of the
.BR set*uid ()
calls, the caller was\(emand is now still\(emabove its
.BR RLIMIT_NPROC
resource limit (see
.BR setrlimit (2)).
For a more detailed explanation of this error, see NOTES.
.TP
.B EFAULT
.I filename
or one of the pointers in the vectors
.I argv
or
.I envp
points outside your accessible address space.
.TP
.B EINVAL
An ELF executable had more than one PT_INTERP segment (i.e., tried to
name more than one interpreter).
.TP
.B EIO
An I/O error occurred.
.TP
.B EISDIR
An ELF interpreter was a directory.
.TP
.B ELIBBAD
An ELF interpreter was not in a recognized format.
.TP
.B ELOOP
Too many symbolic links were encountered in resolving
.I filename
or the name of a script or ELF interpreter.
.TP
.B EMFILE
The process has the maximum number of files open.
.TP
.B ENAMETOOLONG
.I filename
is too long.
.TP
.B ENFILE
The system limit on the total number of open files has been reached.
.TP
.B ENOENT
The file
.I filename
or a script or ELF interpreter does not exist, or a shared library
needed for file or interpreter cannot be found.
.TP
.B ENOEXEC
An executable is not in a recognized format, is for the wrong
architecture, or has some other format error that means it cannot be
executed.
.TP
.B ENOMEM
Insufficient kernel memory was available.
.TP
.B ENOTDIR
A component of the path prefix of
.I filename
or a script or ELF interpreter is not a directory.
.TP
.B EPERM
The filesystem is mounted
.IR nosuid ,
the user is not the superuser,
and the file has the set-user-ID or set-group-ID bit set.
.TP
.B EPERM
The process is being traced, the user is not the superuser and the
file has the set-user-ID or set-group-ID bit set.
.TP
.B ETXTBSY
Executable was open for writing by one or more processes.
.SH CONFORMING TO
SVr4, 4.3BSD, POSIX.1-2001.
POSIX.1-2001 does not document the #!  behavior
but is otherwise compatible.
.\" SVr4 documents additional error
.\" conditions EAGAIN, EINTR, ELIBACC, ENOLINK, EMULTIHOP; POSIX does not
.\" document ETXTBSY, EPERM, EFAULT, ELOOP, EIO, ENFILE, EMFILE, EINVAL,
.\" EISDIR or ELIBBAD error conditions.
.SH NOTES
Set-user-ID and set-group-ID processes can not be
.BR ptrace (2)d.

The result of mounting a filesystem
.I nosuid
varies across Linux kernel versions:
some will refuse execution of set-user-ID and set-group-ID
executables when this would
give the user powers she did not have already (and return
.BR EPERM ),
some will just ignore the set-user-ID and set-group-ID bits and
.BR exec ()
successfully.
On Linux,
.I argv
and
.I envp
can be specified as NULL.
In both cases, this has the same effect as specifying the argument
as a pointer to a list containing a single null pointer.
.B "Do not take advantage of this misfeature!"
It is nonstandard and nonportable:
on most other UNIX systems doing this will result in an error
.RB ( EFAULT ).
.\" e.g., EFAULT on Solaris 8 and FreeBSD 6.1; but
.\" HP-UX 11 is like Linux -- mtk, Apr 2007
.\" Bug filed 30 Apr 2007: http://bugzilla.kernel.org/show_bug.cgi?id=8408
.\" Bug rejected (because fix would constitute an ABI change).
.\"

POSIX.1-2001 says that values returned by
.BR sysconf (3)
should be invariant over the lifetime of a process.
However, since Linux 2.6.23, if the
.BR RLIMIT_STACK
resource limit changes, then the value reported by
.B _SC_ARG_MAX
will also change,
to reflect the fact that the limit on space for holding
command-line arguments and environment variables has changed.

In most cases where
.BR execve ()
fails, control returns to the original executable image,
and the caller of
.BR execve ()
can then handle the error.
However, in (rare) cases (typically caused by resource exhaustion),
failure may occur past the point of no return:
the original executable image has been torn down,
but the new image could not be completely built.
In such cases, the kernel kills the process with a
.BR SIGKILL
signal.
.\"
.SS Interpreter scripts
A maximum line length of 127 characters is allowed for the first line in
an interpreter scripts.

The semantics of the
.I optional-arg
argument of an interpreter script vary across implementations.
On Linux, the entire string following the
.I interpreter
name is passed as a single argument to the interpreter,
and this string can include white space.
However, behavior differs on some other systems.
Some systems
.\" e.g., Solaris 8
use the first white space to terminate
.IR optional-arg .
On some systems,
.\" e.g., FreeBSD before 6.0, but not FreeBSD 6.0 onward
an interpreter script can have multiple arguments,
and white spaces in
.I optional-arg
are used to delimit the arguments.

Linux ignores the set-user-ID and set-group-ID bits on scripts.
.\"
.\" .SH BUGS
.\" Some Linux versions have failed to check permissions on ELF
.\" interpreters.  This is a security hole, because it allows users to
.\" open any file, such as a rewinding tape device, for reading.  Some
.\" Linux versions have also had other security holes in
.\" .BR execve ()
.\" that could be exploited for denial of service by a suitably crafted
.\" ELF binary. There are no known problems with 2.0.34 or 2.2.15.
.SS execve() and EAGAIN
A more detailed explanation of the
.BR EAGAIN
error that can occur (since Linux 3.1) when calling
.BR execve ()
is as follows.

The
.BR EAGAIN
error can occur when a
.I preceding
call to
.BR setuid (2),
.BR setreuid (2),
or
.BR setresuid (2)
caused the real user ID of the process to change,
and that change caused the process to exceed its
.BR RLIMIT_NPROC
resource limit (i.e., the number of processes belonging
to the new real UID exceeds the resource limit).
From Linux 2.6.0 to 3.0, this caused the
.BR set*uid ()
call to fail.
(Prior to 2.6,
.\" commit 909cc4ae86f3380152a18e2a3c44523893ee11c4
the resource limit was not imposed on processes that
changed their user IDs.)

Since Linux 3.1, the scenario just described no longer causes the
.BR set*uid ()
call to fail,
because it too often led to security holes where buggy applications
didn't check the return status and assumed
that\(emif the caller had root privileges\(emthe call would always succeed.
Instead, the
.BR set*uid ()
calls now successfully change the real UID,
but the kernel sets an internal flag, named
.BR PF_NPROC_EXCEEDED ,
to note that the
.BR RLIMIT_NPROC
resource limit has been exceeded.
If the
.BR PF_NPROC_EXCEEDED
flag is set and the resource limit is still
exceeded at the time of a subsequent
.BR execve ()
call, that call fails with the error
.BR EAGAIN .
This kernel logic ensures that the
.BR RLIMIT_NPROC
resource limit is still enforced for the
common privileged daemon workflow\(emnamely,
.BR fork (2)
+
.BR set*uid ()
+
.BR execve ().

If the resource limit was not still exceeded at the time of the
.BR execve ()
call
(because other processes belonging to this real UID terminated between the
.BR set*uid ()
call and the
.BR execve ()
call), then the
.BR execve ()
call succeeds and the kernel clears the
.BR PF_NPROC_EXCEEDED
process flag.
The flag is also cleared if a subsequent call to
.BR fork (2)
by this process succeeds.
.SS Historical
With UNIX\ V6, the argument list of an
.BR exec ()
call was ended by 0,
while the argument list of
.I main
was ended by \-1.
Thus, this argument list was not directly usable in a further
.BR exec ()
call.
Since UNIX\ V7, both are NULL.
.\"
.\" .SH BUGS
.\" Some Linux versions have failed to check permissions on ELF
.\" interpreters.  This is a security hole, because it allows users to
.\" open any file, such as a rewinding tape device, for reading.  Some
.\" Linux versions have also had other security holes in
.\" .BR execve ()
.\" that could be exploited for denial of service by a suitably crafted
.\" ELF binary. There are no known problems with 2.0.34 or 2.2.15.
.SH EXAMPLE
The following program is designed to be execed by the second program below.
It just echoes its command-line arguments, one per line.

.in +4n
.nf
/* myecho.c */

#include <stdio.h>
#include <stdlib.h>

int
main(int argc, char *argv[])
{
    int j;

    for (j = 0; j < argc; j++)
        printf("argv[%d]: %s\\n", j, argv[j]);

    exit(EXIT_SUCCESS);
}
.fi
.in

This program can be used to exec the program named in its command-line
argument:
.in +4n
.nf

/* execve.c */

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

int
main(int argc, char *argv[])
{
    char *newargv[] = { NULL, "hello", "world", NULL };
    char *newenviron[] = { NULL };

    if (argc != 2) {
        fprintf(stderr, "Usage: %s <file\-to\-exec>\\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    newargv[0] = argv[1];

    execve(argv[1], newargv, newenviron);
    perror("execve");   /* execve() returns only on error */
    exit(EXIT_FAILURE);
}
.fi
.in

We can use the second program to exec the first as follows:

.in +4n
.nf
.RB "$" " cc myecho.c \-o myecho"
.RB "$" " cc execve.c \-o execve"
.RB "$" " ./execve ./myecho"
argv[0]: ./myecho
argv[1]: hello
argv[2]: world
.fi
.in

We can also use these programs to demonstrate the use of a script
interpreter.
To do this we create a script whose "interpreter" is our
.I myecho
program:

.in +4n
.nf
.RB "$" " cat > script"
.B #!./myecho script-arg
.B ^D
.RB "$" " chmod +x script"
.fi
.in

We can then use our program to exec the script:

.in +4n
.nf
.RB "$" " ./execve ./script"
argv[0]: ./myecho
argv[1]: script-arg
argv[2]: ./script
argv[3]: hello
argv[4]: world
.fi
.in
.SH SEE ALSO
.BR chmod (2),
.BR execveat (2),
.BR fork (2),
.BR ptrace (2),
.BR execl (3),
.BR fexecve (3),
.BR getopt (3),
.BR credentials (7),
.BR environ (7),
.BR path_resolution (7),
.BR ld.so (8)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2014 Google, Inc., written by David Drysdale
.\" and Copyright (c) 2015, Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH EXECVEAT 2 2015-01-22 "Linux" "Linux Programmer's Manual"
.SH NAME
execveat \- execute program relative to a directory file descriptor
.SH SYNOPSIS
.B #include <unistd.h>
.sp
.BI "int execveat(int " dirfd ", const char *" pathname ","
.br
.BI "             char *const " argv "[], char *const " envp "[],"
.br
.BI "             int " flags );
.SH DESCRIPTION
.\" commit 51f39a1f0cea1cacf8c787f652f26dfee9611874
The
.BR execveat ()
system call executes the program referred to by the combination of
.I dirfd
and
.IR pathname .
It operates in exactly the same way as
.BR execve (2),
except for the differences described in this manual page.

If the pathname given in
.I pathname
is relative, then it is interpreted relative to the directory
referred to by the file descriptor
.I dirfd
(rather than relative to the current working directory of
the calling process, as is done by
.BR execve (2)
for a relative pathname).

If
.I pathname
is relative and
.I dirfd
is the special value
.BR AT_FDCWD ,
then
.I pathname
is interpreted relative to the current working
directory of the calling process (like
.BR execve (2)).

If
.I pathname
is absolute, then
.I dirfd
is ignored.

If
.I pathname
is an empty string and the
.BR AT_EMPTY_PATH
flag is specified, then the file descriptor
.I dirfd
specifies the file to be executed (i.e.,
.IR dirfd
refers to an executable file, rather than a directory).

The
.I flags
argument is a bit mask that can include zero or more of the following flags:
.TP
.BR AT_EMPTY_PATH
If
.I pathname
is an empty string, operate on the file referred to by
.IR dirfd
(which may have been obtained using the
.BR open (2)
.B O_PATH
flag).
.TP
.B AT_SYMLINK_NOFOLLOW
If the file identified by
.I dirfd
and a non-NULL
.I pathname
is a symbolic link, then the call fails with the error
.BR ELOOP .
.SH RETURN VALUE
On success,
.BR execveat ()
does not return.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
The same errors that occur for
.BR execve (2)
can also occur for
.BR execveat ().
The following additional errors can occur for
.BR execveat ():
.TP
.B EBADF
.I dirfd
is not a valid file descriptor.
.TP
.B EINVAL
Invalid flag specified in
.IR flags .
.TP
.B ELOOP
.I flags
includes
.BR AT_SYMLINK_NOFOLLOW
and the file identified by
.I dirfd
and a non-NULL
.I pathname
is a symbolic link.
.TP
.B ENOENT
The program identified by
.I dirfd
and
.I pathname
requires the use of an interpreter program
(such as a script starting with "#!"), but the file descriptor
.I dirfd
was opened with the
.B O_CLOEXEC
flag, with the result that
the program file is inaccessible to the launched interpreter.
See BUGS.
.TP
.B ENOTDIR
.I pathname
is relative and
.I dirfd
is a file descriptor referring to a file other than a directory.
.SH VERSIONS
.BR execveat ()
was added to Linux in kernel 3.19.
GNU C library support is pending.
.\" FIXME . check for glibc support in a future release
.SH CONFORMING TO
The
.BR execveat ()
system call is Linux-specific.
.SH NOTES
In addition to the reasons explained in
.BR openat (2),
the
.BR execveat ()
system call is also needed to allow
.BR fexecve (3)
to be implemented on systems that do not have the
.I /proc
filesystem mounted.

When asked to execute a script file, the
.IR argv[0]
that is passed to the script interpreter is a string of the form
.IR /dev/fd/N
or
.IR /dev/fd/N/P ,
where
.I N
is the number of the file descriptor passed via the
.IR dirfd
argument.
A string of the first form occurs when
.BR AT_EMPTY_PATH
is employed.
A string of the second form occurs when the script is specified via both
.IR dirfd
and
.IR pathname ;
in this case,
.IR P
is the value given in
.IR pathname .

For the same reasons described in
.BR fexecve (3),
the natural idiom when using
.BR execveat (2)
is to set the close-on-exec flag on
.IR dirfd .
(But see BUGS.)
.SH BUGS
The
.B ENOENT
error described above means that it is not possible to set the
close-on-exec flag on the file descriptor given to a call of the form:

    execveat(fd, "", argv, envp, AT_EMPTY_PATH);

However, the inability to set the close-on-exec flag means that a file
descriptor referring to the script leaks through to the script itself.
As well as wasting a file descriptor,
this leakage can lead to file-descriptor exhaustion in scenarios
where scripts recursively employ
.BR execveat ().
.\" For an example, see Michael Kerrisk's 2015-01-10 reply in this LKML
.\" thread (http://thread.gmane.org/gmane.linux.kernel/1836105/focus=20229):
.\"
.\"     Subject: [PATCHv10 man-pages 5/5] execveat.2: initial man page.\"                        for execveat(2
.\"     Date: Mon, 24 Nov 2014 11:53:59 +0000
.SH SEE ALSO
.BR execve (2),
.BR openat (2),
.BR fexecve (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" This manpage is Copyright (C) 1992 Drew Eckhardt;
.\"             and Copyright (C) 1993 Michael Haardt, Ian Jackson.
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified Wed Jul 21 23:02:38 1993 by Rik Faith <faith@cs.unc.edu>
.\" Modified 2001-11-17, aeb
.\"
.TH _EXIT 2 2015-01-22 "Linux" "Linux Programmer's Manual"
.SH NAME
_exit, _Exit \- terminate the calling process
.SH SYNOPSIS
.B #include <unistd.h>
.sp
.BI "void _exit(int " status );
.sp
.B #include <stdlib.h>
.sp
.BI "void _Exit(int " status );
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR _Exit ():
.RS 4
_XOPEN_SOURCE\ >=\ 600 || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.ad
.SH DESCRIPTION
The function
.BR _exit ()
terminates the calling process "immediately".
Any open file descriptors
belonging to the process are closed; any children of the process are
inherited by process 1,
.IR init ,
and the process's parent is sent a
.B SIGCHLD
signal.
.LP
The value
.I status
is returned to the parent process as the process's exit status, and
can be collected using one of the
.BR wait (2)
family of calls.
.LP
The function
.BR _Exit ()
is equivalent to
.BR _exit ().
.SH RETURN VALUE
These functions do not return.
.SH CONFORMING TO
SVr4, POSIX.1-2001, 4.3BSD.
The function
.BR _Exit ()
was introduced by C99.
.SH NOTES
For a discussion on the effects of an exit, the transmission of
exit status, zombie processes, signals sent, and so on, see
.BR exit (3).
.LP
The function
.BR _exit ()
is like
.BR exit (3),
but does not call any
functions registered with
.BR atexit (3)
or
.BR on_exit (3).
Whether it flushes
standard I/O buffers and removes temporary files created with
.BR tmpfile (3)
is implementation-dependent.
On the other hand,
.BR _exit ()
does close open file descriptors, and this may cause an unknown delay,
waiting for pending output to finish.
If the delay is undesired,
it may be useful to call functions like
.BR tcflush (3)
before calling
.BR _exit ().
Whether any pending I/O is canceled, and which pending I/O may be
canceled upon
.BR _exit (),
is implementation-dependent.
.SS C library/kernel ABI differences
In glibc up to version 2.3, the
.BR _exit ()
wrapper function invoked the kernel system call of the same name.
Since glibc 2.3, the wrapper function invokes
.BR exit_group (2),
in order to terminate all of the threads in a process.
.SH SEE ALSO
.BR execve (2),
.BR exit_group (2),
.BR fork (2),
.BR kill (2),
.BR wait (2),
.BR wait4 (2),
.BR waitpid (2),
.BR atexit (3),
.BR exit (3),
.BR on_exit (3),
.BR termios (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2004 Andries Brouwer (aeb@cwi.nl)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH EXIT_GROUP 2 2008-11-27 "Linux" "Linux Programmer's Manual"
.SH NAME
exit_group \- exit all threads in a process
.SH SYNOPSIS
.nf
.B #include <linux/unistd.h>
.sp
.BI "void exit_group(int " status );
.fi
.SH DESCRIPTION
This system call is equivalent to
.BR exit (2)
except that it terminates not only the calling thread, but all threads
in the calling process's thread group.
.SH RETURN VALUE
This system call does not return.
.SH VERSIONS
This call is present since Linux 2.5.35.
.SH CONFORMING TO
This call is Linux-specific.
.SH NOTES
Since glibc 2.3, this is the system call invoked when the
.BR exit (2)
wrapper function is called.
.SH SEE ALSO
.BR exit (2)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2007 Silicon Graphics, Inc. All Rights Reserved
.\" Written by Dave Chinner <dgc@sgi.com>
.\"
.\" %%%LICENSE_START(GPLv2_ONELINE)
.\" May be distributed as per GNU General Public License version 2.
.\" %%%LICENSE_END
.\"
.\" 2011-09-19: Added FALLOC_FL_PUNCH_HOLE
.\" 2011-09-19: Substantial restructuring of the page
.\"
.TH FALLOCATE 2 2015-04-19 "Linux" "Linux Programmer's Manual"
.SH NAME
fallocate \- manipulate file space
.SH SYNOPSIS
.nf
.BR "#define _GNU_SOURCE" "             /* See feature_test_macros(7) */"
.B #include <fcntl.h>

.BI "int fallocate(int " fd ", int " mode ", off_t " offset \
", off_t " len ");
.fi
.SH DESCRIPTION
This is a nonportable, Linux-specific system call.
For the portable, POSIX.1-specified method of ensuring that space
is allocated for a file, see
.BR posix_fallocate (3).

.BR fallocate ()
allows the caller to directly manipulate the allocated disk space
for the file referred to by
.I fd
for the byte range starting at
.I offset
and continuing for
.I len
bytes.

The
.I mode
argument determines the operation to be performed on the given range.
Details of the supported operations are given in the subsections below.
.SS Allocating disk space
The default operation (i.e.,
.I mode
is zero) of
.BR fallocate ()
allocates the disk space within the range specified by
.I offset
and
.IR len .
The file size (as reported by
.BR stat (2))
will be changed if
.IR offset + len
is greater than the file size.
Any subregion within the range specified by
.I offset
and
.IR len
that did not contain data before the call will be initialized to zero.
This default behavior closely resembles the behavior of the
.BR posix_fallocate (3)
library function,
and is intended as a method of optimally implementing that function.

After a successful call, subsequent writes into the range specified by
.IR offset
and
.IR len
are guaranteed not to fail because of lack of disk space.

If the
.B FALLOC_FL_KEEP_SIZE
flag is specified in
.IR mode ,
the behavior of the call is similar,
but the file size will not be changed even if
.IR offset + len
is greater than the file size.
Preallocating zeroed blocks beyond the end of the file in this manner
is useful for optimizing append workloads.
.PP
Because allocation is done in block size chunks,
.BR fallocate ()
may allocate a larger range of disk space than was specified.
.SS Deallocating file space
Specifying the
.BR FALLOC_FL_PUNCH_HOLE
flag (available since Linux 2.6.38) in
.I mode
deallocates space (i.e., creates a hole)
in the byte range starting at
.I offset
and continuing for
.I len
bytes.
Within the specified range, partial filesystem blocks are zeroed,
and whole filesystem blocks are removed from the file.
After a successful call,
subsequent reads from this range will return zeroes.

The
.BR FALLOC_FL_PUNCH_HOLE
flag must be ORed with
.BR FALLOC_FL_KEEP_SIZE
in
.IR mode ;
in other words, even when punching off the end of the file, the file size
(as reported by
.BR stat (2))
does not change.

Not all filesystems support
.BR FALLOC_FL_PUNCH_HOLE ;
if a filesystem doesn't support the operation, an error is returned.
The operation is supported on at least the following filesystems:
.IP * 3
XFS (since Linux 2.6.38)
.IP *
ext4 (since Linux 3.0)
.\" commit a4bb6b64e39abc0e41ca077725f2a72c868e7622
.IP *
Btrfs (since Linux 3.7)
.IP *
tmpfs (since Linux 3.5)
.\" commit 83e4fa9c16e4af7122e31be3eca5d57881d236fe
.SS Collapsing file space
.\" commit 00f5e61998dd17f5375d9dfc01331f104b83f841
Specifying the
.BR FALLOC_FL_COLLAPSE_RANGE
flag (available since Linux 3.15) in
.I mode
removes a byte range from a file, without leaving a hole.
The byte range to be collapsed starts at
.I offset
and continues for
.I len
bytes.
At the completion of the operation,
the contents of the file starting at the location
.I offset+len
will be appended at the location
.IR offset ,
and the file will be
.I len
bytes smaller.

A filesystem may place limitations on the granularity of the operation,
in order to ensure efficient implementation.
Typically,
.I offset
and
.I len
must be a multiple of the filesystem logical block size,
which varies according to the filesystem type and configuration.
If a filesystem has such a requirement,
.BR fallocate ()
will fail with the error
.BR EINVAL
if this requirement is violated.

If the region specified by
.I offset
plus
.I len
reaches or passes the end of file, an error is returned;
instead, use
.BR ftruncate (2)
to truncate a file.

No other flags may be specified in
.IR mode
in conjunction with
.BR FALLOC_FL_COLLAPSE_RANGE .

As at Linux 3.15,
.B FALLOC_FL_COLLAPSE_RANGE
is supported by
ext4 (only for extent-based files)
.\" commit 9eb79482a97152930b113b51dff530aba9e28c8e
and XFS.
.\" commit e1d8fb88a64c1f8094b9f6c3b6d2d9e6719c970d
.SS Zeroing file space
Specifying the
.BR FALLOC_FL_ZERO_RANGE
flag (available since Linux 3.15)
.\" commit 409332b65d3ed8cfa7a8030f1e9d52f372219642
in
.I mode
zeroes space in the byte range starting at
.I offset
and continuing for
.I len
bytes.
Within the specified range, blocks are preallocated for the regions
that span the holes in the file.
After a successful call, subsequent
reads from this range will return zeroes.

Zeroing is done within the filesystem preferably by converting the range into
unwritten extents.
This approach means that the specified range will not be physically zeroed
out on the device (except for partial blocks at the either end of the range),
and I/O is (otherwise) required only to update metadata.

If the
.B FALLOC_FL_KEEP_SIZE
flag is additionally specified in
.IR mode ,
the behavior of the call is similar,
but the file size will not be changed even if
.IR offset + len
is greater than the file size.
This behavior is the same as when preallocating space with
.B FALLOC_FL_KEEP_SIZE
specified.

Not all filesystems support
.BR FALLOC_FL_ZERO_RANGE ;
if a filesystem doesn't support the operation, an error is returned.
The operation is supported on at least the following filesystems:
.IP * 3
XFS (since Linux 3.15)
.\" commit 376ba313147b4172f3e8cf620b9fb591f3e8cdfa
.IP *
ext4, for extent-based files (since Linux 3.15)
.\" commit b8a8684502a0fc852afa0056c6bb2a9273f6fcc0
.IP *
SMB3 (since Linux 3.17)
.\" commit 30175628bf7f521e9ee31ac98fa6d6fe7441a556
.SH RETURN VALUE
On success,
.BR fallocate ()
returns zero.
On error, \-1 is returned and
.I errno
is set to indicate the error.
.SH ERRORS
.TP
.B EBADF
.I fd
is not a valid file descriptor, or is not opened for writing.
.TP
.B EFBIG
.IR offset + len
exceeds the maximum file size.
.TP
.B EINTR
A signal was caught during execution.
.TP
.B EINVAL
.I offset
was less than 0, or
.I len
.\" FIXME . (raise a kernel bug) Probably the len==0 case should be
.\" a no-op, rather than an error. That would be consistent with
.\" similar APIs for the len==0 case.
.\" See "Re: [PATCH] fallocate.2: add FALLOC_FL_PUNCH_HOLE flag definition"
.\" 21 Sep 2012
.\" http://thread.gmane.org/gmane.linux.file-systems/48331/focus=1193526
was less than or equal to 0.
.TP
.B EINVAL
.I mode
is
.BR FALLOC_FL_COLLAPSE_RANGE
and the range specified by
.I offset
plus
.I len
reaches or passes the end of the file.
.TP
.B EINVAL
.I mode
is
.BR FALLOC_FL_COLLAPSE_RANGE ,
but either
.I offset
or
.I len
is not a multiple of the filesystem block size.
.TP
.B EINVAL
.I mode
contains both
.B FALLOC_FL_COLLAPSE_RANGE
and other flags;
no other flags are permitted with
.BR FALLOC_FL_COLLAPSE_RANGE .
.TP
.B EINVAL
.I mode
is
.BR FALLOC_FL_COLLAPSE_RANGE
or
.BR FALLOC_FL_ZERO_RANGE ,
but the file referred to by
.I fd
is not a regular file.
.\" There was a inconsistency in 3.15-rc1, that should be resolved so that all
.\" filesystems use this error for this case. (Tytso says ex4 will change.)
.\" http://thread.gmane.org/gmane.comp.file-systems.xfs.general/60485/focus=5521
.\" From: Michael Kerrisk (man-pages <mtk.manpages@...>
.\" Subject: Re: [PATCH v5 10/10] manpage: update FALLOC_FL_COLLAPSE_RANGE flag in fallocate
.\" Newsgroups: gmane.linux.man, gmane.linux.file-systems
.\" Date: 2014-04-17 13:40:05 GMT
.TP
.B EIO
An I/O error occurred while reading from or writing to a filesystem.
.TP
.B ENODEV
.I fd
does not refer to a regular file or a directory.
(If
.I fd
is a pipe or FIFO, a different error results.)
.TP
.B ENOSPC
There is not enough space left on the device containing the file
referred to by
.IR fd .
.TP
.B ENOSYS
This kernel does not implement
.BR fallocate ().
.TP
.B EOPNOTSUPP
The filesystem containing the file referred to by
.I fd
does not support this operation;
or the
.I mode
is not supported by the filesystem containing the file referred to by
.IR fd .
.TP
.B EPERM
The file referred to by
.I fd
is marked immutable (see
.BR chattr (1)).
.TP
.B EPERM
.I mode
specifies
.BR FALLOC_FL_PUNCH_HOLE
or
.BR FALLOC_FL_COLLAPSE_RANGE
and
the file referred to by
.I fd
is marked append-only
(see
.BR chattr (1)).
.TP
.B EPERM
The operation was prevented by a file seal; see
.BR fcntl (2).
.TP
.B ESPIPE
.I fd
refers to a pipe or FIFO.
.TP
.B ETXTBSY
.I mode
specifies
.BR FALLOC_FL_COLLAPSE_RANGE ,
but the file referred to by
.IR fd
is currently being executed.
.SH VERSIONS
.BR fallocate ()
is available on Linux since kernel 2.6.23.
Support is provided by glibc since version 2.10.
The
.BR FALLOC_FL_*
flags are defined in glibc headers only since version 2.18.
.\" See http://sourceware.org/bugzilla/show_bug.cgi?id=14964
.SH CONFORMING TO
.BR fallocate ()
is Linux-specific.
.SH SEE ALSO
.BR fallocate (1),
.BR ftruncate (2),
.BR posix_fadvise (3),
.BR posix_fallocate (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2013, Heinrich Schuchardt <xypron.glpk@gmx.de>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of
.\" this manual under the conditions for verbatim copying, provided that
.\" the entire resulting derived work is distributed under the terms of
.\" a permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume.
.\" no responsibility for errors or omissions, or for damages resulting.
.\" from the use of the information contained herein.  The author(s) may.
.\" not have taken the same level of care in the production of this.
.\" manual, which is licensed free of charge, as they might when working.
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.TH FANOTIFY_INIT 2 2014-10-02 "Linux" "Linux Programmer's Manual"
.SH NAME
fanotify_init \- create and initialize fanotify group
.SH SYNOPSIS
.B #include <fcntl.h>
.br
.B #include <sys/fanotify.h>
.sp
.BI "int fanotify_init(unsigned int " flags ", unsigned int " event_f_flags );
.SH DESCRIPTION
For an overview of the fanotify API, see
.BR fanotify (7).
.PP
.BR fanotify_init ()
initializes a new fanotify group and returns a file descriptor for the event
queue associated with the group.
.PP
The file descriptor is used in calls to
.BR fanotify_mark (2)
to specify the files, directories, and mounts for which fanotify events
shall be created.
These events are received by reading from the file descriptor.
Some events are only informative, indicating that a file has been accessed.
Other events can be used to determine whether
another application is permitted to access a file or directory.
Permission to access filesystem objects is granted by writing to the file
descriptor.
.PP
Multiple programs may be using the fanotify interface at the same time to
monitor the same files.
.PP
In the current implementation, the number of fanotify groups per user is
limited to 128.
This limit cannot be overridden.
.PP
Calling
.BR fanotify_init ()
requires the
.B CAP_SYS_ADMIN
capability.
This constraint might be relaxed in future versions of the API.
Therefore, certain additional capability checks have been implemented as
indicated below.
.PP
The
.I flags
argument contains a multi-bit field defining the notification class of the
listening application and further single bit fields specifying the behavior
of the file descriptor.
.PP
If multiple listeners for permission events exist,
the notification class is used to establish the sequence
in which the listeners receive the events.
.PP
Only one of the following notification classes may be specified in
.IR flags :
.TP
.B FAN_CLASS_PRE_CONTENT
This value allows the receipt of events notifying that a file has been
accessed and events for permission decisions if a file may be accessed.
It is intended for event listeners that need to access files before they
contain their final data.
This notification class might be used by hierarchical storage managers,
for example.
.TP
.B FAN_CLASS_CONTENT
This value allows the receipt of events notifying that a file has been
accessed and events for permission decisions if a file may be accessed.
It is intended for event listeners that need to access files when they
already contain their final content.
This notification class might be used by malware detection programs, for
example.
.TP
.B FAN_CLASS_NOTIF
This is the default value.
It does not need to be specified.
This value only allows the receipt of events notifying that a file has been
accessed.
Permission decisions before the file is accessed are not possible.
.PP
Listeners with different notification classes will receive events in the
order
.BR FAN_CLASS_PRE_CONTENT ,
.BR FAN_CLASS_CONTENT ,
.BR FAN_CLASS_NOTIF .
The order of notification for listeners in the same notification class
is undefined.
.PP
The following bits can additionally be set in
.IR flags :
.TP
.B FAN_CLOEXEC
Set the close-on-exec flag
.RB ( FD_CLOEXEC )
on the new file descriptor.
See the description of the
.B O_CLOEXEC
flag in
.BR open (2).
.TP
.B FAN_NONBLOCK
Enable the nonblocking flag
.RB ( O_NONBLOCK )
for the file descriptor.
Reading from the file descriptor will not block.
Instead, if no data is available,
.BR read (2)
will fail with the error
.BR EAGAIN .
.TP
.B FAN_UNLIMITED_QUEUE
Remove the limit of 16384 events for the event queue.
Use of this flag requires the
.B CAP_SYS_ADMIN
capability.
.TP
.B FAN_UNLIMITED_MARKS
Remove the limit of 8192 marks.
Use of this flag requires the
.B CAP_SYS_ADMIN
capability.
.PP
The
.I event_f_flags
argument
defines the file status flags that will be set on the open file descriptions
that are created for fanotify events.
For details of these flags, see the description of the
.I flags
values in
.BR open (2).
.I event_f_flags
includes a multi-bit field for the access mode.
This field can take the following values:
.TP
.B O_RDONLY
This value allows only read access.
.TP
.B O_WRONLY
This value allows only write access.
.TP
.B O_RDWR
This value allows read and write access.
.PP
Additional bits can be set in
.IR event_f_flags .
The most useful values are:
.TP
.B O_LARGEFILE
Enable support for files exceeding 2 GB.
Failing to set this flag will result in an
.B EOVERFLOW
error when trying to open a large file which is monitored by
an fanotify group on a 32-bit system.
.TP
.B O_CLOEXEC
Enable the close-on-exec flag for the file descriptor.
See the description of the
.B O_CLOEXEC
flag in
.BR open (2)
for reasons why this may be useful.
.PP
The following are also allowable:
.BR O_APPEND ,
.BR O_DSYNC ,
.BR O_NOATIME ,
.BR O_NONBLOCK ,
and
.BR O_SYNC .
Specifying any other flag in
.I event_f_flags
yields the error
.B EINVAL
(but see BUGS).
.SH RETURN VALUE
On success,
.BR fanotify_init ()
returns a new file descriptor.
On error, \-1 is returned, and
.I errno
is set to indicate the error.
.SH ERRORS
.TP
.B EINVAL
An invalid value was passed in
.I flags
or
.IR event_f_flags .
.B FAN_ALL_INIT_FLAGS
defines all allowable bits for
.IR flags .
.TP
.B EMFILE
The number of fanotify groups for this user exceeds 128.
.TP
.B ENOMEM
The allocation of memory for the notification group failed.
.TP
.B ENOSYS
This kernel does not implement
.BR fanotify_init ().
The fanotify API is available only if the kernel was configured with
.BR CONFIG_FANOTIFY .
.TP
.B EPERM
The operation is not permitted because the caller lacks the
.B CAP_SYS_ADMIN
capability.
.SH VERSIONS
.BR fanotify_init ()
was introduced in version 2.6.36 of the Linux kernel and enabled in version
2.6.37.
.SH CONFORMING TO
This system call is Linux-specific.
.SH BUGS
As of Linux 3.17,
the following bug exists:
.IP * 3
.\" FIXME . Patch proposed: https://lkml.org/lkml/2014/9/24/967
The
.B O_CLOEXEC
is ignored when passed in
.IR event_f_flags .
.PP
The following bug was present in Linux kernels before version 3.14:
.IP * 3
.\" Fixed by commit 48149e9d3a7e924010a0daab30a6197b7d7b6580
The
.I event_f_flags
argument is not checked for invalid flags.
Flags that are intended only for internal use,
such as
.BR FMODE_EXEC ,
can be set, and will consequently be set for the file descriptors
returned when reading from the fanotify file descriptor.
.SH SEE ALSO
.BR fanotify_mark (2),
.BR fanotify (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2013,  Heinrich Schuchardt <xypron.glpk@gmx.de>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of
.\" this manual under the conditions for verbatim copying, provided that
.\" the entire resulting derived work is distributed under the terms of
.\" a permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume.
.\" no responsibility for errors or omissions, or for damages resulting.
.\" from the use of the information contained herein.  The author(s) may.
.\" not have taken the same level of care in the production of this.
.\" manual, which is licensed free of charge, as they might when working.
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.TH FANOTIFY_MARK 2 2014-10-02 "Linux" "Linux Programmer's Manual"
.SH NAME
fanotify_mark \- add, remove, or modify an fanotify mark on a filesystem
object
.SH SYNOPSIS
.nf
.B #include <sys/fanotify.h>
.sp
.BI "int fanotify_mark(int " fanotify_fd ", unsigned int " flags ,
.BI "                  uint64_t " mask ", int " dirfd \
", const char *" pathname );
.fi
.SH DESCRIPTION
For an overview of the fanotify API, see
.BR fanotify (7).
.PP
.BR fanotify_mark (2)
adds, removes, or modifies an fanotify mark on a filesystem object.
The caller must have read permission on the filesystem object that
is to be marked.
.PP
The
.I fanotify_fd
argument is a file descriptor returned by
.BR fanotify_init (2).
.PP
.I flags
is a bit mask describing the modification to perform.
It must include exactly one of the following values:
.TP
.B FAN_MARK_ADD
The events in
.I mask
will be added to the mark mask (or to the ignore mask).
.I mask
must be nonempty or the error
.B EINVAL
will occur.
.TP
.B FAN_MARK_REMOVE
The events in argument
.I mask
will be removed from the mark mask (or from the ignore mask).
.I mask
must be nonempty or the error
.B EINVAL
will occur.
.TP
.B FAN_MARK_FLUSH
Remove either all mount or all non-mount marks from the fanotify group.
If
.I flags
contains
.BR FAN_MARK_MOUNT ,
all marks for mounts are removed from the group.
Otherwise, all marks for directories and files are removed.
No flag other than
.B FAN_MARK_MOUNT
can be used in conjunction with
.BR FAN_MARK_FLUSH .
.I mask
is ignored.
.PP
If none of the values above is specified, or more than one is specified,
the call fails with the error
.BR EINVAL .
.PP
In addition,
zero or more of the following values may be ORed into
.IR flags :
.TP
.B FAN_MARK_DONT_FOLLOW
If
.I pathname
is a symbolic link, mark the link itself, rather than the file to which it
refers.
(By default,
.BR fanotify_mark ()
dereferences
.I pathname
if it is a symbolic link.)
.TP
.B FAN_MARK_ONLYDIR
If the filesystem object to be marked is not a directory, the error
.B ENOTDIR
shall be raised.
.TP
.B FAN_MARK_MOUNT
Mark the mount point specified by
.IR pathname .
If
.I pathname
is not itself a mount point, the mount point containing
.I pathname
will be marked.
All directories, subdirectories, and the contained files of the mount point
will be monitored.
.TP
.B FAN_MARK_IGNORED_MASK
The events in
.I mask
shall be added to or removed from the ignore mask.
.TP
.B FAN_MARK_IGNORED_SURV_MODIFY
The ignore mask shall survive modify events.
If this flag is not set,
the ignore mask is cleared when a modify event occurs
for the ignored file or directory.
.PP
.I mask
defines which events shall be listened for (or which shall be ignored).
It is a bit mask composed of the following values:
.TP
.B FAN_ACCESS
Create an event when a file or directory (but see BUGS) is accessed (read).
.TP
.B FAN_MODIFY
Create an event when a file is modified (write).
.TP
.B FAN_CLOSE_WRITE
Create an event when a writable file is closed.
.TP
.B FAN_CLOSE_NOWRITE
Create an event when a read-only file or directory is closed.
.TP
.B FAN_OPEN
Create an event when a file or directory is opened.
.TP
.B FAN_OPEN_PERM
Create an event when a permission to open a file or directory is requested.
An fanotify file descriptor created with
.B FAN_CLASS_PRE_CONTENT
or
.B FAN_CLASS_CONTENT
is required.
.TP
.B FAN_ACCESS_PERM
Create an event when a permission to read a file or directory is requested.
An fanotify file descriptor created with
.B FAN_CLASS_PRE_CONTENT
or
.B FAN_CLASS_CONTENT
is required.
.TP
.B FAN_ONDIR
Create events for directories\(emfor example, when
.BR opendir (3),
.BR readdir (3)
(but see BUGS), and
.BR closedir (3)
are called.
Without this flag, only events for files are created.
.TP
.B FAN_EVENT_ON_CHILD
Events for the immediate children of marked directories shall be created.
The flag has no effect when marking mounts.
Note that events are not generated for children of the subdirectories
of marked directories.
To monitor complete directory trees it is necessary to mark the relevant
mount.
.PP
The following composed value is defined:
.TP
.B FAN_CLOSE
A file is closed
.RB ( FAN_CLOSE_WRITE | FAN_CLOSE_NOWRITE ).
.PP
The filesystem object to be marked is determined by the file descriptor
.I dirfd
and the pathname specified in
.IR pathname :
.IP * 3
If
.I pathname
is NULL,
.I dirfd
defines the filesystem object to be marked.
.IP *
If
.I pathname
is NULL, and
.I dirfd
takes the special value
.BR AT_FDCWD ,
the current working directory is to be marked.
.IP *
If
.I pathname
is absolute, it defines the filesystem object to be marked, and
.I dirfd
is ignored.
.IP *
If
.I pathname
is relative, and
.I dirfd
does not have the value
.BR AT_FDCWD ,
then the filesystem object to be marked is determined by interpreting
.I pathname
relative the directory referred to by
.IR dirfd .
.IP *
If
.I pathname
is relative, and
.I dirfd
has the value
.BR AT_FDCWD ,
then the filesystem object to be marked is determined by interpreting
.I pathname
relative the current working directory.
.SH RETURN VALUE
On success,
.BR fanotify_mark ()
returns 0.
On error, \-1 is returned, and
.I errno
is set to indicate the error.
.SH ERRORS
.TP
.B EBADF
An invalid file descriptor was passed in
.IR fanotify_fd .
.TP
.B EINVAL
An invalid value was passed in
.IR flags
or
.IR mask ,
or
.I fanotify_fd
was not an fanotify file descriptor.
.TP
.B EINVAL
The fanotify file descriptor was opened with
.B FAN_CLASS_NOTIF
and mask contains a flag for permission events
.RB ( FAN_OPEN_PERM
or
.BR FAN_ACCESS_PERM ).
.TP
.B ENOENT
The filesystem object indicated by
.IR dirfd
and
.IR pathname
does not exist.
This error also occurs when trying to remove a mark from an object
which is not marked.
.TP
.B ENOMEM
The necessary memory could not be allocated.
.TP
.B ENOSPC
The number of marks exceeds the limit of 8192 and the
.B FAN_UNLIMITED_MARKS
flag was not specified when the fanotify file descriptor was created with
.BR fanotify_init (2).
.TP
.B ENOSYS
This kernel does not implement
.BR fanotify_mark ().
The fanotify API is available only if the kernel was configured with
.BR CONFIG_FANOTIFY .
.TP
.B ENOTDIR
.I flags
contains
.BR FAN_MARK_ONLYDIR ,
and
.I dirfd
and
.I pathname
do not specify a directory.
.SH VERSIONS
.BR fanotify_mark ()
was introduced in version 2.6.36 of the Linux kernel and enabled in version
2.6.37.
.SH CONFORMING TO
This system call is Linux-specific.
.SH BUGS
The following bugs were present in Linux kernels before version 3.16:
.IP * 3
.\" Fixed by commit 0a8dd2db579f7a0ac7033d6b857c3d5dbaa77563
If
.I flags
contains
.BR FAN_MARK_FLUSH ,
.I dirfd
and
.I pathname
must specify a valid filesystem object, even though this object is not used.
.IP *
.\" Fixed by commit d4c7cf6cffb1bc711a833b5e304ba5bcfe76398b
.BR readdir (2)
does not generate a
.B FAN_ACCESS
event.
.IP *
.\" Fixed by commit cc299a98eb13a9853675a9cbb90b30b4011e1406
If
.BR fanotify_mark (2)
is called with
.BR FAN_MARK_FLUSH ,
.I flags
is not checked for invalid values.
.SH SEE ALSO
.BR fanotify_init (2),
.BR fanotify (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
'\" t
.\" This manpage is Copyright (C) 1992 Drew Eckhardt;
.\" and Copyright (C) 1993 Michael Haardt, Ian Jackson;
.\" and Copyright (C) 1998 Jamie Lokier;
.\" and Copyright (C) 2002-2010, 2014 Michael Kerrisk;
.\" and Copyright (C) 2014 Jeff Layton
.\" and Copyright (C) 2014 David Herrmann
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified 1993-07-24 by Rik Faith <faith@cs.unc.edu>
.\" Modified 1995-09-26 by Andries Brouwer <aeb@cwi.nl>
.\" and again on 960413 and 980804 and 981223.
.\" Modified 1998-12-11 by Jamie Lokier <jamie@imbolc.ucc.ie>
.\" Applied correction by Christian Ehrhardt - aeb, 990712
.\" Modified 2002-04-23 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"	Added note on F_SETFL and O_DIRECT
.\"	Complete rewrite + expansion of material on file locking
.\"	Incorporated description of F_NOTIFY, drawing on
.\"		Stephen Rothwell's notes in Documentation/dnotify.txt.
.\"	Added description of F_SETLEASE and F_GETLEASE
.\" Corrected and polished, aeb, 020527.
.\" Modified 2004-03-03 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"     Modified description of file leases: fixed some errors of detail
.\"     Replaced the term "lease contestant" by "lease breaker"
.\" Modified, 27 May 2004, Michael Kerrisk <mtk.manpages@gmail.com>
.\"     Added notes on capability requirements
.\" Modified 2004-12-08, added O_NOATIME after note from Martin Pool
.\" 2004-12-10, mtk, noted F_GETOWN bug after suggestion from aeb.
.\" 2005-04-08 Jamie Lokier <jamie@shareable.org>, mtk
.\"	Described behavior of F_SETOWN/F_SETSIG in
.\"	multithreaded processes, and generally cleaned
.\"	up the discussion of F_SETOWN.
.\" 2005-05-20, Johannes Nicolai <johannes.nicolai@hpi.uni-potsdam.de>,
.\"	mtk: Noted F_SETOWN bug for socket file descriptor in Linux 2.4
.\"	and earlier.  Added text on permissions required to send signal.
.\" 2009-09-30, Michael Kerrisk
.\"     Note obsolete F_SETOWN behavior with threads.
.\"     Document F_SETOWN_EX and F_GETOWN_EX
.\" 2010-06-17, Michael Kerrisk
.\"	Document F_SETPIPE_SZ and F_GETPIPE_SZ.
.\" 2014-07-08, David Herrmann <dh.herrmann@gmail.com>
.\"     Document F_ADD_SEALS and F_GET_SEALS
.\"
.TH FCNTL 2 2015-05-07 "Linux" "Linux Programmer's Manual"
.SH NAME
fcntl \- manipulate file descriptor
.SH SYNOPSIS
.nf
.B #include <unistd.h>
.B #include <fcntl.h>
.sp
.BI "int fcntl(int " fd ", int " cmd ", ... /* " arg " */ );"
.fi
.SH DESCRIPTION
.BR fcntl ()
performs one of the operations described below on the open file descriptor
.IR fd .
The operation is determined by
.IR cmd .

.BR fcntl ()
can take an optional third argument.
Whether or not this argument is required is determined by
.IR cmd .
The required argument type is indicated in parentheses after each
.I cmd
name (in most cases, the required type is
.IR int ,
and we identify the argument using the name
.IR arg ),
or
.I void
is specified if the argument is not required.

Certain of the operations below are supported only since a particular
Linux kernel version.
The preferred method of checking whether the host kernel supports
a particular operation is to invoke
.BR fcntl ()
with the desired
.IR cmd
value and then test whether the call failed with
.BR EINVAL ,
indicating that the kernel does not recognize this value.
.SS Duplicating a file descriptor
.TP
.BR F_DUPFD " (\fIint\fP)"
Find the lowest numbered available file descriptor
greater than or equal to
.I arg
and make it be a copy of
.IR fd .
This is different from
.BR dup2 (2),
which uses exactly the descriptor specified.
.IP
On success, the new descriptor is returned.
.IP
See
.BR dup (2)
for further details.
.TP
.BR F_DUPFD_CLOEXEC " (\fIint\fP; since Linux 2.6.24)"
As for
.BR F_DUPFD ,
but additionally set the
close-on-exec flag for the duplicate descriptor.
Specifying this flag permits a program to avoid an additional
.BR fcntl ()
.B F_SETFD
operation to set the
.B FD_CLOEXEC
flag.
For an explanation of why this flag is useful,
see the description of
.B O_CLOEXEC
in
.BR open (2).
.SS File descriptor flags
The following commands manipulate the flags associated with
a file descriptor.
Currently, only one such flag is defined:
.BR FD_CLOEXEC ,
the close-on-exec flag.
If the
.B FD_CLOEXEC
bit is 0, the file descriptor will remain open across an
.BR execve (2),
otherwise it will be closed.
.TP
.BR F_GETFD " (\fIvoid\fP)"
Read the file descriptor flags;
.I arg
is ignored.
.TP
.BR F_SETFD " (\fIint\fP)"
Set the file descriptor flags to the value specified by
.IR arg .
.PP
In multithreaded programs, using
.BR fcntl ()
.B F_SETFD
to set the close-on-exec flag at the same time as another thread performs a
.BR fork (2)
plus
.BR execve (2)
is vulnerable to a race condition that may unintentionally leak
the file descriptor to the program executed in the child process.
See the discussion of the
.BR O_CLOEXEC
flag in
.BR open (2)
for details and a remedy to the problem.
.SS File status flags
Each open file description has certain associated status flags,
initialized by
.BR open (2)
.\" or
.\" .BR creat (2),
and possibly modified by
.BR fcntl ().
Duplicated file descriptors
(made with
.BR dup (2),
.BR fcntl (F_DUPFD),
.BR fork (2),
etc.) refer to the same open file description, and thus
share the same file status flags.

The file status flags and their semantics are described in
.BR open (2).
.TP
.BR F_GETFL " (\fIvoid\fP)"
Get the file access mode and the file status flags;
.I arg
is ignored.
.TP
.BR F_SETFL " (\fIint\fP)"
Set the file status flags to the value specified by
.IR arg .
File access mode
.RB ( O_RDONLY ", " O_WRONLY ", " O_RDWR )
and file creation flags
(i.e.,
.BR O_CREAT ", " O_EXCL ", " O_NOCTTY ", " O_TRUNC )
in
.I arg
are ignored.
On Linux this command can change only the
.BR O_APPEND ,
.BR O_ASYNC ,
.BR O_DIRECT ,
.BR O_NOATIME ,
and
.B O_NONBLOCK
flags.
It is not possible to change the
.BR O_DSYNC
and
.BR O_SYNC
flags; see BUGS, below.
.SS Advisory record locking
Linux implements traditional ("process-associated") UNIX record locks,
as standardized by POSIX.
For a Linux-specific alternative with better semantics,
see the discussion of open file description locks below.

.BR F_SETLK ,
.BR F_SETLKW ,
and
.BR F_GETLK
are used to acquire, release, and test for the existence of record
locks (also known as byte-range, file-segment, or file-region locks).
The third argument,
.IR lock ,
is a pointer to a structure that has at least the following fields
(in unspecified order).
.in +4n
.nf
.sp
struct flock {
    ...
    short l_type;    /* Type of lock: F_RDLCK,
                        F_WRLCK, F_UNLCK */
    short l_whence;  /* How to interpret l_start:
                        SEEK_SET, SEEK_CUR, SEEK_END */
    off_t l_start;   /* Starting offset for lock */
    off_t l_len;     /* Number of bytes to lock */
    pid_t l_pid;     /* PID of process blocking our lock
                        (set by F_GETLK and F_OFD_GETLK) */
    ...
};
.fi
.in
.P
The
.IR l_whence ", " l_start ", and " l_len
fields of this structure specify the range of bytes we wish to lock.
Bytes past the end of the file may be locked,
but not bytes before the start of the file.

.I l_start
is the starting offset for the lock, and is interpreted
relative to either:
the start of the file (if
.I l_whence
is
.BR SEEK_SET );
the current file offset (if
.I l_whence
is
.BR SEEK_CUR );
or the end of the file (if
.I l_whence
is
.BR SEEK_END ).
In the final two cases,
.I l_start
can be a negative number provided the
offset does not lie before the start of the file.

.I l_len
specifies the number of bytes to be locked.
If
.I l_len
is positive, then the range to be locked covers bytes
.I l_start
up to and including
.IR l_start + l_len \-1.
Specifying 0 for
.I l_len
has the special meaning: lock all bytes starting at the
location specified by
.IR l_whence " and " l_start
through to the end of file, no matter how large the file grows.

POSIX.1-2001 allows (but does not require)
an implementation to support a negative
.I l_len
value; if
.I l_len
is negative, the interval described by
.I lock
covers bytes
.IR l_start + l_len
up to and including
.IR l_start \-1.
This is supported by Linux since kernel versions 2.4.21 and 2.5.49.

The
.I l_type
field can be used to place a read
.RB ( F_RDLCK )
or a write
.RB ( F_WRLCK )
lock on a file.
Any number of processes may hold a read lock (shared lock)
on a file region, but only one process may hold a write lock
(exclusive lock).
An exclusive lock excludes all other locks,
both shared and exclusive.
A single process can hold only one type of lock on a file region;
if a new lock is applied to an already-locked region,
then the existing lock is converted to the new lock type.
(Such conversions may involve splitting, shrinking, or coalescing with
an existing lock if the byte range specified by the new lock does not
precisely coincide with the range of the existing lock.)
.TP
.BR F_SETLK " (\fIstruct flock *\fP)"
Acquire a lock (when
.I l_type
is
.B F_RDLCK
or
.BR F_WRLCK )
or release a lock (when
.I l_type
is
.BR F_UNLCK )
on the bytes specified by the
.IR l_whence ", " l_start ", and " l_len
fields of
.IR lock .
If a conflicting lock is held by another process,
this call returns \-1 and sets
.I errno
to
.B EACCES
or
.BR EAGAIN .
(The error returned in this case differs across implementations,
so POSIX requires a portable application to check for both errors.)
.TP
.BR F_SETLKW " (\fIstruct flock *\fP)"
As for
.BR F_SETLK ,
but if a conflicting lock is held on the file, then wait for that
lock to be released.
If a signal is caught while waiting, then the call is interrupted
and (after the signal handler has returned)
returns immediately (with return value \-1 and
.I errno
set to
.BR EINTR ;
see
.BR signal (7)).
.TP
.BR F_GETLK " (\fIstruct flock *\fP)"
On input to this call,
.I lock
describes a lock we would like to place on the file.
If the lock could be placed,
.BR fcntl ()
does not actually place it, but returns
.B F_UNLCK
in the
.I l_type
field of
.I lock
and leaves the other fields of the structure unchanged.

If one or more incompatible locks would prevent
this lock being placed, then
.BR fcntl ()
returns details about one of those locks in the
.IR l_type ", " l_whence ", " l_start ", and " l_len
fields of
.IR lock .
If the conflicting lock is a traditional (process-associated) record lock,
then the
.I l_pid
field is set to the PID of the process holding that lock.
If the conflicting lock is an open file description lock, then
.I l_pid
is set to \-1.
Note that the returned information
may already be out of date by the time the caller inspects it.
.P
In order to place a read lock,
.I fd
must be open for reading.
In order to place a write lock,
.I fd
must be open for writing.
To place both types of lock, open a file read-write.

When placing locks with
.BR F_SETLKW ,
the kernel detects
.IR deadlocks ,
whereby two or more processes have their
lock requests mutually blocked by locks held by the other processes.
For example, suppose process A holds a write lock on byte 100 of a file,
and process B holds a write lock on byte 200.
If each process then attempts to lock the byte already
locked by the other process using
.BR F_SETLKW ,
then, without deadlock detection,
both processes would remain blocked indefinitely.
When the kernel detects such deadlocks,
it causes one of the blocking lock requests to immediately fail with the error
.BR EDEADLK ;
an application that encounters such an error should release
some of its locks to allow other applications to proceed before
attempting regain the locks that it requires.
Circular deadlocks involving more than two processes are also detected.
Note, however, that there are limitations to the kernel's
deadlock-detection algorithm; see BUGS.

As well as being removed by an explicit
.BR F_UNLCK ,
record locks are automatically released when the process terminates.
.P
Record locks are not inherited by a child created via
.BR fork (2),
but are preserved across an
.BR execve (2).
.P
Because of the buffering performed by the
.BR stdio (3)
library, the use of record locking with routines in that package
should be avoided; use
.BR read (2)
and
.BR write (2)
instead.

The record locks described above are associated with the process
(unlike the open file description locks described below).
This has some unfortunate consequences:
.IP * 3
If a process closes
.I any
file descriptor referring to a file,
then all of the process's locks on that file are released,
regardless of the file descriptor(s) on which the locks were obtained.
.\" (Additional file descriptors referring to the same file
.\" may have been obtained by calls to
.\" .BR open "(2), " dup "(2), " dup2 "(2), or " fcntl ().)
This is bad: it means that a process can lose its locks on
a file such as
.I /etc/passwd
or
.I /etc/mtab
when for some reason a library function decides to open, read,
and close the same file.
.IP *
The threads in a process share locks.
In other words,
a multithreaded program can't use record locking to ensure
that threads don't simultaneously access the same region of a file.
.PP
Open file description locks solve both of these problems.
.SS Open file description locks (non-POSIX)
Open file description locks are advisory byte-range locks whose operation is
in most respects identical to the traditional record locks described above.
This lock type is Linux-specific,
and available since Linux 3.15.
For an explanation of open file descriptions, see
.BR open (2).

The principal difference between the two lock types
is that whereas traditional record locks
are associated with a process,
open file description locks are associated with the
open file description on which they are acquired,
much like locks acquired with
.BR flock (2).
Consequently (and unlike traditional advisory record locks),
open file description locks are inherited across
.BR fork (2)
(and
.BR clone (2)
with
.BR CLONE_FILES ),
and are only automatically released on the last close
of the open file description,
instead of being released on any close of the file.
.PP
Conflicting lock combinations
(i.e., a read lock and a write lock or two write locks)
where one lock is an open file description lock and the other
is a traditional record lock conflict
even when they are acquired by the same process on the same file descriptor.

Open file description locks placed via the same open file description
(i.e., via the same file descriptor,
or via a duplicate of the file descriptor created by
.BR fork (2),
.BR dup (2),
.BR fcntl (2)
.BR F_DUPFD ,
and so on) are always compatible:
if a new lock is placed on an already locked region,
then the existing lock is converted to the new lock type.
(Such conversions may result in splitting, shrinking, or coalescing with
an existing lock as discussed above.)

On the other hand, open file description locks may conflict with
each other when they are acquired via different open file descriptions.
Thus, the threads in a multithreaded program can use
open file description locks to synchronize access to a file region
by having each thread perform its own
.BR open (2)
on the file and applying locks via the resulting file descriptor.
.PP
As with traditional advisory locks, the third argument to
.BR fcntl (),
.IR lock ,
is a pointer to an
.IR flock
structure.
By contrast with traditional record locks, the
.I l_pid
field of that structure must be set to zero
when using the commands described below.

The commands for working with open file description locks are analogous
to those used with traditional locks:
.TP
.BR F_OFD_SETLK " (\fIstruct flock *\fP)"
Acquire an open file description lock (when
.I l_type
is
.B F_RDLCK
or
.BR F_WRLCK )
or release an open file description lock (when
.I l_type
is
.BR F_UNLCK )
on the bytes specified by the
.IR l_whence ", " l_start ", and " l_len
fields of
.IR lock .
If a conflicting lock is held by another process,
this call returns \-1 and sets
.I errno
to
.BR EAGAIN .
.TP
.BR F_OFD_SETLKW " (\fIstruct flock *\fP)"
As for
.BR F_OFD_SETLK ,
but if a conflicting lock is held on the file, then wait for that lock to be
released.
If a signal is caught while waiting, then the call is interrupted
and (after the signal handler has returned) returns immediately
(with return value \-1 and
.I errno
set to
.BR EINTR ;
see
.BR signal (7)).
.TP
.BR F_OFD_GETLK " (\fIstruct flock *\fP)"
On input to this call,
.I lock
describes an open file description lock we would like to place on the file.
If the lock could be placed,
.BR fcntl ()
does not actually place it, but returns
.B F_UNLCK
in the
.I l_type
field of
.I lock
and leaves the other fields of the structure unchanged.
If one or more incompatible locks would prevent this lock being placed,
then details about one of these locks are returned via
.IR lock ,
as described above for
.BR F_GETLK .
.PP
In the current implementation,
.\" commit 57b65325fe34ec4c917bc4e555144b4a94d9e1f7
no deadlock detection is performed for open file description locks.
(This contrasts with process-associated record locks,
for which the kernel does perform deadlock detection.)
.\"
.SS Mandatory locking
.IR Warning :
the Linux implementation of mandatory locking is unreliable.
See BUGS below.

By default, both traditional (process-associated) and open file description
record locks are advisory.
Advisory locks are not enforced and are useful only between
cooperating processes.

Both lock types can also be mandatory.
Mandatory locks are enforced for all processes.
If a process tries to perform an incompatible access (e.g.,
.BR read (2)
or
.BR write (2))
on a file region that has an incompatible mandatory lock,
then the result depends upon whether the
.B O_NONBLOCK
flag is enabled for its open file description.
If the
.B O_NONBLOCK
flag is not enabled, then
the system call is blocked until the lock is removed
or converted to a mode that is compatible with the access.
If the
.B O_NONBLOCK
flag is enabled, then the system call fails with the error
.BR EAGAIN .

To make use of mandatory locks, mandatory locking must be enabled
both on the filesystem that contains the file to be locked,
and on the file itself.
Mandatory locking is enabled on a filesystem
using the "\-o mand" option to
.BR mount (8),
or the
.B MS_MANDLOCK
flag for
.BR mount (2).
Mandatory locking is enabled on a file by disabling
group execute permission on the file and enabling the set-group-ID
permission bit (see
.BR chmod (1)
and
.BR chmod (2)).

Mandatory locking is not specified by POSIX.
Some other systems also support mandatory locking,
although the details of how to enable it vary across systems.
.SS Managing signals
.BR F_GETOWN ,
.BR F_SETOWN ,
.BR F_GETOWN_EX ,
.BR F_SETOWN_EX ,
.BR F_GETSIG
and
.B F_SETSIG
are used to manage I/O availability signals:
.TP
.BR F_GETOWN " (\fIvoid\fP)"
Return (as the function result)
the process ID or process group currently receiving
.B SIGIO
and
.B SIGURG
signals for events on file descriptor
.IR fd .
Process IDs are returned as positive values;
process group IDs are returned as negative values (but see BUGS below).
.I arg
is ignored.
.TP
.BR F_SETOWN " (\fIint\fP)"
Set the process ID or process group ID that will receive
.B SIGIO
and
.B SIGURG
signals for events on file descriptor
.IR fd
to the ID given in
.IR arg .
A process ID is specified as a positive value;
a process group ID is specified as a negative value.
Most commonly, the calling process specifies itself as the owner
(that is,
.I arg
is specified as
.BR getpid (2)).

.\" From glibc.info:
If you set the
.B O_ASYNC
status flag on a file descriptor by using the
.B F_SETFL
command of
.BR fcntl (),
a
.B SIGIO
signal is sent whenever input or output becomes possible
on that file descriptor.
.B F_SETSIG
can be used to obtain delivery of a signal other than
.BR SIGIO .
If this permission check fails, then the signal is
silently discarded.

Sending a signal to the owner process (group) specified by
.B F_SETOWN
is subject to the same permissions checks as are described for
.BR kill (2),
where the sending process is the one that employs
.B F_SETOWN
(but see BUGS below).

If the file descriptor
.I fd
refers to a socket,
.B F_SETOWN
also selects
the recipient of
.B SIGURG
signals that are delivered when out-of-band
data arrives on that socket.
.RB ( SIGURG
is sent in any situation where
.BR select (2)
would report the socket as having an "exceptional condition".)
.\" The following appears to be rubbish.  It doesn't seem to
.\" be true according to the kernel source, and I can write
.\" a program that gets a terminal-generated SIGIO even though
.\" it is not the foreground process group of the terminal.
.\" -- MTK, 8 Apr 05
.\"
.\" If the file descriptor
.\" .I fd
.\" refers to a terminal device, then SIGIO
.\" signals are sent to the foreground process group of the terminal.

The following was true in 2.6.x kernels up to and including
kernel 2.6.11:
.RS
.IP
If a nonzero value is given to
.B F_SETSIG
in a multithreaded process running with a threading library
that supports thread groups (e.g., NPTL),
then a positive value given to
.B F_SETOWN
has a different meaning:
.\" The relevant place in the (2.6) kernel source is the
.\" 'switch' in fs/fcntl.c::send_sigio_to_task() -- MTK, Apr 2005
instead of being a process ID identifying a whole process,
it is a thread ID identifying a specific thread within a process.
Consequently, it may be necessary to pass
.B F_SETOWN
the result of
.BR gettid (2)
instead of
.BR getpid (2)
to get sensible results when
.B F_SETSIG
is used.
(In current Linux threading implementations,
a main thread's thread ID is the same as its process ID.
This means that a single-threaded program can equally use
.BR gettid (2)
or
.BR getpid (2)
in this scenario.)
Note, however, that the statements in this paragraph do not apply
to the
.B SIGURG
signal generated for out-of-band data on a socket:
this signal is always sent to either a process or a process group,
depending on the value given to
.BR F_SETOWN .
.\" send_sigurg()/send_sigurg_to_task() bypasses
.\" kill_fasync()/send_sigio()/send_sigio_to_task()
.\" to directly call send_group_sig_info()
.\"	-- MTK, Apr 2005 (kernel 2.6.11)
.RE
.IP
The above behavior was accidentally dropped in Linux 2.6.12,
and won't be restored.
From Linux 2.6.32 onward, use
.BR F_SETOWN_EX
to target
.B SIGIO
and
.B SIGURG
signals at a particular thread.
.TP
.BR F_GETOWN_EX " (struct f_owner_ex *) (since Linux 2.6.32)"
Return the current file descriptor owner settings
as defined by a previous
.BR F_SETOWN_EX
operation.
The information is returned in the structure pointed to by
.IR arg ,
which has the following form:
.nf
.in +4n

struct f_owner_ex {
    int   type;
    pid_t pid;
};

.in
.fi
The
.I type
field will have one of the values
.BR F_OWNER_TID ,
.BR F_OWNER_PID ,
or
.BR F_OWNER_PGRP .
The
.I pid
field is a positive integer representing a thread ID, process ID,
or process group ID.
See
.B F_SETOWN_EX
for more details.
.TP
.BR F_SETOWN_EX " (struct f_owner_ex *) (since Linux 2.6.32)"
This operation performs a similar task to
.BR F_SETOWN .
It allows the caller to direct I/O availability signals
to a specific thread, process, or process group.
The caller specifies the target of signals via
.IR arg ,
which is a pointer to a
.IR f_owner_ex
structure.
The
.I type
field has one of the following values, which define how
.I pid
is interpreted:
.RS
.TP
.BR F_OWNER_TID
Send the signal to the thread whose thread ID
(the value returned by a call to
.BR clone (2)
or
.BR gettid (2))
is specified in
.IR pid .
.TP
.BR F_OWNER_PID
Send the signal to the process whose ID
is specified in
.IR pid .
.TP
.BR F_OWNER_PGRP
Send the signal to the process group whose ID
is specified in
.IR pid .
(Note that, unlike with
.BR F_SETOWN ,
a process group ID is specified as a positive value here.)
.RE
.TP
.BR F_GETSIG " (\fIvoid\fP)"
Return (as the function result)
the signal sent when input or output becomes possible.
A value of zero means
.B SIGIO
is sent.
Any other value (including
.BR SIGIO )
is the
signal sent instead, and in this case additional info is available to
the signal handler if installed with
.BR SA_SIGINFO .
.I arg
is ignored.
.TP
.BR F_SETSIG " (\fIint\fP)"
Set the signal sent when input or output becomes possible
to the value given in
.IR arg .
A value of zero means to send the default
.B SIGIO
signal.
Any other value (including
.BR SIGIO )
is the signal to send instead, and in this case additional info
is available to the signal handler if installed with
.BR SA_SIGINFO .
.\"
.\" The following was true only up until 2.6.11:
.\"
.\" Additionally, passing a nonzero value to
.\" .B F_SETSIG
.\" changes the signal recipient from a whole process to a specific thread
.\" within a process.
.\" See the description of
.\" .B F_SETOWN
.\" for more details.

By using
.B F_SETSIG
with a nonzero value, and setting
.B SA_SIGINFO
for the
signal handler (see
.BR sigaction (2)),
extra information about I/O events is passed to
the handler in a
.I siginfo_t
structure.
If the
.I si_code
field indicates the source is
.BR SI_SIGIO ,
the
.I si_fd
field gives the file descriptor associated with the event.
Otherwise,
there is no indication which file descriptors are pending, and you
should use the usual mechanisms
.RB ( select (2),
.BR poll (2),
.BR read (2)
with
.B O_NONBLOCK
set etc.) to determine which file descriptors are available for I/O.

Note that the file descriptor provided in
.I si_fd
is the one that that was specified during the
.BR F_SETSIG
operation.
This can lead to an unusual corner case.
If the file descriptor is duplicated
.RB ( dup (2)
or similar), and the original file descriptor is closed,
then I/O events will continue to be generated, but the
.I si_fd
field will contain the number of the now closed file descriptor.

By selecting a real time signal (value >=
.BR SIGRTMIN ),
multiple I/O events may be queued using the same signal numbers.
(Queuing is dependent on available memory.)
Extra information is available
if
.B SA_SIGINFO
is set for the signal handler, as above.

Note that Linux imposes a limit on the
number of real-time signals that may be queued to a
process (see
.BR getrlimit (2)
and
.BR signal (7))
and if this limit is reached, then the kernel reverts to
delivering
.BR SIGIO ,
and this signal is delivered to the entire
process rather than to a specific thread.
.\" See fs/fcntl.c::send_sigio_to_task() (2.4/2.6) sources -- MTK, Apr 05
.PP
Using these mechanisms, a program can implement fully asynchronous I/O
without using
.BR select (2)
or
.BR poll (2)
most of the time.
.PP
The use of
.BR O_ASYNC
is specific to BSD and Linux.
The only use of
.BR F_GETOWN
and
.B F_SETOWN
specified in POSIX.1 is in conjunction with the use of the
.B SIGURG
signal on sockets.
(POSIX does not specify the
.BR SIGIO
signal.)
.BR F_GETOWN_EX ,
.BR F_SETOWN_EX ,
.BR F_GETSIG ,
and
.B F_SETSIG
are Linux-specific.
POSIX has asynchronous I/O and the
.I aio_sigevent
structure to achieve similar things; these are also available
in Linux as part of the GNU C Library (Glibc).
.SS Leases
.B F_SETLEASE
and
.B F_GETLEASE
(Linux 2.4 onward) are used (respectively) to establish a new lease,
and retrieve the current lease, on the open file description
referred to by the file descriptor
.IR fd .
A file lease provides a mechanism whereby the process holding
the lease (the "lease holder") is notified (via delivery of a signal)
when a process (the "lease breaker") tries to
.BR open (2)
or
.BR truncate (2)
the file referred to by that file descriptor.
.TP
.BR F_SETLEASE " (\fIint\fP)"
Set or remove a file lease according to which of the following
values is specified in the integer
.IR arg :
.RS
.TP
.B F_RDLCK
Take out a read lease.
This will cause the calling process to be notified when
the file is opened for writing or is truncated.
.\" The following became true in kernel 2.6.10:
.\" See the man-pages-2.09 Changelog for further info.
A read lease can be placed only on a file descriptor that
is opened read-only.
.TP
.B F_WRLCK
Take out a write lease.
This will cause the caller to be notified when
the file is opened for reading or writing or is truncated.
A write lease may be placed on a file only if there are no
other open file descriptors for the file.
.TP
.B F_UNLCK
Remove our lease from the file.
.RE
.P
Leases are associated with an open file description (see
.BR open (2)).
This means that duplicate file descriptors (created by, for example,
.BR fork (2)
or
.BR dup (2))
refer to the same lease, and this lease may be modified
or released using any of these descriptors.
Furthermore, the lease is released by either an explicit
.B F_UNLCK
operation on any of these duplicate descriptors, or when all
such descriptors have been closed.
.P
Leases may be taken out only on regular files.
An unprivileged process may take out a lease only on a file whose
UID (owner) matches the filesystem UID of the process.
A process with the
.B CAP_LEASE
capability may take out leases on arbitrary files.
.TP
.BR F_GETLEASE " (\fIvoid\fP)"
Indicates what type of lease is associated with the file descriptor
.I fd
by returning either
.BR F_RDLCK ", " F_WRLCK ", or " F_UNLCK ,
indicating, respectively, a read lease , a write lease, or no lease.
.I arg
is ignored.
.PP
When a process (the "lease breaker") performs an
.BR open (2)
or
.BR truncate (2)
that conflicts with a lease established via
.BR F_SETLEASE ,
the system call is blocked by the kernel and
the kernel notifies the lease holder by sending it a signal
.RB ( SIGIO
by default).
The lease holder should respond to receipt of this signal by doing
whatever cleanup is required in preparation for the file to be
accessed by another process (e.g., flushing cached buffers) and
then either remove or downgrade its lease.
A lease is removed by performing an
.B F_SETLEASE
command specifying
.I arg
as
.BR F_UNLCK .
If the lease holder currently holds a write lease on the file,
and the lease breaker is opening the file for reading,
then it is sufficient for the lease holder to downgrade
the lease to a read lease.
This is done by performing an
.B F_SETLEASE
command specifying
.I arg
as
.BR F_RDLCK .

If the lease holder fails to downgrade or remove the lease within
the number of seconds specified in
.IR /proc/sys/fs/lease-break-time ,
then the kernel forcibly removes or downgrades the lease holder's lease.

Once a lease break has been initiated,
.B F_GETLEASE
returns the target lease type (either
.B F_RDLCK
or
.BR F_UNLCK ,
depending on what would be compatible with the lease breaker)
until the lease holder voluntarily downgrades or removes the lease or
the kernel forcibly does so after the lease break timer expires.

Once the lease has been voluntarily or forcibly removed or downgraded,
and assuming the lease breaker has not unblocked its system call,
the kernel permits the lease breaker's system call to proceed.

If the lease breaker's blocked
.BR open (2)
or
.BR truncate (2)
is interrupted by a signal handler,
then the system call fails with the error
.BR EINTR ,
but the other steps still occur as described above.
If the lease breaker is killed by a signal while blocked in
.BR open (2)
or
.BR truncate (2),
then the other steps still occur as described above.
If the lease breaker specifies the
.B O_NONBLOCK
flag when calling
.BR open (2),
then the call immediately fails with the error
.BR EWOULDBLOCK ,
but the other steps still occur as described above.

The default signal used to notify the lease holder is
.BR SIGIO ,
but this can be changed using the
.B F_SETSIG
command to
.BR fcntl ().
If a
.B F_SETSIG
command is performed (even one specifying
.BR SIGIO ),
and the signal
handler is established using
.BR SA_SIGINFO ,
then the handler will receive a
.I siginfo_t
structure as its second argument, and the
.I si_fd
field of this argument will hold the descriptor of the leased file
that has been accessed by another process.
(This is useful if the caller holds leases against multiple files.)
.SS File and directory change notification (dnotify)
.TP
.BR F_NOTIFY " (\fIint\fP)"
(Linux 2.4 onward)
Provide notification when the directory referred to by
.I fd
or any of the files that it contains is changed.
The events to be notified are specified in
.IR arg ,
which is a bit mask specified by ORing together zero or more of
the following bits:
.RS
.sp
.PD 0
.TP 12
.B DN_ACCESS
A file was accessed
.RB ( read (2),
.BR pread (2),
.BR readv (2),
and similar)
.TP
.B DN_MODIFY
A file was modified
.RB ( write (2),
.BR pwrite (2),
.BR writev (2),
.BR truncate (2),
.BR ftruncate (2),
and similar).
.TP
.B DN_CREATE
A file was created
.RB ( open (2),
.BR creat (2),
.BR mknod (2),
.BR mkdir (2),
.BR link (2),
.BR symlink (2),
.BR rename (2)
into this directory).
.TP
.B DN_DELETE
A file was unlinked
.RB ( unlink (2),
.BR rename (2)
to another directory,
.BR rmdir (2)).
.TP
.B DN_RENAME
A file was renamed within this directory
.RB ( rename (2)).
.TP
.B DN_ATTRIB
The attributes of a file were changed
.RB ( chown (2),
.BR chmod (2),
.BR utime (2),
.BR utimensat (2),
and similar).
.PD
.RE
.IP
(In order to obtain these definitions, the
.B _GNU_SOURCE
feature test macro must be defined before including
.I any
header files.)

Directory notifications are normally "one-shot", and the application
must reregister to receive further notifications.
Alternatively, if
.B DN_MULTISHOT
is included in
.IR arg ,
then notification will remain in effect until explicitly removed.

.\" The following does seem a poor API-design choice...
A series of
.B F_NOTIFY
requests is cumulative, with the events in
.I arg
being added to the set already monitored.
To disable notification of all events, make an
.B F_NOTIFY
call specifying
.I arg
as 0.

Notification occurs via delivery of a signal.
The default signal is
.BR SIGIO ,
but this can be changed using the
.B F_SETSIG
command to
.BR fcntl ().
(Note that
.B SIGIO
is one of the nonqueuing standard signals;
switching to the use of a real-time signal means that
multiple notifications can be queued to the process.)
In the latter case, the signal handler receives a
.I siginfo_t
structure as its second argument (if the handler was
established using
.BR SA_SIGINFO )
and the
.I si_fd
field of this structure contains the file descriptor which
generated the notification (useful when establishing notification
on multiple directories).

Especially when using
.BR DN_MULTISHOT ,
a real time signal should be used for notification,
so that multiple notifications can be queued.

.B NOTE:
New applications should use the
.I inotify
interface (available since kernel 2.6.13),
which provides a much superior interface for obtaining notifications of
filesystem events.
See
.BR inotify (7).
.SS Changing the capacity of a pipe
.TP
.BR F_SETPIPE_SZ " (\fIint\fP; since Linux 2.6.35)"
Change the capacity of the pipe referred to by
.I fd
to be at least
.I arg
bytes.
An unprivileged process can adjust the pipe capacity to any value
between the system page size and the limit defined in
.IR /proc/sys/fs/pipe-max-size
(see
.BR proc (5)).
Attempts to set the pipe capacity below the page size are silently
rounded up to the page size.
Attempts by an unprivileged process to set the pipe capacity above the limit in
.IR /proc/sys/fs/pipe-max-size
yield the error
.BR EPERM ;
a privileged process
.RB ( CAP_SYS_RESOURCE )
can override the limit.
When allocating the buffer for the pipe,
the kernel may use a capacity larger than
.IR arg ,
if that is convenient for the implementation.
The actual capacity that is set is returned as the function result.
Attempting to set the pipe capacity smaller than the amount
of buffer space currently used to store data produces the error
.BR EBUSY .
.TP
.BR F_GETPIPE_SZ " (\fIvoid\fP; since Linux 2.6.35)"
Return (as the function result) the capacity of the pipe referred to by
.IR fd .
.\"
.SS File Sealing
File seals limit the set of allowed operations on a given file.
For each seal that is set on a file,
a specific set of operations will fail with
.B EPERM
on this file from now on.
The file is said to be sealed.
The default set of seals depends on the type of the underlying
file and filesystem.
For an overview of file sealing, a discussion of its purpose,
and some code examples, see
.BR memfd_create (2).

Currently, only the
.I tmpfs
filesystem supports sealing.
On other filesystems, all
.BR fcntl (2)
operations that operate on seals will return
.BR EINVAL .

Seals are a property of an inode.
Thus, all open file descriptors referring to the same inode share
the same set of seals.
Furthermore, seals can never be removed, only added.
.TP
.BR F_ADD_SEALS " (\fIint\fP; since Linux 3.17)"
Add the seals given in the bit-mask argument
.I arg
to the set of seals of the inode referred to by the file descriptor
.IR fd .
Seals cannot be removed again.
Once this call succeeds, the seals are enforced by the kernel immediately.
If the current set of seals includes
.BR F_SEAL_SEAL
(see below), then this call will be rejected with
.BR EPERM .
Adding a seal that is already set is a no-op, in case
.B F_SEAL_SEAL
is not set already.
In order to place a seal, the file descriptor
.I fd
must be writable.
.TP
.BR F_GET_SEALS " (\fIvoid\fP; since Linux 3.17)"
Return (as the function result) the current set of seals
of the inode referred to by
.IR fd .
If no seals are set, 0 is returned.
If the file does not support sealing, \-1 is returned and
.I errno
is set to
.BR EINVAL .
.PP
The following seals are available:
.TP
.BR F_SEAL_SEAL
If this seal is set, any further call to
.BR fcntl (2)
with
.B F_ADD_SEALS
will fail with
.BR EPERM .
Therefore, this seal prevents any modifications to the set of seals itself.
If the initial set of seals of a file includes
.BR F_SEAL_SEAL ,
then this effectively causes the set of seals to be constant and locked.
.TP
.BR F_SEAL_SHRINK
If this seal is set, the file in question cannot be reduced in size.
This affects
.BR open (2)
with the
.B O_TRUNC
flag as well as
.BR truncate (2)
and
.BR ftruncate (2).
Those calls will fail with
.B EPERM
if you try to shrink the file in question.
Increasing the file size is still possible.
.TP
.BR F_SEAL_GROW
If this seal is set, the size of the file in question cannot be increased.
This affects
.BR write (2)
beyond the end of the file,
.BR truncate (2),
.BR ftruncate (2),
and
.BR fallocate (2).
These calls will fail with
.B EPERM
if you use them to increase the file size.
If you keep the size or shrink it, those calls still work as expected.
.TP
.BR F_SEAL_WRITE
If this seal is set, you cannot modify the contents of the file.
Note that shrinking or growing the size of the file is
still possible and allowed.
.\" One or more other seals are typically used with F_SEAL_WRITE
.\" because, given a file with the F_SEAL_WRITE seal set, then,
.\" while it would no longer be possinle to (say) write zeros into
.\" the last 100 bytes of a file, it would still be possible
.\" to (say) shrink the file by 100 bytes using ftruncate(), and
.\" then increase the file size by 100 bytes, which would have
.\" the effect of replacing the last hundred bytes by zeros.
.\"
Thus, this seal is normally used in combination with one of the other seals.
This seal affects
.BR write (2)
and
.BR fallocate (2)
(only in combination with the
.B FALLOC_FL_PUNCH_HOLE
flag).
Those calls will fail with
.B EPERM
if this seal is set.
Furthermore, trying to create new shared, writable memory-mappings via
.BR mmap (2)
will also fail with
.BR EPERM .

Setting
.B F_SEAL_WRITE
via
.BR fcntl (2)
with
.B F_ADD_SEALS
will fail with
.B EBUSY
if any writable, shared mapping exists.
Such mappings must be unmapped before you can add this seal.
Furthermore, if there are any asynchronous I/O operations
.RB ( io_submit (2))
pending on the file,
all outstanding writes will be discarded.
.SH RETURN VALUE
For a successful call, the return value depends on the operation:
.TP 0.9i
.B F_DUPFD
The new descriptor.
.TP
.B F_GETFD
Value of file descriptor flags.
.TP
.B F_GETFL
Value of file status flags.
.TP
.B F_GETLEASE
Type of lease held on file descriptor.
.TP
.B F_GETOWN
Value of descriptor owner.
.TP
.B F_GETSIG
Value of signal sent when read or write becomes possible, or zero
for traditional
.B SIGIO
behavior.
.TP
.BR F_GETPIPE_SZ ", " F_SETPIPE_SZ
The pipe capacity.
.TP
.BR F_GET_SEALS
A bit mask identifying the seals that have been set
for the inode referred to by
.IR fd .
.TP
All other commands
Zero.
.PP
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.BR EACCES " or " EAGAIN
Operation is prohibited by locks held by other processes.
.TP
.B EAGAIN
The operation is prohibited because the file has been memory-mapped by
another process.
.TP
.B EBADF
.I fd
is not an open file descriptor
.TP
.B EBADF
.I cmd
is
.B F_SETLK
or
.B F_SETLKW
and the file descriptor open mode doesn't match with the
type of lock requested.
.TP
.BR EBUSY
.I cmd
is
.BR F_SETPIPE_SZ
and the new pipe capacity specified in
.I arg
is smaller than the amount of buffer space currently
used to store data in the pipe.
.TP
.B EBUSY
.I cmd
is
.BR F_ADD_SEALS ,
.IR arg
includes
.BR F_SEAL_WRITE ,
and there exists a writable, shared mapping on the file referred to by
.IR fd .
.TP
.B EDEADLK
It was detected that the specified
.B F_SETLKW
command would cause a deadlock.
.TP
.B EFAULT
.I lock
is outside your accessible address space.
.TP
.B EINTR
.I cmd
is
.BR F_SETLKW
or
.BR F_OFD_SETLKW
and the operation was interrupted by a signal; see
.BR signal (7).
.TP
.B EINTR
.I cmd
is
.BR F_GETLK ,
.BR F_SETLK ,
.BR F_OFD_GETLK ,
or
.BR F_OFD_SETLK ,
and the operation was interrupted by a signal before the lock was checked or
acquired.
Most likely when locking a remote file (e.g., locking over
NFS), but can sometimes happen locally.
.TP
.B EINVAL
The value specified in
.I cmd
is not recognized by this kernel.
.TP
.B EINVAL
.I cmd
is
.BR F_ADD_SEALS
and
.I arg
includes an unrecognized sealing bit.
.TP
.BR EINVAL
.I cmd
is
.BR F_ADD_SEALS
or
.BR F_GET_SEALS
and the filesystem containing the inode referred to by
.I fd
does not support sealing.
.TP
.B EINVAL
.I cmd
is
.BR F_DUPFD
and
.I arg
is negative or is greater than the maximum allowable value
(see the discussion of
.BR RLIMIT_NOFILE
in
.BR getrlimit (2)).
.TP
.B EINVAL
.I cmd
is
.BR F_SETSIG
and
.I arg
is not an allowable signal number.
.TP
.B EINVAL
.I cmd
is
.BR F_OFD_SETLK ,
.BR F_OFD_SETLKW ,
or
.BR F_OFD_GETLK ,
and
.I l_pid
was not specified as zero.
.TP
.B EMFILE
.I cmd
is
.BR F_DUPFD
and the process already has the maximum number of file descriptors open.
.TP
.B ENOLCK
Too many segment locks open, lock table is full, or a remote locking
protocol failed (e.g., locking over NFS).
.TP
.B ENOTDIR
.B F_NOTIFY
was specified in
.IR cmd ,
but
.IR fd
does not refer to a directory.
.TP
.B EPERM
Attempted to clear the
.B O_APPEND
flag on a file that has the append-only attribute set.
.TP
.B EPERM
.I cmd
was
.BR F_ADD_SEALS ,
but
.I fd
was not open for writing
or the current set of seals on the file already includes
.BR F_SEAL_SEAL .
.SH CONFORMING TO
SVr4, 4.3BSD, POSIX.1-2001.
Only the operations
.BR F_DUPFD ,
.BR F_GETFD ,
.BR F_SETFD ,
.BR F_GETFL ,
.BR F_SETFL ,
.BR F_GETLK ,
.BR F_SETLK ,
and
.BR F_SETLKW
are specified in POSIX.1-2001.

.BR F_GETOWN
and
.B F_SETOWN
are specified in POSIX.1-2001.
(To get their definitions, define either
.BR _BSD_SOURCE ,
or
.BR _XOPEN_SOURCE
with the value 500 or greater, or
.BR _POSIX_C_SOURCE
with the value 200809L or greater.)

.B F_DUPFD_CLOEXEC
is specified in POSIX.1-2008.
(To get this definition, define
.B _POSIX_C_SOURCE
with the value 200809L or greater, or
.B _XOPEN_SOURCE
with the value 700 or greater.)

.BR F_GETOWN_EX ,
.BR F_SETOWN_EX ,
.BR F_SETPIPE_SZ ,
.BR F_GETPIPE_SZ ,
.BR F_GETSIG ,
.BR F_SETSIG ,
.BR F_NOTIFY ,
.BR F_GETLEASE ,
and
.B F_SETLEASE
are Linux-specific.
(Define the
.B _GNU_SOURCE
macro to obtain these definitions.)
.\" .PP
.\" SVr4 documents additional EIO, ENOLINK and EOVERFLOW error conditions.

.BR F_OFD_SETLK ,
.BR F_OFD_SETLKW ,
and
.BR F_OFD_GETLK
are Linux-specific (and one must define
.BR _GNU_SOURCE
to obtain their definitions),
but work is being done to have them included in the next version of POSIX.1.

.BR F_ADD_SEALS
and
.BR F_GET_SEALS
are Linux-specific.
.\" FIXME . Once glibc adds support, add a note about FTM requirements
.SH NOTES
The errors returned by
.BR dup2 (2)
are different from those returned by
.BR F_DUPFD .
.\"
.SS File locking
The original Linux
.BR fcntl ()
system call was not designed to handle large file offsets
(in the
.I flock
structure).
Consequently, an
.BR fcntl64 ()
system call was added in Linux 2.4.
The newer system call employs a different structure for file locking,
.IR flock64 ,
and corresponding commands,
.BR F_GETLK64 ,
.BR F_SETLK64 ,
and
.BR F_SETLKW64 .
However, these details can be ignored by applications using glibc, whose
.BR fcntl ()
wrapper function transparently employs the more recent system call
where it is available.

The errors returned by
.BR dup2 (2)
are different from those returned by
.BR F_DUPFD .
.SS Record locks
Since kernel 2.0, there is no interaction between the types of lock
placed by
.BR flock (2)
and
.BR fcntl ().

Several systems have more fields in
.I "struct flock"
such as, for example,
.IR l_sysid .
.\" e.g., Solaris 8 documents this field in fcntl(2), and Irix 6.5
.\" documents it in fcntl(5).  mtk, May 2007
.\" Also, FreeBSD documents it (Apr 2014).
Clearly,
.I l_pid
alone is not going to be very useful if the process holding the lock
may live on a different machine.

The original Linux
.BR fcntl ()
system call was not designed to handle large file offsets
(in the
.I flock
structure).
Consequently, an
.BR fcntl64 ()
system call was added in Linux 2.4.
The newer system call employs a different structure for file locking,
.IR flock64 ,
and corresponding commands,
.BR F_GETLK64 ,
.BR F_SETLK64 ,
and
.BR F_SETLKW64 .
However, these details can be ignored by applications using glibc, whose
.BR fcntl ()
wrapper function transparently employs the more recent system call
where it is available.
.SS Record locking and NFS
Before Linux 3.12, if an NFSv4 client
loses contact with the server for a period of time
(defined as more than 90 seconds with no communication),
.\"
.\" Neil Brown: With NFSv3 the failure mode is the reverse.  If
.\"     the server loses contact with a client then any lock stays in place
.\"     indefinitely ("why can't I read my mail"... I remember it well).
.\"
it might lose and regain a lock without ever being aware of the fact.
(The period of time after which contact is assumed lost is known as
the NFSv4 leasetime.
On a Linux NFS server, this can be determined by looking at
.IR /proc/fs/nfsd/nfsv4leasetime ,
which expresses the period in seconds.
The default value for this file is 90.)
.\"
.\" Jeff Layton:
.\"     Note that this is not a firm timeout. The server runs a job
.\"     periodically to clean out expired stateful objects, and it's likely
.\"     that there is some time (maybe even up to another whole lease period)
.\"     between when the timeout expires and the job actually runs. If the
.\"     client gets a RENEW in there within that window, its lease will be
.\"     renewed and its state preserved.
.\"
This scenario potentially risks data corruption,
since another process might acquire a lock in the intervening period
and perform file I/O.

Since Linux 3.12,
.\" commit ef1820f9be27b6ad158f433ab38002ab8131db4d
if an NFSv4 client loses contact with the server,
any I/O to the file by a process which "thinks" it holds
a lock will fail until that process closes and reopens the file.
A kernel parameter,
.IR nfs.recover_lost_locks ,
can be set to 1 to obtain the pre-3.12 behavior,
whereby the client will attempt to recover lost locks
when contact is reestablished with the server.
Because of the attendant risk of data corruption,
.\" commit f6de7a39c181dfb8a2c534661a53c73afb3081cd
this parameter defaults to 0 (disabled).
.SH BUGS
.SS F_SETFL
It is not possible to use
.BR F_SETFL
to change the state of the
.BR O_DSYNC
and
.BR O_SYNC
flags.
.\" FIXME . According to POSIX.1-2001, O_SYNC should also be modifiable
.\" via fcntl(2), but currently Linux does not permit this
.\" See http://bugzilla.kernel.org/show_bug.cgi?id=5994
Attempts to change the state of these flags are silently ignored.
.SS F_GETOWN
A limitation of the Linux system call conventions on some
architectures (notably i386) means that if a (negative)
process group ID to be returned by
.B F_GETOWN
falls in the range \-1 to \-4095, then the return value is wrongly
interpreted by glibc as an error in the system call;
.\" glibc source: sysdeps/unix/sysv/linux/i386/sysdep.h
that is, the return value of
.BR fcntl ()
will be \-1, and
.I errno
will contain the (positive) process group ID.
The Linux-specific
.BR F_GETOWN_EX
operation avoids this problem.
.\" mtk, Dec 04: some limited testing on alpha and ia64 seems to
.\" indicate that ANY negative PGID value will cause F_GETOWN
.\" to misinterpret the return as an error. Some other architectures
.\" seem to have the same range check as i386.
Since glibc version 2.11, glibc makes the kernel
.B F_GETOWN
problem invisible by implementing
.B F_GETOWN
using
.BR F_GETOWN_EX .
.SS F_SETOWN
In Linux 2.4 and earlier, there is bug that can occur
when an unprivileged process uses
.B F_SETOWN
to specify the owner
of a socket file descriptor
as a process (group) other than the caller.
In this case,
.BR fcntl ()
can return \-1 with
.I errno
set to
.BR EPERM ,
even when the owner process (group) is one that the caller
has permission to send signals to.
Despite this error return, the file descriptor owner is set,
and signals will be sent to the owner.
.\"
.SS Deadlock detection
The deadlock-detection algorithm employed by the kernel when dealing with
.BR F_SETLKW
requests can yield both
false negatives (failures to detect deadlocks,
leaving a set of deadlocked processes blocked indefinitely)
and false positives
.RB ( EDEADLK
errors when there is no deadlock).
For example,
the kernel limits the lock depth of its dependency search to 10 steps,
meaning that circular deadlock chains that exceed
that size will not be detected.
In addition, the kernel may falsely indicate a deadlock
when two or more processes created using the
.BR clone (2)
.B CLONE_FILES
flag place locks that appear (to the kernel) to conflict.
.\"
.SS Mandatory locking
The Linux implementation of mandatory locking
is subject to race conditions which render it unreliable:
.\" http://marc.info/?l=linux-kernel&m=119013491707153&w=2
.\"
.\" Reconfirmed by Jeff Layton
.\"     From: Jeff Layton <jlayton <at> redhat.com>
.\"     Subject: Re: Status of fcntl() mandatory locking
.\"     Newsgroups: gmane.linux.file-systems
.\"     Date: 2014-04-28 10:07:57 GMT
.\"     http://thread.gmane.org/gmane.linux.file-systems/84481/focus=84518
a
.BR write (2)
call that overlaps with a lock may modify data after the mandatory lock is
acquired;
a
.BR read (2)
call that overlaps with a lock may detect changes to data that were made
only after a write lock was acquired.
Similar races exist between mandatory locks and
.BR mmap (2).
It is therefore inadvisable to rely on mandatory locking.
.SH SEE ALSO
.BR dup2 (2),
.BR flock (2),
.BR open (2),
.BR socket (2),
.BR lockf (3),
.BR capabilities (7),
.BR feature_test_macros (7)

.IR locks.txt ,
.IR mandatory-locking.txt ,
and
.I dnotify.txt
in the Linux kernel source directory
.IR Documentation/filesystems/
(on older kernels, these files are directly under the
.I Documentation/
directory, and
.I mandatory-locking.txt
is called
.IR mandatory.txt )
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 Rickard E. Faith (faith@cs.unc.edu) and
.\" and Copyright 2002 Michael Kerrisk
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified Fri Jan 31 16:26:07 1997 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified Fri Dec 11 17:57:27 1998 by Jamie Lokier <jamie@imbolc.ucc.ie>
.\" Modified 24 Apr 2002 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"	Substantial rewrites and additions
.\" 2005-05-10 mtk, noted that lock conversions are not atomic.
.\"
.\" FIXME Maybe document LOCK_MAND, LOCK_RW, LOCK_READ, LOCK_WRITE
.\" which only have effect for SAMBA.
.\"
.TH FLOCK 2 2014-09-21 "Linux" "Linux Programmer's Manual"
.SH NAME
flock \- apply or remove an advisory lock on an open file
.SH SYNOPSIS
.B #include <sys/file.h>
.sp
.BI "int flock(int " fd ", int " operation );
.SH DESCRIPTION
Apply or remove an advisory lock on the open file specified by
.IR fd .
The argument
.I operation
is one of the following:
.RS 4
.TP 9
.B LOCK_SH
Place a shared lock.
More than one process may hold a shared lock for a given file
at a given time.
.TP
.B LOCK_EX
Place an exclusive lock.
Only one process may hold an exclusive lock for a given
file at a given time.
.TP
.B LOCK_UN
Remove an existing lock held by this process.
.RE
.PP
A call to
.BR flock ()
may block if an incompatible lock is held by another process.
To make a nonblocking request, include
.B LOCK_NB
(by ORing)
with any of the above operations.

A single file may not simultaneously have both shared and exclusive locks.

Locks created by
.BR flock ()
are associated with an open file description (see
.BR open (2)).
This means that duplicate file descriptors (created by, for example,
.BR fork (2)
or
.BR dup (2))
refer to the same lock, and this lock may be modified
or released using any of these descriptors.
Furthermore, the lock is released either by an explicit
.B LOCK_UN
operation on any of these duplicate descriptors, or when all
such descriptors have been closed.

If a process uses
.BR open (2)
(or similar) to obtain more than one descriptor for the same file,
these descriptors are treated independently by
.BR flock ().
An attempt to lock the file using one of these file descriptors
may be denied by a lock that the calling process has
already placed via another descriptor.

A process may hold only one type of lock (shared or exclusive)
on a file.
Subsequent
.BR flock ()
calls on an already locked file will convert an existing lock to the new
lock mode.

Locks created by
.BR flock ()
are preserved across an
.BR execve (2).

A shared or exclusive lock can be placed on a file regardless of the
mode in which the file was opened.
.SH RETURN VALUE
On success, zero is returned.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EBADF
.I fd
is not an open file descriptor.
.TP
.B EINTR
While waiting to acquire a lock, the call was interrupted by
delivery of a signal caught by a handler; see
.BR signal (7).
.TP
.B EINVAL
.I operation
is invalid.
.TP
.B ENOLCK
The kernel ran out of memory for allocating lock records.
.TP
.B EWOULDBLOCK
The file is locked and the
.B LOCK_NB
flag was selected.
.SH CONFORMING TO
4.4BSD (the
.BR flock ()
call first appeared in 4.2BSD).
A version of
.BR flock (),
possibly implemented in terms of
.BR fcntl (2),
appears on most UNIX systems.
.SH NOTES
Since kernel 2.0,
.BR flock ()
is implemented as a system call in its own right rather
than being emulated in the GNU C library as a call to
.BR fcntl (2).
With this implementation,
there is no interaction between the types of lock
placed by
.BR flock ()
and
.BR fcntl (2),
and
.BR flock ()
does not detect deadlock.
(Note, however, that on some systems, such as the modern BSDs,
.\" E.g., according to the flock(2) man page, FreeBSD since at least 5.3
.BR flock ()
and
.BR fcntl (2)
locks
.I do
interact with one another.)
.PP
In Linux kernels up to 2.6.11,
.BR flock ()
does not lock files over NFS
(i.e., the scope of locks was limited to the local system).
Instead, one could use
.BR fcntl (2)
byte-range locking, which does work over NFS,
given a sufficiently recent version of
Linux and a server which supports locking.
Since Linux 2.6.12, NFS clients support
.BR flock ()
locks by emulating them as byte-range locks on the entire file.
This means that
.BR fcntl (2)
and
.BR flock ()
locks
.I do
interact with one another over NFS.
Since Linux 2.6.37,
.\" commit 5eebde23223aeb0ad2d9e3be6590ff8bbfab0fc2
the kernel supports a compatibility mode that allows
.BR flock ()
locks (and also
.BR fcntl (2)
byte region locks) to be treated as local;
see the discussion of the
.I "local_lock"
option in
.BR nfs (5).
.PP
.BR flock ()
places advisory locks only; given suitable permissions on a file,
a process is free to ignore the use of
.BR flock ()
and perform I/O on the file.
.PP
.BR flock ()
and
.BR fcntl (2)
locks have different semantics with respect to forked processes and
.BR dup (2).
On systems that implement
.BR flock ()
using
.BR fcntl (2),
the semantics of
.BR flock ()
will be different from those described in this manual page.
.PP
Converting a lock
(shared to exclusive, or vice versa) is not guaranteed to be atomic:
the existing lock is first removed, and then a new lock is established.
Between these two steps,
a pending lock request by another process may be granted,
with the result that the conversion either blocks, or fails if
.B LOCK_NB
was specified.
(This is the original BSD behavior,
and occurs on many other implementations.)
.\" Kernel 2.5.21 changed things a little: during lock conversion
.\" it is now the highest priority process that will get the lock -- mtk
.SH SEE ALSO
.BR flock (1),
.BR close (2),
.BR dup (2),
.BR execve (2),
.BR fcntl (2),
.BR fork (2),
.BR open (2),
.BR lockf (3)

.I Documentation/filesystems/locks.txt
in the Linux kernel source tree
.RI ( Documentation/locks.txt
in older kernels)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2006 Michael Kerrisk <mtk.manpages@gmail.com>
.\" A few fragments remain from an earlier (1992) page by
.\" Drew Eckhardt (drew@cs.colorado.edu),
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified by Michael Haardt (michael@moria.de)
.\" Modified Sat Jul 24 13:22:07 1993 by Rik Faith (faith@cs.unc.edu)
.\" Modified 21 Aug 1994 by Michael Chastain (mec@shell.portal.com):
.\"   Referenced 'clone(2)'.
.\" Modified 1995-06-10, 1996-04-18, 1999-11-01, 2000-12-24
.\"   by Andries Brouwer (aeb@cwi.nl)
.\" Modified, 27 May 2004, Michael Kerrisk <mtk.manpages@gmail.com>
.\"     Added notes on capability requirements
.\" 2006-09-04, Michael Kerrisk
.\"     Greatly expanded, to describe all attributes that differ
.\"	parent and child.
.\"
.TH FORK 2 2015-02-21 "Linux" "Linux Programmer's Manual"
.SH NAME
fork \- create a child process
.SH SYNOPSIS
.B #include <unistd.h>
.sp
.B pid_t fork(void);
.SH DESCRIPTION
.BR fork ()
creates a new process by duplicating the calling process.
The new process is referred to as the
.I child
process.
The calling process is referred to as the
.I parent
process.

The child process and the parent process run in separate memory spaces.
At the time of
.BR fork ()
both memory spaces have the same content.
Memory writes, file mappings
.RB ( mmap (2)),
and unmappings
.RB ( munmap (2))
performed by one of the processes do not affect the other.

The child process is an exact duplicate of the parent
process except for the following points:
.IP * 3
The child has its own unique process ID,
and this PID does not match the ID of any existing process group
.RB ( setpgid (2)).
.IP *
The child's parent process ID is the same as the parent's process ID.
.IP *
The child does not inherit its parent's memory locks
.RB ( mlock (2),
.BR mlockall (2)).
.IP *
Process resource utilizations
.RB ( getrusage (2))
and CPU time counters
.RB ( times (2))
are reset to zero in the child.
.IP *
The child's set of pending signals is initially empty
.RB ( sigpending (2)).
.IP *
The child does not inherit semaphore adjustments from its parent
.RB ( semop (2)).
.IP *
The child does not inherit process-associated record locks from its parent
.RB ( fcntl (2)).
(On the other hand, it does inherit
.BR fcntl (2)
open file description locks and
.BR flock (2)
locks from its parent.)
.IP *
The child does not inherit timers from its parent
.RB ( setitimer (2),
.BR alarm (2),
.BR timer_create (2)).
.IP *
The child does not inherit outstanding asynchronous I/O operations
from its parent
.RB ( aio_read (3),
.BR aio_write (3)),
nor does it inherit any asynchronous I/O contexts from its parent (see
.BR io_setup (2)).
.PP
The process attributes in the preceding list are all specified
in POSIX.1-2001.
The parent and child also differ with respect to the following
Linux-specific process attributes:
.IP * 3
The child does not inherit directory change notifications (dnotify)
from its parent
(see the description of
.B F_NOTIFY
in
.BR fcntl (2)).
.IP *
The
.BR prctl (2)
.B PR_SET_PDEATHSIG
setting is reset so that the child does not receive a signal
when its parent terminates.
.IP *
The default timer slack value is set to the parent's
current timer slack value.
See the description of
.BR PR_SET_TIMERSLACK
in
.BR prctl (2).
.IP *
Memory mappings that have been marked with the
.BR madvise (2)
.B MADV_DONTFORK
flag are not inherited across a
.BR fork ().
.IP *
The termination signal of the child is always
.B SIGCHLD
(see
.BR clone (2)).
.IP *
The port access permission bits set by
.BR ioperm (2)
are not inherited by the child;
the child must turn on any bits that it requires using
.BR ioperm (2).
.PP
Note the following further points:
.IP * 3
The child process is created with a single thread\(emthe
one that called
.BR fork ().
The entire virtual address space of the parent is replicated in the child,
including the states of mutexes, condition variables,
and other pthreads objects; the use of
.BR pthread_atfork (3)
may be helpful for dealing with problems that this can cause.
.IP *
The child inherits copies of the parent's set of open file descriptors.
Each file descriptor in the child refers to the same
open file description (see
.BR open (2))
as the corresponding file descriptor in the parent.
This means that the two descriptors share open file status flags,
current file offset,
and signal-driven I/O attributes (see the description of
.B F_SETOWN
and
.B F_SETSIG
in
.BR fcntl (2)).
.IP *
The child inherits copies of the parent's set of open message
queue descriptors (see
.BR mq_overview (7)).
Each descriptor in the child refers to the same
open message queue description
as the corresponding descriptor in the parent.
This means that the two descriptors share the same flags
.RI ( mq_flags ).
.IP *
The child inherits copies of the parent's set of open directory streams (see
.BR opendir (3)).
POSIX.1-2001 says that the corresponding directory streams
in the parent and child
.I may
share the directory stream positioning;
on Linux/glibc they do not.
.SH RETURN VALUE
On success, the PID of the child process is returned in the parent,
and 0 is returned in the child.
On failure, \-1 is returned in the parent,
no child process is created, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EAGAIN
\" NOTE! The following should match the description in pthread_create(3)
A system-imposed limit on the number of threads was encountered.
There are a number of limits that may trigger this error: the
.BR RLIMIT_NPROC
soft resource limit (set via
.BR setrlimit (2)),
which limits the number of processes and threads for a real user ID,
was reached;
the kernel's system-wide limit on the number of processes and threads,
.IR /proc/sys/kernel/threads-max ,
was reached (see
.BR proc (5));
or the maximum number of PIDs,
.IR /proc/sys/kernel/pid_max ,
was reached (see
.BR proc (5)).
.TP
.B EAGAIN
The caller is operating under the
.BR SCHED_DEADLINE
scheduling policy and does not have the reset-on-fork flag set.
See
.BR sched (7).
.TP
.B ENOMEM
.BR fork ()
failed to allocate the necessary kernel structures because memory is tight.
.TP
.B ENOSYS
.BR fork ()
is not supported on this platform (for example,
.\" e.g., arm (optionally), blackfin, c6x, frv, h8300, microblaze, xtensa
hardware without a Memory-Management Unit).
.SH CONFORMING TO
SVr4, 4.3BSD, POSIX.1-2001.
.SH NOTES
.PP
Under Linux,
.BR fork ()
is implemented using copy-on-write pages, so the only penalty that it incurs
is the time and memory required to duplicate the parent's page tables,
and to create a unique task structure for the child.
.SS C library/kernel ABI differences
Since version 2.3.3,
.\" nptl/sysdeps/unix/sysv/linux/fork.c
rather than invoking the kernel's
.BR fork ()
system call,
the glibc
.BR fork ()
wrapper that is provided as part of the
NPTL threading implementation invokes
.BR clone (2)
with flags that provide the same effect as the traditional system call.
(A call to
.BR fork ()
is equivalent to a call to
.BR clone (2)
specifying
.I flags
as just
.BR SIGCHLD .)
The glibc wrapper invokes any fork handlers that have been
established using
.BR pthread_atfork (3).
.\" and does some magic to ensure that getpid(2) returns the right value.
.SH EXAMPLE
See
.BR pipe (2)
and
.BR wait (2).
.SH SEE ALSO
.BR clone (2),
.BR execve (2),
.BR exit (2),
.BR setrlimit (2),
.BR unshare (2),
.BR vfork (2),
.BR wait (2),
.BR daemon (3),
.BR capabilities (7),
.BR credentials (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 Rickard E. Faith (faith@cs.unc.edu) and
.\" and Copyright 2006 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified 21 Aug 1994 by Michael Chastain <mec@shell.portal.com>:
.\"   Removed note about old libc (pre-4.5.26) translating to 'sync'.
.\" Modified 15 Apr 1995 by Michael Chastain <mec@shell.portal.com>:
.\"   Added `see also' section.
.\" Modified 13 Apr 1996 by Markus Kuhn <mskuhn@cip.informatik.uni-erlangen.de>
.\"   Added remarks about fdatasync.
.\" Modified 31 Jan 1997 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified 18 Apr 2001 by Andi Kleen
.\"   Fix description to describe what it really does; add a few caveats.
.\" 2006-04-28, mtk, substantial rewrite of various parts.
.\" 2012-02-27 Various changes by Christoph Hellwig <hch@lst.de>
.\"
.TH FSYNC 2 2014-08-19 "Linux" "Linux Programmer's Manual"
.SH NAME
fsync, fdatasync \- synchronize a file's in-core state with storage device
.SH SYNOPSIS
.B #include <unistd.h>
.sp
.BI "int fsync(int " fd );
.sp
.BI "int fdatasync(int " fd );
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR fsync ():
_BSD_SOURCE || _XOPEN_SOURCE
.br
         || /* since glibc 2.8: */ _POSIX_C_SOURCE\ >=\ 200112L
.\" _POSIX_C_SOURCE\ >=\ 200112L only since glibc 2.8
.br
.BR fdatasync ():
_POSIX_C_SOURCE\ >=\ 199309L || _XOPEN_SOURCE\ >=\ 500
.SH DESCRIPTION
.BR fsync ()
transfers ("flushes") all modified in-core data of
(i.e., modified buffer cache pages for) the
file referred to by the file descriptor
.I fd
to the disk device (or other permanent storage device) so that all
changed information can be retrieved even after the system crashed or
was rebooted.
This includes writing through or flushing a disk cache if present.
The call blocks until the device reports that the transfer has completed.
It also flushes metadata information associated with the file (see
.BR stat (2)).

Calling
.BR fsync ()
does not necessarily ensure
that the entry in the directory containing the file has also reached disk.
For that an explicit
.BR fsync ()
on a file descriptor for the directory is also needed.

.BR fdatasync ()
is similar to
.BR fsync (),
but does not flush modified metadata unless that metadata
is needed in order to allow a subsequent data retrieval to be
correctly handled.
For example, changes to
.I st_atime
or
.I st_mtime
(respectively, time of last access and
time of last modification; see
.BR stat (2))
do not require flushing because they are not necessary for
a subsequent data read to be handled correctly.
On the other hand, a change to the file size
.RI ( st_size ,
as made by say
.BR ftruncate (2)),
would require a metadata flush.

The aim of
.BR fdatasync ()
is to reduce disk activity for applications that do not
require all metadata to be synchronized with the disk.
.SH RETURN VALUE
On success, these system calls return zero.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EBADF
.I fd
is not a valid open file descriptor.
.TP
.B EIO
An error occurred during synchronization.
.TP
.BR EROFS ", " EINVAL
.I fd
is bound to a special file which does not support synchronization.
.SH CONFORMING TO
4.3BSD, POSIX.1-2001.
.SH AVAILABILITY
On POSIX systems on which
.BR fdatasync ()
is available,
.B _POSIX_SYNCHRONIZED_IO
is defined in
.I <unistd.h>
to a value greater than 0.
(See also
.BR sysconf (3).)
.\" POSIX.1-2001: It shall be defined to -1 or 0 or 200112L.
.\" -1: unavailable, 0: ask using sysconf().
.\" glibc defines them to 1.
.SH NOTES
On some UNIX systems (but not Linux),
.I fd
must be a
.I writable
file descriptor.

In Linux 2.2 and earlier,
.BR fdatasync ()
is equivalent to
.BR fsync (),
and so has no performance advantage.

The
.BR fsync ()
implementations in older kernels and lesser used filesystems
does not know how to flush disk caches.
In these cases disk caches need to be disabled using
.BR hdparm (8)
or
.BR sdparm (8)
to guarantee safe operation.
.SH SEE ALSO
.BR bdflush (2),
.BR open (2),
.BR sync (2),
.BR sync_file_range (2),
.BR hdparm (8),
.BR mount (8),
.BR sync (1)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Page by b.hubert
.\"
.\" %%%LICENSE_START(FREELY_REDISTRIBUTABLE)
.\" may be freely modified and distributed
.\" %%%LICENSE_END
.\"
.\" Niki A. Rahimi (LTC Security Development, narahimi@us.ibm.com)
.\" added ERRORS section.
.\"
.\" Modified 2004-06-17 mtk
.\" Modified 2004-10-07 aeb, added FUTEX_REQUEUE, FUTEX_CMP_REQUEUE
.\"
.\" FIXME .
.\" See also https://bugzilla.kernel.org/show_bug.cgi?id=14303
.\" 2.6.14 adds FUTEX_WAKE_OP
.\"	commit 4732efbeb997189d9f9b04708dc26bf8613ed721
.\"	Author: Jakub Jelinek <jakub@redhat.com>
.\"	Date:   Tue Sep 6 15:16:25 2005 -0700
.\"
.\" FIXME .
.\" 2.6.18 adds (Ingo Molnar) priority inheritance support:
.\" FUTEX_LOCK_PI, FUTEX_UNLOCK_PI, and FUTEX_TRYLOCK_PI.  These need
.\" to be documented in the manual page.  Probably there is sufficient
.\" material in the kernel source file Documentation/pi-futex.txt.
.\"	commit c87e2837be82df479a6bae9f155c43516d2feebc
.\"	Author: Ingo Molnar <mingo@elte.hu>
.\"	Date:   Tue Jun 27 02:54:58 2006 -0700
.\"
.\"	commit e2970f2fb6950183a34e8545faa093eb49d186e1
.\"	Author: Ingo Molnar <mingo@elte.hu>
.\"	Date:   Tue Jun 27 02:54:47 2006 -0700
.\"
.\"	See Documentation/pi-futex.txt
.\"
.\" FIXME .
.\" 2.6.25 adds FUTEX_WAKE_BITSET, FUTEX_WAIT_BITSET
.\"	commit cd689985cf49f6ff5c8eddc48d98b9d581d9475d
.\"	Author: Thomas Gleixner <tglx@linutronix.de>
.\"	Date:   Fri Feb 1 17:45:14 2008 +0100
.\"
.\" FIXME .
.\" 2.6.31 adds FUTEX_WAIT_REQUEUE_PI, FUTEX_CMP_REQUEUE_PI
.\"	commit 52400ba946759af28442dee6265c5c0180ac7122
.\"	Author: Darren Hart <dvhltc@us.ibm.com>
.\"	Date:   Fri Apr 3 13:40:49 2009 -0700
.\"
.\"	commit ba9c22f2c01cf5c88beed5a6b9e07d42e10bd358
.\"	Author: Darren Hart <dvhltc@us.ibm.com>
.\"	Date:   Mon Apr 20 22:22:22 2009 -0700
.\"
.\"	See Documentation/futex-requeue-pi.txt
.\"
.TH FUTEX 2 2014-05-21 "Linux" "Linux Programmer's Manual"
.SH NAME
futex \- fast user-space locking
.SH SYNOPSIS
.nf
.sp
.B "#include <linux/futex.h>"
.B "#include <sys/time.h>"
.sp
.BI "int futex(int *" uaddr ", int " op ", int " val \
", const struct timespec *" timeout ,
.br
.BI "          int *" uaddr2 ", int " val3 );
.\" int *? void *? u32 *?
.fi
.IR Note :
There is no glibc wrapper for this system call; see NOTES.
.SH DESCRIPTION
.PP
The
.BR futex ()
system call provides a method for
a program to wait for a value at a given address to change, and a
method to wake up anyone waiting on a particular address (while the
addresses for the same memory in separate processes may not be
equal, the kernel maps them internally so the same memory mapped in
different locations will correspond for
.BR futex ()
calls).
This system call is typically used to
implement the contended case of a lock in shared memory, as
described in
.BR futex (7).
.PP
When a
.BR futex (7)
operation did not finish uncontended in user space, a call needs to be made
to the kernel to arbitrate.
Arbitration can either mean putting the calling
process to sleep or, conversely, waking a waiting process.
.PP
Callers of this function are expected to adhere to the semantics as set out in
.BR futex (7).
As these
semantics involve writing nonportable assembly instructions, this in turn
probably means that most users will in fact be library authors and not
general application developers.
.PP
The
.I uaddr
argument needs to point to an aligned integer which stores the counter.
The operation to execute is passed via the
.I op
argument, along with a value
.IR val .
.PP
Five operations are currently defined:
.TP
.B FUTEX_WAIT
This operation atomically verifies that the futex address
.I uaddr
still contains the value
.IR val ,
and sleeps awaiting
.B FUTEX_WAKE
on this futex address.
If the
.I timeout
argument is non-NULL, its contents specify the duration of the wait.
(This interval will be rounded up to the system clock granularity,
and kernel scheduling delays mean that the
blocking interval may overrun by a small amount.)
If
.I timeout
is NULL, the call blocks indefinitely.
The arguments
.I uaddr2
and
.I val3
are ignored.

For
.BR futex (7),
this call is executed if decrementing the count gave a negative value
(indicating contention), and will sleep until another process releases
the futex and executes the
.B FUTEX_WAKE
operation.
.TP
.B FUTEX_WAKE
This operation wakes at most \fIval\fP
processes waiting on this futex address (i.e., inside
.BR FUTEX_WAIT ).
The arguments
.IR timeout ,
.I uaddr2
and
.I val3
are ignored.

For
.BR futex (7),
this is executed if incrementing
the count showed that there were waiters, once the futex value has been set
to 1 (indicating that it is available).
.TP
.BR FUTEX_FD " (present up to and including Linux 2.6.25)"
To support asynchronous wakeups, this operation associates a file descriptor
with a futex.
.\" , suitable for .BR poll (2).
If another process executes a
.BR FUTEX_WAKE ,
the process will receive the signal number that was passed in
.IR val .
The calling process must close the returned file descriptor after use.
The arguments
.IR timeout ,
.I uaddr2
and
.I val3
are ignored.

To prevent race conditions, the caller should test if the futex has
been upped after
.B FUTEX_FD
returns.

Because it was inherently racy,
.B FUTEX_FD
has been removed from Linux 2.6.26 onward.
.TP
.BR FUTEX_REQUEUE " (since Linux 2.5.70)"
This operation was introduced in order to avoid a "thundering herd" effect
when
.B FUTEX_WAKE
is used and all processes woken up need to acquire another futex.
This call wakes up
.I val
processes, and requeues all other waiters on the futex at address
.IR uaddr2 .
The arguments
.I timeout
and
.I val3
are ignored.
.TP
.BR FUTEX_CMP_REQUEUE " (since Linux 2.6.7)"
There was a race in the intended use of
.BR FUTEX_REQUEUE ,
so
.B FUTEX_CMP_REQUEUE
was introduced.
This is similar to
.BR FUTEX_REQUEUE ,
but first checks whether the location
.I uaddr
still contains the value
.IR val3 .
If not, the operation fails with the error
.BR EAGAIN .
The argument
.I timeout
is ignored.
.SH RETURN VALUE
.PP
In the event of an error, all operations return \-1, and set
.I errno
to indicate the error.
The return value on success depends on the operation,
as described in the following list:
.TP
.B FUTEX_WAIT
Returns 0 if the process was woken by a
.B FUTEX_WAKE
call.
See ERRORS for the various possible error returns.
.TP
.B FUTEX_WAKE
Returns the number of processes woken up.
.TP
.B FUTEX_FD
Returns the new file descriptor associated with the futex.
.TP
.B FUTEX_REQUEUE
Returns the number of processes woken up.
.TP
.B FUTEX_CMP_REQUEUE
Returns the number of processes woken up.
.SH ERRORS
.TP
.B EACCES
No read access to futex memory.
.TP
.B EAGAIN
.B FUTEX_CMP_REQUEUE
detected that the value pointed to by
.I uaddr
is not equal to the expected value
.IR val3 .
(This probably indicates a race;
use the safe
.B FUTEX_WAKE
now.)
.TP
.B EFAULT
Error retrieving
.I timeout
information from user space.
.TP
.B EINTR
A
.B FUTEX_WAIT
operation was interrupted by a signal (see
.BR signal (7))
or a spurious wakeup.
.TP
.B EINVAL
Invalid argument.
.TP
.B ENFILE
The system limit on the total number of open files has been reached.
.TP
.B ENOSYS
Invalid operation specified in
.IR op .
.TP
.B ETIMEDOUT
Timeout during the
.B FUTEX_WAIT
operation.
.TP
.B EWOULDBLOCK
.I op
was
.BR FUTEX_WAIT
and the value pointed to by
.I uaddr
was not equal to the expected value
.I val
at the time of the call.
.SH VERSIONS
.PP
Initial futex support was merged in Linux 2.5.7 but with different semantics
from what was described above.
A 4-argument system call with the semantics
described in this page was introduced in Linux 2.5.40.
In Linux 2.5.70, one argument
was added.
In Linux 2.6.7, a sixth argument was added\(emmessy, especially
on the s390 architecture.
.SH CONFORMING TO
This system call is Linux-specific.
.SH NOTES
.PP
To reiterate, bare futexes are not intended as an easy-to-use abstraction
for end-users.
(There is no wrapper function for this system call in glibc.)
Implementors are expected to be assembly literate and to have
read the sources of the futex user-space library referenced below.
.\" .SH AUTHORS
.\" .PP
.\" Futexes were designed and worked on by
.\" Hubertus Franke (IBM Thomas J. Watson Research Center),
.\" Matthew Kirkwood, Ingo Molnar (Red Hat)
.\" and Rusty Russell (IBM Linux Technology Center).
.\" This page written by bert hubert.
.SH SEE ALSO
.BR restart_syscall (2),
.BR futex (7)
.PP
\fIFuss, Futexes and Furwocks: Fast Userlevel Locking in Linux\fP
(proceedings of the Ottawa Linux Symposium 2002), online at
.br
.UR http://kernel.org\:/doc\:/ols\:/2002\:/ols2002-pages-479-495.pdf
.UE
.PP
Futex example library, futex-*.tar.bz2 at
.br
.UR ftp://ftp.kernel.org\:/pub\:/linux\:/kernel\:/people\:/rusty/
.UE
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" This manpage is Copyright (C) 2006, Michael Kerrisk
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH FUTIMESAT 2 2012-05-10 "Linux" "Linux Programmer's Manual"
.SH NAME
futimesat \- change timestamps of a file relative to a \
directory file descriptor
.SH SYNOPSIS
.nf
.B #include <fcntl.h>           /* Definition of AT_* constants */
.B #include <sys/time.h>
.sp
.BI "int futimesat(int " dirfd ", const char *" pathname ,
.BI "              const struct timeval " times [2]);
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR futimesat ():
_GNU_SOURCE
.SH DESCRIPTION
This system call is obsolete.
Use
.BR utimensat (2)
instead.

The
.BR futimesat ()
system call operates in exactly the same way as
.BR utimes (2),
except for the differences described in this manual page.

If the pathname given in
.I pathname
is relative, then it is interpreted relative to the directory
referred to by the file descriptor
.I dirfd
(rather than relative to the current working directory of
the calling process, as is done by
.BR utimes (2)
for a relative pathname).

If
.I pathname
is relative and
.I dirfd
is the special value
.BR AT_FDCWD ,
then
.I pathname
is interpreted relative to the current working
directory of the calling process (like
.BR utimes (2)).

If
.I pathname
is absolute, then
.I dirfd
is ignored.
.SH RETURN VALUE
On success,
.BR futimesat ()
returns a 0.
On error, \-1 is returned and
.I errno
is set to indicate the error.
.SH ERRORS
The same errors that occur for
.BR utimes (2)
can also occur for
.BR futimesat ().
The following additional errors can occur for
.BR futimesat ():
.TP
.B EBADF
.I dirfd
is not a valid file descriptor.
.TP
.B ENOTDIR
.I pathname
is relative and
.I dirfd
is a file descriptor referring to a file other than a directory.
.SH VERSIONS
.BR futimesat ()
was added to Linux in kernel 2.6.16;
library support was added to glibc in version 2.4.
.SH CONFORMING TO
This system call is nonstandard.
It was implemented from a specification that was proposed for POSIX.1,
but that specification was replaced by the one for
.BR utimensat (2).

A similar system call exists on Solaris.
.SH NOTES
.SS Glibc notes
If
.I pathname
is NULL, then the glibc
.BR futimesat ()
wrapper function updates the times for the file referred to by
.IR dirfd .
.\" The Solaris futimesat() also has this strangeness.
.SH SEE ALSO
.BR stat (2),
.BR utimensat (2),
.BR utimes (2),
.BR futimes (3),
.BR path_resolution (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" This man page is Copyright (C) 2006 Andi Kleen <ak@muc.de>.
.\"
.\" %%%LICENSE_START(VERBATIM_ONE_PARA)
.\" Permission is granted to distribute possibly modified copies
.\" of this page provided the header is included verbatim,
.\" and in case of nontrivial modification author and date
.\" of the modification is added to the header.
.\" %%%LICENSE_END
.\"
.\" 2008, mtk, various edits
.\"
.TH GETCPU 2 2013-04-03 "Linux" "Linux Programmer's Manual"
.SH NAME
getcpu \- determine CPU and NUMA node on which the calling thread is running
.SH SYNOPSIS
.nf
.B #include <linux/getcpu.h>
.sp
.BI "int getcpu(unsigned *" cpu ", unsigned *" node \
", struct getcpu_cache *" tcache );
.fi

.IR Note :
There is no glibc wrapper for this system call; see NOTES.
.SH DESCRIPTION
The
.BR getcpu ()
system call identifies the processor and node on which the calling
thread or process is currently running and writes them into the
integers pointed to by the
.I cpu
and
.I node
arguments.
The processor is a unique small integer identifying a CPU.
The node is a unique small identifier identifying a NUMA node.
When either
.I cpu
or
.I node
is NULL nothing is written to the respective pointer.

The third argument to this system call is nowadays unused,
and should be specified as NULL
unless portability to Linux 2.6.23 or earlier is required (see NOTES).

The information placed in
.I cpu
is guaranteed to be current only at the time of the call:
unless the CPU affinity has been fixed using
.BR sched_setaffinity (2),
the kernel might change the CPU at any time.
(Normally this does not happen
because the scheduler tries to minimize movements between CPUs to
keep caches hot, but it is possible.)
The caller must allow for the possibility that the information returned in
.I cpu
and
.I node
is no longer current by the time the call returns.
.SH RETURN VALUE
On success, 0 is returned.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EFAULT
Arguments point outside the calling process's address space.
.SH VERSIONS
.BR getcpu ()
was added in kernel 2.6.19 for x86_64 and i386.
.SH CONFORMING TO
.BR getcpu ()
is Linux-specific.
.SH NOTES
Linux makes a best effort to make this call as fast as possible.
The intention of
.BR getcpu ()
is to allow programs to make optimizations with per-CPU data
or for NUMA optimization.

Glibc does not provide a wrapper for this system call; call it using
.BR syscall (2);
or use
.BR sched_getcpu (3)
instead.

The
.I tcache
argument is unused since Linux 2.6.24.
.\" commit 4307d1e5ada595c87f9a4d16db16ba5edb70dcb1
.\" Author: Ingo Molnar <mingo@elte.hu>
.\" Date:   Wed Nov 7 18:37:48 2007 +0100
.\" x86: ignore the sys_getcpu() tcache parameter
In earlier kernels,
if this argument was non-NULL,
then it specified a pointer to a caller-allocated buffer in thread-local
storage that was used to provide a caching mechanism for
.BR getcpu ().
Use of the cache could speed
.BR getcpu ()
calls, at the cost that there was a very small chance that
the returned information would be out of date.
The caching mechanism was considered to cause problems when
migrating threads between CPUs, and so the argument is now ignored.
.\"
.\" ===== Before kernel 2.6.24: =====
.\" .I tcache
.\" is a pointer to a
.\" .IR "struct getcpu_cache"
.\" that is used as a cache by
.\" .BR getcpu ().
.\" The caller should put the cache into a thread-local variable
.\" if the process is multithreaded,
.\" because the cache cannot be shared between different threads.
.\" .I tcache
.\" can be NULL.
.\" If it is not NULL
.\" .BR getcpu ()
.\" will use it to speed up operation.
.\" The information inside the cache is private to the system call
.\" and should not be accessed by the user program.
.\" The information placed in the cache can change between kernel releases.
.\"
.\" When no cache is specified
.\" .BR getcpu ()
.\" will be slower,
.\" but always retrieve the current CPU and node information.
.\" With a cache
.\" .BR getcpu ()
.\" is faster.
.\" However, the cached information is updated only once per jiffy (see
.\" .BR time (7)).
.\" This means that the information could theoretically be out of date,
.\" although in practice the scheduler's attempt to maintain
.\" soft CPU affinity means that the information is unlikely to change
.\" over the course of the caching interval.
.SH SEE ALSO
.BR mbind (2),
.BR sched_setaffinity (2),
.BR set_mempolicy (2),
.BR sched_getcpu (3),
.BR cpuset (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 1995 Andries Brouwer (aeb@cwi.nl)
.\" and Copyright 2008, 2015 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Written 11 June 1995 by Andries Brouwer <aeb@cwi.nl>
.\" Modified 22 July 1995 by Michael Chastain <mec@duracef.shout.net>:
.\"   Derived from 'readdir.2'.
.\" Modified Tue Oct 22 08:11:14 EDT 1996 by Eric S. Raymond <esr@thyrsus.com>
.\"
.TH GETDENTS 2  2015-04-12 "Linux" "Linux Programmer's Manual"
.SH NAME
getdents, getdents64 \- get directory entries
.SH SYNOPSIS
.nf
.BI "int getdents(unsigned int " fd ", struct linux_dirent *" dirp ,
.BI "             unsigned int " count );
.BI "int getdents64(unsigned int " fd ", struct linux_dirent64 *" dirp ,
.BI "             unsigned int " count );
.fi

.IR Note :
There are no glibc wrappers for these system calls; see NOTES.
.SH DESCRIPTION
These are not the interfaces you are interested in.
Look at
.BR readdir (3)
for the POSIX-conforming C library interface.
This page documents the bare kernel system call interfaces.
.SS getdents()
The system call
.BR getdents ()
reads several
.I linux_dirent
structures from the directory
referred to by the open file descriptor
.I fd
into the buffer pointed to by
.IR dirp .
The argument
.I count
specifies the size of that buffer.
.PP
The
.I linux_dirent
structure is declared as follows:
.PP
.in +4n
.nf
struct linux_dirent {
    unsigned long  d_ino;     /* Inode number */
    unsigned long  d_off;     /* Offset to next \fIlinux_dirent\fP */
    unsigned short d_reclen;  /* Length of this \fIlinux_dirent\fP */
    char           d_name[];  /* Filename (null-terminated) */
                      /* length is actually (d_reclen \- 2 \-
                         offsetof(struct linux_dirent, d_name)) */
    /*
    char           pad;       // Zero padding byte
    char           d_type;    // File type (only since Linux
                              // 2.6.4); offset is (d_reclen \- 1)
    */
}
.fi
.in
.PP
.I d_ino
is an inode number.
.I d_off
is the distance from the start of the directory to the start of the next
.IR linux_dirent .
.I d_reclen
is the size of this entire
.IR linux_dirent .
.I d_name
is a null-terminated filename.

.I d_type
is a byte at the end of the structure that indicates the file type.
It contains one of the following values (defined in
.IR <dirent.h> ):
.TP 12
.B DT_BLK
This is a block device.
.TP
.B DT_CHR
This is a character device.
.TP
.B DT_DIR
This is a directory.
.TP
.B DT_FIFO
This is a named pipe (FIFO).
.TP
.B DT_LNK
This is a symbolic link.
.TP
.B DT_REG
This is a regular file.
.TP
.B DT_SOCK
This is a UNIX domain socket.
.TP
.B DT_UNKNOWN
The file type is unknown.
.PP
The
.I d_type
field is implemented since Linux 2.6.4.
It occupies a space that was previously a zero-filled padding byte in the
.IR linux_dirent
structure.
Thus, on kernels up to and including 2.6.3,
attempting to access this field always provides the value 0
.RB ( DT_UNKNOWN ).
.PP
Currently,
.\" kernel 2.6.27
.\" The same sentence is in readdir.2
only some filesystems (among them: Btrfs, ext2, ext3, and ext4)
have full support for returning the file type in
.IR d_type .
All applications must properly handle a return of
.BR DT_UNKNOWN .
.SS getdents64()
The original Linux
.BR getdents ()
system call did not handle large filesystems and large file offsets.
Consequently, Linux 2.4 added
.BR getdents64 (),
with wider types for the
.I d_ino
and
.I d_off
fields.
In addition,
.BR getdents64 ()
supports an explicit
.I d_type
field.

The
.BR getdents64 ()
system call is like
.BR getdents (),
except that its second argument is a pointer to a buffer containing
structures of the following type:

.nf
.in +4n
struct linux_dirent64 {
    ino64_t        d_ino;    /* 64-bit inode number */
    off64_t        d_off;    /* 64-bit offset to next structure */
    unsigned short d_reclen; /* Size of this dirent */
    unsigned char  d_type;   /* File type */
    char           d_name[]; /* Filename (null-terminated) */
};
.in
.fi
.SH RETURN VALUE
On success, the number of bytes read is returned.
On end of directory, 0 is returned.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EBADF
Invalid file descriptor
.IR fd .
.TP
.B EFAULT
Argument points outside the calling process's address space.
.TP
.B EINVAL
Result buffer is too small.
.TP
.B ENOENT
No such directory.
.TP
.B ENOTDIR
File descriptor does not refer to a directory.
.SH CONFORMING TO
SVr4.
.\" SVr4 documents additional ENOLINK, EIO error conditions.
.SH NOTES
Glibc does not provide a wrapper for these system calls; call them using
.BR syscall (2).
You will need to define the
.I linux_dirent
or
.I linux_dirent64
structure yourself.
However, you probably want to use
.BR readdir (3)
instead.

These calls supersede
.BR readdir (2).
.SH EXAMPLE
.\" FIXME The example program needs to be revised, since it uses the older
.\" getdents() system call and the structure with smaller field widths.
The program below demonstrates the use of
.BR getdents ().
The following output shows an example of what we see when running this
program on an ext2 directory:

.in +4n
.nf
.RB "$" " ./a.out /testfs/"
--------------- nread=120 ---------------
inode#    file type  d_reclen  d_off   d_name
       2  directory    16         12  .
       2  directory    16         24  ..
      11  directory    24         44  lost+found
      12  regular      16         56  a
  228929  directory    16         68  sub
   16353  directory    16         80  sub2
  130817  directory    16       4096  sub3
.fi
.in
.SS Program source
\&
.nf
#define _GNU_SOURCE
#include <dirent.h>     /* Defines DT_* constants */
#include <fcntl.h>
#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <sys/stat.h>
#include <sys/syscall.h>

#define handle_error(msg) \\
        do { perror(msg); exit(EXIT_FAILURE); } while (0)

struct linux_dirent {
    long           d_ino;
    off_t          d_off;
    unsigned short d_reclen;
    char           d_name[];
};

#define BUF_SIZE 1024

int
main(int argc, char *argv[])
{
    int fd, nread;
    char buf[BUF_SIZE];
    struct linux_dirent *d;
    int bpos;
    char d_type;

    fd = open(argc > 1 ? argv[1] : ".", O_RDONLY | O_DIRECTORY);
    if (fd == \-1)
        handle_error("open");

    for ( ; ; ) {
        nread = syscall(SYS_getdents, fd, buf, BUF_SIZE);
        if (nread == \-1)
            handle_error("getdents");

        if (nread == 0)
            break;

        printf("\-\-\-\-\-\-\-\-\-\-\-\-\-\-\- nread=%d \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\\n", nread);
        printf("inode#    file type  d_reclen  d_off   d_name\\n");
        for (bpos = 0; bpos < nread;) {
            d = (struct linux_dirent *) (buf + bpos);
            printf("%8ld  ", d\->d_ino);
            d_type = *(buf + bpos + d\->d_reclen \- 1);
            printf("%\-10s ", (d_type == DT_REG) ?  "regular" :
                             (d_type == DT_DIR) ?  "directory" :
                             (d_type == DT_FIFO) ? "FIFO" :
                             (d_type == DT_SOCK) ? "socket" :
                             (d_type == DT_LNK) ?  "symlink" :
                             (d_type == DT_BLK) ?  "block dev" :
                             (d_type == DT_CHR) ?  "char dev" : "???");
            printf("%4d %10lld  %s\\n", d\->d_reclen,
                    (long long) d\->d_off, d\->d_name);
            bpos += d\->d_reclen;
        }
    }

    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR readdir (2),
.BR readdir (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 Rickard E. Faith (faith@cs.unc.edu)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified 1997-08-25 by Nicolás Lichtmaier <nick@debian.org>
.\" Modified 2004-06-17 by Michael Kerrisk <mtk.manpages@gmail.com>
.\" Modified 2008-11-27 by mtk
.\"
.TH GETDOMAINNAME 2 2012-10-25 "Linux" "Linux Programmer's Manual"
.SH NAME
getdomainname, setdomainname \- get/set NIS domain name
.SH SYNOPSIS
.B #include <unistd.h>
.sp
.BI "int getdomainname(char *" name ", size_t " len );
.br
.BI "int setdomainname(const char *" name ", size_t " len );
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR getdomainname (),
.BR setdomainname ():
.RS 4
_BSD_SOURCE || (_XOPEN_SOURCE && _XOPEN_SOURCE\ <\ 500)
.RE
.ad
.SH DESCRIPTION
These functions are used to access or to change the NIS domain name of the
host system.

.BR setdomainname ()
sets the domain name to the value given in the character array
.IR name .
The
.I len
argument specifies the number of bytes in
.IR name .
(Thus,
.I name
does not require a terminating null byte.)

.BR getdomainname ()
returns the null-terminated domain name in the character array
.IR name ,
which has a length of
.I len
bytes.
If the null-terminated domain name requires more than \fIlen\fP bytes,
.BR getdomainname ()
returns the first \fIlen\fP bytes (glibc) or gives an error (libc).
.SH RETURN VALUE
On success, zero is returned.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.BR setdomainname ()
can fail with the following errors:
.TP
.B EFAULT
.I name
pointed outside of user address space.
.TP
.B EINVAL
.I len
was negative or too large.
.TP
.B EPERM
the caller is unprivileged (Linux: does not have the
.B CAP_SYS_ADMIN
capability).
.PP
.BR getdomainname ()
can fail with the following errors:
.TP
.B EINVAL
For
.BR getdomainname ()
under libc:
.I name
is NULL or
.I name
is longer than
.I len
bytes.
.SH CONFORMING TO
POSIX does not specify these calls.
.\" But they appear on most systems...
.SH NOTES
Since Linux 1.0, the limit on the length of a domain name,
including the terminating null byte, is 64 bytes.
In older kernels, it was 8 bytes.

On most Linux architectures (including x86),
there is no
.BR getdomainname ()
system call; instead, glibc implements
.BR getdomainname ()
as a library function that returns a copy of the
.I domainname
field returned from a call to
.BR uname (2).
.SH SEE ALSO
.BR gethostname (2),
.BR sethostname (2),
.BR uname (2)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 Rickard E. Faith (faith@cs.unc.edu)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH GETGID 2 2010-11-22 "Linux" "Linux Programmer's Manual"
.SH NAME
getgid, getegid \- get group identity
.SH SYNOPSIS
.B #include <unistd.h>
.br
.B #include <sys/types.h>
.sp
.B gid_t getgid(void);
.br
.B gid_t getegid(void);
.SH DESCRIPTION
.BR getgid ()
returns the real group ID of the calling process.

.BR getegid ()
returns the effective group ID of the calling process.
.SH ERRORS
These functions are always successful.
.SH CONFORMING TO
POSIX.1-2001, 4.3BSD.
.SH NOTES
The original Linux
.BR getgid ()
and
.BR getegid ()
system calls supported only 16-bit group IDs.
Subsequently, Linux 2.4 added
.BR getgid32 ()
and
.BR getegid32 (),
supporting 32-bit IDs.
The glibc
.BR getgid ()
and
.BR getegid ()
wrapper functions transparently deal with the variations across kernel versions.
.SH SEE ALSO
.BR getresgid (2),
.BR setgid (2),
.BR setregid (2),
.BR credentials (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 Rickard E. Faith (faith@cs.unc.edu)
.\" and Copyright (C) 2008, 2010, 2015, Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified Thu Oct 31 12:04:29 1996 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified, 27 May 2004, Michael Kerrisk <mtk.manpages@gmail.com>
.\"     Added notes on capability requirements
.\" 2008-05-03, mtk, expanded and rewrote parts of DESCRIPTION and RETURN
.\"     VALUE, made style of page more consistent with man-pages style.
.\"
.TH GETGROUPS 2 2015-03-29 "Linux" "Linux Programmer's Manual"
.SH NAME
getgroups, setgroups \- get/set list of supplementary group IDs
.SH SYNOPSIS
.B #include <sys/types.h>
.br
.B #include <unistd.h>
.sp
.BI "int getgroups(int " size ", gid_t " list []);
.sp
.B #include <grp.h>
.sp
.BI "int setgroups(size_t " size ", const gid_t *" list );
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR setgroups ():
_BSD_SOURCE
.SH DESCRIPTION
.PP
.BR getgroups ()
returns the supplementary group IDs of the calling process in
.IR list .
The argument
.I size
should be set to the maximum number of items that can be stored in the
buffer pointed to by
.IR list .
If the calling process is a member of more than
.I size
supplementary groups, then an error results.
It is unspecified whether the effective group ID of the calling process
is included in the returned list.
(Thus, an application should also call
.BR getegid (2)
and add or remove the resulting value.)

If
.I size
is zero,
.I list
is not modified, but the total number of supplementary group IDs for the
process is returned.
This allows the caller to determine the size of a dynamically allocated
.I list
to be used in a further call to
.BR getgroups ().
.PP
.BR setgroups ()
sets the supplementary group IDs for the calling process.
Appropriate privileges (Linux: the
.B CAP_SETGID
capability) are required.
The
.I size
argument specifies the number of supplementary group IDs
in the buffer pointed to by
.IR list .
.SH RETURN VALUE
On success,
.BR getgroups ()
returns the number of supplementary group IDs.
On error, \-1 is returned, and
.I errno
is set appropriately.

On success,
.BR setgroups ()
returns 0.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EFAULT
.I list
has an invalid address.
.PP
.BR getgroups ()
can additionally fail with the following error:
.TP
.B EINVAL
.I size
is less than the number of supplementary group IDs, but is not zero.
.PP
.BR setgroups ()
can additionally fail with the following errors:
.TP
.B EINVAL
.I size
is greater than
.B NGROUPS_MAX
(32 before Linux 2.6.4; 65536 since Linux 2.6.4).
.TP
.B ENOMEM
Out of memory.
.TP
.B EPERM
The calling process has insufficient privilege
(it does not have the
.BR CAP_SETGID
capability).
.TP
.BR EPERM " (since Linux 3.19)"
The use of
.BR setgroups ()
is denied in this user namespace.
See the description of
.IR /proc/[pid]/setgroups
in
.BR user_namespaces (7).
.SH CONFORMING TO
SVr4, 4.3BSD.
The
.BR getgroups ()
function is in POSIX.1-2001.
Since
.BR setgroups ()
requires privilege, it is not covered by POSIX.1-2001.
.SH NOTES
A process can have up to
.B NGROUPS_MAX
supplementary group IDs
in addition to the effective group ID.
The constant
.B NGROUPS_MAX
is defined in
.IR <limits.h> .
The set of supplementary group IDs
is inherited from the parent process, and preserved across an
.BR execve (2).

The maximum number of supplementary group IDs can be found at run time using
.BR sysconf (3):
.nf

    long ngroups_max;
    ngroups_max = sysconf(_SC_NGROUPS_MAX);

.fi
The maximum return value of
.BR getgroups ()
cannot be larger than one more than this value.
Since Linux 2.6.4, the maximum number of supplementary group IDs is also
exposed via the Linux-specific read-only file,
.IR /proc/sys/kernel/ngroups_max .

The original Linux
.BR getgroups ()
system call supported only 16-bit group IDs.
Subsequently, Linux 2.4 added
.BR getgroups32 (),
supporting 32-bit IDs.
The glibc
.BR getgroups ()
wrapper function transparently deals with the variation across kernel versions.
.\"
.SS C library/kernel ABI differences
At the kernel level, user IDs and group IDs are a per-thread attribute.
However, POSIX requires that all threads in a process
share the same credentials.
The NPTL threading implementation handles the POSIX requirements by
providing wrapper functions for
the various system calls that change process UIDs and GIDs.
These wrapper functions (including the one for
.BR setgroups ())
employ a signal-based technique to ensure
that when one thread changes credentials,
all of the other threads in the process also change their credentials.
For details, see
.BR nptl (7).
.SH SEE ALSO
.BR getgid (2),
.BR setgid (2),
.BR getgrouplist (3),
.BR group_member (3),
.BR initgroups (3),
.BR capabilities (7),
.BR credentials (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 Rickard E. Faith (faith@cs.unc.edu)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified 1995-07-22 by Michael Chastain <mec@duracef.shout.net>:
.\"   'gethostname' is real system call on Linux/Alpha.
.\" Modified 1997-01-31 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified 2000-06-04, 2001-12-15 by aeb
.\" Modified 2004-06-17 by mtk
.\" Modified 2008-11-27 by mtk
.\"
.TH GETHOSTNAME 2 2014-08-19 "Linux" "Linux Programmer's Manual"
.SH NAME
gethostname, sethostname \- get/set hostname
.SH SYNOPSIS
.B #include <unistd.h>
.sp
.BI "int gethostname(char *" name ", size_t " len );
.br
.BI "int sethostname(const char *" name ", size_t " len );
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.PD 0
.BR gethostname ():
.RS 4
Since glibc 2.12:
_BSD_SOURCE || _XOPEN_SOURCE\ >=\ 500
.br
|| /* Since glibc 2.12: */ _POSIX_C_SOURCE\ >=\ 200112L
.RE
.br
.BR sethostname ():
.RS 4
_BSD_SOURCE || (_XOPEN_SOURCE && _XOPEN_SOURCE\ <\ 500)
.RE
.PD
.ad
.SH DESCRIPTION
These system calls are used to access or to change the hostname of the
current processor.

.BR sethostname ()
sets the hostname to the value given in the character array
.IR name .
The
.I len
argument specifies the number of bytes in
.IR name .
(Thus,
.I name
does not require a terminating null byte.)

.BR gethostname ()
returns the null-terminated hostname in the character array
.IR name ,
which has a length of
.I len
bytes.
If the null-terminated hostname is too large to fit,
then the name is truncated, and no error is returned (but see NOTES below).
POSIX.1-2001 says that if such truncation occurs,
then it is unspecified whether the returned buffer
includes a terminating null byte.
.SH RETURN VALUE
On success, zero is returned.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EFAULT
.I name
is an invalid address.
.TP
.B EINVAL
.I len
is negative
.\" Can't occur for gethostbyname() wrapper, since 'len' has an
.\" unsigned type; can occur for the underlying system call.
or, for
.BR sethostname (),
.I len
is larger than the maximum allowed size.
.TP
.B ENAMETOOLONG
.RB "(glibc " gethostname ())
.I len
is smaller than the actual size.
(Before version 2.1, glibc uses
.BR EINVAL
for this case.)
.TP
.B EPERM
For
.BR sethostname (),
the caller did not have the
.B CAP_SYS_ADMIN
capability.
.SH CONFORMING TO
SVr4, 4.4BSD  (these interfaces first appeared in 4.2BSD).
POSIX.1-2001 specifies
.BR gethostname ()
but not
.BR sethostname ().
.SH NOTES
SUSv2 guarantees that "Host names are limited to 255 bytes".
POSIX.1-2001 guarantees that "Host names (not including
the terminating null byte) are limited to
.B HOST_NAME_MAX
bytes".
On Linux,
.B HOST_NAME_MAX
is defined with the value 64, which has been the limit since Linux 1.0
(earlier kernels imposed a limit of 8 bytes).
.SS C library/kernel ABI differences
The GNU C library does not employ the
.BR gethostname ()
system call; instead, it implements
.BR gethostname ()
as a library function that calls
.BR uname (2)
and copies up to
.I len
bytes from the returned
.I nodename
field into
.IR name .
Having performed the copy, the function then checks if the length of the
.I nodename
was greater than or equal to
.IR len ,
and if it is, then the function returns \-1 with
.I errno
set to
.BR ENAMETOOLONG ;
in this case, a terminating null byte is not included in the returned
.IR name .

Versions of glibc before 2.2
.\" At least glibc 2.0 and 2.1, older versions not checked
handle the case where the length of the
.I nodename
was greater than or equal to
.I len
differently: nothing is copied into
.I name
and the function returns \-1 with
.I errno
set to
.BR ENAMETOOLONG .
.SH SEE ALSO
.BR getdomainname (2),
.BR setdomainname (2),
.BR uname (2)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 7/93 by Darren Senn <sinster@scintilla.santa-clara.ca.us>
.\" Based on a similar page Copyright 1992 by Rick Faith
.\"
.\" %%%LICENSE_START(FREELY_REDISTRIBUTABLE)
.\" May be freely distributed
.\" %%%LICENSE_END
.\"
.\" Modified Tue Oct 22 00:22:35 EDT 1996 by Eric S. Raymond <esr@thyrsus.com>
.\" 2005-04-06 mtk, Matthias Lang <matthias@corelatus.se>
.\" 	Noted MAX_SEC_IN_JIFFIES ceiling
.\"
.TH GETITIMER 2 2014-07-08 "Linux" "Linux Programmer's Manual"
.SH NAME
getitimer, setitimer \- get or set value of an interval timer
.SH SYNOPSIS
.nf
.B #include <sys/time.h>
.sp
.BI "int getitimer(int " which ", struct itimerval *" curr_value );
.br
.BI "int setitimer(int " which ", const struct itimerval *" new_value ,
.BI "              struct itimerval *" old_value );
.fi
.SH DESCRIPTION
The system provides each process with three interval timers,
each decrementing in a distinct time domain.
When a timer expires, a signal is sent to the
process, and the timer is reset to the specified interval (if nonzero).
.TP 1.5i
.B ITIMER_REAL
decrements in real time, and delivers
.B SIGALRM
upon expiration.
.TP
.B ITIMER_VIRTUAL
decrements only when the process is executing, and delivers
.B SIGVTALRM
upon expiration.
.TP
.B ITIMER_PROF
decrements both when the process executes and when the system is executing
on behalf of the process.
Coupled with
.BR ITIMER_VIRTUAL ,
this timer is usually used to profile the time spent by the
application in user and kernel space.
.B SIGPROF
is delivered upon expiration.
.LP
Timer values are defined by the following structures:
.PD 0
.in +4n
.nf

struct itimerval {
    struct timeval it_interval; /* Interval for periodic timer */
    struct timeval it_value;    /* Time until next expiration */
};

struct timeval {
    time_t      tv_sec;         /* seconds */
    suseconds_t tv_usec;        /* microseconds */
};
.fi
.in
.PD
.LP
The function
.BR getitimer ()
fills the structure pointed to by
.I curr_value
with the current value
(i.e., the amount of time remaining until the next expiration)
of the timer specified by
.I which
(one of
.BR ITIMER_REAL ,
.BR ITIMER_VIRTUAL ,
or
.BR ITIMER_PROF ).
The subfields of the field
.I it_value
are set to the amount of time remaining on the timer, or zero if the timer
is disabled.
The
.I it_interval
field is set to the timer interval (period);
a value of zero returned in (both subfields of) this field indicates
that this is a single-shot timer.

The function
.BR setitimer ()
sets the specified timer to the value in
.IR new_value .
If
.I old_value
is non-NULL, the old value of the timer
(i.e., the same information as returned by
.BR getitimer ())
is stored there.
.LP
Timers decrement from
.I it_value
to zero, generate a signal, and reset to
.IR it_interval .
A timer which is set to zero
.RI ( it_value
is zero or the timer expires and
.I it_interval
is zero) stops.
.LP
Both
.I tv_sec
and
.I tv_usec
are significant in determining the duration of a timer.
.LP
Timers will never expire before the requested time,
but may expire some (short) time afterward, which depends
on the system timer resolution and on the system load; see
.BR time (7).
(But see BUGS below.)
Upon expiration, a signal will be generated and the timer reset.
If the timer expires while the process is active (always true for
.BR ITIMER_VIRTUAL ),
the signal will be delivered immediately when generated.
Otherwise, the
delivery will be offset by a small time dependent on the system loading.
.SH RETURN VALUE
On success, zero is returned.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EFAULT
.IR new_value ,
.IR old_value ,
or
.I curr_value
is not valid a pointer.
.TP
.B EINVAL
.I which
is not one of
.BR ITIMER_REAL ,
.BR ITIMER_VIRTUAL ,
or
.BR ITIMER_PROF ;
or (since Linux 2.6.22) one of the
.I tv_usec
fields in the structure pointed to by
.I new_value
contains a value outside the range 0 to 999999.
.SH CONFORMING TO
POSIX.1-2001, SVr4, 4.4BSD (this call first appeared in 4.2BSD).
POSIX.1-2008 marks
.BR getitimer ()
and
.BR setitimer ()
obsolete, recommending the use of the POSIX timers API
.RB ( timer_gettime (2),
.BR timer_settime (2),
etc.) instead.
.SH NOTES
A child created via
.BR fork (2)
does not inherit its parent's interval timers.
Interval timers are preserved across an
.BR execve (2).

POSIX.1 leaves the
interaction between
.BR setitimer ()
and the three interfaces
.BR alarm (2),
.BR sleep (3),
and
.BR usleep (3)
unspecified.

The standards are silent on the meaning of the call:

    setitimer(which, NULL, &old_value);

Many systems (Solaris, the BSDs, and perhaps others)
treat this as equivalent to:

    getitimer(which, &old_value);

In Linux, this is treated as being equivalent to a call in which the
.I new_value
fields are zero; that is, the timer is disabled.
.IR "Don't use this Linux misfeature" :
it is nonportable and unnecessary.
.SH BUGS
The generation and delivery of a signal are distinct, and
only one instance of each of the signals listed above may be pending
for a process.
Under very heavy loading, an
.B ITIMER_REAL
timer may expire before the signal from a previous expiration
has been delivered.
The second signal in such an event will be lost.

On Linux kernels before 2.6.16, timer values are represented in jiffies.
If a request is made set a timer with a value whose jiffies
representation exceeds
.B MAX_SEC_IN_JIFFIES
(defined in
.IR include/linux/jiffies.h ),
then the timer is silently truncated to this ceiling value.
On Linux/i386 (where, since Linux 2.6.13,
the default jiffy is 0.004 seconds),
this means that the ceiling value for a timer is
approximately 99.42 days.
Since Linux 2.6.16,
the kernel uses a different internal representation for times,
and this ceiling is removed.

On certain systems (including i386),
Linux kernels before version 2.6.12 have a bug which will produce
premature timer expirations of up to one jiffy under some circumstances.
This bug is fixed in kernel 2.6.12.
.\" 4 Jul 2005: It looks like this bug may remain in 2.4.x.
.\"	http://lkml.org/lkml/2005/7/1/165

POSIX.1-2001 says that
.BR setitimer ()
should fail if a
.I tv_usec
value is specified that is outside of the range 0 to 999999.
However, in kernels up to and including 2.6.21,
Linux does not give an error, but instead silently
adjusts the corresponding seconds value for the timer.
From kernel 2.6.22 onward,
this nonconformance has been repaired:
an improper
.I tv_usec
value results in an
.B EINVAL
error.
.\" Bugzilla report 25 Apr 2006:
.\" http://bugzilla.kernel.org/show_bug.cgi?id=6443
.\" "setitimer() should reject noncanonical arguments"
.SH SEE ALSO
.BR gettimeofday (2),
.BR sigaction (2),
.BR signal (2),
.BR timer_create (2),
.BR timerfd_create (2),
.BR time (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 1996 Free Software Foundation, Inc.
.\"
.\" %%%LICENSE_START(GPL_NOVERSION_ONELINE)
.\" This file is distributed according to the GNU General Public License.
.\" %%%LICENSE_END
.\"
.\" 2006-02-09, some reformatting by Luc Van Oostenryck; some
.\" reformatting and rewordings by mtk
.\"
.TH GET_KERNEL_SYMS 2 2012-10-18 "Linux" "Linux Programmer's Manual"
.SH NAME
get_kernel_syms \- retrieve exported kernel and module symbols
.SH SYNOPSIS
.nf
.B #include <linux/module.h>
.sp
.BI "int get_kernel_syms(struct kernel_sym *" table );
.fi
.SH DESCRIPTION
.BR Note :
This system call is present only in kernels before Linux 2.6.

If
.I table
is NULL,
.BR get_kernel_syms ()
returns the number of symbols available for query.
Otherwise, it fills in a table of structures:
.PP
.in +4n
.nf
struct kernel_sym {
    unsigned long value;
    char          name[60];
};
.fi
.in
.PP
The symbols are interspersed with magic symbols of the form
.BI # module-name
with the kernel having an empty name.
The value associated with a symbol of this form is the address at
which the module is loaded.
.PP
The symbols exported from each module follow their magic module tag
and the modules are returned in the reverse of the
order in which they were loaded.
.SH RETURN VALUE
On success, returns the number of symbols copied to
.IR table .
On error, \-1 is returned and
.I errno
is set appropriately.
.SH ERRORS
There is only one possible error return:
.TP
.B ENOSYS
.BR get_kernel_syms ()
is not supported in this version of the kernel.
.SH VERSIONS
This system call is present on Linux only up until kernel 2.4;
it was removed in Linux 2.6.
.\" Removed in Linux 2.5.48
.SH CONFORMING TO
.BR get_kernel_syms ()
is Linux-specific.
.SH BUGS
There is no way to indicate the size of the buffer allocated for
.IR table .
If symbols have been added to the kernel since the
program queried for the symbol table size, memory will be corrupted.
.PP
The length of exported symbol names is limited to 59 characters.
.PP
Because of these limitations, this system call is deprecated in
favor of
.BR query_module (2)
(which is itself nowadays deprecated
in favor of other interfaces described on its manual page).
.SH SEE ALSO
.BR create_module (2),
.BR delete_module (2),
.BR init_module (2),
.BR query_module (2)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 2003,2004 Andi Kleen, SuSE Labs.
.\" and Copyright 2007 Lee Schermerhorn, Hewlett Packard
.\"
.\" %%%LICENSE_START(VERBATIM_PROF)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" 2006-02-03, mtk, substantial wording changes and other improvements
.\" 2007-08-27, Lee Schermerhorn <Lee.Schermerhorn@hp.com>
.\"     more precise specification of behavior.
.\"
.TH GET_MEMPOLICY 2 2015-05-07 Linux "Linux Programmer's Manual"
.SH NAME
get_mempolicy \- retrieve NUMA memory policy for a thread
.SH SYNOPSIS
.B "#include <numaif.h>"
.nf
.sp
.BI "int get_mempolicy(int *" mode ", unsigned long *" nodemask ,
.BI "                  unsigned long " maxnode ", unsigned long " addr ,
.BI "                  unsigned long " flags );
.sp
Link with \fI\-lnuma\fP.
.fi
.SH DESCRIPTION
.BR get_mempolicy ()
retrieves the NUMA policy of the calling thread or of a memory address,
depending on the setting of
.IR flags .

A NUMA machine has different
memory controllers with different distances to specific CPUs.
The memory policy defines from which node memory is allocated for
the thread.

If
.I flags
is specified as 0,
then information about the calling thread's default policy
(as set by
.BR set_mempolicy (2))
is returned.
The policy returned
.RI [ mode
and
.IR nodemask ]
may be used to restore the thread's policy to its state at
the time of the call to
.BR get_mempolicy ()
using
.BR set_mempolicy (2).

If
.I flags
specifies
.BR MPOL_F_MEMS_ALLOWED
(available since Linux 2.6.24), the
.I mode
argument is ignored and the set of nodes [memories] that the
thread is allowed to specify in subsequent calls to
.BR mbind (2)
or
.BR set_mempolicy (2)
[in the absence of any
.IR "mode flags" ]
is returned in
.IR nodemask .
It is not permitted to combine
.B MPOL_F_MEMS_ALLOWED
with either
.B MPOL_F_ADDR
or
.BR MPOL_F_NODE .

If
.I flags
specifies
.BR MPOL_F_ADDR ,
then information is returned about the policy governing the memory
address given in
.IR addr .
This policy may be different from the thread's default policy if
.BR mbind (2)
or one of the helper functions described in
.BR numa (3)
has been used to establish a policy for the memory range containing
.IR addr .

If the
.I mode
argument is not NULL, then
.BR get_mempolicy ()
will store the policy mode and any optional
.I "mode flags"
of the requested NUMA policy in the location pointed to by this argument.
If
.I nodemask
is not NULL, then the nodemask associated with the policy will be stored
in the location pointed to by this argument.
.I maxnode
specifies the number of node IDs
that can be stored into
.IR nodemask \(emthat
is, the maximum node ID plus one.
The value specified by
.I maxnode
is always rounded to a multiple of
.IR "sizeof(unsigned long)" .

If
.I flags
specifies both
.B MPOL_F_NODE
and
.BR MPOL_F_ADDR ,
.BR get_mempolicy ()
will return the node ID of the node on which the address
.I addr
is allocated into the location pointed to by
.IR mode .
If no page has yet been allocated for the specified address,
.BR get_mempolicy ()
will allocate a page as if the thread had performed a read
[load] access to that address, and return the ID of the node
where that page was allocated.

If
.I flags
specifies
.BR MPOL_F_NODE ,
but not
.BR MPOL_F_ADDR ,
and the thread's current policy is
.BR MPOL_INTERLEAVE ,
then
.BR get_mempolicy ()
will return in the location pointed to by a non-NULL
.I mode
argument,
the node ID of the next node that will be used for
interleaving of internal kernel pages allocated on behalf of the thread.
.\" Note:  code returns next interleave node via 'mode' argument -Lee Schermerhorn
These allocations include pages for memory-mapped files in
process memory ranges mapped using the
.BR mmap (2)
call with the
.B MAP_PRIVATE
flag for read accesses, and in memory ranges mapped with the
.B MAP_SHARED
flag for all accesses.

Other flag values are reserved.

For an overview of the possible policies see
.BR set_mempolicy (2).
.SH RETURN VALUE
On success,
.BR get_mempolicy ()
returns 0;
on error, \-1 is returned and
.I errno
is set to indicate the error.
.SH ERRORS
.TP
.B EFAULT
Part of all of the memory range specified by
.I nodemask
and
.I maxnode
points outside your accessible address space.
.TP
.B EINVAL
The value specified by
.I maxnode
is less than the number of node IDs supported by the system.
Or
.I flags
specified values other than
.B MPOL_F_NODE
or
.BR MPOL_F_ADDR ;
or
.I flags
specified
.B MPOL_F_ADDR
and
.I addr
is NULL,
or
.I flags
did not specify
.B MPOL_F_ADDR
and
.I addr
is not NULL.
Or,
.I flags
specified
.B MPOL_F_NODE
but not
.B MPOL_F_ADDR
and the current thread policy is not
.BR MPOL_INTERLEAVE .
Or,
.I flags
specified
.B MPOL_F_MEMS_ALLOWED
with either
.B MPOL_F_ADDR
or
.BR MPOL_F_NODE .
(And there are other
.B EINVAL
cases.)
.SH VERSIONS
The
.BR get_mempolicy ()
system call was added to the Linux kernel in version 2.6.7.
.SH CONFORMING TO
This system call is Linux-specific.
.SH NOTES
For information on library support, see
.BR numa (7).
.SH SEE ALSO
.BR getcpu (2),
.BR mbind (2),
.BR mmap (2),
.BR set_mempolicy (2),
.BR numa (3),
.BR numa (7),
.BR numactl (8)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2001 Andries Brouwer <aeb@cwi.nl>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH GETPAGESIZE 2 2014-08-19 "Linux" "Linux Programmer's Manual"
.SH NAME
getpagesize \- get memory page size
.SH SYNOPSIS
.B #include <unistd.h>
.sp
.B int getpagesize(void);
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR getpagesize ():
.ad l
.RS 4
.PD 0
.TP 4
Since glibc 2.12:
.nf
_BSD_SOURCE ||
    !(_POSIX_C_SOURCE\ >=\ 200112L || _XOPEN_SOURCE\ >=\ 600)
.TP 4
.fi
Before glibc 2.12:
_BSD_SOURCE || _XOPEN_SOURCE\ >=\ 500 ||
_XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED
.PD
.RE
.ad b
.SH DESCRIPTION
The function
.BR getpagesize ()
returns the number of bytes in a memory page,
where "page" is a fixed-length block,
the unit for memory allocation and file mapping performed by
.BR mmap (2).
.\" .SH HISTORY
.\" This call first appeared in 4.2BSD.
.SH CONFORMING TO
SVr4, 4.4BSD, SUSv2.
In SUSv2 the
.BR getpagesize ()
call is labeled LEGACY, and in POSIX.1-2001
it has been dropped;
HP-UX does not have this call.
.SH NOTES
Portable applications should employ
.I sysconf(_SC_PAGESIZE)
instead of
.BR getpagesize ():
.PP
.in +4n
.nf
#include <unistd.h>
long sz = sysconf(_SC_PAGESIZE);
.fi
.in

(Most systems allow the synonym
.B _SC_PAGE_SIZE
for
.BR _SC_PAGESIZE .)

Whether
.BR getpagesize ()
is present as a Linux system call depends on the architecture.
If it is, it returns the kernel symbol
.BR PAGE_SIZE ,
whose value depends on the architecture and machine model.
Generally, one uses binaries that are dependent on the architecture but not
on the machine model, in order to have a single binary
distribution per architecture.
This means that a user program
should not find
.B PAGE_SIZE
at compile time from a header file,
but use an actual system call, at least for those architectures
(like sun4) where this dependency exists.
Here glibc 2.0 fails because its
.BR getpagesize ()
returns a statically derived value, and does not use a system call.
Things are OK in glibc 2.1.
.SH SEE ALSO
.BR mmap (2),
.BR sysconf (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1983, 1991 The Regents of the University of California.
.\" All rights reserved.
.\"
.\" %%%LICENSE_START(BSD_4_CLAUSE_UCB)
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\" %%%LICENSE_END
.\"
.\"     @(#)getpeername.2	6.5 (Berkeley) 3/10/91
.\"
.\" Modified Sat Jul 24 16:37:50 1993 by Rik Faith <faith@cs.unc.edu>
.\" Modified Thu Jul 30 14:37:50 1993 by Martin Schulze <joey@debian.org>
.\" Modified Sun Mar 28 21:26:46 1999 by Andries Brouwer <aeb@cwi.nl>
.\" Modified 17 Jul 2002, Michael Kerrisk <mtk.manpages@gmail.com>
.\"	Added 'socket' to NAME, so that "man -k socket" will show this page.
.\"
.TH GETPEERNAME 2 2013-02-12 "Linux" "Linux Programmer's Manual"
.SH NAME
getpeername \- get name of connected peer socket
.SH SYNOPSIS
.B #include <sys/socket.h>
.sp
.BI "int getpeername(int " sockfd ", struct sockaddr *" addr \
", socklen_t *" addrlen );
.SH DESCRIPTION
.BR getpeername ()
returns the address of the peer connected to the socket
.IR sockfd ,
in the buffer pointed to by
.IR addr .
The
.I addrlen
argument should be initialized to indicate the amount of space pointed to
by
.IR addr .
On return it contains the actual size of the name returned (in bytes).
The name is truncated if the buffer provided is too small.

The returned address is truncated if the buffer provided is too small;
in this case,
.I addrlen
will return a value greater than was supplied to the call.
.SH RETURN VALUE
On success, zero is returned.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EBADF
The argument
.I sockfd
is not a valid descriptor.
.TP
.B EFAULT
The
.I addr
argument points to memory not in a valid part of the
process address space.
.TP
.B EINVAL
.I addrlen
is invalid (e.g., is negative).
.TP
.B ENOBUFS
Insufficient resources were available in the system
to perform the operation.
.TP
.B ENOTCONN
The socket is not connected.
.TP
.B ENOTSOCK
The argument
.I sockfd
is a file, not a socket.
.SH CONFORMING TO
SVr4, 4.4BSD (the
.BR getpeername ()
function call first appeared in 4.2BSD), POSIX.1-2001.
.SH NOTES
The third argument of
.BR getpeername ()
is in reality an
.I "int\ *"
(and this is what 4.x BSD and libc4 and libc5 have).
Some POSIX confusion resulted in the present
.IR socklen_t ,
also used by glibc.
See also
.BR accept (2).

For stream sockets, once a
.BR connect (2)
has been performed, either socket can call
.BR getpeername ()
to obtain the address of the peer socket.
On the other hand, datagram sockets are connectionless.
Calling
.BR connect (2)
on a datagram socket merely sets the peer address for outgoing
datagrams sent with
.BR write (2)
or
.BR recv (2).
The caller of
.BR connect (2)
can use
.BR getpeername ()
to obtain the peer address that it earlier set for the socket.
However, the peer socket is unaware of this information, and calling
.BR getpeername ()
on the peer socket will return no useful information (unless a
.BR connect (2)
call was also executed on the peer).
Note also that the receiver of a datagram can obtain
the address of the sender when using
.BR recvfrom (2).
.SH SEE ALSO
.BR accept (2),
.BR bind (2),
.BR getsockname (2),
.BR ip (7),
.BR socket (7),
.BR unix (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 Rickard E. Faith (faith@cs.unc.edu)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH GETPID 2 2015-03-29 "Linux" "Linux Programmer's Manual"
.SH NAME
getpid, getppid \- get process identification
.SH SYNOPSIS
.B #include <sys/types.h>
.br
.B #include <unistd.h>
.sp
.B pid_t getpid(void);
.br
.B pid_t getppid(void);
.SH DESCRIPTION
.BR getpid ()
returns the process ID of the calling process.
(This is often used by
routines that generate unique temporary filenames.)

.BR getppid ()
returns the process ID of the parent of the calling process.
.SH ERRORS
These functions are always successful.
.SH CONFORMING TO
POSIX.1-2001, 4.3BSD, SVr4.
.SH NOTES
If the caller's parent is in a different PID namespace (see
.BR pid_namespaces (7)),
.BR getppid ()
returns 0.
.\"
.SS C library/kernel ABI differences
Since glibc version 2.3.4,
the glibc wrapper function for
.BR getpid ()
caches PIDs,
so as to avoid additional system calls when a process calls
.BR getpid ()
repeatedly.
Normally this caching is invisible,
but its correct operation relies on support in the wrapper functions for
.BR fork (2),
.BR vfork (2),
and
.BR clone (2):
if an application bypasses the glibc wrappers for these system calls by using
.BR syscall (2),
then a call to
.BR getpid ()
in the child will return the wrong value
(to be precise: it will return the PID of the parent process).
.\" The following program demonstrates this "feature":
.\"
.\" #define _GNU_SOURCE
.\" #include <sys/syscall.h>
.\" #include <sys/wait.h>
.\" #include <stdio.h>
.\" #include <stdlib.h>
.\" #include <unistd.h>
.\"
.\" int
.\" main(int argc, char *argv[])
.\" {
.\"    /* The following statement fills the getpid() cache */
.\"
.\"    printf("parent PID = %ld\n", (long) getpid());
.\"
.\"    if (syscall(SYS_fork) == 0) {
.\"        if (getpid() != syscall(SYS_getpid))
.\"            printf("child getpid() mismatch: getpid()=%ld; "
.\"                    "syscall(SYS_getpid)=%ld\n",
.\"                    (long) getpid(), (long) syscall(SYS_getpid));
.\"        exit(EXIT_SUCCESS);
.\"    }
.\"    wait(NULL);
.\"}
See also
.BR clone (2)
for discussion of a case where
.BR getpid ()
may return the wrong value even when invoking
.BR clone (2)
via the glibc wrapper function.
.SH SEE ALSO
.BR clone (2),
.BR fork (2),
.BR kill (2),
.BR exec (3),
.BR mkstemp (3),
.BR tempnam (3),
.BR tmpfile (3),
.BR tmpnam (3),
.BR credentials (7),
.BR pid_namespaces (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1980, 1991 The Regents of the University of California.
.\" All rights reserved.
.\"
.\" %%%LICENSE_START(BSD_4_CLAUSE_UCB)
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\" %%%LICENSE_END
.\"
.\"     @(#)getpriority.2	6.9 (Berkeley) 3/10/91
.\"
.\" Modified 1993-07-24 by Rik Faith <faith@cs.unc.edu>
.\" Modified 1996-07-01 by Andries Brouwer <aeb@cwi.nl>
.\" Modified 1996-11-06 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified 2001-10-21 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"    Corrected statement under EPERM to clarify privileges required
.\" Modified 2002-06-21 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"    Clarified meaning of 0 value for 'who' argument
.\" Modified 2004-05-27 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.TH GETPRIORITY 2 2014-08-19 "Linux" "Linux Programmer's Manual"
.SH NAME
getpriority, setpriority \- get/set program scheduling priority
.SH SYNOPSIS
.B #include <sys/time.h>
.br
.B #include <sys/resource.h>
.sp
.BI "int getpriority(int " which ", id_t " who );
.br
.BI "int setpriority(int " which ", id_t " who ", int " prio );
.SH DESCRIPTION
The scheduling priority of the process, process group, or user, as
indicated by
.I which
and
.I who
is obtained with the
.BR getpriority ()
call and set with the
.BR setpriority ()
call.

The value
.I which
is one of
.BR PRIO_PROCESS ,
.BR PRIO_PGRP ,
or
.BR PRIO_USER ,
and
.I who
is interpreted relative to
.I which
(a process identifier for
.BR PRIO_PROCESS ,
process group
identifier for
.BR PRIO_PGRP ,
and a user ID for
.BR PRIO_USER ).
A zero value for
.I who
denotes (respectively) the calling process, the process group of the
calling process, or the real user ID of the calling process.
.I Prio
is a value in the range \-20 to 19 (but see the Notes below).
The default priority is 0;
lower priorities cause more favorable scheduling.

The
.BR getpriority ()
call returns the highest priority (lowest numerical value)
enjoyed by any of the specified processes.
The
.BR setpriority ()
call sets the priorities of all of the specified processes
to the specified value.
Only the superuser may lower priorities.
.SH RETURN VALUE
Since
.BR getpriority ()
can legitimately return the value \-1, it is necessary
to clear the external variable
.I errno
prior to the
call, then check it afterward to determine
if \-1 is an error or a legitimate value.
The
.BR setpriority ()
call returns 0 if there is no error, or
\-1 if there is.
.SH ERRORS
.TP
.B EINVAL
.I which
was not one of
.BR PRIO_PROCESS ,
.BR PRIO_PGRP ,
or
.BR PRIO_USER .
.TP
.B ESRCH
No process was located using the
.I which
and
.I who
values specified.
.PP
In addition to the errors indicated above,
.BR setpriority ()
may fail if:
.TP
.B EACCES
The caller attempted to lower a process priority, but did not
have the required privilege (on Linux: did not have the
.B CAP_SYS_NICE
capability).
Since Linux 2.6.12, this error occurs only if the caller attempts
to set a process priority outside the range of the
.B RLIMIT_NICE
soft resource limit of the target process; see
.BR getrlimit (2)
for details.
.TP
.B EPERM
A process was located, but its effective user ID did not match
either the effective or the real user ID of the caller,
and was not privileged (on Linux: did not have the
.B CAP_SYS_NICE
capability).
But see NOTES below.
.SH CONFORMING TO
SVr4, 4.4BSD (these function calls first appeared in 4.2BSD),
POSIX.1-2001.
.SH NOTES
A child created by
.BR fork (2)
inherits its parent's nice value.
The nice value is preserved across
.BR execve (2).

The degree to which their relative nice value affects the scheduling of
processes varies across UNIX systems, and,
on Linux, across kernel versions.
Starting with kernel 2.6.23, Linux adopted an algorithm that causes
relative differences in nice values to have a much stronger effect.
This causes very low nice values (+19) to truly provide little CPU
to a process whenever there is any other
higher priority load on the system,
and makes high nice values (\-20) deliver most of the CPU to applications
that require it (e.g., some audio applications).

The details on the condition for
.B EPERM
depend on the system.
The above description is what POSIX.1-2001 says, and seems to be followed on
all System\ V-like systems.
Linux kernels before 2.6.12 required the real or
effective user ID of the caller to match
the real user of the process \fIwho\fP (instead of its effective user ID).
Linux 2.6.12 and later require
the effective user ID of the caller to match
the real or effective user ID of the process \fIwho\fP.
All BSD-like systems (SunOS 4.1.3, Ultrix 4.2,
4.3BSD, FreeBSD 4.3, OpenBSD-2.5, ...) behave in the same
manner as Linux 2.6.12 and later.
.LP
The actual priority range varies between kernel versions.
Linux before 1.3.36 had \-infinity..15.
Since kernel 1.3.43, Linux has the range \-20..19.
On some other systems, the range of nice values is \-20..20.

Including
.I <sys/time.h>
is not required these days, but increases portability.
(Indeed,
.I <sys/resource.h>
defines the
.I rusage
structure with fields of type
.I struct timeval
defined in
.IR <sys/time.h> .)
.\"
.SS C library/kernel ABI differences
Within the kernel, nice values are actually represented
using the range 40..1
(since negative numbers are error codes) and these are the values
employed by the
.BR setpriority ()
and
.BR getpriority ()
system calls.
The glibc wrapper functions for these system calls handle the
translations between the user-land and kernel representations
of the nice value according to the formula
.IR "unice\ =\ 20\ \-\ knice" .
(Thus, the kernels 40..1 range corresponds to the
range \-20..19 as seen by user space.)
.SH BUGS
According to POSIX, the nice value is a per-process setting.
However, under the current Linux/NPTL implementation of POSIX threads,
the nice value is a per-thread attribute:
different threads in the same process can have different nice values.
Portable applications should avoid relying on the Linux behavior,
which may be made standards conformant in the future.
.SH SEE ALSO
.BR nice (1),
.BR renice (1),
.BR fork (2),
.BR capabilities (7),
.BR sched (7)

.I Documentation/scheduler/sched-nice-design.txt
in the Linux kernel source tree (since Linux 2.6.23)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2014, Theodore Ts'o <tytso@mit.edu>
.\" Copyright (C) 2014,2015 Heinrich Schuchardt <xypron.glpk@gmx.de>
.\" Copyright (C) 2015, Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of
.\" this manual under the conditions for verbatim copying, provided that
.\" the entire resulting derived work is distributed under the terms of
.\" a permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume.
.\" no responsibility for errors or omissions, or for damages resulting.
.\" from the use of the information contained herein.  The author(s) may.
.\" not have taken the same level of care in the production of this.
.\" manual, which is licensed free of charge, as they might when working.
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END

.TH GETRANDOM 2 2015-01-22 "Linux" "Linux Programmer's Manual"
.SH NAME
getrandom \- obtain a series of random bytes
.SH SYNOPSIS
.B #include <linux/random.h>
.sp
.BI "int getrandom(void *"buf ", size_t " buflen ", unsigned int " flags );
.SH DESCRIPTION
The
.BR getrandom ()
system call fills the buffer pointed to by
.I buf
with up to
.I buflen
random bytes.
These bytes can be used to seed user-space random number generators
or for cryptographic purposes.
.PP
.BR getrandom ()
relies on entropy gathered from device drivers and other sources of
environmental noise.
Unnecessarily reading large quantities of data will have a negative impact
on other users of the
.I /dev/random
and
.I /dev/urandom
devices.
Therefore,
.BR getrandom ()
should not be used for Monte Carlo simulations or other
programs/algorithms which are doing probabilistic sampling.

By default,
.BR getrandom ()
draws entropy from the
.IR /dev/urandom
pool.
This behavior can be changed via the
.I flags
argument.
If the
.IR /dev/urandom
pool has been initialized,
reads of up to 256 bytes will always return as many bytes as
requested and will not be interrupted by signals.
No such guarantees apply for larger buffer sizes.
For example, if the call is interrupted by a signal handler,
it may return a partially filled buffer, or fail with the error
.BR EINTR .
If the pool has not yet been initialized, then the call blocks, unless
.B GRND_RANDOM
is specified in
.IR flags .

The
.I flags
argument is a bit mask that can contain zero or more of the following values
ORed together:
.TP
.B GRND_RANDOM
If this bit is set, then random bytes are drawn from the
.I /dev/random
pool instead of the
.I /dev/urandom
pool.
The
.I /dev/random
pool is limited based on the entropy that can be obtained from environmental
noise.
If the number of available bytes in
.I /dev/random
is less than requested in
.IR buflen ,
the call returns just the available random bytes.
If no random bytes are available, the behavior depends on the presence of
.B GRND_NONBLOCK
in the
.I flags
argument.
.TP
.B GRND_NONBLOCK
By default, when reading from
.IR /dev/random ,
.BR getrandom ()
blocks if no random bytes are available,
and when reading from
.IR /dev/urandom ,
it blocks if the entropy pool has not yet been initialized.
If the
.B GRND_NONBLOCK
flag is set, then
.BR getrandom ()
does not block in these cases, but instead immediately returns \-1 with
.I errno
set to
.BR EAGAIN .
.SH RETURN VALUE
On success,
.BR getrandom ()
returns the number of bytes that were copied to the buffer
.IR buf .
This may be less than the number of bytes requested via
.I buflen
if
.BR GRND_RANDOM
was specified in
.IR flags
and insufficient entropy was present in the
.IR /dev/random
pool, or if the system call was interrupted by a signal.
.PP
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EINVAL
An invalid flag was specified in
.IR flags .
.TP
.B EFAULT
The address referred to by
.I buf
is outside the accessible address space.
.TP
.B EAGAIN
The requested entropy was not available, and
.BR getrandom ()
would have blocked if the
.B GRND_NONBLOCK
flag was not set.
.TP
.B EINTR
The call was interrupted by a signal
handler; see the description of how interrupted
.BR read (2)
calls on "slow" devices are handled with and without the
.B SA_RESTART
flag in the
.BR signal (7)
man page.
.SH VERSIONS
.BR getrandom ()
was introduced in version 3.17 of the Linux kernel.
.SH CONFORMING TO
This system call is Linux-specific.
.SH NOTES
.SS Maximum number of bytes returned
As of Linux 3.19 the following limits apply:
.IP * 3
When reading from
.IR /dev/urandom ,
a maximum of 33554431 bytes is returned by a single call to
.BR getrandom ()
on a system where
.I int
has a size of 32 bits.
.IP *
When reading from
.IR /dev/random ,
a maximum of 512 bytes is returned.
.SS Initialization of the entropy pool
The kernel collects bits of entropy from environment.
When a sufficient number of random bits has been collected, the
.I /dev/urandom
entropy pool is considered to be initialized.
This state is normally reached early in the system bootstrap phase.
.SS Interruption by a signal handler
When reading from
.I /dev/urandom
.RB ( GRND_RANDOM
is not set),
.BR getrandom ()
will block until the entropy pool has been initialized
(unless the
.BR GRND_NONBLOCK
flag was specified).
If a request is made to read a large number (more than 256) of bytes,
.BR getrandom ()
will block until those bytes have been generated and transferred
from kernel memory to
.IR buf .
When reading from
.I /dev/random
.RB ( GRND_RANDOM
is set),
.BR getrandom ()
will block until some random bytes become available
(unless the
.BR GRND_NONBLOCK
flag was specified).

The behavior when a call to
.BR getrandom ()
that is blocked while reading from
.I /dev/urandom
is interrupted by a signal handler
depends on the initialization state of the entropy buffer
and on the request size,
.IR buflen .
If the entropy is not yet initialized, then the call will fail with the
.B EINTR
error.
If the entropy pool has been initialized
and the request size is large
.RI ( buflen "\ >\ 256),"
the call either succeeds, returning a partially filled buffer,
or fails with the error
.BR EINTR.
If the entropy pool has been initialized and the request size is small
.RI ( buflen "\ <=\ 256),"
then
.BR getrandom ()
will not fail with
.BR EINTR .
Instead, it will return all of the bytes that have been requested.

When reading from
.IR /dev/random ,
blocking requests of any size can be interrupted by a signal
(the call fails with the error
.BR EINTR ).

Calling
.BR getrandom ()
to read
.I /dev/urandom
for small values (<=\ 256) of
.I buflen
is the preferred mode of usage.
.PP
The special treatment of small values of
.I buflen
was designed for compatibility with
OpenBSD's
.BR getentropy ()
system call.
.PP
The user of
.BR getrandom ()
.I must
always check the return value,
to determine whether either an error occurred
or fewer bytes than requested were returned.
In the case where
.B GRND_RANDOM
is not specified and
.I buflen
is less than or equal to 256,
a return of fewer bytes than requested should never happen,
but the careful programmer will check for this anyway!
.SS Choice of random device
Unless you are doing long-term key generation (and perhaps not even
then), you probably shouldn't be using
.B GRND_RANDOM.
The cryptographic algorithms used for
.I /dev/urandom
are quite conservative, and so should be sufficient for all purposes.
The disadvantage of
.B GRND_RANDOM
is that it can block.
Furthermore, dealing with the partially fulfilled
.BR getrandom ()
requests that can occur when using
.B GRND_RANDOM
increases code complexity.
.SS Emulating OpenBSD's getentropy()
The
.BR getentropy ()
system call in OpenBSD can be emulated using the following
function:

.in +4n
.nf
int
getentropy(void *buf, size_t buflen)
{
    int ret;

    if (buflen > 256)
        goto failure;
    ret = getrandom(buf, buflen, 0);
    if (ret < 0)
        return ret;
    if (ret == buflen)
        return 0;
failure:
    errno = EIO;
    return \-1;
}
.fi
.in
.SH BUGS
As of Linux 3.19, the following bug exists:
.\" FIXME patch proposed https://lkml.org/lkml/2014/11/29/16
.IP * 3
Depending on CPU load,
.BR getrandom ()
does not react to interrupts before reading all bytes requested.
.SH SEE ALSO
.BR random (4),
.BR urandom (4),
.BR signal (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 1997 Andries Brouwer (aeb@cwi.nl)
.\" and Copyright (c) 2007, Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified, 2003-05-26, Michael Kerrisk, <mtk.manpages@gmail.com>
.\"
.TH GETRESUID 2 2010-11-22 "Linux" "Linux Programmer's Manual"
.SH NAME
getresuid, getresgid \- get real, effective and saved user/group IDs
.SH SYNOPSIS
.BR "#define _GNU_SOURCE" "         /* See feature_test_macros(7) */"
.br
.B #include <unistd.h>
.sp
.BI "int getresuid(uid_t *" ruid ", uid_t *" euid ", uid_t *" suid );
.br
.BI "int getresgid(gid_t *" rgid ", gid_t *" egid ", gid_t *" sgid );
.SH DESCRIPTION
.BR getresuid ()
returns the real UID, the effective UID, and the saved set-user-ID
of the calling process, in the arguments
.IR ruid ,
.IR euid ,
and
.IR suid ,
respectively.
.BR getresgid ()
performs the analogous task for the process's group IDs.
.SH RETURN VALUE
On success, zero is returned.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EFAULT
One of the arguments specified an address outside the calling program's
address space.
.SH VERSIONS
These system calls appeared on Linux starting with kernel 2.1.44.

The prototypes are given by glibc since version 2.3.2,
provided
.B _GNU_SOURCE
is defined.
.SH CONFORMING TO
These calls are nonstandard;
they also appear on HP-UX and some of the BSDs.
.SH NOTES
The original Linux
.BR getresuid ()
and
.BR getresgid ()
system calls supported only 16-bit user and group IDs.
Subsequently, Linux 2.4 added
.BR getresuid32 ()
and
.BR getresgid32 (),
supporting 32-bit IDs.
The glibc
.BR getresuid ()
and
.BR getresgid ()
wrapper functions transparently deal with the variations across kernel versions.
.SH SEE ALSO
.BR getuid (2),
.BR setresuid (2),
.BR setreuid (2),
.BR setuid (2),
.BR credentials (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1992 Drew Eckhardt, March 28, 1992
.\" and Copyright (c) 2002, 2004, 2005, 2008, 2010 Michael Kerrisk
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified by Michael Haardt <michael@moria.de>
.\" Modified 1993-07-23 by Rik Faith <faith@cs.unc.edu>
.\" Modified 1996-01-13 by Arnt Gulbrandsen <agulbra@troll.no>
.\" Modified 1996-01-22 by aeb, following a remark by
.\"          Tigran Aivazian <tigran@sco.com>
.\" Modified 1996-04-14 by aeb, following a remark by
.\"          Robert Bihlmeyer <robbe@orcus.ping.at>
.\" Modified 1996-10-22 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified 2001-05-04 by aeb, following a remark by
.\"          Håvard Lygre <hklygre@online.no>
.\" Modified 2001-04-17 by Michael Kerrisk <mtk.manpages@gmail.com>
.\" Modified 2002-06-13 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"     Added note on nonstandard behavior when SIGCHLD is ignored.
.\" Modified 2002-07-09 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"	Enhanced descriptions of 'resource' values
.\" Modified 2003-11-28 by aeb, added RLIMIT_CORE
.\" Modified 2004-03-26 by aeb, added RLIMIT_AS
.\" Modified 2004-06-16 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"     Added notes on CAP_SYS_RESOURCE
.\"
.\" 2004-11-16 -- mtk: the getrlimit.2 page, which formally included
.\" coverage of getrusage(2), has been split, so that the latter
.\" is now covered in its own getrusage.2.
.\"
.\" Modified 2004-11-16, mtk: A few other minor changes
.\" Modified 2004-11-23, mtk
.\"	Added notes on RLIMIT_MEMLOCK, RLIMIT_NPROC, and RLIMIT_RSS
.\"		to "CONFORMING TO"
.\" Modified 2004-11-25, mtk
.\"	Rewrote discussion on RLIMIT_MEMLOCK to incorporate kernel
.\"		2.6.9 changes.
.\"	Added note on RLIMIT_CPU error in older kernels
.\" 2004-11-03, mtk, Added RLIMIT_SIGPENDING
.\" 2005-07-13, mtk, documented RLIMIT_MSGQUEUE limit.
.\" 2005-07-28, mtk, Added descriptions of RLIMIT_NICE and RLIMIT_RTPRIO
.\" 2008-05-07, mtk / Peter Zijlstra, Added description of RLIMIT_RTTIME
.\" 2010-11-06, mtk: Added documentation of prlimit()
.\"
.TH GETRLIMIT 2 2015-04-19 "Linux" "Linux Programmer's Manual"
.SH NAME
getrlimit, setrlimit, prlimit \- get/set resource limits
.SH SYNOPSIS
.B #include <sys/time.h>
.br
.B #include <sys/resource.h>
.sp
.BI "int getrlimit(int " resource ", struct rlimit *" rlim );
.br
.BI "int setrlimit(int " resource ", const struct rlimit *" rlim );
.sp
.BI "int prlimit(pid_t "  pid ", int " resource \
", const struct rlimit *" new_limit ,
.br
.BI "            struct rlimit *" old_limit );
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR prlimit ():
_GNU_SOURCE
.SH DESCRIPTION
The
.BR getrlimit ()
and
.BR setrlimit ()
system calls get and set resource limits respectively.
Each resource has an associated soft and hard limit, as defined by the
.I rlimit
structure:
.PP
.in +4n
.nf
struct rlimit {
    rlim_t rlim_cur;  /* Soft limit */
    rlim_t rlim_max;  /* Hard limit (ceiling for rlim_cur) */
};

.fi
.in
The soft limit is the value that the kernel enforces for the
corresponding resource.
The hard limit acts as a ceiling for the soft limit:
an unprivileged process may set only its soft limit to a value in the
range from 0 up to the hard limit, and (irreversibly) lower its hard limit.
A privileged process (under Linux: one with the
.B CAP_SYS_RESOURCE
capability) may make arbitrary changes to either limit value.
.PP
The value
.B RLIM_INFINITY
denotes no limit on a resource (both in the structure returned by
.BR getrlimit ()
and in the structure passed to
.BR setrlimit ()).
.PP
The
.I resource
argument must be one of:
.TP
.B RLIMIT_AS
The maximum size of the process's virtual memory (address space) in bytes.
.\" since 2.0.27 / 2.1.12
This limit affects calls to
.BR brk (2),
.BR mmap (2),
and
.BR mremap (2),
which fail with the error
.B ENOMEM
upon exceeding this limit.
Also automatic stack expansion will fail
(and generate a
.B SIGSEGV
that kills the process if no alternate stack
has been made available via
.BR sigaltstack (2)).
Since the value is a \fIlong\fP, on machines with a 32-bit \fIlong\fP
either this limit is at most 2 GiB, or this resource is unlimited.
.TP
.B RLIMIT_CORE
Maximum size of a
.I core
file (see
.BR core (5)).
When 0 no core dump files are created.
When nonzero, larger dumps are truncated to this size.
.TP
.B RLIMIT_CPU
CPU time limit in seconds.
When the process reaches the soft limit, it is sent a
.B SIGXCPU
signal.
The default action for this signal is to terminate the process.
However, the signal can be caught, and the handler can return control to
the main program.
If the process continues to consume CPU time, it will be sent
.B SIGXCPU
once per second until the hard limit is reached, at which time
it is sent
.BR SIGKILL .
(This latter point describes Linux behavior.
Implementations vary in how they treat processes which continue to
consume CPU time after reaching the soft limit.
Portable applications that need to catch this signal should
perform an orderly termination upon first receipt of
.BR SIGXCPU .)
.TP
.B RLIMIT_DATA
The maximum size of the process's data segment (initialized data,
uninitialized data, and heap).
This limit affects calls to
.BR brk (2)
and
.BR sbrk (2),
which fail with the error
.B ENOMEM
upon encountering the soft limit of this resource.
.TP
.B RLIMIT_FSIZE
The maximum size of files that the process may create.
Attempts to extend a file beyond this limit result in delivery of a
.B SIGXFSZ
signal.
By default, this signal terminates a process, but a process can
catch this signal instead, in which case the relevant system call (e.g.,
.BR write (2),
.BR truncate (2))
fails with the error
.BR EFBIG .
.TP
.BR RLIMIT_LOCKS " (Early Linux 2.4 only)"
.\" to be precise: Linux 2.4.0-test9; no longer in 2.4.25 / 2.5.65
A limit on the combined number of
.BR flock (2)
locks and
.BR fcntl (2)
leases that this process may establish.
.TP
.B RLIMIT_MEMLOCK
The maximum number of bytes of memory that may be locked
into RAM.
In effect this limit is rounded down to the nearest multiple
of the system page size.
This limit affects
.BR mlock (2)
and
.BR mlockall (2)
and the
.BR mmap (2)
.B MAP_LOCKED
operation.
Since Linux 2.6.9 it also affects the
.BR shmctl (2)
.B SHM_LOCK
operation, where it sets a maximum on the total bytes in
shared memory segments (see
.BR shmget (2))
that may be locked by the real user ID of the calling process.
The
.BR shmctl (2)
.B SHM_LOCK
locks are accounted for separately from the per-process memory
locks established by
.BR mlock (2),
.BR mlockall (2),
and
.BR mmap (2)
.BR MAP_LOCKED ;
a process can lock bytes up to this limit in each of these
two categories.
In Linux kernels before 2.6.9, this limit controlled the amount of
memory that could be locked by a privileged process.
Since Linux 2.6.9, no limits are placed on the amount of memory
that a privileged process may lock, and this limit instead governs
the amount of memory that an unprivileged process may lock.
.TP
.BR RLIMIT_MSGQUEUE " (since Linux 2.6.8)"
Specifies the limit on the number of bytes that can be allocated
for POSIX message queues for the real user ID of the calling process.
This limit is enforced for
.BR mq_open (3).
Each message queue that the user creates counts (until it is removed)
against this limit according to the formula:
.nf

    Since Linux 3.5:
        bytes = attr.mq_maxmsg * sizeof(struct msg_msg) +
                min(attr.mq_maxmsg, MQ_PRIO_MAX) *
                      sizeof(struct posix_msg_tree_node)+
                                /* For overhead */
                attr.mq_maxmsg * attr.mq_msgsize;
                                /* For message data */

    Linux 3.4 and earlier:
        bytes = attr.mq_maxmsg * sizeof(struct msg_msg *) +
                                /* For overhead */
                attr.mq_maxmsg * attr.mq_msgsize;
                                /* For message data */

.fi
where
.I attr
is the
.I mq_attr
structure specified as the fourth argument to
.BR mq_open (3),
and the
.I msg_msg
and
.I posix_msg_tree_node
structures are kernel-internal structures.

The "overhead" addend in the formula accounts for overhead
bytes required by the implementation
and ensures that the user cannot
create an unlimited number of zero-length messages (such messages
nevertheless each consume some system memory for bookkeeping overhead).
.TP
.BR RLIMIT_NICE " (since Linux 2.6.12, but see BUGS below)"
Specifies a ceiling to which the process's nice value can be raised using
.BR setpriority (2)
or
.BR nice (2).
The actual ceiling for the nice value is calculated as
.IR "20\ \-\ rlim_cur" .
(This strangeness occurs because negative numbers cannot be specified
as resource limit values, since they typically have special meanings.
For example,
.B RLIM_INFINITY
typically is the same as \-1.)
.TP
.B RLIMIT_NOFILE
Specifies a value one greater than the maximum file descriptor number
that can be opened by this process.
Attempts
.RB ( open (2),
.BR pipe (2),
.BR dup (2),
etc.)
to exceed this limit yield the error
.BR EMFILE .
(Historically, this limit was named
.B RLIMIT_OFILE
on BSD.)
.TP
.B RLIMIT_NPROC
The maximum number of processes (or, more precisely on Linux, threads)
that can be created for the real user ID of the calling process.
Upon encountering this limit,
.BR fork (2)
fails with the error
.BR EAGAIN .
This limit is not enforced for processes that have either the
.B CAP_SYS_ADMIN
or the
.B CAP_SYS_RESOURCE
capability.
.TP
.B RLIMIT_RSS
Specifies the limit (in pages) of the process's resident set
(the number of virtual pages resident in RAM).
This limit has effect only in Linux 2.4.x, x < 30, and there
affects only calls to
.BR madvise (2)
specifying
.BR MADV_WILLNEED .
.\" As at kernel 2.6.12, this limit still does nothing in 2.6 though
.\" talk of making it do something has surfaced from time to time in LKML
.\"       -- MTK, Jul 05
.TP
.BR RLIMIT_RTPRIO " (since Linux 2.6.12, but see BUGS)"
Specifies a ceiling on the real-time priority that may be set for
this process using
.BR sched_setscheduler (2)
and
.BR sched_setparam (2).
.TP
.BR RLIMIT_RTTIME " (since Linux 2.6.25)"
Specifies a limit (in microseconds)
on the amount of CPU time that a process scheduled
under a real-time scheduling policy may consume without making a blocking
system call.
For the purpose of this limit,
each time a process makes a blocking system call,
the count of its consumed CPU time is reset to zero.
The CPU time count is not reset if the process continues trying to
use the CPU but is preempted, its time slice expires, or it calls
.BR sched_yield (2).

Upon reaching the soft limit, the process is sent a
.B SIGXCPU
signal.
If the process catches or ignores this signal and
continues consuming CPU time, then
.B SIGXCPU
will be generated once each second until the hard limit is reached,
at which point the process is sent a
.B SIGKILL
signal.

The intended use of this limit is to stop a runaway
real-time process from locking up the system.
.TP
.BR RLIMIT_SIGPENDING " (since Linux 2.6.8)"
Specifies the limit on the number of signals
that may be queued for the real user ID of the calling process.
Both standard and real-time signals are counted for the purpose of
checking this limit.
However, the limit is enforced only for
.BR sigqueue (3);
it is always possible to use
.BR kill (2)
to queue one instance of any of the signals that are not already
queued to the process.
.\" This replaces the /proc/sys/kernel/rtsig-max system-wide limit
.\" that was present in kernels <= 2.6.7.  MTK Dec 04
.TP
.B RLIMIT_STACK
The maximum size of the process stack, in bytes.
Upon reaching this limit, a
.B SIGSEGV
signal is generated.
To handle this signal, a process must employ an alternate signal stack
.RB ( sigaltstack (2)).

Since Linux 2.6.23,
this limit also determines the amount of space used for the process's
command-line arguments and environment variables; for details, see
.BR execve (2).
.SS prlimit()
.\" commit c022a0acad534fd5f5d5f17280f6d4d135e74e81
.\" Author: Jiri Slaby <jslaby@suse.cz>
.\" Date:   Tue May 4 18:03:50 2010 +0200
.\"
.\"     rlimits: implement prlimit64 syscall
.\"
.\" commit 6a1d5e2c85d06da35cdfd93f1a27675bfdc3ad8c
.\" Author: Jiri Slaby <jslaby@suse.cz>
.\" Date:   Wed Mar 24 17:06:58 2010 +0100
.\"
.\"     rlimits: add rlimit64 structure
.\"
The Linux-specific
.BR prlimit ()
system call combines and extends the functionality of
.BR setrlimit ()
and
.BR getrlimit ().
It can be used to both set and get the resource limits of an arbitrary process.

The
.I resource
argument has the same meaning as for
.BR setrlimit ()
and
.BR getrlimit ().

If the
.IR new_limit
argument is a not NULL, then the
.I rlimit
structure to which it points is used to set new values for
the soft and hard limits for
.IR resource .
If the
.IR old_limit
argument is a not NULL, then a successful call to
.BR prlimit ()
places the previous soft and hard limits for
.I resource
in the
.I rlimit
structure pointed to by
.IR old_limit .

The
.I pid
argument specifies the ID of the process on which the call is to operate.
If
.I pid
is 0, then the call applies to the calling process.
To set or get the resources of a process other than itself,
the caller must have the
.B CAP_SYS_RESOURCE
capability, or the
real, effective, and saved set user IDs of the target process
must match the real user ID of the caller
.I and
the real, effective, and saved set group IDs of the target process
must match the real group ID of the caller.
.\" FIXME . this permission check is strange
.\" Asked about this on LKML, 7 Nov 2010
.\"     "Inconsistent credential checking in prlimit() syscall"
.SH RETURN VALUE
On success, these system calls return 0.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EFAULT
A pointer argument points to a location
outside the accessible address space.
.TP
.B EINVAL
The value specified in
.I resource
is not valid;
or, for
.BR setrlimit ()
or
.BR prlimit ():
.I rlim\->rlim_cur
was greater than
.IR rlim\->rlim_max .
.TP
.B EPERM
An unprivileged process tried to raise the hard limit; the
.B CAP_SYS_RESOURCE
capability is required to do this.
.TP
.B EPERM
The caller tried to increase the hard
.B RLIMIT_NOFILE
limit above the maximum defined by
.IR /proc/sys/fs/nr_open
(see
.BR proc (5))
.TP
.B EPERM
.RB ( prlimit ())
The calling process did not have permission to set limits
for the process specified by
.IR pid .
.TP
.B ESRCH
Could not find a process with the ID specified in
.IR pid .
.SH VERSIONS
The
.BR prlimit ()
system call is available since Linux 2.6.36.
Library support is available since glibc 2.13.
.SH CONFORMING TO
.BR getrlimit (),
.BR setrlimit ():
SVr4, 4.3BSD, POSIX.1-2001.
.br
.BR prlimit ():
Linux-specific.

.B RLIMIT_MEMLOCK
and
.B RLIMIT_NPROC
derive from BSD and are not specified in POSIX.1-2001;
they are present on the BSDs and Linux, but on few other implementations.
.B RLIMIT_RSS
derives from BSD and is not specified in POSIX.1-2001;
it is nevertheless present on most implementations.
.BR RLIMIT_MSGQUEUE ,
.BR RLIMIT_NICE ,
.BR RLIMIT_RTPRIO ,
.BR RLIMIT_RTTIME ,
and
.B RLIMIT_SIGPENDING
are Linux-specific.
.SH NOTES
A child process created via
.BR fork (2)
inherits its parent's resource limits.
Resource limits are preserved across
.BR execve (2).

Lowering the soft limit for a resource below the process's
current consumption of that resource will succeed
(but will prevent the process from further increasing
its consumption of the resource).

One can set the resource limits of the shell using the built-in
.IR ulimit
command
.RI ( limit
in
.BR csh (1)).
The shell's resource limits are inherited by the processes that
it creates to execute commands.

Since Linux 2.6.24, the resource limits of any process can be inspected via
.IR /proc/[pid]/limits ;
see
.BR proc (5).

Ancient systems provided a
.BR vlimit ()
function with a similar purpose to
.BR setrlimit ().
For backward compatibility, glibc also provides
.BR vlimit ().
All new applications should be written using
.BR setrlimit ().
.SS C library/ kernel ABI differences
Since version 2.13, the glibc
.BR getrlimit ()
and
.BR setrlimit ()
wrapper functions no longer invoke the corresponding system calls,
but instead employ
.BR prlimit (),
for the reasons described in BUGS.

The name of the glibc wrapper function is
.BR prlimit ();
the underlying system call is call prlimit64 ().
.SH BUGS
In older Linux kernels, the
.B SIGXCPU
and
.B SIGKILL
signals delivered when a process encountered the soft and hard
.B RLIMIT_CPU
limits were delivered one (CPU) second later than they should have been.
This was fixed in kernel 2.6.8.

In 2.6.x kernels before 2.6.17, a
.B RLIMIT_CPU
limit of 0 is wrongly treated as "no limit" (like
.BR RLIM_INFINITY ).
Since Linux 2.6.17, setting a limit of 0 does have an effect,
but is actually treated as a limit of 1 second.
.\" see http://marc.theaimsgroup.com/?l=linux-kernel&m=114008066530167&w=2

A kernel bug means that
.\" See https://lwn.net/Articles/145008/
.B RLIMIT_RTPRIO
does not work in kernel 2.6.12; the problem is fixed in kernel 2.6.13.

In kernel 2.6.12, there was an off-by-one mismatch
between the priority ranges returned by
.BR getpriority (2)
and
.BR RLIMIT_NICE .
This had the effect that the actual ceiling for the nice value
was calculated as
.IR "19\ \-\ rlim_cur" .
This was fixed in kernel 2.6.13.
.\" see http://marc.theaimsgroup.com/?l=linux-kernel&m=112256338703880&w=2

Since Linux 2.6.12,
.\" The relevant patch, sent to LKML, seems to be
.\" http://thread.gmane.org/gmane.linux.kernel/273462
.\" From: Roland McGrath <roland <at> redhat.com>
.\" Subject: [PATCH 7/7] make RLIMIT_CPU/SIGXCPU per-process
.\" Date: 2005-01-23 23:27:46 GMT
if a process reaches its soft
.BR RLIMIT_CPU
limit and has a handler installed for
.BR SIGXCPU ,
then, in addition to invoking the signal handler,
the kernel increases the soft limit by one second.
This behavior repeats if the process continues to consume CPU time,
until the hard limit is reached,
at which point the process is killed.
Other implementations
.\" Tested Solaris 10, FreeBSD 9, OpenBSD 5.0
do not change the
.BR RLIMIT_CPU
soft limit in this manner,
and the Linux behavior is probably not standards conformant;
portable applications should avoid relying on this Linux-specific behavior.
.\" FIXME . https://bugzilla.kernel.org/show_bug.cgi?id=50951
The Linux-specific
.BR RLIMIT_RTTIME
limit exhibits the same behavior when the soft limit is encountered.

Kernels before 2.4.22 did not diagnose the error
.B EINVAL
for
.BR setrlimit ()
when
.I rlim\->rlim_cur
was greater than
.IR rlim\->rlim_max .
.\"
.SS Representation of """large""" resource limit values on 32-bit platforms
The glibc
.BR getrlimit ()
and
.BR setrlimit ()
wrapper functions use a 64-bit
.IR rlim_t
data type, even on 32-bit platforms.
However, the
.I rlim_t
data type used in the
.BR getrlimit ()
and
.BR setrlimit ()
system calls is a (32-bit)
.IR "unsigned long" .
Furthermore, in Linux versions before 2.6.36,
the kernel represents resource limits on 32-bit platforms as
.IR "unsigned long" .
However, a 32-bit data type is not wide enough.
.\" https://bugzilla.kernel.org/show_bug.cgi?id=5042
.\" http://sources.redhat.com/bugzilla/show_bug.cgi?id=12201
The most pertinent limit here is
.BR RLIMIT_FSIZE ,
which specifies the maximum size to which a file can grow:
to be useful, this limit must be represented using a type
that is as wide as the type used to
represent file offsets\(emthat is, as wide as a 64-bit
.BR off_t
(assuming a program compiled with
.IR _FILE_OFFSET_BITS=64 ).

To work around this kernel limitation,
if a program tried to set a resource limit to a value larger than
can be represented in a 32-bit
.IR "unsigned long" ,
then the glibc
.BR setrlimit ()
wrapper function silently converted the limit value to
.BR RLIM_INFINITY .
In other words, the requested resource limit setting was silently ignored.

This problem was addressed in Linux 2.6.36 with two principal changes:
.IP * 3
the addition of a new kernel representation of resource limits that
uses 64 bits, even on 32-bit platforms;
.IP *
the addition of the
.BR prlimit ()
system call, which employs 64-bit values for its resource limit arguments.
.PP
Since version 2.13,
.\" https://www.sourceware.org/bugzilla/show_bug.cgi?id=12201
glibc works around the limitations of the
.BR getrlimit ()
and
.BR setrlimit ()
system calls by implementing
.BR setrlimit ()
and
.BR getrlimit ()
as wrapper functions that call
.BR prlimit ().
.SH EXAMPLE
The program below demonstrates the use of
.BR prlimit ().
.PP
.nf
#define _GNU_SOURCE
#define _FILE_OFFSET_BITS 64
#include <stdio.h>
#include <time.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/resource.h>

#define errExit(msg) 	do { perror(msg); exit(EXIT_FAILURE); \\
                        } while (0)

int
main(int argc, char *argv[])
{
    struct rlimit old, new;
    struct rlimit *newp;
    pid_t pid;

    if (!(argc == 2 || argc == 4)) {
        fprintf(stderr, "Usage: %s <pid> [<new\-soft\-limit> "
                "<new\-hard\-limit>]\\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    pid = atoi(argv[1]);        /* PID of target process */

    newp = NULL;
    if (argc == 4) {
        new.rlim_cur = atoi(argv[2]);
        new.rlim_max = atoi(argv[3]);
        newp = &new;
    }

    /* Set CPU time limit of target process; retrieve and display
       previous limit */

    if (prlimit(pid, RLIMIT_CPU, newp, &old) == \-1)
        errExit("prlimit\-1");
    printf("Previous limits: soft=%lld; hard=%lld\\n",
            (long long) old.rlim_cur, (long long) old.rlim_max);

    /* Retrieve and display new CPU time limit */

    if (prlimit(pid, RLIMIT_CPU, NULL, &old) == \-1)
        errExit("prlimit\-2");
    printf("New limits: soft=%lld; hard=%lld\\n",
            (long long) old.rlim_cur, (long long) old.rlim_max);

    exit(EXIT_FAILURE);
}
.fi
.SH SEE ALSO
.BR prlimit (1),
.BR dup (2),
.BR fcntl (2),
.BR fork (2),
.BR getrusage (2),
.BR mlock (2),
.BR mmap (2),
.BR open (2),
.BR quotactl (2),
.BR sbrk (2),
.BR shmctl (2),
.BR malloc (3),
.BR sigqueue (3),
.BR ulimit (3),
.BR core (5),
.BR capabilities (7),
.BR signal (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2006 Red Hat, Inc. All Rights Reserved.
.\" Written by Ivana Varekova <varekova@redhat.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" FIXME Something could be added to this page (or exit(2))
.\"       about exit_robust_list processing
.\"
.TH GET_ROBUST_LIST 2 2015-01-22 Linux "Linux System Calls"
.SH NAME
get_robust_list, set_robust_list \- get/set list of robust futexes
.SH SYNOPSIS
.nf
.B #include <linux/futex.h>
.B #include <sys/types.h>
.B #include <syscall.h>
.sp
.BI "long get_robust_list(int " pid ", struct robust_list_head **" head_ptr ,
.BI "                     size_t *" len_ptr );
.BI "long set_robust_list(struct robust_list_head *" head ", size_t " len );
.fi

.IR Note :
There are no glibc wrappers for these system calls; see NOTES.
.SH DESCRIPTION
The robust futex implementation needs to maintain per-thread lists of robust
futexes which are unlocked when the thread exits.
These lists are managed in user space; the kernel is notified about only
the location of the head of the list.

The
.BR get_robust_list ()
system call returns the head of the robust futex list of the thread
whose thread ID is specified in
.IR pid .
If
.I pid
is 0,
the head of the list for the calling thread is returned.
The list head is stored in the location pointed to by
.IR head_ptr .
The size of the object pointed to by
.I **head_ptr
is stored in
.IR len_ptr .

The
.BR set_robust_list ()
system call requests the kernel to record the head of the list of
robust futexes owned by the calling thread.
The
.I head
argument is the list head to record.
The
.I len
argument should be
.IR sizeof(*head) .
.SH RETURN VALUE
The
.BR set_robust_list ()
and
.BR get_robust_list ()
system calls return zero when the operation is successful,
an error code otherwise.
.SH ERRORS
The
.BR set_robust_list ()
system call can fail with the following error:
.TP
.B EINVAL
.I len
does not match the size of structure
.B struct robust_list_head
expected by kernel.
.PP
The
.BR get_robust_list ()
system call can fail with the following errors:
.TP
.B EPERM
The calling process does not have permission to see the robust futex list of
the thread with the thread ID
.IR pid ,
and does not have the
.BR CAP_SYS_PTRACE
capability.
.TP
.B ESRCH
No thread with the thread ID
.I pid
could be found.
.TP
.B EFAULT
The head of the robust futex list can't be stored at the location
.IR head .
.SH VERSIONS
These system calls were added in Linux 2.6.17.
.SH NOTES
These system calls are not needed by normal applications.
No support for them is provided in glibc.
In the unlikely event that you want to call them directly, use
.BR syscall (2).

A thread can have only one robust futex list;
therefore applications that wish
to use this functionality should use the robust mutexes provided by glibc.
.SH SEE ALSO
.BR futex (2)
.\" .BR pthread_mutexattr_setrobust_np (3)

.IR Documentation/robust-futexes.txt
and
.IR Documentation/robust-futex-ABI.txt
in the Linux kernel source tree
.\" http://lwn.net/Articles/172149/
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1992 Drew Eckhardt, March 28, 1992
.\" and Copyright (c) 2002 Michael Kerrisk
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" 2004-11-16 -- mtk: the getrlimit.2 page, which formerly included
.\" coverage of getrusage(2), has been split, so that the latter is
.\" now covered in its own getrusage.2.  For older details of change
.\" history, etc., see getrlimit.2
.\"
.\" Modified 2004-11-16, mtk, Noted that the nonconformance
.\"	when SIGCHLD is being ignored is fixed in 2.6.9.
.\" 2008-02-22, Sripathi Kodi <sripathik@in.ibm.com>: Document RUSAGE_THREAD
.\" 2008-05-25, mtk, clarify RUSAGE_CHILDREN + other clean-ups.
.\" 2010-05-24, Mark Hills <mark@pogo.org.uk>: Description of fields,
.\"     document ru_maxrss
.\" 2010-05-24, mtk, enhanced description of various fields
.\"
.TH GETRUSAGE 2 2014-05-10 "Linux" "Linux Programmer's Manual"
.SH NAME
getrusage \- get resource usage
.SH SYNOPSIS
.B #include <sys/time.h>
.br
.B #include <sys/resource.h>
.sp
.BI "int getrusage(int " who ", struct rusage *" usage );
.SH DESCRIPTION
.PP
.BR getrusage ()
returns resource usage measures for
.IR who ,
which can be one of the following:
.TP
.B RUSAGE_SELF
Return resource usage statistics for the calling process,
which is the sum of resources used by all threads in the process.
.TP
.B RUSAGE_CHILDREN
Return resource usage statistics for all children of the
calling process that have terminated and been waited for.
These statistics will include the resources used by grandchildren,
and further removed descendants,
if all of the intervening descendants waited on their terminated children.
.TP
.BR RUSAGE_THREAD " (since Linux 2.6.26)"
Return resource usage statistics for the calling thread.
The
.B _GNU_SOURCE
feature test macro must be defined (before including
.I any
header file)
in order to obtain the definition of this constant from
.IR <sys/resource.h> .
.PP
The resource usages are returned in the structure pointed to by
.IR usage ,
which has the following form:
.PP
.in +4n
.nf
struct rusage {
    struct timeval ru_utime; /* user CPU time used */
    struct timeval ru_stime; /* system CPU time used */
    long   ru_maxrss;        /* maximum resident set size */
    long   ru_ixrss;         /* integral shared memory size */
    long   ru_idrss;         /* integral unshared data size */
    long   ru_isrss;         /* integral unshared stack size */
    long   ru_minflt;        /* page reclaims (soft page faults) */
    long   ru_majflt;        /* page faults (hard page faults) */
    long   ru_nswap;         /* swaps */
    long   ru_inblock;       /* block input operations */
    long   ru_oublock;       /* block output operations */
    long   ru_msgsnd;        /* IPC messages sent */
    long   ru_msgrcv;        /* IPC messages received */
    long   ru_nsignals;      /* signals received */
    long   ru_nvcsw;         /* voluntary context switches */
    long   ru_nivcsw;        /* involuntary context switches */
};
.fi
.in
.PP
Not all fields are completed;
unmaintained fields are set to zero by the kernel.
(The unmaintained fields are provided for compatibility with other systems,
and because they may one day be supported on Linux.)
The fields are interpreted as follows:
.TP
.I ru_utime
This is the total amount of time spent executing in user mode,
expressed in a
.I timeval
structure (seconds plus microseconds).
.TP
.I ru_stime
This is the total amount of time spent executing in kernel mode,
expressed in a
.I timeval
structure (seconds plus microseconds).
.TP
.IR ru_maxrss " (since Linux 2.6.32)"
This is the maximum resident set size used (in kilobytes).
For
.BR RUSAGE_CHILDREN ,
this is the resident set size of the largest child, not the maximum
resident set size of the process tree.
.TP
.IR ru_ixrss " (unmaintained)"
This field is currently unused on Linux.
.\" On some systems,
.\" this is the integral of the text segment memory consumption,
.\" expressed in kilobyte-seconds.
.TP
.IR ru_idrss " (unmaintained)"
This field is currently unused on Linux.
.\" On some systems, this is the integral of the data segment memory consumption,
.\" expressed in kilobyte-seconds.
.TP
.IR ru_isrss " (unmaintained)"
This field is currently unused on Linux.
.\" On some systems, this is the integral of the stack memory consumption,
.\" expressed in kilobyte-seconds.
.TP
.I ru_minflt
The number of page faults serviced without any I/O activity; here
I/O activity is avoided by \*(lqreclaiming\*(rq a page frame from
the list of pages awaiting reallocation.
.TP
.I ru_majflt
The number of page faults serviced that required I/O activity.
.TP
.IR ru_nswap  " (unmaintained)"
This field is currently unused on Linux.
.\" On some systems, this is the number of swaps out of physical memory.
.TP
.IR ru_inblock " (since Linux 2.6.22)"
The number of times the filesystem had to perform input.
.TP
.IR ru_oublock " (since Linux 2.6.22)"
The number of times the filesystem had to perform output.
.TP
.IR ru_msgsnd " (unmaintained)"
This field is currently unused on Linux.
.\" On FreeBSD 6.2, this appears to measure messages sent over sockets
.\" On some systems,
.\" this field records the number of messages sent over sockets.
.TP
.IR ru_msgrcv " (unmaintained)"
This field is currently unused on Linux.
.\" On FreeBSD 6.2, this appears to measure messages received over sockets
.\" On some systems,
.\" this field records the number of messages received over sockets.
.TP
.IR ru_nsignals " (unmaintained)"
This field is currently unused on Linux.
.\" On some systems, this field records the number of signals received.
.TP
.IR ru_nvcsw " (since Linux 2.6)"
The number of times a context switch resulted due to a process
voluntarily giving up the processor before its time slice was
completed (usually to await availability of a resource).
.TP
.IR ru_nivcsw " (since Linux 2.6)"
The number of times a context switch resulted due to a higher
priority process becoming runnable or because the current process
exceeded its time slice.
.PP
.SH RETURN VALUE
On success, zero is returned.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EFAULT
.I usage
points outside the accessible address space.
.TP
.B EINVAL
.I who
is invalid.
.SH CONFORMING TO
SVr4, 4.3BSD.
POSIX.1-2001 specifies
.BR getrusage (),
but specifies only the fields
.I ru_utime
and
.IR ru_stime .

.B RUSAGE_THREAD
is Linux-specific.
.SH NOTES
Resource usage metrics are preserved across an
.BR execve (2).

Including
.I <sys/time.h>
is not required these days, but increases portability.
(Indeed,
.I struct timeval
is defined in
.IR <sys/time.h> .)
.PP
In Linux kernel versions before 2.6.9, if the disposition of
.B SIGCHLD
is set to
.B SIG_IGN
then the resource usages of child processes
are automatically included in the value returned by
.BR RUSAGE_CHILDREN ,
although POSIX.1-2001 explicitly prohibits this.
This nonconformance is rectified in Linux 2.6.9 and later.
.\" See the description of getrusage() in XSH.
.\" A similar statement was also in SUSv2.
.LP
The structure definition shown at the start of this page
was taken from 4.3BSD Reno.

Ancient systems provided a
.BR vtimes ()
function with a similar purpose to
.BR getrusage ().
For backward compatibility, glibc also provides
.BR vtimes ().
All new applications should be written using
.BR getrusage ().

See also the description of
.IR /proc/PID/stat
in
.BR proc (5).
.SH SEE ALSO
.BR clock_gettime (2),
.BR getrlimit (2),
.BR times (2),
.BR wait (2),
.BR wait4 (2),
.BR clock (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 1996 Andries Brouwer (aeb@cwi.nl)
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.\" Modified Thu Oct 31 14:18:40 1996 by Eric S. Raymond <esr@y\thyrsus.com>
.\" Modified 2001-12-17, aeb
.TH GETSID 2 2010-09-26 "Linux" "Linux Programmer's Manual"
.SH NAME
getsid \- get session ID
.SH SYNOPSIS
.B #include <unistd.h>
.sp
.BI "pid_t getsid(pid_t" " pid" );
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.PD 0
.BR getsid ():
.RS 4
_XOPEN_SOURCE\ >=\ 500 ||
_XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED
.br
|| /* Since glibc 2.12: */ _POSIX_C_SOURCE\ >=\ 200809L
.RE
.PD
.ad
.SH DESCRIPTION
.I getsid(0)
returns the session ID of the calling process.
.I getsid(p)
returns the session ID of the process with process ID
.IR p .
(The session ID of a process is the process group ID of the
session leader.)
.SH RETURN VALUE
On success, a session ID is returned.
On error, \fI(pid_t)\ \-1\fP will be returned, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EPERM
A process with process ID
.I p
exists, but it is not in the same session as the calling process,
and the implementation considers this an error.
.TP
.B ESRCH
No process with process ID
.I p
was found.
.SH VERSIONS
This system call is available on Linux since version 2.0.
.\" Linux has this system call since Linux 1.3.44.
.\" There is libc support since libc 5.2.19.
.SH CONFORMING TO
SVr4, POSIX.1-2001.
.SH NOTES
Linux does not return
.BR EPERM .
.SH SEE ALSO
.BR getpgid (2),
.BR setsid (2),
.BR credentials (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1983, 1991 The Regents of the University of California.
.\" All rights reserved.
.\"
.\" %%%LICENSE_START(BSD_4_CLAUSE_UCB)
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\" %%%LICENSE_END
.\"
.\"     @(#)getsockname.2	6.4 (Berkeley) 3/10/91
.\"
.\" Modified Sat Jul 24 16:30:29 1993 by Rik Faith <faith@cs.unc.edu>
.\" Modified Tue Oct 22 00:22:35 EDT 1996 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified Sun Mar 28 21:26:46 1999 by Andries Brouwer <aeb@cwi.nl>
.\"
.TH GETSOCKNAME 2 2008-12-03 "Linux" "Linux Programmer's Manual"
.SH NAME
getsockname \- get socket name
.SH SYNOPSIS
.nf
.B #include <sys/socket.h>
.sp
.BI "int getsockname(int " sockfd ", struct sockaddr *" addr \
", socklen_t *" addrlen );
.fi
.SH DESCRIPTION
.BR getsockname ()
returns the current address to which the socket
.I sockfd
is bound, in the buffer pointed to by
.IR addr .
The
.I addrlen
argument should be initialized to indicate
the amount of space (in bytes) pointed to by
.IR addr .
On return it contains the actual size of the socket address.

The returned address is truncated if the buffer provided is too small;
in this case,
.I addrlen
will return a value greater than was supplied to the call.
.SH RETURN VALUE
On success, zero is returned.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EBADF
The argument
.I sockfd
is not a valid descriptor.
.TP
.B EFAULT
The
.I addr
argument points to memory not in a valid part of the
process address space.
.TP
.B EINVAL
.I addrlen
is invalid (e.g., is negative).
.TP
.B ENOBUFS
Insufficient resources were available in the system
to perform the operation.
.TP
.B ENOTSOCK
The argument
.I sockfd
is a file, not a socket.
.SH CONFORMING TO
SVr4, 4.4BSD (the
.BR getsockname ()
function call appeared in 4.2BSD), POSIX.1-2001.
.\" SVr4 documents additional ENOMEM
.\" and ENOSR error codes.
.SH NOTES
The third argument of
.BR getsockname ()
is in reality an
.I "int\ *"
(and this is what 4.x BSD and libc4 and libc5 have).
Some POSIX confusion resulted in the present
.IR socklen_t ,
also used by glibc.
See also
.BR accept (2).
.SH SEE ALSO
.BR bind (2),
.BR socket (2),
.BR getifaddrs (3),
.BR ip (7),
.BR socket (7),
.BR unix (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1983, 1991 The Regents of the University of California.
.\" All rights reserved.
.\"
.\" %%%LICENSE_START(BSD_4_CLAUSE_UCB)
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\" %%%LICENSE_END
.\"
.\"     $Id: getsockopt.2,v 1.1 1999/05/24 14:57:04 freitag Exp $
.\"
.\" Modified Sat Jul 24 16:19:32 1993 by Rik Faith (faith@cs.unc.edu)
.\" Modified Mon Apr 22 02:29:06 1996 by Martin Schulze (joey@infodrom.north.de)
.\" Modified Tue Aug 27 10:52:51 1996 by Andries Brouwer (aeb@cwi.nl)
.\" Modified Thu Jan 23 13:29:34 1997 by Andries Brouwer (aeb@cwi.nl)
.\" Modified Sun Mar 28 21:26:46 1999 by Andries Brouwer (aeb@cwi.nl)
.\" Modified 1999 by Andi Kleen <ak@muc.de>.
.\"     Removed most stuff because it is in socket.7 now.
.\"
.TH GETSOCKOPT 2 2015-03-29 "Linux" "Linux Programmer's Manual"
.SH NAME
getsockopt, setsockopt \- get and set options on sockets
.SH SYNOPSIS
.nf
.BR "#include <sys/types.h>" "          /* See NOTES */"
.br
.B #include <sys/socket.h>
.sp
.BI "int getsockopt(int " sockfd ", int " level ", int " optname ,
.BI "               void *" optval ", socklen_t *" optlen );
.BI "int setsockopt(int " sockfd ", int " level ", int " optname ,
.BI "               const void *" optval ", socklen_t " optlen );
.fi
.SH DESCRIPTION
.BR getsockopt ()
and
.BR setsockopt ()
manipulate options for the socket referred to by the file descriptor
.IR sockfd .
Options may exist at multiple
protocol levels; they are always present at the uppermost
socket level.

When manipulating socket options, the level at which the
option resides and the name of the option must be specified.
To manipulate options at the sockets API level,
.I level
is specified as
.BR SOL_SOCKET .
To manipulate options at any
other level the protocol number of the appropriate protocol
controlling the option is supplied.
For example,
to indicate that an option is to be interpreted by the
.B TCP
protocol,
.I level
should be set to the protocol number of
.BR TCP ;
see
.BR getprotoent (3).

The arguments
.I optval
and
.I optlen
are used to access option values for
.BR setsockopt ().
For
.BR getsockopt ()
they identify a buffer in which the value for the
requested option(s) are to be returned.
For
.BR getsockopt (),
.I optlen
is a value-result argument, initially containing the
size of the buffer pointed to by
.IR optval ,
and modified on return to indicate the actual size of
the value returned.
If no option value is to be supplied or returned,
.I optval
may be NULL.

.I Optname
and any specified options are passed uninterpreted to the appropriate
protocol module for interpretation.
The include file
.I <sys/socket.h>
contains definitions for socket level options, described below.
Options at
other protocol levels vary in format and name; consult the appropriate
entries in section 4 of the manual.

Most socket-level options utilize an
.I int
argument for
.IR optval .
For
.BR setsockopt (),
the argument should be nonzero to enable a boolean option, or zero if the
option is to be disabled.
.PP
For a description of the available socket options see
.BR socket (7)
and the appropriate protocol man pages.
.SH RETURN VALUE
On success, zero is returned for the standard options.
On error, \-1 is returned, and
.I errno
is set appropriately.

Netfilter allows the programmer
to define custom socket options with associated handlers; for such
options, the return value on success is the value returned by the handler.
.SH ERRORS
.TP 10
.B EBADF
The argument
.I sockfd
is not a valid descriptor.
.TP
.B EFAULT
The address pointed to by
.I optval
is not in a valid part of the process address space.
For
.BR getsockopt (),
this error may also be returned if
.I optlen
is not in a valid part of the process address space.
.TP
.B EINVAL
.I optlen
invalid in
.BR setsockopt ().
In some cases this error can also occur for an invalid value in
.IR optval
(e.g., for the
.B IP_ADD_MEMBERSHIP
option described in
.BR ip (7)).
.TP
.B ENOPROTOOPT
The option is unknown at the level indicated.
.TP
.B ENOTSOCK
The argument
.I sockfd
is a file, not a socket.
.SH CONFORMING TO
SVr4, 4.4BSD (these system calls first appeared in 4.2BSD),
POSIX.1-2001.
.\" SVr4 documents additional ENOMEM and ENOSR error codes, but does
.\" not document the
.\" .BR SO_SNDLOWAT ", " SO_RCVLOWAT ", " SO_SNDTIMEO ", " SO_RCVTIMEO
.\" options
.SH NOTES
POSIX.1-2001 does not require the inclusion of
.IR <sys/types.h> ,
and this header file is not required on Linux.
However, some historical (BSD) implementations required this header
file, and portable applications are probably wise to include it.

The
.I optlen
argument of
.BR getsockopt ()
and
.BR setsockopt ()
is in reality an
.I "int [*]"
(and this is what 4.x BSD and libc4 and libc5 have).
Some POSIX confusion resulted in the present
.IR socklen_t ,
also used by glibc.
See also
.BR accept (2).
.SH BUGS
Several of the socket options should be handled at lower levels of the
system.
.SH SEE ALSO
.BR ioctl (2),
.BR socket (2),
.BR getprotoent (3),
.BR protocols (5),
.BR ip (7),
.BR packet (7),
.BR socket (7),
.BR tcp (7),
.BR udp (7),
.BR unix (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 2003 Abhijit Menon-Sen <ams@wiw.org>
.\" and Copyright (C) 2008 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH GETTID 2 2014-02-11 "Linux" "Linux Programmer's Manual"
.SH NAME
gettid \- get thread identification
.SH SYNOPSIS
.nf
.B #include <sys/types.h>
.sp
.B pid_t gettid(void);
.fi

.IR Note :
There is no glibc wrapper for this system call; see NOTES.
.SH DESCRIPTION
.BR gettid ()
returns the caller's thread ID (TID).
In a single-threaded process, the thread ID
is equal to the process ID (PID, as returned by
.BR getpid (2)).
In a multithreaded process, all threads
have the same PID, but each one has a unique TID.
For further details, see the discussion of
.BR CLONE_THREAD
in
.BR clone (2).
.SH RETURN VALUE
On success, returns the thread ID of the calling process.
.SH ERRORS
This call is always successful.
.SH VERSIONS
The
.BR gettid ()
system call first appeared on Linux in kernel 2.4.11.
.SH CONFORMING TO
.BR gettid ()
is Linux-specific and should not be used in programs that
are intended to be portable.
.SH NOTES
Glibc does not provide a wrapper for this system call; call it using
.BR syscall (2).
.\" FIXME . See http://sourceware.org/bugzilla/show_bug.cgi?id=6399
.\" "gettid() should have a wrapper"

The thread ID returned by this call is not the same thing as a
POSIX thread ID (i.e., the opaque value returned by
.BR pthread_self (3)).
.SH SEE ALSO
.BR capget (2),
.BR clone (2),
.BR fcntl (2),
.BR fork (2),
.BR get_robust_list (2),
.BR getpid (2),
.\" .BR kcmp (2),
.BR ioprio_set (2),
.\" .BR move_pages (2),
.\" .BR migrate_pages (2),
.BR perf_event_open (2),
.\" .BR process_vm_readv (2),
.\" .BR ptrace (2),
.BR sched_setaffinity (2),
.BR sched_setparam (2),
.BR sched_setscheduler (2),
.BR tgkill (2),
.BR timer_create (2)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1992 Drew Eckhardt (drew@cs.colorado.edu), March 28, 1992
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified by Michael Haardt (michael@moria.de)
.\" Modified 1993-07-23 by Rik Faith (faith@cs.unc.edu)
.\" Modified 1994-08-21 by Michael Chastain (mec@shell.portal.com):
.\"   Fixed necessary '#include' lines.
.\" Modified 1995-04-15 by Michael Chastain (mec@shell.portal.com):
.\"   Added reference to adjtimex.
.\" Removed some nonsense lines pointed out by Urs Thuermann,
.\"   (urs@isnogud.escape.de), aeb, 950722.
.\" Modified 1997-01-14 by Austin Donnelly (and1000@debian.org):
.\"   Added return values section, and bit on EFAULT
.\" Added clarification on timezone, aeb, 971210.
.\" Removed "#include <unistd.h>", aeb, 010316.
.\" Modified, 2004-05-27 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"   Added notes on capability requirement.
.\"
.TH GETTIMEOFDAY 2 2012-04-26 "Linux" "Linux Programmer's Manual"
.SH NAME
gettimeofday, settimeofday \- get / set time
.SH SYNOPSIS
.nf
.B #include <sys/time.h>

.BI "int gettimeofday(struct timeval *" tv ", struct timezone *" tz );

.BI "int settimeofday(const struct timeval *" tv \
", const struct timezone *" tz );

.fi
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR settimeofday ():
_BSD_SOURCE
.SH DESCRIPTION
The functions
.BR gettimeofday ()
and
.BR settimeofday ()
can get and set the time as well as a timezone.
The
.I tv
argument is a
.I struct timeval
(as specified in
.IR <sys/time.h> ):
.sp
.in +4n
.nf
struct timeval {
    time_t      tv_sec;     /* seconds */
    suseconds_t tv_usec;    /* microseconds */
};
.fi
.in
.sp
and gives the number of seconds and microseconds since the Epoch (see
.BR time (2)).
The
.I tz
argument is a
.IR "struct timezone" :
.sp
.in +4n
.nf
struct timezone {
    int tz_minuteswest;     /* minutes west of Greenwich */
    int tz_dsttime;         /* type of DST correction */
};
.fi
.in
.PP
If either
.I tv
or
.I tz
is NULL, the corresponding structure is not set or returned.
.\" FIXME . The compilation warning looks to be going away in 2.17
.\" see glibc commit 4b7634a5e03b0da6f8875de9d3f74c1cf6f2a6e8
(However, compilation warnings will result if
.I tv
is NULL.)
.\" The following is covered under EPERM below:
.\" .PP
.\" Only the superuser may use
.\" .BR settimeofday ().
.PP
The use of the
.I timezone
structure is obsolete; the
.I tz
argument should normally be specified as NULL.
(See NOTES below.)

Under Linux, there are some peculiar "warp clock" semantics associated
with the
.BR settimeofday ()
system call if on the very first call (after booting)
that has a non-NULL
.I tz
argument, the
.I tv
argument is NULL and the
.I tz_minuteswest
field is nonzero.
(The
.I tz_dsttime
field should be zero for this case.)
In such a case it is assumed that the CMOS clock
is on local time, and that it has to be incremented by this amount
to get UTC system time.
No doubt it is a bad idea to use this feature.
.SH RETURN VALUE
.BR gettimeofday ()
and
.BR settimeofday ()
return 0 for success, or \-1 for failure (in which case
.I errno
is set appropriately).
.SH ERRORS
.TP
.B EFAULT
One of
.I tv
or
.I tz
pointed outside the accessible address space.
.TP
.B EINVAL
Timezone (or something else) is invalid.
.TP
.B EPERM
The calling process has insufficient privilege to call
.BR settimeofday ();
under Linux the
.B CAP_SYS_TIME
capability is required.
.SH CONFORMING TO
SVr4, 4.3BSD.
POSIX.1-2001 describes
.BR gettimeofday ()
but not
.BR settimeofday ().
POSIX.1-2008 marks
.BR gettimeofday ()
as obsolete, recommending the use of
.BR clock_gettime (2)
instead.
.SH NOTES
The time returned by
.BR gettimeofday ()
.I is
affected by discontinuous jumps in the system time
(e.g., if the system administrator manually changes the system time).
If you need a monotonically increasing clock, see
.BR clock_gettime (2).

Macros for operating on
.I timeval
structures are described in
.BR timeradd (3).

Traditionally, the fields of
.I struct timeval
were of type
.IR long .

The
.I tz_dsttime
field has never been used under Linux.
.\" it has not
.\" been and will not be supported by libc or glibc.
.\" Each and every occurrence of this field in the kernel source
.\" (other than the declaration) is a bug.
Thus, the following
is purely of historic interest.

On old systems, the field
.I tz_dsttime
contains a symbolic constant (values are given below)
that indicates in which part of the year Daylight Saving Time
is in force.
(Note: this value is constant throughout the year:
it does not indicate that DST is in force, it just selects an
algorithm.)
The daylight saving time algorithms defined are as follows:
.in +4n
.nf

\fBDST_NONE\fP     /* not on DST */
.br
\fBDST_USA\fP      /* USA style DST */
.br
\fBDST_AUST\fP     /* Australian style DST */
.br
\fBDST_WET\fP      /* Western European DST */
.br
\fBDST_MET\fP      /* Middle European DST */
.br
\fBDST_EET\fP      /* Eastern European DST */
.br
\fBDST_CAN\fP      /* Canada */
.br
\fBDST_GB\fP       /* Great Britain and Eire */
.br
\fBDST_RUM\fP      /* Romania */
.br
\fBDST_TUR\fP      /* Turkey */
.br
\fBDST_AUSTALT\fP  /* Australian style with shift in 1986 */
.fi
.in
.PP
Of course it turned out that the period in which
Daylight Saving Time is in force cannot be given
by a simple algorithm, one per country; indeed,
this period is determined by unpredictable political
decisions.
So this method of representing timezones
has been abandoned.
.SH SEE ALSO
.BR date (1),
.BR adjtimex (2),
.BR clock_gettime (2),
.BR time (2),
.BR ctime (3),
.BR ftime (3),
.BR timeradd (3),
.BR capabilities (7),
.BR time (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 Rickard E. Faith (faith@cs.unc.edu)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Historical remark, aeb, 2004-06-05
.TH GETUID 2 2010-11-22 "Linux" "Linux Programmer's Manual"
.SH NAME
getuid, geteuid \- get user identity
.SH SYNOPSIS
.B #include <unistd.h>
.br
.B #include <sys/types.h>
.sp
.B uid_t getuid(void);
.br
.B uid_t geteuid(void);
.SH DESCRIPTION
.BR getuid ()
returns the real user ID of the calling process.

.BR geteuid ()
returns the effective user ID of the calling process.
.SH ERRORS
These functions are always successful.
.SH CONFORMING TO
POSIX.1-2001, 4.3BSD.
.SH NOTES
.SS History
In UNIX\ V6 the
.BR getuid ()
call returned
.IR "(euid << 8) + uid" .
UNIX\ V7 introduced separate calls
.BR getuid ()
and
.BR geteuid ().

The original Linux
.BR getuid ()
and
.BR geteuid ()
system calls supported only 16-bit user IDs.
Subsequently, Linux 2.4 added
.BR getuid32 ()
and
.BR geteuid32 (),
supporting 32-bit IDs.
The glibc
.BR getuid ()
and
.BR geteuid ()
wrapper functions transparently deal with the variations across kernel versions.
.SH SEE ALSO
.BR getresuid (2),
.BR setreuid (2),
.BR setuid (2),
.BR credentials (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2006 Red Hat, Inc. All Rights Reserved.
.\" Written by Marcela Maslanova <mmaslano@redhat.com>
.\" and Copyright 2013, Michael kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH GETUNWIND 2 2014-09-21 Linux "Linux Programmer's Manual"
.SH NAME
getunwind \- copy the unwind data to caller's buffer
.SH SYNOPSIS
.nf
.B #include <syscall.h>
.B #include <linux/unwind.h>
.sp
.BI "long getunwind(void " *buf ", size_t " buf_size );
.fi

.IR Note :
There is no glibc wrapper for this system call; see NOTES.
.SH DESCRIPTION
.I Note: this function is obsolete.

The
IA-64-specific
.BR getunwind ()
system call copies the kernel's call frame
unwind data into the buffer pointed to by
.I buf
and returns the size of the unwind data;
this data describes the gate page (kernel code that
is mapped into user space).

The size of the buffer
.I buf
is specified in
.IR buf_size .
The data is copied only if
.I buf_size
is greater than or equal to the size of the unwind data and
.I buf
is not NULL;
otherwise, no data is copied, and the call succeeds,
returning the size that would be needed to store the unwind data.

The first part of the unwind data contains an unwind table.
The rest contains the associated unwind information, in no particular order.
The unwind table contains entries of the following form:

.nf
    u64 start;      (64-bit address of start of function)
    u64 end;        (64-bit address of end of function)
    u64 info;       (BUF-relative offset to unwind info)
.fi

An entry whose
.I start
value is zero indicates the end of the table.
For more information about the format, see the
.I IA-64 Software Conventions and Runtime Architecture
manual.
.SH RETURN VALUE
On success,
.BR getunwind ()
returns the size of the unwind data.
On error, \-1 is returned and
.I errno
is set to indicate the error.
.SH ERRORS
.BR getunwind ()
fails with the error
.B EFAULT
if the unwind info can't be stored in the space specified by
.IR buf .
.SH VERSIONS
This system call is available since Linux 2.4.
.SH CONFORMING TO
This system call is Linux-specific,
and is available only on the IA-64 architecture.
.SH NOTES
This system call has been deprecated.
The modern way to obtain the kernel's unwind data is via the gate DSO.
The address of the ELF header for this DSO
is passed to user level via
.BR AT_SYSINFO_EHDR
(see
.BR getauxval (3)).

Glibc does not provide a wrapper for this system call;
in the unlikely event that you want to call it, use
.BR syscall (2).
.SH SEE ALSO
.BR getauxval (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) Andreas Gruenbacher, February 2001
.\" Copyright (C) Silicon Graphics Inc, September 2001
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.TH GETXATTR 2 2015-05-07 "Linux" "Linux Programmer's Manual"
.SH NAME
getxattr, lgetxattr, fgetxattr \- retrieve an extended attribute value
.SH SYNOPSIS
.fam C
.nf
.B #include <sys/types.h>
.B #include <sys/xattr.h>
.sp
.BI "ssize_t getxattr(const char\ *" path ", const char\ *" name ,
.BI "                 void\ *" value ", size_t " size );
.BI "ssize_t lgetxattr(const char\ *" path ", const char\ *" name ,
.BI "                 void\ *" value ", size_t " size );
.BI "ssize_t fgetxattr(int " fd ", const char\ *" name ,
.BI "                 void\ *" value ", size_t " size );
.fi
.fam T
.SH DESCRIPTION
Extended attributes are
.IR name :\c
.I value
pairs associated with inodes (files, directories, symbolic links, etc.).
They are extensions to the normal attributes which are associated
with all inodes in the system (i.e., the
.BR stat (2)
data).
A complete overview of extended attributes concepts can be found in
.BR xattr (7).
.PP
.BR getxattr ()
retrieves the value of the extended attribute identified by
.I name
and associated with the given
.I path
in the filesystem.
The attribute value is placed in the buffer pointed to by
.IR value ;
.I size
specifies the size of that buffer.
The return value of the call is the number of bytes placed in
.IR value .
.PP
.BR lgetxattr ()
is identical to
.BR getxattr (),
except in the case of a symbolic link, where the link itself is
interrogated, not the file that it refers to.
.PP
.BR fgetxattr ()
is identical to
.BR getxattr (),
only the open file referred to by
.I fd
(as returned by
.BR open (2))
is interrogated in place of
.IR path .
.PP
An extended attribute
.I name
is a null-terminated string.
The name includes a namespace prefix; there may be several, disjoint
namespaces associated with an individual inode.
The value of an extended attribute is a chunk of arbitrary textual or
binary data that was assigned using
.BR setxattr (2).
.PP
If
.I size
is specified as zero, these calls return the current size of the
named extended attribute (and leave
.I value
unchanged).
This can be used to determine the size of the buffer that
should be supplied in a subsequent call.
(But, bear in mind that there is a possibility that the
attribute value may change between the two calls,
so that it is still necessary to check the return status
from the second call.)
.SH RETURN VALUE
On success, these calls return a nonnegative value which is
the size (in bytes) of the extended attribute value.
On failure, \-1 is returned and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B ENOATTR
The named attribute does not exist, or the process has no access to
this attribute.
.RB ( ENOATTR
is defined to be a synonym for
.BR ENODATA
in
.IR <attr/xattr.h> .)
.TP
.B ENOTSUP
Extended attributes are not supported by the filesystem, or are disabled.
.TP
.B ERANGE
The
.I size
of the
.I value
buffer is too small to hold the result.
.PP
In addition, the errors documented in
.BR stat (2)
can also occur.
.SH VERSIONS
These system calls have been available on Linux since kernel 2.4;
glibc support is provided since version 2.3.
.SH CONFORMING TO
These system calls are Linux-specific.
.\" .SH AUTHORS
.\" Andreas Gruenbacher,
.\" .RI < a.gruenbacher@computer.org >
.\" and the SGI XFS development team,
.\" .RI < linux-xfs@oss.sgi.com >.
.\" Please send any bug reports or comments to these addresses.
.SH EXAMPLE
See
.BR listxattr (2).
.SH SEE ALSO
.BR getfattr (1),
.BR setfattr (1),
.BR listxattr (2),
.BR open (2),
.BR removexattr (2),
.BR setxattr (2),
.BR stat (2),
.BR symlink (7),
.BR xattr (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 Rickard E. Faith (faith@cs.unc.edu)
.\" Portions extracted from linux/mm/swap.c:
.\"                Copyright (C) 1991, 1992  Linus Torvalds
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified 21 Aug 1994 by Michael Chastain <mec@shell.portal.com>:
.\"   Added text about calling restriction (new in kernel 1.1.20 I believe).
.\"   N.B. calling "idle" from user process used to hang process!
.\" Modified Thu Oct 31 14:41:15 1996 by Eric S. Raymond <esr@thyrsus.com>
.\" "
.TH IDLE 2 2012-12-31 "Linux" "Linux Programmer's Manual"
.SH NAME
idle \- make process 0 idle
.SH SYNOPSIS
.B #include <unistd.h>
.sp
.B int idle(void);
.SH DESCRIPTION
.BR idle ()
is an internal system call used during bootstrap.
It marks the process's pages as swappable, lowers its priority,
and enters the main scheduling loop.
.BR idle ()
never returns.
.PP
Only process 0 may call
.BR idle ().
Any user process, even a process with superuser permission,
will receive
.BR EPERM .
.SH RETURN VALUE
.BR idle ()
never returns for process 0, and always returns \-1 for a user process.
.SH ERRORS
.TP
.B EPERM
Always, for a user process.
.SH VERSIONS
Since Linux 2.3.13, this system call does not exist anymore.
.SH CONFORMING TO
This function is Linux-specific, and should not be used in programs
intended to be portable.
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2012 Michael Kerrisk <mtk.manpages@gmail.com>
.\" A few fragments remain from a version
.\" Copyright (C) 1996 Free Software Foundation, Inc.
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH INIT_MODULE 2 2014-05-10 "Linux" "Linux Programmer's Manual"
.SH NAME
init_module, finit_module \- load a kernel module
.SH SYNOPSIS
.nf
.BI "int init_module(void *" module_image ", unsigned long " len ,
.BI "                const char *" param_values );

.BI "int finit_module(int " fd ", const char *" param_values ,
.BI "                 int " flags );
.fi

.IR Note :
glibc provides no header file declaration of
.BR init_module ()
and no wrapper function for
.BR finit_module ();
see NOTES.
.SH DESCRIPTION
.BR init_module ()
loads an ELF image into kernel space,
performs any necessary symbol relocations,
initializes module parameters to values provided by the caller,
and then runs the module's
.I init
function.
This system call requires privilege.

The
.I module_image
argument points to a buffer containing the binary image
to be loaded;
.I len
specifies the size of that buffer.
The module image should be a valid ELF image, built for the running kernel.

The
.I param_values
argument is a string containing space-delimited specifications of the
values for module parameters (defined inside the module using
.BR module_param ()
and
.BR module_param_array ()).
The kernel parses this string and initializes the specified
parameters.
Each of the parameter specifications has the form:

.RI "        " name [\c
.BI = value\c
.RB [ ,\c
.IR value ...]]

The parameter
.I name
is one of those defined within the module using
.IR module_param ()
(see the Linux kernel source file
.IR include/linux/moduleparam.h ).
The parameter
.I value
is optional in the case of
.I bool
and
.I invbool
parameters.
Values for array parameters are specified as a comma-separated list.
.SS finit_module()
The
.BR finit_module ()
.\" commit 34e1169d996ab148490c01b65b4ee371cf8ffba2
.\" https://lwn.net/Articles/519010/
system call is like
.BR init_module (),
but reads the module to be loaded from the file descriptor
.IR fd .
It is useful when the authenticity of a kernel module
can be determined from its location in the filesystem;
in cases where that is possible,
the overhead of using cryptographically signed modules to
determine the authenticity of a module can be avoided.
The
.I param_values
argument is as for
.BR init_module ().

The
.I flags
argument modifies the operation of
.BR finit_module ().
It is a bit mask value created by ORing
together zero or more of the following flags:
.\" commit 2f3238aebedb243804f58d62d57244edec4149b2
.TP
.B MODULE_INIT_IGNORE_MODVERSIONS
Ignore symbol version hashes.
.TP
.B MODULE_INIT_IGNORE_VERMAGIC
Ignore kernel version magic.
.PP
There are some safety checks built into a module to ensure that
it matches the kernel against which it is loaded.
.\" http://www.tldp.org/HOWTO/Module-HOWTO/basekerncompat.html
.\" is dated, but informative
These checks are recorded when the module is built and
verified when the module is loaded.
First, the module records a "vermagic" string containing
the kernel version number and prominent features (such as the CPU type).
Second, if the module was built with the
.B CONFIG_MODVERSIONS
configuration option enabled,
a version hash is recorded for each symbol the module uses.
This hash is based on the types of the arguments and return value
for the function named by the symbol.
In this case, the kernel version number within the
"vermagic" string is ignored,
as the symbol version hashes are assumed to be sufficiently reliable.

Using the
.B MODULE_INIT_IGNORE_VERMAGIC
flag indicates that the "vermagic" string is to be ignored, and the
.B MODULE_INIT_IGNORE_MODVERSIONS
flag indicates that the symbol version hashes are to be ignored.
If the kernel is built to permit forced loading (i.e., configured with
.BR CONFIG_MODULE_FORCE_LOAD ),
then loading will continue, otherwise it will fail with
.B ENOEXEC
as expected for malformed modules.
.SH RETURN VALUE
On success, these system calls return 0.
On error, \-1 is returned and
.I errno
is set appropriately.
.SH ERRORS
.TP
.BR EBADMSG " (since Linux 3.7)"
Module signature is misformatted.
.TP
.B EBUSY
Timeout while trying to resolve a symbol reference by this module.
.TP
.B EFAULT
An address argument referred to a location that
is outside the process's accessible address space.
.TP
.BR ENOKEY " (since Linux 3.7)"
.\" commit 48ba2462ace6072741fd8d0058207d630ce93bf1
.\" commit 1d0059f3a468825b5fc5405c636a2f6e02707ffa
.\" commit 106a4ee258d14818467829bf0e12aeae14c16cd7
Module signature is invalid or
the kernel does not have a key for this module.
This error is returned only if the kernel was configured with
.BR CONFIG_MODULE_SIG_FORCE ;
if the kernel was not configured with this option,
then an invalid or unsigned module simply taints the kernel.
.TP
.B ENOMEM
Out of memory.
.TP
.B EPERM
The caller was not privileged
(did not have the
.B CAP_SYS_MODULE
capability),
or module loading is disabled
(see
.IR /proc/sys/kernel/modules_disabled
in
.BR proc (5)).
.PP
The following errors may additionally occur for
.BR init_module ():
.TP
.B EEXIST
A module with this name is already loaded.
.TP
.B EINVAL
.I param_values
is invalid, or some part of the ELF image in
.IR module_image
contains inconsistencies.
.\" .TP
.\" .BR EINVAL " (Linux 2.4 and earlier)"
.\" Some
.\" .I image
.\" slot is filled in incorrectly,
.\" .I image\->name
.\" does not correspond to the original module name, some
.\" .I image\->deps
.\" entry does not correspond to a loaded module,
.\" or some other similar inconsistency.
.TP
.B ENOEXEC
The binary image supplied in
.I module_image
is not an ELF image,
or is an ELF image that is invalid or for a different architecture.
.PP
The following errors may additionally occur for
.BR finit_module ():
.TP
.B EBADF
The file referred to by
.I fd
is not opened for reading.
.TP
.B EFBIG
The file referred to by
.I fd
is too large.
.TP
.B EINVAL
.I flags
is invalid.
.TP
.B ENOEXEC
.I fd
does not refer to an open file.
.PP
In addition to the above errors, if the module's
.I init
function is executed and returns an error, then
.BR init_module ()
or
.BR finit_module ()
fails and
.I errno
is set to the value returned by the
.I init
function.
.SH VERSIONS
.BR finit_module ()
is available since Linux 3.8.
.SH CONFORMING TO
.BR init_module ()
and
.BR finit_module ()
are Linux-specific.
.SH NOTES
The
.BR init_module ()
system call is not supported by glibc.
No declaration is provided in glibc headers, but,
through a quirk of history, glibc does export an ABI for this system call.
Therefore, in order to employ this system call,
it is sufficient to manually declare the interface in your code;
alternatively, you can invoke the system call using
.BR syscall (2).

Glibc does not provide a wrapper for
.BR finit_module ();
call it using
.BR syscall (2).

Information about currently loaded modules can be found in
.IR /proc/modules
and in the file trees under the per-module subdirectories under
.IR /sys/module .

See the Linux kernel source file
.I include/linux/module.h
for some useful background information.
.SS Linux 2.4 and earlier
.PP
In Linux 2.4 and earlier, the
.BR init_module ()
system call was rather different:

.B "    #include <linux/module.h>"

.BI "    int init_module(const char *" name ", struct module *" image );

(User-space applications can detect which version of
.BR init_module ()
is available by calling
.BR query_module ();
the latter call fails with the error
.BR ENOSYS
on Linux 2.6 and later.)

The older version of the system call
loads the relocated module image pointed to by
.I image
into kernel space and runs the module's
.I init
function.
The caller is responsible for providing the relocated image (since
Linux 2.6, the
.BR init_module ()
system call does the relocation).
.PP
The module image begins with a module structure and is followed by
code and data as appropriate.
Since Linux 2.2, the module structure is defined as follows:
.PP
.in +4n
.nf
struct module {
    unsigned long         size_of_struct;
    struct module        *next;
    const char           *name;
    unsigned long         size;
    long                  usecount;
    unsigned long         flags;
    unsigned int          nsyms;
    unsigned int          ndeps;
    struct module_symbol *syms;
    struct module_ref    *deps;
    struct module_ref    *refs;
    int                 (*init)(void);
    void                (*cleanup)(void);
    const struct exception_table_entry *ex_table_start;
    const struct exception_table_entry *ex_table_end;
#ifdef __alpha__
    unsigned long gp;
#endif
};
.fi
.in
.PP
All of the pointer fields, with the exception of
.I next
and
.IR refs ,
are expected to point within the module body and be
initialized as appropriate for kernel space, that is, relocated with
the rest of the module.
.SH SEE ALSO
.BR create_module (2),
.BR delete_module (2),
.BR query_module (2),
.BR lsmod (8),
.BR modprobe (8)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2005 Robert Love
.\" and Copyright, 2006 Michael Kerrisk
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.\" 2005-07-19 Robert Love <rlove@rlove.org> - initial version
.\" 2006-02-07 mtk, various changes
.\"
.TH INOTIFY_ADD_WATCH 2 2014-07-08 "Linux" "Linux Programmer's Manual"
.SH NAME
inotify_add_watch \- add a watch to an initialized inotify instance
.SH SYNOPSIS
.B #include <sys/inotify.h>
.sp
.BI "int inotify_add_watch(int " fd ", const char *" pathname ", uint32_t " mask );
.SH DESCRIPTION
.BR inotify_add_watch ()
adds a new watch, or modifies an existing watch,
for the file whose location is specified in
.IR pathname ;
the caller must have read permission for this file.
The
.I fd
argument is a file descriptor referring to the
inotify instance whose watch list is to be modified.
The events to be monitored for
.I pathname
are specified in the
.I mask
bit-mask argument.
See
.BR inotify (7)
for a description of the bits that can be set in
.IR mask .

A successful call to
.BR inotify_add_watch ()
returns a unique watch descriptor for this inotify instance,
for the filesystem object that corresponds to
.IR pathname .
If the filesystem object
was not previously being watched by this inotify instance,
then the watch descriptor is newly allocated.
If the filesystem object was already being watched
(perhaps via a different link to the same object), then the descriptor
for the existing watch is returned.

The watch descriptor is returned by later
.BR read (2)s
from the inotify file descriptor.
These reads fetch
.I inotify_event
structures (see
.BR inotify (7))
indicating filesystem events;
the watch descriptor inside this structure identifies
the object for which the event occurred.
.SH RETURN VALUE
On success,
.BR inotify_add_watch ()
returns a nonnegative watch descriptor.
On error, \-1 is returned and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EACCES
Read access to the given file is not permitted.
.TP
.B EBADF
The given file descriptor is not valid.
.TP
.B EFAULT
.I pathname
points outside of the process's accessible address space.
.TP
.B EINVAL
The given event mask contains no valid events; or
.I fd
is not an inotify file descriptor.
.TP
.B ENAMETOOLONG
.I pathname
is too long.
.TP
.B ENOENT
A directory component in
.I pathname
does not exist or is a dangling symbolic link.
.TP
.B ENOMEM
Insufficient kernel memory was available.
.TP
.B ENOSPC
The user limit on the total number of inotify watches was reached or the
kernel failed to allocate a needed resource.
.SH VERSIONS
Inotify was merged into the 2.6.13 Linux kernel.
.SH CONFORMING TO
This system call is Linux-specific.
.SH SEE ALSO
.BR inotify_init (2),
.BR inotify_rm_watch (2),
.BR inotify (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2005 Robert Love
.\" and Copyright (C) 2008, Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.\" 2005-07-19 Robert Love <rlove@rlove.org> - initial version
.\" 2006-02-07 mtk, minor changes
.\" 2008-10-10 mtk: add description of inotify_init1()
.\"
.TH INOTIFY_INIT 2 2014-03-28 "Linux" "Linux Programmer's Manual"
.SH NAME
inotify_init, inotify_init1 \- initialize an inotify instance
.SH SYNOPSIS
.nf
.B #include <sys/inotify.h>
.sp
.B "int inotify_init(void);"
.BI "int inotify_init1(int " flags );
.fi
.SH DESCRIPTION
For an overview of the inotify API, see
.BR inotify (7).

.BR inotify_init ()
initializes a new inotify instance and returns a file descriptor associated
with a new inotify event queue.

If
.I flags
is 0, then
.BR inotify_init1 ()
is the same as
.BR inotify_init ().
The following values can be bitwise ORed in
.IR flags
to obtain different behavior:
.TP 12
.B IN_NONBLOCK
Set the
.BR O_NONBLOCK
file status flag on the new open file description.
Using this flag saves extra calls to
.BR fcntl (2)
to achieve the same result.
.TP
.B IN_CLOEXEC
Set the close-on-exec
.RB ( FD_CLOEXEC )
flag on the new file descriptor.
See the description of the
.B O_CLOEXEC
flag in
.BR open (2)
for reasons why this may be useful.
.SH RETURN VALUE
On success, these system calls return a new file descriptor.
On error, \-1 is returned, and
.I errno
is set to indicate the error.
.SH ERRORS
.TP
.B EINVAL
.RB ( inotify_init1 ())
An invalid value was specified in
.IR flags .
.TP
.B EMFILE
The user limit on the total number of inotify instances has been reached.
.TP
.B ENFILE
The system limit on the total number of file descriptors has been reached.
.TP
.B ENOMEM
Insufficient kernel memory is available.
.SH VERSIONS
.BR inotify_init ()
first appeared in Linux 2.6.13;
library support was added to glibc in version 2.4.
.BR inotify_init1 ()
was added in Linux 2.6.27;
library support was added to glibc in version 2.9.
.SH CONFORMING TO
These system calls are Linux-specific.
.SH SEE ALSO
.BR inotify_add_watch (2),
.BR inotify_rm_watch (2),
.BR inotify (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2005 Robert Love
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.\" 2005-07-19 Robert Love <rlove@rlove.org> - initial version
.\" 2006-02-07 mtk, minor changes
.\"
.TH INOTIFY_RM_WATCH 2 2010-10-15 "Linux" "Linux Programmer's Manual"
.SH NAME
inotify_rm_watch \- remove an existing watch from an inotify instance
.SH SYNOPSIS
.B #include <sys/inotify.h>
.sp
.BI "int inotify_rm_watch(int " fd ", int " wd );
.\" Before glibc 2.10, the second argument was types as uint32_t.
.\" http://sources.redhat.com/bugzilla/show_bug.cgi?id=7040
.SH DESCRIPTION
.BR inotify_rm_watch ()
removes the watch associated with the watch descriptor
.I wd
from the inotify instance associated with the file descriptor
.IR fd .

Removing a watch causes an
.B IN_IGNORED
event to be generated for this watch descriptor.
(See
.BR inotify (7).)
.SH RETURN VALUE
On success,
.BR inotify_rm_watch ()
returns zero.
On error, \-1 is returned and
.I errno
is set to indicate the cause of the error.
.SH ERRORS
.TP
.B EBADF
.I fd
is not a valid file descriptor.
.TP
.B EINVAL
The watch descriptor
.I wd
is not valid; or
.I fd
is not an inotify file descriptor.
.SH VERSIONS
Inotify was merged into the 2.6.13 Linux kernel.
.SH CONFORMING TO
This system call is Linux-specific.
.SH SEE ALSO
.BR inotify_add_watch (2),
.BR inotify_init (2),
.BR inotify (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2007 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" 2007-10-23 mtk: moved the _syscallN specific material to the
.\"     new _syscall(2) page, and substantially enhanced and rewrote
.\"     the remaining material on this page.
.\"
.TH INTRO 2 2014-02-20 "Linux" "Linux Programmer's Manual"
.SH NAME
intro \- introduction to system calls
.SH DESCRIPTION
Section 2 of the manual describes the Linux system calls.
A system call is an entry point into the Linux kernel.
Usually, system calls are not invoked directly:
instead, most system calls have corresponding C library
wrapper functions which perform the steps required
(e.g., trapping to kernel mode) in order to invoke
the system call.
Thus, making a system call looks the same as invoking a normal
library function.

In many cases, the C library wrapper function does nothing more than:
.IP * 3
copying arguments and the unique system call number to the
registers where the kernel expects them;
.IP *
trapping to kernel mode,
at which point the kernel does the real work of the system call;
.IP *
setting
.I errno
if the system call returns an error number when the kernel returns the
CPU to user mode.
.LP
However, in a few cases, a wrapper function may do rather more than this,
for example, performing some preprocessing
of the arguments before trapping to kernel mode,
or postprocessing of values returned by the system call.
Where this is the case, the manual pages in Section 2 generally
try to note the details of both the (usually GNU) C library API
interface and the raw system call.
Most commonly, the main DESCRIPTION will focus on the C library interface,
and differences for the system call are covered in the NOTES section.

For a list of the Linux system calls, see
.BR syscalls (2).
.SH RETURN VALUE
On error, most system calls return a negative error number
(i.e., the negated value of one of the constants described in
.BR errno (3)).
The C library wrapper hides this detail from the caller: when a
system call returns a negative value, the wrapper copies the
absolute value into the
.I errno
variable, and returns \-1 as the return value of the wrapper.

The value returned by a successful system call depends on the call.
Many system calls return 0 on success, but some can return nonzero
values from a successful call.
The details are described in the individual manual pages.

In some cases,
the programmer must define a feature test macro in order to obtain
the declaration of a system call from the header file specified
in the man page SYNOPSIS section.
(Where required, these feature test macros must be defined before including
.I any
header files.)
In such cases, the required macro is described in the man page.
For further information on feature test macros, see
.BR feature_test_macros (7).
.SH CONFORMING TO
Certain terms and abbreviations are used to indicate UNIX variants
and standards to which calls in this section conform.
See
.BR standards (7).
.SH NOTES
.SS Calling directly
In most cases, it is unnecessary to invoke a system call directly,
but there are times when the Standard C library does not implement
a nice wrapper function for you.
In this case, the programmer must manually invoke the system call using
.BR syscall (2).
Historically, this was also possible using one of the _syscall macros
described in
.BR _syscall (2).
.SS Authors and copyright conditions
Look at the header of the manual page source for the author(s) and copyright
conditions.
Note that these can be different from page to page!
.SH SEE ALSO
.ad l
.nh
.BR _syscall (2),
.BR syscall (2),
.BR syscalls (2),
.BR errno (3),
.BR intro (3),
.BR capabilities (7),
.BR credentials (7),
.BR feature_test_macros (7),
.BR mq_overview (7),
.BR path_resolution (7),
.BR pipe (7),
.BR pty (7),
.BR sem_overview (7),
.BR shm_overview (7),
.BR signal (7),
.BR socket (7),
.BR standards (7),
.BR svipc (7),
.BR symlink (7),
.BR time (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2003 Free Software Foundation, Inc.
.\"
.\" %%%LICENSE_START(GPL_NOVERSION_ONELINE)
.\" This file is distributed according to the GNU General Public License.
.\" %%%LICENSE_END
.\"
.TH IO_CANCEL 2 2013-04-10 "Linux" "Linux Programmer's Manual"
.SH NAME
io_cancel \- cancel an outstanding asynchronous I/O operation
.SH SYNOPSIS
.nf
.BR "#include <linux/aio_abi.h>" "          /* Defines needed types */"

.BI "int io_cancel(aio_context_t " ctx_id ", struct iocb *" iocb ,
.BI "              struct io_event *" result );
.fi

.IR Note :
There is no glibc wrapper for this system call; see NOTES.
.SH DESCRIPTION
.PP
The
.BR io_cancel ()
system call
attempts to cancel an asynchronous I/O operation previously submitted with
.BR io_submit (2).
The
.I iocb
argument describes the operation to be canceled and the
.I ctx_id
argument is the AIO context to which the operation was submitted.
If the operation is successfully canceled, the event will be copied into
the memory pointed to by
.I result
without being placed into the
completion queue.
.SH RETURN VALUE
On success,
.BR io_cancel ()
returns 0.
For the failure return, see NOTES.
.SH ERRORS
.TP
.B EAGAIN
The \fIiocb\fP specified was not canceled.
.TP
.B EFAULT
One of the data structures points to invalid data.
.TP
.B EINVAL
The AIO context specified by \fIctx_id\fP is invalid.
.TP
.B ENOSYS
.BR io_cancel ()
is not implemented on this architecture.
.SH VERSIONS
.PP
The asynchronous I/O system calls first appeared in Linux 2.5.
.SH CONFORMING TO
.PP
.BR io_cancel ()
is Linux-specific and should not be used
in programs that are intended to be portable.
.SH NOTES
Glibc does not provide a wrapper function for this system call.
You could invoke it using
.BR syscall (2).
But instead, you probably want to use the
.BR io_cancel ()
wrapper function provided by
.\" http://git.fedorahosted.org/git/?p=libaio.git
.IR libaio .

Note that the
.I libaio
wrapper function uses a different type
.RI ( io_context_t )
.\" But glibc is confused, since <libaio.h> uses 'io_context_t' to declare
.\" the system call.
for the
.I ctx_id
argument.
Note also that the
.I libaio
wrapper does not follow the usual C library conventions for indicating errors:
on error it returns a negated error number
(the negative of one of the values listed in ERRORS).
If the system call is invoked via
.BR syscall (2),
then the return value follows the usual conventions for
indicating an error: \-1, with
.I errno
set to a (positive) value that indicates the error.
.SH SEE ALSO
.BR io_destroy (2),
.BR io_getevents (2),
.BR io_setup (2),
.BR io_submit (2),
.BR aio (7)
.\" .SH AUTHOR
.\" Kent Yoder.
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1980, 1991 Regents of the University of California.
.\" All rights reserved.
.\"
.\" %%%LICENSE_START(BSD_4_CLAUSE_UCB)
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\" %%%LICENSE_END
.\"
.\"     @(#)ioctl.2	6.4 (Berkeley) 3/10/91
.\"
.\" Modified 1993-07-23 by Rik Faith <faith@cs.unc.edu>
.\" Modified 1996-10-22 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified 1999-06-25 by Rachael Munns <vashti@dream.org.uk>
.\" Modified 2000-09-21 by Andries Brouwer <aeb@cwi.nl>
.\"
.TH IOCTL 2 2015-05-07 "Linux" "Linux Programmer's Manual"
.SH NAME
ioctl \- control device
.SH SYNOPSIS
.B #include <sys/ioctl.h>
.sp
.BI "int ioctl(int " fd ", unsigned long " request ", ...);"
.\" POSIX says 'request' is int, but glibc has the above
.\" See https://bugzilla.kernel.org/show_bug.cgi?id=42705
.SH DESCRIPTION
The
.BR ioctl ()
function manipulates the underlying device parameters of special files.
In particular, many operating characteristics of character special files
(e.g., terminals) may be controlled with
.BR ioctl ()
requests.
The argument
.I fd
must be an open file descriptor.
.PP
The second argument is a device-dependent request code.
The third argument is an untyped pointer to memory.
It's traditionally
.BI "char *" argp
(from the days before
.B "void *"
was valid C), and will be so named for this discussion.
.PP
An
.BR ioctl ()
.I request
has encoded in it whether the argument is an
.I in
parameter or
.I out
parameter, and the size of the argument
.I argp
in bytes.
Macros and defines used in specifying an
.BR ioctl ()
.I request
are located in the file
.IR <sys/ioctl.h> .
.SH RETURN VALUE
Usually, on success zero is returned.
A few
.BR ioctl ()
requests use the return value as an output parameter
and return a nonnegative value on success.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.TP 0.7i
.B EBADF
.I fd
is not a valid descriptor.
.TP
.B EFAULT
.I argp
references an inaccessible memory area.
.TP
.B EINVAL
.I request
or
.I argp
is not valid.
.TP
.B ENOTTY
.I fd
is not associated with a character special device.
.TP
.B ENOTTY
The specified request does not apply to the kind of object that the
descriptor
.I fd
references.
.SH CONFORMING TO
No single standard.
Arguments, returns, and semantics of
.BR ioctl ()
vary according to the device driver in question (the call is used as a
catch-all for operations that don't cleanly fit the UNIX stream I/O
model).
See
.BR ioctl_list (2)
for a list of many of the known
.BR ioctl ()
calls.
The
.BR ioctl ()
function call appeared in Version 7 AT&T UNIX.
.SH NOTES
In order to use this call, one needs an open file descriptor.
Often the
.BR open (2)
call has unwanted side effects, that can be avoided under Linux
by giving it the
.B O_NONBLOCK
flag.
.SH SEE ALSO
.BR execve (2),
.BR fcntl (2),
.BR ioctl_fat (2),
.BR ioctl_list (2),
.BR open (2),
.\" .BR mt (4),
.BR console_ioctl (4),
.BR tty_ioctl (4),
.BR sd (4),
.BR tty (4)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2014, Heinrich Schuchardt <xypron.glpk@gmx.de>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of
.\" this manual under the conditions for verbatim copying, provided that
.\" the entire resulting derived work is distributed under the terms of
.\" a permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume
.\" no responsibility for errors or omissions, or for damages resulting
.\" from the use of the information contained herein.  The author(s) may
.\" not have taken the same level of care in the production of this
.\" manual, which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.TH IOCTl-FAT 2 2015-02-21 "Linux" "Linux Programmer's Manual"
.SH NAME
ioctl_fat \- manipulating the FAT filesystem
.SH SYNOPSIS
.nf
.B #include <linux/msdos_fs.h>
.br
.B #include <sys/ioctl.h>
.sp
.BI "int ioctl(int " fd ", FAT_IOCTL_GET_ATTRIBUTES, uint32_t * " attr );
.BI "int ioctl(int " fd ", FAT_IOCTL_SET_ATTRIBUTES, uint32_t * " attr );
.BI "int ioctl(int " fd ", FAT_IOCTL_GET_VOLUME_ID, uint32_t * " id );
.BI "int ioctl(int " fd ", VFAT_IOCTL_READDIR_BOTH,
.BI "          struct __fat_dirent[2] " entry );
.BI "int ioctl(int " fd ", VFAT_IOCTL_READDIR_SHORT,
.BI "          struct __fat_dirent[2] " entry );
.SH DESCRIPTION
The
.BR ioctl (2)
system call can be used to read and write metadata of FAT filesystems that
are not accessible using other system calls.
.SS Reading and setting file attributes
Files and directories in the FAT filesystem possess an attribute bit mask that
can be read with
.B FAT_IOCTL_GET_ATTRIBUTES
and written with
.BR FAT_IOCTL_SET_ATTRIBUTES .
.PP
The
.I fd
argument contains a file descriptor for a file or directory.
It is sufficient to create the file descriptor by calling
.BR open (2)
with the
.B O_RDONLY
flag.
.PP
The
.I attr
argument contains a pointer to a bit mask.
The bits of the bit mask are:
.TP
.B ATTR_RO
This bit specifies that the file or directory is read-only.
.TP
.B ATTR_HIDDEN
This bit specifies that the file or directory is hidden.
.TP
.B ATTR_SYS
This bit specifies that the file is a system file.
.TP
.B ATTR_VOLUME
This bit specifies that the file is a volume label.
This attribute is read-only.
.TP
.B ATTR_DIR
This bit specifies that this is a directory.
This attribute is read-only.
.TP
.B ATTR_ARCH
This bit indicates that this file or directory should be archived.
It is set when a file is created or modified.
It is reset by an archiving system.
.PP
The zero value
.B ATTR_NONE
can be used to indicate that no attribute bit is set.
.SS Reading the volume label
FAT filesystems are identified by a volume label.
The volume label can be read with
.BR FAT_IOCTL_GET_VOLUME_ID .
.PP
The
.I fd
argument can be a file descriptor for any file or directory of the
filesystem.
It is sufficient to create the file descriptor by calling
.BR open (2)
with the
.B O_RDONLY
flag.
.PP
The
.I id
argument is a pointer to the field that will be filled with the volume ID.
Typically the volume label is displayed to the user as a group of two
16-bit fields:
.PP
.in +4n
.nf
printf("Volume ID %4x-%4x\\n", id >> 16, id & 0xFFFF);
.fi
.in
.SS Reading short file names of a directory
A file or directory on a FAT filesystem always has a short filename
consisting of up to 8 capital letters, optionally followed by a period
and up to 3 capital letters for the file extension.
If the actual filename does not fit into this scheme, it is stored
as a long filename of up to 255 UTF-16 characters.
.PP
The short filenames in a directory can be read with
.BR VFAT_IOCTL_READDIR_SHORT .
.B VFAT_IOCTL_READDIR_BOTH
reads both the short and the long filenames.
.PP
The
.I fd
argument must be a file descriptor for a directory.
It is sufficient to create the file descriptor by calling
.BR open (2)
with the
.B O_RDONLY
flag.
The file descriptor can be used only once to iterate over the directory
entries by calling
.BR ioctl (2)
repeatedly.
.PP
The
.I entry
argument is a two-element array of the following structures:

.in +4n
.nf
struct __fat_dirent {
    long            d_ino;
    __kernel_off_t  d_off;
    uint32_t short  d_reclen;
    char            d_name[256];
};
.fi
.in
.PP
The first entry in the array is for the short filename.
The second entry is for the long filename.
.PP
The
.I d_ino
and
.I d_off
fields are filled only for long filenames.
The
.I d_ino
field holds the inode number of the directory.
The
.I d_off
field holds the offset of the file entry in the directory.
As these values are not available for short filenames, the user code should
simply ignore them.
.PP
The field
.I d_reclen
contains the length of the filename in the field
.IR d_name .
To keep backward compatibility, a length of 0 for the short filename signals
that the end of the directory has been reached.
However, the preferred method for detecting the end of the directory
is to test the
.BR ioctl ()
return value.
If no long filename exists, field
.I d_reclen
is set to 0 and
.I d_name
is a character string of length 0 for the long filename.
.SH RETURN VALUE
On error, \-1 is returned, and
.I errno
is set to indicate the error.
.PP
For
.B VFAT_IOCTL_READDIR_BOTH
and
.B VFAT_IOCTL_READDIR_SHORT
a return value of 1 signals that a new directory entry has been read and
a return value of 0 signals that the end of the directory has been reached.
.SH ERRORS
.TP
.B ENOENT
This error is returned by
.B VFAT_IOCTL_READDIR_BOTH
and
.B VFAT_IOCTL_READDIR_SHORT
if the file descriptor
.I fd
refers to a removed, but still open directory.
.TP
.B ENOTDIR
This error is returned by
.B VFAT_IOCTL_READDIR_BOTH
and
.B VFAT_IOCTL_READDIR_SHORT
if the file descriptor
.I fd
does not refer to a directory.
.TP
.B ENOTTY
The file descriptor
.I fd
does not refer to an object in a FAT filesystem.
.PP
For further error values, see
.BR ioctl (2).
.SH VERSIONS
.BR VFAT_IOCTL_READDIR_BOTH
and
.B VFAT_IOCTL_READDIR_SHORT
first appeared in Linux 2.0.

.BR FAT_IOCTL_GET_ATTRIBUTES
and
.BR FAT_IOCTL_SET_ATTRIBUTES
first appeared
.\" just before we got Git history
in Linux 2.6.12.

.B FAT_IOCTL_GET_VOLUME_ID
was introduced in version 3.11
.\" commit 6e5b93ee55d401f1619092fb675b57c28c9ed7ec
of the Linux kernel.
.SH CONFORMING TO
This API is Linux-specific.
.SH EXAMPLE
.SS Toggling the archive flag
The following program demonstrates the usage of
.BR ioctl ()
to manipulate file attributes.
The program reads and displays the archive attribute of a file.
After inverting the value of the attribute,
the program reads and displays the attribute again.
.PP
The following was recorded when applying the program for the file
.IR /mnt/user/foo :

.in +4n
.nf
# ./toggle_fat_archive_flag /mnt/user/foo
Archive flag is set
Toggling archive flag
Archive flag is not set
.fi
.in
.SS Program source (toggle_fat_archive_flag.c)
.in +4n
.nf
#include <fcntl.h>
#include <linux/msdos_fs.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <sys/ioctl.h>
#include <unistd.h>

/*
 * Read file attributes of a file on a FAT filesystem.
 * Output the state of the archive flag.
 */
static uint32_t
readattr(int fd)
{
    uint32_t attr;
    int ret;

    ret = ioctl(fd, FAT_IOCTL_GET_ATTRIBUTES, &attr);
    if (ret == \-1) {
        perror("ioctl");
        exit(EXIT_FAILURE);
    }

    if (attr & ATTR_ARCH)
        printf("Archive flag is set\\n");
    else
        printf("Archive flag is not set\\n");

    return attr;
}

int
main(int argc, char *argv[])
{
    uint32_t attr;
    int fd;
    int ret;

    if (argc != 2) {
        printf("Usage: %s FILENAME\\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    fd = open(argv[1], O_RDONLY);
    if (fd == \-1) {
        perror("open");
        exit(EXIT_FAILURE);
    }

    /*
     * Read and display the FAT file attributes.
     */
    attr = readattr(fd);

    /*
     * Invert archive attribute.
     */
    printf("Toggling archive flag\\n");
    attr ^= ATTR_ARCH;

    /*
     * Write the changed FAT file attributes.
     */
    ret = ioctl(fd, FAT_IOCTL_SET_ATTRIBUTES, &attr);
    if (ret == \-1) {
        perror("ioctl");
        exit(EXIT_FAILURE);
    }

    /*
     * Read and display the FAT file attributes.
     */
    readattr(fd);

    close(fd);

    exit(EXIT_SUCCESS);
}
.fi
.in
.SS Reading the volume label
The following program demonstrates the use of
.BR ioctl (2)
to display the volume label of a FAT filesystem.
.PP
The following output was recorded when applying the program for
directory
.IR /mnt/user :

.in +4n
.nf
$ ./display_fat_volume_id /mnt/user
Volume ID 6443-6241
.fi
.in
.SS Program source (display_fat_volume_id.c)
.in +4n
.nf
#include <fcntl.h>
#include <linux/msdos_fs.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <sys/ioctl.h>
#include <unistd.h>

int
main(int argc, char *argv[])
{
    uint32_t id;
    int fd;
    int ret;

    if (argc != 2) {
        printf("Usage: %s FILENAME\\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    fd = open(argv[1], O_RDONLY);
    if (fd == \-1) {
        perror("open");
        exit(EXIT_FAILURE);
    }

    /*
     * Read volume ID.
     */
    ret = ioctl(fd, FAT_IOCTL_GET_VOLUME_ID, &id);
    if (ret == \-1) {
        perror("ioctl");
        exit(EXIT_FAILURE);
    }

    /*
     * Format the output as two groups of 16 bits each.
     */
    printf("Volume ID %4x\-%4x\\n", id >> 16, id & 0xFFFF);

    close(fd);

    exit(EXIT_SUCCESS);
}
.fi
.in
.SS Listing a directory
The following program demonstrates the use of
.BR ioctl (2)
to list a directory.
.PP
The following was recorded when applying the program to the directory
.IR /mnt/user :

.in +4n
.nf
$ ./fat_dir /mnt/user
\[char46] -> ''
\[char46]. -> ''
ALONGF~1.TXT -> 'a long filename.txt'
UPPER.TXT -> ''
LOWER.TXT -> 'lower.txt'
.fi
.in
.SS Program source
.in +4n
.nf
#include <fcntl.h>
#include <linux/msdos_fs.h>
#include <stdio.h>
#include <stdlib.h>
#include <sys/ioctl.h>
#include <unistd.h>

int
main(int argc, char *argv[])
{
    struct __fat_dirent entry[2];
    int fd;
    int ret;

    if (argc != 2) {
        printf("Usage: %s DIRECTORY\\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    /*
     * Open file descriptor for the directory.
     */
    fd = open(argv[1], O_RDONLY | O_DIRECTORY);
    if (fd == \-1) {
        perror("open");
        exit(EXIT_FAILURE);
    }

    for (;;) {

        /*
         * Read next directory entry.
         */
        ret = ioctl( fd, VFAT_IOCTL_READDIR_BOTH, entry);

        /*
         * If an error occurs, the return value is \-1.
         * If the end of the directory list has been reached,
         * the return value is 0.
         * For backward compatibility the end of the directory
         * list is also signaled by d_reclen == 0.
         */
        if (ret < 1)
            break;

        /*
         * Write both the short name and the long name.
         */
        printf("%s \-> '%s'\\n", entry[0].d_name, entry[1].d_name);
    }

    if (ret == \-1) {
        perror("VFAT_IOCTL_READDIR_BOTH");
        exit(EXIT_FAILURE);
    }

    /*
     * Close the file descriptor.
     */
    close(fd);

    exit(EXIT_SUCCESS);
}
.fi
.in
.SH SEE ALSO
.BR ioctl (2)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Ioctl List 1.3.27 is copyright 1995 by Michael Elizabeth Chastain.
.\" Michael Elizabeth Chastain
.\" <mec@duracef.shout.net>
.\"
.\" %%%LICENSE_START(GPLv2_MISC)
.\" It is licensed under the Gnu Public License, Version 2.
.\" %%%LICENSE_END
.\"
.\" Ioctl List 1.3.27
.\" Sun 17 Sep 1995
.\"
.\" // Copyright
.\"
.\"
.\"
.\" // Change Log
.\"
.\" 1.3.27	421 ioctls.
.\" 	Type information for non-pointer args.
.\" 	SIOCDEVPRIVATE, SIOCPROTOPRIVATE ioctls.
.\" 	Descriptions of extended arguments.
.\"
.\" 1.2.9	365 ioctls.
.\" 	First public version.
.\"
.\"
.\" 2007-12-29 Alain Portal <aportal@univ-montp2.fr> and Michael Kerrisk
.\"     <mtk.manpages@gmail.com>:
.\"          Various formatting improvements
.\"
.TH IOCTL_LIST 2 2015-03-29 "Linux" "Linux Programmer's Manual"
.SH NAME
ioctl_list \- list of ioctl calls in Linux/i386 kernel
.SH DESCRIPTION
This is Ioctl List 1.3.27, a list of ioctl calls in Linux/i386 kernel
1.3.27.
It contains 421 ioctls from
.IR </usr/include/{asm,linux}/*.h> .
For each ioctl, its numerical value, its name, and its argument
type are given.
.PP
An argument type of
.I "const struct foo\ *"
means the argument is input to the kernel.
.I "struct foo\ *"
means the kernel outputs the argument.
If the kernel uses the argument for both input and output, this is
marked with \fI//\ I-O\fP.
.PP
Some ioctls take more arguments or return more values than a single
structure.
These are marked \fI//\ MORE\fP and documented further in a
separate section.
.PP
This list is very incomplete.
.SS ioctl structure
.\" added two sections - aeb
Ioctl command values are 32-bit constants.
In principle these constants are completely arbitrary, but people have
tried to build some structure into them.
.LP
The old Linux situation was that of mostly 16-bit constants, where the
last byte is a serial number, and the preceding byte(s) give a type
indicating the driver.
Sometimes the major number was used: 0x03
for the
.B HDIO_*
ioctls, 0x06 for the
.B LP*
ioctls.
And sometimes
one or more ASCII letters were used.
For example,
.B TCGETS
has value
0x00005401, with 0x54 = \(aqT\(aq indicating the terminal driver, and
.B CYGETTIMEOUT
has value 0x00435906, with 0x43 0x59 = \(aqC\(aq \(aqY\(aq
indicating the cyclades driver.
.LP
Later (0.98p5) some more information was built into the number.
One has 2 direction bits
(00: none, 01: write, 10: read, 11: read/write)
followed by 14 size bits (giving the size of the argument),
followed by an 8-bit type (collecting the ioctls in groups
for a common purpose or a common driver), and an 8-bit
serial number.
.LP
The macros describing this structure live in
.I <asm/ioctl.h>
and are
.B _IO(type,nr)
and
.BR "{_IOR,_IOW,_IOWR}(type,nr,size)" .
They use
.I sizeof(size)
so that size is a
misnomer here: this third argument is a data type.
.LP
Note that the size bits are very unreliable: in lots of cases
they are wrong, either because of buggy macros using
.IR sizeof(sizeof(struct)) ,
or because of legacy values.
.LP
Thus, it seems that the new structure only gave disadvantages:
it does not help in checking, but it causes varying values
for the various architectures.
.SH RETURN VALUE
Decent ioctls return 0 on success and \-1 on error, while
any output value is stored via the argument.
However,
quite a few ioctls in fact return an output value.
This is not yet indicated below.

// Main table.

// <include/asm-i386/socket.h>
.TS
l l l.
0x00008901	FIOSETOWN	const int *
0x00008902	SIOCSPGRP	const int *
0x00008903	FIOGETOWN	int *
0x00008904	SIOCGPGRP	int *
0x00008905	SIOCATMAR	int *
0x00008906	SIOCGSTAMP	timeval *
.TE

// <include/asm-i386/termios.h>
.TS
l l l l.
0x00005401	TCGETS	struct termios *
0x00005402	TCSETS	const struct termios *
0x00005403	TCSETSW	const struct termios *
0x00005404	TCSETSF	const struct termios *
0x00005405	TCGETA	struct termio *
0x00005406	TCSETA	const struct termio *
0x00005407	TCSETAW	const struct termio *
0x00005408	TCSETAF	const struct termio *
0x00005409	TCSBRK	int
0x0000540A	TCXONC	int
0x0000540B	TCFLSH	int
0x0000540C	TIOCEXCL	void
0x0000540D	TIOCNXCL	void
0x0000540E	TIOCSCTTY	int
0x0000540F	TIOCGPGRP	pid_t *
0x00005410	TIOCSPGRP	const pid_t *
0x00005411	TIOCOUTQ	int *
0x00005412	TIOCSTI	const char *
0x00005413	TIOCGWINSZ	struct winsize *
0x00005414	TIOCSWINSZ	const struct winsize *
0x00005415	TIOCMGET	int *
0x00005416	TIOCMBIS	const int *
0x00005417	TIOCMBIC	const int *
0x00005418	TIOCMSET	const int *
0x00005419	TIOCGSOFTCAR	int *
0x0000541A	TIOCSSOFTCAR	const int *
0x0000541B	FIONREAD	int *
0x0000541B	TIOCINQ	int *
0x0000541C	TIOCLINUX	const char *	// MORE
0x0000541D	TIOCCONS	void
0x0000541E	TIOCGSERIAL	struct serial_struct *
0x0000541F	TIOCSSERIAL	const struct serial_struct *
0x00005420	TIOCPKT	const int *
0x00005421	FIONBIO	const int *
0x00005422	TIOCNOTTY	void
0x00005423	TIOCSETD	const int *
0x00005424	TIOCGETD	int *
0x00005425	TCSBRKP	int
0x00005426	TIOCTTYGSTRUCT	struct tty_struct *
0x00005450	FIONCLEX	void
0x00005451	FIOCLEX	void
0x00005452	FIOASYNC	const int *
0x00005453	TIOCSERCONFIG	void
0x00005454	TIOCSERGWILD	int *
0x00005455	TIOCSERSWILD	const int *
0x00005456	TIOCGLCKTRMIOS	struct termios *
0x00005457	TIOCSLCKTRMIOS	const struct termios *
0x00005458	TIOCSERGSTRUCT	struct async_struct *
0x00005459	TIOCSERGETLSR	int *
.TE
.\" Some tables are split into two or more to avoid the warning:
.\" "table wider than line width".  Some lines are to long to fit
.\" on one line on an 80 columns console
.TS
l l l.
0x0000545A	TIOCSERGETMULTI	struct serial_multiport_struct *
0x0000545B	TIOCSERSETMULTI	const struct serial_multiport_struct *
.TE

// <include/linux/ax25.h>
.TS
l l l l.
0x000089E0	SIOCAX25GETUID	const struct sockaddr_ax25 *
0x000089E1	SIOCAX25ADDUID	const struct sockaddr_ax25 *
0x000089E2	SIOCAX25DELUID	const struct sockaddr_ax25 *
0x000089E3	SIOCAX25NOUID	const int *
0x000089E4	SIOCAX25DIGCTL	const int *
0x000089E5	SIOCAX25GETPARMS	struct ax25_parms_struct *	// I-O
.TE
.TS
l l l.
0x000089E6	SIOCAX25SETPARMS	const struct ax25_parms_struct *
.TE

// <include/linux/cdk.h>
.TS
l l l.
0x00007314	STL_BINTR	void
0x00007315	STL_BSTART	void
0x00007316	STL_BSTOP	void
0x00007317	STL_BRESET	void
.TE

// <include/linux/cdrom.h>
.TS
l l l.
0x00005301	CDROMPAUSE	void
0x00005302	CDROMRESUME	void
0x00005303	CDROMPLAYMSF	const struct cdrom_msf *
0x00005304	CDROMPLAYTRKIND	const struct cdrom_ti *
0x00005305	CDROMREADTOCHDR	struct cdrom_tochdr *
.TE
.TS
l l l l.
0x00005306	CDROMREADTOCENTRY	struct cdrom_tocentry *	// I-O
.TE
.TS
l l l l.
0x00005307	CDROMSTOP	void
0x00005308	CDROMSTART	void
0x00005309	CDROMEJECT	void
0x0000530A	CDROMVOLCTRL	const struct cdrom_volctrl *
0x0000530B	CDROMSUBCHNL	struct cdrom_subchnl *	// I-O
0x0000530C	CDROMREADMODE2	const struct cdrom_msf *	// MORE
0x0000530D	CDROMREADMODE1	const struct cdrom_msf *	// MORE
0x0000530E	CDROMREADAUDIO	const struct cdrom_read_audio *	// MORE
0x0000530F	CDROMEJECT_SW	int
.TE
.TS
l l l l.
0x00005310	CDROMMULTISESSION	struct cdrom_multisession *	// I-O
.TE
.TS
l l l l.
0x00005311	CDROM_GET_UPC	struct { char [8]; } *
0x00005312	CDROMRESET	void
0x00005313	CDROMVOLREAD	struct cdrom_volctrl *
0x00005314	CDROMREADRAW	const struct cdrom_msf *	// MORE
0x00005315	CDROMREADCOOKED	const struct cdrom_msf *	// MORE
0x00005316	CDROMSEEK	const struct cdrom_msf *
.TE

// <include/linux/cm206.h>
.TS
l l l.
0x00002000	CM206CTL_GET_STAT	int
0x00002001	CM206CTL_GET_LAST_STAT	int
.TE

// <include/linux/cyclades.h>
.TS
l l l.
0x00435901	CYGETMON	struct cyclades_monitor *
0x00435902	CYGETTHRESH	int *
0x00435903	CYSETTHRESH	int
0x00435904	CYGETDEFTHRESH	int *
0x00435905	CYSETDEFTHRESH	int
0x00435906	CYGETTIMEOUT	int *
0x00435907	CYSETTIMEOUT	int
0x00435908	CYGETDEFTIMEOUT	int *
0x00435909	CYSETDEFTIMEOUT	int
.TE

// <include/linux/fd.h>
.TS
l l l.
0x00000000	FDCLRPRM	void
0x00000001	FDSETPRM	const struct floppy_struct *
0x00000002	FDDEFPRM	const struct floppy_struct *
0x00000003	FDGETPRM	struct floppy_struct *
0x00000004	FDMSGON	void
0x00000005	FDMSGOFF	void
0x00000006	FDFMTBEG	void
0x00000007	FDFMTTRK	const struct format_descr *
0x00000008	FDFMTEND	void
0x0000000A	FDSETEMSGTRESH	int
0x0000000B	FDFLUSH	void
0x0000000C	FDSETMAXERRS	const struct floppy_max_errors *
0x0000000E	FDGETMAXERRS	struct floppy_max_errors *
0x00000010	FDGETDRVTYP	struct { char [16]; } *
0x00000014	FDSETDRVPRM	const struct floppy_drive_params *
0x00000015	FDGETDRVPRM	struct floppy_drive_params *
0x00000016	FDGETDRVSTAT	struct floppy_drive_struct *
0x00000017	FDPOLLDRVSTAT	struct floppy_drive_struct *
0x00000018	FDRESET	int
0x00000019	FDGETFDCSTAT	struct floppy_fdc_state *
0x0000001B	FDWERRORCLR	void
0x0000001C	FDWERRORGET	struct floppy_write_errors *
.TE
.TS
l l l l.
0x0000001E	FDRAWCMD	struct floppy_raw_cmd *	// MORE // I-O
0x00000028	FDTWADDLE	void
.TE

// <include/linux/fs.h>
.TS
l l l l.
0x0000125D	BLKROSET	const int *
0x0000125E	BLKROGET	int *
0x0000125F	BLKRRPART	void
0x00001260	BLKGETSIZE	unsigned long *
0x00001261	BLKFLSBUF	void
0x00001262	BLKRASET	int
0x00001263	BLKRAGET	int *
0x00000001	FIBMAP	int *	// I-O
0x00000002	FIGETBSZ	int *
0x80086601	FS_IOC_GETFLAGS	int *
0x40086602	FS_IOC_SETFLAGS	int *
0x80087601	FS_IOC_GETVERSION	int *
0x40087602	FS_IOC_SETVERSION	int *
0xC020660B	FS_IOC_FIEMAP	struct fiemap *
0x40086602	FS_IOC32_SETFLAGS	int *
0x40086602	FS_IOC32_SETFLAGS	int *
0x80047601	FS_IOC32_GETVERSION	int *
0x40047602	FS_IOC32_SETVERSION	int *
.TE

// <include/linux/hdreg.h>
.TS
l l l l.
0x00000301	HDIO_GETGEO	struct hd_geometry *
0x00000302	HDIO_GET_UNMASKINTR	int *
0x00000304	HDIO_GET_MULTCOUNT	int *
0x00000307	HDIO_GET_IDENTITY	struct hd_driveid *
0x00000308	HDIO_GET_KEEPSETTINGS	int *
0x00000309	HDIO_GET_CHIPSET	int *
0x0000030A	HDIO_GET_NOWERR	int *
0x0000030B	HDIO_GET_DMA	int *
0x0000031F	HDIO_DRIVE_CMD	int *	// I-O
0x00000321	HDIO_SET_MULTCOUNT	int
0x00000322	HDIO_SET_UNMASKINTR	int
0x00000323	HDIO_SET_KEEPSETTINGS	int
0x00000324	HDIO_SET_CHIPSET	int
0x00000325	HDIO_SET_NOWERR	int
0x00000326	HDIO_SET_DMA	int
.TE

// <include/linux/if_eql.h>
.TS
l l l l.
0x000089F0	EQL_ENSLAVE	struct ifreq *	// MORE // I-O
0x000089F1	EQL_EMANCIPATE	struct ifreq *	// MORE // I-O
0x000089F2	EQL_GETSLAVECFG	struct ifreq *	// MORE // I-O
0x000089F3	EQL_SETSLAVECFG	struct ifreq *	// MORE // I-O
0x000089F4	EQL_GETMASTRCFG	struct ifreq *	// MORE // I-O
0x000089F5	EQL_SETMASTRCFG	struct ifreq *	// MORE // I-O
.TE

// <include/linux/if_plip.h>
.TS
l l l l.
0x000089F0	SIOCDEVPLIP	struct ifreq *	// I-O
.TE

// <include/linux/if_ppp.h>
.TS
l l l.
0x00005490	PPPIOCGFLAGS	int *
0x00005491	PPPIOCSFLAGS	const int *
0x00005492	PPPIOCGASYNCMAP	int *
0x00005493	PPPIOCSASYNCMAP	const int *
0x00005494	PPPIOCGUNIT	int *
0x00005495	PPPIOCSINPSIG	const int *
0x00005497	PPPIOCSDEBUG	const int *
0x00005498	PPPIOCGDEBUG	int *
0x00005499	PPPIOCGSTAT	struct ppp_stats *
0x0000549A	PPPIOCGTIME	struct ppp_ddinfo *
0x0000549B	PPPIOCGXASYNCMAP	struct { int [8]; } *
0x0000549C	PPPIOCSXASYNCMAP	const struct { int [8]; } *
0x0000549D	PPPIOCSMRU	const int *
0x0000549E	PPPIOCRASYNCMAP	const int *
0x0000549F	PPPIOCSMAXCID	const int *
.TE

// <include/linux/ipx.h>
.TS
l l l.
0x000089E0	SIOCAIPXITFCRT	const char *
0x000089E1	SIOCAIPXPRISLT	const char *
0x000089E2	SIOCIPXCFGDATA	struct ipx_config_data *
.TE

// <include/linux/kd.h>
.TS
l l l.
0x00004B60	GIO_FONT	struct { char [8192]; } *
0x00004B61	PIO_FONT	const struct { char [8192]; } *
.TE
.TS
l2 l2 l2 l.
0x00004B6B	GIO_FONTX	struct console_font_desc *	// MORE // I-O
0x00004B6C	PIO_FONTX	const struct console_font_desc *	//MORE
.TE
.TS
l l l.
0x00004B70	GIO_CMAP	struct { char [48]; } *
0x00004B71	PIO_CMAP	const struct { char [48]; }
.TE
.TS
l l l l.
0x00004B2F	KIOCSOUND	int
0x00004B30	KDMKTONE	int
0x00004B31	KDGETLED	char *
0x00004B32	KDSETLED	int
0x00004B33	KDGKBTYPE	char *
0x00004B34	KDADDIO	int	// MORE
0x00004B35	KDDELIO	int	// MORE
0x00004B36	KDENABIO	void	// MORE
0x00004B37	KDDISABIO	void	// MORE
0x00004B3A	KDSETMODE	int
0x00004B3B	KDGETMODE	int *
0x00004B3C	KDMAPDISP	void	// MORE
0x00004B3D	KDUNMAPDISP	void	// MORE
0x00004B40	GIO_SCRNMAP	struct { char [E_TABSZ]; } *
.TE
.TS
l l l.
0x00004B41	PIO_SCRNMAP	const struct { char [E_TABSZ]; } *
0x00004B69	GIO_UNISCRNMAP	struct { short [E_TABSZ]; } *
0x00004B6A	PIO_UNISCRNMAP	const struct { short [E_TABSZ]; } *
.TE
.TS
l l l l.
0x00004B66	GIO_UNIMAP	struct unimapdesc *	// MORE // I-O
0x00004B67	PIO_UNIMAP	const struct unimapdesc *	// MORE
0x00004B68	PIO_UNIMAPCLR	const struct unimapinit *
0x00004B44	KDGKBMODE	int *
0x00004B45	KDSKBMODE	int
0x00004B62	KDGKBMETA	int *
0x00004B63	KDSKBMETA	int
0x00004B64	KDGKBLED	int *
0x00004B65	KDSKBLED	int
0x00004B46	KDGKBENT	struct kbentry *	// I-O
0x00004B47	KDSKBENT	const struct kbentry *
0x00004B48	KDGKBSENT	struct kbsentry *	// I-O
0x00004B49	KDSKBSENT	const struct kbsentry *
0x00004B4A	KDGKBDIACR	struct kbdiacrs *
0x00004B4B	KDSKBDIACR	const struct kbdiacrs *
0x00004B4C	KDGETKEYCODE	struct kbkeycode *	// I-O
0x00004B4D	KDSETKEYCODE	const struct kbkeycode *
0x00004B4E	KDSIGACCEPT	int
.TE

// <include/linux/lp.h>
.TS
l l l.
0x00000601	LPCHAR	int
0x00000602	LPTIME	int
0x00000604	LPABORT	int
0x00000605	LPSETIRQ	int
0x00000606	LPGETIRQ	int *
0x00000608	LPWAIT	int
0x00000609	LPCAREFUL	int
0x0000060A	LPABORTOPEN	int
0x0000060B	LPGETSTATUS	int *
0x0000060C	LPRESET	void
0x0000060D	LPGETSTATS	struct lp_stats *
.TE

// <include/linux/mroute.h>
.TS
l l l l.
0x000089E0	SIOCGETVIFCNT	struct sioc_vif_req *	// I-O
0x000089E1	SIOCGETSGCNT	struct sioc_sg_req *	// I-O
.TE

// <include/linux/msdos_fs.h> see
.BR ioctl_fat (2)
.TS
l l l l.
0x82307201	VFAT_IOCTL_READDIR_BOTH	struct dirent [2]
0x82307202	VFAT_IOCTL_READDIR_SHORT	struct dirent [2]
0x80047210	FAT_IOCTL_GET_ATTRIBUTES	__u32 *
0x40047211	FAT_IOCTL_SET_ATTRIBUTES	const __u32 *
0x80047213	FAT_IOCTL_GET_VOLUME_ID	__u32 *
.TE

// <include/linux/mtio.h>
.TS
l l l.
0x40086D01	MTIOCTOP	const struct mtop *
0x801C6D02	MTIOCGET	struct mtget *
0x80046D03	MTIOCPOS	struct mtpos *
0x80206D04	MTIOCGETCONFIG	struct mtconfiginfo *
0x40206D05	MTIOCSETCONFIG	const struct mtconfiginfo *
.TE

// <include/linux/netrom.h>
.TS
l l l l.
0x000089E0	SIOCNRGETPARMS	struct nr_parms_struct *	// I-O
0x000089E1	SIOCNRSETPARMS	const struct nr_parms_struct *
0x000089E2	SIOCNRDECOBS	void
0x000089E3	SIOCNRRTCTL	const int *
.TE

// <include/linux/sbpcd.h>
.TS
l l l.
0x00009000	DDIOCSDBG	const int *
0x00005382	CDROMAUDIOBUFSIZ	int
.TE

// <include/linux/scc.h>
.TS
l l l l.
0x00005470	TIOCSCCINI	void
0x00005471	TIOCCHANINI	const struct scc_modem *
0x00005472	TIOCGKISS	struct ioctl_command *	// I-O
0x00005473	TIOCSKISS	const struct ioctl_command *
0x00005474	TIOCSCCSTAT	struct scc_stat *
.TE

// <include/linux/scsi.h>
.TS
l l l.
0x00005382	SCSI_IOCTL_GET_IDLUN       struct { int [2]; } *
0x00005383	SCSI_IOCTL_TAGGED_ENABLE   void
0x00005384	SCSI_IOCTL_TAGGED_DISABLE  void
.TE
.TS
l l l l.
0x00005385	SCSI_IOCTL_PROBE_HOST	const int *	// MORE
.TE

// <include/linux/smb_fs.h>
.TS
l l l.
0x80027501	SMB_IOC_GETMOUNTUID	uid_t *
.TE

// <include/linux/sockios.h>
.TS
l l l l.
0x0000890B	SIOCADDRT	const struct rtentry *	// MORE
0x0000890C	SIOCDELRT	const struct rtentry *	// MORE
0x00008910	SIOCGIFNAME	char []
0x00008911	SIOCSIFLINK	void
0x00008912	SIOCGIFCONF	struct ifconf *	// MORE // I-O
0x00008913	SIOCGIFFLAGS	struct ifreq *	// I-O
0x00008914	SIOCSIFFLAGS	const struct ifreq *
0x00008915	SIOCGIFADDR	struct ifreq *	// I-O
0x00008916	SIOCSIFADDR	const struct ifreq *
0x00008917	SIOCGIFDSTADDR	struct ifreq *	// I-O
0x00008918	SIOCSIFDSTADDR	const struct ifreq *
0x00008919	SIOCGIFBRDADDR	struct ifreq *	// I-O
0x0000891A	SIOCSIFBRDADDR	const struct ifreq *
0x0000891B	SIOCGIFNETMASK	struct ifreq *	// I-O
0x0000891C	SIOCSIFNETMASK	const struct ifreq *
0x0000891D	SIOCGIFMETRIC	struct ifreq *	// I-O
0x0000891E	SIOCSIFMETRIC	const struct ifreq *
0x0000891F	SIOCGIFMEM	struct ifreq *	// I-O
0x00008920	SIOCSIFMEM	const struct ifreq *
0x00008921	SIOCGIFMTU	struct ifreq *	// I-O
0x00008922	SIOCSIFMTU	const struct ifreq *
.TE
.TS
l l l l.
0x00008923	OLD_SIOCGIFHWADDR	struct ifreq *	// I-O
0x00008924	SIOCSIFHWADDR	const struct ifreq *	// MORE
0x00008925	SIOCGIFENCAP	int *
0x00008926	SIOCSIFENCAP	const int *
0x00008927	SIOCGIFHWADDR	struct ifreq *	// I-O
0x00008929	SIOCGIFSLAVE	void
0x00008930	SIOCSIFSLAVE	void
0x00008931	SIOCADDMULTI	const struct ifreq *
0x00008932	SIOCDELMULTI	const struct ifreq *
0x00008940	SIOCADDRTOLD	void
0x00008941	SIOCDELRTOLD	void
0x00008950	SIOCDARP	const struct arpreq *
0x00008951	SIOCGARP	struct arpreq *	// I-O
0x00008952	SIOCSARP	const struct arpreq *
0x00008960	SIOCDRARP	const struct arpreq *
0x00008961	SIOCGRARP	struct arpreq *	// I-O
0x00008962	SIOCSRARP	const struct arpreq *
0x00008970	SIOCGIFMAP	struct ifreq *	// I-O
0x00008971	SIOCSIFMAP	const struct ifreq *
.TE

// <include/linux/soundcard.h>
.TS
l l l.
0x00005100	SNDCTL_SEQ_RESET	void
0x00005101	SNDCTL_SEQ_SYNC	void
.TE
.TS
l l l l.
0xC08C5102	SNDCTL_SYNTH_INFO	struct synth_info *	// I-O
0xC0045103	SNDCTL_SEQ_CTRLRATE	int *	// I-O
0x80045104	SNDCTL_SEQ_GETOUTCOUNT	int *
0x80045105	SNDCTL_SEQ_GETINCOUNT	int *
0x40045106	SNDCTL_SEQ_PERCMODE	void
.TE
.TS
l l l.
0x40285107	SNDCTL_FM_LOAD_INSTR	const struct sbi_instrument *
.TE
.TS
l l l l.
0x40045108	SNDCTL_SEQ_TESTMIDI	const int *
0x40045109	SNDCTL_SEQ_RESETSAMPLES	const int *
0x8004510A	SNDCTL_SEQ_NRSYNTHS	int *
0x8004510B	SNDCTL_SEQ_NRMIDIS	int *
0xC074510C	SNDCTL_MIDI_INFO	struct midi_info *	// I-O
0x4004510D	SNDCTL_SEQ_THRESHOLD	const int *
0xC004510E	SNDCTL_SYNTH_MEMAVL	int *	// I-O
0x4004510F	SNDCTL_FM_4OP_ENABLE	const int *
0xCFB85110	SNDCTL_PMGR_ACCESS	struct patmgr_info *	// I-O
0x00005111	SNDCTL_SEQ_PANIC	void
.TE
.TS
l l l.
0x40085112	SNDCTL_SEQ_OUTOFBAND	const struct seq_event_rec *
.TE
.TS
l l l l.
0xC0045401	SNDCTL_TMR_TIMEBASE	int *	// I-O
0x00005402	SNDCTL_TMR_START	void
0x00005403	SNDCTL_TMR_STOP	void
0x00005404	SNDCTL_TMR_CONTINUE	void
0xC0045405	SNDCTL_TMR_TEMPO	int *	// I-O
0xC0045406	SNDCTL_TMR_SOURCE	int *	// I-O
0x40045407	SNDCTL_TMR_METRONOME	const int *
0x40045408	SNDCTL_TMR_SELECT	int *	// I-O
0xCFB85001	SNDCTL_PMGR_IFACE	struct patmgr_info *	// I-O
0xC0046D00	SNDCTL_MIDI_PRETIME	int *	// I-O
0xC0046D01	SNDCTL_MIDI_MPUMODE	const int *
.TE
.TS
l l l l.
0xC0216D02	SNDCTL_MIDI_MPUCMD	struct mpu_command_rec *	// I-O
.TE
.TS
l l l l.
0x00005000	SNDCTL_DSP_RESET	void
0x00005001	SNDCTL_DSP_SYNC	void
0xC0045002	SNDCTL_DSP_SPEED	int *	// I-O
0xC0045003	SNDCTL_DSP_STEREO	int *	// I-O
0xC0045004	SNDCTL_DSP_GETBLKSIZE	int *	// I-O
0xC0045006	SOUND_PCM_WRITE_CHANNELS	int *	// I-O
0xC0045007	SOUND_PCM_WRITE_FILTER	int *	// I-O
0x00005008	SNDCTL_DSP_POST	void
0xC0045009	SNDCTL_DSP_SUBDIVIDE	int *	// I-O
0xC004500A	SNDCTL_DSP_SETFRAGMENT	int *	// I-O
0x8004500B	SNDCTL_DSP_GETFMTS	int *
0xC0045005	SNDCTL_DSP_SETFMT	int *	// I-O
.TE
.TS
l l l.
0x800C500C	SNDCTL_DSP_GETOSPACE	struct audio_buf_info *
0x800C500D	SNDCTL_DSP_GETISPACE	struct audio_buf_info *
0x0000500E	SNDCTL_DSP_NONBLOCK	void
0x80045002	SOUND_PCM_READ_RATE	int *
0x80045006	SOUND_PCM_READ_CHANNELS	int *
0x80045005	SOUND_PCM_READ_BITS	int *
0x80045007	SOUND_PCM_READ_FILTER	int *
0x00004300	SNDCTL_COPR_RESET	void
0xCFB04301	SNDCTL_COPR_LOAD	const struct copr_buffer *
.TE
.TS
l l l l.
0xC0144302	SNDCTL_COPR_RDATA	struct copr_debug_buf *	// I-O
0xC0144303	SNDCTL_COPR_RCODE	struct copr_debug_buf *	// I-O
.TE
.TS
l l l.
0x40144304	SNDCTL_COPR_WDATA	const struct copr_debug_buf *
0x40144305	SNDCTL_COPR_WCODE	const struct copr_debug_buf *
.TE
.TS
l l l l.
0xC0144306	SNDCTL_COPR_RUN	struct copr_debug_buf *	// I-O
0xC0144307	SNDCTL_COPR_HALT	struct copr_debug_buf *	// I-O
.TE
.TS
l l l.
0x4FA44308	SNDCTL_COPR_SENDMSG	const struct copr_msg *
0x8FA44309	SNDCTL_COPR_RCVMSG	struct copr_msg *
0x80044D00	SOUND_MIXER_READ_VOLUME	int *
0x80044D01	SOUND_MIXER_READ_BASS	int *
0x80044D02	SOUND_MIXER_READ_TREBLE	int *
0x80044D03	SOUND_MIXER_READ_SYNTH	int *
0x80044D04	SOUND_MIXER_READ_PCM	int *
0x80044D05	SOUND_MIXER_READ_SPEAKER	int *
0x80044D06	SOUND_MIXER_READ_LINE	int *
0x80044D07	SOUND_MIXER_READ_MIC	int *
0x80044D08	SOUND_MIXER_READ_CD	int *
0x80044D09	SOUND_MIXER_READ_IMIX	int *
0x80044D0A	SOUND_MIXER_READ_ALTPCM	int *
0x80044D0B	SOUND_MIXER_READ_RECLEV	int *
0x80044D0C	SOUND_MIXER_READ_IGAIN	int *
0x80044D0D	SOUND_MIXER_READ_OGAIN	int *
0x80044D0E	SOUND_MIXER_READ_LINE1	int *
0x80044D0F	SOUND_MIXER_READ_LINE2	int *
0x80044D10	SOUND_MIXER_READ_LINE3	int *
0x80044D1C	SOUND_MIXER_READ_MUTE	int *
0x80044D1D	SOUND_MIXER_READ_ENHANCE	int *
0x80044D1E	SOUND_MIXER_READ_LOUD	int *
0x80044DFF	SOUND_MIXER_READ_RECSRC	int *
0x80044DFE	SOUND_MIXER_READ_DEVMASK	int *
0x80044DFD	SOUND_MIXER_READ_RECMASK	int *
0x80044DFB	SOUND_MIXER_READ_STEREODEVS	int *
0x80044DFC	SOUND_MIXER_READ_CAPS	int *
.TE
.TS
l l l l.
0xC0044D00	SOUND_MIXER_WRITE_VOLUME	int *	// I-O
0xC0044D01	SOUND_MIXER_WRITE_BASS	int *	// I-O
0xC0044D02	SOUND_MIXER_WRITE_TREBLE	int *	// I-O
0xC0044D03	SOUND_MIXER_WRITE_SYNTH	int *	// I-O
0xC0044D04	SOUND_MIXER_WRITE_PCM	int *	// I-O
0xC0044D05	SOUND_MIXER_WRITE_SPEAKER	int *	// I-O
0xC0044D06	SOUND_MIXER_WRITE_LINE	int *	// I-O
0xC0044D07	SOUND_MIXER_WRITE_MIC	int *	// I-O
0xC0044D08	SOUND_MIXER_WRITE_CD	int *	// I-O
0xC0044D09	SOUND_MIXER_WRITE_IMIX	int *	// I-O
0xC0044D0A	SOUND_MIXER_WRITE_ALTPCM	int *	// I-O
0xC0044D0B	SOUND_MIXER_WRITE_RECLEV	int *	// I-O
0xC0044D0C	SOUND_MIXER_WRITE_IGAIN	int *	// I-O
0xC0044D0D	SOUND_MIXER_WRITE_OGAIN	int *	// I-O
0xC0044D0E	SOUND_MIXER_WRITE_LINE1	int *	// I-O
0xC0044D0F	SOUND_MIXER_WRITE_LINE2	int *	// I-O
0xC0044D10	SOUND_MIXER_WRITE_LINE3	int *	// I-O
0xC0044D1C	SOUND_MIXER_WRITE_MUTE	int *	// I-O
0xC0044D1D	SOUND_MIXER_WRITE_ENHANCE	int *	// I-O
0xC0044D1E	SOUND_MIXER_WRITE_LOUD	int *	// I-O
0xC0044DFF	SOUND_MIXER_WRITE_RECSRC	int *	// I-O
.TE

// <include/linux/timerfd.h> see
.BR timerfd_create (2)
.TS
l l l l.
0x40085400	TFD_IOC_SET_TICKS	uint64_t *
.TE

// <include/linux/umsdos_fs.h>
.TS
l l l l.
0x000004D2	UMSDOS_READDIR_DOS	struct umsdos_ioctl *	// I-O
0x000004D3	UMSDOS_UNLINK_DOS	const struct umsdos_ioctl *
0x000004D4	UMSDOS_RMDIR_DOS	const struct umsdos_ioctl *
0x000004D5	UMSDOS_STAT_DOS	struct umsdos_ioctl *	// I-O
0x000004D6	UMSDOS_CREAT_EMD	const struct umsdos_ioctl *
0x000004D7	UMSDOS_UNLINK_EMD	const struct umsdos_ioctl *
0x000004D8	UMSDOS_READDIR_EMD	struct umsdos_ioctl *	// I-O
0x000004D9	UMSDOS_GETVERSION	struct umsdos_ioctl *
0x000004DA	UMSDOS_INIT_EMD	void
0x000004DB	UMSDOS_DOS_SETUP	const struct umsdos_ioctl *
0x000004DC	UMSDOS_RENAME_DOS	const struct umsdos_ioctl *
.TE

// <include/linux/vt.h>
.TS
l l l.
0x00005600	VT_OPENQRY	int *
0x00005601	VT_GETMODE	struct vt_mode *
0x00005602	VT_SETMODE	const struct vt_mode *
0x00005603	VT_GETSTATE	struct vt_stat *
0x00005604	VT_SENDSIG	void
0x00005605	VT_RELDISP	int
0x00005606	VT_ACTIVATE	int
0x00005607	VT_WAITACTIVE	int
0x00005608	VT_DISALLOCATE	int
0x00005609	VT_RESIZE	const struct vt_sizes *
0x0000560A	VT_RESIZEX	const struct vt_consize *
.TE

// More arguments.
Some ioctl's take a pointer to a structure which contains additional
pointers.
These are documented here in alphabetical order.

.B CDROMREADAUDIO
takes an input pointer
.IR "const struct cdrom_read_audio\ *" .
The
.I buf
field points to an output buffer of length
.IR "nframes\ * CD_FRAMESIZE_RAW" .

.BR CDROMREADCOOKED ,
.BR CDROMREADMODE1 ,
.BR CDROMREADMODE2 ,
and
.B CDROMREADRAW
take an input pointer
.IR "const struct cdrom_msf\ *" .
They use the same pointer as an output pointer to
.IR "char []" .
The length varies by request.
For
.BR CDROMREADMODE1 ,
most drivers use CD_FRAMESIZE, but the Optics Storage
driver uses OPT_BLOCKSIZE instead (both have the numerical value
2048).
.nf

    CDROMREADCOOKED    char [CD_FRAMESIZE]
    CDROMREADMODE1     char [CD_FRAMESIZE or OPT_BLOCKSIZE]
    CDROMREADMODE2     char [CD_FRAMESIZE_RAW0]
    CDROMREADRAW       char [CD_FRAMESIZE_RAW]

.fi
.BR EQL_ENSLAVE ,
.BR EQL_EMANCIPATE ,
.BR EQL_GETSLAVECFG ,
.BR EQL_SETSLAVECFG ,
.BR EQL_GETMASTERCFG ,
and
.B EQL_SETMASTERCFG
take a
.IR "struct ifreq\ *" .
The
.I ifr_data
field is a pointer to another structure as follows:
.nf

    EQL_ENSLAVE         const struct slaving_request *
    EQL_EMANCIPATE      const struct slaving_request *
    EQL_GETSLAVECFG     struct slave_config *           // I-O
    EQL_SETSLAVECFG     const struct slave_config *
    EQL_GETMASTERCFG    struct master_config *
    EQL_SETMASTERCFG    const struct master_config *

.fi
.B FDRAWCMD
takes a
.IR "struct floppy raw_cmd\ *" .
If
.I flags & FD_RAW_WRITE
is nonzero, then
.I data
points to an input buffer of length
.IR length .
If
.I flags & FD_RAW_READ
is nonzero, then
.I data
points to an output buffer of length
.IR length .

.B GIO_FONTX
and
.B PIO_FONTX
take a
.I struct console_font_desc\ *
or a
.IR "const struct console_font_desc\ *" ,
respectively.
.I chardata
points to a buffer of
.IR "char [charcount]" .
This is an output buffer for
.B GIO_FONTX
and an input buffer for
.BR PIO_FONTX .

.B GIO_UNIMAP
and
.B PIO_UNIMAP
take a
.I "struct unimapdesc\ *"
or a
.IR "const struct unimapdesc\ *" ,
respectively.
.I entries
points to a buffer of
.IR "struct unipair [entry_ct]" .
This is an output buffer for
.B GIO_UNIMAP
and an input buffer for
.BR PIO_UNIMAP .

KDADDIO, KDDELIO, KDDISABIO, and KDENABIO enable or disable access to
I/O ports.
They are essentially alternate interfaces to 'ioperm'.

.B KDMAPDISP
and
.B KDUNMAPDISP
enable or disable memory mappings or I/O port access.
They are not implemented in the kernel.

.B SCSI_IOCTL_PROBE_HOST
takes an input pointer
.IR "const int\ *" ,
which is a length.
It uses the same pointer as an output pointer to a
.I char []
buffer of this length.

.B SIOCADDRT
and
.B SIOCDELRT
take an input pointer whose type depends on
the protocol:
.nf

    Most protocols      const struct rtentry *
    AX.25               const struct ax25_route *
    NET/ROM             const struct nr_route_struct *
    INET6               const struct in6_rtmsg *

.fi
.B SIOCGIFCONF
takes a
.IR "struct ifconf\ *" .
The
.I ifc_buf
field points to a buffer of length
.I ifc_len
bytes, into which the kernel writes a list of type
.IR "struct ifreq []" .

.B SIOCSIFHWADDR
takes an input pointer whose type depends on the protocol:
.nf

    Most protocols      const struct ifreq *
    AX.25               const char [AX25_ADDR_LEN]

.fi
.B TIOCLINUX
takes a
.IR "const char\ *" .
It uses this to distinguish several
independent subcases.
In the table below,
.I N + foo
means
.I foo
after an N-byte pad.
.I struct selection
is implicitly defined in
.IR drivers/char/selection.c
.nf

    TIOCLINUX-2         1 + const struct selection *
    TIOCLINUX-3         void
    TIOCLINUX-4         void
    TIOCLINUX-5         4 + const struct { long [8]; } *
    TIOCLINUX-6         char *
    TIOCLINUX-7         char *
    TIOCLINUX-10        1 + const char *

.fi
// Duplicate ioctls

This list does not include ioctls in the range
.B SIOCDEVPRIVATE
and
.BR SIOCPROTOPRIVATE .
.TS
l l l.
0x00000001	FDSETPRM	FIBMAP
0x00000002	FDDEFPRM	FIGETBSZ
0x00005382	CDROMAUDIOBUFSIZ	SCSI_IOCTL_GET_IDLUN
0x00005402	SNDCTL_TMR_START	TCSETS
0x00005403	SNDCTL_TMR_STOP	TCSETSW
0x00005404	SNDCTL_TMR_CONTINUE	TCSETSF
.TE
.SH SEE ALSO
.BR ioctl (2),
.BR ioctl_fat (2)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2003 Free Software Foundation, Inc.
.\"
.\" %%%LICENSE_START(GPL_NOVERSION_ONELINE)
.\" This file is distributed according to the GNU General Public License.
.\" %%%LICENSE_END
.\"
.TH IO_DESTROY 2 2013-04-08 "Linux" "Linux Programmer's Manual"
.SH NAME
io_destroy \- destroy an asynchronous I/O context
.SH SYNOPSIS
.nf
.BR "#include <linux/aio_abi.h>" "          /* Defines needed types */"

.BI "int io_destroy(aio_context_t " ctx_id );
.fi

.IR Note :
There is no glibc wrapper for this system call; see NOTES.
.SH DESCRIPTION
.PP
The
.BR io_destroy ()
system call
will attempt to cancel all outstanding asynchronous I/O operations against
.IR ctx_id ,
will block on the completion of all operations
that could not be canceled, and will destroy the
.IR ctx_id .
.SH RETURN VALUE
On success,
.BR io_destroy ()
returns 0.
For the failure return, see NOTES.
.SH ERRORS
.TP
.B EFAULT
The context pointed to is invalid.
.TP
.B EINVAL
The AIO context specified by \fIctx_id\fP is invalid.
.TP
.B ENOSYS
.BR io_destroy ()
is not implemented on this architecture.
.SH VERSIONS
.PP
The asynchronous I/O system calls first appeared in Linux 2.5.
.SH CONFORMING TO
.PP
.BR io_destroy ()
is Linux-specific and should not be used in programs
that are intended to be portable.
.SH NOTES
Glibc does not provide a wrapper function for this system call.
You could invoke it using
.BR syscall (2).
But instead, you probably want to use the
.BR io_destroy ()
wrapper function provided by
.\" http://git.fedorahosted.org/git/?p=libaio.git
.IR libaio .

Note that the
.I libaio
wrapper function uses a different type
.RI ( io_context_t )
.\" But glibc is confused, since <libaio.h> uses 'io_context_t' to declare
.\" the system call.
for the
.I ctx_id
argument.
Note also that the
.I libaio
wrapper does not follow the usual C library conventions for indicating errors:
on error it returns a negated error number
(the negative of one of the values listed in ERRORS).
If the system call is invoked via
.BR syscall (2),
then the return value follows the usual conventions for
indicating an error: \-1, with
.I errno
set to a (positive) value that indicates the error.
.SH SEE ALSO
.BR io_cancel (2),
.BR io_getevents (2),
.BR io_setup (2),
.BR io_submit (2),
.BR aio (7)
.\" .SH AUTHOR
.\" Kent Yoder.
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2003 Free Software Foundation, Inc.
.\"
.\" %%%LICENSE_START(GPL_NOVERSION_ONELINE)
.\" This file is distributed according to the GNU General Public License.
.\" %%%LICENSE_END
.\"
.TH IO_GETEVENTS 2 2013-04-08 "Linux" "Linux Programmer's Manual"
.SH NAME
io_getevents \- read asynchronous I/O events from the completion queue
.SH SYNOPSIS
.nf
.BR "#include <linux/aio_abi.h>" "         /* Defines needed types */"
.BR "#include <linux/time.h>" "            /* Defines 'struct timespec' */"

.BI "int io_getevents(aio_context_t " ctx_id ", long " min_nr ", long " nr ,
.BI "                 struct io_event *" events \
", struct timespec *" timeout );
.fi

.IR Note :
There is no glibc wrapper for this system call; see NOTES.
.SH DESCRIPTION
.PP
The
.BR io_getevents ()
system call
attempts to read at least \fImin_nr\fP events and
up to \fInr\fP events from the completion queue of the AIO context
specified by \fIctx_id\fP.
The \fItimeout\fP argument specifies the amount of time to wait for events,
where a NULL timeout waits until at least \fImin_nr\fP events
have been seen.
Note that \fItimeout\fP is relative.
.SH RETURN VALUE
On success,
.BR io_getevents ()
returns the number of events read: 0 if no events are
available, or less than \fImin_nr\fP if the \fItimeout\fP has elapsed.
For the failure return, see NOTES.
.SH ERRORS
.TP
.B EFAULT
Either \fIevents\fP or \fItimeout\fP is an invalid pointer.
.TP
.B EINVAL
\fIctx_id\fP is invalid.
\fImin_nr\fP is out of range or \fInr\fP is
out of range.
.TP
.B EINTR
Interrupted by a signal handler; see
.BR signal (7).
.TP
.B ENOSYS
.BR io_getevents ()
is not implemented on this architecture.
.SH VERSIONS
.PP
The asynchronous I/O system calls first appeared in Linux 2.5.
.SH CONFORMING TO
.PP
.BR io_getevents ()
is Linux-specific and should not be used in
programs that are intended to be portable.
.SH NOTES
Glibc does not provide a wrapper function for this system call.
You could invoke it using
.BR syscall (2).
But instead, you probably want to use the
.BR io_getevents ()
wrapper function provided by
.\" http://git.fedorahosted.org/git/?p=libaio.git
.IR libaio .

Note that the
.I libaio
wrapper function uses a different type
.RI ( io_context_t )
.\" But glibc is confused, since <libaio.h> uses 'io_context_t' to declare
.\" the system call.
for the
.I ctx_id
argument.
Note also that the
.I libaio
wrapper does not follow the usual C library conventions for indicating errors:
on error it returns a negated error number
(the negative of one of the values listed in ERRORS).
If the system call is invoked via
.BR syscall (2),
then the return value follows the usual conventions for
indicating an error: \-1, with
.I errno
set to a (positive) value that indicates the error.
.SH BUGS
An invalid
.IR ctx_id
may cause a segmentation fault instead of generating the error
.BR EINVAL .
.SH SEE ALSO
.PP
.BR io_cancel (2),
.BR io_destroy (2),
.BR io_setup (2),
.BR io_submit (2),
.BR aio (7),
.BR time (7)
.\" .SH AUTHOR
.\" Kent Yoder.
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1993 Michael Haardt
.\" (michael@moria.de)
.\" Fri Apr  2 11:32:09 MET DST 1993
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.\" Modified Sat Jul 24 15:12:05 1993 by Rik Faith <faith@cs.unc.edu>
.\" Modified Tue Aug  1 16:27    1995 by Jochen Karrer
.\"                              <cip307@cip.physik.uni-wuerzburg.de>
.\" Modified Tue Oct 22 08:11:14 EDT 1996 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified Mon Feb 15 17:28:41 CET 1999 by Andries E. Brouwer <aeb@cwi.nl>
.\" Modified, 27 May 2004, Michael Kerrisk <mtk.manpages@gmail.com>
.\"     Added notes on capability requirements
.\"
.TH IOPERM 2 2014-08-19 "Linux" "Linux Programmer's Manual"
.SH NAME
ioperm \- set port input/output permissions
.SH SYNOPSIS
.B #include <sys/io.h>
/* for glibc */
.sp
.BI "int ioperm(unsigned long " from ", unsigned long " num ", int " turn_on );
.SH DESCRIPTION
.BR ioperm ()
sets the port access permission bits for the calling thread for
.I num
bits starting from port address
.IR from .
If
.I turn_on
is nonzero, then permission for the specified bits is enabled;
otherwise it is disabled.
If
.I turn_on
is nonzero, the calling thread must be privileged
.RB ( CAP_SYS_RAWIO ).

Before Linux 2.6.8,
only the first 0x3ff I/O ports could be specified in this manner.
For more ports, the
.BR iopl (2)
system call had to be used (with a
.I level
argument of 3).
Since Linux 2.6.8, 65,536 I/O ports can be specified.

Permissions are not inherited by the child created by
.BR fork (2);
following a
.BR fork (2)
the child must turn on those permissions that it needs.
Permissions are preserved across
.BR execve (2);
this is useful for giving port access permissions to unprivileged
programs.

This call is mostly for the i386 architecture.
On many other architectures it does not exist or will always
return an error.
.SH RETURN VALUE
On success, zero is returned.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EINVAL
Invalid values for
.I from
or
.IR num .
.TP
.B EIO
(on PowerPC) This call is not supported.
.TP
.B ENOMEM
.\" Could not allocate I/O bitmap.
Out of memory.
.TP
.B EPERM
The calling thread has insufficient privilege.
.SH CONFORMING TO
.BR ioperm ()
is Linux-specific and should not be used in programs
intended to be portable.
.SH NOTES
The
.I /proc/ioports
file shows the I/O ports that are currently allocated on the system.

Glibc has an
.BR ioperm ()
prototype both in
.I <sys/io.h>
and in
.IR <sys/perm.h> .
Avoid the latter, it is available on i386 only.
.SH SEE ALSO
.BR iopl (2),
.BR outb (2),
.BR capabilities (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 Rickard E. Faith (faith@cs.unc.edu)
.\" Portions extracted from linux/kernel/ioport.c (no copyright notice).
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified Tue Aug  1 16:47    1995 by Jochen Karrer
.\"                              <cip307@cip.physik.uni-wuerzburg.de>
.\" Modified Tue Oct 22 08:11:14 EDT 1996 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified Fri Nov 27 14:50:36 CET 1998 by Andries Brouwer <aeb@cwi.nl>
.\" Modified, 27 May 2004, Michael Kerrisk <mtk.manpages@gmail.com>
.\"     Added notes on capability requirements
.\"
.TH IOPL 2 2013-03-15 "Linux" "Linux Programmer's Manual"
.SH NAME
iopl \- change I/O privilege level
.SH SYNOPSIS
.B #include <sys/io.h>
.sp
.BI "int iopl(int " level );
.SH DESCRIPTION
.BR iopl ()
changes the I/O privilege level of the calling process,
as specified by the two least significant bits in
.IR level .

This call is necessary to allow 8514-compatible X servers to run under
Linux.
Since these X servers require access to all 65536 I/O ports, the
.BR ioperm (2)
call is not sufficient.

In addition to granting unrestricted I/O port access, running at a higher
I/O privilege level also allows the process to disable interrupts.
This will probably crash the system, and is not recommended.

Permissions are inherited by
.BR fork (2)
and
.BR execve (2).

The I/O privilege level for a normal process is 0.

This call is mostly for the i386 architecture.
On many other architectures it does not exist or will always
return an error.
.SH RETURN VALUE
On success, zero is returned.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EINVAL
.I level
is greater than 3.
.TP
.B ENOSYS
This call is unimplemented.
.TP
.B EPERM
The calling process has insufficient privilege to call
.BR iopl ();
the
.B CAP_SYS_RAWIO
capability is required to raise the I/O privilege level
above its current value.
.SH CONFORMING TO
.BR iopl ()
is Linux-specific and should not be used in programs that are
intended to be portable.
.SH NOTES
Libc5 treats it as a system call and has a prototype in
.IR <unistd.h> .
Glibc1 does not have a prototype.
Glibc2 has a prototype both in
.I <sys/io.h>
and in
.IR <sys/perm.h> .
Avoid the latter, it is available on i386 only.
.SH SEE ALSO
.BR ioperm (2),
.BR outb (2),
.BR capabilities (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) International Business Machines orp., 2006
.\"
.\" %%%LICENSE_START(GPLv2+_SW_3_PARA)
.\" This program is free software; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" This program is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See
.\" the GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.\" HISTORY:
.\" 2006-04-27, created by Eduardo M. Fleury <efleury@br.ibm.com>
.\" with various additions by Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\"
.TH IOPRIO_SET 2 2013-02-12 "Linux" "Linux Programmer's Manual"
.SH NAME
ioprio_get, ioprio_set \- get/set I/O scheduling class and priority
.SH SYNOPSIS
.nf
.BI "int ioprio_get(int " which ", int " who );
.BI "int ioprio_set(int " which ", int " who ", int " ioprio );
.fi

.IR Note :
There are no glibc wrappers for these system calls; see NOTES.
.SH DESCRIPTION
The
.BR ioprio_get ()
and
.BR ioprio_set ()
system calls respectively get and set the I/O scheduling class and
priority of one or more threads.

The
.I which
and
.I who
arguments identify the thread(s) on which the system
calls operate.
The
.I which
argument determines how
.I who
is interpreted, and has one of the following values:
.TP
.B IOPRIO_WHO_PROCESS
.I who
is a process ID or thread ID identifying a single process or thread.
If
.I who
is 0, then operate on the calling thread.
.TP
.B IOPRIO_WHO_PGRP
.I who
is a process group ID identifying all the members of a process group.
If
.I who
is 0, then operate on the process group of which the caller is a member.
.TP
.B IOPRIO_WHO_USER
.I who
is a user ID identifying all of the processes that
have a matching real UID.
.\" FIXME . Need to document the behavior when 'who" is specified as 0
.\" See http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=652443
.PP
If
.I which
is specified as
.B IOPRIO_WHO_PGRP
or
.B IOPRIO_WHO_USER
when calling
.BR ioprio_get (),
and more than one process matches
.IR who ,
then the returned priority will be the highest one found among
all of the matching processes.
One priority is said to be
higher than another one if it belongs to a higher priority
class
.RB ( IOPRIO_CLASS_RT
is the highest priority class;
.B IOPRIO_CLASS_IDLE
is the lowest)
or if it belongs to the same priority class as the other process but
has a higher priority level (a lower priority number means a
higher priority level).

The
.I ioprio
argument given to
.BR ioprio_set ()
is a bit mask that specifies both the scheduling class and the
priority to be assigned to the target process(es).
The following macros are used for assembling and dissecting
.I ioprio
values:
.TP
.BI IOPRIO_PRIO_VALUE( class ", " data )
Given a scheduling
.I class
and priority
.RI ( data ),
this macro combines the two values to produce an
.I ioprio
value, which is returned as the result of the macro.
.TP
.BI IOPRIO_PRIO_CLASS( mask )
Given
.I mask
(an
.I ioprio
value), this macro returns its I/O class component, that is,
one of the values
.BR IOPRIO_CLASS_RT ,
.BR IOPRIO_CLASS_BE ,
or
.BR IOPRIO_CLASS_IDLE .
.TP
.BI IOPRIO_PRIO_DATA( mask )
Given
.I mask
(an
.I ioprio
value), this macro returns its priority
.RI ( data )
component.
.PP
See the NOTES section for more
information on scheduling classes and priorities.

I/O priorities are supported for reads and for synchronous
.RB ( O_DIRECT ,
.BR O_SYNC )
writes.
I/O priorities are not supported for asynchronous
writes because they are issued outside the context of the program
dirtying the memory, and thus program-specific priorities do not apply.
.SH RETURN VALUE
On success,
.BR ioprio_get ()
returns the
.I ioprio
value of the process with highest I/O priority of any of the processes
that match the criteria specified in
.I which
and
.IR who .
On error, \-1 is returned, and
.I errno
is set to indicate the error.
.PP
On success,
.BR ioprio_set ()
returns 0.
On error, \-1 is returned, and
.I errno
is set to indicate the error.
.SH ERRORS
.TP
.B EINVAL
Invalid value for
.I which
or
.IR ioprio .
Refer to the NOTES section for available scheduler
classes and priority levels for
.IR ioprio .
.TP
.B EPERM
The calling process does not have the privilege needed to assign this
.I ioprio
to the specified process(es).
See the NOTES section for more information on required
privileges for
.BR ioprio_set ().
.TP
.B ESRCH
No process(es) could be found that matched the specification in
.I which
and
.IR who .
.SH VERSIONS
These system calls have been available on Linux since
kernel 2.6.13.
.SH CONFORMING TO
These system calls are Linux-specific.
.SH NOTES
Glibc does not provide a wrapper for these system calls; call them using
.BR syscall (2).

Two or more processes or threads can share an I/O context.
This will be the case when
.BR clone (2)
was called with the
.B CLONE_IO
flag.
However, by default, the distinct threads of a process will
.B not
share the same I/O context.
This means that if you want to change the I/O
priority of all threads in a process, you may need to call
.BR ioprio_set ()
on each of the threads.
The thread ID that you would need for this operation
is the one that is returned by
.BR gettid (2)
or
.BR clone (2).

These system calls have an effect only when used
in conjunction with an I/O scheduler that supports I/O priorities.
As at kernel 2.6.17 the only such scheduler is the Completely Fair Queuing
(CFQ) I/O scheduler.
.SS Selecting an I/O scheduler
I/O Schedulers are selected on a per-device basis via the special
file
.IR /sys/block/<device>/queue/scheduler .

One can view the current I/O scheduler via the
.I /sys
filesystem.
For example, the following command
displays a list of all schedulers currently loaded in the kernel:
.sp
.RS
.nf
.RB "$" " cat /sys/block/hda/queue/scheduler"
noop anticipatory deadline [cfq]
.fi
.RE
.sp
The scheduler surrounded by brackets is the one actually
in use for the device
.RI ( hda
in the example).
Setting another scheduler is done by writing the name of the
new scheduler to this file.
For example, the following command will set the
scheduler for the
.I hda
device to
.IR cfq :
.sp
.RS
.nf
.RB "$" " su"
Password:
.RB "#" " echo cfq > /sys/block/hda/queue/scheduler"
.fi
.RE
.SS The Completely Fair Queuing (CFQ) I/O scheduler
Since v3 (aka CFQ Time Sliced) CFQ implements
I/O nice levels similar to those
of CPU scheduling.
These nice levels are grouped in three scheduling classes
each one containing one or more priority levels:
.TP
.BR IOPRIO_CLASS_RT " (1)"
This is the real-time I/O class.
This scheduling class is given
higher priority than any other class:
processes from this class are
given first access to the disk every time.
Thus this I/O class needs to be used with some
care: one I/O real-time process can starve the entire system.
Within the real-time class,
there are 8 levels of class data (priority) that determine exactly
how much time this process needs the disk for on each service.
The highest real-time priority level is 0; the lowest is 7.
In the future this might change to be more directly mappable to
performance, by passing in a desired data rate instead.
.TP
.BR IOPRIO_CLASS_BE " (2)"
This is the best-effort scheduling class,
which is the default for any process
that hasn't set a specific I/O priority.
The class data (priority) determines how much
I/O bandwidth the process will get.
Best-effort priority levels are analogous to CPU nice values
(see
.BR getpriority (2)).
The priority level determines a priority relative
to other processes in the best-effort scheduling class.
Priority levels range from 0 (highest) to 7 (lowest).
.TP
.BR IOPRIO_CLASS_IDLE " (3)"
This is the idle scheduling class.
Processes running at this level get I/O
time only when no-one else needs the disk.
The idle class has no class data.
Attention is required when assigning this priority class to a process,
since it may become starved if higher priority processes are
constantly accessing the disk.
.PP
Refer to
.I Documentation/block/ioprio.txt
for more information on the CFQ I/O Scheduler and an example program.
.SS Required permissions to set I/O priorities
Permission to change a process's priority is granted or denied based
on two assertions:
.TP
.B "Process ownership"
An unprivileged process may set only the I/O priority of a process
whose real UID
matches the real or effective UID of the calling process.
A process which has the
.B CAP_SYS_NICE
capability can change the priority of any process.
.TP
.B "What is the desired priority"
Attempts to set very high priorities
.RB ( IOPRIO_CLASS_RT )
require the
.B CAP_SYS_ADMIN
capability.
Kernel versions up to 2.6.24 also required
.B CAP_SYS_ADMIN
to set a very low priority
.RB ( IOPRIO_CLASS_IDLE ),
but since Linux 2.6.25, this is no longer required.
.PP
A call to
.BR ioprio_set ()
must follow both rules, or the call will fail with the error
.BR EPERM .
.SH BUGS
.\" 6 May 07: Bug report raised:
.\" http://sources.redhat.com/bugzilla/show_bug.cgi?id=4464
.\" Ulrich Drepper replied that he wasn't going to add these
.\" to glibc.
Glibc does not yet provide a suitable header file defining
the function prototypes and macros described on this page.
Suitable definitions can be found in
.IR linux/ioprio.h .
.SH SEE ALSO
.BR ionice (1),
.BR getpriority (2),
.BR open (2),
.BR capabilities (7)

.I Documentation/block/ioprio.txt
in the Linux kernel source tree
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2003 Free Software Foundation, Inc.
.\"
.\" %%%LICENSE_START(GPL_NOVERSION_ONELINE)
.\" This file is distributed according to the GNU General Public License.
.\" %%%LICENSE_END
.\"
.TH IO_SETUP 2 2013-06-21 "Linux" "Linux Programmer's Manual"
.SH NAME
io_setup \- create an asynchronous I/O context
.SH SYNOPSIS
.nf
.BR "#include <linux/aio_abi.h>" "          /* Defines needed types */"

.BI "int io_setup(unsigned " nr_events ", aio_context_t *" ctx_idp );
.fi

.IR Note :
There is no glibc wrapper for this system call; see NOTES.
.SH DESCRIPTION
.PP
The
.BR io_setup ()
system call
creates an asynchronous I/O context suitable for concurrently processing
\fInr_events\fP operations.
The
.I ctx_idp
argument must not point to an AIO context that already exists, and must
be initialized to 0 prior to the call.
On successful creation of the AIO context, \fI*ctx_idp\fP is filled in
with the resulting handle.
.SH RETURN VALUE
On success,
.BR io_setup ()
returns 0.
For the failure return, see NOTES.
.SH ERRORS
.TP
.B EAGAIN
The specified \fInr_events\fP exceeds the user's limit of available events,
as defined in
.IR /proc/sys/fs/aio-max-nr .
.TP
.B EFAULT
An invalid pointer is passed for \fIctx_idp\fP.
.TP
.B EINVAL
\fIctx_idp\fP is not initialized, or the specified \fInr_events\fP
exceeds internal limits.
\fInr_events\fP should be greater than 0.
.TP
.B ENOMEM
Insufficient kernel resources are available.
.TP
.B ENOSYS
.BR io_setup ()
is not implemented on this architecture.
.SH VERSIONS
.PP
The asynchronous I/O system calls first appeared in Linux 2.5.
.SH CONFORMING TO
.PP
.BR io_setup ()
is Linux-specific and should not be used in programs
that are intended to be portable.
.SH NOTES
Glibc does not provide a wrapper function for this system call.
You could invoke it using
.BR syscall (2).
But instead, you probably want to use the
.BR io_setup ()
wrapper function provided by
.\" http://git.fedorahosted.org/git/?p=libaio.git
.IR libaio .

Note that the
.I libaio
wrapper function uses a different type
.RI ( "io_context_t\ *" )
.\" But glibc is confused, since <libaio.h> uses 'io_context_t' to declare
.\" the system call.
for the
.I ctx_idp
argument.
Note also that the
.I libaio
wrapper does not follow the usual C library conventions for indicating errors:
on error it returns a negated error number
(the negative of one of the values listed in ERRORS).
If the system call is invoked via
.BR syscall (2),
then the return value follows the usual conventions for
indicating an error: \-1, with
.I errno
set to a (positive) value that indicates the error.
.SH SEE ALSO
.BR io_cancel (2),
.BR io_destroy (2),
.BR io_getevents (2),
.BR io_submit (2),
.BR aio (7)
.\" .SH AUTHOR
.\" Kent Yoder.
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2003 Free Software Foundation, Inc.
.\"
.\" %%%LICENSE_START(GPL_NOVERSION_ONELINE)
.\" This file is distributed according to the GNU General Public License.
.\" %%%LICENSE_END
.\"
.TH IO_SUBMIT 2 2012-07-13 "Linux" "Linux Programmer's Manual"
.SH NAME
io_submit \- submit asynchronous I/O blocks for processing
.SH SYNOPSIS
.nf
.BR "#include <linux/aio_abi.h>" "          /* Defines needed types */"

.BI "int io_submit(aio_context_t " ctx_id ", long " nr \
", struct iocb **" iocbpp );
.fi

.IR Note :
There is no glibc wrapper for this system call; see NOTES.
.SH DESCRIPTION
.PP
The
.BR io_submit ()
system call
queues \fInr\fP I/O request blocks for processing in
the AIO context \fIctx_id\fP.
The
.I iocbpp
argument should be an array of \fInr\fP AIO control blocks,
which will be submitted to context \fIctx_id\fP.
.SH RETURN VALUE
On success,
.BR io_submit ()
returns the number of \fIiocb\fPs submitted (which may be
0 if \fInr\fP is zero).
For the failure return, see NOTES.
.SH ERRORS
.TP
.B EAGAIN
Insufficient resources are available to queue any \fIiocb\fPs.
.TP
.B EBADF
The file descriptor specified in the first \fIiocb\fP is invalid.
.TP
.B EFAULT
One of the data structures points to invalid data.
.TP
.B EINVAL
The AIO context specified by \fIctx_id\fP is invalid.
\fInr\fP is less than 0.
The \fIiocb\fP at
.I *iocbpp[0]
is not properly initialized,
or the operation specified is invalid for the file descriptor
in the \fIiocb\fP.
.TP
.B ENOSYS
.BR io_submit ()
is not implemented on this architecture.
.SH VERSIONS
.PP
The asynchronous I/O system calls first appeared in Linux 2.5.
.SH CONFORMING TO
.PP
.BR io_submit ()
is Linux-specific and should not be used in
programs that are intended to be portable.
.SH NOTES
Glibc does not provide a wrapper function for this system call.
You could invoke it using
.BR syscall (2).
But instead, you probably want to use the
.BR io_submit ()
wrapper function provided by
.\" http://git.fedorahosted.org/git/?p=libaio.git
.IR libaio .

Note that the
.I libaio
wrapper function uses a different type
.RI ( io_context_t )
.\" But glibc is confused, since <libaio.h> uses 'io_context_t' to declare
.\" the system call.
for the
.I ctx_id
argument.
Note also that the
.I libaio
wrapper does not follow the usual C library conventions for indicating errors:
on error it returns a negated error number
(the negative of one of the values listed in ERRORS).
If the system call is invoked via
.BR syscall (2),
then the return value follows the usual conventions for
indicating an error: \-1, with
.I errno
set to a (positive) value that indicates the error.
.SH SEE ALSO
.BR io_cancel (2),
.BR io_destroy (2),
.BR io_getevents (2),
.BR io_setup (2),
.BR aio (7)
.\" .SH AUTHOR
.\" Kent Yoder.
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1995 Michael Chastain (mec@shell.portal.com), 15 April 1995.
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.\" Modified Tue Oct 22 08:11:14 EDT 1996 by Eric S. Raymond <esr@thyrsus.com>
.TH IPC 2 2012-10-16 "Linux" "Linux Programmer's Manual"
.SH NAME
ipc \- System V IPC system calls
.SH SYNOPSIS
.nf
.BI "int ipc(unsigned int " call ", int " first ", int " second \
", int " third ,
.BI "        void *" ptr ", long " fifth );
.fi
.SH DESCRIPTION
.BR ipc ()
is a common kernel entry point for the System\ V IPC calls
for messages, semaphores, and shared memory.
.I call
determines which IPC function to invoke;
the other arguments are passed through to the appropriate call.
.PP
User programs should call the appropriate functions by their usual names.
Only standard library implementors and kernel hackers need to know about
.BR ipc ().
.SH CONFORMING TO
.BR ipc ()
is Linux-specific, and should not be used in programs
intended to be portable.
.SH NOTES
On some architectures\(emfor example x86-64 and ARM\(emthere is no
.BR ipc ()
system call; instead
.BR msgctl (2),
.BR semctl (2),
.BR shmctl (2),
and so on really are implemented as separate system calls.
.SH SEE ALSO
.BR msgctl (2),
.BR msgget (2),
.BR msgrcv (2),
.BR msgsnd (2),
.BR semctl (2),
.BR semget (2),
.BR semop (2),
.BR semtimedop (2),
.BR shmat (2),
.BR shmctl (2),
.BR shmdt (2),
.BR shmget (2)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2012, Cyrill Gorcunov <gorcunov@openvz.org>
.\" and Copyright (C) 2012, Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of
.\" this manual under the conditions for verbatim copying, provided that
.\" the entire resulting derived work is distributed under the terms of
.\" a permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume
.\" no responsibility for errors or omissions, or for damages resulting
.\" from the use of the information contained herein.  The author(s) may
.\" not have taken the same level of care in the production of this
.\" manual, which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Kernel commit d97b46a64674a267bc41c9e16132ee2a98c3347d
.\"
.TH KCMP 2 2013-12-08 "Linux" "Linux Programmer's Manual"
.SH NAME
kcmp \- compare two processes to determine if they share a kernel resource
.SH SYNOPSIS
.nf
.B #include <linux/kcmp.h>

.BI "int kcmp(pid_t " pid1 ", pid_t " pid2 ", int " type ,
.BI "         unsigned long " idx1 ", unsigned long "  idx2 );
.fi

.IR Note :
There is no glibc wrapper for this system call; see NOTES.
.SH DESCRIPTION
The
.BR kcmp ()
system call can be used to check whether the two processes identified by
.I pid1
and
.I pid2
share a kernel resource such as virtual memory, file descriptors,
and so on.

The
.I type
argument specifies which resource is to be compared in the two processes.
It has one of the following values:
.TP
.BR KCMP_FILE
Check whether a file descriptor
.I idx1
in the process
.I pid1
refers to the same open file description (see
.BR open (2))
as file descriptor
.I idx2
in the process
.IR pid2 .
.TP
.BR KCMP_FILES
Check whether the process share the same set of open file descriptors.
The arguments
.I idx1
and
.I idx2
are ignored.
.TP
.BR KCMP_FS
Check whether the processes share the same filesystem information
(i.e., file mode creation mask, working directory, and filesystem root).
The arguments
.I idx1
and
.I idx2
are ignored.
.TP
.BR KCMP_IO
Check whether the processes share I/O context.
The arguments
.I idx1
and
.I idx2
are ignored.
.TP
.BR KCMP_SIGHAND
Check whether the processes share the same table of signal dispositions.
The arguments
.I idx1
and
.I idx2
are ignored.
.TP
.BR KCMP_SYSVSEM
Check whether the processes share the same
list of System\ V semaphore undo operations.
The arguments
.I idx1
and
.I idx2
are ignored.
.TP
.BR KCMP_VM
Check whether the processes share the same address space.
The arguments
.I idx1
and
.I idx2
are ignored.
.PP
Note the
.BR kcmp ()
is not protected against false positives which may occur if tasks are
running.
One should stop tasks by sending
.BR SIGSTOP
(see
.BR signal (7))
prior to inspection with this system call to obtain meaningful results.
.SH RETURN VALUE
The return value of a successful call to
.BR kcmp ()
is simply the result of arithmetic comparison
of kernel pointers (when the kernel compares resources, it uses their
memory addresses).

The easiest way to explain is to consider an example.
Suppose that
.I v1
and
.I v2
are the addresses of appropriate resources, then the return value
is one of the following:
.RS 4
.IP 0 4
.I v1
is equal to
.IR v2 ;
in other words, the two processes share the resource.
.IP 1
.I v1
is less than
.IR v2 .
.IP 2
.I v1
is greater than
.IR v2 .
.IP 3
.I v1
is not equal to
.IR v2 ,
but ordering information is unavailable.
.RE
.PP
On error, \-1 is returned, and
.I errno
is set appropriately.

.BR kcmp ()
was designed to return values suitable for sorting.
This is particularly handy if one needs to compare
a large number of file descriptors.
.SH ERRORS
.TP
.B EBADF
.I type
is
.B KCMP_FILE
and
.I fd1
or
.I fd2
is not an open file descriptor.
.TP
.B EINVAL
.I type
is invalid.
.TP
.B EPERM
Insufficient permission to inspect process resources.
The
.B CAP_SYS_PTRACE
capability is required to inspect processes that you do not own.
.TP
.B ESRCH
Process
.I pid1
or
.I pid2
does not exist.
.SH VERSIONS
The
.BR kcmp ()
system call first appeared in Linux 3.5.
.SH CONFORMING TO
.BR kcmp ()
is Linux-specific and should not be used in programs intended to be portable.
.SH NOTES
Glibc does not provide a wrapper for this system call; call it using
.BR syscall (2).

This system call is available only if the kernel was configured with
.BR CONFIG_CHECKPOINT_RESTORE .
The main use of the system call is for the
checkpoint/restore in user space (CRIU) feature.
The alternative to this system call would have been to expose suitable
process information via the
.BR proc (5)
filesystem; this was deemed to be unsuitable for security reasons.

See
.BR clone (2)
for some background information on the shared resources
referred to on this page.
.SH SEE ALSO
.BR clone (2),
.BR unshare (2)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2010 Intel Corporation, Author: Andi Kleen
.\" and Copyright 2014, Vivek Goyal <vgoyal@redhat.com>
.\" and Copyright (c) 2015, Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH KEXEC_LOAD 2 2015-02-01 "Linux" "Linux Programmer's Manual"
.SH NAME
kexec_load, kexec_file_load \- load a new kernel for later execution
.SH SYNOPSIS
.nf
.B #include <linux/kexec.h>

.BI "long kexec_load(unsigned long " entry ", unsigned long " nr_segments ","
.BI "                struct kexec_segment *" segments \
", unsigned long " flags ");"

.BI "long kexec_file_load(int " kernel_fd ", int " initrd_fd ","
.br
.BI "                    unsigned long " cmdline_len  \
", const char *" cmdline ","
.BI "                    unsigned long " flags ");"

.fi
.IR Note :
There are no glibc wrappers for these system calls; see NOTES.
.SH DESCRIPTION
The
.BR kexec_load ()
system call loads a new kernel that can be executed later by
.BR reboot (2).
.PP
The
.I flags
argument is a bit mask that controls the operation of the call.
The following values can be specified in
.IR flags :
.TP
.BR KEXEC_ON_CRASH " (since Linux 2.6.13)"
Execute the new kernel automatically on a system crash.
This "crash kernel" is loaded into an area of reserved memory that
is determined at boot time using the
.I craskkernel
kernel command-line parameter.
The location of this reserved memory is exported to user space via the
.I /proc/iomem
file, in an entry labeled "Crash kernel".
A user-space application can parse this file and prepare a list of
segments (see below) that specify this reserved memory as destination.
If this flag is specified, the kernel checks that the
target segments specified in
.I segments
fall within the reserved region.
.TP
.BR KEXEC_PRESERVE_CONTEXT " (since Linux 2.6.27)"
Preserve the system hardware and
software states before executing the new kernel.
This could be used for system suspend.
This flag is available only if the kernel was configured with
.BR CONFIG_KEXEC_JUMP ,
and is effective only if
.I nr_segments
is greater than 0.
.PP
The high-order bits (corresponding to the mask 0xffff0000) of
.I flags
contain the architecture of the to-be-executed kernel.
Specify (OR) the constant
.B KEXEC_ARCH_DEFAULT
to use the current architecture,
or one of the following architecture constants
.BR KEXEC_ARCH_386 ,
.BR KEXEC_ARCH_68K ,
.BR KEXEC_ARCH_X86_64 ,
.BR KEXEC_ARCH_PPC ,
.BR KEXEC_ARCH_PPC64 ,
.BR KEXEC_ARCH_IA_64 ,
.BR KEXEC_ARCH_ARM ,
.BR KEXEC_ARCH_S390 ,
.BR KEXEC_ARCH_SH ,
.BR KEXEC_ARCH_MIPS ,
and
.BR KEXEC_ARCH_MIPS_LE .
The architecture must be executable on the CPU of the system.

The
.I entry
argument is the physical entry address in the kernel image.
The
.I nr_segments
argument is the number of segments pointed to by the
.I segments
pointer;
the kernel imposes an (arbitrary) limit of 16 on the number of segments.
The
.I segments
argument is an array of
.I kexec_segment
structures which define the kernel layout:
.in +4n
.nf

struct kexec_segment {
    void   *buf;        /* Buffer in user space */
    size_t  bufsz;      /* Buffer length in user space */
    void   *mem;        /* Physical address of kernel */
    size_t  memsz;      /* Physical address length */
};
.fi
.in
.PP
The kernel image defined by
.I segments
is copied from the calling process into
the kernel either in regular
memory or in reserved memory (if
.BR KEXEC_ON_CRASH
is set).
The kernel first performs various sanity checks on the
information passed in
.IR segments .
If these checks pass, the kernel copies the segment data to kernel memory.
Each segment specified in
.I segments
is copied as follows:
.IP * 3
.I buf
and
.I bufsz
identify a memory region in the caller's virtual address space
that is the source of the copy.
The value in
.I bufsz
may not exceed the value in the
.I memsz
field.
.IP *
.I mem
and
.I memsz
specify a physical address range that is the target of the copy.
The values specified in both fields must be multiples of
the system page size.
.IP *
.I bufsz
bytes are copied from the source buffer to the target kernel buffer.
If
.I bufsz
is less than
.IR memsz ,
then the excess bytes in the kernel buffer are zeroed out.
.PP
In case of a normal kexec (i.e., the
.BR KEXEC_ON_CRASH
flag is not set), the segment data is loaded in any available memory
and is moved to the final destination at kexec reboot time (e.g., when the
.BR kexec (8)
command is executed with the
.I \-e
option).

In case of kexec on panic (i.e., the
.BR KEXEC_ON_CRASH
flag is set), the segment data is
loaded to reserved memory at the time of the call, and, after a crash,
the kexec mechanism simply passes control to that kernel.

The
.BR kexec_load ()
system call is available only if the kernel was configured with
.BR CONFIG_KEXEC .
.SS kexec_file_load()
The
.BR kexec_file_load ()
system call is similar to
.BR kexec_load (),
but it takes a different set of arguments.
It reads the kernel to be loaded from the file referred to by the descriptor
.IR kernel_fd ,
and the initrd (initial RAM disk)
to be loaded from file referred to by the descriptor
.IR initrd_fd .
The
.IR cmdline
argument is a pointer to a buffer containing the command line
for the new kernel.
The
.IR cmdline_len
argument specifies size of the buffer.
The last byte in the buffer must be a null byte (\(aq\\0\(aq).

The
.IR flags
argument is a bit mask which modifies the behavior of the call.
The following values can be specified in
.IR flags :
.TP
.BR KEXEC_FILE_UNLOAD
Unload the currently loaded kernel.
.TP
.BR KEXEC_FILE_ON_CRASH
Load the new kernel in the memory region reserved for the crash kernel
(as for
.BR KEXEC_ON_CRASH).
This kernel is booted if the currently running kernel crashes.
.TP
.BR KEXEC_FILE_NO_INITRAMFS
Loading initrd/initramfs is optional.
Specify this flag if no initramfs is being loaded.
If this flag is set, the value passed in
.IR initrd_fd
is ignored.
.PP
The
.BR kexec_file_load ()
.\" See also http://lwn.net/Articles/603116/
system call was added to provide support for systems
where "kexec" loading should be restricted to
only kernels that are signed.
This system call is available only if the kernel was configured with
.BR CONFIG_KEXEC_FILE .
.SH RETURN VALUE
On success, these system calls returns 0.
On error, \-1 is returned and
.I errno
is set to indicate the error.
.SH ERRORS
.TP
.B EADDRNOTAVAIL
.\" See kernel/kexec.::sanity_check_segment_list in the 3.19 kernel source
The
.B KEXEC_ON_CRASH
flags was specified, but the region specified by the
.I mem
and
.I memsz
fields of one of the
.I segments
entries lies outside the range of memory reserved for the crash kernel.
.TP
.B EADDRNOTAVAIL
The value in a
.I mem
or
.I memsz
field in one of the
.I segments
entries is not a multiple of the system page size.
.TP
.B EBADF
.I kernel_fd
or
.I initrd_fd
is not a valid file descriptor.
.TP
.B EBUSY
Another crash kernel is already being loaded
or a crash kernel is already in use.
.TP
.B EINVAL
.I flags
is invalid.
.TP
.B EINVAL
The value of a
.I bufsz
field in one of the
.I segments
entries exceeds the value in the corresponding
.I memsz
field.
.TP
.B EINVAL
.IR nr_segments
exceeds
.BR KEXEC_SEGMENT_MAX
(16).
.TP
.B EINVAL
Two or more of the kernel target buffers overlap.
.TP
.B EINVAL
The value in
.I cmdline[cmdline_len-1]
is not \(aq\\0\(aq.
.TP
.B EINVAL
The file referred to by
.I kernel_fd
or
.I initrd_fd
is empty (length zero).
.TP
.B ENOMEM
Could not allocate memory.
.TP
.B ENOEXEC
.I kernel_fd
does not refer to an open file, or the kernel can't load this file.
Currently, the file must be a bzImage and contain an x86 kernel that
is loadable above 4GiB in memory (see the kernel source file
.IR Documentation/x86/boot.txt ).
.TP
.B EPERM
The caller does not have the
.BR CAP_SYS_BOOT
capability.
.SH VERSIONS
The
.BR kexec_load ()
system call first appeared in Linux 2.6.13.
The
.BR kexec_file_load ()
system call first appeared in Linux 3.17.
.SH CONFORMING TO
These system calls are Linux-specific.
.SH NOTES
Currently, there is no glibc support for these system calls.
Call them using
.BR syscall (2).
.SH SEE ALSO
.BR reboot (2),
.BR syscall (2),
.BR kexec (8)

The kernel source files
.IR Documentation/kdump/kdump.txt
and
.IR Documentation/kernel-parameters.txt .
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2006 Red Hat, Inc. All Rights Reserved.
.\" Written by David Howells (dhowells@redhat.com)
.\"
.\" %%%LICENSE_START(GPLv2+_SW_ONEPARA)
.\" This program is free software; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License
.\" as published by the Free Software Foundation; either version
.\" 2 of the License, or (at your option) any later version.
.\" %%%LICENSE_END
.\"
.\" FIXME Document KEYCTL_GET_SECURITY (new in 2.6.26)
.\"		commit 70a5bb72b55e82fbfbf1e22cae6975fac58a1e2d
.\"		Author: David Howells <dhowells@redhat.com>
.\"		Date:   Tue Apr 29 01:01:26 2008 -0700
.\" FIXME Document KEYCTL_SESSION_TO_PARENT (new in 2.6.32)
.\"		commit ee18d64c1f632043a02e6f5ba5e045bb26a5465f
.\"		Author: David Howells <dhowells@redhat.com>
.\"		Date:   Wed Sep 2 09:14:21 2009 +0100
.\" FIXME Document KEYCTL_REJECT (new in 2.6.39)
.\"		commit fdd1b94581782a2ddf9124414e5b7a5f48ce2f9c
.\"		Author: David Howells <dhowells@redhat.com>
.\"		Documentation/security/keys.txt
.\" FIXME Document KEYCTL_INSTANTIATE_IOV (new in 2.6.39)
.\"		commit ee009e4a0d4555ed522a631bae9896399674f064
.\"		Author: David Howells <dhowells@redhat.com>
.\"		Documentation/security/keys.txt
.\" FIXME Document KEYCTL_INVALIDATE (new in 3.5)
.\"		commit fd75815f727f157a05f4c96b5294a4617c0557da
.\"		Author: David Howells <dhowells@redhat.com>
.\"		Documentation/security/keys.txt
.\" FIXME Document KEYCTL_GET_PERSISTENT (new in 3.13)
.\"		commit f36f8c75ae2e7d4da34f4c908cebdb4aa42c977e
.\"		Author: David Howells <dhowells@redhat.com>
.\"
.TH KEYCTL 2 2015-05-07 Linux "Linux Key Management Calls"
.SH NAME
keyctl \- manipulate the kernel's key management facility
.SH SYNOPSIS
.nf
.B #include <keyutils.h>
.sp
.BI "long keyctl(int " cmd ", ...);"
.fi
.SH DESCRIPTION
.BR keyctl ()
has a number of functions available:
.TP
.B KEYCTL_GET_KEYRING_ID
Ask for a keyring's ID.
.TP
.B KEYCTL_JOIN_SESSION_KEYRING
Join or start named session keyring.
.TP
.B KEYCTL_UPDATE
Update a key.
.TP
.B KEYCTL_REVOKE
Revoke a key.
.TP
.B KEYCTL_CHOWN
Set ownership of a key.
.TP
.B KEYCTL_SETPERM
Set perms on a key.
.TP
.B KEYCTL_DESCRIBE
Describe a key.
.TP
.B KEYCTL_CLEAR
Clear contents of a keyring.
.TP
.B KEYCTL_LINK
Link a key into a keyring.
.TP
.B KEYCTL_UNLINK
Unlink a key from a keyring.
.TP
.B KEYCTL_SEARCH
Search for a key in a keyring.
.TP
.B KEYCTL_READ
Read a key or keyring's contents.
.TP
.B KEYCTL_INSTANTIATE
Instantiate a partially constructed key.
.TP
.B KEYCTL_NEGATE
Negate a partially constructed key.
.TP
.B KEYCTL_SET_REQKEY_KEYRING
Set default request-key keyring.
.TP
.B KEYCTL_SET_TIMEOUT
Set timeout on a key.
.TP
.B KEYCTL_ASSUME_AUTHORITY
Assume authority to instantiate key.
.P
These are wrapped by
.B libkeyutils
into individual functions to permit compiler the compiler to check types.
See the
.B See Also
section at the bottom.
.SH RETURN VALUE
On success
.BR keyctl ()
returns the serial number of the key it found.
On error, the value \-1
will be returned and errno will have been set to an appropriate error.
.SH ERRORS
.TP
.B EACCES
A key operation wasn't permitted.
.TP
.B EDQUOT
The key quota for the caller's user would be exceeded by creating a key or
linking it to the keyring.
.TP
.B EKEYEXPIRED
An expired key was found or specified.
.TP
.B EKEYREJECTED
A rejected key was found or specified.
.TP
.B EKEYREVOKED
A revoked key was found or specified.
.TP
.B ENOKEY
No matching key was found or an invalid key was specified.
.SH LINKING
Although this is a Linux system call, it is not present in
.I libc
but can be found rather in
.IR libkeyutils .
When linking,
.B -lkeyutils
should be specified to the linker.
.SH SEE ALSO
.ad l
.nh
.BR keyctl (1),
.BR add_key (2),
.BR request_key (2),
.BR keyctl_set_timeout (3),
.BR keyctl_chown (3),
.BR keyctl_clear (3),
.BR keyctl_describe (3),
.BR keyctl_describe_alloc (3),
.BR keyctl_get_keyring_ID (3),
.BR keyctl_instantiate (3),
.BR keyctl_join_session_keyring (3),
.BR keyctl_link (3),
.BR keyctl_negate (3),
.BR keyctl_revoke (3),
.BR keyctl_search (3),
.BR keyctl_setperm (3),
.BR keyctl_set_reqkey_keyring (3),
.BR keyctl_set_timeout (3),
.BR keyctl_read (3),
.BR keyctl_read_alloc (3),
.BR keyctl_unlink (3),
.BR keyctl_update (3),
.BR keyrings (7),
.BR request-key (8)

The kernel source file
.IR Documentation/security/keys.txt .
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1992 Drew Eckhardt (drew@cs.colorado.edu), March 28, 1992
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified by Michael Haardt <michael@moria.de>
.\" Modified by Thomas Koenig <ig25@rz.uni-karlsruhe.de>
.\" Modified 1993-07-23 by Rik Faith <faith@cs.unc.edu>
.\" Modified 1993-07-25 by Rik Faith <faith@cs.unc.edu>
.\" Modified 1995-11-01 by Michael Haardt
.\"  <michael@cantor.informatik.rwth-aachen.de>
.\" Modified 1996-04-14 by Andries Brouwer <aeb@cwi.nl>
.\"  [added some polishing contributed by Mike Battersby <mib@deakin.edu.au>]
.\" Modified 1996-07-21 by Andries Brouwer <aeb@cwi.nl>
.\" Modified 1997-01-17 by Andries Brouwer <aeb@cwi.nl>
.\" Modified 2001-12-18 by Andries Brouwer <aeb@cwi.nl>
.\" Modified 2002-07-24 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"	Added note on historical rules enforced when an unprivileged process
.\"	sends a signal.
.\" Modified 2004-06-16 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"     Added note on CAP_KILL
.\" Modified 2004-06-24 by aeb
.\" Modified, 2004-11-30, after idea from emmanuel.colbus@ensimag.imag.fr
.\"
.TH KILL 2 2013-09-17 "Linux" "Linux Programmer's Manual"
.SH NAME
kill \- send signal to a process
.SH SYNOPSIS
.nf
.B #include <sys/types.h>
.br
.B #include <signal.h>
.sp
.BI "int kill(pid_t " pid ", int " sig );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR kill ():
_POSIX_C_SOURCE\ >=\ 1 || _XOPEN_SOURCE || _POSIX_SOURCE
.ad b
.SH DESCRIPTION
The
.BR kill ()
system call
can be used to send any signal to any process group or process.
.PP
If \fIpid\fP is positive, then signal \fIsig\fP is sent to the
process with the ID specified by \fIpid\fP.
.PP
If \fIpid\fP equals 0, then \fIsig\fP is sent to every process in the
process group of the calling process.
.PP
If \fIpid\fP equals \-1, then \fIsig\fP is sent to every process
for which the calling process has permission to send signals,
except for process 1 (\fIinit\fP), but see below.
.PP
If \fIpid\fP is less than \-1, then \fIsig\fP is sent to every process
in the process group whose ID is \fI\-pid\fP.
.PP
If \fIsig\fP is 0, then no signal is sent, but error checking is still
performed;
this can be used to check for the existence of a process ID or
process group ID.

For a process to have permission to send a signal
it must either be privileged (under Linux: have the
.B CAP_KILL
capability), or the real or effective
user ID of the sending process must equal the real or
saved set-user-ID of the target process.
In the case of
.B SIGCONT
it suffices when the sending and receiving
processes belong to the same session.
(Historically, the rules were different; see NOTES.)
.SH RETURN VALUE
On success (at least one signal was sent), zero is returned.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EINVAL
An invalid signal was specified.
.TP
.B EPERM
The process does not have permission to send the signal
to any of the target processes.
.TP
.B ESRCH
The pid or process group does not exist.
Note that an existing process might be a zombie,
a process which already committed termination, but
has not yet been
.BR wait (2)ed
for.
.SH CONFORMING TO
SVr4, 4.3BSD, POSIX.1-2001.
.SH NOTES
The only signals that can be sent to process ID 1, the
.I init
process, are those for which
.I init
has explicitly installed signal handlers.
This is done to assure the
system is not brought down accidentally.
.LP
POSIX.1-2001 requires that \fIkill(\-1,sig)\fP send \fIsig\fP
to all processes that the calling process may send signals to,
except possibly for some implementation-defined system processes.
Linux allows a process to signal itself, but on Linux the call
\fIkill(\-1,sig)\fP does not signal the calling process.
.LP
POSIX.1-2001 requires that if a process sends a signal to itself,
and the sending thread does not have the signal blocked,
and no other thread
has it unblocked or is waiting for it in
.BR sigwait (3),
at least one
unblocked signal must be delivered to the sending thread before the
.BR kill ()
returns.
.SS Linux notes
Across different kernel versions, Linux has enforced different rules
for the permissions required for an unprivileged process
to send a signal to another process.
.\" In the 0.* kernels things chopped and changed quite
.\" a bit - MTK, 24 Jul 02
In kernels 1.0 to 1.2.2, a signal could be sent if the
effective user ID of the sender matched effective user ID of the target,
or the real user ID of the sender matched the real user ID of the target.
From kernel 1.2.3 until 1.3.77, a signal could be sent if the
effective user ID of the sender matched either the real or effective
user ID of the target.
The current rules, which conform to POSIX.1-2001, were adopted
in kernel 1.3.78.
.SH BUGS
In 2.6 kernels up to and including 2.6.7,
there was a bug that meant that when sending signals to a process group,
.BR kill ()
failed with the error
.B EPERM
if the caller did not have permission to send the signal to \fIany\fP (rather
than \fIall\fP) of the members of the process group.
Notwithstanding this error return, the signal was still delivered
to all of the processes for which the caller had permission to signal.
.SH SEE ALSO
.BR _exit (2),
.BR killpg (2),
.BR signal (2),
.BR tkill (2),
.BR exit (3),
.BR sigqueue (3),
.BR capabilities (7),
.BR credentials (7),
.BR signal (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1980, 1991 Regents of the University of California.
.\" All rights reserved.
.\"
.\" %%%LICENSE_START(BSD_4_CLAUSE_UCB)
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\" %%%LICENSE_END
.\"
.\"     @(#)killpg.2	6.5 (Berkeley) 3/10/91
.\"
.\" Modified Fri Jul 23 21:55:01 1993 by Rik Faith <faith@cs.unc.edu>
.\" Modified Tue Oct 22 08:11:14 EDT 1996 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified 2004-06-16 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"     Added notes on CAP_KILL
.\" Modified 2004-06-21 by aeb
.\"
.TH KILLPG 2 2015-02-21 "Linux" "Linux Programmer's Manual"
.SH NAME
killpg \- send signal to a process group
.SH SYNOPSIS
.B #include <signal.h>
.sp
.BI "int killpg(int " pgrp ", int " sig );
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.ad l
.TP 4
.BR killpg ():
_BSD_SOURCE || _XOPEN_SOURCE\ >=\ 500 ||
_XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED
.ad
.SH DESCRIPTION
.BR killpg ()
sends the signal
.I sig
to the process group
.IR pgrp .
See
.BR signal (7)
for a list of signals.

If
.I pgrp
is 0,
.BR killpg ()
sends the signal to the calling process's process group.
(POSIX says: If
.I pgrp
is less than or equal to 1, the behavior is undefined.)

For a process to have permission to send a signal
it must either be privileged (under Linux: have the
.B CAP_KILL
capability), or the real or effective
user ID of the sending process must equal the real or
saved set-user-ID of the target process.
In the case of
.B SIGCONT
it suffices when the sending and receiving
processes belong to the same session.
.SH RETURN VALUE
On success, zero is returned.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EINVAL
.I sig
is not a valid signal number.
.TP
.B EPERM
The process does not have permission to send the signal
to any of the target processes.
.TP
.B ESRCH
No process can be found in the process group specified by
.IR pgrp .
.TP
.B ESRCH
The process group was given as 0 but the sending process does not
have a process group.
.SH CONFORMING TO
SVr4, 4.4BSD (the
.BR killpg ()
function call first appeared in 4BSD), POSIX.1-2001.
.SH NOTES
There are various differences between the permission checking
in BSD-type systems and System\ V-type systems.
See the POSIX rationale for
.BR kill ().
A difference not mentioned by POSIX concerns the return
value
.BR EPERM :
BSD documents that no signal is sent and
.B EPERM
returned when the permission check failed for at least one target process,
while POSIX documents
.B EPERM
only when the permission check failed for all target processes.
.SS C library/kernel ABI differences
On Linux,
.BR killpg ()
is implemented as a library function that makes the call
.IR "kill(-pgrp,\ sig)" .
.SH SEE ALSO
.BR getpgrp (2),
.BR kill (2),
.BR signal (2),
.BR capabilities (7),
.BR credentials (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" This manpage is Copyright (C) 1992 Drew Eckhardt;
.\"             and Copyright (C) 1993 Michael Haardt, Ian Jackson.
.\" and Copyright (C) 2006, 2014 Michael Kerrisk
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified 1993-07-23 by Rik Faith <faith@cs.unc.edu>
.\" Modified 1994-08-21 by Michael Haardt
.\" Modified 2004-06-23 by Michael Kerrisk <mtk.manpages@gmail.com>
.\" Modified 2005-04-04, as per suggestion by Michael Hardt for rename.2
.\"
.TH LINK 2 2014-08-19 "Linux" "Linux Programmer's Manual"
.SH NAME
link, linkat \- make a new name for a file
.SH SYNOPSIS
.nf
.B #include <unistd.h>
.sp
.BI "int link(const char *" oldpath ", const char *" newpath );
.sp
.BR "#include <fcntl.h>           " "/* Definition of AT_* constants */"
.B #include <unistd.h>
.sp
.BI "int linkat(int " olddirfd ", const char *" oldpath ,
.BI "           int " newdirfd ", const char *" newpath ", int " flags );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR linkat ():
.PD 0
.ad l
.RS 4
.TP 4
Since glibc 2.10:
_XOPEN_SOURCE\ >=\ 700 || _POSIX_C_SOURCE\ >=\ 200809L
.TP
Before glibc 2.10:
_ATFILE_SOURCE
.RE
.ad
.PD
.SH DESCRIPTION
.BR link ()
creates a new link (also known as a hard link) to an existing file.

If
.I newpath
exists, it will
.I not
be overwritten.

This new name may be used exactly as the old one for any operation;
both names refer to the same file (and so have the same permissions
and ownership) and it is impossible to tell which name was the
"original".
.SS linkat()
The
.BR linkat ()
system call operates in exactly the same way as
.BR link (),
except for the differences described here.

If the pathname given in
.I oldpath
is relative, then it is interpreted relative to the directory
referred to by the file descriptor
.I olddirfd
(rather than relative to the current working directory of
the calling process, as is done by
.BR link ()
for a relative pathname).

If
.I oldpath
is relative and
.I olddirfd
is the special value
.BR AT_FDCWD ,
then
.I oldpath
is interpreted relative to the current working
directory of the calling process (like
.BR link ()).

If
.I oldpath
is absolute, then
.I olddirfd
is ignored.

The interpretation of
.I newpath
is as for
.IR oldpath ,
except that a relative pathname is interpreted relative
to the directory referred to by the file descriptor
.IR newdirfd .

The following values can be bitwise ORed in
.IR flags :
.TP
.BR AT_EMPTY_PATH " (since Linux 2.6.39)"
.\" commit 11a7b371b64ef39fc5fb1b6f2218eef7c4d035e3
If
.I oldpath
is an empty string, create a link to the file referenced by
.IR olddirfd
(which may have been obtained using the
.BR open (2)
.B O_PATH
flag).
In this case,
.I olddirfd
can refer to any type of file, not just a directory.
This will generally not work if the file has a link count of zero (files
created with
.BR O_TMPFILE
and without
.BR O_EXCL
are an exception).
The caller must have the
.BR CAP_DAC_READ_SEARCH
capability in order to use this flag.
This flag is Linux-specific; define
.B _GNU_SOURCE
.\" Before glibc 2.16, defining _ATFILE_SOURCE sufficed
to obtain its definition.
.TP
.BR AT_SYMLINK_FOLLOW " (since Linux 2.6.18)"
By default,
.BR linkat (),
does not dereference
.I oldpath
if it is a symbolic link (like
.BR link ()).
The flag
.B AT_SYMLINK_FOLLOW
can be specified in
.I flags
to cause
.I oldpath
to be dereferenced if it is a symbolic link.
If procfs is mounted,
this can be used as an alternative to
.BR AT_EMPTY_PATH ,
like this:

.nf
.in +4n
linkat(AT_FDCWD, "/proc/self/fd/<fd>", newdirfd,
       newname, AT_SYMLINK_FOLLOW);
.in
.fi
.PP
Before kernel 2.6.18, the
.I flags
argument was unused, and had to be specified as 0.
.PP
See
.BR openat (2)
for an explanation of the need for
.BR linkat ().
.SH RETURN VALUE
On success, zero is returned.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EACCES
Write access to the directory containing
.I newpath
is denied, or search permission is denied for one of the directories
in the path prefix of
.I oldpath
or
.IR newpath .
(See also
.BR path_resolution (7).)
.TP
.B EDQUOT
The user's quota of disk blocks on the filesystem has been exhausted.
.TP
.B EEXIST
.I newpath
already exists.
.TP
.B EFAULT
.IR oldpath " or " newpath " points outside your accessible address space."
.TP
.B EIO
An I/O error occurred.
.TP
.B ELOOP
Too many symbolic links were encountered in resolving
.IR oldpath " or " newpath .
.TP
.B EMLINK
The file referred to by
.I oldpath
already has the maximum number of links to it.
.TP
.B ENAMETOOLONG
.IR oldpath " or " newpath " was too long."
.TP
.B ENOENT
A directory component in
.IR oldpath " or " newpath
does not exist or is a dangling symbolic link.
.TP
.B ENOMEM
Insufficient kernel memory was available.
.TP
.B ENOSPC
The device containing the file has no room for the new directory
entry.
.TP
.B ENOTDIR
A component used as a directory in
.IR oldpath " or " newpath
is not, in fact, a directory.
.TP
.B EPERM
.I oldpath
is a directory.
.TP
.B EPERM
The filesystem containing
.IR oldpath " and " newpath
does not support the creation of hard links.
.TP
.BR EPERM " (since Linux 3.6)"
The caller does not have permission to create a hard link to this file
(see the description of
.IR /proc/sys/fs/protected_hardlinks
in
.BR proc (5)).
.TP
.B EROFS
The file is on a read-only filesystem.
.TP
.B EXDEV
.IR oldpath " and " newpath
are not on the same mounted filesystem.
(Linux permits a filesystem to be mounted at multiple points, but
.BR link ()
does not work across different mount points,
even if the same filesystem is mounted on both.)
.PP
The following additional errors can occur for
.BR linkat ():
.TP
.B EBADF
.I olddirfd
or
.I newdirfd
is not a valid file descriptor.
.TP
.B EINVAL
An invalid flag value was specified in
.IR flags .
.TP
.B ENOENT
.B AT_EMPTY_PATH
was specified in
.IR flags ,
but the caller did not have the
.B CAP_DAC_READ_SEARCH
capability.
.TP
.B ENOENT
An attempt was made to link to the
.I /proc/self/fd/NN
file corresponding to a file descriptor created with

    open(path, O_TMPFILE | O_EXCL, mode);

See
.BR open (2).
.TP
.B ENOENT
.I oldpath
is a relative pathname and
.I olddirfd
refers to a directory that has been deleted,
or
.I newpath
is a relative pathname and
.I newdirfd
refers to a directory that has been deleted.
.TP
.B ENOTDIR
.I oldpath
is relative and
.I olddirfd
is a file descriptor referring to a file other than a directory;
or similar for
.I newpath
and
.I newdirfd
.TP
.B EPERM
.BR AT_EMPTY_PATH
was specified in
.IR flags ,
.I oldpath
is an empty string, and
.IR olddirfd
refers to a directory.
.SH VERSIONS
.BR linkat ()
was added to Linux in kernel 2.6.16;
library support was added to glibc in version 2.4.
.SH CONFORMING TO
.BR link ():
SVr4, 4.3BSD, POSIX.1-2001 (but see NOTES), POSIX.1-2008.
.\" SVr4 documents additional ENOLINK and
.\" EMULTIHOP error conditions; POSIX.1 does not document ELOOP.
.\" X/OPEN does not document EFAULT, ENOMEM or EIO.

.BR linkat ():
POSIX.1-2008.
.SH NOTES
Hard links, as created by
.BR link (),
cannot span filesystems.
Use
.BR symlink (2)
if this is required.

POSIX.1-2001 says that
.BR link ()
should dereference
.I oldpath
if it is a symbolic link.
However, since kernel 2.0,
.\" more precisely: since kernel 1.3.56
Linux does not do so: if
.I oldpath
is a symbolic link, then
.I newpath
is created as a (hard) link to the same symbolic link file
(i.e.,
.I newpath
becomes a symbolic link to the same file that
.I oldpath
refers to).
Some other implementations behave in the same manner as Linux.
.\" For example, the default Solaris compilation environment
.\" behaves like Linux, and contributors to a March 2005
.\" thread in the Austin mailing list reported that some
.\" other (System V) implementations did/do the same -- MTK, Apr 05
POSIX.1-2008 changes the specification of
.BR link (),
making it implementation-dependent whether or not
.I oldpath
is dereferenced if it is a symbolic link.
For precise control over the treatment of symbolic links when
creating a link, use
.BR linkat (2).
.SS Glibc notes
On older kernels where
.BR linkat ()
is unavailable, the glibc wrapper function falls back to the use of
.BR link (),
unless the
.B AT_SYMLINK_FOLLOW
is specified.
When
.I oldpath
and
.I newpath
are relative pathnames,
glibc constructs pathnames based on the symbolic links in
.IR /proc/self/fd
that correspond to the
.I olddirfd
and
.IR newdirfd
arguments.
.SH BUGS
On NFS filesystems, the return code may be wrong in case the NFS server
performs the link creation and dies before it can say so.
Use
.BR stat (2)
to find out if the link got created.
.SH SEE ALSO
.BR ln (1),
.BR open (2),
.BR rename (2),
.BR stat (2),
.BR symlink (2),
.BR unlink (2),
.BR path_resolution (7),
.BR symlink (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1983, 1991 The Regents of the University of California.
.\" and Copyright (C) 2007, Michael Kerrisk <mtk.manpages@gmail.com>
.\" All rights reserved.
.\"
.\" %%%LICENSE_START(BSD_4_CLAUSE_UCB)
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\" %%%LICENSE_END
.\"
.\"     $Id: listen.2,v 1.6 1999/05/18 14:10:32 freitag Exp $
.\"
.\" Modified Fri Jul 23 22:07:54 1993 by Rik Faith <faith@cs.unc.edu>
.\" Modified 950727 by aeb, following a suggestion by Urs Thuermann
.\" <urs@isnogud.escape.de>
.\" Modified Tue Oct 22 08:11:14 EDT 1996 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified 1998 by Andi Kleen
.\" Modified 11 May 2001 by Sam Varshavchik <mrsam@courier-mta.com>
.\"
.\"
.TH LISTEN 2 2014-05-10 "Linux" "Linux Programmer's Manual"
.SH NAME
listen \- listen for connections on a socket
.SH SYNOPSIS
.nf
.BR "#include <sys/types.h>" "          /* See NOTES */"
.br
.B #include <sys/socket.h>
.sp
.BI "int listen(int " sockfd ", int " backlog );
.fi
.SH DESCRIPTION
.BR listen ()
marks the socket referred to by
.I sockfd
as a passive socket, that is, as a socket that will
be used to accept incoming connection requests using
.BR accept (2).

The
.I sockfd
argument is a file descriptor that refers to a socket of type
.B SOCK_STREAM
or
.BR SOCK_SEQPACKET .

The
.I backlog
argument defines the maximum length
to which the queue of pending connections for
.I sockfd
may grow.
If a connection request arrives when the queue is full, the client
may receive an error with an indication of
.B ECONNREFUSED
or, if the underlying protocol supports retransmission, the request may be
ignored so that a later reattempt at connection succeeds.
.SH RETURN VALUE
On success, zero is returned.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EADDRINUSE
Another socket is already listening on the same port.
.TP
.B EADDRINUSE
(Internet domain sockets)
The socket referred to by
.I sockfd
had not previously been bound to an address and,
upon attempting to bind it to an ephemeral port,
it was determined that all port numbers in the ephemeral port range
are currently in use.
See the discussion of
.I /proc/sys/net/ipv4/ip_local_port_range
in
.BR ip (7).
.TP
.B EBADF
The argument
.I sockfd
is not a valid descriptor.
.TP
.B ENOTSOCK
The argument
.I sockfd
is not a socket.
.TP
.B EOPNOTSUPP
The socket is not of a type that supports the
.BR listen ()
operation.
.SH CONFORMING TO
4.4BSD, POSIX.1-2001.
The
.BR listen ()
function call first appeared in 4.2BSD.
.SH NOTES
To accept connections, the following steps are performed:
.RS 4
.IP 1. 4
A socket is created with
.BR socket (2).
.IP 2.
The socket is bound to a local address using
.BR bind (2),
so that other sockets may be
.BR connect (2)ed
to it.
.IP 3.
A willingness to accept incoming connections and a queue limit for incoming
connections are specified with
.BR listen ().
.IP 4.
Connections are accepted with
.BR accept (2).
.RE
.PP
POSIX.1-2001 does not require the inclusion of
.IR <sys/types.h> ,
and this header file is not required on Linux.
However, some historical (BSD) implementations required this header
file, and portable applications are probably wise to include it.

The behavior of the
.I backlog
argument on TCP sockets changed with Linux 2.2.
Now it specifies the queue length for
.I completely
established sockets waiting to be accepted,
instead of the number of incomplete connection requests.
The maximum length of the queue for incomplete sockets
can be set using
.IR /proc/sys/net/ipv4/tcp_max_syn_backlog .
When syncookies are enabled there is no logical maximum
length and this setting is ignored.
See
.BR tcp (7)
for more information.

If the
.I backlog
argument is greater than the value in
.IR /proc/sys/net/core/somaxconn ,
then it is silently truncated to that value;
the default value in this file is 128.
In kernels before 2.4.25, this limit was a hard coded value,
.BR SOMAXCONN ,
with the value 128.
.\" The following is now rather historic information (MTK, Jun 05)
.\" Don't rely on this value in portable applications since BSD
.\" (and some BSD-derived systems) limit the backlog to 5.
.SH EXAMPLE
See
.BR bind (2).
.SH SEE ALSO
.BR accept (2),
.BR bind (2),
.BR connect (2),
.BR socket (2),
.BR socket (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) Andreas Gruenbacher, February 2001
.\" Copyright (C) Silicon Graphics Inc, September 2001
.\" Copyright (C) 2015 Heinrich Schuchardt <xypron.glpk@gmx.de>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.TH LISTXATTR 2 2015-05-07 "Linux" "Linux Programmer's Manual"
.SH NAME
listxattr, llistxattr, flistxattr \- list extended attribute names
.SH SYNOPSIS
.fam C
.nf
.B #include <sys/types.h>
.B #include <sys/xattr.h>
.sp
.BI "ssize_t listxattr(const char\ *" path ", char\ *" list \
", size_t " size );
.BI "ssize_t llistxattr(const char\ *" path ", char\ *" list \
", size_t " size );
.BI "ssize_t flistxattr(int " fd ", char\ *" list ", size_t " size );
.fi
.fam T
.SH DESCRIPTION
Extended attributes are
.IR name : value
pairs associated with inodes (files, directories, symbolic links, etc.).
They are extensions to the normal attributes which are associated
with all inodes in the system (i.e., the
.BR stat (2)
data).
A complete overview of extended attributes concepts can be found in
.BR xattr (7).
.PP
.BR listxattr ()
retrieves the list
of extended attribute names associated with the given
.I path
in the filesystem.
The retrieved list is placed in
.IR list ,
a caller-allocated buffer whose size (in bytes) is specified in the argument
.IR size .
The list is the set of (null-terminated) names, one after the other.
Names of extended attributes to which the calling process does not
have access may be omitted from the list.
The length of the attribute name
.I list
is returned.
.PP
.BR llistxattr ()
is identical to
.BR listxattr (),
except in the case of a symbolic link, where the list of names of
extended attributes associated with the link itself is retrieved,
not the file that it refers to.
.PP
.BR flistxattr ()
is identical to
.BR listxattr (),
only the open file referred to by
.I fd
(as returned by
.BR open (2))
is interrogated in place of
.IR path .
.PP
A single extended attribute
.I name
is a null-terminated string.
The name includes a namespace prefix; there may be several, disjoint
namespaces associated with an individual inode.

If
.I size
is specified as zero, these calls return the current size of the
list of extended attribute names (and leave
.I list
unchanged).
This can be used to determine the size of the buffer that
should be supplied in a subsequent call.
(But, bear in mind that there is a possibility that the
set of extended attributes may change between the two calls,
so that it is still necessary to check the return status
from the second call.)
.SS Example
The
.I list
of names is returned as an unordered array of null-terminated character
strings (attribute names are separated by null bytes (\(aq\\0\(aq)), like this:
.fam C
.RS
.nf

user.name1\\0system.name1\\0user.name2\\0
.fi
.RE
.fam T
.P
Filesystems that implement POSIX ACLs using
extended attributes might return a
.I list
like this:
.fam C
.RS
.nf

system.posix_acl_access\\0system.posix_acl_default\\0
.fi
.RE
.fam T
.SH RETURN VALUE
On success, a nonnegative number is returned indicating the size of the
extended attribute name list.
On failure, \-1 is returned and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B E2BIG
The size of the list of attribute names for this file exceeds
the system-imposed limit.
See BUSG.
.TP
.B ENOTSUP
Extended attributes are not supported by the filesystem, or are disabled.
.TP
.B ERANGE
The
.I size
of the
.I list
buffer is too small to hold the result.
.PP
In addition, the errors documented in
.BR stat (2)
can also occur.
.SH VERSIONS
These system calls have been available on Linux since kernel 2.4;
glibc support is provided since version 2.3.
.SH CONFORMING TO
These system calls are Linux-specific.
.\" .SH AUTHORS
.\" Andreas Gruenbacher,
.\" .RI < a.gruenbacher@computer.org >
.\" and the SGI XFS development team,
.\" .RI < linux-xfs@oss.sgi.com >.
.\" Please send any bug reports or comments to these addresses.
.SH EXAMPLE
The following program demonstrates the usage of
.BR listxattr ()
and
.BR getxattr (2).
For the file whose pathname is provided as a command-line argument,
it lists all extended file attributes and their values.

To keep the code simple, the program assumes that attribute keys and
values are constant during the execution of the program.
A production program should expect and handle changes during
execution of the program.
For example,
the number of bytes required for attribute keys
might increase between the two calls to
.BR listxattr ().
An application could handle this possibility using
a loop that retries the call
(perhaps up to a predetermined maximum number of attempts)
with a larger buffer each time it fails with the error
.BR ERANGE .
Calls to
.BR getxattr (2)
could be handled similarly.

The following output was recorded by first creating a file, setting
some extended file attributes,
and then listing the attributes with the example program.
.SS Example output
.in +4n
.nf
$ \fBtouch /tmp/foo\fP
$ \fBsetfattr -n user.fred -v chocolate /tmp/foo\fP
$ \fBsetfattr -n user.frieda -v bar /tmp/foo\fP
$ \fBsetfattr -n user.empty /tmp/foo\fP
$ \fB./listxattr /tmp/foo\fP
user.fred: chocolate
user.frieda: bar
user.empty: <no value>
.fi
.in
.SS Program source (listxattr.c)
.nf
#include <malloc.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <sys/xattr.h>

int
main(int argc, char *argv[])
{
    ssize_t buflen, keylen, vallen;
    char *buf, *key, *val;

    if (argc != 2) {
        fprintf(stderr, "Usage: %s path\\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    /*
     * Determine the length of the buffer needed.
     */
    buflen = listxattr(argv[1], NULL, 0);
    if (buflen == \-1) {
        perror("listxattr");
        exit(EXIT_FAILURE);
    }
    if (buflen == 0) {
        printf("%s has no attributes.\\n", argv[1]);
        exit(EXIT_SUCCESS);
    }

    /*
     * Allocate the buffer.
     */
    buf = malloc(buflen);
    if (buf == NULL) {
        perror("malloc");
        exit(EXIT_FAILURE);
    }

    /*
     * Copy the list of attribute keys to the buffer.
     */
    buflen = listxattr(argv[1], buf, buflen);
    if (buflen == \-1) {
        perror("listxattr");
        exit(EXIT_FAILURE);
    }

    /*
     * Loop over the list of zero terminated strings with the
     * attribute keys. Use the remaining buffer length to determine
     * the end of the list.
     */
    key = buf;
    while (buflen > 0) {

        /*
         * Output attribute key.
         */
        printf("%s: ", key);

        /*
         * Determine length of the value.
         */
        vallen = getxattr(argv[1], key, NULL, 0);
        if (vallen == \-1)
            perror("getxattr");

        if (vallen > 0) {

            /*
             * Allocate value buffer.
             * One extra byte is needed to append 0x00.
             */
            val = malloc(vallen + 1);
            if (val == NULL) {
                perror("malloc");
                exit(EXIT_FAILURE);
            }

            /*
             * Copy value to buffer.
             */
            vallen = getxattr(argv[1], key, val, vallen);
            if (vallen == \-1)
                perror("getxattr");
            else {
                /*
                 * Output attribute value.
                 */
                val[vallen] = 0;
                printf("%s", val);
            }

            free(val);
        } else if (vallen == 0)
            printf("<no value>");

        printf("\\n");

        /*
         * Forward to next attribute key.
         */
        keylen = strlen(key) + 1;
        buflen \-= keylen;
        key += keylen;
    }

    free(buf);
    exit(EXIT_SUCCESS);
}
.fi
.SH BUGS
.\" The xattr(7) page refers to this text:
As noted in
.BR xattr (7),
the VFS imposes a limit of 64 kB on the size of the extended
attribute name list returned by
.BR listxattr (7).
If the total size of attribute names attached to a file exceeds this limit,
it is no longer possible to retrieve the list of attribute names.
.SH SEE ALSO
.BR getfattr (1),
.BR setfattr (1),
.BR getxattr (2),
.BR open (2),
.BR removexattr (2),
.BR setxattr (2),
.BR stat (2),
.BR symlink (7),
.BR xattr (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 1995 Andries Brouwer (aeb@cwi.nl)
.\" Written 10 June 1995 by Andries Brouwer <aeb@cwi.nl>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified Thu Oct 31 15:16:23 1996 by Eric S. Raymond <esr@thyrsus.com>
.\"
.TH LLSEEK 2 2015-04-19 "Linux" "Linux Programmer's Manual"
.SH NAME
_llseek \- reposition read/write file offset
.SH SYNOPSIS
.nf
.B #include <sys/types.h>
.B #include <unistd.h>
.sp
.BI "int _llseek(unsigned int " fd ", unsigned long " offset_high ,
.BI "            unsigned long " offset_low ", loff_t *" result ,
.BI "            unsigned int " whence );
.fi

.IR Note :
There is no glibc wrapper for this system call; see NOTES.
.SH DESCRIPTION
The
.BR _llseek ()
function repositions the offset of the open file associated
with the file descriptor
.I fd
to
.I (offset_high<<32) | offset_low
bytes relative to the beginning of the file, the current position in the file,
or the end of the file, depending on whether
.I whence
is
.BR SEEK_SET ,
.BR SEEK_CUR ,
or
.BR SEEK_END ,
respectively.
It returns the resulting file position in the argument
.IR result .

This system call exists on various 32-bit platforms to support
seeking lo large file offsets.
.SH RETURN VALUE
Upon successful completion,
.BR _llseek ()
returns 0.
Otherwise, a value of \-1 is returned and
.I errno
is set to indicate the error.
.SH ERRORS
.TP
.B EBADF
.I fd
is not an open file descriptor.
.TP
.B EFAULT
Problem with copying results to user space.
.TP
.B EINVAL
.I whence
is invalid.
.SH CONFORMING TO
This function is Linux-specific, and should not be used in programs
intended to be portable.
.SH NOTES
Glibc does not provide a wrapper for this system call.
To invoke it directly, use
.BR syscall (2).
However, you probably want to use the
.BR lseek (2)
wrapper function instead.
.SH SEE ALSO
.BR lseek (2),
.BR lseek64 (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2003 John Levon <levon@movementarian.org>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified 2004-06-17 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.TH LOOKUP_DCOOKIE 2 2004-06-17 "Linux" "Linux Programmer's Manual"
.SH NAME
lookup_dcookie \- return a directory entry's path
.SH SYNOPSIS
.BI "int lookup_dcookie(u64 " cookie ", char *" buffer ", size_t " len );
.SH DESCRIPTION
Look up the full path of the directory entry specified by the value
.IR cookie .
The cookie is an opaque identifier uniquely identifying a particular
directory entry.
The buffer given is filled in with the full path of the directory entry.

For
.BR lookup_dcookie ()
to return successfully,
the kernel must still hold a cookie reference to the directory entry.
.SH RETURN VALUE
On success,
.BR lookup_dcookie ()
returns the length of the path string copied into the buffer.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EFAULT
The buffer was not valid.
.TP
.B EINVAL
The kernel has no registered cookie/directory entry mappings at the
time of lookup, or the cookie does not refer to a valid directory entry.
.TP
.B ENAMETOOLONG
The name could not fit in the buffer.
.TP
.B ENOMEM
The kernel could not allocate memory for the temporary buffer holding
the path.
.TP
.B EPERM
The process does not have the capability
.B CAP_SYS_ADMIN
required to look up cookie values.
.TP
.B ERANGE
The buffer was not large enough to hold the path of the directory entry.
.SH VERSIONS
Available since Linux 2.5.43.
The
.B ENAMETOOLONG
error return was added in 2.5.70.
.SH CONFORMING TO
.BR lookup_dcookie ()
is Linux-specific.
.SH NOTES
.BR lookup_dcookie ()
is a special-purpose system call, currently used only by the oprofile profiler.
It relies on a kernel driver to register cookies for directory entries.

The path returned may be suffixed by the string " (deleted)" if the directory
entry has been removed.
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
'\" t
.\" Copyright (c) 1980, 1991 Regents of the University of California.
.\" and Copyright (c) 2011, Michael Kerrisk <mtk.manpages@gmail.com>
.\" All rights reserved.
.\"
.\" %%%LICENSE_START(BSD_4_CLAUSE_UCB)
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\" %%%LICENSE_END
.\"
.\"     @(#)lseek.2	6.5 (Berkeley) 3/10/91
.\"
.\" Modified 1993-07-23 by Rik Faith <faith@cs.unc.edu>
.\" Modified 1995-06-10 by Andries Brouwer <aeb@cwi.nl>
.\" Modified 1996-10-31 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified 1998-01-17 by Michael Haardt
.\"   <michael@cantor.informatik.rwth-aachen.de>
.\" Modified 2001-09-24 by Michael Haardt <michael@moria.de>
.\" Modified 2003-08-21 by Andries Brouwer <aeb@cwi.nl>
.\" 2011-09-18, mtk, Added SEEK_DATA + SEEK_HOLE
.\"
.TH LSEEK 2 2014-06-13 "Linux" "Linux Programmer's Manual"
.SH NAME
lseek \- reposition read/write file offset
.SH SYNOPSIS
.B #include <sys/types.h>
.br
.B #include <unistd.h>
.sp
.BI "off_t lseek(int " fd ", off_t " offset ", int " whence );
.SH DESCRIPTION
The
.BR lseek ()
function repositions the offset of the open file associated with the
file descriptor
.I fd
to the argument
.I offset
according to the directive
.I whence
as follows:
.TP
.B SEEK_SET
The offset is set to
.I offset
bytes.
.TP
.B SEEK_CUR
The offset is set to its current location plus
.I offset
bytes.
.TP
.B SEEK_END
The offset is set to the size of the file plus
.I offset
bytes.
.PP
The
.BR lseek ()
function allows the file offset to be set beyond the end
of the file (but this does not change the size of the file).
If data is later written at this point, subsequent reads of the data
in the gap (a "hole") return null bytes (\(aq\\0\(aq) until
data is actually written into the gap.
.SS Seeking file data and holes
Since version 3.1, Linux supports the following additional values for
.IR whence :
.TP
.B SEEK_DATA
Adjust the file offset to the next location
in the file greater than or equal to
.I offset
containing data.
If
.I offset
points to data,
then the file offset is set to
.IR offset .
.TP
.B SEEK_HOLE
Adjust the file offset to the next hole in the file
greater than or equal to
.IR offset .
If
.I offset
points into the middle of a hole,
then the file offset is set to
.IR offset .
If there is no hole past
.IR offset ,
then the file offset is adjusted to the end of the file
(i.e., there is an implicit hole at the end of any file).
.PP
In both of the above cases,
.BR lseek ()
fails if
.I offset
points past the end of the file.

These operations allow applications to map holes in a sparsely
allocated file.
This can be useful for applications such as file backup tools,
which can save space when creating backups and preserve holes,
if they have a mechanism for discovering holes.

For the purposes of these operations, a hole is a sequence of zeros that
(normally) has not been allocated in the underlying file storage.
However, a filesystem is not obliged to report holes,
so these operations are not a guaranteed mechanism for
mapping the storage space actually allocated to a file.
(Furthermore, a sequence of zeros that actually has been written
to the underlying storage may not be reported as a hole.)
In the simplest implementation,
a filesystem can support the operations by making
.BR SEEK_HOLE
always return the offset of the end of the file,
and making
.BR SEEK_DATA
always return
.IR offset
(i.e., even if the location referred to by
.I offset
is a hole,
it can be considered to consist of data that is a sequence of zeros).
.\" https://lkml.org/lkml/2011/4/22/79
.\" http://lwn.net/Articles/440255/
.\" http://blogs.oracle.com/bonwick/entry/seek_hole_and_seek_data

The
.BR _GNU_SOURCE
feature test macro must be defined in order to obtain the definitions of
.BR SEEK_DATA
and
.BR SEEK_HOLE
from
.IR <unistd.h> .

The
.BR SEEK_HOLE
and
.BR SEEK_DATA
operations are supported for the following filesystems:
.IP * 3
Btrfs (since Linux 3.1)
.IP * 3
OCFS (since Linux 3.2)
.\" commit 93862d5e1ab875664c6cc95254fc365028a48bb1
.IP *
XFS (since Linux 3.5)
.IP *
ext4 (since Linux 3.8)
.IP *
tmpfs (since Linux 3.8)
.SH RETURN VALUE
Upon successful completion,
.BR lseek ()
returns the resulting offset location as measured in bytes from the
beginning of the file.
On error, the value \fI(off_t)\ \-1\fP is returned and
.I errno
is set to indicate the error.
.SH ERRORS
.TP
.B EBADF
.I fd
is not an open file descriptor.
.TP
.B EINVAL
.I whence
is not valid.
Or: the resulting file offset would be negative,
or beyond the end of a seekable device.
.\" Some systems may allow negative offsets for character devices
.\" and/or for remote filesystems.
.TP
.B EOVERFLOW
.\" HP-UX 11 says EINVAL for this case (but POSIX.1 says EOVERFLOW)
The resulting file offset cannot be represented in an
.IR off_t .
.TP
.B ESPIPE
.I fd
is associated with a pipe, socket, or FIFO.
.TP
.B ENXIO
.I whence
is
.B SEEK_DATA
or
.BR SEEK_HOLE ,
and the current file offset is beyond the end of the file.
.SH CONFORMING TO
SVr4, 4.3BSD, POSIX.1-2001.

.BR SEEK_DATA
and
.BR SEEK_HOLE
are nonstandard extensions also present in Solaris,
FreeBSD, and DragonFly BSD;
they are proposed for inclusion in the next POSIX revision (Issue 8).
.\" FIXME . Review http://austingroupbugs.net/view.php?id=415 in the future
.SH NOTES
See
.BR open (2)
for a discussion of the relationship between file descriptors,
open file descriptions, and files.

Some devices are incapable of seeking and POSIX does not specify which
devices must support
.BR lseek ().

On Linux, using
.BR lseek ()
on a terminal device returns
\fBESPIPE\fP.
.\" Other systems return the number of written characters,
.\" using SEEK_SET to set the counter. (Of written characters.)

When converting old code, substitute values for \fIwhence\fP with the
following macros:
.TS
c c
l l.
old	new
0	SEEK_SET
1	SEEK_CUR
2	SEEK_END
L_SET	SEEK_SET
L_INCR	SEEK_CUR
L_XTND	SEEK_END
.TE
.\" .PP
.\" SVr1-3 returns \fIlong\fP instead of \fIoff_t\fP,
.\" (ancient) BSD returns \fIint\fP.
.PP
Note that file descriptors created by
.BR dup (2)
or
.BR fork (2)
share the current file position pointer, so seeking on such files may be
subject to race conditions.
.SH SEE ALSO
.BR dup (2),
.BR fork (2),
.BR open (2),
.BR fseek (3),
.BR lseek64 (3),
.BR posix_fallocate (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2001 David Gómez <davidge@jazzfree.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Based on comments from mm/filemap.c. Last modified on 10-06-2001
.\" Modified, 25 Feb 2002, Michael Kerrisk, <mtk.manpages@gmail.com>
.\"	Added notes on MADV_DONTNEED
.\" 2010-06-19, mtk, Added documentation of MADV_MERGEABLE and
.\"     MADV_UNMERGEABLE
.\" 2010-06-15, Andi Kleen, Add documentation of MADV_HWPOISON.
.\" 2010-06-19, Andi Kleen, Add documentation of MADV_SOFT_OFFLINE.
.\" 2011-09-18, Doug Goldstein <cardoe@cardoe.com>
.\"     Document MADV_HUGEPAGE and MADV_NOHUGEPAGE
.\"
.TH MADVISE 2 2015-04-19 "Linux" "Linux Programmer's Manual"
.SH NAME
madvise \- give advice about use of memory
.SH SYNOPSIS
.B #include <sys/mman.h>
.sp
.BI "int madvise(void *" addr ", size_t " length ", int " advice );
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR madvise ():
_BSD_SOURCE
.SH DESCRIPTION
The
.BR madvise ()
system call is used to give advice or directions to the kernel
about the address range beginning at address
.I addr
and with size
.I length
bytes.
Initially, the system call supported a set of "conventional"
.I advice
values, which are also available on several other implementations.
(Note, though, that
.BR madvise ()
is not specified in POSIX.)
Subsequently, a number of Linux-specific
.IR advice
values have been added.
.\"
.\" ======================================================================
.\"
.SS Conventional advice values
The
.I advice
values listed below
allow an application to tell the kernel how it expects to use
some mapped or shared memory areas, so that the kernel can choose
appropriate read-ahead and caching techniques.
These
.I advice
values do not influence the semantics of the application
(except in the case of
.BR MADV_DONTNEED ),
but may influence its performance.
All of the
.I advice
values listed here have analogs in the POSIX-specified
.BR posix_madvise (3)
function, and the values have the same meanings, with the exception of
.BR MADV_DONTNEED .
.LP
The advice is indicated in the
.I advice
argument, which is one of the following:
.TP
.B MADV_NORMAL
No special treatment.
This is the default.
.TP
.B MADV_RANDOM
Expect page references in random order.
(Hence, read ahead may be less useful than normally.)
.TP
.B MADV_SEQUENTIAL
Expect page references in sequential order.
(Hence, pages in the given range can be aggressively read ahead,
and may be freed soon after they are accessed.)
.TP
.B MADV_WILLNEED
Expect access in the near future.
(Hence, it might be a good idea to read some pages ahead.)
.TP
.B MADV_DONTNEED
Do not expect access in the near future.
(For the time being, the application is finished with the given range,
so the kernel can free resources associated with it.)

After a successful
.B MADV_DONTNEED
operation,
the semantics of memory access in the specified region are changed:
subsequent accesses of pages in the range will succeed, but will result
in either repopulating the memory contents from the
up-to-date contents of the underlying mapped file
(for shared file mappings, shared anonymous mappings,
and shmem-based techniques such as System V shared memory segments)
or zero-fill-on-demand pages for anonymous private mappings.

Note that, when applied to shared mappings,
.BR MADV_DONTNEED
might not lead to immediate freeing of the pages in the range.
The kernel is free to delay freeing the pages until an appropriate moment.
The resident set size (RSS) of the calling process will be immediately
reduced however.

.B MADV_DONTNEED
cannot be applied to locked pages, Huge TLB pages, or
.BR VM_PFNMAP
pages.
(Pages marked with the kernel-internal
.B VM_PFNMAP
.\" http://lwn.net/Articles/162860/
flag are special memory areas that are not managed
by the virtual memory subsystem.
Such pages are typically created by device drivers that
map the pages into user space.)
.\"
.\" ======================================================================
.\"
.SS Linux-specific advice values
The following Linux-specific
.I advice
values have no counterparts in the POSIX-specified
.BR posix_madvise (3),
and may or may not have counterparts in the
.BR madvise ()
interface available on other implementations.
Note that some of these operations change the semantics of memory accesses.
.TP
.BR MADV_REMOVE " (since Linux 2.6.16)"
.\" commit f6b3ec238d12c8cc6cc71490c6e3127988460349
Free up a given range of pages
and its associated backing store.
This is equivalent to punching a hole in the corresponding byte
range of the backing store (see
.BR fallocate (2)).
Subsequent accesses in the specified address range will see
bytes containing zero.
.\" Databases want to use this feature to drop a section of their
.\" bufferpool (shared memory segments) - without writing back to
.\" disk/swap space.  This feature is also useful for supporting
.\" hot-plug memory on UML.

The specified address range must be mapped shared and writable.
This flag cannot be applied to locked pages, Huge TLB pages, or
.BR VM_PFNMAP
pages.

In the initial implementation, only shmfs/tmpfs supported
.BR MADV_REMOVE ;
but since Linux 3.5,
.\" commit 3f31d07571eeea18a7d34db9af21d2285b807a17
any filesystem which supports the
.BR fallocate (2)
.BR FALLOC_FL_PUNCH_HOLE
mode also supports
.BR MADV_REMOVE .
Hugetlbfs will fail with the error
.BR EINVAL
and other filesystems fail with the error
.BR EOPNOTSUPP .
.TP
.BR MADV_DONTFORK " (since Linux 2.6.16)"
.\" commit f822566165dd46ff5de9bf895cfa6c51f53bb0c4
.\" See http://lwn.net/Articles/171941/
Do not make the pages in this range available to the child after a
.BR fork (2).
This is useful to prevent copy-on-write semantics from changing
the physical location of a page if the parent writes to it after a
.BR fork (2).
(Such page relocations cause problems for hardware that
DMAs into the page.)
.\" [PATCH] madvise MADV_DONTFORK/MADV_DOFORK
.\" Currently, copy-on-write may change the physical address of
.\" a page even if the user requested that the page is pinned in
.\" memory (either by mlock or by get_user_pages).  This happens
.\" if the process forks meanwhile, and the parent writes to that
.\" page.  As a result, the page is orphaned: in case of
.\" get_user_pages, the application will never see any data hardware
.\" DMA's into this page after the COW.  In case of mlock'd memory,
.\" the parent is not getting the realtime/security benefits of mlock.
.\"
.\" In particular, this affects the Infiniband modules which do DMA from
.\" and into user pages all the time.
.\"
.\" This patch adds madvise options to control whether memory range is
.\" inherited across fork. Useful e.g. for when hardware is doing DMA
.\" from/into these pages.  Could also be useful to an application
.\" wanting to speed up its forks by cutting large areas out of
.\" consideration.
.\"
.\" SEE ALSO: http://lwn.net/Articles/171941/
.\" "Tweaks to madvise() and posix_fadvise()", 14 Feb 2006
.TP
.BR MADV_DOFORK " (since Linux 2.6.16)"
Undo the effect of
.BR MADV_DONTFORK ,
restoring the default behavior, whereby a mapping is inherited across
.BR fork (2).
.TP
.BR MADV_HWPOISON " (since Linux 2.6.32)
.\" commit 9893e49d64a4874ea67849ee2cfbf3f3d6817573
Poison a page and handle it like a hardware memory corruption.
This operation is available only for privileged
.RB ( CAP_SYS_ADMIN )
processes.
This operation may result in the calling process receiving a
.B SIGBUS
and the page being unmapped.

This feature is intended for testing of memory error-handling code;
it is available only if the kernel was configured with
.BR CONFIG_MEMORY_FAILURE .
.TP
.BR MADV_SOFT_OFFLINE " (since Linux 2.6.33)
.\" commit afcf938ee0aac4ef95b1a23bac704c6fbeb26de6
Soft offline the pages in the range specified by
.I addr
and
.IR length .
The memory of each page in the specified range is preserved
(i.e., when next accessed, the same content will be visible,
but in a new physical page frame),
and the original page is offlined
(i.e., no longer used, and taken out of normal memory management).
The effect of the
.B MADV_SOFT_OFFLINE
operation is invisible to (i.e., does not change the semantics of)
the calling process.

This feature is intended for testing of memory error-handling code;
it is available only if the kernel was configured with
.BR CONFIG_MEMORY_FAILURE .
.TP
.BR MADV_MERGEABLE " (since Linux 2.6.32)"
.\" commit f8af4da3b4c14e7267c4ffb952079af3912c51c5
Enable Kernel Samepage Merging (KSM) for the pages in the range specified by
.I addr
and
.IR length .
The kernel regularly scans those areas of user memory that have
been marked as mergeable,
looking for pages with identical content.
These are replaced by a single write-protected page (which is automatically
copied if a process later wants to update the content of the page).
KSM merges only private anonymous pages (see
.BR mmap (2)).

The KSM feature is intended for applications that generate many
instances of the same data (e.g., virtualization systems such as KVM).
It can consume a lot of processing power; use with care.
See the Linux kernel source file
.I Documentation/vm/ksm.txt
for more details.

The
.BR MADV_MERGEABLE
and
.BR MADV_UNMERGEABLE
operations are available only if the kernel was configured with
.BR CONFIG_KSM .
.TP
.BR MADV_UNMERGEABLE " (since Linux 2.6.32)"
Undo the effect of an earlier
.BR MADV_MERGEABLE
operation on the specified address range;
KSM unmerges whatever pages it had merged in the address range specified by
.IR addr
and
.IR length .
.TP
.BR MADV_HUGEPAGE " (since Linux 2.6.38)"
.\" commit 0af4e98b6b095c74588af04872f83d333c958c32
.\" http://lwn.net/Articles/358904/
.\" https://lwn.net/Articles/423584/
Enable Transparent Huge Pages (THP) for pages in the range specified by
.I addr
and
.IR length .
Currently, Transparent Huge Pages work only with private anonymous pages (see
.BR mmap (2)).
The kernel will regularly scan the areas marked as huge page candidates
to replace them with huge pages.
The kernel will also allocate huge pages directly when the region is
naturally aligned to the huge page size (see
.BR posix_memalign (2)).

This feature is primarily aimed at applications that use large mappings of
data and access large regions of that memory at a time (e.g., virtualization
systems such as QEMU).
It can very easily waste memory (e.g., a 2MB mapping that only ever accesses
1 byte will result in 2MB of wired memory instead of one 4KB page).
See the Linux kernel source file
.I Documentation/vm/transhuge.txt
for more details.

The
.BR MADV_HUGEPAGE
and
.BR MADV_NOHUGEPAGE
operations are available only if the kernel was configured with
.BR CONFIG_TRANSPARENT_HUGEPAGE .
.TP
.BR MADV_NOHUGEPAGE " (since Linux 2.6.38)"
Ensures that memory in the address range specified by
.IR addr
and
.IR length
will not be collapsed into huge pages.
.TP
.BR MADV_DONTDUMP " (since Linux 3.4)"
.\" commit 909af768e88867016f427264ae39d27a57b6a8ed
.\" commit accb61fe7bb0f5c2a4102239e4981650f9048519
Exclude from a core dump those pages in the range specified by
.I addr
and
.IR length .
This is useful in applications that have large areas of memory
that are known not to be useful in a core dump.
The effect of
.BR MADV_DONTDUMP
takes precedence over the bit mask that is set via the
.I /proc/PID/coredump_filter
file (see
.BR core (5)).
.TP
.BR MADV_DODUMP " (since Linux 3.4)"
Undo the effect of an earlier
.BR MADV_DONTDUMP .
.SH RETURN VALUE
On success,
.BR madvise ()
returns zero.
On error, it returns \-1 and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EACCES
.I advice
is
.BR MADV_REMOVE ,
but the specified address range is not a shared writable mapping.
.TP
.B EAGAIN
A kernel resource was temporarily unavailable.
.TP
.B EBADF
The map exists, but the area maps something that isn't a file.
.TP
.B EINVAL
.I addr
is not page-aligned or
.I length
is negative.
.\" .I length
.\" is zero,
.TP
.B EINVAL
.I advice
is not a valid.
.TP
.B EINVAL
.I advice
is
.B MADV_DONTNEED
or
.BR MADV_REMOVE
and the specified address range includes locked, Huge TLB pages, or
.B VM_PFNMAP
pages.
.TP
.B EINVAL
.I advice
is
.BR MADV_MERGEABLE
or
.BR MADV_UNMERGEABLE ,
but the kernel was not configured with
.BR CONFIG_KSM .
.TP
.B EIO
(for
.BR MADV_WILLNEED )
Paging in this area would exceed the process's
maximum resident set size.
.TP
.B ENOMEM
(for
.BR MADV_WILLNEED )
Not enough memory: paging in failed.
.TP
.B ENOMEM
Addresses in the specified range are not currently
mapped, or are outside the address space of the process.
.TP
.B EPERM
.I advice
is
.BR MADV_HWPOISON ,
but the caller does not have the
.B CAP_SYS_ADMIN
capability.
.SH VERSIONS
Since Linux 3.18,
.\" commit d3ac21cacc24790eb45d735769f35753f5b56ceb
support for this system call is optional,
depending on the setting of the
.B CONFIG_ADVISE_SYSCALLS
configuration option.
.SH CONFORMING TO
.BR madvise ()
is not specified by any standards.
Versions of this system call, implementing a wide variety of
.I advice
values, exist on many other implementations.
Other implementations typically implement at least the flags listed
above under
.IR "Conventional advice flags" ,
albeit with some variation in semantics.

POSIX.1-2001 describes
.BR posix_madvise (3)
with constants
.BR POSIX_MADV_NORMAL ,
.BR POSIX_MADV_RANDOM ,
.BR POSIX_MADV_SEQUENTIAL ,
.BR POSIX_MADV_WILLNEED ,
and
.BR POSIX_MADV_DONTNEED ,
and so on, with behavior close to the similarly named flags listed above.
(POSIX.1-2008 adds a further flag,
.BR POSIX_MADV_NOREUSE ,
that has no analog in
.BR madvise (2).)
.SH NOTES
.SS Linux notes
The Linux implementation requires that the address
.I addr
be page-aligned, and allows
.I length
to be zero.
If there are some parts of the specified address range
that are not mapped, the Linux version of
.BR madvise ()
ignores them and applies the call to the rest (but returns
.B ENOMEM
from the system call, as it should).
.\" .SH HISTORY
.\" The
.\" .BR madvise ()
.\" function first appeared in 4.4BSD.
.SH SEE ALSO
.BR getrlimit (2),
.BR mincore (2),
.BR mmap (2),
.BR mprotect (2),
.BR msync (2),
.BR munmap (2),
.BR posix_madvise (3),
.BR prctl (2),
.BR core (5)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 2003,2004 Andi Kleen, SuSE Labs.
.\" and Copyright 2007 Lee Schermerhorn, Hewlett Packard
.\"
.\" %%%LICENSE_START(VERBATIM_PROF)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" 2006-02-03, mtk, substantial wording changes and other improvements
.\" 2007-08-27, Lee Schermerhorn <Lee.Schermerhorn@hp.com>
.\"	more precise specification of behavior.
.\"
.\" FIXME
.\" Linux 3.8 added the following, which need to be documented.
.\" And do they also apply for move_pages()?
.\"
.\"       MPOL_LOCAL
.\"                commit 479e2802d09f1e18a97262c4c6f8f17ae5884bd8
.\"                Author: Peter Zijlstra <a.p.zijlstra@chello.nl>
.\"                Date:   Thu Oct 25 14:16:28 2012 +0200
.\"
.\"                commit f2a07f40dbc603c15f8b06e6ec7f768af67b424f
.\"                Author: Hugh Dickins <hughd@google.com>
.\"                Date:   Wed Jan 2 02:01:33 2013 -0800
.\"
.\"        MPOL_MF_LAZY
.\"                commit b24f53a0bea38b266d219ee651b22dba727c44ae
.\"                Author: Lee Schermerhorn <lee.schermerhorn@hp.com>
.\"                Date:   Thu Oct 25 14:16:32 2012 +0200
.\"
.TH MBIND 2 2015-01-22 Linux "Linux Programmer's Manual"
.SH NAME
mbind \- set memory policy for a memory range
.SH SYNOPSIS
.nf
.B "#include <numaif.h>"
.sp
.BI "long mbind(void *" addr ", unsigned long " len  ", int " mode ,
.BI "           const unsigned long *" nodemask  ", unsigned long " maxnode ,
.BI "           unsigned " flags );
.sp
Link with \fI\-lnuma\fP.
.fi
.SH DESCRIPTION
.BR mbind ()
sets the NUMA memory policy,
which consists of a policy mode and zero or more nodes,
for the memory range starting with
.I addr
and continuing for
.I len
bytes.
The memory policy defines from which node memory is allocated.

If the memory range specified by the
.IR addr " and " len
arguments includes an "anonymous" region of memory\(emthat is
a region of memory created using the
.BR mmap (2)
system call with the
.BR MAP_ANONYMOUS \(emor
a memory-mapped file, mapped using the
.BR mmap (2)
system call with the
.B MAP_PRIVATE
flag, pages will be allocated only according to the specified
policy when the application writes [stores] to the page.
For anonymous regions, an initial read access will use a shared
page in the kernel containing all zeros.
For a file mapped with
.BR MAP_PRIVATE ,
an initial read access will allocate pages according to the
process policy of the process that causes the page to be allocated.
This may not be the process that called
.BR mbind ().

The specified policy will be ignored for any
.B MAP_SHARED
mappings in the specified memory range.
Rather the pages will be allocated according to the process policy
of the process that caused the page to be allocated.
Again, this may not be the process that called
.BR mbind ().

If the specified memory range includes a shared memory region
created using the
.BR shmget (2)
system call and attached using the
.BR shmat (2)
system call,
pages allocated for the anonymous or shared memory region will
be allocated according to the policy specified, regardless which
process attached to the shared memory segment causes the allocation.
If, however, the shared memory region was created with the
.B SHM_HUGETLB
flag,
the huge pages will be allocated according to the policy specified
only if the page allocation is caused by the process that calls
.BR mbind ()
for that region.

By default,
.BR mbind ()
has an effect only for new allocations; if the pages inside
the range have been already touched before setting the policy,
then the policy has no effect.
This default behavior may be overridden by the
.B MPOL_MF_MOVE
and
.B MPOL_MF_MOVE_ALL
flags described below.

The
.I mode
argument must specify one of
.BR MPOL_DEFAULT ,
.BR MPOL_BIND ,
.BR MPOL_INTERLEAVE ,
or
.BR MPOL_PREFERRED .
All policy modes except
.B MPOL_DEFAULT
require the caller to specify via the
.I nodemask
argument,
the node or nodes to which the mode applies.

The
.I mode
argument may also include an optional
.IR "mode flag ".
The supported
.I "mode flags"
are:
.TP
.BR MPOL_F_STATIC_NODES " (since Linux-2.6.26)"
A nonempty
.I nodemask
specifies physical node ids.
Linux does not remap the
.I nodemask
when the process moves to a different cpuset context,
nor when the set of nodes allowed by the process's
current cpuset context changes.
.TP
.BR MPOL_F_RELATIVE_NODES " (since Linux-2.6.26)"
A nonempty
.I nodemask
specifies node ids that are relative to the set of
node ids allowed by the process's current cpuset.
.PP
.I nodemask
points to a bit mask of nodes containing up to
.I maxnode
bits.
The bit mask size is rounded to the next multiple of
.IR "sizeof(unsigned long)" ,
but the kernel will use bits only up to
.IR maxnode .
A NULL value of
.I nodemask
or a
.I maxnode
value of zero specifies the empty set of nodes.
If the value of
.I maxnode
is zero,
the
.I nodemask
argument is ignored.
Where a
.I nodemask
is required, it must contain at least one node that is on-line,
allowed by the process's current cpuset context
[unless the
.B MPOL_F_STATIC_NODES
mode flag is specified],
and contains memory.

The
.B MPOL_DEFAULT
mode requests that any nondefault policy be removed,
restoring default behavior.
When applied to a range of memory via
.BR mbind (),
this means to use the process policy,
which may have been set with
.BR set_mempolicy (2).
If the mode of the process policy is also
.BR MPOL_DEFAULT ,
the system-wide default policy will be used.
The system-wide default policy allocates
pages on the node of the CPU that triggers the allocation.
For
.BR MPOL_DEFAULT ,
the
.I nodemask
and
.I maxnode
arguments must be specify the empty set of nodes.

The
.B MPOL_BIND
mode specifies a strict policy that restricts memory allocation to
the nodes specified in
.IR nodemask .
If
.I nodemask
specifies more than one node, page allocations will come from
the node with the lowest numeric node ID first, until that node
contains no free memory.
Allocations will then come from the node with the next highest
node ID specified in
.I nodemask
and so forth, until none of the specified nodes contain free memory.
Pages will not be allocated from any node not specified in the
.IR nodemask .

The
.B MPOL_INTERLEAVE
mode specifies that page allocations be interleaved across the
set of nodes specified in
.IR nodemask .
This optimizes for bandwidth instead of latency
by spreading out pages and memory accesses to those pages across
multiple nodes.
To be effective the memory area should be fairly large,
at least 1MB or bigger with a fairly uniform access pattern.
Accesses to a single page of the area will still be limited to
the memory bandwidth of a single node.

.B MPOL_PREFERRED
sets the preferred node for allocation.
The kernel will try to allocate pages from this
node first and fall back to other nodes if the
preferred nodes is low on free memory.
If
.I nodemask
specifies more than one node ID, the first node in the
mask will be selected as the preferred node.
If the
.I nodemask
and
.I maxnode
arguments specify the empty set, then the memory is allocated on
the node of the CPU that triggered the allocation.
This is the only way to specify "local allocation" for a
range of memory via
.BR mbind ().

If
.B MPOL_MF_STRICT
is passed in
.I flags
and
.I mode
is not
.BR MPOL_DEFAULT ,
then the call will fail with the error
.B EIO
if the existing pages in the memory range don't follow the policy.
.\" According to the kernel code, the following is not true
.\" --Lee Schermerhorn
.\" In 2.6.16 or later the kernel will also try to move pages
.\" to the requested node with this flag.

If
.B MPOL_MF_MOVE
is specified in
.IR flags ,
then the kernel will attempt to move all the existing pages
in the memory range so that they follow the policy.
Pages that are shared with other processes will not be moved.
If
.B MPOL_MF_STRICT
is also specified, then the call will fail with the error
.B EIO
if some pages could not be moved.

If
.B MPOL_MF_MOVE_ALL
is passed in
.IR flags ,
then the kernel will attempt to move all existing pages in the memory range
regardless of whether other processes use the pages.
The calling process must be privileged
.RB ( CAP_SYS_NICE )
to use this flag.
If
.B MPOL_MF_STRICT
is also specified, then the call will fail with the error
.B EIO
if some pages could not be moved.
.\" ---------------------------------------------------------------
.SH RETURN VALUE
On success,
.BR mbind ()
returns 0;
on error, \-1 is returned and
.I errno
is set to indicate the error.
.\" ---------------------------------------------------------------
.SH ERRORS
.\"  I think I got all of the error returns.  --Lee Schermerhorn
.TP
.B EFAULT
Part or all of the memory range specified by
.I nodemask
and
.I maxnode
points outside your accessible address space.
Or, there was an unmapped hole in the specified memory range specified by
.IR addr
and
.IR len .
.TP
.B EINVAL
An invalid value was specified for
.I flags
or
.IR mode ;
or
.I addr + len
was less than
.IR addr ;
or
.I addr
is not a multiple of the system page size.
Or,
.I mode
is
.B MPOL_DEFAULT
and
.I nodemask
specified a nonempty set;
or
.I mode
is
.B MPOL_BIND
or
.B MPOL_INTERLEAVE
and
.I nodemask
is empty.
Or,
.I maxnode
exceeds a kernel-imposed limit.
.\" As at 2.6.23, this limit is "a page worth of bits", e.g.,
.\" 8 * 4096 bits, assuming a 4kB page size.
Or,
.I nodemask
specifies one or more node IDs that are
greater than the maximum supported node ID.
Or, none of the node IDs specified by
.I nodemask
are on-line and allowed by the process's current cpuset context,
or none of the specified nodes contain memory.
Or, the
.I mode
argument specified both
.B MPOL_F_STATIC_NODES
and
.BR MPOL_F_RELATIVE_NODES .
.TP
.B EIO
.B MPOL_MF_STRICT
was specified and an existing page was already on a node
that does not follow the policy;
or
.B MPOL_MF_MOVE
or
.B MPOL_MF_MOVE_ALL
was specified and the kernel was unable to move all existing
pages in the range.
.TP
.B ENOMEM
Insufficient kernel memory was available.
.TP
.B EPERM
The
.I flags
argument included the
.B MPOL_MF_MOVE_ALL
flag and the caller does not have the
.B CAP_SYS_NICE
privilege.
.\" ---------------------------------------------------------------
.SH VERSIONS
The
.BR mbind ()
system call was added to the Linux kernel in version 2.6.7.
.SH CONFORMING TO
This system call is Linux-specific.
.SH NOTES
For information on library support, see
.BR numa (7).

NUMA policy is not supported on a memory-mapped file range
that was mapped with the
.B MAP_SHARED
flag.

The
.B MPOL_DEFAULT
mode can have different effects for
.BR mbind ()
and
.BR set_mempolicy (2).
When
.B MPOL_DEFAULT
is specified for
.BR set_mempolicy (2),
the process's policy reverts to system default policy
or local allocation.
When
.B MPOL_DEFAULT
is specified for a range of memory using
.BR mbind (),
any pages subsequently allocated for that range will use
the process's policy, as set by
.BR set_mempolicy (2).
This effectively removes the explicit policy from the
specified range, "falling back" to a possibly nondefault
policy.
To select explicit "local allocation" for a memory range,
specify a
.I mode
of
.B MPOL_PREFERRED
with an empty set of nodes.
This method will work for
.BR set_mempolicy (2),
as well.

Support for huge page policy was added with 2.6.16.
For interleave policy to be effective on huge page mappings the
policied memory needs to be tens of megabytes or larger.

.B MPOL_MF_STRICT
is ignored on huge page mappings.

.B MPOL_MF_MOVE
and
.B MPOL_MF_MOVE_ALL
are available only on Linux 2.6.16 and later.
.SH SEE ALSO
.BR get_mempolicy (2),
.BR getcpu (2),
.BR mmap (2),
.BR set_mempolicy (2),
.BR shmat (2),
.BR shmget (2),
.BR numa (3),
.BR cpuset (7),
.BR numa (7),
.BR numactl (8)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2014 Michael Kerrisk <mtk.manpages@gmail.com>
.\" and Copyright (C) 2014 David Herrmann <dh.herrmann@gmail.com>
.\"
.\" %%%LICENSE_START(GPLv2+)
.\"
.\" This program is free software; you can redistribute it and/or modify
.\" it under the terms of the GNU General Public License as published by
.\" the Free Software Foundation; either version 2 of the License, or
.\" (at your option) any later version.
.\"
.\" This program is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.TH MEMFD_CREATE 2 2015-01-22 Linux "Linux Programmer's Manual"
.SH NAME
memfd_create \- create an anonymous file
.SH SYNOPSIS
.B #include <sys/memfd.h>
.sp
.BI "int memfd_create(const char *" name ", unsigned int " flags ");"
.SH DESCRIPTION
.BR memfd_create ()
creates an anonymous file and returns a file descriptor that refers to it.
The file behaves like a regular file, and so can be modified,
truncated, memory-mapped, and so on.
However, unlike a regular file,
it lives in RAM and has a volatile backing storage.
Once all references to the file are dropped, it is automatically released.
Anonymous memory is used for all backing pages of the file.
Therefore, files created by
.BR memfd_create ()
have the same semantics as other anonymous
.\" David Herrmann:
.\"     memfd uses VM_NORESERVE so each page is accounted on first access.
.\"     This means, the overcommit-limits (see __vm_enough_memory()) and the
.\"     memory-cgroup limits (mem_cgroup_try_charge()) are applied. Note that
.\"     those are accounted on "current" and "current->mm", that is, the
.\"     process doing the first page access.
memory allocations such as those allocated using
.BR mmap (2)
with the
.BR MAP_ANONYMOUS
flag.

The initial size of the file is set to 0.
Following the call, the file size should be set using
.BR ftruncate (2).
(Alternatively, the file may be populated by calls to
.BR write (2)
or similar.)

The name supplied in
.I name
is used as a filename and will be displayed
as the target of the corresponding symbolic link in the directory
.IR /proc/self/fd/ .
The displayed name is always prefixed with
.IR memfd:
and serves only for debugging purposes.
Names do not affect the behavior of the file descriptor,
and as such multiple files can have the same name without any side effects.

The following values may be bitwise ORed in
.IR flags
to change the behavior of
.BR memfd_create ():
.TP
.BR MFD_CLOEXEC
Set the close-on-exec
.RB ( FD_CLOEXEC )
flag on the new file descriptor.
See the description of the
.B O_CLOEXEC
flag in
.BR open (2)
for reasons why this may be useful.
.TP
.BR MFD_ALLOW_SEALING
Allow sealing operations on this file.
See the discussion of the
.B F_ADD_SEALS
and
.BR F_GET_SEALS
operations in
.BR fcntl (2),
and also NOTES, below.
The initial set of seals is empty.
If this flag is not set, the initial set of seals will be
.BR F_SEAL_SEAL ,
meaning that no other seals can be set on the file.
.\" FIXME Why is the MFD_ALLOW_SEALING behavior not simply the default?
.\"       Is it worth adding some text explaining this?
.PP
Unused bits in
.I flags
must be 0.

As its return value,
.BR memfd_create ()
returns a new file descriptor that can be used to refer to the file.
This file descriptor is opened for both reading and writing
.RB ( O_RDWR )
and
.B O_LARGEFILE
is set for the descriptor.

With respect to
.BR fork (2)
and
.BR execve (2),
the usual semantics apply for the file descriptor created by
.BR memfd_create ().
A copy of the file descriptor is inherited by the child produced by
.BR fork (2)
and refers to the same file.
The file descriptor is preserved across
.BR execve (2),
unless the close-on-exec flag has been set.
.SH RETURN VALUE
On success,
.BR memfd_create ()
returns a new file descriptor.
On error, \-1 is returned and
.I errno
is set to indicate the error.
.SH ERRORS
.TP
.B EFAULT
The address in
.IR name
points to invalid memory.
.TP
.B EINVAL
An unsupported value was specified in one of the arguments:
.I flags
included unknown bits, or
.I name
was too long.
.TP
.B EMFILE
The per-process limit on open file descriptors has been reached.
.TP
.B ENFILE
The system-wide limit on the total number of open files has been reached.
.TP
.B ENOMEM
There was insufficient memory to create a new anonymous file.
.SH VERSIONS
The
.BR memfd_create ()
system call first appeared in Linux 3.17.
.\" FIXME . When glibc support appears, update the following sentence:
Support in the GNU C library is pending.
.SH CONFORMING TO
The
.BR memfd_create ()
system call is Linux-specific.
.SH NOTES
.\" See also http://lwn.net/Articles/593918/
.\" and http://lwn.net/Articles/594919/ and http://lwn.net/Articles/591108/
The
.BR memfd_create ()
system call provides a simple alternative to manually mounting a
.I tmpfs
filesystem and creating and opening a file in that filesystem.
The primary purpose of
.BR memfd_create ()
is to create files and associated file descriptors that are
used with the file-sealing APIs provided by
.BR fcntl (2).

The
.BR memfd_create ()
system call also has uses without file sealing
(which is why file-sealing is disabled, unless explicitly requested with the
.BR MFD_ALLOW_SEALING
flag).
In particular, it can be used as an alternative to creating files in
.IR tmp
or as an alternative to using the
.BR  open (2)
.B O_TMPFILE
in cases where there is no intention to actually link the
resulting file into the filesystem.
.SS File sealing
In the absence of file sealing,
processes that communicate via shared memory must either trust each other,
or take measures to deal with the possibility that an untrusted peer
may manipulate the shared memory region in problematic ways.
For example, an untrusted peer might modify the contents of the
shared memory at any time, or shrink the shared memory region.
The former possibility leaves the local process vulnerable to
time-of-check-to-time-of-use race conditions
(typically dealt with by copying data from
the shared memory region before checking and using it).
The latter possibility leaves the local process vulnerable to
.BR SIGBUS
signals when an attempt is made to access a now-nonexistent
location in the shared memory region.
(Dealing with this possibility necessitates the use of a handler for the
.BR SIGBUS
signal.)

Dealing with untrusted peers imposes extra complexity on
code that employs shared memory.
Memory sealing enables that extra complexity to be eliminated,
by allowing a process to operate secure in the knowledge that
its peer can't modify the shared memory in an undesired fashion.

An example of the usage of the sealing mechanism is as follows:

.IP 1. 3
The first process creates a
.I tmpfs
file using
.BR memfd_create ().
The call yields a file descriptor used in subsequent steps.
.IP 2.
The first process
sizes the file created in the previous step using
.BR ftruncate (2),
maps it using
.BR mmap (2),
and populates the shared memory with the desired data.
.IP 3.
The first process uses the
.BR fcntl (2)
.B F_ADD_SEALS
operation to place one or more seals on the file,
in order to restrict further modifications on the file.
(If placing the seal
.BR F_SEAL_WRITE ,
then it will be necessary to first unmap the shared writable mapping
created in the previous step.)
.IP 4.
A second process obtains a file descriptor for the
.I tmpfs
file and maps it.
Among the possible ways in which this could happen are the following:
.RS
.IP * 3
The process that called
.BR memfd_create ()
could transfer the resulting file descriptor to the second process
via a UNIX domain socket (see
.BR unix (7)
and
.BR cmsg (3)).
The second process then maps the file using
.BR mmap (2).
.IP *
The second process is created via
.BR fork (2)
and thus automatically inherits the file descriptor and mapping.
(Note that in this case and the next,
there is a natural trust relationship between the two processes,
since they are running under the same user ID.
Therefore, file sealing would not normally be necessary.)
.IP *
The second process opens the file
.IR /proc/<pd>/fd/<fd> ,
where
.I <pid>
is the PID of the first process (the one that called
.BR memfd_create ()),
and
.I <fd>
is the number of the file descriptor returned by the call to
.BR memfd_create ()
in that process.
The second process then maps the file using
.BR mmap (2).
.RE
.IP 5.
The second process uses the
.BR fcntl (2)
.B F_GET_SEALS
operation to retrieve the bit mask of seals
that has been applied to the file.
This bit mask can be inspected in order to determine
what kinds of restrictions have been placed on file modifications.
If desired, the second process can apply further seals
to impose additional restrictions (so long as the
.BR F_SEAL_SEAL
seal has not yet been applied).
.SH EXAMPLE
Below are shown two example programs that demonstrate the use of
.BR memfd_create ()
and the file sealing API.

The first program,
.IR t_memfd_create.c ,
creates a
.I tmpfs
file using
.BR memfd_create (),
sets a size for the file, maps it into memory,
and optionally places some seals on the file.
The program accepts up to three command-line arguments,
of which the first two are required.
The first argument is the name to associate with the file,
the second argument is the size to be set for the file,
and the optional third is a string of characters that specify
seals to be set on file.

The second program,
.IR t_get_seals.c ,
can be used to open an existing file that was created via
.BR memfd_create ()
and inspect the set of seals that have been applied to that file.

The following shell session demonstrates the use of these programs.
First we create a
.I tmpfs
file and set some seals on it:

.in +4n
.nf
$ \fB./t_memfd_create my_memfd_file 4096 sw &\fP
[1] 11775
PID: 11775; fd: 3; /proc/11775/fd/3
.fi
.in

At this point, the
.I t_memfd_create
program continues to run in the background.
From another program, we can obtain a file descriptor for the
file created by
.BR memfd_create ()
by opening the
.IR /proc/PID/fd
file that corresponds to the descriptor opened by
.BR memfd_create ().
Using that pathname, we inspect the content of the
.IR /proc/PID/fd
symbolic link, and use our
.I t_get_seals
program to view the seals that have been placed on the file:

.in +4n
.nf
$ \fBreadlink /proc/11775/fd/3\fP
/memfd:my_memfd_file (deleted)
$ \fB./t_get_seals /proc/11775/fd/3\fP
Existing seals: WRITE SHRINK
.fi
.in
.SS Program source: t_memfd_create.c
\&
.nf
#include <sys/memfd.h>
#include <fcntl.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <stdio.h>

#define errExit(msg)    do { perror(msg); exit(EXIT_FAILURE); \\
                        } while (0)

int
main(int argc, char *argv[])
{
    int fd;
    unsigned int seals;
    char *addr;
    char *name, *seals_arg;
    ssize_t len;

    if (argc < 3) {
        fprintf(stderr, "%s name size [seals]\\n", argv[0]);
        fprintf(stderr, "\\t\(aqseals\(aq can contain any of the "
                "following characters:\\n");
        fprintf(stderr, "\\t\\tg \- F_SEAL_GROW\\n");
        fprintf(stderr, "\\t\\ts \- F_SEAL_SHRINK\\n");
        fprintf(stderr, "\\t\\tw \- F_SEAL_WRITE\\n");
        fprintf(stderr, "\\t\\tS \- F_SEAL_SEAL\\n");
        exit(EXIT_FAILURE);
    }

    name = argv[1];
    len = atoi(argv[2]);
    seals_arg = argv[3];

    /* Create an anonymous file in tmpfs; allow seals to be
       placed on the file */

    fd = memfd_create(name, MFD_ALLOW_SEALING);
    if (fd == \-1)
        errExit("memfd_create");

    /* Size the file as specified on the command line */

    if (ftruncate(fd, len) == \-1)
        errExit("truncate");

    printf("PID: %ld; fd: %d; /proc/%ld/fd/%d\\n",
            (long) getpid(), fd, (long) getpid(), fd);

    /* Code to map the file and populate the mapping with data
       omitted */

    /* If a \(aqseals\(aq command\-line argument was supplied, set some
       seals on the file */

    if (seals_arg != NULL) {
        seals = 0;

        if (strchr(seals_arg, \(aqg\(aq) != NULL)
            seals |= F_SEAL_GROW;
        if (strchr(seals_arg, \(aqs\(aq) != NULL)
            seals |= F_SEAL_SHRINK;
        if (strchr(seals_arg, \(aqw\(aq) != NULL)
            seals |= F_SEAL_WRITE;
        if (strchr(seals_arg, \(aqS\(aq) != NULL)
            seals |= F_SEAL_SEAL;

        if (fcntl(fd, F_ADD_SEALS, seals) == \-1)
            errExit("fcntl");
    }

    /* Keep running, so that the file created by memfd_create()
       continues to exist */

    pause();

    exit(EXIT_SUCCESS);
}
.fi
.SS Program source: t_get_seals.c
\&
.nf
#include <sys/memfd.h>
#include <fcntl.h>
#include <unistd.h>
#include <stdlib.h>
#include <string.h>
#include <stdio.h>

#define errExit(msg)    do { perror(msg); exit(EXIT_FAILURE); \\
                        } while (0)

int
main(int argc, char *argv[])
{
    int fd;
    unsigned int seals;

    if (argc != 2) {
        fprintf(stderr, "%s /proc/PID/fd/FD\\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    fd = open(argv[1], O_RDWR);
    if (fd == \-1)
        errExit("open");

    seals = fcntl(fd, F_GET_SEALS);
    if (seals == \-1)
        errExit("fcntl");

    printf("Existing seals:");
    if (seals & F_SEAL_SEAL)
        printf(" SEAL");
    if (seals & F_SEAL_GROW)
        printf(" GROW");
    if (seals & F_SEAL_WRITE)
        printf(" WRITE");
    if (seals & F_SEAL_SHRINK)
        printf(" SHRINK");
    printf("\\n");

    /* Code to map the file and access the contents of the
       resulting mapping omitted */

    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR fcntl (2),
.BR ftruncate (2),
.BR mmap (2),
.BR shmget (2),
.BR shm_open (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 2009 Intel Corporation
.\"                Author: Andi Kleen
.\" Based on the move_pages manpage which was
.\" This manpage is Copyright (C) 2006 Silicon Graphics, Inc.
.\"                               Christoph Lameter
.\"
.\" %%%LICENSE_START(VERBATIM_TWO_PARA)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\" %%%LICENSE_END
.\"
.TH MIGRATE_PAGES 2 2015-02-21 "Linux" "Linux Programmer's Manual"
.SH NAME
migrate_pages \- move all pages in a process to another set of nodes
.SH SYNOPSIS
.nf
.B #include <numaif.h>
.sp
.BI "long migrate_pages(int " pid ", unsigned long " maxnode,
.BI "                   const unsigned long *" old_nodes,
.BI "                   const unsigned long *" new_nodes );
.fi
.sp
Link with \fI\-lnuma\fP.
.SH DESCRIPTION
.BR migrate_pages ()
attempts to move all pages of the process
.I pid
that are in memory nodes
.I old_nodes
to the memory nodes in
.IR new_nodes .
Pages not located in any node in
.I old_nodes
will not be migrated.
As far as possible,
the kernel maintains the relative topology relationship inside
.I old_nodes
during the migration to
.IR new_nodes .

The
.I old_nodes
and
.I new_nodes
arguments are pointers to bit masks of node numbers, with up to
.I maxnode
bits in each mask.
These masks are maintained as arrays of unsigned
.I long
integers (in the last
.I long
integer, the bits beyond those specified by
.I maxnode
are ignored).
The
.I maxnode
argument is the maximum node number in the bit mask plus one (this is the same
as in
.BR mbind (2),
but different from
.BR select (2)).

The
.I pid
argument is the ID of the process whose pages are to be moved.
To move pages in another process,
the caller must be privileged
.RB ( CAP_SYS_NICE )
or the real or effective user ID of the calling process must match the
real or saved-set user ID of the target process.
If
.I pid
is 0, then
.BR migrate_pages ()
moves pages of the calling process.

Pages shared with another process will be moved only if the initiating
process has the
.B CAP_SYS_NICE
privilege.
.SH RETURN VALUE
On success
.BR migrate_pages ()
returns the number of pages that could not be moved
(i.e., a return of zero means that all pages were successfully moved).
On error, it returns \-1, and sets
.I errno
to indicate the error.
.SH ERRORS
.TP
.B EFAULT
Part or all of the memory range specified by
.IR old_nodes / new_nodes
and
.I maxnode
points outside your accessible address space.
.TP
.B EINVAL
The value specified by
.I maxnode
exceeds a kernel-imposed limit.
.\" As at 3.5, this limit is "a page worth of bits", e.g.,
.\" 8 * 4096 bits, assuming a 4kB page size.
Or,
.I old_nodes
or
.I new_nodes
specifies one or more node IDs that are
greater than the maximum supported node ID.
Or, none of the node IDs specified by
.I new_nodes
are on-line and allowed by the process's current cpuset context,
or none of the specified nodes contain memory.
.TP
.B EPERM
Insufficient privilege
.RB ( CAP_SYS_NICE )
to move pages of the process specified by
.IR pid ,
or insufficient privilege
.RB ( CAP_SYS_NICE )
to access the specified target nodes.
.TP
.B ESRCH
No process matching
.I pid
could be found.
.\" FIXME Document the other errors that can occur for migrate_pages()
.SH VERSIONS
The
.BR migrate_pages ()
system call first appeared on Linux in version 2.6.16.
.SH CONFORMING TO
This system call is Linux-specific.
.SH NOTES
For information on library support, see
.BR numa (7).

Use
.BR get_mempolicy (2)
with the
.B MPOL_F_MEMS_ALLOWED
flag to obtain the set of nodes that are allowed by
the calling process's cpuset.
Note that this information is subject to change at any
time by manual or automatic reconfiguration of the cpuset.

Use of
.BR migrate_pages ()
may result in pages whose location
(node) violates the memory policy established for the
specified addresses (see
.BR mbind (2))
and/or the specified process (see
.BR set_mempolicy (2)).
That is, memory policy does not constrain the destination
nodes used by
.BR migrate_pages ().

The
.I <numaif.h>
header is not included with glibc, but requires installing
.I libnuma-devel
or a similar package.
.SH SEE ALSO
.BR get_mempolicy (2),
.BR mbind (2),
.BR set_mempolicy (2),
.BR numa (3),
.BR numa_maps (5),
.BR cpuset (7),
.BR numa (7),
.BR migratepages (8),
.BR numastat (8)

.IR Documentation/vm/page_migration
in the Linux kernel source tree
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2001 Bert Hubert <ahu@ds9a.nl>
.\" and Copyright (C) 2007 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Created Sun Jun 3 17:23:32 2001 by bert hubert <ahu@ds9a.nl>
.\" Slightly adapted, following comments by Hugh Dickins, aeb, 2001-06-04.
.\" Modified, 20 May 2003, Michael Kerrisk <mtk.manpages@gmail.com>
.\" Modified, 30 Apr 2004, Michael Kerrisk <mtk.manpages@gmail.com>
.\" 2005-04-05 mtk, Fixed error descriptions
.\" 	after message from <gordon.jin@intel.com>
.\" 2007-01-08 mtk, rewrote various parts
.\"
.TH MINCORE 2 2008-04-22 "Linux" "Linux Programmer's Manual"
.SH NAME
mincore \- determine whether pages are resident in memory
.SH SYNOPSIS
.B #include <unistd.h>
.br
.B #include <sys/mman.h>
.sp
.BI "int mincore(void *" addr ", size_t " length ", unsigned char *" vec );
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR mincore ():
_BSD_SOURCE || _SVID_SOURCE
.SH DESCRIPTION
.BR mincore ()
returns a vector that indicates whether pages
of the calling process's virtual memory are resident in core (RAM),
and so will not cause a disk access (page fault) if referenced.
The kernel returns residency information about the pages
starting at the address
.IR addr ,
and continuing for
.I length
bytes.

The
.I addr
argument must be a multiple of the system page size.
The
.I length
argument need not be a multiple of the page size,
but since residency information is returned for whole pages,
.I length
is effectively rounded up to the next multiple of the page size.
One may obtain the page size
.RB ( PAGE_SIZE )
using
.IR sysconf(_SC_PAGESIZE) .

The
.I vec
argument must point to an array containing at least
.I "(length+PAGE_SIZE\-1) / PAGE_SIZE"
bytes.
On return,
the least significant bit of each byte will be set if
the corresponding page is currently resident in memory,
and be clear otherwise.
(The settings of the other bits in each byte are undefined;
these bits are reserved for possible later use.)
Of course the information returned in
.I vec
is only a snapshot: pages that are not
locked in memory can come and go at any moment, and the contents of
.I vec
may already be stale by the time this call returns.
.SH RETURN VALUE
On success,
.BR mincore ()
returns zero.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.B EAGAIN
kernel is temporarily out of resources.
.TP
.B EFAULT
.I vec
points to an invalid address.
.TP
.B EINVAL
.I addr
is not a multiple of the page size.
.TP
.B ENOMEM
.I length
is greater than
.RI ( TASK_SIZE " \- " addr ).
(This could occur if a negative value is specified for
.IR length ,
since that value will be interpreted as a large
unsigned integer.)
In Linux 2.6.11 and earlier, the error
.B EINVAL
was returned for this condition.
.TP
.B ENOMEM
.I addr
to
.I addr
+
.I length
contained unmapped memory.
.SH VERSIONS
Available since Linux 2.3.99pre1 and glibc 2.2.
.SH CONFORMING TO
.BR mincore ()
is not specified in POSIX.1-2001,
and it is not available on all UNIX implementations.
.\" It is on at least NetBSD, FreeBSD, OpenBSD, Solaris 8,
.\" AIX 5.1, SunOS 4.1
.\" .SH HISTORY
.\" The
.\" .BR mincore ()
.\" function first appeared in 4.4BSD.
.SH BUGS
Before kernel 2.6.21,
.BR mincore ()
did not return correct information for
.B MAP_PRIVATE
mappings, or for nonlinear mappings (established using
.BR remap_file_pages (2)).
.\" Linux (up to now, 2.6.5),
.\" .B mincore
.\" does not return correct information for MAP_PRIVATE mappings:
.\" for a MAP_PRIVATE file mapping,
.\" .B mincore
.\" returns the residency of the file pages, rather than any
.\" modified process-private pages that have been copied on write;
.\" for a MAP_PRIVATE mapping of
.\" .IR /dev/zero ,
.\" .B mincore
.\" always reports pages as nonresident;
.\" and for a MAP_PRIVATE, MAP_ANONYMOUS mapping,
.\" .B mincore
.\" always fails with the error
.\" .BR ENOMEM .
.SH SEE ALSO
.BR mlock (2),
.BR mmap (2)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" This manpage is Copyright (C) 1992 Drew Eckhardt;
.\"             and Copyright (C) 1993 Michael Haardt
.\"             and Copyright (C) 1993,1994 Ian Jackson
.\"		and Copyright (C) 2006, 2014 Michael Kerrisk
.\"
.\" %%%LICENSE_START(GPL_NOVERSION_ONELINE)
.\" You may distribute it under the terms of the GNU General
.\" Public License. It comes with NO WARRANTY.
.\" %%%LICENSE_END
.\"
.TH MKDIR 2 2015-05-07 "Linux" "Linux Programmer's Manual"
.SH NAME
mkdir, mkdirat \- create a directory
.SH SYNOPSIS
.nf
.B #include <sys/stat.h>
.B #include <sys/types.h>
.\" .B #include <unistd.h>
.sp
.BI "int mkdir(const char *" pathname ", mode_t " mode );
.sp
.BR "#include <fcntl.h>           " "/* Definition of AT_* constants */"
.B #include <sys/stat.h>
.sp
.BI "int mkdirat(int " dirfd ", const char *" pathname ", mode_t " mode );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR mkdirat ():
.PD 0
.ad l
.RS 4
.TP 4
Since glibc 2.10:
_XOPEN_SOURCE\ >=\ 700 || _POSIX_C_SOURCE\ >=\ 200809L
.TP
Before glibc 2.10:
_ATFILE_SOURCE
.RE
.ad
.PD
.fi
.SH DESCRIPTION
.BR mkdir ()
attempts to create a directory named
.IR pathname .

The argument
.I mode
specifies the mode for the new directory (see
.BR stat (2)).
It is modified by the process's
.I umask
in the usual way: in the absence of a default ACL, the mode of the
created directory is
.RI ( mode " & ~" umask " & 0777)."
Whether other
.I mode
bits are honored for the created directory depends on the operating system.
For Linux, see NOTES below.

The newly created directory will be owned by the effective user ID of the
process.
If the directory containing the file has the set-group-ID
bit set, or if the filesystem is mounted with BSD group semantics
.RI ( "mount -o bsdgroups"
or, synonymously
.IR "mount -o grpid" ),
the new directory will inherit the group ownership from its parent;
otherwise it will be owned by the effective group ID of the process.

If the parent directory has the set-group-ID bit set, then so will the
newly created directory.
.\"
.\"
.SS mkdirat()
The
.BR mkdirat ()
system call operates in exactly the same way as
.BR mkdir (),
except for the differences described here.

If the pathname given in
.I pathname
is relative, then it is interpreted relative to the directory
referred to by the file descriptor
.I dirfd
(rather than relative to the current working directory of
the calling process, as is done by
.BR mkdir ()
for a relative pathname).

If
.I pathname
is relative and
.I dirfd
is the special value
.BR AT_FDCWD ,
then
.I pathname
is interpreted relative to the current working
directory of the calling process (like
.BR mkdir ()).

If
.I pathname
is absolute, then
.I dirfd
is ignored.
.PP
See
.BR openat (2)
for an explanation of the need for
.BR mkdirat ().
.SH RETURN VALUE
.BR mkdir ()
and
.BR mkdirat ()
return zero on success, or \-1 if an error occurred (in which case,
.I errno
is set appropriately).
.SH ERRORS
.TP
.B EACCES
The parent directory does not allow write permission to the process,
or one of the directories in
.I pathname
did not allow search permission.
(See also
.BR path_resolution (7).)
.TP
.B EDQUOT
The user's quota of disk blocks or inodes on the filesystem has been
exhausted.
.TP
.B EEXIST
.I pathname
already exists (not necessarily as a directory).
This includes the case where
.I pathname
is a symbolic link, dangling or not.
.TP
.B EFAULT
.IR pathname " points outside your accessible address space."
.TP
.B ELOOP
Too many symbolic links were encountered in resolving
.IR pathname .
.TP
.B EMLINK
The number of links to the parent directory would exceed
.BR LINK_MAX .
.TP
.B ENAMETOOLONG
.IR pathname " was too long."
.TP
.B ENOENT
A directory component in
.I pathname
does not exist or is a dangling symbolic link.
.TP
.B ENOMEM
Insufficient kernel memory was available.
.TP
.B ENOSPC
The device containing
.I pathname
has no room for the new directory.
.TP
.B ENOSPC
The new directory cannot be created because the user's disk quota is
exhausted.
.TP
.B ENOTDIR
A component used as a directory in
.I pathname
is not, in fact, a directory.
.TP
.B EPERM
The filesystem containing
.I pathname
does not support the creation of directories.
.TP
.B EROFS
.I pathname
refers to a file on a read-only filesystem.
.PP
The following additional errors can occur for
.BR mkdirat ():
.TP
.B EBADF
.I dirfd
is not a valid file descriptor.
.TP
.B ENOTDIR
.I pathname
is relative and
.I dirfd
is a file descriptor referring to a file other than a directory.
.SH VERSIONS
.BR mkdirat ()
was added to Linux in kernel 2.6.16;
library support was added to glibc in version 2.4.
.SH CONFORMING TO
.BR mkdir ():
SVr4, BSD, POSIX.1-2001, POSIX.1-2008.
.\" SVr4 documents additional EIO, EMULTIHOP

.BR mkdirat ():
POSIX.1-2008.
.SH NOTES
Under Linux, apart from the permission bits, the
.B S_ISVTX
.I mode
bit is also honored.
.PP
There are many infelicities in the protocol underlying NFS.
Some of these affect
.BR mkdir ().
.SS Glibc notes
On older kernels where
.BR mkdirat ()
is unavailable, the glibc wrapper function falls back to the use of
.BR mkdir ().
When
.I pathname
is a relative pathname,
glibc constructs a pathname based on the symbolic link in
.IR /proc/self/fd
that corresponds to the
.IR dirfd
argument.
.SH SEE ALSO
.BR mkdir (1),
.BR chmod (2),
.BR chown (2),
.BR mknod (2),
.BR mount (2),
.BR rmdir (2),
.BR stat (2),
.BR umask (2),
.BR unlink (2),
.BR acl (5)
.BR path_resolution (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" This manpage is Copyright (C) 1992 Drew Eckhardt;
.\"             and Copyright (C) 1993 Michael Haardt
.\"             and Copyright (C) 1993,1994 Ian Jackson
.\"		and Copyright (C) 2006, 2014, Michael Kerrisk
.\"
.\" %%%LICENSE_START(GPL_NOVERSION_ONELINE)
.\" You may distribute it under the terms of the GNU General
.\" Public License. It comes with NO WARRANTY.
.\" %%%LICENSE_END
.\"
.\" Modified 1996-08-18 by urs
.\" Modified 2003-04-23 by Michael Kerrisk
.\" Modified 2004-06-23 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.TH MKNOD 2 2015-05-07 "Linux" "Linux Programmer's Manual"
.SH NAME
mknod, mknodat \- create a special or ordinary file
.SH SYNOPSIS
.nf
.B #include <sys/types.h>
.B #include <sys/stat.h>
.B #include <fcntl.h>
.B #include <unistd.h>
.sp
.BI "int mknod(const char *" pathname ", mode_t " mode ", dev_t " dev );
.sp
.BR "#include <fcntl.h>           " "/* Definition of AT_* constants */"
.B #include <sys/stat.h>
.sp
.BI "int mknodat(int " dirfd ", const char *" pathname ", mode_t " mode \
", dev_t " dev );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR mknod ():
.ad l
.RS 4
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE\ >=\ 500 ||
_XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED
.RE
.ad
.SH DESCRIPTION
The system call
.BR mknod ()
creates a filesystem node (file, device special file, or
named pipe) named
.IR pathname ,
with attributes specified by
.I mode
and
.IR dev .

The
.I mode
argument specifies both the file mode to use and the type of node
to be created.
It should be a combination (using bitwise OR) of one of the file types
listed below and zero or more of the file mode bits listed in
.BR stat (2).

The file mode is modified by the process's
.I umask
in the usual way: in the absence of a default ACL, the permissions of the
created node are
.RI ( mode " & ~" umask ).

The file type must be one of
.BR S_IFREG ,
.BR S_IFCHR ,
.BR S_IFBLK ,
.BR S_IFIFO ,
or
.B S_IFSOCK
.\" (S_IFSOCK since Linux 1.2.4)
to specify a regular file (which will be created empty), character
special file, block special file, FIFO (named pipe), or UNIX domain socket,
respectively.
(Zero file type is equivalent to type
.BR S_IFREG .)

If the file type is
.B S_IFCHR
or
.BR S_IFBLK ,
then
.I dev
specifies the major and minor numbers of the newly created device
special file
.RB ( makedev (3)
may be useful to build the value for
.IR dev );
otherwise it is ignored.

If
.I pathname
already exists, or is a symbolic link, this call fails with an
.B EEXIST
error.

The newly created node will be owned by the effective user ID of the
process.
If the directory containing the node has the set-group-ID
bit set, or if the filesystem is mounted with BSD group semantics, the
new node will inherit the group ownership from its parent directory;
otherwise it will be owned by the effective group ID of the process.
.\"
.\"
.SS mknodat()
The
.BR mknodat ()
system call operates in exactly the same way as
.BR mknod (2),
except for the differences described here.

If the pathname given in
.I pathname
is relative, then it is interpreted relative to the directory
referred to by the file descriptor
.I dirfd
(rather than relative to the current working directory of
the calling process, as is done by
.BR mknod (2)
for a relative pathname).

If
.I pathname
is relative and
.I dirfd
is the special value
.BR AT_FDCWD ,
then
.I pathname
is interpreted relative to the current working
directory of the calling process (like
.BR mknod (2)).

If
.I pathname
is absolute, then
.I dirfd
is ignored.
.PP
See
.BR openat (2)
for an explanation of the need for
.BR mknodat ().
.SH RETURN VALUE
.BR mknod ()
and
.BR mknodat ()
return zero on success, or \-1 if an error occurred (in which case,
.I errno
is set appropriately).
.SH ERRORS
.TP
.B EACCES
The parent directory does not allow write permission to the process,
or one of the directories in the path prefix of
.I pathname
did not allow search permission.
(See also
.BR path_resolution (7).)
.TP
.B EDQUOT
The user's quota of disk blocks or inodes on the filesystem has been
exhausted.
.TP
.B EEXIST
.I pathname
already exists.
This includes the case where
.I pathname
is a symbolic link, dangling or not.
.TP
.B EFAULT
.IR pathname " points outside your accessible address space."
.TP
.B EINVAL
.I mode
requested creation of something other than a regular file, device
special file, FIFO or socket.
.TP
.B ELOOP
Too many symbolic links were encountered in resolving
.IR pathname .
.TP
.B ENAMETOOLONG
.IR pathname " was too long."
.TP
.B ENOENT
A directory component in
.I pathname
does not exist or is a dangling symbolic link.
.TP
.B ENOMEM
Insufficient kernel memory was available.
.TP
.B ENOSPC
The device containing
.I pathname
has no room for the new node.
.TP
.B ENOTDIR
A component used as a directory in
.I pathname
is not, in fact, a directory.
.TP
.B EPERM
.I mode
requested creation of something other than a regular file,
FIFO (named pipe), or UNIX domain socket, and the caller
is not privileged (Linux: does not have the
.B CAP_MKNOD
capability);
.\" For UNIX domain sockets and regular files, EPERM is returned only in
.\" Linux 2.2 and earlier; in Linux 2.4 and later, unprivileged can
.\" use mknod() to make these files.
also returned if the filesystem containing
.I pathname
does not support the type of node requested.
.TP
.B EROFS
.I pathname
refers to a file on a read-only filesystem.
.PP
The following additional errors can occur for
.BR mknodat ():
.TP
.B EBADF
.I dirfd
is not a valid file descriptor.
.TP
.B ENOTDIR
.I pathname
is relative and
.I dirfd
is a file descriptor referring to a file other than a directory.
.SH VERSIONS
.BR mknodat ()
was added to Linux in kernel 2.6.16;
library support was added to glibc in version 2.4.
.SH CONFORMING TO
.BR mknod ():
SVr4, 4.4BSD, POSIX.1-2001 (but see below), POSIX.1-2008.
.\" The Linux version differs from the SVr4 version in that it
.\" does not require root permission to create pipes, also in that no
.\" EMULTIHOP, ENOLINK, or EINTR error is documented.

.BR mknodat ():
POSIX.1-2008.
.SH NOTES
POSIX.1-2001 says: "The only portable use of
.BR mknod ()
is to create a FIFO-special file.
If
.I mode
is not
.B S_IFIFO
or
.I dev
is not 0, the behavior of
.BR mknod ()
is unspecified."
However, nowadays one should never use
.BR mknod ()
for this purpose; one should use
.BR mkfifo (3),
a function especially defined for this purpose.

Under Linux,
.BR mknod ()
cannot be used to create directories.
One should make directories with
.BR mkdir (2).
.\" and one should make UNIX domain sockets with socket(2) and bind(2).

There are many infelicities in the protocol underlying NFS.
Some of these affect
.BR mknod ()
and
.BR mknodat (2).
.SH SEE ALSO
.BR chmod (2),
.BR chown (2),
.BR fcntl (2),
.BR mkdir (2),
.BR mount (2),
.BR socket (2),
.BR stat (2),
.BR umask (2),
.BR unlink (2),
.BR makedev (3),
.BR mkfifo (3),
.BR acl (5)
.BR path_resolution (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) Michael Kerrisk, 2004
.\"	using some material drawn from earlier man pages
.\"	written by Thomas Kuhn, Copyright 1996
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.TH MLOCK 2 2014-04-14 "Linux" "Linux Programmer's Manual"
.SH NAME
mlock, munlock, mlockall, munlockall \- lock and unlock memory
.SH SYNOPSIS
.nf
.B #include <sys/mman.h>
.sp
.BI "int mlock(const void *" addr ", size_t " len );
.BI "int munlock(const void *" addr ", size_t " len );
.sp
.BI "int mlockall(int " flags );
.B int munlockall(void);
.fi
.SH DESCRIPTION
.BR mlock ()
and
.BR mlockall ()
respectively lock part or all of the calling process's virtual address
space into RAM, preventing that memory from being paged to the
swap area.
.BR munlock ()
and
.BR munlockall ()
perform the converse operation,
respectively unlocking part or all of the calling process's virtual
address space, so that pages in the specified virtual address range may
once more to be swapped out if required by the kernel memory manager.
Memory locking and unlocking are performed in units of whole pages.
.SS mlock() and munlock()
.BR mlock ()
locks pages in the address range starting at
.I addr
and continuing for
.I len
bytes.
All pages that contain a part of the specified address range are
guaranteed to be resident in RAM when the call returns successfully;
the pages are guaranteed to stay in RAM until later unlocked.

.BR munlock ()
unlocks pages in the address range starting at
.I addr
and continuing for
.I len
bytes.
After this call, all pages that contain a part of the specified
memory range can be moved to external swap space again by the kernel.
.SS mlockall() and munlockall()
.BR mlockall ()
locks all pages mapped into the address space of the
calling process.
This includes the pages of the code, data and stack
segment, as well as shared libraries, user space kernel data, shared
memory, and memory-mapped files.
All mapped pages are guaranteed
to be resident in RAM when the call returns successfully;
the pages are guaranteed to stay in RAM until later unlocked.

The
.I flags
argument is constructed as the bitwise OR of one or more of the
following constants:
.TP 1.2i
.B MCL_CURRENT
Lock all pages which are currently mapped into the address space of
the process.
.TP
.B MCL_FUTURE
Lock all pages which will become mapped into the address space of the
process in the future.
These could be for instance new pages required
by a growing heap and stack as well as new memory-mapped files or
shared memory regions.
.PP
If
.B MCL_FUTURE
has been specified, then a later system call (e.g.,
.BR mmap (2),
.BR sbrk (2),
.BR malloc (3)),
may fail if it would cause the number of locked bytes to exceed
the permitted maximum (see below).
In the same circumstances, stack growth may likewise fail:
the kernel will deny stack expansion and deliver a
.B SIGSEGV
signal to the process.

.BR munlockall ()
unlocks all pages mapped into the address space of the
calling process.
.SH RETURN VALUE
On success, these system calls return 0.
On error, \-1 is returned,
.I errno
is set appropriately, and no changes are made to any locks in the
address space of the process.
.SH ERRORS
.TP
.B ENOMEM
(Linux 2.6.9 and later) the caller had a nonzero
.B RLIMIT_MEMLOCK
soft resource limit, but tried to lock more memory than the limit
permitted.
This limit is not enforced if the process is privileged
.RB ( CAP_IPC_LOCK ).
.TP
.B ENOMEM
(Linux 2.4 and earlier) the calling process tried to lock more than
half of RAM.
.\" In the case of mlock(), this check is somewhat buggy: it doesn't
.\" take into account whether the to-be-locked range overlaps with
.\" already locked pages.  Thus, suppose we allocate
.\" (num_physpages / 4 + 1) of memory, and lock those pages once using
.\" mlock(), and then lock the *same* page range a second time.
.\" In the case, the second mlock() call will fail, since the check
.\" calculates that the process is trying to lock (num_physpages / 2 + 2)
.\" pages, which of course is not true.  (MTK, Nov 04, kernel 2.4.28)
.TP
.B EPERM
The caller is not privileged, but needs privilege
.RB ( CAP_IPC_LOCK )
to perform the requested operation.
.\"SVr4 documents an additional EAGAIN error code.
.LP
For
.BR mlock ()
and
.BR munlock ():
.TP
.B EAGAIN
Some or all of the specified address range could not be locked.
.TP
.B EINVAL
The result of the addition
.IR start + len
was less than
.IR start
(e.g., the addition may have resulted in an overflow).
.TP
.B EINVAL
(Not on Linux)
.I addr
was not a multiple of the page size.
.TP
.B ENOMEM
Some of the specified address range does not correspond to mapped
pages in the address space of the process.
.LP
For
.BR mlockall ():
.TP
.B EINVAL
Unknown \fIflags\fP were specified.
.LP
For
.BR munlockall ():
.TP
.B EPERM
(Linux 2.6.8 and earlier) The caller was not privileged
.RB ( CAP_IPC_LOCK ).
.SH CONFORMING TO
POSIX.1-2001, SVr4.
.SH AVAILABILITY
On POSIX systems on which
.BR mlock ()
and
.BR munlock ()
are available,
.B _POSIX_MEMLOCK_RANGE
is defined in \fI<unistd.h>\fP and the number of bytes in a page
can be determined from the constant
.B PAGESIZE
(if defined) in \fI<limits.h>\fP or by calling
.IR sysconf(_SC_PAGESIZE) .

On POSIX systems on which
.BR mlockall ()
and
.BR munlockall ()
are available,
.B _POSIX_MEMLOCK
is defined in \fI<unistd.h>\fP to a value greater than 0.
(See also
.BR sysconf (3).)
.\" POSIX.1-2001: It shall be defined to -1 or 0 or 200112L.
.\" -1: unavailable, 0: ask using sysconf().
.\" glibc defines it to 1.
.SH NOTES
Memory locking has two main applications: real-time algorithms and
high-security data processing.
Real-time applications require
deterministic timing, and, like scheduling, paging is one major cause
of unexpected program execution delays.
Real-time applications will
usually also switch to a real-time scheduler with
.BR sched_setscheduler (2).
Cryptographic security software often handles critical bytes like
passwords or secret keys as data structures.
As a result of paging,
these secrets could be transferred onto a persistent swap store medium,
where they might be accessible to the enemy long after the security
software has erased the secrets in RAM and terminated.
(But be aware that the suspend mode on laptops and some desktop
computers will save a copy of the system's RAM to disk, regardless
of memory locks.)

Real-time processes that are using
.BR mlockall ()
to prevent delays on page faults should reserve enough
locked stack pages before entering the time-critical section,
so that no page fault can be caused by function calls.
This can be achieved by calling a function that allocates a
sufficiently large automatic variable (an array) and writes to the
memory occupied by this array in order to touch these stack pages.
This way, enough pages will be mapped for the stack and can be
locked into RAM.
The dummy writes ensure that not even copy-on-write
page faults can occur in the critical section.

Memory locks are not inherited by a child created via
.BR fork (2)
and are automatically removed (unlocked) during an
.BR execve (2)
or when the process terminates.
The
.BR mlockall ()
.B MCL_FUTURE
setting is not inherited by a child created via
.BR fork (2)
and is cleared during an
.BR execve (2).

The memory lock on an address range is automatically removed
if the address range is unmapped via
.BR munmap (2).

Memory locks do not stack, that is, pages which have been locked several times
by calls to
.BR mlock ()
or
.BR mlockall ()
will be unlocked by a single call to
.BR munlock ()
for the corresponding range or by
.BR munlockall ().
Pages which are mapped to several locations or by several processes stay
locked into RAM as long as they are locked at least at one location or by
at least one process.
.SS Linux notes
Under Linux,
.BR mlock ()
and
.BR munlock ()
automatically round
.I addr
down to the nearest page boundary.
However, POSIX.1-2001 allows an implementation to require that
.I addr
is page aligned, so portable applications should ensure this.

The
.I VmLck
field of the Linux-specific
.I /proc/PID/status
file shows how many kilobytes of memory the process with ID
.I PID
has locked using
.BR mlock (),
.BR mlockall (),
and
.BR mmap (2)
.BR MAP_LOCKED .
.SS Limits and permissions
In Linux 2.6.8 and earlier,
a process must be privileged
.RB ( CAP_IPC_LOCK )
in order to lock memory and the
.B RLIMIT_MEMLOCK
soft resource limit defines a limit on how much memory the process may lock.

Since Linux 2.6.9, no limits are placed on the amount of memory
that a privileged process can lock and the
.B RLIMIT_MEMLOCK
soft resource limit instead defines a limit on how much memory an
unprivileged process may lock.
.SH BUGS
In the 2.4 series Linux kernels up to and including 2.4.17,
a bug caused the
.BR mlockall ()
.B MCL_FUTURE
flag to be inherited across a
.BR fork (2).
This was rectified in kernel 2.4.18.

Since kernel 2.6.9, if a privileged process calls
.I mlockall(MCL_FUTURE)
and later drops privileges (loses the
.B CAP_IPC_LOCK
capability by, for example,
setting its effective UID to a nonzero value),
then subsequent memory allocations (e.g.,
.BR mmap (2),
.BR brk (2))
will fail if the
.B RLIMIT_MEMLOCK
resource limit is encountered.
.\" See the following LKML thread:
.\" http://marc.theaimsgroup.com/?l=linux-kernel&m=113801392825023&w=2
.\" "Rationale for RLIMIT_MEMLOCK"
.\" 23 Jan 2006
.SH SEE ALSO
.BR mmap (2),
.BR setrlimit (2),
.BR shmctl (2),
.BR sysconf (3),
.BR proc (5),
.BR capabilities (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 1996 Andries Brouwer <aeb@cwi.nl>
.\" and Copyright (C) 2006, 2007 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified 1997-01-31 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified 2000-03-25 by Jim Van Zandt <jrv@vanzandt.mv.com>
.\" Modified 2001-10-04 by John Levon <moz@compsoc.man.ac.uk>
.\" Modified 2003-02-02 by Andi Kleen <ak@muc.de>
.\" Modified 2003-05-21 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"	MAP_LOCKED works from 2.5.37
.\" Modified 2004-06-17 by Michael Kerrisk <mtk.manpages@gmail.com>
.\" Modified 2004-09-11 by aeb
.\" Modified 2004-12-08, from Eric Estievenart <eric.estievenart@free.fr>
.\" Modified 2004-12-08, mtk, formatting tidy-ups
.\" Modified 2006-12-04, mtk, various parts rewritten
.\" 2007-07-10, mtk, Added an example program.
.\" 2008-11-18, mtk, document MAP_STACK
.\"
.TH MMAP 2 2015-05-07 "Linux" "Linux Programmer's Manual"
.SH NAME
mmap, munmap \- map or unmap files or devices into memory
.SH SYNOPSIS
.nf
.B #include <sys/mman.h>
.sp
.BI "void *mmap(void *" addr ", size_t " length \
", int " prot ", int " flags ,
.BI "           int " fd ", off_t " offset );
.BI "int munmap(void *" addr ", size_t " length );
.fi

See NOTES for information on feature test macro requirements.
.SH DESCRIPTION
.BR mmap ()
creates a new mapping in the virtual address space of
the calling process.
The starting address for the new mapping is specified in
.IR addr .
The
.I length
argument specifies the length of the mapping.

If
.I addr
is NULL,
then the kernel chooses the address at which to create the mapping;
this is the most portable method of creating a new mapping.
If
.I addr
is not NULL,
then the kernel takes it as a hint about where to place the mapping;
on Linux, the mapping will be created at a nearby page boundary.
.\" Before Linux 2.6.24, the address was rounded up to the next page
.\" boundary; since 2.6.24, it is rounded down!
The address of the new mapping is returned as the result of the call.

The contents of a file mapping (as opposed to an anonymous mapping; see
.B MAP_ANONYMOUS
below), are initialized using
.I length
bytes starting at offset
.I offset
in the file (or other object) referred to by the file descriptor
.IR fd .
.I offset
must be a multiple of the page size as returned by
.IR sysconf(_SC_PAGE_SIZE) .
.LP
The
.I prot
argument describes the desired memory protection of the mapping
(and must not conflict with the open mode of the file).
It is either
.B PROT_NONE
or the bitwise OR of one or more of the following flags:
.TP 1.1i
.B PROT_EXEC
Pages may be executed.
.TP
.B PROT_READ
Pages may be read.
.TP
.B PROT_WRITE
Pages may be written.
.TP
.B PROT_NONE
Pages may not be accessed.
.LP
The
.I flags
argument determines whether updates to the mapping
are visible to other processes mapping the same region,
and whether updates are carried through to the underlying file.
This behavior is determined by including exactly one
of the following values in
.IR flags :
.TP 1.1i
.B MAP_SHARED
Share this mapping.
Updates to the mapping are visible to other processes that map this file,
and are carried through to the underlying file.
(To precisely control when updates are carried through
to the underlying file requires the use of
.BR msync (2).)
.TP
.B MAP_PRIVATE
Create a private copy-on-write mapping.
Updates to the mapping are not visible to other processes
mapping the same file, and are not carried through to
the underlying file.
It is unspecified whether changes made to the file after the
.BR mmap ()
call are visible in the mapped region.
.LP
Both of these flags are described in POSIX.1-2001.

In addition, zero or more of the following values can be ORed in
.IR flags :
.TP
.BR MAP_32BIT " (since Linux 2.4.20, 2.6)"
Put the mapping into the first 2 Gigabytes of the process address space.
This flag is supported only on x86-64, for 64-bit programs.
It was added to allow thread stacks to be allocated somewhere
in the first 2GB of memory,
so as to improve context-switch performance on some early
64-bit processors.
.\" See http://lwn.net/Articles/294642 "Tangled up in threads", 19 Aug 08
Modern x86-64 processors no longer have this performance problem,
so use of this flag is not required on those systems.
The
.B MAP_32BIT
flag is ignored when
.B MAP_FIXED
is set.
.TP
.B MAP_ANON
Synonym for
.BR MAP_ANONYMOUS .
Deprecated.
.TP
.B MAP_ANONYMOUS
The mapping is not backed by any file;
its contents are initialized to zero.
The
.I fd
and
.I offset
arguments are ignored;
however, some implementations require
.I fd
to be \-1 if
.B MAP_ANONYMOUS
(or
.BR MAP_ANON )
is specified,
and portable applications should ensure this.
The use of
.B MAP_ANONYMOUS
in conjunction with
.B MAP_SHARED
is supported on Linux only since kernel 2.4.
.TP
.B MAP_DENYWRITE
This flag is ignored.
.\" Introduced in 1.1.36, removed in 1.3.24.
(Long ago, it signaled that attempts to write to the underlying file
should fail with
.BR ETXTBUSY .
But this was a source of denial-of-service attacks.)
.TP
.B MAP_EXECUTABLE
This flag is ignored.
.\" Introduced in 1.1.38, removed in 1.3.24. Flag tested in proc_follow_link.
.\" (Long ago, it signaled that the underlying file is an executable.
.\" However, that information was not really used anywhere.)
.\" Linus talked about DOS related to MAP_EXECUTABLE, but he was thinking of
.\" MAP_DENYWRITE?
.TP
.B MAP_FILE
Compatibility flag.
Ignored.
.\" On some systems, this was required as the opposite of
.\" MAP_ANONYMOUS -- mtk, 1 May 2007
.TP
.B MAP_FIXED
Don't interpret
.I addr
as a hint: place the mapping at exactly that address.
.I addr
must be a multiple of the page size.
If the memory region specified by
.I addr
and
.I len
overlaps pages of any existing mapping(s), then the overlapped
part of the existing mapping(s) will be discarded.
If the specified address cannot be used,
.BR mmap ()
will fail.
Because requiring a fixed address for a mapping is less portable,
the use of this option is discouraged.
.TP
.B MAP_GROWSDOWN
Used for stacks.
Indicates to the kernel virtual memory system that the mapping
should extend downward in memory.
.TP
.BR MAP_HUGETLB " (since Linux 2.6.32)"
Allocate the mapping using "huge pages."
See the Linux kernel source file
.I Documentation/vm/hugetlbpage.txt
for further information.
.TP
.BR MAP_HUGE_2MB ", " MAP_HUGE_1GB " (since Linux 3.8)"
.\" See https://lwn.net/Articles/533499/
Used in conjunction with
.B MAP_HUGETLB
to select alternative hugetlb page sizes (respectively, 2 MB and 1 GB)
on systems that support multiple hugetlb page sizes.

More generally, the desired huge page size can be configured by encoding
the base-2 logarithm of the desired page size in the six bits at the offset
.BR MAP_HUGE_SHIFT .
(A value of zero in this bit field provides the default huge page size;
the default huge page size can be discovered vie the
.I Hugepagesize
field exposed by
.IR /proc/meminfo .)
Thus, the above two constants are defined as:

.nf
.in +4n
#define MAP_HUGE_2MB    (21 << MAP_HUGE_SHIFT)
#define MAP_HUGE_1GB    (30 << MAP_HUGE_SHIFT)
.in
.fi

The range of huge page sizes that are supported by the system
can be discovered by listing the subdirectories in
.IR /sys/kernel/mm/hugepages .
.TP
.BR MAP_LOCKED " (since Linux 2.5.37)"
Lock the pages of the mapped region into memory in the manner of
.BR mlock (2).
This flag is ignored in older kernels.
.\" If set, the mapped pages will not be swapped out.
.TP
.BR MAP_NONBLOCK " (since Linux 2.5.46)"
Only meaningful in conjunction with
.BR MAP_POPULATE .
Don't perform read-ahead:
create page tables entries only for pages
that are already present in RAM.
Since Linux 2.6.23, this flag causes
.BR MAP_POPULATE
to do nothing.
One day, the combination of
.BR MAP_POPULATE
and
.BR MAP_NONBLOCK
may be reimplemented.
.TP
.B MAP_NORESERVE
Do not reserve swap space for this mapping.
When swap space is reserved, one has the guarantee
that it is possible to modify the mapping.
When swap space is not reserved one might get
.B SIGSEGV
upon a write
if no physical memory is available.
See also the discussion of the file
.I /proc/sys/vm/overcommit_memory
in
.BR proc (5).
In kernels before 2.6, this flag had effect only for
private writable mappings.
.TP
.BR MAP_POPULATE " (since Linux 2.5.46)"
Populate (prefault) page tables for a mapping.
For a file mapping, this causes read-ahead on the file.
Later accesses to the mapping will not be blocked by page faults.
.BR MAP_POPULATE
is supported for private mappings only since Linux 2.6.23.
.TP
.BR MAP_STACK " (since Linux 2.6.27)"
Allocate the mapping at an address suitable for a process
or thread stack.
This flag is currently a no-op,
but is used in the glibc threading implementation so that
if some architectures require special treatment for stack allocations,
support can later be transparently implemented for glibc.
.\" See http://lwn.net/Articles/294642 "Tangled up in threads", 19 Aug 08
.\" commit cd98a04a59e2f94fa64d5bf1e26498d27427d5e7
.\" http://thread.gmane.org/gmane.linux.kernel/720412
.\" "pthread_create() slow for many threads; also time to revisit 64b
.\"  context switch optimization?"
.TP
.BR MAP_UNINITIALIZED " (since Linux 2.6.33)"
Don't clear anonymous pages.
This flag is intended to improve performance on embedded devices.
This flag is honored only if the kernel was configured with the
.B CONFIG_MMAP_ALLOW_UNINITIALIZED
option.
Because of the security implications,
that option is normally enabled only on embedded devices
(i.e., devices where one has complete control of the contents of user memory).
.LP
Of the above flags, only
.B MAP_FIXED
is specified in POSIX.1-2001.
However, most systems also support
.B MAP_ANONYMOUS
(or its synonym
.BR MAP_ANON ).
.LP
Some systems document the additional flags
.BR MAP_AUTOGROW ,
.BR MAP_AUTORESRV ,
.BR MAP_COPY ,
and
.BR MAP_LOCAL .
.LP
Memory mapped by
.BR mmap ()
is preserved across
.BR fork (2),
with the same attributes.
.LP
A file is mapped in multiples of the page size.
For a file that is not
a multiple of the page size, the remaining memory is zeroed when mapped,
and writes to that region are not written out to the file.
The effect of
changing the size of the underlying file of a mapping on the pages that
correspond to added or removed regions of the file is unspecified.
.SS munmap()
The
.BR munmap ()
system call deletes the mappings for the specified address range, and
causes further references to addresses within the range to generate
invalid memory references.
The region is also automatically unmapped
when the process is terminated.
On the other hand, closing the file
descriptor does not unmap the region.
.LP
The address
.I addr
must be a multiple of the page size.
All pages containing a part
of the indicated range are unmapped, and subsequent references
to these pages will generate
.BR SIGSEGV .
It is not an error if the
indicated range does not contain any mapped pages.
.SS Timestamps changes for file-backed mappings
For file-backed mappings, the
.I st_atime
field for the mapped file may be updated at any time between the
.BR mmap ()
and the corresponding unmapping; the first reference to a mapped
page will update the field if it has not been already.
.LP
The
.I st_ctime
and
.I st_mtime
field for a file mapped with
.B PROT_WRITE
and
.B MAP_SHARED
will be updated after
a write to the mapped region, and before a subsequent
.BR msync (2)
with the
.B MS_SYNC
or
.B MS_ASYNC
flag, if one occurs.
.SH RETURN VALUE
On success,
.BR mmap ()
returns a pointer to the mapped area.
On error, the value
.B MAP_FAILED
(that is,
.IR "(void\ *)\ \-1" )
is returned, and
.I errno
is set to indicate the cause of the error.

On success,
.BR munmap ()
returns 0.
On failure, it returns \-1, and
.I errno
is set to indicate the cause of the error (probably to
.BR EINVAL ).
.SH ERRORS
.TP
.B EACCES
A file descriptor refers to a non-regular file.
Or a file mapping was requested, but
.I fd
is not open for reading.
Or
.B MAP_SHARED
was requested and
.B PROT_WRITE
is set, but
.I fd
is not open in read/write
.RB ( O_RDWR )
mode.
Or
.B PROT_WRITE
is set, but the file is append-only.
.TP
.B EAGAIN
The file has been locked, or too much memory has been locked (see
.BR setrlimit (2)).
.TP
.B EBADF
.I fd
is not a valid file descriptor (and
.B MAP_ANONYMOUS
was not set).
.TP
.B EINVAL
We don't like
.IR addr ,
.IR length ,
or
.I offset
(e.g., they are too large, or not aligned on a page boundary).
.TP
.B EINVAL
(since Linux 2.6.12)
.I length
was 0.
.TP
.B EINVAL
.I flags
contained neither
.B MAP_PRIVATE
or
.BR MAP_SHARED ,
or contained both of these values.
.TP
.B ENFILE
.\" This is for shared anonymous segments
.\" [2.6.7] shmem_zero_setup()-->shmem_file_setup()-->get_empty_filp()
The system limit on the total number of open files has been reached.
.\" .TP
.\" .B ENOEXEC
.\" A file could not be mapped for reading.
.TP
.B ENODEV
The underlying filesystem of the specified file does not support
memory mapping.
.TP
.B ENOMEM
No memory is available, or the process's maximum number of mappings would
have been exceeded.
.TP
.B EPERM
The
.I prot
argument asks for
.B PROT_EXEC
but the mapped area belongs to a file on a filesystem that
was mounted no-exec.
.\" (Since 2.4.25 / 2.6.0.)
.TP
.B EPERM
The operation was prevented by a file seal; see
.BR fcntl (2).
.TP
.B ETXTBSY
.B MAP_DENYWRITE
was set but the object specified by
.I fd
is open for writing.
.TP
.B EOVERFLOW
On 32-bit architecture together with the large file extension
(i.e., using 64-bit
.IR off_t ):
the number of pages used for
.I length
plus number of pages used for
.I offset
would overflow
.I "unsigned long"
(32 bits).
.LP
Use of a mapped region can result in these signals:
.TP
.B SIGSEGV
Attempted write into a region mapped as read-only.
.TP
.B SIGBUS
Attempted access to a portion of the buffer that does not correspond
to the file (for example, beyond the end of the file, including the
case where another process has truncated the file).
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw18 lb lb
l l l.
Interface	Attribute	Value
T{
.BR mmap (),
.BR munmap ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
SVr4, 4.4BSD, POSIX.1-2001.
.\" SVr4 documents additional error codes ENXIO and ENODEV.
.\" SUSv2 documents additional error codes EMFILE and EOVERFLOW.
.SH AVAILABILITY
On POSIX systems on which
.BR mmap (),
.BR msync (2),
and
.BR munmap ()
are available,
.B _POSIX_MAPPED_FILES
is defined in \fI<unistd.h>\fP to a value greater than 0.
(See also
.BR sysconf (3).)
.\" POSIX.1-2001: It shall be defined to -1 or 0 or 200112L.
.\" -1: unavailable, 0: ask using sysconf().
.\" glibc defines it to 1.
.SH NOTES
On some hardware architectures (e.g., i386),
.B PROT_WRITE
implies
.BR PROT_READ .
It is architecture dependent whether
.B PROT_READ
implies
.B PROT_EXEC
or not.
Portable programs should always set
.B PROT_EXEC
if they intend to execute code in the new mapping.

The portable way to create a mapping is to specify
.I addr
as 0 (NULL), and omit
.B MAP_FIXED
from
.IR flags .
In this case, the system chooses the address for the mapping;
the address is chosen so as not to conflict with any existing mapping,
and will not be 0.
If the
.B MAP_FIXED
flag is specified, and
.I addr
is 0 (NULL), then the mapped address will be 0 (NULL).

Certain
.I flags
constants are defined only if either
.BR _BSD_SOURCE
or
.BR _SVID_SOURCE
is defined.
(Requiring
.BR _GNU_SOURCE
also suffices,
and requiring that macro specifically would have been more logical,
since these flags are all Linux-specific.)
The relevant flags are:
.BR MAP_32BIT ,
.BR MAP_ANONYMOUS
(and the synonym
.BR MAP_ANON ),
.BR MAP_DENYWRITE ,
.BR MAP_EXECUTABLE ,
.BR MAP_FILE ,
.BR MAP_GROWSDOWN ,
.BR MAP_HUGETLB ,
.BR MAP_LOCKED ,
.BR MAP_NONBLOCK ,
.BR MAP_NORESERVE ,
.BR MAP_POPULATE ,
and
.BR MAP_STACK .
.\"
.SS C library/kernel ABI differences
This page describes the interface provided by the glibc
.BR mmap ()
wrapper function.
Originally, this function invoked a system call of the same name.
Since kernel 2.4, that system call has been superseded by
.BR mmap2 (2),
and nowadays
.\" Since around glibc 2.1/2.2, depending on the platform.
the glibc
.BR mmap ()
wrapper function invokes
.BR mmap2 (2)
with a suitably adjusted value for
.IR offset .
.SH BUGS
On Linux there are no guarantees like those suggested above under
.BR MAP_NORESERVE .
By default, any process can be killed
at any moment when the system runs out of memory.

In kernels before 2.6.7, the
.B MAP_POPULATE
flag has effect only if
.I prot
is specified as
.BR PROT_NONE .

SUSv3 specifies that
.BR mmap ()
should fail if
.I length
is 0.
However, in kernels before 2.6.12,
.BR mmap ()
succeeded in this case: no mapping was created and the call returned
.IR addr .
Since kernel 2.6.12,
.BR mmap ()
fails with the error
.B EINVAL
for this case.

POSIX specifies that the system shall always
zero fill any partial page at the end
of the object and that system will never write any modification of the
object beyond its end.
On Linux, when you write data to such partial page after the end
of the object, the data stays in the page cache even after the file
is closed and unmapped
and even though the data is never written to the file itself,
subsequent mappings may see the modified content.
In some cases, this could be fixed by calling
.BR msync (2)
before the unmap takes place;
however, this doesn't work on tmpfs
(for example, when using POSIX shared memory interface documented in
.BR shm_overview (7)).
.SH EXAMPLE
.\" FIXME . Add an example here that uses an anonymous shared region for
.\" IPC between parent and child.
.PP
The following program prints part of the file specified in
its first command-line argument to standard output.
The range of bytes to be printed is specified via offset and length
values in the second and third command-line arguments.
The program creates a memory mapping of the required
pages of the file and then uses
.BR write (2)
to output the desired bytes.
.SS Program source
.nf
#include <sys/mman.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

#define handle_error(msg) \\
    do { perror(msg); exit(EXIT_FAILURE); } while (0)

int
main(int argc, char *argv[])
{
    char *addr;
    int fd;
    struct stat sb;
    off_t offset, pa_offset;
    size_t length;
    ssize_t s;

    if (argc < 3 || argc > 4) {
        fprintf(stderr, "%s file offset [length]\\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    fd = open(argv[1], O_RDONLY);
    if (fd == \-1)
        handle_error("open");

    if (fstat(fd, &sb) == \-1)           /* To obtain file size */
        handle_error("fstat");

    offset = atoi(argv[2]);
    pa_offset = offset & ~(sysconf(_SC_PAGE_SIZE) \- 1);
        /* offset for mmap() must be page aligned */

    if (offset >= sb.st_size) {
        fprintf(stderr, "offset is past end of file\\n");
        exit(EXIT_FAILURE);
    }

    if (argc == 4) {
        length = atoi(argv[3]);
        if (offset + length > sb.st_size)
            length = sb.st_size \- offset;
                /* Can\(aqt display bytes past end of file */

    } else {    /* No length arg ==> display to end of file */
        length = sb.st_size \- offset;
    }

    addr = mmap(NULL, length + offset \- pa_offset, PROT_READ,
                MAP_PRIVATE, fd, pa_offset);
    if (addr == MAP_FAILED)
        handle_error("mmap");

    s = write(STDOUT_FILENO, addr + offset \- pa_offset, length);
    if (s != length) {
        if (s == \-1)
            handle_error("write");

        fprintf(stderr, "partial write");
        exit(EXIT_FAILURE);
    }

    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR getpagesize (2),
.BR memfd_create (2),
.BR mincore (2),
.BR mlock (2),
.BR mmap2 (2),
.BR mprotect (2),
.BR mremap (2),
.BR msync (2),
.BR remap_file_pages (2),
.BR setrlimit (2),
.BR shmat (2),
.BR shm_open (3),
.BR shm_overview (7)

The descriptions of the following files in
.BR proc (5):
.IR /proc/[pid]/maps ,
.IR /proc/[pid]/map_files ,
and
.IR /proc/[pid]/smaps .

B.O. Gallmeister, POSIX.4, O'Reilly, pp. 128-129 and 389-391.
.\"
.\" Repeat after me: private read-only mappings are 100% equivalent to
.\" shared read-only mappings. No ifs, buts, or maybes. -- Linus
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2002, Michael Kerrisk
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified 31 Jan 2002, Michael Kerrisk <mtk.manpages@gmail.com>
.\"	Added description of mmap2
.\" Modified, 2004-11-25, mtk -- removed stray #endif in prototype
.\"
.TH MMAP2 2 2014-02-25 "Linux" "Linux Programmer's Manual"
.SH NAME
mmap2 \- map files or devices into memory
.SH SYNOPSIS
.nf
.B #include <sys/mman.h>
.sp
.BI "void *mmap2(void *" addr ", size_t " length ", int " prot ,
.BI "             int " flags ", int " fd ", off_t " pgoffset );
.fi
.SH DESCRIPTION
This is probably not the system call that you are interested in; instead, see
.BR mmap (2),
which describes the glibc wrapper function that invokes this system call.

The
.BR mmap2 ()
system call provides the same interface as
.BR mmap (2),
except that the final argument specifies the offset into the
file in 4096-byte units (instead of bytes, as is done by
.BR mmap (2)).
This enables applications that use a 32-bit
.I off_t
to map large files (up to 2^44 bytes).
.SH RETURN VALUE
On success,
.BR mmap2 ()
returns a pointer to the mapped area.
On error, \-1 is returned and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EFAULT
Problem with getting the data from user space.
.TP
.B EINVAL
(Various platforms where the page size is not 4096 bytes.)
.I "offset\ *\ 4096"
is not a multiple of the system page size.
.PP
.BR mmap2 ()
can also return any of the errors described in
.BR mmap (2).
.SH VERSIONS
.BR mmap2 ()
is available since Linux 2.3.31.
.SH CONFORMING TO
This system call is Linux-specific.
.SH NOTES
On architectures where this system call is present,
the glibc
.BR mmap ()
wrapper function invokes this system call rather than the
.BR mmap (2)
system call.

This system call does not exist on x86-64.

On ia64, the unit for
.I offset
is actually the system page size, rather than 4096 bytes.
.\" ia64 can have page sizes ranging from 4kB to 64kB.
.\" On cris, it looks like the unit might also be the page size,
.\" which is 8192 bytes. -- mtk, June 2007
.SH SEE ALSO
.BR getpagesize (2),
.BR mmap (2),
.BR mremap (2),
.BR msync (2),
.BR shm_open (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1995 Michael Chastain (mec@duracef.shout.net), 22 July 1995.
.\" Copyright (c) 2015 Andrew Lutomirski
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.TH MODIFY_LDT 2 2015-02-21 "Linux" "Linux Programmer's Manual"
.SH NAME
modify_ldt \- get or set a per-process LDT entry
.SH SYNOPSIS
.nf
.B #include <sys/types.h>
.sp
.BI "int modify_ldt(int " func ", void *" ptr ", unsigned long " bytecount );
.fi
.PP
.IR Note :
There is no glibc wrapper for this system call; see NOTES.
.SH DESCRIPTION
.BR modify_ldt ()
reads or writes the local descriptor table (LDT) for a process.
The LDT
is an array of segment descriptors that can be referenced by user code.
Linux allows processes to configure a per-process (actually per-mm) LDT.
For more information about the LDT, see the Intel Software Developer's
Manual or the AMD Architecture Programming Manual.
.PP
When
.I func
is 0,
.BR modify_ldt ()
reads the LDT into the memory pointed to by
.IR ptr .
The number of bytes read is the smaller of
.I bytecount
and the actual size of the LDT, although the kernel may act as though
the LDT is padded with additional trailing zero bytes.
On success,
.BR modify_ldt ()
will return the number of bytes read.
.PP
When
.I func
is 1 or 0x11,
.BR modify_ldt ()
modifies the LDT entry indicated by
.IR ptr\->entry_number .
.I ptr
points to a
.I user_desc
structure
and
.I bytecount
must equal the size of this structure.

The
.I user_desc
structure is defined in \fI<asm/ldt.h>\fP as:
.in +4n
.nf

struct user_desc {
    unsigned int  entry_number;
    unsigned long base_addr;
    unsigned int  limit;
    unsigned int  seg_32bit:1;
    unsigned int  contents:2;
    unsigned int  read_exec_only:1;
    unsigned int  limit_in_pages:1;
    unsigned int  seg_not_present:1;
    unsigned int  useable:1;
};
.fi
.in
.PP
In Linux 2.4 and earlier, this structure was named
.IR modify_ldt_ldt_s .
.PP
The
.I contents
field is the segment type (data, expand-down data, non-conforming code, or
conforming code).
The other fields match their descriptions in the CPU manual, although
.BR modify_ldt ()
cannot set the hardware-defined "accessed" bit described in the CPU manual.
.PP
A
.I user_desc
is considered "empty" if
.I read_exec_only
and
.I seg_not_present
are set to 1 and all of the other fields are 0.
An LDT entry can be cleared by setting it to an "empty"
.I user_desc
or, if
.I func
is 1, by setting both
.I base
and
.I limit
to 0.
.PP
A conforming code segment (i.e., one with
.IR contents==3 )
will be rejected if
.I
func
is 1 or if
.I seg_not_present
is 0.
.PP
When
.I func
is 2,
.BR modify_ldt ()
will read zeros.
This appears to be a leftover from Linux 2.4.
.SH RETURN VALUE
On success,
.BR modify_ldt ()
returns either the actual number of bytes read (for reading)
or 0 (for writing).
On failure,
.BR modify_ldt ()
returns \-1 and sets
.I errno
to indicate the error.
.SH ERRORS
.TP
.B EFAULT
.I ptr
points outside the address space.
.TP
.B EINVAL
.I ptr
is 0,
or
.I func
is 1 and
.I bytecount
is not equal to the size of the structure
.IR user_desc ,
or
.I func
is 1 or 0x11 and the new LDT entry has invalid values.
.TP
.B ENOSYS
.I func
is neither 0, 1, 2, nor 0x11.
.SH CONFORMING TO
This call is Linux-specific and should not be used in programs intended
to be portable.
.SH NOTES
Glibc does not provide a wrapper for this system call; call it using
.BR syscall (2).
.PP
.BR modify_ldt ()
should not be used for thread-local storage, as it slows down context
switches and only supports a limited number of threads.
Threading libraries should use
.BR set_thread_area (2)
or
.BR arch_prctl (2)
instead, except on extremely old kernels that do not support those system
calls.
.PP
The normal use for
.BR modify_ldt (2)
is to run legacy 16-bit or segmented 32-bit code.
Not all kernels allow 16-bit segments to be installed, however.
.PP
Even on 64-bit kernels,
.BR modify_ldt (2)
cannot be used to create a long mode (i.e., 64-bit) code segment.
The undocumented field "lm" in
.IR user_desc
is not useful, and, despite its name,
does not result in a long mode segment.
.SH BUGS
On 64-bit kernels before Linux 3.19,
.\" commit e30ab185c490e9a9381385529e0fd32f0a399495
setting the "lm" bit in
.IR user_desc
prevents the descriptor from being considered empty.
Keep in mind that the
"lm" bit does not exist in the 32-bit headers, but these buggy kernels
will still notice the bit even when set in a 32-bit process.
.SH SEE ALSO
.BR arch_prctl (2),
.BR set_thread_area (2),
.BR vm86 (2)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 1993 Rickard E. Faith <faith@cs.unc.edu>
.\" and Copyright (C) 1994 Andries E. Brouwer <aeb@cwi.nl>
.\" and Copyright (C) 2002, 2005 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified 1996-11-04 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified 2001-10-13 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"	Added note on historical behavior of MS_NOSUID
.\" Modified 2002-05-16 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"	Extensive changes and additions
.\" Modified 2002-05-27 by aeb
.\" Modified 2002-06-11 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"	Enhanced descriptions of MS_MOVE, MS_BIND, and MS_REMOUNT
.\" Modified 2004-06-17 by Michael Kerrisk <mtk.manpages@gmail.com>
.\" 2005-05-18, mtk, Added MNT_EXPIRE, plus a few other tidy-ups.
.\" 2008-10-06, mtk: move umount*() material into separate umount.2 page.
.\" 2008-10-06, mtk: Add discussion of namespaces.
.\"
.TH MOUNT 2 2015-04-19 "Linux" "Linux Programmer's Manual"
.SH NAME
mount \- mount filesystem
.SH SYNOPSIS
.nf
.B "#include <sys/mount.h>"
.sp
.BI "int mount(const char *" source ", const char *" target ,
.BI "          const char *" filesystemtype ", unsigned long " mountflags ,
.BI "          const void *" data );
.fi
.SH DESCRIPTION
.BR mount ()
attaches the filesystem specified by
.I source
(which is often a device name, but can also be a directory name
or a dummy) to the directory specified by
.IR target .

Appropriate privilege (Linux: the
.B CAP_SYS_ADMIN
capability) is required to mount filesystems.

Since Linux 2.4 a single filesystem can be visible at
multiple mount points, and multiple mounts can be stacked
on the same mount point.
.\" Multiple mounts on same mount point: since 2.3.99pre7.

Values for the
.I filesystemtype
argument supported by the kernel are listed in
.I /proc/filesystems
(e.g., "minix", "ext2", "ext3", "jfs", "xfs", "reiserfs",
"msdos", "proc", "nfs", "iso9660").
Further types may become available when the appropriate modules
are loaded.

The
.I mountflags
argument may have the magic number 0xC0ED (\fBMS_MGC_VAL\fP)
in the top 16 bits (this was required in kernel versions prior to 2.4, but
is no longer required and ignored if specified),
and various mount flags
.\" (as defined in \fI<linux/fs.h>\fP for libc4 and libc5
.\" and in \fI<sys/mount.h>\fP for glibc2)
in the low order 16 bits:
.\" FIXME 2.6.15 added flags for "shared subtree" functionality:
.\"
.\"	MS_PRIVATE
.\"		All mounts are private by default. Previously shared mounts
.\"		can be re-marked PRIVATE.
.\"	MS_SHARED
.\"		Mount points that are marked SHARED propagate mount events
.\"		to one another after bieing cloned.

.\"			mount --make-rshared ==> MS_SHARED | MS_REC

.\"	MS_SLAVE
.\"		A previously shared mount point can be marked SLAVE, meaning
.\"		it receives propagated events, but does not propagate events.
.\"	MS_UNBINDABLE
.\"		mounts cannot be bound into other places, and will not be
.\"		propagated into new subtrees	
.\"
.\" These settings are visible in /proc/$$/mountinfo
.\"
.\" These need to be documented on this page.
.\" See:
.\"
.\" * Documentation/filesystems/sharedsubtree.txt
.\"
.\" * http://lwn.net/Articles/159077/
.\"
.\" * https://www.kernel.org/doc/ols/2006/ols2006v2-pages-209-222.pdf
.\"       Shared-Subtree Concept, Implementation, and Applications in Linux
.\"       Al Viro viro@ftp.linux.org.uk
.\"       Ram Pai linuxram@us.ibm.com
.\"
.\" * http://www.ibm.com/developerworks/linux/library/l-mount-namespaces/index.html
.\"       Applying mount namespaces
.\"
.\"       Uncover practical applications for advanced Linux mounts features
.\"       Serge E. Hallyn (sergeh@us.ibm.com), Software Engineer, IBM
.\"       Ram Pai (linuxram@us.ibm.com), Software Engineer, IBM
.\"       Date:  17 Sep 2007
.\"
.\" FIXME 2.6.25 Added MS_I_VERSION, which needs to be documented.
.\"
.TP
.BR MS_BIND " (Linux 2.4 onward)"
.\" since 2.4.0-test9
Perform a bind mount, making a file or a directory subtree visible at
another point within a filesystem.
Bind mounts may cross filesystem boundaries and span
.BR chroot (2)
jails.
The
.IR filesystemtype
and
.IR data
arguments are ignored.
Up until Linux 2.6.26,
.I mountflags
was also ignored
.\" with the exception of the "hidden" MS_REC mountflags bit
(the bind mount has the same mount options as
the underlying mount point).
.TP
.BR MS_DIRSYNC " (since Linux 2.5.19)"
Make directory changes on this filesystem synchronous.
(This property can be obtained for individual directories
or subtrees using
.BR chattr (1).)
.TP
.BR MS_LAZYTIME " (since Linux 4.0)"
.\" commit 0ae45f63d4ef8d8eeec49c7d8b44a1775fff13e8
.\" commit fe032c422c5ba562ba9c2d316f55e258e03259c6
.\" commit a26f49926da938f47561f386be56a83dd37a496d
Reduce on-disk updates of inode timestamps (atime, mtime, ctime)
by maintaining these changes only in memory.
The on-disk timestamps are updated only when:
.RS
.IP (a) 5
the inode needs to be updated for some change unrelated to file timestamps;
.IP (b)
the application employs
.BR fsync (2),
.BR syncfs (2),
or
.BR sync (2);
.IP (c)
an undeleted inode is evicted from memory; or
.IP (d)
more than 24 hours have passed since the inode was written to disk.
.RE
.IP
This mount option significantly reduces writes
needed to update the inode's timestamps, especially mtime and atime.
However, in the event of a system crash, the atime and mtime fields
on disk might be out of date by up to 24 hours.

Examples of workloads where this option could be of significant benefit
include frequent random writes to preallocated files,
as well as cases where the
.B MS_STRICTATIME
mount option is also enabled.
(The advantage of combining
.BR MS_STRICTATIME
and
.BR MS_LAZYTIME
is that
.BR stat (2)
will return the correctly updated atime, but the atime updates
will be flushed to disk only in the cases listed above.)
.TP
.B MS_MANDLOCK
Permit mandatory locking on files in this filesystem.
(Mandatory locking must still be enabled on a per-file basis,
as described in
.BR fcntl (2).)
.\" FIXME Describe the MS_MOVE flag in more detail
.TP
.B MS_MOVE
Move a subtree.
.I source
specifies an existing mount point and
.I target
specifies the new location.
The move is atomic: at no point is the subtree unmounted.
The
.IR filesystemtype ", " mountflags ", and " data
arguments are ignored.
.TP
.B MS_NOATIME
Do not update access times for (all types of) files on this filesystem.
.TP
.B MS_NODEV
Do not allow access to devices (special files) on this filesystem.
.TP
.B MS_NODIRATIME
Do not update access times for directories on this filesystem.
This flag provides a subset of the functionality provided by
.BR MS_NOATIME ;
that is,
.BR MS_NOATIME
implies
.BR MS_NODIRATIME .
.TP
.B MS_NOEXEC
Do not allow programs to be executed from this filesystem.
.\" (Possibly useful for a filesystem that contains non-Linux executables.
.\" Often used as a security feature, e.g., to make sure that restricted
.\" users cannot execute files uploaded using ftp or so.)
.TP
.B MS_NOSUID
Do not honor set-user-ID and set-group-ID bits when executing
programs from this filesystem.
.\" (This is a security feature to prevent users executing set-user-ID and
.\" set-group-ID programs from removable disk devices.)
.TP
.B MS_RDONLY
Mount filesystem read-only.
.\"
.\" FIXME Document MS_REC, available since 2.4.11.
.\" This flag has meaning in conjunction with MS_BIND and
.\" also with the shared subtree flags.
.TP
.BR MS_RELATIME " (since Linux 2.6.20)"
When a file on this filesystem is accessed,
update the file's last access time (atime) only if the current value
of atime is less than or equal to the file's last modification time (mtime)
or last status change time (ctime).
This option is useful for programs, such as
.BR mutt (1),
that need to know when a file has been read since it was last modified.
Since Linux 2.6.30, the kernel defaults to the behavior provided
by this flag (unless
.BR MS_NOATIME
was specified), and the
.B MS_STRICTATIME
flag is required to obtain traditional semantics.
In addition, since Linux 2.6.30,
the file's last access time is always updated if it
is more than 1 day old.
.\" Matthew Garrett notes in the patch that added this behavior
.\" that this lets utilities such as tmpreaper (which deletes
.\" files based on last access time) work correctly.
.TP
.B MS_REMOUNT
Remount an existing mount.
This allows you to change the
.I mountflags
and
.I data
of an existing mount without having to unmount and remount the filesystem.
.I target
should be the same value specified in the initial
.BR mount ()
call;
.I source
and
.I filesystemtype
are ignored.
The
.I mountflags
and
.I data
arguments should match the values used in the original
.BR mount ()
call, except for those parameters that are being deliberately changed.

The following
.I mountflags
can be changed:
.BR MS_RDONLY ,
.BR MS_SYNCHRONOUS ,
.BR MS_MANDLOCK ;
before kernel 2.6.16, the following could also be changed:
.B MS_NOATIME
and
.BR MS_NODIRATIME ;
and, additionally, before kernel 2.4.10, the following could also be changed:
.BR MS_NOSUID ,
.BR MS_NODEV ,
.BR MS_NOEXEC .
.TP
.BR MS_SILENT " (since Linux 2.6.17)"
Suppress the display of certain
.RI ( printk ())
warning messages in the kernel log.
This flag supersedes the misnamed and obsolete
.BR MS_VERBOSE
flag (available since Linux 2.4.12), which has the same meaning.
.TP
.BR MS_STRICTATIME " (since Linux 2.6.30)"
Always update the last access time (atime) when files on this
filesystem are accessed.
(This was the default behavior before Linux 2.6.30.)
Specifying this flag overrides the effect of setting the
.BR MS_NOATIME
and
.BR MS_RELATIME
flags.
.TP
.B MS_SYNCHRONOUS
Make writes on this filesystem synchronous (as though
the
.B O_SYNC
flag to
.BR open (2)
was specified for all file opens to this filesystem).
.PP
From Linux 2.4 onward, the
.BR MS_NODEV ", " MS_NOEXEC ", and " MS_NOSUID
flags are settable on a per-mount-point basis.
From kernel 2.6.16 onward,
.B MS_NOATIME
and
.B MS_NODIRATIME
are also settable on a per-mount-point basis.
The
.B MS_RELATIME
flag is also settable on a per-mount-point basis.
.PP
The
.I data
argument is interpreted by the different filesystems.
Typically it is a string of comma-separated options
understood by this filesystem.
See
.BR mount (8)
for details of the options available for each filesystem type.
.SH RETURN VALUE
On success, zero is returned.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
The error values given below result from filesystem type independent
errors.
Each filesystem type may have its own special errors and its
own special behavior.
See the Linux kernel source code for details.
.TP
.B EACCES
A component of a path was not searchable.
(See also
.BR path_resolution (7).)
Or, mounting a read-only filesystem was attempted without giving the
.B MS_RDONLY
flag.
Or, the block device
.I source
is located on a filesystem mounted with the
.B MS_NODEV
option.
.\" mtk: Probably: write permission is required for MS_BIND, with
.\" the error EPERM if not present; CAP_DAC_OVERRIDE is required.
.TP
.B EBUSY
.I source
is already mounted.
Or, it cannot be remounted read-only,
because it still holds files open for writing.
Or, it cannot be mounted on
.I target
because
.I target
is still busy (it is the working directory of some thread,
the mount point of another device, has open files, etc.).
.TP
.B EFAULT
One of the pointer arguments points outside the user address space.
.TP
.B EINVAL
.I source
had an invalid superblock.
Or, a remount
.RB ( MS_REMOUNT )
was attempted, but
.I source
was not already mounted on
.IR target .
Or, a move
.RB ( MS_MOVE )
was attempted, but
.I source
was not a mount point, or was \(aq/\(aq.
.TP
.B ELOOP
Too many links encountered during pathname resolution.
Or, a move was attempted, while
.I target
is a descendant of
.IR source .
.TP
.B EMFILE
(In case no block device is required:)
Table of dummy devices is full.
.TP
.B ENAMETOOLONG
A pathname was longer than
.BR MAXPATHLEN .
.TP
.B ENODEV
.I filesystemtype
not configured in the kernel.
.TP
.B ENOENT
A pathname was empty or had a nonexistent component.
.TP
.B ENOMEM
The kernel could not allocate a free page to copy filenames or data into.
.TP
.B ENOTBLK
.I source
is not a block device (and a device was required).
.TP
.B ENOTDIR
.IR target ,
or a prefix of
.IR source ,
is not a directory.
.TP
.B ENXIO
The major number of the block device
.I source
is out of range.
.TP
.B EPERM
The caller does not have the required privileges.
.SH VERSIONS
The definitions of
.BR MS_DIRSYNC ,
.BR MS_MOVE ,
.BR MS_REC ,
.BR MS_RELATIME ,
and
.BR MS_STRICTATIME
were added to glibc headers in version 2.12.
.\" FIXME . Definitions of the so-far-undocumented MS_UNBINDABLE, MS_PRIVATE,
.\" MS_SHARED, and MS_SLAVE were (also) only added to glibc headers in 2.12.
.SH CONFORMING TO
This function is Linux-specific and should not be used in
programs intended to be portable.
.SH NOTES
The original
.B MS_SYNC
flag was renamed
.B MS_SYNCHRONOUS
in 1.1.69
when a different
.B MS_SYNC
was added to \fI<mman.h>\fP.
.LP
Before Linux 2.4 an attempt to execute a set-user-ID or set-group-ID program
on a filesystem mounted with
.B MS_NOSUID
would fail with
.BR EPERM .
Since Linux 2.4 the set-user-ID and set-group-ID bits are
just silently ignored in this case.
.\" The change is in patch-2.4.0-prerelease.
.SS Per-process namespaces
Starting with kernel 2.4.19, Linux provides
per-process mount namespaces.
A mount namespace is the set of filesystem mounts that
are visible to a process.
Mount-point namespaces can be (and usually are)
shared between multiple processes,
and changes to the namespace (i.e., mounts and unmounts) by one process
are visible to all other processes sharing the same namespace.
(The pre-2.4.19 Linux situation can be considered as one in which
a single namespace was shared by every process on the system.)

A child process created by
.BR fork (2)
shares its parent's mount namespace;
the mount namespace is preserved across an
.BR execve (2).

A process can obtain a private mount namespace if:
it was created using the
.BR clone (2)
.BR CLONE_NEWNS
flag,
in which case its new namespace is initialized to be a
.I copy
of the namespace of the process that called
.BR clone (2);
or it calls
.BR unshare (2)
with the
.BR CLONE_NEWNS
flag,
which causes the caller's mount namespace to obtain a private copy
of the namespace that it was previously sharing with other processes,
so that future mounts and unmounts by the caller are invisible
to other processes (except child processes that the caller
subsequently creates) and vice versa.

The Linux-specific
.I /proc/PID/mounts
file exposes the list of mount points in the mount
namespace of the process with the specified ID; see
.BR proc (5)
for details.
.SH SEE ALSO
.BR umount (2),
.BR namespaces (7),
.BR path_resolution (7),
.BR lsblk (8),
.BR mount (8),
.BR umount (8)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" This manpage is Copyright (C) 2006 Silicon Graphics, Inc.
.\"                               Christoph Lameter
.\"
.\" %%%LICENSE_START(VERBATIM_TWO_PARA)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\" %%%LICENSE_END
.\"
.\" FIXME Should programs normally be using move_pages() directly, or should
.\" they rather be using interfaces in the numactl package?
.\" (e.g., compare with recommendation in mbind(2)).
.\" Does this page need to give advise on this topic?
.TH MOVE_PAGES 2 2010-06-11 "Linux" "Linux Programmer's Manual"
.SH NAME
move_pages \- move individual pages of a process to another node
.SH SYNOPSIS
.nf
.B #include <numaif.h>
.sp
.BI "long move_pages(int " pid ", unsigned long count, void **" pages ,
.BI "                const int *" nodes ", int *" status ", int " flags );
.fi
.sp
Link with \fI\-lnuma\fP.
.SH DESCRIPTION
.BR move_pages ()
moves the specified
.I pages
of the process
.I pid
to the memory nodes specified by
.IR nodes .
The result of the move is reflected in
.IR status .
The
.I flags
indicate constraints on the pages to be moved.

.I pid
is the ID of the process in which pages are to be moved.
To move pages in another process,
the caller must be privileged
.RB ( CAP_SYS_NICE )
or the real or effective user ID of the calling process must match the
real or saved-set user ID of the target process.
If
.I pid
is 0, then
.BR move_pages ()
moves pages of the calling process.

.I count
is the number of pages to move.
It defines the size of the three arrays
.IR pages ,
.IR nodes ,
and
.IR status .

.I pages
is an array of pointers to the pages that should be moved.
These are pointers that should be aligned to page boundaries.
.\" FIXME Describe the result if pointers in the 'pages' array are
.\" not aligned to page boundaries
Addresses are specified as seen by the process specified by
.IR pid .

.I nodes
is an array of integers that specify the desired location for each page.
Each element in the array is a node number.
.I nodes
can also be NULL, in which case
.BR move_pages ()
does not move any pages but instead will return the node
where each page currently resides, in the
.I status
array.
Obtaining the status of each page may be necessary to determine
pages that need to be moved.

.I status
is an array of integers that return the status of each page.
The array contains valid values only if
.BR move_pages ()
did not return an error.

.I flags
specify what types of pages to move.
.B MPOL_MF_MOVE
means that only pages that are in exclusive use by the process
are to be moved.
.B MPOL_MF_MOVE_ALL
means that pages shared between multiple processes can also be moved.
The process must be privileged
.RB ( CAP_SYS_NICE )
to use
.BR MPOL_MF_MOVE_ALL .
.SS Page states in the status array
The following values can be returned in each element of the
.I status
array.
.TP
.B 0..MAX_NUMNODES
Identifies the node on which the page resides.
.TP
.B -EACCES
The page is mapped by multiple processes and can be moved only if
.B MPOL_MF_MOVE_ALL
is specified.
.TP
.B -EBUSY
The page is currently busy and cannot be moved.
Try again later.
This occurs if a page is undergoing I/O or another kernel subsystem
is holding a reference to the page.
.TP
.B -EFAULT
This is a zero page or the memory area is not mapped by the process.
.TP
.B -EIO
Unable to write back a page.
The page has to be written back
in order to move it since the page is dirty and the filesystem
does not provide a migration function that would allow the move
of dirty pages.
.TP
.B -EINVAL
A dirty page cannot be moved.
The filesystem does not
provide a migration function and has no ability to write back pages.
.TP
.B -ENOENT
The page is not present.
.TP
.B -ENOMEM
Unable to allocate memory on target node.
.SH RETURN VALUE
On success
.BR move_pages ()
returns zero.
.\" FIXME . Is the following quite true: does the wrapper in numactl
.\" do the right thing?
On error, it returns \-1, and sets
.I errno
to indicate the error.
.SH ERRORS
.TP
.B E2BIG
Too many pages to move.
.TP
.B EACCES
.\" FIXME Clarify "current cpuset" in the description of the EACCESS error.
.\" Is that the cpuset of the caller or the target?
One of the target nodes is not allowed by the current cpuset.
.TP
.B EFAULT
Parameter array could not be accessed.
.TP
.B EINVAL
Flags other than
.B MPOL_MF_MOVE
and
.B MPOL_MF_MOVE_ALL
was specified or an attempt was made to migrate pages of a kernel thread.
.TP
.B ENODEV
One of the target nodes is not online.
.TP
.B ENOENT
No pages were found that require moving.
All pages are either already
on the target node, not present, had an invalid address or could not be
moved because they were mapped by multiple processes.
.TP
.B EPERM
The caller specified
.B MPOL_MF_MOVE_ALL
without sufficient privileges
.RB ( CAP_SYS_NICE ).
Or, the caller attempted to move pages of a process belonging
to another user but did not have privilege to do so
.RB ( CAP_SYS_NICE ).
.TP
.B ESRCH
Process does not exist.
.SH VERSIONS
.BR move_pages ()
first appeared on Linux in version 2.6.18.
.SH CONFORMING TO
This system call is Linux-specific.
.SH NOTES
For information on library support, see
.BR numa (7).

Use
.BR get_mempolicy (2)
with the
.B MPOL_F_MEMS_ALLOWED
flag to obtain the set of nodes that are allowed by
.\" FIXME Clarify "current cpuset".  Is that the cpuset of the caller
.\" or the target?
the current cpuset.
Note that this information is subject to change at any
time by manual or automatic reconfiguration of the cpuset.

Use of this function may result in pages whose location
(node) violates the memory policy established for the
specified addresses (See
.BR mbind (2))
and/or the specified process (See
.BR set_mempolicy (2)).
That is, memory policy does not constrain the destination
nodes used by
.BR move_pages ().

The
.I <numaif.h>
header is not included with glibc, but requires installing
.I libnuma-devel
or a similar package.
.SH SEE ALSO
.BR get_mempolicy (2),
.BR mbind (2),
.BR set_mempolicy (2),
.BR numa (3),
.BR numa_maps (5),
.BR cpuset (7),
.BR numa (7),
.BR migratepages (8),
.BR numastat (8)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2007 Michael Kerrisk <mtk.manpages@gmail.com>
.\" and Copyright (C) 1995 Michael Shields <shields@tembel.org>.
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and author of this work.
.\" %%%LICENSE_END
.\"
.\" Modified 1996-10-22 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified 1997-05-31 by Andries Brouwer <aeb@cwi.nl>
.\" Modified 2003-08-24 by Andries Brouwer <aeb@cwi.nl>
.\" Modified 2004-08-16 by Andi Kleen <ak@muc.de>
.\" 2007-06-02, mtk: Fairly substantial rewrites and additions, and
.\" a much improved example program.
.\"
.\" FIXME The following protection flags need documenting:
.\"         PROT_SEM
.\"         PROT_GROWSDOWN
.\"         PROT_GROWSUP
.\"         PROT_SAO (PowerPC)
.\"
.TH MPROTECT 2 2015-02-21 "Linux" "Linux Programmer's Manual"
.SH NAME
mprotect \- set protection on a region of memory
.SH SYNOPSIS
.nf
.B #include <sys/mman.h>
.sp
.BI "int mprotect(void *" addr ", size_t " len ", int " prot );
.fi
.SH DESCRIPTION
.BR mprotect ()
changes protection for the calling process's memory page(s)
containing any part of the address range in the
interval [\fIaddr\fP,\ \fIaddr\fP+\fIlen\fP\-1].
.I addr
must be aligned to a page boundary.

If the calling process tries to access memory in a manner
that violates the protection, then the kernel generates a
.B SIGSEGV
signal for the process.
.PP
.I prot
is either
.B PROT_NONE
or a bitwise-or of the other values in the following list:
.TP 1.1i
.B PROT_NONE
The memory cannot be accessed at all.
.TP
.B PROT_READ
The memory can be read.
.TP
.B PROT_WRITE
The memory can be modified.
.TP
.B PROT_EXEC
The memory can be executed.
.SH RETURN VALUE
On success,
.BR mprotect ()
returns zero.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EACCES
The memory cannot be given the specified access.
This can happen, for example, if you
.BR mmap (2)
a file to which you have read-only access, then ask
.BR mprotect ()
to mark it
.BR PROT_WRITE .
.TP
.B EINVAL
\fIaddr\fP is not a valid pointer,
or not a multiple of the system page size.
.\" Or: both PROT_GROWSUP and PROT_GROWSDOWN were specified in 'prot'.
.TP
.B ENOMEM
Internal kernel structures could not be allocated.
.TP
.B ENOMEM
Addresses in the range
.RI [ addr ,
.IR addr + len \-1]
are invalid for the address space of the process,
or specify one or more pages that are not mapped.
(Before kernel 2.4.19, the error
.BR EFAULT
was incorrectly produced for these cases.)
.SH CONFORMING TO
SVr4, POSIX.1-2001.
.\" SVr4 defines an additional error
.\" code EAGAIN. The SVr4 error conditions don't map neatly onto Linux's.
POSIX says that the behavior of
.BR mprotect ()
is unspecified if it is applied to a region of memory that
was not obtained via
.BR mmap (2).
.SH NOTES
On Linux it is always permissible to call
.BR mprotect ()
on any address in a process's address space (except for the
kernel vsyscall area).
In particular it can be used
to change existing code mappings to be writable.

Whether
.B PROT_EXEC
has any effect different from
.B PROT_READ
depends on processor architecture, kernel version, and process state.
If
.B READ_IMPLIES_EXEC
is set in the process's personality flags (see
.BR personality (2)),
specifying
.B PROT_READ
will implicitly add
.BR PROT_EXEC.

On some hardware architectures (e.g., i386),
.B PROT_WRITE
implies
.BR PROT_READ .

POSIX.1-2001 says that an implementation may permit access
other than that specified in
.IR prot ,
but at a minimum can allow write access only if
.B PROT_WRITE
has been set, and must not allow any access if
.B PROT_NONE
has been set.
.SH EXAMPLE
.\" sigaction.2 refers to this example
.PP
The program below allocates four pages of memory, makes the third
of these pages read-only, and then executes a loop that walks upward
through the allocated region modifying bytes.

An example of what we might see when running the program is the
following:

.in +4n
.nf
.RB "$" " ./a.out"
Start of region:        0x804c000
Got SIGSEGV at address: 0x804e000
.fi
.in
.SS Program source
\&
.nf
#include <unistd.h>
#include <signal.h>
#include <stdio.h>
#include <malloc.h>
#include <stdlib.h>
#include <errno.h>
#include <sys/mman.h>

#define handle_error(msg) \\
    do { perror(msg); exit(EXIT_FAILURE); } while (0)

static char *buffer;

static void
handler(int sig, siginfo_t *si, void *unused)
{
    printf("Got SIGSEGV at address: 0x%lx\\n",
            (long) si\->si_addr);
    exit(EXIT_FAILURE);
}

int
main(int argc, char *argv[])
{
    char *p;
    int pagesize;
    struct sigaction sa;

    sa.sa_flags = SA_SIGINFO;
    sigemptyset(&sa.sa_mask);
    sa.sa_sigaction = handler;
    if (sigaction(SIGSEGV, &sa, NULL) == \-1)
        handle_error("sigaction");

    pagesize = sysconf(_SC_PAGE_SIZE);
    if (pagesize == \-1)
        handle_error("sysconf");

    /* Allocate a buffer aligned on a page boundary;
       initial protection is PROT_READ | PROT_WRITE */

    buffer = memalign(pagesize, 4 * pagesize);
    if (buffer == NULL)
        handle_error("memalign");

    printf("Start of region:        0x%lx\\n", (long) buffer);

    if (mprotect(buffer + pagesize * 2, pagesize,
                PROT_READ) == \-1)
        handle_error("mprotect");

    for (p = buffer ; ; )
        *(p++) = \(aqa\(aq;

    printf("Loop completed\\n");     /* Should never happen */
    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR mmap (2),
.BR sysconf (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
'\" t
.\" Copyright (C) 2006 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH MQ_GETSETATTR 2 2012-07-13 "Linux" "Linux Programmer's Manual"
.SH NAME
mq_getsetattr \- get/set message queue attributes
.SH SYNOPSIS
.nf
.B #include <sys/types.h>
.B #include <mqueue.h>
.sp
.BI "int mq_getsetattr(mqd_t " mqdes ", struct mq_attr *" newattr ","
.BI "                 struct mq_attr *" oldattr );
.fi

.IR Note :
There is no glibc wrapper for this system call; see NOTES.
.SH DESCRIPTION
Do not use this system call.

This is the low-level system call used to implement
.BR mq_getattr (3)
and
.BR mq_setattr (3).
For an explanation of how this system call operates,
see the description of
.BR mq_setattr (3).
.SH CONFORMING TO
This interface is nonstandard; avoid its use.
.SH NOTES
Glibc does not provide a wrapper for this system call; call it using
.BR syscall (2).
(Actually, never call it unless you are writing a C library!)
.SH SEE ALSO
.BR mq_getattr (3),
.BR mq_overview (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1996 Tom Bjorkholm <tomb@mydata.se>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.\" 1996-04-11 Tom Bjorkholm <tomb@mydata.se>
.\"            First version written (1.3.86)
.\" 1996-04-12 Tom Bjorkholm <tomb@mydata.se>
.\"            Update for Linux 1.3.87 and later
.\" 2005-10-11 mtk: Added NOTES for MREMAP_FIXED; revised EINVAL text.
.\"
.TH MREMAP 2 2010-06-10 "Linux" "Linux Programmer's Manual"
.SH NAME
mremap \- remap a virtual memory address
.SH SYNOPSIS
.nf
.BR "#define _GNU_SOURCE" "         /* See feature_test_macros(7) */"
.br
.B #include <sys/mman.h>
.sp
.BI "void *mremap(void *" old_address ", size_t " old_size ,
.BI "             size_t " new_size ", int " flags ", ... /* void *" new_address " */);"
.fi
.SH DESCRIPTION
.BR mremap ()
expands (or shrinks) an existing memory mapping, potentially
moving it at the same time (controlled by the \fIflags\fP argument and
the available virtual address space).

\fIold_address\fP is the old address of the virtual memory block that you
want to expand (or shrink).
Note that \fIold_address\fP has to be page
aligned.
\fIold_size\fP is the old size of the
virtual memory block.
\fInew_size\fP is the requested size of the
virtual memory block after the resize.
An optional fifth argument,
.IR new_address ,
may be provided; see the description of
.B MREMAP_FIXED
below.

In Linux the memory is divided into pages.
A user process has (one or)
several linear virtual memory segments.
Each virtual memory segment has one
or more mappings to real memory pages (in the page table).
Each virtual memory segment has its own
protection (access rights), which may cause
a segmentation violation if the memory is accessed incorrectly (e.g.,
writing to a read-only segment).
Accessing virtual memory outside of the
segments will also cause a segmentation violation.

.BR mremap ()
uses the Linux page table scheme.
.BR mremap ()
changes the
mapping between virtual addresses and memory pages.
This can be used to implement a very efficient
.BR realloc (3).

The \fIflags\fP bit-mask argument may be 0, or include the following flag:
.TP
.B MREMAP_MAYMOVE
By default, if there is not sufficient space to expand a mapping
at its current location, then
.BR mremap ()
fails.
If this flag is specified, then the kernel is permitted to
relocate the mapping to a new virtual address, if necessary.
If the mapping is relocated,
then absolute pointers into the old mapping location
become invalid (offsets relative to the starting address of
the mapping should be employed).
.TP
.BR MREMAP_FIXED " (since Linux 2.3.31)"
This flag serves a similar purpose to the
.B MAP_FIXED
flag of
.BR mmap (2).
If this flag is specified, then
.BR mremap ()
accepts a fifth argument,
.IR "void\ *new_address" ,
which specifies a page-aligned address to which the mapping must
be moved.
Any previous mapping at the address range specified by
.I new_address
and
.I new_size
is unmapped.
If
.B MREMAP_FIXED
is specified, then
.B MREMAP_MAYMOVE
must also be specified.
.PP
If the memory segment specified by
.I old_address
and
.I old_size
is locked (using
.BR mlock (2)
or similar), then this lock is maintained when the segment is
resized and/or relocated.
As a consequence, the amount of memory locked by the process may change.
.SH RETURN VALUE
On success
.BR mremap ()
returns a pointer to the new virtual memory area.
On error, the value
.B MAP_FAILED
(that is, \fI(void\ *)\ \-1\fP) is returned,
and \fIerrno\fP is set appropriately.
.SH ERRORS
.TP
.B EAGAIN
The caller tried to expand a memory segment that is locked,
but this was not possible without exceeding the
.B RLIMIT_MEMLOCK
resource limit.
.TP
.B EFAULT
"Segmentation fault." Some address in the range
\fIold_address\fP to \fIold_address\fP+\fIold_size\fP is an invalid
virtual memory address for this process.
You can also get
.B EFAULT
even if there exist mappings that cover the
whole address space requested, but those mappings are of different types.
.TP
.B EINVAL
An invalid argument was given.
Possible causes are: \fIold_address\fP was not
page aligned; a value other than
.B MREMAP_MAYMOVE
or
.B MREMAP_FIXED
was specified in
.IR flags ;
.I new_size
was zero;
.I new_size
or
.I new_address
was invalid;
or the new address range specified by
.I new_address
and
.I new_size
overlapped the old address range specified by
.I old_address
and
.IR old_size ;
or
.B MREMAP_FIXED
was specified without also specifying
.BR MREMAP_MAYMOVE .
.TP
.B ENOMEM
The memory area cannot be expanded at the current virtual address, and the
.B MREMAP_MAYMOVE
flag is not set in \fIflags\fP.
Or, there is not enough (virtual) memory available.
.SH CONFORMING TO
This call is Linux-specific, and should not be used in programs
intended to be portable.
.\" 4.2BSD had a (never actually implemented)
.\" .BR mremap (2)
.\" call with completely different semantics.
.SH NOTES
Prior to version 2.4, glibc did not expose the definition of
.BR MREMAP_FIXED ,
and the prototype for
.BR mremap ()
did not allow for the
.I new_address
argument.
.SH SEE ALSO
.BR brk (2),
.BR getpagesize (2),
.BR getrlimit (2),
.BR mlock (2),
.BR mmap (2),
.BR sbrk (2),
.BR malloc (3),
.BR realloc (3)

Your favorite text book on operating systems
for more information on paged memory
(e.g., \fIModern Operating Systems\fP by Andrew S. Tanenbaum,
\fIInside Linux\fP by Randolf Bentson,
\fIThe Design of the UNIX Operating System\fP by Maurice J. Bach)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 Giorgio Ciucci (giorgio@crcc.it)
.\" and Copyright 2004, 2005 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified Tue Oct 22 08:11:14 EDT 1996 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified Sun Feb 18 01:59:29 2001 by Andries E. Brouwer <aeb@cwi.nl>
.\" Modified, 27 May 2004, Michael Kerrisk <mtk.manpages@gmail.com>
.\"     Added notes on CAP_IPC_OWNER requirement
.\" Modified, 17 Jun 2004, Michael Kerrisk <mtk.manpages@gmail.com>
.\"     Added notes on CAP_SYS_ADMIN requirement for IPC_SET and IPC_RMID
.\" Modified, 11 Nov 2004, Michael Kerrisk <mtk.manpages@gmail.com>
.\"	Language and formatting clean-ups
.\"	Added msqid_ds and ipc_perm structure definitions
.\" 2005-08-02, mtk: Added IPC_INFO, MSG_INFO, MSG_STAT descriptions
.\"
.TH MSGCTL 2 2014-02-24 "Linux" "Linux Programmer's Manual"
.SH NAME
msgctl \- System V message control operations
.SH SYNOPSIS
.nf
.B #include <sys/types.h>
.B #include <sys/ipc.h>
.B #include <sys/msg.h>

.BI "int msgctl(int " msqid ", int " cmd ", struct msqid_ds *" buf );
.fi
.SH DESCRIPTION
.BR msgctl ()
performs the control operation specified by
.I cmd
on the System\ V message queue with identifier
.IR msqid .
.PP
The
.I msqid_ds
data structure is defined in \fI<sys/msg.h>\fP as follows:
.nf
.in +4n

struct msqid_ds {
    struct ipc_perm msg_perm;     /* Ownership and permissions */
    time_t          msg_stime;    /* Time of last msgsnd(2) */
    time_t          msg_rtime;    /* Time of last msgrcv(2) */
    time_t          msg_ctime;    /* Time of last change */
    unsigned long   __msg_cbytes; /* Current number of bytes in
                                     queue (nonstandard) */
    msgqnum_t       msg_qnum;     /* Current number of messages
                                     in queue */
    msglen_t        msg_qbytes;   /* Maximum number of bytes
                                     allowed in queue */
    pid_t           msg_lspid;    /* PID of last msgsnd(2) */
    pid_t           msg_lrpid;    /* PID of last msgrcv(2) */
};
.in
.fi
.PP
The
.I ipc_perm
structure is defined as follows
(the highlighted fields are settable using
.BR IPC_SET ):
.PP
.nf
.in +4n
struct ipc_perm {
    key_t          __key;       /* Key supplied to msgget(2) */
    uid_t          \fBuid\fP;         /* Effective UID of owner */
    gid_t          \fBgid\fP;         /* Effective GID of owner */
    uid_t          cuid;        /* Effective UID of creator */
    gid_t          cgid;        /* Effective GID of creator */
    unsigned short \fBmode\fP;        /* Permissions */
    unsigned short __seq;       /* Sequence number */
};
.in
.fi
.PP
Valid values for
.I cmd
are:
.TP
.B IPC_STAT
Copy information from the kernel data structure associated with
.I msqid
into the
.I msqid_ds
structure pointed to by
.IR buf .
The caller must have read permission on the message queue.
.TP
.B IPC_SET
Write the values of some members of the
.I msqid_ds
structure pointed to by
.I buf
to the kernel data structure associated with this message queue,
updating also its
.I msg_ctime
member.
The following members of the structure are updated:
.IR msg_qbytes ,
.IR msg_perm.uid ,
.IR msg_perm.gid ,
and (the least significant 9 bits of)
.IR msg_perm.mode .
The effective UID of the calling process must match the owner
.RI ( msg_perm.uid )
or creator
.RI ( msg_perm.cuid )
of the message queue, or the caller must be privileged.
Appropriate privilege (Linux: the
.B CAP_SYS_RESOURCE
capability) is required to raise the
.I msg_qbytes
value beyond the system parameter
.BR MSGMNB .
.TP
.B IPC_RMID
Immediately remove the message queue,
awakening all waiting reader and writer processes (with an error
return and
.I errno
set to
.BR EIDRM ).
The calling process must have appropriate privileges
or its effective user ID must be either that of the creator or owner
of the message queue.
The third argument to
.BR msgctl ()
is ignored in this case.
.TP
.BR IPC_INFO " (Linux-specific)"
Return information about system-wide message queue limits and
parameters in the structure pointed to by
.IR buf .
This structure is of type
.I msginfo
(thus, a cast is required),
defined in
.I <sys/msg.h>
if the
.B _GNU_SOURCE
feature test macro is defined:
.nf
.in +4n

struct msginfo {
    int msgpool; /* Size in kibibytes of buffer pool
                    used to hold message data;
                    unused within kernel */
    int msgmap;  /* Maximum number of entries in message
                    map; unused within kernel */
    int msgmax;  /* Maximum number of bytes that can be
                    written in a single message */
    int msgmnb;  /* Maximum number of bytes that can be
                    written to queue; used to initialize
                    msg_qbytes during queue creation
                    (msgget(2)) */
    int msgmni;  /* Maximum number of message queues */
    int msgssz;  /* Message segment size;
                    unused within kernel */
    int msgtql;  /* Maximum number of messages on all queues
                    in system; unused within kernel */
    unsigned short int msgseg;
                 /* Maximum number of segments;
                    unused within kernel */
};

.in
.fi
The
.IR msgmni ,
.IR msgmax ,
and
.I msgmnb
settings can be changed via
.I /proc
files of the same name; see
.BR proc (5)
for details.
.TP
.BR MSG_INFO " (Linux-specific)"
Return a
.I msginfo
structure containing the same information as for
.BR IPC_INFO ,
except that the following fields are returned with information
about system resources consumed by message queues: the
.I msgpool
field returns the number of message queues that currently exist
on the system; the
.I msgmap
field returns the total number of messages in all queues
on the system; and the
.I msgtql
field returns the total number of bytes in all messages
in all queues on the system.
.TP
.BR MSG_STAT " (Linux-specific)"
Return a
.I msqid_ds
structure as for
.BR IPC_STAT .
However, the
.I msqid
argument is not a queue identifier, but instead an index into
the kernel's internal array that maintains information about
all message queues on the system.
.SH RETURN VALUE
On success,
.BR IPC_STAT ,
.BR IPC_SET ,
and
.B IPC_RMID
return 0.
A successful
.B IPC_INFO
or
.B MSG_INFO
operation returns the index of the highest used entry in the
kernel's internal array recording information about all
message queues.
(This information can be used with repeated
.B MSG_STAT
operations to obtain information about all queues on the system.)
A successful
.B MSG_STAT
operation returns the identifier of the queue whose index was given in
.IR msqid .

On error, \-1 is returned with
.I errno
indicating the error.
.SH ERRORS
On failure,
.I errno
is set to one of the following:
.TP
.B EACCES
The argument
.I cmd
is equal to
.B IPC_STAT
or
.BR MSG_STAT ,
but the calling process does not have read permission on the message queue
.IR msqid ,
and does not have the
.B CAP_IPC_OWNER
capability.
.TP
.B EFAULT
The argument
.I cmd
has the value
.B IPC_SET
or
.BR IPC_STAT ,
but the address pointed to by
.I buf
isn't accessible.
.TP
.B EIDRM
The message queue was removed.
.TP
.B EINVAL
Invalid value for
.I cmd
or
.IR msqid .
Or: for a
.B MSG_STAT
operation, the index value specified in
.I msqid
referred to an array slot that is currently unused.
.TP
.B EPERM
The argument
.I cmd
has the value
.B IPC_SET
or
.BR IPC_RMID ,
but the effective user ID of the calling process is not the creator
(as found in
.IR msg_perm.cuid )
or the owner
(as found in
.IR msg_perm.uid )
of the message queue,
and the caller is not privileged (Linux: does not have the
.B CAP_SYS_ADMIN
capability).
.TP
.B EPERM
An attempt
.RB ( IPC_SET )
was made to increase
.I msg_qbytes
beyond the system parameter
.BR MSGMNB ,
but the caller is not privileged (Linux: does not have the
.B CAP_SYS_RESOURCE
capability).
.SH CONFORMING TO
SVr4, POSIX.1-2001.
.\" SVID does not document the EIDRM error condition.
.SH NOTES
The inclusion of
.I <sys/types.h>
and
.I <sys/ipc.h>
isn't required on Linux or by any version of POSIX.
However,
some old implementations required the inclusion of these header files,
and the SVID also documented their inclusion.
Applications intended to be portable to such old systems may need
to include these header files.
.\" Like Linux, the FreeBSD man pages still document
.\" the inclusion of these header files.

The
.BR IPC_INFO ,
.B MSG_STAT
and
.B MSG_INFO
operations are used by the
.BR ipcs (1)
program to provide information on allocated resources.
In the future these may modified or moved to a
.I /proc
filesystem interface.

Various fields in the \fIstruct msqid_ds\fP were
typed as
.I short
under Linux 2.2
and have become
.I long
under Linux 2.4.
To take advantage of this,
a recompilation under glibc-2.1.91 or later should suffice.
(The kernel distinguishes old and new calls by an
.B IPC_64
flag in
.IR cmd .)
.SH SEE ALSO
.BR msgget (2),
.BR msgrcv (2),
.BR msgsnd (2),
.BR capabilities (7),
.BR mq_overview (7),
.BR svipc (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 Giorgio Ciucci <giorgio@crcc.it>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Added correction due to Nick Duffek <nsd@bbc.com>, aeb, 960426
.\" Modified Wed Nov  6 04:00:31 1996 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified, 8 Jan 2003, Michael Kerrisk, <mtk.manpages@gmail.com>
.\"	Removed EIDRM from errors - that can't happen...
.\" Modified, 27 May 2004, Michael Kerrisk <mtk.manpages@gmail.com>
.\"     Added notes on capability requirements
.\" Modified, 11 Nov 2004, Michael Kerrisk <mtk.manpages@gmail.com>
.\"	Language and formatting clean-ups
.\"	Added notes on /proc files
.\"
.TH MSGGET 2 2015-02-21 "Linux" "Linux Programmer's Manual"
.SH NAME
msgget \- get a System V message queue identifier
.SH SYNOPSIS
.nf
.B #include <sys/types.h>
.B #include <sys/ipc.h>
.B #include <sys/msg.h>

.BI "int msgget(key_t " key ", int " msgflg );
.fi
.SH DESCRIPTION
The
.BR msgget ()
system call returns the System\ V message queue identifier associated
with the value of the
.I key
argument.
A new message queue is created if
.I key
has the value
.B IPC_PRIVATE
or
.I key
isn't
.BR IPC_PRIVATE ,
no message queue with the given key
.I key
exists, and
.B IPC_CREAT
is specified in
.IR msgflg .
.PP
If
.I msgflg
specifies both
.B IPC_CREAT
and
.B IPC_EXCL
and a message queue already exists for
.IR key ,
then
.BR msgget ()
fails with
.I errno
set to
.BR EEXIST .
(This is analogous to the effect of the combination
.B O_CREAT | O_EXCL
for
.BR open (2).)
.PP
Upon creation, the least significant bits of the argument
.I msgflg
define the permissions of the message queue.
These permission bits have the same format and semantics
as the permissions specified for the
.I mode
argument of
.BR open (2).
(The execute permissions are not used.)
.PP
If a new message queue is created,
then its associated data structure
.I msqid_ds
(see
.BR msgctl (2))
is initialized as follows:
.IP
.I msg_perm.cuid
and
.I msg_perm.uid
are set to the effective user ID of the calling process.
.IP
.I msg_perm.cgid
and
.I msg_perm.gid
are set to the effective group ID of the calling process.
.IP
The least significant 9 bits of
.I msg_perm.mode
are set to the least significant 9 bits of
.IR msgflg .
.IP
.IR msg_qnum ,
.IR msg_lspid ,
.IR msg_lrpid ,
.IR msg_stime ,
and
.I msg_rtime
are set to 0.
.IP
.I msg_ctime
is set to the current time.
.IP
.I msg_qbytes
is set to the system limit
.BR MSGMNB .
.PP
If the message queue already exists the permissions are
verified, and a check is made to see if it is marked for
destruction.
.SH RETURN VALUE
If successful, the return value will be the message queue identifier (a
nonnegative integer), otherwise \-1
with
.I errno
indicating the error.
.SH ERRORS
On failure,
.I errno
is set to one of the following values:
.TP
.B EACCES
A message queue exists for
.IR key ,
but the calling process does not have permission to access the queue,
and does not have the
.B CAP_IPC_OWNER
capability.
.TP
.B EEXIST
.B IPC_CREAT
and
.BR IPC_EXCL
were specified in
.IR msgflg ,
but a message queue already exists for
.IR key .
.TP
.B ENOENT
No message queue exists for
.I key
and
.I msgflg
did not specify
.BR IPC_CREAT .
.TP
.B ENOMEM
A message queue has to be created but the system does not have enough
memory for the new data structure.
.TP
.B ENOSPC
A message queue has to be created but the system limit for the maximum
number of message queues
.RB ( MSGMNI )
would be exceeded.
.SH CONFORMING TO
SVr4, POSIX.1-2001.
.SH NOTES
The inclusion of
.I <sys/types.h>
and
.I <sys/ipc.h>
isn't required on Linux or by any version of POSIX.
However,
some old implementations required the inclusion of these header files,
and the SVID also documented their inclusion.
Applications intended to be portable to such old systems may need
to include these header files.
.\" Like Linux, the FreeBSD man pages still document
.\" the inclusion of these header files.

.B IPC_PRIVATE
isn't a flag field but a
.I key_t
type.
If this special value is used for
.IR key ,
the system call ignores everything but the least significant 9 bits of
.I msgflg
and creates a new message queue (on success).
.PP
The following is a system limit on message queue resources affecting a
.BR msgget ()
call:
.TP
.B MSGMNI
System-wide limit on the number of message queues.
Before Linux 3.19,
.\" commit 0050ee059f7fc86b1df2527aaa14ed5dc72f9973
the default value for this limit was calculated using a formula
based on available system memory.
Since Linux 3.19, the default value is 32,000.
On Linux, this limit can be read and modified via
.IR /proc/sys/kernel/msgmni .
.SS Linux notes
Until version 2.3.20, Linux would return
.B EIDRM
for a
.BR msgget ()
on a message queue scheduled for deletion.
.SH BUGS
The name choice
.B IPC_PRIVATE
was perhaps unfortunate,
.B IPC_NEW
would more clearly show its function.
.SH SEE ALSO
.BR msgctl (2),
.BR msgrcv (2),
.BR msgsnd (2),
.BR ftok (3),
.BR capabilities (7),
.BR mq_overview (7),
.BR svipc (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 Giorgio Ciucci <giorgio@crcc.it>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified Tue Oct 22 16:40:11 1996 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified Mon Jul 10 21:09:59 2000 by aeb
.\" Modified 1 Jun 2002, Michael Kerrisk <mtk.manpages@gmail.com>
.\"	Language clean-ups.
.\"	Enhanced and corrected information on msg_qbytes, MSGMNB and MSGMAX
.\"	Added note on restart behavior of msgsnd() and msgrcv()
.\"	Formatting clean-ups (argument and field names marked as .I
.\"		instead of .B)
.\" Modified, 27 May 2004, Michael Kerrisk <mtk.manpages@gmail.com>
.\"     Added notes on capability requirements
.\" Modified, 11 Nov 2004, Michael Kerrisk <mtk.manpages@gmail.com>
.\"	Language and formatting clean-ups
.\"	Added notes on /proc files
.\"
.TH MSGOP 2 2015-03-29 "Linux" "Linux Programmer's Manual"
.SH NAME
msgrcv, msgsnd \- System V message queue operations
.SH SYNOPSIS
.nf
.B #include <sys/types.h>
.B #include <sys/ipc.h>
.B #include <sys/msg.h>
.sp
.BI "int msgsnd(int " msqid ", const void *" msgp ", size_t " msgsz \
", int " msgflg );
.sp
.BI "ssize_t msgrcv(int " msqid ", void *" msgp ", size_t " msgsz \
", long " msgtyp ,
.BI "               int " msgflg );
.fi
.SH DESCRIPTION
The
.BR msgsnd ()
and
.BR msgrcv ()
system calls are used, respectively, to send messages to,
and receive messages from, a System\ V message queue.
The calling process must have write permission on the message queue
in order to send a message, and read permission to receive a message.
.PP
The
.I msgp
argument is a pointer to a caller-defined structure
of the following general form:
.in +4n
.nf

struct msgbuf {
    long mtype;       /* message type, must be > 0 */
    char mtext[1];    /* message data */
};
.fi
.in
.PP
The
.I mtext
field is an array (or other structure) whose size is specified by
.IR msgsz ,
a nonnegative integer value.
Messages of zero length (i.e., no
.I mtext
field) are permitted.
The
.I mtype
field must have a strictly positive integer value.
This value can be
used by the receiving process for message selection
(see the description of
.BR msgrcv ()
below).
.SS msgsnd()
The
.BR msgsnd ()
system call appends a copy of the message pointed to by
.I msgp
to the message queue whose identifier is specified
by
.IR msqid .
.PP
If sufficient space is available in the queue,
.BR msgsnd ()
succeeds immediately.
The queue capacity is governed by the
.I msg_qbytes
field in the associated data structure for the message queue.
During queue creation this field is initialized to
.B MSGMNB
bytes, but this limit can be modified using
.BR msgctl (2).
A message queue is considered to be full if either of the following
conditions is true:
.IP * 2
Adding a new message to the queue would cause the total number of bytes
in the queue to exceed the queue's maximum size (the
.I msg_qbytes
field).
.IP *
Adding another message to the queue would cause the total number of messages
in the queue to exceed the queue's maximum size (the
.I msg_qbytes
field).
This check is necessary to prevent an unlimited number of zero-length
messages being placed on the queue.
Although such messages contain no data,
they nevertheless consume (locked) kernel memory.
.PP
If insufficient space is available in the queue, then the default
behavior of
.BR msgsnd ()
is to block until space becomes available.
If
.B IPC_NOWAIT
is specified in
.IR msgflg ,
then the call instead fails with the error
.BR EAGAIN .

A blocked
.BR msgsnd ()
call may also fail if:
.IP * 2
the queue is removed,
in which case the system call fails with
.I errno
set to
.BR EIDRM ;
or
.IP *
a signal is caught, in which case the system call fails
with
.I errno
set to
.BR EINTR ; see
.BR signal (7).
.RB ( msgsnd ()
is never automatically restarted after being interrupted by a
signal handler, regardless of the setting of the
.B SA_RESTART
flag when establishing a signal handler.)
.PP
Upon successful completion the message queue data structure is updated
as follows:
.IP
.I msg_lspid
is set to the process ID of the calling process.
.IP
.I msg_qnum
is incremented by 1.
.IP
.I msg_stime
is set to the current time.
.SS msgrcv()
The
.BR msgrcv ()
system call removes a message from the queue specified by
.I msqid
and places it in the buffer
pointed to by
.IR msgp .
.PP
The argument
.I msgsz
specifies the maximum size in bytes for the member
.I mtext
of the structure pointed to by the
.I msgp
argument.
If the message text has length greater than
.IR msgsz ,
then the behavior depends on whether
.B MSG_NOERROR
is specified in
.IR msgflg .
If
.B MSG_NOERROR
is specified, then
the message text will be truncated (and the truncated part will be
lost); if
.B MSG_NOERROR
is not specified, then
the message isn't removed from the queue and
the system call fails returning \-1 with
.I errno
set to
.BR E2BIG .
.PP
Unless
.B MSG_COPY
is specified in
.IR msgflg
(see below),
the
.I msgtyp
argument specifies the type of message requested, as follows:
.IP * 2
If
.I msgtyp
is 0,
then the first message in the queue is read.
.IP *
If
.I msgtyp
is greater than 0,
then the first message in the queue of type
.I msgtyp
is read, unless
.B MSG_EXCEPT
was specified in
.IR msgflg ,
in which case
the first message in the queue of type not equal to
.I msgtyp
will be read.
.IP *
If
.I msgtyp
is less than 0,
then the first message in the queue with the lowest type less than or
equal to the absolute value of
.I msgtyp
will be read.
.PP
The
.I msgflg
argument is a bit mask constructed by ORing together zero or more
of the following flags:
.TP
.B IPC_NOWAIT
Return immediately if no message of the requested type is in the queue.
The system call fails with
.I errno
set to
.BR ENOMSG .
.TP
.BR MSG_COPY " (since Linux 3.8)"
.\" commit 4a674f34ba04a002244edaf891b5da7fc1473ae8
Nondestructively fetch a copy of the message at the ordinal position
in the queue specified by
.I msgtyp
(messages are considered to be numbered starting at 0).

This flag must be specified in conjunction with
.BR IPC_NOWAIT ,
with the result that, if there is no message available at the given position,
the call fails immediately with the error
.BR ENOMSG .
Because they alter the meaning of
.I msgtyp
in orthogonal ways,
.BR MSG_COPY
and
.BR MSG_EXCEPT
may not both be specified in
.IR msgflg .

The
.BR MSG_COPY
flag was added for the implementation of
the kernel checkpoint-restore facility and
is available only if the kernel was built with the
.B CONFIG_CHECKPOINT_RESTORE
option.
.TP
.B MSG_EXCEPT
Used with
.I msgtyp
greater than 0
to read the first message in the queue with message type that differs
from
.IR msgtyp .
.TP
.B MSG_NOERROR
To truncate the message text if longer than
.I msgsz
bytes.
.PP
If no message of the requested type is available and
.B IPC_NOWAIT
isn't specified in
.IR msgflg ,
the calling process is blocked until one of the following conditions occurs:
.IP * 2
A message of the desired type is placed in the queue.
.IP *
The message queue is removed from the system.
In this case, the system call fails with
.I errno
set to
.BR EIDRM .
.IP *
The calling process catches a signal.
In this case, the system call fails with
.I errno
set to
.BR EINTR .
.RB ( msgrcv ()
is never automatically restarted after being interrupted by a
signal handler, regardless of the setting of the
.B SA_RESTART
flag when establishing a signal handler.)
.PP
Upon successful completion the message queue data structure is updated
as follows:
.IP
.I msg_lrpid
is set to the process ID of the calling process.
.IP
.I msg_qnum
is decremented by 1.
.IP
.I msg_rtime
is set to the current time.
.SH RETURN VALUE
On failure both functions return \-1
with
.I errno
indicating the error,
otherwise
.BR msgsnd ()
returns 0
and
.BR msgrcv ()
returns the number of bytes actually copied into the
.I mtext
array.
.SH ERRORS
When
.BR msgsnd ()
fails,
.I errno
will be set to one among the following values:
.TP
.B EACCES
The calling process does not have write permission on the message queue,
and does not have the
.B CAP_IPC_OWNER
capability.
.TP
.B EAGAIN
The message can't be sent due to the
.I msg_qbytes
limit for the queue and
.B IPC_NOWAIT
was specified in
.IR msgflg .
.TP
.B EFAULT
The address pointed to by
.I msgp
isn't accessible.
.TP
.B EIDRM
The message queue was removed.
.TP
.B EINTR
Sleeping on a full message queue condition, the process caught a signal.
.TP
.B EINVAL
Invalid
.I msqid
value, or nonpositive
.I mtype
value, or
invalid
.I msgsz
value (less than 0 or greater than the system value
.BR MSGMAX ).
.TP
.B ENOMEM
The system does not have enough memory to make a copy of the
message pointed to by
.IR msgp .
.PP
When
.BR msgrcv ()
fails,
.I errno
will be set to one among the following values:
.TP
.B E2BIG
The message text length is greater than
.I msgsz
and
.B MSG_NOERROR
isn't specified in
.IR msgflg .
.TP
.B EACCES
The calling process does not have read permission on the message queue,
and does not have the
.B CAP_IPC_OWNER
capability.
.TP
.B EFAULT
The address pointed to by
.I msgp
isn't accessible.
.TP
.B EIDRM
While the process was sleeping to receive a message,
the message queue was removed.
.TP
.B EINTR
While the process was sleeping to receive a message,
the process caught a signal; see
.BR signal (7).
.TP
.B EINVAL
.I msgqid
was invalid, or
.I msgsz
was less than 0.
.TP
.BR EINVAL " (since Linux 3.14)"
.I msgflg
specified
.BR MSG_COPY ,
but not
.BR IPC_NOWAIT .
.TP
.BR EINVAL " (since Linux 3.14)"
.I msgflg
specified both
.BR MSG_COPY
and
.BR MSG_EXCEPT .
.TP
.B ENOMSG
.B IPC_NOWAIT
was specified in
.I msgflg
and no message of the requested type existed on the message queue.
.TP
.B ENOMSG
.B IPC_NOWAIT
and
.B MSG_COPY
were specified in
.I msgflg
and the queue contains less than
.I msgtyp
messages.
.TP
.BR ENOSYS " (since Linux 3.8)"
.I MSG_COPY
was specified in
.IR msgflg ,
and this kernel was configured without
.BR CONFIG_CHECKPOINT_RESTORE .
.SH CONFORMING TO
SVr4, POSIX.1-2001.

The
.B MSG_EXCEPT
and
.B MSG_COPY
flags are Linux-specific;
their definitions can be obtained by defining the
.B _GNU_SOURCE
.\" MSG_COPY since glibc 2.18
feature test macro.
.SH NOTES
The inclusion of
.I <sys/types.h>
and
.I <sys/ipc.h>
isn't required on Linux or by any version of POSIX.
However,
some old implementations required the inclusion of these header files,
and the SVID also documented their inclusion.
Applications intended to be portable to such old systems may need
to include these header files.
.\" Like Linux, the FreeBSD man pages still document
.\" the inclusion of these header files.

The
.I msgp
argument is declared as \fIstruct msgbuf\ *\fP in
glibc 2.0 and 2.1.
It is declared as \fIvoid\ *\fP
in glibc 2.2 and later, as required by SUSv2 and SUSv3.

The following limits on message queue resources affect the
.BR msgsnd ()
call:
.TP
.B MSGMAX
Maximum size of a message text, in bytes (default value: 8192 bytes).
On Linux, this limit can be read and modified via
.IR /proc/sys/kernel/msgmax .
.TP
.B MSGMNB
Maximum number of bytes that can be held in a message queue
(default value: 16384 bytes).
On Linux, this limit can be read and modified via
.IR /proc/sys/kernel/msgmnb .
A privileged process
(Linux: a process with the
.B CAP_SYS_RESOURCE
capability)
can increase the size of a message queue beyond
.B MSGMNB
using the
.BR msgctl (2)
.B IPC_SET
operation.
.PP
The implementation has no intrinsic system-wide limits on the
number of message headers
.RB ( MSGTQL )
and the number of bytes in the message pool
.RB ( MSGPOOL ).
.SH BUGS
In Linux 3.13 and earlier,
if
.BR msgrcv ()
was called with the
.BR MSG_COPY
flag, but without
.BR IPC_NOWAIT ,
and the message queue contained less than
.I msgtyp
messages, then the call would block until the next message is written
to the queue.
.\" http://marc.info/?l=linux-kernel&m=139048542803605&w=2
At that point, the call would return a copy of the message,
.I regardless
of whether that message was at the ordinal position
.IR msgtyp .
This bug is fixed
.\" commit 4f87dac386cc43d5525da7a939d4b4e7edbea22c
in Linux 3.14.

Specifying both
.B MSG_COPY
and
.B MSC_EXCEPT
in
.I msgflg
is a logical error (since these flags impose different interpretations on
.IR msgtyp ).
In Linux 3.13 and earlier,
.\" http://marc.info/?l=linux-kernel&m=139048542803605&w=2
this error was not diagnosed by
.BR msgrcv ().
This bug is fixed
.\" commit 4f87dac386cc43d5525da7a939d4b4e7edbea22c
in Linux 3.14.
.SH EXAMPLE
The program below demonstrates the use of
.BR msgsnd ()
and
.BR msgrcv ().

The example program is first run with the \fB\-s\fP option to send a
message and then run again with the \fB\-r\fP option to receive a
message.

The following shell session shows a sample run of the program:
.in +4n
.nf

.RB "$" " ./a.out \-s"
sent: a message at Wed Mar  4 16:25:45 2015

.RB "$" " ./a.out \-r"
message received: a message at Wed Mar  4 16:25:45 2015

.fi
.in
.SS Program source
\&
.nf
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <unistd.h>
#include <errno.h>
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/msg.h>

struct msgbuf {
    long mtype;
    char mtext[80];
};

static void
usage(char *prog_name, char *msg)
{
    if (msg != NULL)
        fputs(msg, stderr);

    fprintf(stderr, "Usage: %s [options]\\n", prog_name);
    fprintf(stderr, "Options are:\\n");
    fprintf(stderr, "\-s        send message using msgsnd()\\n");
    fprintf(stderr, "\-r        read message using msgrcv()\\n");
    fprintf(stderr, "\-t        message type (default is 1)\\n");
    fprintf(stderr, "\-k        message queue key (default is 1234)\\n");
    exit(EXIT_FAILURE);
}

static void
send_msg(int qid, int msgtype)
{
    struct msgbuf msg;
    time_t t;

    msg.mtype = msgtype;

    time(&t);
    snprintf(msg.mtext, sizeof(msg.mtext), "a message at %s",
            ctime(&t));

    if (msgsnd(qid, (void *) &msg, sizeof(msg.mtext),
                IPC_NOWAIT) == \-1) {
        perror("msgsnd error");
        exit(EXIT_FAILURE);
    }
    printf("sent: %s\\n", msg.mtext);
}

static void
get_msg(int qid, int msgtype)
{
    struct msgbuf msg;

    if (msgrcv(qid, (void *) &msg, sizeof(msg.mtext), msgtype,
               MSG_NOERROR | IPC_NOWAIT) == \-1) {
        if (errno != ENOMSG) {
            perror("msgrcv");
            exit(EXIT_FAILURE);
        }
        printf("No message available for msgrcv()\\n");
    } else
        printf("message received: %s\\n", msg.mtext);
}

int
main(int argc, char *argv[])
{
    int qid, opt;
    int mode = 0;               /* 1 = send, 2 = receive */
    int msgtype = 1;
    int msgkey = 1234;

    while ((opt = getopt(argc, argv, "srt:k:")) != \-1) {
        switch (opt) {
        case \(aqs\(aq:
            mode = 1;
            break;
        case \(aqr\(aq:
            mode = 2;
            break;
        case \(aqt\(aq:
            msgtype = atoi(optarg);
            if (msgtype <= 0)
                usage(argv[0], "\-t option must be greater than 0\\n");
            break;
        case \(aqk\(aq:
            msgkey = atoi(optarg);
            break;
        default:
            usage(argv[0], "Unrecognized option\\n");
        }
    }

    if (mode == 0)
        usage(argv[0], "must use either \-s or \-r option\\n");

    qid = msgget(msgkey, IPC_CREAT | 0666);

    if (qid == \-1) {
        perror("msgget");
        exit(EXIT_FAILURE);
    }

    if (mode == 2)
        get_msg(qid, msgtype);
    else
        send_msg(qid, msgtype);

    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR msgctl (2),
.BR msgget (2),
.BR capabilities (7),
.BR mq_overview (7),
.BR svipc (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 1996 Andries Brouwer (aeb@cwi.nl)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH MSYNC 2 2015-05-07 "Linux" "Linux Programmer's Manual"
.SH NAME
msync \- synchronize a file with a memory map
.SH SYNOPSIS
.B #include <sys/mman.h>
.sp
.BI "int msync(void *" addr ", size_t " length ", int " flags );
.SH DESCRIPTION
.BR msync ()
flushes changes made to the in-core copy of a file that was mapped
into memory using
.BR mmap (2)
back to the filesystem.
Without use of this call,
there is no guarantee that changes are written back before
.BR munmap (2)
is called.
To be more precise, the part of the file that
corresponds to the memory area starting at
.I addr
and having length
.I length
is updated.

The
.I flags
argument should specify exactly one of
.BR MS_ASYNC
and
.BR MS_SYNC ,
and may additionally include the
.B MS_INVALIDATE
bit.
These bits have the following meanings:
.TP
.B MS_ASYNC
Specifies that an update be scheduled, but the call returns immediately.
.TP
.B MS_SYNC
Requests an update and waits for it to complete.
.TP
.B MS_INVALIDATE
.\" Since Linux 2.4, this seems to be a no-op (other than the
.\" EBUSY check for VM_LOCKED).
Asks to invalidate other mappings of the same file
(so that they can be updated with the fresh values just written).
.SH RETURN VALUE
On success, zero is returned.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EBUSY
.B MS_INVALIDATE
was specified in
.IR flags ,
and a memory lock exists for the specified address range.
.TP
.B EINVAL
.I addr
is not a multiple of PAGESIZE; or any bit other than
.BR MS_ASYNC " | " MS_INVALIDATE " | " MS_SYNC
is set in
.IR flags ;
or both
.B MS_SYNC
and
.B MS_ASYNC
are set in
.IR flags .
.TP
.B ENOMEM
The indicated memory (or part of it) was not mapped.
.SH CONFORMING TO
POSIX.1-2001.

This call was introduced in Linux 1.3.21, and then used
.B EFAULT
instead of
.BR ENOMEM .
In Linux 2.4.19, this was changed to the POSIX value
.BR ENOMEM .
.SH AVAILABILITY
On POSIX systems on which
.BR msync ()
is available, both
.B _POSIX_MAPPED_FILES
and
.B _POSIX_SYNCHRONIZED_IO
are defined in
.I <unistd.h>
to a value greater than 0.
(See also
.BR sysconf (3).)
.\" POSIX.1-2001: It shall be defined to -1 or 0 or 200112L.
.\" -1: unavailable, 0: ask using sysconf().
.\" glibc defines them to 1.
.SH NOTES
According to POSIX, either
.BR MS_SYNC
or
.BR MS_ASYNC
must be specified in
.IR flags ,
and indeed failure to include one of these flags will cause
.BR msync ()
to fail on some systems.
However, Linux permits a call to
.BR msync ()
that specifies neither of these flags,
with semantics that are (currently) equivalent to specifying
.BR MS_ASYNC .
(Since Linux 2.6.19,
.\" commit 204ec841fbea3e5138168edbc3a76d46747cc987
.BR MS_ASYNC
is in fact a no-op, since the kernel properly tracks dirty
pages and flushes them to storage as necessary.)
Notwithstanding the Linux behavior,
portable, future-proof applications should ensure that they specify either
.BR MS_SYNC
or
.BR MS_ASYNC
in
.IR flags .
.SH SEE ALSO
.BR mmap (2)

B.O. Gallmeister, POSIX.4, O'Reilly, pp. 128-129 and 389-391.
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) Markus Kuhn, 1996
.\" and Copyright (C) Linux Foundation, 2008, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.\" 1996-04-10  Markus Kuhn <mskuhn@cip.informatik.uni-erlangen.de>
.\"             First version written
.\" Modified, 2004-10-24, aeb
.\" 2008-06-24, mtk
.\"     Minor rewrites of some parts.
.\"     NOTES: describe case where clock_nanosleep() can be preferable.
.\"     NOTES: describe CLOCK_REALTIME versus CLOCK_NANOSLEEP
.\"     Replace crufty discussion of HZ with a pointer to time(7).
.TH NANOSLEEP 2 2013-07-30 "Linux" "Linux Programmer's Manual"
.SH NAME
nanosleep \- high-resolution sleep
.SH SYNOPSIS
.B #include <time.h>
.sp
.BI "int nanosleep(const struct timespec *" req ", struct timespec *" rem );
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR nanosleep ():
_POSIX_C_SOURCE\ >=\ 199309L
.SH DESCRIPTION
.BR nanosleep ()
suspends the execution of the calling thread
until either at least the time specified in
.IR *req
has elapsed, or the delivery of a signal
that triggers the invocation of a handler in the calling thread or
that terminates the process.

If the call is interrupted by a signal handler,
.BR nanosleep ()
returns \-1, sets
.I errno
to
.BR EINTR ,
and writes the remaining time into the structure pointed to by
.I rem
unless
.I rem
is NULL.
The value of
.I *rem
can then be used to call
.BR nanosleep ()
again and complete the specified pause (but see NOTES).

The structure
.I timespec
is used to specify intervals of time with nanosecond precision.
It is defined as follows:
.sp
.in +4n
.nf
struct timespec {
    time_t tv_sec;        /* seconds */
    long   tv_nsec;       /* nanoseconds */
};
.fi
.in
.PP
The value of the nanoseconds field must be in the range 0 to 999999999.

Compared to
.BR sleep (3)
and
.BR usleep (3),
.BR nanosleep ()
has the following advantages:
it provides a higher resolution for specifying the sleep interval;
POSIX.1 explicitly specifies that it
does not interact with signals;
and it makes the task of resuming a sleep that has been
interrupted by a signal handler easier.
.SH RETURN VALUE
On successfully sleeping for the requested interval,
.BR nanosleep ()
returns 0.
If the call is interrupted by a signal handler or encounters an error,
then it returns \-1, with
.I errno
set to indicate the error.
.SH ERRORS
.TP
.B EFAULT
Problem with copying information from user space.
.TP
.B EINTR
The pause has been interrupted by a signal that was
delivered to the thread.
The remaining sleep time has been written
into
.I *rem
so that the thread can easily call
.BR nanosleep ()
again and continue with the pause.
.TP
.B EINVAL
The value in the
.I tv_nsec
field was not in the range 0 to 999999999 or
.I tv_sec
was negative.
.SH CONFORMING TO
POSIX.1-2001.
.SH NOTES
If the interval specified in
.I req
is not an exact multiple of the granularity underlying clock (see
.BR time (7)),
then the interval will be rounded up to the next multiple.
Furthermore, after the sleep completes, there may still be a delay before
the CPU becomes free to once again execute the calling thread.

The fact that
.BR nanosleep ()
sleeps for a relative interval can be problematic if the call
is repeatedly restarted after being interrupted by signals,
since the time between the interruptions and restarts of the call
will lead to drift in the time when the sleep finally completes.
This problem can be avoided by using
.BR clock_nanosleep (2)
with an absolute time value.

POSIX.1 specifies that
.BR nanosleep ()
should measure time against the
.B CLOCK_REALTIME
clock.
However, Linux measures the time using the
.B CLOCK_MONOTONIC
clock.
.\" See also http://thread.gmane.org/gmane.linux.kernel/696854/
.\" Subject: nanosleep() uses CLOCK_MONOTONIC, should be CLOCK_REALTIME?
.\" Date: 2008-06-22 07:35:41 GMT
This probably does not matter, since the POSIX.1 specification for
.BR clock_settime (2)
says that discontinuous changes in
.B CLOCK_REALTIME
should not affect
.BR nanosleep ():
.RS
.PP
Setting the value of the
.B CLOCK_REALTIME
clock via
.BR clock_settime (2)
shall
have no effect on threads that are blocked waiting for a relative time
service based upon this clock, including the
.BR nanosleep ()
function; ...
Consequently, these time services shall expire when the requested relative
interval elapses, independently of the new or old value of the clock.
.RE
.SS Old behavior
In order to support applications requiring much more precise pauses
(e.g., in order to control some time-critical hardware),
.BR nanosleep ()
would handle pauses of up to 2\ ms by busy waiting with microsecond
precision when called from a thread scheduled under a real-time policy
like
.B SCHED_FIFO
or
.BR SCHED_RR .
This special extension was removed in kernel 2.5.39,
hence is still present in
current 2.4 kernels, but not in 2.6 kernels.
.SH BUGS
In Linux 2.4, if
.BR nanosleep ()
is stopped by a signal (e.g.,
.BR SIGTSTP ),
then the call fails with the error
.B EINTR
after the thread is resumed by a
.B SIGCONT
signal.
If the system call is subsequently restarted,
then the time that the thread spent in the stopped state is
.I not
counted against the sleep interval.
.SH SEE ALSO
.BR clock_nanosleep (2),
.BR restart_syscall (2),
.BR sched_setscheduler (2),
.BR timer_create (2),
.BR sleep (3),
.BR usleep (3),
.BR time (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" %%%LICENSE_START(PUBLIC_DOMAIN)
.\" This text is in the public domain.
.\" %%%LICENSE_END
.\"
.\" FIXME . The description of nfsservctl() on this page
.\" is woefully thin.
.\"
.TH NFSSERVCTL 2 2015-05-07 "Linux" "Linux Programmer's Manual"
.SH NAME
nfsservctl \- syscall interface to kernel nfs daemon
.SH SYNOPSIS
.nf
.B #include <linux/nfsd/syscall.h>
.sp
.BI "long nfsservctl(int " cmd ", struct nfsctl_arg *" argp ,
.BI "                union nfsctl_res *" resp );
.fi
.SH DESCRIPTION
.IR Note :
Since Linux 3.1, this system call no longer exists.
It has been replaced by a set of files in the
.I nfsd
filesystem; see
.BR nfsd (7).

.nf
/*
 * These are the commands understood by nfsctl().
 */
#define NFSCTL_SVC          0    /* This is a server process. */
#define NFSCTL_ADDCLIENT    1    /* Add an NFS client. */
#define NFSCTL_DELCLIENT    2    /* Remove an NFS client. */
#define NFSCTL_EXPORT       3    /* Export a filesystem. */
#define NFSCTL_UNEXPORT     4    /* Unexport a filesystem. */
#define NFSCTL_UGIDUPDATE   5    /* Update a client's UID/GID map
                                    (only in Linux 2.4.x and earlier). */
#define NFSCTL_GETFH        6    /* Get a file handle (used by mountd)
                                    (only in Linux 2.4.x and earlier). */

struct nfsctl_arg {
    int                       ca_version;     /* safeguard */
    union {
        struct nfsctl_svc     u_svc;
        struct nfsctl_client  u_client;
        struct nfsctl_export  u_export;
        struct nfsctl_uidmap  u_umap;
        struct nfsctl_fhparm  u_getfh;
        unsigned int          u_debug;
    } u;
}

union nfsctl_res {
        struct knfs_fh          cr_getfh;
        unsigned int            cr_debug;
};
.fi
.SH RETURN VALUE
On success, zero is returned.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH CONFORMING TO
This call is Linux-specific.
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1992 Drew Eckhardt <drew@cs.colorado.edu>, March 28, 1992
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified by Michael Haardt <michael@moria.de>
.\" Modified 1993-07-24 by Rik Faith <faith@cs.unc.edu>
.\" Modified 1996-11-04 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified 2001-06-04 by aeb
.\" Modified 2004-05-27 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.TH NICE 2 2014-04-28 "Linux" "Linux Programmer's Manual"
.SH NAME
nice \- change process priority
.SH SYNOPSIS
.B #include <unistd.h>
.sp
.BI "int nice(int " inc );
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR nice ():
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE
.SH DESCRIPTION
.BR nice ()
adds
.I inc
to the nice value for the calling process.
(A higher nice value means a low priority.)
Only the super\%user may specify a negative increment,
or priority increase.
The range for nice values is described in
.BR getpriority (2).
.SH RETURN VALUE
On success, the new nice value is returned (but see NOTES below).
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EPERM
The calling process attempted to increase its priority by
supplying a negative
.I inc
but has insufficient privileges.
Under Linux, the
.B CAP_SYS_NICE
capability is required.
(But see the discussion of the
.B RLIMIT_NICE
resource limit in
.BR setrlimit (2).)
.SH CONFORMING TO
SVr4, 4.3BSD, POSIX.1-2001.
However, the Linux and (g)libc
(earlier than glibc 2.2.4) return value is nonstandard, see below.
SVr4 documents an additional
.B EINVAL
error code.
.SH NOTES
SUSv2 and POSIX.1-2001 specify that
.BR nice ()
should return the new nice value.
However, the Linux system call and the
.BR nice ()
library function provided in older versions of (g)libc
(earlier than glibc 2.2.4) return 0 on success.
The new nice value can be found using
.BR getpriority (2).

Since glibc 2.2.4,
.BR nice ()
is implemented as a library function that calls
.BR getpriority (2)
to obtain the new nice value to be returned to the caller.
With this implementation,
a successful call can legitimately return \-1.
To reliably detect an error, set
.I errno
to 0 before the call, and check its value when
.BR nice ()
returns \-1.
.SH SEE ALSO
.BR nice (1),
.BR renice (1),
.BR fork (2),
.BR getpriority (2),
.BR setpriority (2),
.BR capabilities (7),
.BR sched (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" This manpage is Copyright (C) 1992 Drew Eckhardt;
.\" and Copyright (C) 1993 Michael Haardt, Ian Jackson.
.\" and Copyright (C) 2008 Greg Banks
.\" and Copyright (C) 2006, 2008, 2013, 2014 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified 1993-07-21 by Rik Faith <faith@cs.unc.edu>
.\" Modified 1994-08-21 by Michael Haardt
.\" Modified 1996-04-13 by Andries Brouwer <aeb@cwi.nl>
.\" Modified 1996-05-13 by Thomas Koenig
.\" Modified 1996-12-20 by Michael Haardt
.\" Modified 1999-02-19 by Andries Brouwer <aeb@cwi.nl>
.\" Modified 1998-11-28 by Joseph S. Myers <jsm28@hermes.cam.ac.uk>
.\" Modified 1999-06-03 by Michael Haardt
.\" Modified 2002-05-07 by Michael Kerrisk <mtk.manpages@gmail.com>
.\" Modified 2004-06-23 by Michael Kerrisk <mtk.manpages@gmail.com>
.\" 2004-12-08, mtk, reordered flags list alphabetically
.\" 2004-12-08, Martin Pool <mbp@sourcefrog.net> (& mtk), added O_NOATIME
.\" 2007-09-18, mtk, Added description of O_CLOEXEC + other minor edits
.\" 2008-01-03, mtk, with input from Trond Myklebust
.\"     <trond.myklebust@fys.uio.no> and Timo Sirainen <tss@iki.fi>
.\"     Rewrite description of O_EXCL.
.\" 2008-01-11, Greg Banks <gnb@melbourne.sgi.com>: add more detail
.\"     on O_DIRECT.
.\" 2008-02-26, Michael Haardt: Reorganized text for O_CREAT and mode
.\"
.\" FIXME . Apr 08: The next POSIX revision has O_EXEC, O_SEARCH, and
.\" O_TTYINIT.  Eventually these may need to be documented.  --mtk
.\"
.TH OPEN 2 2015-05-07 "Linux" "Linux Programmer's Manual"
.SH NAME
open, openat, creat \- open and possibly create a file
.SH SYNOPSIS
.nf
.B #include <sys/types.h>
.B #include <sys/stat.h>
.B #include <fcntl.h>
.sp
.BI "int open(const char *" pathname ", int " flags );
.BI "int open(const char *" pathname ", int " flags ", mode_t " mode );

.BI "int creat(const char *" pathname ", mode_t " mode );
.sp
.BI "int openat(int " dirfd ", const char *" pathname ", int " flags );
.BI "int openat(int " dirfd ", const char *" pathname ", int " flags \
", mode_t " mode );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR openat ():
.PD 0
.ad l
.RS 4
.TP 4
Since glibc 2.10:
_XOPEN_SOURCE\ >=\ 700 || _POSIX_C_SOURCE\ >=\ 200809L
.TP
Before glibc 2.10:
_ATFILE_SOURCE
.RE
.ad
.PD
.SH DESCRIPTION
Given a
.I pathname
for a file,
.BR open ()
returns a file descriptor, a small, nonnegative integer
for use in subsequent system calls
.RB ( read "(2), " write "(2), " lseek "(2), " fcntl "(2), etc.)."
The file descriptor returned by a successful call will be
the lowest-numbered file descriptor not currently open for the process.
.PP
By default, the new file descriptor is set to remain open across an
.BR execve (2)
(i.e., the
.B FD_CLOEXEC
file descriptor flag described in
.BR fcntl (2)
is initially disabled); the
.B O_CLOEXEC
flag, described below, can be used to change this default.
The file offset is set to the beginning of the file (see
.BR lseek (2)).
.PP
A call to
.BR open ()
creates a new
.IR "open file description" ,
an entry in the system-wide table of open files.
The open file description records the file offset and the file status flags
(see below).
A file descriptor is a reference to an open file description;
this reference is unaffected if
.I pathname
is subsequently removed or modified to refer to a different file.
For further details on open file descriptions, see NOTES.
.PP
The argument
.I flags
must include one of the following
.IR "access modes" :
.BR O_RDONLY ", " O_WRONLY ", or " O_RDWR .
These request opening the file read-only, write-only, or read/write,
respectively.

In addition, zero or more file creation flags and file status flags
can be
.RI bitwise- or 'd
in
.IR flags .
The
.I file creation flags
are
.BR O_CLOEXEC ,
.BR O_CREAT ,
.BR O_DIRECTORY ,
.BR O_EXCL ,
.BR O_NOCTTY ,
.BR O_NOFOLLOW ,
.BR O_TMPFILE ,
.BR O_TRUNC ,
and
.BR O_TTY_INIT .
The
.I file status flags
are all of the remaining flags listed below.
.\" SUSv4 divides the flags into:
.\" * Access mode
.\" * File creation
.\" * File status
.\" * Other (O_CLOEXEC, O_DIRECTORY, O_NOFOLLOW)
.\" though it's not clear what the difference between "other" and
.\" "File creation" flags is.  I raised an Aardvark to see if this
.\" can be clarified in SUSv4; 10 Oct 2008.
.\" http://thread.gmane.org/gmane.comp.standards.posix.austin.general/64/focus=67
.\" TC1 (balloted in 2013), resolved this, so that those three constants
.\" are also categorized" as file status flags.
.\"
The distinction between these two groups of flags is that
the file status flags can be retrieved and (in some cases)
modified; see
.BR fcntl (2)
for details.

The full list of file creation flags and file status flags is as follows:
.TP
.B O_APPEND
The file is opened in append mode.
Before each
.BR write (2),
the file offset is positioned at the end of the file,
as if with
.BR lseek (2).
.B O_APPEND
may lead to corrupted files on NFS filesystems if more than one process
appends data to a file at once.
.\" For more background, see
.\" http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=453946
.\" http://nfs.sourceforge.net/
This is because NFS does not support
appending to a file, so the client kernel has to simulate it, which
can't be done without a race condition.
.TP
.B O_ASYNC
Enable signal-driven I/O:
generate a signal
.RB ( SIGIO
by default, but this can be changed via
.BR fcntl (2))
when input or output becomes possible on this file descriptor.
This feature is available only for terminals, pseudoterminals,
sockets, and (since Linux 2.6) pipes and FIFOs.
See
.BR fcntl (2)
for further details.
See also BUGS, below.
.TP
.BR O_CLOEXEC " (since Linux 2.6.23)"
.\" NOTE! several other man pages refer to this text
Enable the close-on-exec flag for the new file descriptor.
Specifying this flag permits a program to avoid additional
.BR fcntl (2)
.B F_SETFD
operations to set the
.B FD_CLOEXEC
flag.

Note that the use of this flag is essential in some multithreaded programs,
because using a separate
.BR fcntl (2)
.B F_SETFD
operation to set the
.B FD_CLOEXEC
flag does not suffice to avoid race conditions
where one thread opens a file descriptor and
attempts to set its close-on-exec flag using
.BR fcntl (2)
at the same time as another thread does a
.BR fork (2)
plus
.BR execve (2).
Depending on the order of execution,
the race may lead to the file descriptor returned by
.BR open ()
being unintentionally leaked to the program executed by the child process
created by
.BR fork (2).
(This kind of race is in principle possible for any system call
that creates a file descriptor whose close-on-exec flag should be set,
and various other Linux system calls provide an equivalent of the
.BR O_CLOEXEC
flag to deal with this problem.)
.\" This flag fixes only one form of the race condition;
.\" The race can also occur with, for example, descriptors
.\" returned by accept(), pipe(), etc.
.TP
.B O_CREAT
If the file does not exist, it will be created.
The owner (user ID) of the file is set to the effective user ID
of the process.
The group ownership (group ID) is set either to
the effective group ID of the process or to the group ID of the
parent directory (depending on filesystem type and mount options,
and the mode of the parent directory; see the mount options
.I bsdgroups
and
.I sysvgroups
described in
.BR mount (8)).
.\" As at 2.6.25, bsdgroups is supported by ext2, ext3, ext4, and
.\" XFS (since 2.6.14).
.RS
.PP
.I mode
specifies the mode to use in case a new file is created.
This argument must be supplied when
.B O_CREAT
or
.B O_TMPFILE
is specified in
.IR flags ;
if neither
.B O_CREAT
nor
.B O_TMPFILE
is specified, then
.I mode
is ignored.
The effective mode is modified by the process's
.I umask
in the usual way: in the absence of a default ACL, the mode of the
created file is
.IR "(mode\ &\ ~umask)" .
Note that this mode applies only to future accesses of the
newly created file; the
.BR open ()
call that creates a read-only file may well return a read/write
file descriptor.
.PP
The following symbolic constants are provided for
.IR mode :
.TP 9
.B S_IRWXU
00700 user (file owner) has read, write, and execute permission
.TP
.B S_IRUSR
00400 user has read permission
.TP
.B S_IWUSR
00200 user has write permission
.TP
.B S_IXUSR
00100 user has execute permission
.TP
.B S_IRWXG
00070 group has read, write, and execute permission
.TP
.B S_IRGRP
00040 group has read permission
.TP
.B S_IWGRP
00020 group has write permission
.TP
.B S_IXGRP
00010 group has execute permission
.TP
.B S_IRWXO
00007 others have read, write, and execute permission
.TP
.B S_IROTH
00004 others have read permission
.TP
.B S_IWOTH
00002 others have write permission
.TP
.B S_IXOTH
00001 others have execute permission
.RE
.IP
According to POSIX, the effect when other bits are set in
.I mode
is unspecified.
On Linux, the following bits are also honored in
.IR mode :
.RS
.TP 9
.B S_ISUID
0004000 set-user-ID bit
.TP
.B S_ISGID
0002000 set-group-ID bit (see
.BR stat (2))
.TP
.B S_ISVTX
0001000 sticky bit (see
.BR stat (2))
.RE
.TP
.BR O_DIRECT " (since Linux 2.4.10)"
Try to minimize cache effects of the I/O to and from this file.
In general this will degrade performance, but it is useful in
special situations, such as when applications do their own caching.
File I/O is done directly to/from user-space buffers.
The
.B O_DIRECT
flag on its own makes an effort to transfer data synchronously,
but does not give the guarantees of the
.B O_SYNC
flag that data and necessary metadata are transferred.
To guarantee synchronous I/O,
.B O_SYNC
must be used in addition to
.BR O_DIRECT .
See NOTES below for further discussion.
.sp
A semantically similar (but deprecated) interface for block devices
is described in
.BR raw (8).
.TP
.B O_DIRECTORY
If \fIpathname\fP is not a directory, cause the open to fail.
.\" But see the following and its replies:
.\" http://marc.theaimsgroup.com/?t=112748702800001&r=1&w=2
.\" [PATCH] open: O_DIRECTORY and O_CREAT together should fail
.\" O_DIRECTORY | O_CREAT causes O_DIRECTORY to be ignored.
This flag was added in kernel version 2.1.126, to
avoid denial-of-service problems if
.BR opendir (3)
is called on a
FIFO or tape device.
.TP
.B O_DSYNC
Write operations on the file will complete according to the requirements of
synchronized I/O
.I data
integrity completion.

By the time
.BR write (2)
(and similar)
return, the output data
has been transferred to the underlying hardware,
along with any file metadata that would be required to retrieve that data
(i.e., as though each
.BR write (2)
was followed by a call to
.BR fdatasync (2)).
.IR "See NOTES below" .
.TP
.B O_EXCL
Ensure that this call creates the file:
if this flag is specified in conjunction with
.BR O_CREAT ,
and
.I pathname
already exists, then
.BR open ()
will fail.

When these two flags are specified, symbolic links are not followed:
.\" POSIX.1-2001 explicitly requires this behavior.
if
.I pathname
is a symbolic link, then
.BR open ()
fails regardless of where the symbolic link points to.

In general, the behavior of
.B O_EXCL
is undefined if it is used without
.BR O_CREAT .
There is one exception: on Linux 2.6 and later,
.B O_EXCL
can be used without
.B O_CREAT
if
.I pathname
refers to a block device.
If the block device is in use by the system (e.g., mounted),
.BR open ()
fails with the error
.BR EBUSY .

On NFS,
.B O_EXCL
is supported only when using NFSv3 or later on kernel 2.6 or later.
In NFS environments where
.B O_EXCL
support is not provided, programs that rely on it
for performing locking tasks will contain a race condition.
Portable programs that want to perform atomic file locking using a lockfile,
and need to avoid reliance on NFS support for
.BR O_EXCL ,
can create a unique file on
the same filesystem (e.g., incorporating hostname and PID), and use
.BR link (2)
to make a link to the lockfile.
If
.BR link (2)
returns 0, the lock is successful.
Otherwise, use
.BR stat (2)
on the unique file to check if its link count has increased to 2,
in which case the lock is also successful.
.TP
.B O_LARGEFILE
(LFS)
Allow files whose sizes cannot be represented in an
.I off_t
(but can be represented in an
.IR off64_t )
to be opened.
The
.B _LARGEFILE64_SOURCE
macro must be defined
(before including
.I any
header files)
in order to obtain this definition.
Setting the
.B _FILE_OFFSET_BITS
feature test macro to 64 (rather than using
.BR O_LARGEFILE )
is the preferred
method of accessing large files on 32-bit systems (see
.BR feature_test_macros (7)).
.TP
.BR O_NOATIME " (since Linux 2.6.8)"
Do not update the file last access time
.RI ( st_atime
in the inode)
when the file is
.BR read (2).
This flag is intended for use by indexing or backup programs,
where its use can significantly reduce the amount of disk activity.
This flag may not be effective on all filesystems.
One example is NFS, where the server maintains the access time.
.\" The O_NOATIME flag also affects the treatment of st_atime
.\" by mmap() and readdir(2), MTK, Dec 04.
.TP
.B O_NOCTTY
If
.I pathname
refers to a terminal device\(emsee
.BR tty (4)\(emit
will not become the process's controlling terminal even if the
process does not have one.
.TP
.B O_NOFOLLOW
If \fIpathname\fP is a symbolic link, then the open fails.
This is a FreeBSD extension, which was added to Linux in version 2.1.126.
Symbolic links in earlier components of the pathname will still be
followed.
See also
.BR O_PATH
below.
.\" The headers from glibc 2.0.100 and later include a
.\" definition of this flag; \fIkernels before 2.1.126 will ignore it if
.\" used\fP.
.TP
.BR O_NONBLOCK " or " O_NDELAY
When possible, the file is opened in nonblocking mode.
Neither the
.BR open ()
nor any subsequent operations on the file descriptor which is
returned will cause the calling process to wait.
For the handling of FIFOs (named pipes), see also
.BR fifo (7).
For a discussion of the effect of
.B O_NONBLOCK
in conjunction with mandatory file locks and with file leases, see
.BR fcntl (2).
.TP
.BR O_PATH " (since Linux 2.6.39)"
.\" commit 1abf0c718f15a56a0a435588d1b104c7a37dc9bd
.\" commit 326be7b484843988afe57566b627fb7a70beac56
.\" commit 65cfc6722361570bfe255698d9cd4dccaf47570d
.\"
.\" http://thread.gmane.org/gmane.linux.man/2790/focus=3496
.\"	Subject: Re: [PATCH] open(2): document O_PATH
.\"	Newsgroups: gmane.linux.man, gmane.linux.kernel
.\"
Obtain a file descriptor that can be used for two purposes:
to indicate a location in the filesystem tree and
to perform operations that act purely at the file descriptor level.
The file itself is not opened, and other file operations (e.g.,
.BR read (2),
.BR write (2),
.BR fchmod (2),
.BR fchown (2),
.BR fgetxattr (2),
.BR mmap (2))
fail with the error
.BR EBADF .

The following operations
.I can
be performed on the resulting file descriptor:
.RS
.IP * 3
.BR close (2);
.BR fchdir (2)
(since Linux 3.5);
.\" commit 332a2e1244bd08b9e3ecd378028513396a004a24
.BR fstat (2)
(since Linux 3.6).
.\" fstat(): commit 55815f70147dcfa3ead5738fd56d3574e2e3c1c2
.IP *
Duplicating the file descriptor
.RB ( dup (2),
.BR fcntl (2)
.BR F_DUPFD ,
etc.).
.IP *
Getting and setting file descriptor flags
.RB ( fcntl (2)
.BR F_GETFD
and
.BR F_SETFD ).
.IP *
Retrieving open file status flags using the
.BR fcntl (2)
.BR F_GETFL
operation: the returned flags will include the bit
.BR O_PATH .
.IP *
Passing the file descriptor as the
.IR dirfd
argument of
.BR openat (2)
and the other "*at()" system calls.
This includes
.BR linkat (2)
with
.BR AT_EMPTY_PATH
(or via procfs using
.BR AT_SYMLINK_FOLLOW )
even if the file is not a directory.
.IP *
Passing the file descriptor to another process via a UNIX domain socket
(see
.BR SCM_RIGHTS
in
.BR unix (7)).
.RE
.IP
When
.B O_PATH
is specified in
.IR flags ,
flag bits other than
.BR O_CLOEXEC ,
.BR O_DIRECTORY ,
and
.BR O_NOFOLLOW
are ignored.

If
.I pathname
is a symbolic link and the
.BR O_NOFOLLOW
flag is also specified,
then the call returns a file descriptor referring to the symbolic link.
This file descriptor can be used as the
.I dirfd
argument in calls to
.BR fchownat (2),
.BR fstatat (2),
.BR linkat (2),
and
.BR readlinkat (2)
with an empty pathname to have the calls operate on the symbolic link.
.TP
.B O_SYNC
Write operations on the file will complete according to the requirements of
synchronized I/O
.I file
integrity completion
(by contrast with the
synchronized I/O
.I data
integrity completion
provided by
.BR O_DSYNC .)

By the time
.BR write (2)
(and similar)
return, the output data and associated file metadata
have been transferred to the underlying hardware
(i.e., as though each
.BR write (2)
was followed by a call to
.BR fsync (2)).
.IR "See NOTES below" .
.TP
.BR O_TMPFILE " (since Linux 3.11)"
.\" commit 60545d0d4610b02e55f65d141c95b18ccf855b6e
.\" commit f4e0c30c191f87851c4a53454abb55ee276f4a7e
.\" commit bb458c644a59dbba3a1fe59b27106c5e68e1c4bd
Create an unnamed temporary file.
The
.I pathname
argument specifies a directory;
an unnamed inode will be created in that directory's filesystem.
Anything written to the resulting file will be lost when
the last file descriptor is closed, unless the file is given a name.

.B O_TMPFILE
must be specified with one of
.B O_RDWR
or
.B O_WRONLY
and, optionally,
.BR O_EXCL .
If
.B O_EXCL
is not specified, then
.BR linkat (2)
can be used to link the temporary file into the filesystem, making it
permanent, using code like the following:

.in +4n
.nf
char path[PATH_MAX];
fd = open("/path/to/dir", O_TMPFILE | O_RDWR,
                        S_IRUSR | S_IWUSR);

/* File I/O on 'fd'... */

snprintf(path, PATH_MAX,  "/proc/self/fd/%d", fd);
linkat(AT_FDCWD, path, AT_FDCWD, "/path/for/file",
                        AT_SYMLINK_FOLLOW);
.fi
.in

In this case,
the
.BR open ()
.I mode
argument determines the file permission mode, as with
.BR O_CREAT .

Specifying
.B O_EXCL
in conjunction with
.B O_TMPFILE
prevents a temporary file from being linked into the filesystem
in the above manner.
(Note that the meaning of
.B O_EXCL
in this case is different from the meaning of
.B O_EXCL
otherwise.)


There are two main use cases for
.\" Inspired by http://lwn.net/Articles/559147/
.BR O_TMPFILE :
.RS
.IP * 3
Improved
.BR tmpfile (3)
functionality: race-free creation of temporary files that
(1) are automatically deleted when closed;
(2) can never be reached via any pathname;
(3) are not subject to symlink attacks; and
(4) do not require the caller to devise unique names.
.IP *
Creating a file that is initially invisible, which is then populated
with data and adjusted to have appropriate filesystem attributes
.RB ( chown (2),
.BR chmod (2),
.BR fsetxattr (2),
etc.)
before being atomically linked into the filesystem
in a fully formed state (using
.BR linkat (2)
as described above).
.RE
.IP
.B O_TMPFILE
requires support by the underlying filesystem;
only a subset of Linux filesystems provide that support.
In the initial implementation, support was provided in
the ext2, ext3, ext4, UDF, Minix, and shmem filesystems.
XFS support was added
.\" commit 99b6436bc29e4f10e4388c27a3e4810191cc4788
.\" commit ab29743117f9f4c22ac44c13c1647fb24fb2bafe
in Linux 3.15.
.TP
.B O_TRUNC
If the file already exists and is a regular file and the access mode allows
writing (i.e., is
.B O_RDWR
or
.BR O_WRONLY )
it will be truncated to length 0.
If the file is a FIFO or terminal device file, the
.B O_TRUNC
flag is ignored.
Otherwise, the effect of
.B O_TRUNC
is unspecified.
.SS creat()
.BR creat ()
is equivalent to
.BR open ()
with
.I flags
equal to
.BR O_CREAT|O_WRONLY|O_TRUNC .
.SS openat()
The
.BR openat ()
system call operates in exactly the same way as
.BR open (),
except for the differences described here.

If the pathname given in
.I pathname
is relative, then it is interpreted relative to the directory
referred to by the file descriptor
.I dirfd
(rather than relative to the current working directory of
the calling process, as is done by
.BR open ()
for a relative pathname).

If
.I pathname
is relative and
.I dirfd
is the special value
.BR AT_FDCWD ,
then
.I pathname
is interpreted relative to the current working
directory of the calling process (like
.BR open ()).

If
.I pathname
is absolute, then
.I dirfd
is ignored.
.SH RETURN VALUE
.BR open (),
.BR openat (),
and
.BR creat ()
return the new file descriptor, or \-1 if an error occurred
(in which case,
.I errno
is set appropriately).
.SH ERRORS
.BR open (),
.BR openat (),
and
.BR creat ()
can fail with the following errors:
.TP
.B EACCES
The requested access to the file is not allowed, or search permission
is denied for one of the directories in the path prefix of
.IR pathname ,
or the file did not exist yet and write access to the parent directory
is not allowed.
(See also
.BR path_resolution (7).)
.TP
.B EDQUOT
Where
.B O_CREAT
is specified, the file does not exist, and the user's quota of disk
blocks or inodes on the filesystem has been exhausted.
.TP
.B EEXIST
.I pathname
already exists and
.BR O_CREAT " and " O_EXCL
were used.
.TP
.B EFAULT
.I pathname
points outside your accessible address space.
.TP
.B EFBIG
See
.BR EOVERFLOW .
.TP
.B EINTR
While blocked waiting to complete an open of a slow device
(e.g., a FIFO; see
.BR fifo (7)),
the call was interrupted by a signal handler; see
.BR signal (7).
.TP
.B EINVAL
The filesystem does not support the
.BR O_DIRECT
flag.
See
.BR NOTES
for more information.
.TP
.B EINVAL
Invalid value in
.\" In particular, __O_TMPFILE instead of O_TMPFILE
.IR flags .
.TP
.B EINVAL
.B O_TMPFILE
was specified in
.IR flags ,
but neither
.B O_WRONLY
nor
.B O_RDWR
was specified.
.TP
.B EISDIR
.I pathname
refers to a directory and the access requested involved writing
(that is,
.B O_WRONLY
or
.B O_RDWR
is set).
.TP
.B EISDIR
.I pathname
refers to an existing directory,
.B O_TMPFILE
and one of
.B O_WRONLY
or
.B O_RDWR
were specified in
.IR flags ,
but this kernel version does not provide the
.B O_TMPFILE
functionality.
.TP
.B ELOOP
Too many symbolic links were encountered in resolving
.IR pathname .
.TP
.B ELOOP
.I pathname
was a symbolic link, and
.I flags
specified
.BR O_NOFOLLOW
but not
.BR O_PATH .
.TP
.B EMFILE
The process already has the maximum number of files open
(see the description of
.BR RLIMIT_NOFILE
in
.BR getrlimit (2)).
.TP
.B ENAMETOOLONG
.I pathname
was too long.
.TP
.B ENFILE
The system limit on the total number of open files has been reached.
.TP
.B ENODEV
.I pathname
refers to a device special file and no corresponding device exists.
(This is a Linux kernel bug; in this situation
.B ENXIO
must be returned.)
.TP
.B ENOENT
.B O_CREAT
is not set and the named file does not exist.
Or, a directory component in
.I pathname
does not exist or is a dangling symbolic link.
.TP
.B ENOENT
.I pathname
refers to a nonexistent directory,
.B O_TMPFILE
and one of
.B O_WRONLY
or
.B O_RDWR
were specified in
.IR flags ,
but this kernel version does not provide the
.B O_TMPFILE
functionality.
.TP
.B ENOMEM
Insufficient kernel memory was available.
.TP
.B ENOSPC
.I pathname
was to be created but the device containing
.I pathname
has no room for the new file.
.TP
.B ENOTDIR
A component used as a directory in
.I pathname
is not, in fact, a directory, or \fBO_DIRECTORY\fP was specified and
.I pathname
was not a directory.
.TP
.B ENXIO
.BR O_NONBLOCK " | " O_WRONLY
is set, the named file is a FIFO, and
no process has the FIFO open for reading.
Or, the file is a device special file and no corresponding device exists.
.TP
.BR EOPNOTSUPP
The filesystem containing
.I pathname
does not support
.BR O_TMPFILE .
.TP
.B EOVERFLOW
.I pathname
refers to a regular file that is too large to be opened.
The usual scenario here is that an application compiled
on a 32-bit platform without
.I -D_FILE_OFFSET_BITS=64
tried to open a file whose size exceeds
.I (1<<31)-1
bytes;
see also
.B O_LARGEFILE
above.
This is the error specified by POSIX.1-2001;
in kernels before 2.6.24, Linux gave the error
.B EFBIG
for this case.
.\" See http://bugzilla.kernel.org/show_bug.cgi?id=7253
.\" "Open of a large file on 32-bit fails with EFBIG, should be EOVERFLOW"
.\" Reported 2006-10-03
.TP
.B EPERM
The
.B O_NOATIME
flag was specified, but the effective user ID of the caller
.\" Strictly speaking, it's the filesystem UID... (MTK)
did not match the owner of the file and the caller was not privileged
.RB ( CAP_FOWNER ).
.TP
.B EPERM
The operation was prevented by a file seal; see
.BR fcntl (2).
.TP
.B EROFS
.I pathname
refers to a file on a read-only filesystem and write access was
requested.
.TP
.B ETXTBSY
.I pathname
refers to an executable image which is currently being executed and
write access was requested.
.TP
.B EWOULDBLOCK
The
.B O_NONBLOCK
flag was specified, and an incompatible lease was held on the file
(see
.BR fcntl (2)).
.PP
The following additional errors can occur for
.BR openat ():
.TP
.B EBADF
.I dirfd
is not a valid file descriptor.
.TP
.B ENOTDIR
.I pathname
is a relative pathname and
.I dirfd
is a file descriptor referring to a file other than a directory.
.SH VERSIONS
.BR openat ()
was added to Linux in kernel 2.6.16;
library support was added to glibc in version 2.4.
.SH CONFORMING TO
.BR open (),
.BR creat ()
SVr4, 4.3BSD, POSIX.1-2001, POSIX.1-2008.

.BR openat ():
POSIX.1-2008.

The
.BR O_DIRECT ,
.BR O_NOATIME ,
.BR O_PATH ,
and
.BR O_TMPFILE
flags are Linux-specific.
One must define
.B _GNU_SOURCE
to obtain their definitions.

The
.BR O_CLOEXEC ,
.BR O_DIRECTORY ,
and
.BR O_NOFOLLOW
flags are not specified in POSIX.1-2001,
but are specified in POSIX.1-2008.
Since glibc 2.12, one can obtain their definitions by defining either
.B _POSIX_C_SOURCE
with a value greater than or equal to 200809L or
.BR _XOPEN_SOURCE
with a value greater than or equal to 700.
In glibc 2.11 and earlier, one obtains the definitions by defining
.BR _GNU_SOURCE .

As noted in
.BR feature_test_macros (7),
feature test macros such as
.BR _POSIX_C_SOURCE ,
.BR _XOPEN_SOURCE ,
and
.B _GNU_SOURCE
must be defined before including
.I any
header files.
.SH NOTES
Under Linux, the
.B O_NONBLOCK
flag indicates that one wants to open
but does not necessarily have the intention to read or write.
This is typically used to open devices in order to get a file descriptor
for use with
.BR ioctl (2).

.LP
The (undefined) effect of
.B O_RDONLY | O_TRUNC
varies among implementations.
On many systems the file is actually truncated.
.\" Linux 2.0, 2.5: truncate
.\" Solaris 5.7, 5.8: truncate
.\" Irix 6.5: truncate
.\" Tru64 5.1B: truncate
.\" HP-UX 11.22: truncate
.\" FreeBSD 4.7: truncate

Note that
.BR open ()
can open device special files, but
.BR creat ()
cannot create them; use
.BR mknod (2)
instead.

If the file is newly created, its
.IR st_atime ,
.IR st_ctime ,
.I st_mtime
fields
(respectively, time of last access, time of last status change, and
time of last modification; see
.BR stat (2))
are set
to the current time, and so are the
.I st_ctime
and
.I st_mtime
fields of the
parent directory.
Otherwise, if the file is modified because of the
.B O_TRUNC
flag, its
.I st_ctime
and
.I st_mtime
fields are set to the current time.
.\"
.\"
.SS Open file descriptions
The term open file description is the one used by POSIX to refer to the
entries in the system-wide table of open files.
In other contexts, this object is
variously also called an "open file object",
a "file handle", an "open file table entry",
or\(emin kernel-developer parlance\(ema
.IR "struct file" .

When a file descriptor is duplicated (using
.BR dup (2)
or similar),
the duplicate refers to the same open file description
as the original file descriptor,
and the two file descriptors consequently share
the file offset and file status flags.
Such sharing can also occur between processes:
a child process created via
.BR fork (2)
inherits duplicates of its parent's file descriptors,
and those duplicates refer to the same open file descriptions.

Each
.BR open (2)
of a file creates a new open file description;
thus, there may be multiple open file descriptions
corresponding to a file inode.
.\"
.\"
.SS Synchronized I/O
The POSIX.1-2008 "synchronized I/O" option
specifies different variants of synchronized I/O,
and specifies the
.BR open ()
flags
.BR O_SYNC ,
.BR O_DSYNC ,
and
.BR O_RSYNC
for controlling the behavior.
Regardless of whether an implementation supports this option,
it must at least support the use of
.BR O_SYNC
for regular files.

Linux implements
.BR O_SYNC
and
.BR O_DSYNC ,
but not
.BR O_RSYNC .
(Somewhat incorrectly, glibc defines
.BR O_RSYNC
to have the same value as
.BR O_SYNC .)

.BR O_SYNC
provides synchronized I/O
.I file
integrity completion,
meaning write operations will flush data and all associated metadata
to the underlying hardware.
.BR O_DSYNC
provides synchronized I/O
.I data
integrity completion,
meaning write operations will flush data
to the underlying hardware,
but will only flush metadata updates that are required
to allow a subsequent read operation to complete successfully.
Data integrity completion can reduce the number of disk operations
that are required for applications that don't need the guarantees
of file integrity completion.

To understand the difference between the two types of completion,
consider two pieces of file metadata:
the file last modification timestamp
.RI ( st_mtime )
and the file length.
All write operations will update the last file modification timestamp,
but only writes that add data to the end of the
file will change the file length.
The last modification timestamp is not needed to ensure that
a read completes successfully, but the file length is.
Thus,
.BR O_DSYNC
would only guarantee to flush updates to the file length metadata
(whereas
.BR O_SYNC
would also always flush the last modification timestamp metadata).

Before Linux 2.6.33, Linux implemented only the
.BR O_SYNC
flag for
.BR open ().
However, when that flag was specified,
most filesystems actually provided the equivalent of synchronized I/O
.I data
integrity completion (i.e.,
.BR O_SYNC
was actually implemented as the equivalent of
.BR O_DSYNC ).

Since Linux 2.6.33, proper
.BR O_SYNC
support is provided.
However, to ensure backward binary compatibility,
.BR O_DSYNC
was defined with the same value as the historical
.BR O_SYNC ,
and
.BR O_SYNC
was defined as a new (two-bit) flag value that includes the
.BR O_DSYNC
flag value.
This ensures that applications compiled against
new headers get at least
.BR O_DSYNC
semantics on pre-2.6.33 kernels.
.\"
.\"
.SS NFS
There are many infelicities in the protocol underlying NFS, affecting
amongst others
.BR O_SYNC " and " O_NDELAY .

On NFS filesystems with UID mapping enabled,
.BR open ()
may
return a file descriptor but, for example,
.BR read (2)
requests are denied
with \fBEACCES\fP.
This is because the client performs
.BR open ()
by checking the
permissions, but UID mapping is performed by the server upon
read and write requests.
.\"
.\"
.SS FIFOs
Opening the read or write end of a FIFO blocks until the other
end is also opened (by another process or thread).
See
.BR fifo (7)
for further details.
.\"
.\"
.SS File access mode
Unlike the other values that can be specified in
.IR flags ,
the
.I "access mode"
values
.BR O_RDONLY ", " O_WRONLY ", and " O_RDWR
do not specify individual bits.
Rather, they define the low order two bits of
.IR flags ,
and are defined respectively as 0, 1, and 2.
In other words, the combination
.B "O_RDONLY | O_WRONLY"
is a logical error, and certainly does not have the same meaning as
.BR O_RDWR .

Linux reserves the special, nonstandard access mode 3 (binary 11) in
.I flags
to mean:
check for read and write permission on the file and return a descriptor
that can't be used for reading or writing.
This nonstandard access mode is used by some Linux drivers to return a
descriptor that is to be used only for device-specific
.BR ioctl (2)
operations.
.\" See for example util-linux's disk-utils/setfdprm.c
.\" For some background on access mode 3, see
.\" http://thread.gmane.org/gmane.linux.kernel/653123
.\" "[RFC] correct flags to f_mode conversion in __dentry_open"
.\" LKML, 12 Mar 2008
.\"
.\"
.SS Rationale for openat() and other "directory file descriptor" APIs
.BR openat ()
and the other system calls and library functions that take
a directory file descriptor argument
(i.e.,
.BR execveat (2),
.BR faccessat (2),
.BR fanotify_mark (2),
.BR fchmodat (2),
.BR fchownat (2),
.BR fstatat (2),
.BR futimesat (2),
.BR linkat (2),
.BR mkdirat (2),
.BR mknodat (2),
.BR name_to_handle_at (2),
.BR readlinkat (2),
.BR renameat (2),
.BR symlinkat (2),
.BR unlinkat (2),
.BR utimensat (2),
.BR mkfifoat (3),
and
.BR scandirat (3))
are supported
for two reasons.
Here, the explanation is in terms of the
.BR openat ()
call, but the rationale is analogous for the other interfaces.

First,
.BR openat ()
allows an application to avoid race conditions that could
occur when using
.BR open ()
to open files in directories other than the current working directory.
These race conditions result from the fact that some component
of the directory prefix given to
.BR open ()
could be changed in parallel with the call to
.BR open ().
Suppose, for example, that we wish to create the file
.I path/to/xxx.dep
if the file
.I path/to/xxx
exists.
The problem is that between the existence check and the file creation step,
.I path
or
.I to
(which might be symbolic links)
could be modified to point to a different location.
Such races can be avoided by
opening a file descriptor for the target directory,
and then specifying that file descriptor as the
.I dirfd
argument of (say)
.BR fstatat (2)
and
.BR openat ().

Second,
.BR openat ()
allows the implementation of a per-thread "current working
directory", via file descriptor(s) maintained by the application.
(This functionality can also be obtained by tricks based
on the use of
.IR /proc/self/fd/ dirfd,
but less efficiently.)
.\"
.\"
.SS O_DIRECT
.LP
The
.B O_DIRECT
flag may impose alignment restrictions on the length and address
of user-space buffers and the file offset of I/Os.
In Linux alignment
restrictions vary by filesystem and kernel version and might be
absent entirely.
However there is currently no filesystem\-independent
interface for an application to discover these restrictions for a given
file or filesystem.
Some filesystems provide their own interfaces
for doing so, for example the
.B XFS_IOC_DIOINFO
operation in
.BR xfsctl (3).
.LP
Under Linux 2.4, transfer sizes, and the alignment of the user buffer
and the file offset must all be multiples of the logical block size
of the filesystem.
Since Linux 2.6.0, alignment to the logical block size of the
underlying storage (typically 512 bytes) suffices.
The logical block size can be determined using the
.BR ioctl (2)
.B BLKSSZGET
operation or from the shell using the command:

    blockdev \-\-getss
.LP
.B O_DIRECT
I/Os should never be run concurrently with the
.BR fork (2)
system call,
if the memory buffer is a private mapping
(i.e., any mapping created with the
.BR mmap (2)
.BR MAP_PRIVATE
flag;
this includes memory allocated on the heap and statically allocated buffers).
Any such I/Os, whether submitted via an asynchronous I/O interface or from
another thread in the process,
should be completed before
.BR fork (2)
is called.
Failure to do so can result in data corruption and undefined behavior in
parent and child processes.
This restriction does not apply when the memory buffer for the
.B O_DIRECT
I/Os was created using
.BR shmat (2)
or
.BR mmap (2)
with the
.B MAP_SHARED
flag.
Nor does this restriction apply when the memory buffer has been advised as
.B MADV_DONTFORK
with
.BR madvise (2),
ensuring that it will not be available
to the child after
.BR fork (2).
.LP
The
.B O_DIRECT
flag was introduced in SGI IRIX, where it has alignment
restrictions similar to those of Linux 2.4.
IRIX has also a
.BR fcntl (2)
call to query appropriate alignments, and sizes.
FreeBSD 4.x introduced
a flag of the same name, but without alignment restrictions.
.LP
.B O_DIRECT
support was added under Linux in kernel version 2.4.10.
Older Linux kernels simply ignore this flag.
Some filesystems may not implement the flag and
.BR open ()
will fail with
.B EINVAL
if it is used.
.LP
Applications should avoid mixing
.B O_DIRECT
and normal I/O to the same file,
and especially to overlapping byte regions in the same file.
Even when the filesystem correctly handles the coherency issues in
this situation, overall I/O throughput is likely to be slower than
using either mode alone.
Likewise, applications should avoid mixing
.BR mmap (2)
of files with direct I/O to the same files.
.LP
The behavior of
.B O_DIRECT
with NFS will differ from local filesystems.
Older kernels, or
kernels configured in certain ways, may not support this combination.
The NFS protocol does not support passing the flag to the server, so
.B O_DIRECT
I/O will bypass the page cache only on the client; the server may
still cache the I/O.
The client asks the server to make the I/O
synchronous to preserve the synchronous semantics of
.BR O_DIRECT .
Some servers will perform poorly under these circumstances, especially
if the I/O size is small.
Some servers may also be configured to
lie to clients about the I/O having reached stable storage; this
will avoid the performance penalty at some risk to data integrity
in the event of server power failure.
The Linux NFS client places no alignment restrictions on
.B O_DIRECT
I/O.
.PP
In summary,
.B O_DIRECT
is a potentially powerful tool that should be used with caution.
It is recommended that applications treat use of
.B O_DIRECT
as a performance option which is disabled by default.
.PP
.RS
"The thing that has always disturbed me about O_DIRECT is that the whole
interface is just stupid, and was probably designed by a deranged monkey
on some serious mind-controlling substances."\(emLinus
.RE
.SH BUGS
Currently, it is not possible to enable signal-driven
I/O by specifying
.B O_ASYNC
when calling
.BR open ();
use
.BR fcntl (2)
to enable this flag.
.\" FIXME . Check bugzilla report on open(O_ASYNC)
.\" See http://bugzilla.kernel.org/show_bug.cgi?id=5993

One must check for two different error codes,
.B EISDIR
and
.BR ENOENT ,
when trying to determine whether the kernel supports
.B O_TMPFILE
functionality.

When both
.B O_CREAT
and
.B O_DIRECTORY
are specified in
.IR flags
and the file specified by
.I pathname
does not exist,
.BR open ()
will create a regular file (i.e.,
.B O_DIRECTORY
is ignored).
.SH SEE ALSO
.BR chmod (2),
.BR chown (2),
.BR close (2),
.BR dup (2),
.BR fcntl (2),
.BR link (2),
.BR lseek (2),
.BR mknod (2),
.BR mmap (2),
.BR mount (2),
.BR open_by_handle_at (2),
.BR read (2),
.BR socket (2),
.BR stat (2),
.BR umask (2),
.BR unlink (2),
.BR write (2),
.BR fopen (3),
.BR acl (5)
.BR fifo (7),
.BR path_resolution (7),
.BR symlink (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2014 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH OPEN_BY_HANDLE_AT 2 2014-06-13 "Linux" "Linux Programmer's Manual"
.SH NAME
name_to_handle_at, open_by_handle_at \- obtain handle
for a pathname and open file via a handle
.SH SYNOPSIS
.nf
.BR "#define _GNU_SOURCE" "         /* See feature_test_macros(7) */"
.B #include <sys/types.h>
.B #include <sys/stat.h>
.B #include <fcntl.h>

.BI "int name_to_handle_at(int " dirfd ", const char *" pathname ,
.BI "                      struct file_handle *" handle ,
.BI "                      int *" mount_id ", int " flags );

.BI "int open_by_handle_at(int " mount_fd ", struct file_handle *" handle ,
.BI "                      int " flags );
.fi
.SH DESCRIPTION
The
.BR name_to_handle_at ()
and
.BR open_by_handle_at ()
system calls split the functionality of
.BR openat (2)
into two parts:
.BR name_to_handle_at ()
returns an opaque handle that corresponds to a specified file;
.BR open_by_handle_at ()
opens the file corresponding to a handle returned by a previous call to
.BR name_to_handle_at ()
and returns an open file descriptor.
.\"
.\"
.SS name_to_handle_at()
The
.BR name_to_handle_at ()
system call returns a file handle and a mount ID corresponding to
the file specified by the
.IR dirfd
and
.IR pathname
arguments.
The file handle is returned via the argument
.IR handle ,
which is a pointer to a structure of the following form:

.in +4n
.nf
struct file_handle {
    unsigned int  handle_bytes;   /* Size of f_handle [in, out] */
    int           handle_type;    /* Handle type [out] */
    unsigned char f_handle[0];    /* File identifier (sized by
                                     caller) [out] */
};
.fi
.in
.PP
It is the caller's responsibility to allocate the structure
with a size large enough to hold the handle returned in
.IR f_handle .
Before the call, the
.IR handle_bytes
field should be initialized to contain the allocated size for
.IR f_handle .
(The constant
.BR MAX_HANDLE_SZ ,
defined in
.IR <fcntl.h> ,
specifies the maximum possible size for a file handle.)
Upon successful return, the
.IR handle_bytes
field is updated to contain the number of bytes actually written to
.IR f_handle .

The caller can discover the required size for the
.I file_handle
structure by making a call in which
.IR handle->handle_bytes
is zero;
in this case, the call fails with the error
.BR EOVERFLOW
and
.IR handle->handle_bytes
is set to indicate the required size;
the caller can then use this information to allocate a structure
of the correct size (see EXAMPLE below).

Other than the use of the
.IR handle_bytes
field, the caller should treat the
.IR file_handle
structure as an opaque data type: the
.IR handle_type
and
.IR f_handle
fields are needed only by a subsequent call to
.BR open_by_handle_at ().

The
.I flags
argument is a bit mask constructed by ORing together zero or more of
.BR AT_EMPTY_PATH
and
.BR AT_SYMLINK_FOLLOW ,
described below.

Together, the
.I pathname
and
.I dirfd
arguments identify the file for which a handle is to be obtained.
There are four distinct cases:
.IP * 3
If
.I pathname
is a nonempty string containing an absolute pathname,
then a handle is returned for the file referred to by that pathname.
In this case,
.IR dirfd
is ignored.
.IP *
If
.I pathname
is a nonempty string containing a relative pathname and
.IR dirfd
has the special value
.BR AT_FDCWD ,
then
.I pathname
is interpreted relative to the current working directory of the caller,
and a handle is returned for the file to which it refers.
.IP *
If
.I pathname
is a nonempty string containing a relative pathname and
.IR dirfd
is a file descriptor referring to a directory, then
.I pathname
is interpreted relative to the directory referred to by
.IR dirfd ,
and a handle is returned for the file to which it refers.
(See
.BR openat (2)
for an explanation of why "directory file descriptors" are useful.)
.IP *
If
.I pathname
is an empty string and
.I flags
specifies the value
.BR AT_EMPTY_PATH ,
then
.IR dirfd
can be an open file descriptor referring to any type of file,
or
.BR AT_FDCWD ,
meaning the current working directory,
and a handle is returned for the file to which it refers.
.PP
The
.I mount_id
argument returns an identifier for the filesystem
mount that corresponds to
.IR pathname .
This corresponds to the first field in one of the records in
.IR /proc/self/mountinfo .
Opening the pathname in the fifth field of that record yields a file
descriptor for the mount point;
that file descriptor can be used in a subsequent call to
.BR open_by_handle_at ().

By default,
.BR name_to_handle_at ()
does not dereference
.I pathname
if it is a symbolic link, and thus returns a handle for the link itself.
If
.B AT_SYMLINK_FOLLOW
is specified in
.IR flags ,
.I pathname
is dereferenced if it is a symbolic link
(so that the call returns a handle for the file referred to by the link).
.SS open_by_handle_at()
The
.BR open_by_handle_at ()
system call opens the file referred to by
.IR handle ,
a file handle returned by a previous call to
.BR name_to_handle_at ().

The
.IR mount_fd
argument is a file descriptor for any object (file, directory, etc.)
in the mounted filesystem with respect to which
.IR handle
should be interpreted.
The special value
.B AT_FDCWD
can be specified, meaning the current working directory of the caller.

The
.I flags
argument
is as for
.BR open (2).
If
.I handle
refers to a symbolic link, the caller must specify the
.B O_PATH
flag, and the symbolic link is not dereferenced; the
.B O_NOFOLLOW
flag, if specified, is ignored.


The caller must have the
.B CAP_DAC_READ_SEARCH
capability to invoke
.BR open_by_handle_at ().
.SH RETURN VALUE
On success,
.BR name_to_handle_at ()
returns 0,
and
.BR open_by_handle_at ()
returns a nonnegative file descriptor.

In the event of an error, both system calls return \-1 and set
.I errno
to indicate the cause of the error.
.SH ERRORS
.BR name_to_handle_at ()
and
.BR open_by_handle_at ()
can fail for the same errors as
.BR openat (2).
In addition, they can fail with the errors noted below.

.BR name_to_handle_at ()
can fail with the following errors:
.TP
.B EFAULT
.IR pathname ,
.IR mount_id ,
or
.IR handle
points outside your accessible address space.
.TP
.B EINVAL
.I flags
includes an invalid bit value.
.TP
.B EINVAL
.IR handle\->handle_bytes
is greater than
.BR MAX_HANDLE_SZ .
.TP
.B ENOENT
.I pathname
is an empty string, but
.BR AT_EMPTY_PATH
was not specified in
.IR flags .
.TP
.B ENOTDIR
The file descriptor supplied in
.I dirfd
does not refer to a directory,
and it is not the case that both
.I flags
includes
.BR AT_EMPTY_PATH
and
.I pathname
is an empty string.
.TP
.B EOPNOTSUPP
The filesystem does not support decoding of a pathname to a file handle.
.TP
.B EOVERFLOW
The
.I handle->handle_bytes
value passed into the call was too small.
When this error occurs,
.I handle->handle_bytes
is updated to indicate the required size for the handle.
.\"
.\"
.PP
.BR open_by_handle_at ()
can fail with the following errors:
.TP
.B EBADF
.IR mount_fd
is not an open file descriptor.
.TP
.B EFAULT
.IR handle
points outside your accessible address space.
.TP
.B EINVAL
.I handle->handle_bytes
is greater than
.BR MAX_HANDLE_SZ
or is equal to zero.
.TP
.B ELOOP
.I handle
refers to a symbolic link, but
.B O_PATH
was not specified in
.IR flags .
.TP
.B EPERM
The caller does not have the
.BR CAP_DAC_READ_SEARCH
capability.
.TP
.B ESTALE
The specified
.I handle
is not valid.
This error will occur if, for example, the file has been deleted.
.SH VERSIONS
These system calls first appeared in Linux 2.6.39.
Library support is provided in glibc since version 2.14.
.SH CONFORMING TO
These system calls are nonstandard Linux extensions.

FreeBSD has a broadly similar pair of system calls in the form of
.BR getfh ()
and
.BR openfh ().
.SH NOTES
A file handle can be generated in one process using
.BR name_to_handle_at ()
and later used in a different process that calls
.BR open_by_handle_at ().

Some filesystem don't support the translation of pathnames to
file handles, for example,
.IR /proc ,
.IR /sys ,
and various network filesystems.

A file handle may become invalid ("stale") if a file is deleted,
or for other filesystem-specific reasons.
Invalid handles are notified by an
.B ESTALE
error from
.BR open_by_handle_at ().

These system calls are designed for use by user-space file servers.
For example, a user-space NFS server might generate a file handle
and pass it to an NFS client.
Later, when the client wants to open the file,
it could pass the handle back to the server.
.\" https://lwn.net/Articles/375888/
.\"	"Open by handle" - Jonathan Corbet, 2010-02-23
This sort of functionality allows a user-space file server to operate in
a stateless fashion with respect to the files it serves.

If
.I pathname
refers to a symbolic link and
.IR flags
does not specify
.BR AT_SYMLINK_FOLLOW ,
then
.BR name_to_handle_at ()
returns a handle for the link (rather than the file to which it refers).
.\" commit bcda76524cd1fa32af748536f27f674a13e56700
The process receiving the handle can later perform operations
on the symbolic link by converting the handle to a file descriptor using
.BR open_by_handle_at ()
with the
.BR O_PATH
flag, and then passing the file descriptor as the
.IR dirfd
argument in system calls such as
.BR readlinkat (2)
and
.BR fchownat (2).
.SS Obtaining a persistent filesystem ID
The mount IDs in
.IR /proc/self/mountinfo
can be reused as filesystems are unmounted and mounted.
Therefore, the mount ID returned by
.BR name_to_handle_at ()
(in
.IR *mount_id )
should not be treated as a persistent identifier
for the corresponding mounted filesystem.
However, an application can use the information in the
.I mountinfo
record that corresponds to the mount ID
to derive a persistent identifier.

For example, one can use the device name in the fifth field of the
.I mountinfo
record to search for the corresponding device UUID via the symbolic links in
.IR /dev/disks/by-uuid .
(A more comfortable way of obtaining the UUID is to use the
.\" e.g., http://stackoverflow.com/questions/6748429/using-libblkid-to-find-uuid-of-a-partition
.BR libblkid (3)
library.)
That process can then be reversed,
using the UUID to look up the device name,
and then obtaining the corresponding mount point,
in order to produce the
.IR mount_fd
argument used by
.BR open_by_handle_at ().
.SH EXAMPLE
The two programs below demonstrate the use of
.BR name_to_handle_at ()
and
.BR open_by_handle_at ().
The first program
.RI ( t_name_to_handle_at.c )
uses
.BR name_to_handle_at ()
to obtain the file handle and mount ID
for the file specified in its command-line argument;
the handle and mount ID are written to standard output.

The second program
.RI ( t_open_by_handle_at.c )
reads a mount ID and file handle from standard input.
The program then employs
.BR open_by_handle_at ()
to open the file using that handle.
If an optional command-line argument is supplied, then the
.IR mount_fd
argument for
.BR open_by_handle_at ()
is obtained by opening the directory named in that argument.
Otherwise,
.IR mount_fd
is obtained by scanning
.IR /proc/self/mountinfo
to find a record whose mount ID matches the mount ID
read from standard input,
and the mount directory specified in that record is opened.
(These programs do not deal with the fact that mount IDs are not persistent.)

The following shell session demonstrates the use of these two programs:

.in +4n
.nf
$ \fBecho 'Can you please think about it?' > cecilia.txt\fP
$ \fB./t_name_to_handle_at cecilia.txt > fh\fP
$ \fB./t_open_by_handle_at < fh\fP
open_by_handle_at: Operation not permitted
$ \fBsudo ./t_open_by_handle_at < fh\fP      # Need CAP_SYS_ADMIN
Read 31 bytes
$ \fBrm cecilia.txt\fP
.fi
.in

Now we delete and (quickly) re-create the file so that
it has the same content and (by chance) the same inode.
Nevertheless,
.BR open_by_handle_at ()
.\" Christoph Hellwig: That's why the file handles contain a generation
.\" counter that gets incremented in this case.
recognizes that the original file referred to by the file handle
no longer exists.

.in +4n
.nf
$ \fBstat \-\-printf="%i\\n" cecilia.txt\fP     # Display inode number
4072121
$ \fBrm cecilia.txt\fP
$ \fBecho 'Can you please think about it?' > cecilia.txt\fP
$ \fBstat \-\-printf="%i\\n" cecilia.txt\fP     # Check inode number
4072121
$ \fBsudo ./t_open_by_handle_at < fh\fP
open_by_handle_at: Stale NFS file handle
.fi
.in
.SS Program source: t_name_to_handle_at.c
\&
.nf
#define _GNU_SOURCE
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>

#define errExit(msg)    do { perror(msg); exit(EXIT_FAILURE); \\
                        } while (0)

int
main(int argc, char *argv[])
{
    struct file_handle *fhp;
    int mount_id, fhsize, flags, dirfd, j;
    char *pathname;

    if (argc != 2) {
        fprintf(stderr, "Usage: %s pathname\\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    pathname = argv[1];

    /* Allocate file_handle structure */

    fhsize = sizeof(*fhp);
    fhp = malloc(fhsize);
    if (fhp == NULL)
        errExit("malloc");

    /* Make an initial call to name_to_handle_at() to discover
       the size required for file handle */

    dirfd = AT_FDCWD;           /* For name_to_handle_at() calls */
    flags = 0;                  /* For name_to_handle_at() calls */
    fhp\->handle_bytes = 0;
    if (name_to_handle_at(dirfd, pathname, fhp,
                &mount_id, flags) != \-1 || errno != EOVERFLOW) {
        fprintf(stderr, "Unexpected result from name_to_handle_at()\\n");
        exit(EXIT_FAILURE);
    }

    /* Reallocate file_handle structure with correct size */

    fhsize = sizeof(struct file_handle) + fhp\->handle_bytes;
    fhp = realloc(fhp, fhsize);         /* Copies fhp\->handle_bytes */
    if (fhp == NULL)
        errExit("realloc");

    /* Get file handle from pathname supplied on command line */

    if (name_to_handle_at(dirfd, pathname, fhp, &mount_id, flags) == \-1)
        errExit("name_to_handle_at");

    /* Write mount ID, file handle size, and file handle to stdout,
       for later reuse by t_open_by_handle_at.c */

    printf("%d\\n", mount_id);
    printf("%d %d   ", fhp\->handle_bytes, fhp\->handle_type);
    for (j = 0; j < fhp\->handle_bytes; j++)
        printf(" %02x", fhp\->f_handle[j]);
    printf("\\n");

    exit(EXIT_SUCCESS);
}
.fi
.SS Program source: t_open_by_handle_at.c
\&
.nf
#define _GNU_SOURCE
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <limits.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>

#define errExit(msg)    do { perror(msg); exit(EXIT_FAILURE); \\
                        } while (0)

/* Scan /proc/self/mountinfo to find the line whose mount ID matches
   \(aqmount_id\(aq. (An easier way to do this is to install and use the
   \(aqlibmount\(aq library provided by the \(aqutil\-linux\(aq project.)
   Open the corresponding mount path and return the resulting file
   descriptor. */

static int
open_mount_path_by_id(int mount_id)
{
    char *linep;
    size_t lsize;
    char mount_path[PATH_MAX];
    int mi_mount_id, found;
    ssize_t nread;
    FILE *fp;

    fp = fopen("/proc/self/mountinfo", "r");
    if (fp == NULL)
        errExit("fopen");

    found = 0;
    linep = NULL;
    while (!found) {
        nread = getline(&linep, &lsize, fp);
        if (nread == \-1)
            break;

        nread = sscanf(linep, "%d %*d %*s %*s %s",
                       &mi_mount_id, mount_path);
        if (nread != 2) {
            fprintf(stderr, "Bad sscanf()\\n");
            exit(EXIT_FAILURE);
        }

        if (mi_mount_id == mount_id)
            found = 1;
    }
    free(linep);

    fclose(fp);

    if (!found) {
        fprintf(stderr, "Could not find mount point\\n");
        exit(EXIT_FAILURE);
    }

    return open(mount_path, O_RDONLY);
}

int
main(int argc, char *argv[])
{
    struct file_handle *fhp;
    int mount_id, fd, mount_fd, handle_bytes, j;
    ssize_t nread;
    char buf[1000];
#define LINE_SIZE 100
    char line1[LINE_SIZE], line2[LINE_SIZE];
    char *nextp;

    if ((argc > 1 && strcmp(argv[1], "\-\-help") == 0) || argc > 2) {
        fprintf(stderr, "Usage: %s [mount\-path]\\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    /* Standard input contains mount ID and file handle information:

         Line 1: <mount_id>
         Line 2: <handle_bytes> <handle_type>   <bytes of handle in hex>
    */

    if ((fgets(line1, sizeof(line1), stdin) == NULL) ||
           (fgets(line2, sizeof(line2), stdin) == NULL)) {
        fprintf(stderr, "Missing mount_id / file handle\\n");
        exit(EXIT_FAILURE);
    }

    mount_id = atoi(line1);

    handle_bytes = strtoul(line2, &nextp, 0);

    /* Given handle_bytes, we can now allocate file_handle structure */

    fhp = malloc(sizeof(struct file_handle) + handle_bytes);
    if (fhp == NULL)
        errExit("malloc");

    fhp\->handle_bytes = handle_bytes;

    fhp\->handle_type = strtoul(nextp, &nextp, 0);

    for (j = 0; j < fhp\->handle_bytes; j++)
        fhp\->f_handle[j] = strtoul(nextp, &nextp, 16);

    /* Obtain file descriptor for mount point, either by opening
       the pathname specified on the command line, or by scanning
       /proc/self/mounts to find a mount that matches the \(aqmount_id\(aq
       that we received from stdin. */

    if (argc > 1)
        mount_fd = open(argv[1], O_RDONLY);
    else
        mount_fd = open_mount_path_by_id(mount_id);

    if (mount_fd == \-1)
        errExit("opening mount fd");

    /* Open file using handle and mount point */

    fd = open_by_handle_at(mount_fd, fhp, O_RDONLY);
    if (fd == \-1)
        errExit("open_by_handle_at");

    /* Try reading a few bytes from the file */

    nread = read(fd, buf, sizeof(buf));
    if (nread == \-1)
        errExit("read");

    printf("Read %zd bytes\\n", nread);

    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR open (2),
.BR libblkid (3),
.BR blkid (8),
.BR findfs (8),
.BR mount (8)

The
.I libblkid
and
.I libmount
documentation in the latest
.I util-linux
release at
.UR https://www.kernel.org/pub/linux/utils/util-linux/
.UE
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1995 Paul Gortmaker
.\" (gpg109@rsphy1.anu.edu.au)
.\" Wed Nov 29 10:58:54 EST 1995
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.TH OUTB 2 2012-12-31 "Linux" "Linux Programmer's Manual"
.SH NAME
outb, outw, outl, outsb, outsw, outsl,
inb, inw, inl, insb, insw, insl,
outb_p, outw_p, outl_p, inb_p, inw_p, inl_p \- port I/O
.SH SYNOPSIS
.nf
.B #include <sys/io.h>

.BI "unsigned char inb(unsigned short int " port );
.BI "unsigned char inb_p(unsigned short int " port );
.BI "unsigned short int inw(unsigned short int " port );
.BI "unsigned short int inw_p(unsigned short int " port );
.BI "unsigned int inl(unsigned short int " port );
.BI "unsigned int inl_p(unsigned short int " port );

.BI "void outb(unsigned char " value ", unsigned short int " port );
.BI "void outb_p(unsigned char " value ", unsigned short int " port );
.BI "void outw(unsigned short int " value ", unsigned short int " port );
.BI "void outw_p(unsigned short int " value ", unsigned short int " port );
.BI "void outl(unsigned int " value ", unsigned short int " port );
.BI "void outl_p(unsigned int " value ", unsigned short int " port );

.BI "void insb(unsigned short int " port ", void *" addr ,
.BI "           unsigned long int " count );
.BI "void insw(unsigned short int " port ", void *" addr ,
.BI "           unsigned long int " count );
.BI "void insl(unsigned short int " port ", void *" addr ,
.BI "           unsigned long int " count );
.BI "void outsb(unsigned short int " port ", const void *" addr ,
.BI "           unsigned long int " count );
.BI "void outsw(unsigned short int " port ", const void *" addr ,
.BI "           unsigned long int " count );
.BI "void outsl(unsigned short int " port ", const void *" addr ,
.BI "           unsigned long int " count );
.fi
.SH DESCRIPTION
This family of functions is used to do low-level port input and output.
The out* functions do port output, the in* functions do port input;
the b-suffix functions are byte-width and the w-suffix functions
word-width; the _p-suffix functions pause until the I/O completes.
.LP
They are primarily designed for internal kernel use,
but can be used from user space.
.\" , given the following information
.\" in addition to that given in
.\" .BR outb (9).

You must compile with \fB\-O\fP or \fB\-O2\fP or similar.
The functions
are defined as inline macros, and will not be substituted in without
optimization enabled, causing unresolved references at link time.

You use
.BR ioperm (2)
or alternatively
.BR iopl (2)
to tell the kernel to allow the user space application to access the
I/O ports in question.
Failure to do this will cause the application
to receive a segmentation fault.
.SH CONFORMING TO
.BR outb ()
and friends are hardware-specific.
The
.I value
argument is passed first and the
.I port
argument is passed second,
which is the opposite order from most DOS implementations.
.SH SEE ALSO
.BR ioperm (2),
.BR iopl (2)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1992 Drew Eckhardt (drew@cs.colorado.edu), March 28, 1992
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified by Michael Haardt (michael@moria.de)
.\" Modified Sat Jul 24 14:48:00 1993 by Rik Faith (faith@cs.unc.edu)
.\" Modified 1995 by Mike Battersby (mib@deakin.edu.au)
.\" Modified 2000 by aeb, following Michael Kerrisk
.\"
.TH PAUSE 2 2008-10-06 "Linux" "Linux Programmer's Manual"
.SH NAME
pause \- wait for signal
.SH SYNOPSIS
.B #include <unistd.h>
.sp
.B int pause(void);
.SH DESCRIPTION
.BR pause ()
causes the calling process (or thread) to sleep
until a signal is delivered that either terminates the process or causes
the invocation of a signal-catching function.
.SH RETURN VALUE
.BR pause ()
returns only when a signal was caught and the
signal-catching function returned.
In this case,
.BR pause ()
returns \-1, and
.I errno
is set to
.\" .BR ERESTARTNOHAND .
.BR EINTR .
.SH ERRORS
.TP
.B EINTR
a signal was caught and the signal-catching function returned.
.SH CONFORMING TO
SVr4, 4.3BSD, POSIX.1-2001.
.SH SEE ALSO
.BR kill (2),
.BR select (2),
.BR signal (2),
.BR sigsuspend (2)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Contributed by Niki A. Rahimi, LTC Security Development
.\" narahimi@us.ibm.com
.\"
.\" %%%LICENSE_START(FREELY_REDISTRIBUTABLE)
.\" May be freely distributed.
.\" %%%LICENSE_END
.\"
.TH PCICONFIG_READ 2 2003-07-14 "Linux" "Linux Programmer's Manual"
.SH NAME
pciconfig_read, pciconfig_write, pciconfig_iobase \- pci device information handling
.SH SYNOPSIS
.nf
.B #include <pci.h>
.sp
.BI "int pciconfig_read(unsigned long " bus ", unsigned long " dfn ,
.BI "          unsigned long " off ", unsigned long " len ", void *" buf );
.BI "int pciconfig_write(unsigned long " bus ", unsigned long " dfn ,
.BI "          unsigned long " off ", unsigned long " len ", void *" buf );
.BI "int pciconfig_iobase(long " which ", unsigned long " bus ,
.BI "          unsigned long " devfn );
.fi
.SH DESCRIPTION
.PP
Most of the interaction with PCI devices is already handled by the
kernel PCI layer,
and thus these calls should not normally need to be accessed from user space.
.TP
.BR pciconfig_read ()
Reads to
.I buf
from device
.I dev
at offset
.I off
value.
.TP
.BR pciconfig_write ()
Writes from
.I buf
to device
.I dev
at offset
.I off
value.
.TP
.BR pciconfig_iobase ()
You pass it a bus/devfn pair and get a physical address for either the
memory offset (for things like prep, this is 0xc0000000),
the IO base for PIO cycles, or the ISA holes if any.
.SH RETURN VALUE
.TP
.BR pciconfig_read ()
On success, zero is returned.
On error, \-1 is returned and
.I errno
is set appropriately.
.TP
.BR pciconfig_write ()
On success, zero is returned.
On error, \-1 is returned and
.I errno
is set appropriately.
.TP
.BR pciconfig_iobase ()
Returns information on locations of various I/O
regions in physical memory according to the
.I which
value.
Values for
.I which
are:
.BR IOBASE_BRIDGE_NUMBER ,
.BR IOBASE_MEMORY ,
.BR IOBASE_IO ,
.BR IOBASE_ISA_IO ,
.BR IOBASE_ISA_MEM .
.SH ERRORS
.TP
.B EINVAL
.I len
value is invalid.
This does not apply to
.BR pciconfig_iobase ().
.TP
.B EIO
I/O error.
.TP
.B ENODEV
For
.BR pciconfig_iobase (),
"hose" value is NULL.
For the other calls, could not find a slot.
.TP
.B ENOSYS
The system has not implemented these calls
.RB ( CONFIG_PCI
not defined).
.TP
.B EOPNOTSUPP
This return value is valid only for
.BR pciconfig_iobase ().
It is returned if the value for
.I which
is invalid.
.TP
.B EPERM
User does not have the
.B CAP_SYS_ADMIN
capability.
This does not apply to
.BR pciconfig_iobase ().
.SH CONFORMING TO
These calls are Linux-specific, available since Linux 2.0.26/2.1.11.
.SH SEE ALSO
.BR capabilities (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2012, Vincent Weaver
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.\" This document is based on the perf_event.h header file, the
.\" tools/perf/design.txt file, and a lot of bitter experience.
.\"
.TH PERF_EVENT_OPEN 2 2015-02-21 "Linux" "Linux Programmer's Manual"
.SH NAME
perf_event_open \- set up performance monitoring
.SH SYNOPSIS
.nf
.B #include <linux/perf_event.h>
.B #include <linux/hw_breakpoint.h>
.sp
.BI "int perf_event_open(struct perf_event_attr *" attr ,
.BI "                    pid_t " pid ", int " cpu ", int " group_fd ,
.BI "                    unsigned long " flags  );
.fi

.IR Note :
There is no glibc wrapper for this system call; see NOTES.
.SH DESCRIPTION
Given a list of parameters,
.BR perf_event_open ()
returns a file descriptor, for use in subsequent system calls
.RB ( read "(2), " mmap "(2), " prctl "(2), " fcntl "(2), etc.)."
.PP
A call to
.BR perf_event_open ()
creates a file descriptor that allows measuring performance
information.
Each file descriptor corresponds to one
event that is measured; these can be grouped together
to measure multiple events simultaneously.
.PP
Events can be enabled and disabled in two ways: via
.BR ioctl (2)
and via
.BR prctl (2).
When an event is disabled it does not count or generate overflows but does
continue to exist and maintain its count value.
.PP
Events come in two flavors: counting and sampled.
A
.I counting
event is one that is used for counting the aggregate number of events
that occur.
In general, counting event results are gathered with a
.BR read (2)
call.
A
.I sampling
event periodically writes measurements to a buffer that can then
be accessed via
.BR mmap (2).
.SS Arguments
.P
The
.I pid
and
.I cpu
arguments allow specifying which process and CPU to monitor:
.TP
.BR "pid == 0" " and " "cpu == \-1"
This measures the calling process/thread on any CPU.
.TP
.BR "pid == 0" " and " "cpu >= 0"
This measures the calling process/thread only
when running on the specified CPU.
.TP
.BR "pid > 0" " and " "cpu == \-1"
This measures the specified process/thread on any CPU.
.TP
.BR "pid > 0" " and " "cpu >= 0"
This measures the specified process/thread only
when running on the specified CPU.
.TP
.BR "pid == \-1" " and " "cpu >= 0"
This measures all processes/threads on the specified CPU.
This requires
.B CAP_SYS_ADMIN
capability or a
.I /proc/sys/kernel/perf_event_paranoid
value of less than 1.
.TP
.BR "pid == \-1" " and " "cpu == \-1"
This setting is invalid and will return an error.
.P
The
.I group_fd
argument allows event groups to be created.
An event group has one event which is the group leader.
The leader is created first, with
.IR group_fd " = \-1."
The rest of the group members are created with subsequent
.BR perf_event_open ()
calls with
.IR group_fd
being set to the file descriptor of the group leader.
(A single event on its own is created with
.IR group_fd " = \-1"
and is considered to be a group with only 1 member.)
An event group is scheduled onto the CPU as a unit: it will
be put onto the CPU only if all of the events in the group can be put onto
the CPU.
This means that the values of the member events can be
meaningfully compared\(emadded, divided (to get ratios), and so on\(emwith each
other, since they have counted events for the same set of executed
instructions.
.P
The
.I flags
argument is formed by ORing together zero or more of the following values:
.TP
.BR PERF_FLAG_FD_CLOEXEC " (since Linux 3.14)"
.\" commit a21b0b354d4ac39be691f51c53562e2c24443d9e
This flag enables the close-on-exec flag for the created
event file descriptor,
so that the file descriptor is automatically closed on
.BR execve (2).
Setting the close-on-exec flags at creation time, rather than later with
.BR fcntl (2),
avoids potential race conditions where the calling thread invokes
.BR perf_event_open ()
and
.BR fcntl (2)
at the same time as another thread calls
.BR fork (2)
then
.BR execve (2).
.TP
.BR PERF_FLAG_FD_NO_GROUP
This flag tells the event to ignore the
.IR group_fd
parameter except for the purpose of setting up output redirection
using the
.B PERF_FLAG_FD_OUTPUT
flag.
.TP
.BR PERF_FLAG_FD_OUTPUT " (broken since Linux 2.6.35)"
.\" commit ac9721f3f54b27a16c7e1afb2481e7ee95a70318
This flag re-routes the event's sampled output to instead
be included in the mmap buffer of the event specified by
.IR group_fd .
.TP
.BR PERF_FLAG_PID_CGROUP " (since Linux 2.6.39)"
.\" commit e5d1367f17ba6a6fed5fd8b74e4d5720923e0c25
This flag activates per-container system-wide monitoring.
A container
is an abstraction that isolates a set of resources for finer-grained
control (CPUs, memory, etc.).
In this mode, the event is measured
only if the thread running on the monitored CPU belongs to the designated
container (cgroup).
The cgroup is identified by passing a file descriptor
opened on its directory in the cgroupfs filesystem.
For instance, if the
cgroup to monitor is called
.IR test ,
then a file descriptor opened on
.I /dev/cgroup/test
(assuming cgroupfs is mounted on
.IR /dev/cgroup )
must be passed as the
.I pid
parameter.
cgroup monitoring is available only
for system-wide events and may therefore require extra permissions.
.P
The
.I perf_event_attr
structure provides detailed configuration information
for the event being created.

.in +4n
.nf
struct perf_event_attr {
    __u32 type;         /* Type of event */
    __u32 size;         /* Size of attribute structure */
    __u64 config;       /* Type-specific configuration */

    union {
        __u64 sample_period;    /* Period of sampling */
        __u64 sample_freq;      /* Frequency of sampling */
    };

    __u64 sample_type;  /* Specifies values included in sample */
    __u64 read_format;  /* Specifies values returned in read */

    __u64 disabled       : 1,   /* off by default */
          inherit        : 1,   /* children inherit it */
          pinned         : 1,   /* must always be on PMU */
          exclusive      : 1,   /* only group on PMU */
          exclude_user   : 1,   /* don't count user */
          exclude_kernel : 1,   /* don't count kernel */
          exclude_hv     : 1,   /* don't count hypervisor */
          exclude_idle   : 1,   /* don't count when idle */
          mmap           : 1,   /* include mmap data */
          comm           : 1,   /* include comm data */
          freq           : 1,   /* use freq, not period */
          inherit_stat   : 1,   /* per task counts */
          enable_on_exec : 1,   /* next exec enables */
          task           : 1,   /* trace fork/exit */
          watermark      : 1,   /* wakeup_watermark */
          precise_ip     : 2,   /* skid constraint */
          mmap_data      : 1,   /* non-exec mmap data */
          sample_id_all  : 1,   /* sample_type all events */
          exclude_host   : 1,   /* don't count in host */
          exclude_guest  : 1,   /* don't count in guest */
          exclude_callchain_kernel : 1,
                                /* exclude kernel callchains */
          exclude_callchain_user   : 1,
                                /* exclude user callchains */
          mmap2          :  1,  /* include mmap with inode data */
          comm_exec      :  1,  /* flag comm events that are due to exec */
          __reserved_1   : 39;

    union {
        __u32 wakeup_events;    /* wakeup every n events */
        __u32 wakeup_watermark; /* bytes before wakeup */
    };

    __u32     bp_type;          /* breakpoint type */

    union {
        __u64 bp_addr;          /* breakpoint address */
        __u64 config1;          /* extension of config */
    };

    union {
        __u64 bp_len;           /* breakpoint length */
        __u64 config2;          /* extension of config1 */
    };
    __u64 branch_sample_type;   /* enum perf_branch_sample_type */
    __u64 sample_regs_user;     /* user regs to dump on samples */
    __u32 sample_stack_user;    /* size of stack to dump on
                                   samples */
    __u32 __reserved_2;         /* Align to u64 */

};
.fi
.in

The fields of the
.I perf_event_attr
structure are described in more detail below:
.TP
.I type
This field specifies the overall event type.
It has one of the following values:
.RS
.TP
.B PERF_TYPE_HARDWARE
This indicates one of the "generalized" hardware events provided
by the kernel.
See the
.I config
field definition for more details.
.TP
.B PERF_TYPE_SOFTWARE
This indicates one of the software-defined events provided by the kernel
(even if no hardware support is available).
.TP
.B PERF_TYPE_TRACEPOINT
This indicates a tracepoint
provided by the kernel tracepoint infrastructure.
.TP
.B PERF_TYPE_HW_CACHE
This indicates a hardware cache event.
This has a special encoding, described in the
.I config
field definition.
.TP
.B PERF_TYPE_RAW
This indicates a "raw" implementation-specific event in the
.IR config " field."
.TP
.BR PERF_TYPE_BREAKPOINT " (since Linux 2.6.33)"
.\" commit 24f1e32c60c45c89a997c73395b69c8af6f0a84e
This indicates a hardware breakpoint as provided by the CPU.
Breakpoints can be read/write accesses to an address as well as
execution of an instruction address.
.TP
.RB "dynamic PMU"
Since Linux 2.6.38,
.\" commit 2e80a82a49c4c7eca4e35734380f28298ba5db19
.BR perf_event_open ()
can support multiple PMUs.
To enable this, a value exported by the kernel can be used in the
.I type
field to indicate which PMU to use.
The value to use can be found in the sysfs filesystem:
there is a subdirectory per PMU instance under
.IR /sys/bus/event_source/devices .
In each subdirectory there is a
.I type
file whose content is an integer that can be used in the
.I type
field.
For instance,
.I /sys/bus/event_source/devices/cpu/type
contains the value for the core CPU PMU, which is usually 4.
.RE
.TP
.I "size"
The size of the
.I perf_event_attr
structure for forward/backward compatibility.
Set this using
.I sizeof(struct perf_event_attr)
to allow the kernel to see
the struct size at the time of compilation.

The related define
.B PERF_ATTR_SIZE_VER0
is set to 64; this was the size of the first published struct.
.B PERF_ATTR_SIZE_VER1
is 72, corresponding to the addition of breakpoints in Linux 2.6.33.
.\" commit cb5d76999029ae7a517cb07dfa732c1b5a934fc2
.\" this was added much later when PERF_ATTR_SIZE_VER2 happened
.\" but the actual attr_size had increased in 2.6.33
.B PERF_ATTR_SIZE_VER2
is 80 corresponding to the addition of branch sampling in Linux 3.4.
.\" commit cb5d76999029ae7a517cb07dfa732c1b5a934fc2
.B PERF_ATTR_SIZE_VER3
is 96 corresponding to the addition
of
.I sample_regs_user
and
.I sample_stack_user
in Linux 3.7.
.\" commit 1659d129ed014b715b0b2120e6fd929bdd33ed03
.TP
.I "config"
This specifies which event you want, in conjunction with
the
.I type
field.
The
.IR config1 " and " config2
fields are also taken into account in cases where 64 bits is not
enough to fully specify the event.
The encoding of these fields are event dependent.

There are various ways to set the
.I config
field that are dependent on the value of the previously
described
.I type
field.
What follows are various possible settings for
.I config
separated out by
.IR type .

If
.I type
is
.BR PERF_TYPE_HARDWARE ,
we are measuring one of the generalized hardware CPU events.
Not all of these are available on all platforms.
Set
.I config
to one of the following:
.RS 12
.TP
.B PERF_COUNT_HW_CPU_CYCLES
Total cycles.
Be wary of what happens during CPU frequency scaling.
.TP
.B PERF_COUNT_HW_INSTRUCTIONS
Retired instructions.
Be careful, these can be affected by various
issues, most notably hardware interrupt counts.
.TP
.B PERF_COUNT_HW_CACHE_REFERENCES
Cache accesses.
Usually this indicates Last Level Cache accesses but this may
vary depending on your CPU.
This may include prefetches and coherency messages; again this
depends on the design of your CPU.
.TP
.B PERF_COUNT_HW_CACHE_MISSES
Cache misses.
Usually this indicates Last Level Cache misses; this is intended to be
used in conjunction with the
.B PERF_COUNT_HW_CACHE_REFERENCES
event to calculate cache miss rates.
.TP
.B PERF_COUNT_HW_BRANCH_INSTRUCTIONS
Retired branch instructions.
Prior to Linux 2.6.35, this used
the wrong event on AMD processors.
.\" commit f287d332ce835f77a4f5077d2c0ef1e3f9ea42d2
.TP
.B PERF_COUNT_HW_BRANCH_MISSES
Mispredicted branch instructions.
.TP
.B PERF_COUNT_HW_BUS_CYCLES
Bus cycles, which can be different from total cycles.
.TP
.BR PERF_COUNT_HW_STALLED_CYCLES_FRONTEND " (since Linux 3.0)"
.\" commit 8f62242246351b5a4bc0c1f00c0c7003edea128a
Stalled cycles during issue.
.TP
.BR PERF_COUNT_HW_STALLED_CYCLES_BACKEND  " (since Linux 3.0)"
.\" commit 8f62242246351b5a4bc0c1f00c0c7003edea128a
Stalled cycles during retirement.
.TP
.BR PERF_COUNT_HW_REF_CPU_CYCLES  " (since Linux 3.3)"
.\" commit c37e17497e01fc0f5d2d6feb5723b210b3ab8890
Total cycles; not affected by CPU frequency scaling.
.RE
.IP
If
.I type
is
.BR PERF_TYPE_SOFTWARE ,
we are measuring software events provided by the kernel.
Set
.I config
to one of the following:
.RS 12
.TP
.B PERF_COUNT_SW_CPU_CLOCK
This reports the CPU clock, a high-resolution per-CPU timer.
.TP
.B PERF_COUNT_SW_TASK_CLOCK
This reports a clock count specific to the task that is running.
.TP
.B PERF_COUNT_SW_PAGE_FAULTS
This reports the number of page faults.
.TP
.B PERF_COUNT_SW_CONTEXT_SWITCHES
This counts context switches.
Until Linux 2.6.34, these were all reported as user-space
events, after that they are reported as happening in the kernel.
.\" commit e49a5bd38159dfb1928fd25b173bc9de4bbadb21
.TP
.B PERF_COUNT_SW_CPU_MIGRATIONS
This reports the number of times the process
has migrated to a new CPU.
.TP
.B PERF_COUNT_SW_PAGE_FAULTS_MIN
This counts the number of minor page faults.
These did not require disk I/O to handle.
.TP
.B PERF_COUNT_SW_PAGE_FAULTS_MAJ
This counts the number of major page faults.
These required disk I/O to handle.
.TP
.BR PERF_COUNT_SW_ALIGNMENT_FAULTS " (since Linux 2.6.33)"
.\" commit f7d7986060b2890fc26db6ab5203efbd33aa2497
This counts the number of alignment faults.
These happen when unaligned memory accesses happen; the kernel
can handle these but it reduces performance.
This happens only on some architectures (never on x86).
.TP
.BR PERF_COUNT_SW_EMULATION_FAULTS " (since Linux 2.6.33)"
.\" commit f7d7986060b2890fc26db6ab5203efbd33aa2497
This counts the number of emulation faults.
The kernel sometimes traps on unimplemented instructions
and emulates them for user space.
This can negatively impact performance.
.TP
.BR PERF_COUNT_SW_DUMMY " (since Linux 3.12)"
.\" commit fa0097ee690693006ab1aea6c01ad3c851b65c77
This is a placeholder event that counts nothing.
Informational sample record types such as mmap or comm
must be associated with an active event.
This dummy event allows gathering such records without requiring
a counting event.
.RE

.RS
If
.I type
is
.BR PERF_TYPE_TRACEPOINT ,
then we are measuring kernel tracepoints.
The value to use in
.I config
can be obtained from under debugfs
.I tracing/events/*/*/id
if ftrace is enabled in the kernel.
.RE

.RS
If
.I type
is
.BR PERF_TYPE_HW_CACHE ,
then we are measuring a hardware CPU cache event.
To calculate the appropriate
.I config
value use the following equation:
.RS 4
.nf

    (perf_hw_cache_id) | (perf_hw_cache_op_id << 8) |
    (perf_hw_cache_op_result_id << 16)
.fi
.P
where
.I perf_hw_cache_id
is one of:
.RS 4
.TP
.B PERF_COUNT_HW_CACHE_L1D
for measuring Level 1 Data Cache
.TP
.B PERF_COUNT_HW_CACHE_L1I
for measuring Level 1 Instruction Cache
.TP
.B PERF_COUNT_HW_CACHE_LL
for measuring Last-Level Cache
.TP
.B PERF_COUNT_HW_CACHE_DTLB
for measuring the Data TLB
.TP
.B PERF_COUNT_HW_CACHE_ITLB
for measuring the Instruction TLB
.TP
.B PERF_COUNT_HW_CACHE_BPU
for measuring the branch prediction unit
.TP
.BR PERF_COUNT_HW_CACHE_NODE " (since Linux 3.1)"
.\" commit 89d6c0b5bdbb1927775584dcf532d98b3efe1477
for measuring local memory accesses
.RE
.P
and
.I perf_hw_cache_op_id
is one of
.RS 4
.TP
.B PERF_COUNT_HW_CACHE_OP_READ
for read accesses
.TP
.B PERF_COUNT_HW_CACHE_OP_WRITE
for write accesses
.TP
.B PERF_COUNT_HW_CACHE_OP_PREFETCH
for prefetch accesses
.RE
.P
and
.I perf_hw_cache_op_result_id
is one of
.RS 4
.TP
.B PERF_COUNT_HW_CACHE_RESULT_ACCESS
to measure accesses
.TP
.B PERF_COUNT_HW_CACHE_RESULT_MISS
to measure misses
.RE
.RE

If
.I type
is
.BR PERF_TYPE_RAW ,
then a custom "raw"
.I config
value is needed.
Most CPUs support events that are not covered by the "generalized" events.
These are implementation defined; see your CPU manual (for example
the Intel Volume 3B documentation or the AMD BIOS and Kernel Developer
Guide).
The libpfm4 library can be used to translate from the name in the
architectural manuals to the raw hex value
.BR perf_event_open ()
expects in this field.

If
.I type
is
.BR PERF_TYPE_BREAKPOINT ,
then leave
.I config
set to zero.
Its parameters are set in other places.
.RE
.TP
.IR sample_period ", " sample_freq
A "sampling" event is one that generates an overflow notification
every N events, where N is given by
.IR sample_period .
A sampling event has
.IR sample_period " > 0."
When an overflow occurs, requested data is recorded
in the mmap buffer.
The
.I sample_type
field controls what data is recorded on each overflow.

.I sample_freq
can be used if you wish to use frequency rather than period.
In this case, you set the
.I freq
flag.
The kernel will adjust the sampling period
to try and achieve the desired rate.
The rate of adjustment is a
timer tick.
.TP
.I "sample_type"
The various bits in this field specify which values to include
in the sample.
They will be recorded in a ring-buffer,
which is available to user space using
.BR mmap (2).
The order in which the values are saved in the
sample are documented in the MMAP Layout subsection below;
it is not the
.I "enum perf_event_sample_format"
order.
.RS
.TP
.B PERF_SAMPLE_IP
Records instruction pointer.
.TP
.B PERF_SAMPLE_TID
Records the process and thread IDs.
.TP
.B PERF_SAMPLE_TIME
Records a timestamp.
.TP
.B PERF_SAMPLE_ADDR
Records an address, if applicable.
.TP
.B PERF_SAMPLE_READ
Record counter values for all events in a group, not just the group leader.
.TP
.B PERF_SAMPLE_CALLCHAIN
Records the callchain (stack backtrace).
.TP
.B PERF_SAMPLE_ID
Records a unique ID for the opened event's group leader.
.TP
.B PERF_SAMPLE_CPU
Records CPU number.
.TP
.B PERF_SAMPLE_PERIOD
Records the current sampling period.
.TP
.B PERF_SAMPLE_STREAM_ID
Records a unique ID for the opened event.
Unlike
.B PERF_SAMPLE_ID
the actual ID is returned, not the group leader.
This ID is the same as the one returned by
.BR PERF_FORMAT_ID .
.TP
.B PERF_SAMPLE_RAW
Records additional data, if applicable.
Usually returned by tracepoint events.
.TP
.BR PERF_SAMPLE_BRANCH_STACK " (since Linux 3.4)"
.\" commit bce38cd53e5ddba9cb6d708c4ef3d04a4016ec7e
This provides a record of recent branches, as provided
by CPU branch sampling hardware (such as Intel Last Branch Record).
Not all hardware supports this feature.

See the
.I branch_sample_type
field for how to filter which branches are reported.
.TP
.BR PERF_SAMPLE_REGS_USER " (since Linux 3.7)"
.\" commit 4018994f3d8785275ef0e7391b75c3462c029e56
Records the current user-level CPU register state
(the values in the process before the kernel was called).
.TP
.BR PERF_SAMPLE_STACK_USER " (since Linux 3.7)"
.\" commit c5ebcedb566ef17bda7b02686e0d658a7bb42ee7
Records the user level stack, allowing stack unwinding.
.TP
.BR PERF_SAMPLE_WEIGHT " (since Linux 3.10)"
.\" commit c3feedf2aaf9ac8bad6f19f5d21e4ee0b4b87e9c
Records a hardware provided weight value that expresses how
costly the sampled event was.
This allows the hardware to highlight expensive events in
a profile.
.TP
.BR PERF_SAMPLE_DATA_SRC " (since Linux 3.10)"
.\" commit d6be9ad6c960f43800a6f118932bc8a5a4eadcd1
Records the data source: where in the memory hierarchy
the data associated with the sampled instruction came from.
This is available only if the underlying hardware
supports this feature.
.TP
.BR PERF_SAMPLE_IDENTIFIER " (since Linux 3.12)"
.\" commit ff3d527cebc1fa3707c617bfe9e74f53fcfb0955
Places the
.B SAMPLE_ID
value in a fixed position in the record,
either at the beginning (for sample events) or at the end
(if a non-sample event).

This was necessary because a sample stream may have
records from various different event sources with different
.I sample_type
settings.
Parsing the event stream properly was not possible because the
format of the record was needed to find
.BR SAMPLE_ID ,
but
the format could not be found without knowing what
event the sample belonged to (causing a circular
dependency).

The
.B PERF_SAMPLE_IDENTIFIER
setting makes the event stream always parsable
by putting
.B SAMPLE_ID
in a fixed location, even though
it means having duplicate
.B SAMPLE_ID
values in records.
.TP
.BR PERF_SAMPLE_TRANSACTION " (since Linux 3.13)"
.\" commit fdfbbd07e91f8fe387140776f3fd94605f0c89e5
Records reasons for transactional memory abort events
(for example, from Intel TSX transactional memory support).

The
.I precise_ip
setting must be greater than 0 and a transactional memory abort
event must be measured or no values will be recorded.
Also note that some perf_event measurements, such as sampled
cycle counting, may cause extraneous aborts (by causing an
interrupt during a transaction).
.RE
.TP
.IR "read_format"
This field specifies the format of the data returned by
.BR read (2)
on a
.BR perf_event_open ()
file descriptor.
.RS
.TP
.B PERF_FORMAT_TOTAL_TIME_ENABLED
Adds the 64-bit
.I time_enabled
field.
This can be used to calculate estimated totals if
the PMU is overcommitted and multiplexing is happening.
.TP
.B PERF_FORMAT_TOTAL_TIME_RUNNING
Adds the 64-bit
.I time_running
field.
This can be used to calculate estimated totals if
the PMU is overcommitted and multiplexing is happening.
.TP
.B PERF_FORMAT_ID
Adds a 64-bit unique value that corresponds to the event group.
.TP
.B PERF_FORMAT_GROUP
Allows all counter values in an event group to be read with one read.
.RE
.TP
.IR "disabled"
The
.I disabled
bit specifies whether the counter starts out disabled or enabled.
If disabled, the event can later be enabled by
.BR ioctl (2),
.BR prctl (2),
or
.IR enable_on_exec .

When creating an event group, typically the group leader is initialized
with
.I disabled
set to 1 and any child events are initialized with
.I disabled
set to 0.
Despite
.I disabled
being 0, the child events will not start until the group leader
is enabled.
.TP
.IR "inherit"
The
.I inherit
bit specifies that this counter should count events of child
tasks as well as the task specified.
This applies only to new children, not to any existing children at
the time the counter is created (nor to any new children of
existing children).

Inherit does not work for some combinations of
.IR read_format s,
such as
.BR PERF_FORMAT_GROUP .
.TP
.IR "pinned"
The
.I pinned
bit specifies that the counter should always be on the CPU if at all
possible.
It applies only to hardware counters and only to group leaders.
If a pinned counter cannot be put onto the CPU (e.g., because there are
not enough hardware counters or because of a conflict with some other
event), then the counter goes into an 'error' state, where reads
return end-of-file (i.e.,
.BR read (2)
returns 0) until the counter is subsequently enabled or disabled.
.TP
.IR "exclusive"
The
.I exclusive
bit specifies that when this counter's group is on the CPU,
it should be the only group using the CPU's counters.
In the future this may allow monitoring programs to
support PMU features that need to run alone so that they do not
disrupt other hardware counters.

Note that many unexpected situations may prevent events with the
.I exclusive
bit set from ever running.
This includes any users running a system-wide
measurement as well as any kernel use of the performance counters
(including the commonly enabled NMI Watchdog Timer interface).
.TP
.IR "exclude_user"
If this bit is set, the count excludes events that happen in user space.
.TP
.IR "exclude_kernel"
If this bit is set, the count excludes events that happen in kernel-space.
.TP
.IR "exclude_hv"
If this bit is set, the count excludes events that happen in the
hypervisor.
This is mainly for PMUs that have built-in support for handling this
(such as POWER).
Extra support is needed for handling hypervisor measurements on most
machines.
.TP
.IR "exclude_idle"
If set, don't count when the CPU is idle.
.TP
.IR "mmap"
The
.I mmap
bit enables generation of
.B PERF_RECORD_MMAP
samples for every
.BR mmap (2)
call that has
.B PROT_EXEC
set.
This allows tools to notice new executable code being mapped into
a program (dynamic shared libraries for example)
so that addresses can be mapped back to the original code.
.TP
.IR "comm"
The
.I comm
bit enables tracking of process command name as modified by the
.BR exec (2)
and
.BR prctl (PR_SET_NAME)
system calls as well as writing to
.IR /proc/self/comm .
If the
.I comm_exec
flag is also successfully set (possible since Linux 3.16),
.\" commit 82b897782d10fcc4930c9d4a15b175348fdd2871
then the misc flag
.B PERF_RECORD_MISC_COMM_EXEC
can be used to differentiate the
.BR exec (2)
case from the others.
.TP
.IR "freq"
If this bit is set, then
.I sample_frequency
not
.I sample_period
is used when setting up the sampling interval.
.TP
.IR "inherit_stat"
This bit enables saving of event counts on context switch for
inherited tasks.
This is meaningful only if the
.I inherit
field is set.
.TP
.IR "enable_on_exec"
If this bit is set, a counter is automatically
enabled after a call to
.BR exec (2).
.TP
.IR "task"
If this bit is set, then
fork/exit notifications are included in the ring buffer.
.TP
.IR "watermark"
If set, have an overflow notification happen when we cross the
.I wakeup_watermark
boundary.
Otherwise, overflow notifications happen after
.I wakeup_events
samples.
.TP
.IR "precise_ip" " (since Linux 2.6.35)"
.\" commit ab608344bcbde4f55ec4cd911b686b0ce3eae076
This controls the amount of skid.
Skid is how many instructions
execute between an event of interest happening and the kernel
being able to stop and record the event.
Smaller skid is
better and allows more accurate reporting of which events
correspond to which instructions, but hardware is often limited
with how small this can be.

The values of this are the following:
.RS
.TP
0 -
.B SAMPLE_IP
can have arbitrary skid.
.TP
1 -
.B SAMPLE_IP
must have constant skid.
.TP
2 -
.B SAMPLE_IP
requested to have 0 skid.
.TP
3 -
.B SAMPLE_IP
must have 0 skid.
See also
.BR PERF_RECORD_MISC_EXACT_IP .
.RE
.TP
.IR "mmap_data" " (since Linux 2.6.36)"
.\" commit 3af9e859281bda7eb7c20b51879cf43aa788ac2e
The counterpart of the
.I mmap
field.
This enables generation of
.B PERF_RECORD_MMAP
samples for
.BR mmap (2)
calls that do not have
.B PROT_EXEC
set (for example data and SysV shared memory).
.TP
.IR "sample_id_all" " (since Linux 2.6.38)"
.\" commit c980d1091810df13f21aabbce545fd98f545bbf7
If set, then TID, TIME, ID, STREAM_ID, and CPU can
additionally be included in
.RB non- PERF_RECORD_SAMPLE s
if the corresponding
.I sample_type
is selected.

If
.B PERF_SAMPLE_IDENTIFIER
is specified, then an additional ID value is included
as the last value to ease parsing the record stream.
This may lead to the
.I id
value appearing twice.

The layout is described by this pseudo-structure:
.in +4n
.nf
struct sample_id {
    { u32 pid, tid; } /* if PERF_SAMPLE_TID set        */
    { u64 time;     } /* if PERF_SAMPLE_TIME set       */
    { u64 id;       } /* if PERF_SAMPLE_ID set         */
    { u64 stream_id;} /* if PERF_SAMPLE_STREAM_ID set  */
    { u32 cpu, res; } /* if PERF_SAMPLE_CPU set        */
    { u64 id;       } /* if PERF_SAMPLE_IDENTIFIER set */
};
.fi
.TP
.IR "exclude_host" " (since Linux 3.2)"
.\" commit a240f76165e6255384d4bdb8139895fac7988799
Do not measure time spent in VM host.
.TP
.IR "exclude_guest" " (since Linux 3.2)"
.\" commit a240f76165e6255384d4bdb8139895fac7988799
Do not measure time spent in VM guest.
.TP
.IR "exclude_callchain_kernel" " (since Linux 3.7)"
.\" commit d077526485d5c9b12fe85d0b2b3b7041e6bc5f91
Do not include kernel callchains.
.TP
.IR "exclude_callchain_user" " (since Linux 3.7)"
.\" commit d077526485d5c9b12fe85d0b2b3b7041e6bc5f91
Do not include user callchains.
.TP
.IR "mmap2" " (since Linux 3.16)"
.\" commit 13d7a2410fa637f450a29ecb515ac318ee40c741
.\" This is tricky; was committed during 3.12 development
.\" but right before release was disabled.
.\" So while you could select mmap2 starting with 3.12
.\" it did not work until 3.16
.\" commit a5a5ba72843dd05f991184d6cb9a4471acce1005
Generate an extended executable mmap record that contains enough
additional information to uniquely identify shared mappings.
The
.I mmap
flag must also be set for this to work.
.TP
.IR "comm_exec" " (since Linux 3.16)"
.\" commit 82b897782d10fcc4930c9d4a15b175348fdd2871
This is purely a feature-detection flag, it does not change
kernel behavior.
If this flag can successfully be set, then, when
.I comm
is enabled, the
.B PERF_RECORD_MISC_COMM_EXEC
flag will be set in the
.I misc
field of a comm record header if the rename event being
reported was caused by a call to
.BR exec (2).
This allows tools to distinguish between the various
types of process renaming.
.TP
.IR "wakeup_events" ", " "wakeup_watermark"
This union sets how many samples
.RI ( wakeup_events )
or bytes
.RI ( wakeup_watermark )
happen before an overflow notification happens.
Which one is used is selected by the
.I watermark
bit flag.

.I wakeup_events
counts only
.B PERF_RECORD_SAMPLE
record types.
To receive overflow notification for all
.B PERF_RECORD
types choose watermark and set
.I wakeup_watermark
to 1.

Prior to Linux 3.0 setting
.\" commit f506b3dc0ec454a16d40cab9ee5d75435b39dc50
.I wakeup_events
to 0 resulted in no overflow notifications;
more recent kernels treat 0 the same as 1.
.TP
.IR "bp_type" " (since Linux 2.6.33)"
.\" commit 24f1e32c60c45c89a997c73395b69c8af6f0a84e
This chooses the breakpoint type.
It is one of:
.RS
.TP
.BR HW_BREAKPOINT_EMPTY
No breakpoint.
.TP
.BR HW_BREAKPOINT_R
Count when we read the memory location.
.TP
.BR HW_BREAKPOINT_W
Count when we write the memory location.
.TP
.BR HW_BREAKPOINT_RW
Count when we read or write the memory location.
.TP
.BR HW_BREAKPOINT_X
Count when we execute code at the memory location.
.LP
The values can be combined via a bitwise or, but the
combination of
.B HW_BREAKPOINT_R
or
.B HW_BREAKPOINT_W
with
.B HW_BREAKPOINT_X
is not allowed.
.RE
.TP
.IR "bp_addr" " (since Linux 2.6.33)"
.\" commit 24f1e32c60c45c89a997c73395b69c8af6f0a84e
.I bp_addr
address of the breakpoint.
For execution breakpoints this is the memory address of the instruction
of interest; for read and write breakpoints it is the memory address
of the memory location of interest.
.TP
.IR "config1" " (since Linux 2.6.39)"
.\" commit a7e3ed1e470116c9d12c2f778431a481a6be8ab6
.I config1
is used for setting events that need an extra register or otherwise
do not fit in the regular config field.
Raw OFFCORE_EVENTS on Nehalem/Westmere/SandyBridge use this field
on 3.3 and later kernels.
.TP
.IR "bp_len" " (since Linux 2.6.33)"
.\" commit 24f1e32c60c45c89a997c73395b69c8af6f0a84e
.I bp_len
is the length of the breakpoint being measured if
.I type
is
.BR PERF_TYPE_BREAKPOINT .
Options are
.BR HW_BREAKPOINT_LEN_1 ,
.BR HW_BREAKPOINT_LEN_2 ,
.BR HW_BREAKPOINT_LEN_4 ,
.BR HW_BREAKPOINT_LEN_8 .
For an execution breakpoint, set this to
.IR sizeof(long) .
.TP
.IR "config2" " (since Linux 2.6.39)"
.\" commit a7e3ed1e470116c9d12c2f778431a481a6be8ab6

.I config2
is a further extension of the
.I config1
field.
.TP
.IR "branch_sample_type" " (since Linux 3.4)"
.\" commit bce38cd53e5ddba9cb6d708c4ef3d04a4016ec7e
If
.B PERF_SAMPLE_BRANCH_STACK
is enabled, then this specifies what branches to include
in the branch record.

The first part of the value is the privilege level, which
is a combination of one of the following values.
If the user does not set privilege level explicitly, the kernel
will use the event's privilege level.
Event and branch privilege levels do not have to match.
.RS
.TP
.B PERF_SAMPLE_BRANCH_USER
Branch target is in user space.
.TP
.B PERF_SAMPLE_BRANCH_KERNEL
Branch target is in kernel space.
.TP
.B PERF_SAMPLE_BRANCH_HV
Branch target is in hypervisor.
.TP
.B PERF_SAMPLE_BRANCH_PLM_ALL
A convenience value that is the three preceding values ORed together.

.P
In addition to the privilege value, at least one or more of the
following bits must be set.

.TP
.B PERF_SAMPLE_BRANCH_ANY
Any branch type.
.TP
.B PERF_SAMPLE_BRANCH_ANY_CALL
Any call branch.
.TP
.B PERF_SAMPLE_BRANCH_ANY_RETURN
Any return branch.
.TP
.B PERF_SAMPLE_BRANCH_IND_CALL
Indirect calls.
.TP
.BR PERF_SAMPLE_BRANCH_COND " (since Linux 3.16)"
.\" commit bac52139f0b7ab31330e98fd87fc5a2664951050
Conditional branches.
.TP
.BR PERF_SAMPLE_BRANCH_ABORT_TX " (since Linux 3.11)"
.\" commit 135c5612c460f89657c4698fe2ea753f6f667963
Transactional memory aborts.
.TP
.BR PERF_SAMPLE_BRANCH_IN_TX " (since Linux 3.11)"
.\" commit 135c5612c460f89657c4698fe2ea753f6f667963
Branch in transactional memory transaction.
.TP
.BR PERF_SAMPLE_BRANCH_NO_TX " (since Linux 3.11)"
.\" commit 135c5612c460f89657c4698fe2ea753f6f667963
Branch not in transactional memory transaction.
.RE

.TP
.IR "sample_regs_user" " (since Linux 3.7)"
.\" commit 4018994f3d8785275ef0e7391b75c3462c029e56
This bit mask defines the set of user CPU registers to dump on samples.
The layout of the register mask is architecture-specific and
described in the kernel header
.IR arch/ARCH/include/uapi/asm/perf_regs.h .
.TP
.IR "sample_stack_user" " (since Linux 3.7)"
.\" commit c5ebcedb566ef17bda7b02686e0d658a7bb42ee7
This defines the size of the user stack to dump if
.B PERF_SAMPLE_STACK_USER
is specified.
.SS Reading results
Once a
.BR perf_event_open ()
file descriptor has been opened, the values
of the events can be read from the file descriptor.
The values that are there are specified by the
.I read_format
field in the
.I attr
structure at open time.

If you attempt to read into a buffer that is not big enough to hold the
data
.B ENOSPC
is returned

Here is the layout of the data returned by a read:
.IP * 2
If
.B PERF_FORMAT_GROUP
was specified to allow reading all events in a group at once:

.in +4n
.nf
struct read_format {
    u64 nr;            /* The number of events */
    u64 time_enabled;  /* if PERF_FORMAT_TOTAL_TIME_ENABLED */
    u64 time_running;  /* if PERF_FORMAT_TOTAL_TIME_RUNNING */
    struct {
        u64 value;     /* The value of the event */
        u64 id;        /* if PERF_FORMAT_ID */
    } values[nr];
};
.fi
.in
.IP *
If
.B PERF_FORMAT_GROUP
was
.I not
specified:

.in +4n
.nf
struct read_format {
    u64 value;         /* The value of the event */
    u64 time_enabled;  /* if PERF_FORMAT_TOTAL_TIME_ENABLED */
    u64 time_running;  /* if PERF_FORMAT_TOTAL_TIME_RUNNING */
    u64 id;            /* if PERF_FORMAT_ID */
};
.fi
.in
.PP
The values read are as follows:
.TP
.I nr
The number of events in this file descriptor.
Only available if
.B PERF_FORMAT_GROUP
was specified.
.TP
.IR time_enabled ", " time_running
Total time the event was enabled and running.
Normally these are the same.
If more events are started,
then available counter slots on the PMU, then multiplexing
happens and events run only part of the time.
In that case, the
.I time_enabled
and
.I time running
values can be used to scale an estimated value for the count.
.TP
.I value
An unsigned 64-bit value containing the counter result.
.TP
.I id
A globally unique value for this particular event, only present if
.B PERF_FORMAT_ID
was specified in
.IR read_format .
.SS MMAP layout
When using
.BR perf_event_open ()
in sampled mode, asynchronous events
(like counter overflow or
.B PROT_EXEC
mmap tracking)
are logged into a ring-buffer.
This ring-buffer is created and accessed through
.BR mmap (2).

The mmap size should be 1+2^n pages, where the first page is a
metadata page
.RI ( "struct perf_event_mmap_page" )
that contains various
bits of information such as where the ring-buffer head is.

Before kernel 2.6.39, there is a bug that means you must allocate a mmap
ring buffer when sampling even if you do not plan to access it.

The structure of the first metadata mmap page is as follows:

.in +4n
.nf
struct perf_event_mmap_page {
    __u32 version;        /* version number of this structure */
    __u32 compat_version; /* lowest version this is compat with */
    __u32 lock;           /* seqlock for synchronization */
    __u32 index;          /* hardware counter identifier */
    __s64 offset;         /* add to hardware counter value */
    __u64 time_enabled;   /* time event active */
    __u64 time_running;   /* time event on CPU */
    union {
        __u64   capabilities;
        struct {
            __u64 cap_usr_time / cap_usr_rdpmc / cap_bit0 : 1,
                  cap_bit0_is_deprecated : 1,
                  cap_user_rdpmc         : 1,
                  cap_user_time          : 1,
                  cap_user_time_zero     : 1,
        };
    };
    __u16 pmc_width;
    __u16 time_shift;
    __u32 time_mult;
    __u64 time_offset;
    __u64 __reserved[120];   /* Pad to 1k */
    __u64 data_head;         /* head in the data section */
    __u64 data_tail;         /* user-space written tail */
}
.fi
.in

The following list describes the fields in the
.I perf_event_mmap_page
structure in more detail:
.TP
.I version
Version number of this structure.
.TP
.I compat_version
The lowest version this is compatible with.
.TP
.I lock
A seqlock for synchronization.
.TP
.I index
A unique hardware counter identifier.
.TP
.I offset
When using rdpmc for reads this offset value
must be added to the one returned by rdpmc to get
the current total event count.
.TP
.I time_enabled
Time the event was active.
.TP
.I time_running
Time the event was running.
.TP
.IR cap_usr_time " / " cap_usr_rdpmc " / " cap_bit0 " (since Linux 3.4)"
.\" commit c7206205d00ab375839bd6c7ddb247d600693c09
There was a bug in the definition of
.I cap_usr_time
and
.I cap_usr_rdpmc
from Linux 3.4 until Linux 3.11.
Both bits were defined to point to the same location, so it was
impossible to know if
.I cap_usr_time
or
.I cap_usr_rdpmc
were actually set.

Starting with Linux 3.12, these are renamed to
.\" commit fa7315871046b9a4c48627905691dbde57e51033
.I cap_bit0
and you should use the
.I cap_user_time
and
.I cap_user_rdpmc
fields instead.

.TP
.IR cap_bit0_is_deprecated " (since Linux 3.12)"
.\" commit fa7315871046b9a4c48627905691dbde57e51033
If set, this bit indicates that the kernel supports
the properly separated
.I cap_user_time
and
.I cap_user_rdpmc
bits.

If not-set, it indicates an older kernel where
.I cap_usr_time
and
.I cap_usr_rdpmc
map to the same bit and thus both features should
be used with caution.

.TP
.IR cap_user_rdpmc " (since Linux 3.12)"
.\" commit fa7315871046b9a4c48627905691dbde57e51033
If the hardware supports user-space read of performance counters
without syscall (this is the "rdpmc" instruction on x86), then
the following code can be used to do a read:

.in +4n
.nf
u32 seq, time_mult, time_shift, idx, width;
u64 count, enabled, running;
u64 cyc, time_offset;

do {
    seq = pc\->lock;
    barrier();
    enabled = pc\->time_enabled;
    running = pc\->time_running;

    if (pc\->cap_usr_time && enabled != running) {
        cyc = rdtsc();
        time_offset = pc\->time_offset;
        time_mult   = pc\->time_mult;
        time_shift  = pc\->time_shift;
    }

    idx = pc\->index;
    count = pc\->offset;

    if (pc\->cap_usr_rdpmc && idx) {
        width = pc\->pmc_width;
        count += rdpmc(idx \- 1);
    }

    barrier();
} while (pc\->lock != seq);
.fi
.in
.TP
.IR cap_user_time " (since Linux 3.12)"
.\" commit fa7315871046b9a4c48627905691dbde57e51033
This bit indicates the hardware has a constant, nonstop
timestamp counter (TSC on x86).
.TP
.IR cap_user_time_zero " (since Linux 3.12)"
.\" commit fa7315871046b9a4c48627905691dbde57e51033
Indicates the presence of
.I time_zero
which allows mapping timestamp values to
the hardware clock.
.TP
.I pmc_width
If
.IR cap_usr_rdpmc ,
this field provides the bit-width of the value
read using the rdpmc or equivalent instruction.
This can be used to sign extend the result like:

.in +4n
.nf
pmc <<= 64 \- pmc_width;
pmc >>= 64 \- pmc_width; // signed shift right
count += pmc;
.fi
.in
.TP
.IR time_shift ", " time_mult ", " time_offset

If
.IR cap_usr_time ,
these fields can be used to compute the time
delta since time_enabled (in nanoseconds) using rdtsc or similar.
.nf

    u64 quot, rem;
    u64 delta;
    quot = (cyc >> time_shift);
    rem = cyc & ((1 << time_shift) \- 1);
    delta = time_offset + quot * time_mult +
            ((rem * time_mult) >> time_shift);
.fi

Where
.IR time_offset ,
.IR time_mult ,
.IR time_shift ,
and
.IR cyc
are read in the
seqcount loop described above.
This delta can then be added to
enabled and possible running (if idx), improving the scaling:
.nf

    enabled += delta;
    if (idx)
        running += delta;
    quot = count / running;
    rem  = count % running;
    count = quot * enabled + (rem * enabled) / running;
.fi
.TP
.IR time_zero " (since Linux 3.12)"
.\" commit fa7315871046b9a4c48627905691dbde57e51033

If
.I cap_usr_time_zero
is set, then the hardware clock (the TSC timestamp counter on x86)
can be calculated from the
.IR time_zero ", " time_mult ", and " time_shift " values:"

.nf
    time = timestamp - time_zero;
    quot = time / time_mult;
    rem  = time % time_mult;
    cyc = (quot << time_shift) + (rem << time_shift) / time_mult;
.fi

And vice versa:

.nf
    quot = cyc >> time_shift;
    rem  = cyc & ((1 << time_shift) - 1);
    timestamp = time_zero + quot * time_mult +
        ((rem * time_mult) >> time_shift);
.fi
.TP
.I data_head
This points to the head of the data section.
The value continuously increases, it does not wrap.
The value needs to be manually wrapped by the size of the mmap buffer
before accessing the samples.

On SMP-capable platforms, after reading the
.I data_head
value,
user space should issue an rmb().
.TP
.I data_tail
When the mapping is
.BR PROT_WRITE ,
the
.I data_tail
value should be written by user space to reflect the last read data.
In this case, the kernel will not overwrite unread data.
.PP
The following 2^n ring-buffer pages have the layout described below.

If
.I perf_event_attr.sample_id_all
is set, then all event types will
have the sample_type selected fields related to where/when (identity)
an event took place (TID, TIME, ID, CPU, STREAM_ID) described in
.B PERF_RECORD_SAMPLE
below, it will be stashed just after the
.I perf_event_header
and the fields already present for the existing
fields, that is, at the end of the payload.
That way a newer perf.data
file will be supported by older perf tools, with these new optional
fields being ignored.

The mmap values start with a header:

.in +4n
.nf
struct perf_event_header {
    __u32   type;
    __u16   misc;
    __u16   size;
};
.fi
.in

Below, we describe the
.I perf_event_header
fields in more detail.
For ease of reading,
the fields with shorter descriptions are presented first.
.TP
.I size
This indicates the size of the record.
.TP
.I misc
The
.I misc
field contains additional information about the sample.

The CPU mode can be determined from this value by masking with
.B PERF_RECORD_MISC_CPUMODE_MASK
and looking for one of the following (note these are not
bit masks, only one can be set at a time):
.RS
.TP
.B PERF_RECORD_MISC_CPUMODE_UNKNOWN
Unknown CPU mode.
.TP
.B PERF_RECORD_MISC_KERNEL
Sample happened in the kernel.
.TP
.B PERF_RECORD_MISC_USER
Sample happened in user code.
.TP
.B PERF_RECORD_MISC_HYPERVISOR
Sample happened in the hypervisor.
.TP
.BR PERF_RECORD_MISC_GUEST_KERNEL " (since Linux 2.6.35)"
.\" commit 39447b386c846bbf1c56f6403c5282837486200f
Sample happened in the guest kernel.
.TP
.B PERF_RECORD_MISC_GUEST_USER " (since Linux 2.6.35)"
.\" commit 39447b386c846bbf1c56f6403c5282837486200f
Sample happened in guest user code.
.RE

.RS
In addition, one of the following bits can be set:
.TP
.BR PERF_RECORD_MISC_MMAP_DATA " (since Linux 3.10)"
.\" commit 2fe85427e3bf65d791700d065132772fc26e4d75
This is set when the mapping is not executable;
otherwise the mapping is executable.
.TP
.BR PERF_RECORD_MISC_COMM_EXEC " (since Linux 3.16)"
.\" commit 82b897782d10fcc4930c9d4a15b175348fdd2871
This is set for a
.B PERF_RECORD_COMM
record on kernels more recent than Linux 3.16
if a process name change was caused by an
.BR exec (2)
system call.
It is an alias for
.B PERF_RECORD_MISC_MMAP_DATA
since the two values would not be set in the same record.
.TP
.B PERF_RECORD_MISC_EXACT_IP
This indicates that the content of
.B PERF_SAMPLE_IP
points
to the actual instruction that triggered the event.
See also
.IR perf_event_attr.precise_ip .
.TP
.BR PERF_RECORD_MISC_EXT_RESERVED " (since Linux 2.6.35)"
.\" commit 1676b8a077c352085d52578fb4f29350b58b6e74
This indicates there is extended data available (currently not used).
.RE
.TP
.I type
The
.I type
value is one of the below.
The values in the corresponding record (that follows the header)
depend on the
.I type
selected as shown.

.RS
.TP 4
.B PERF_RECORD_MMAP
The MMAP events record the
.B PROT_EXEC
mappings so that we can correlate
user-space IPs to code.
They have the following structure:

.in +4n
.nf
struct {
    struct perf_event_header header;
    u32    pid, tid;
    u64    addr;
    u64    len;
    u64    pgoff;
    char   filename[];
};
.fi
.in
.RS
.TP
.I pid
is the process ID.
.TP
.I tid
is the thread ID.
.TP
.I addr
is the address of the allocated memory.
.I len
is the length of the allocated memory.
.I pgoff
is the page offset of the allocated memory.
.I filename
is a string describing the backing of the allocated memory.
.RE
.TP
.B PERF_RECORD_LOST
This record indicates when events are lost.

.in +4n
.nf
struct {
    struct perf_event_header header;
    u64 id;
    u64 lost;
    struct sample_id sample_id;
};
.fi
.in
.RS
.TP
.I id
is the unique event ID for the samples that were lost.
.TP
.I lost
is the number of events that were lost.
.RE
.TP
.B PERF_RECORD_COMM
This record indicates a change in the process name.

.in +4n
.nf
struct {
    struct perf_event_header header;
    u32 pid;
    u32 tid;
    char comm[];
    struct sample_id sample_id;
};
.fi
.in
.RS
.TP
.I pid
is the process ID.
.TP
.I tid
is the thread ID.
.TP
.I comm
is a string containing the new name of the process.
.RE
.TP
.B PERF_RECORD_EXIT
This record indicates a process exit event.

.in +4n
.nf
struct {
    struct perf_event_header header;
    u32 pid, ppid;
    u32 tid, ptid;
    u64 time;
    struct sample_id sample_id;
};
.fi
.in
.TP
.BR PERF_RECORD_THROTTLE ", " PERF_RECORD_UNTHROTTLE
This record indicates a throttle/unthrottle event.

.in +4n
.nf
struct {
    struct perf_event_header header;
    u64 time;
    u64 id;
    u64 stream_id;
    struct sample_id sample_id;
};
.fi
.in
.TP
.B PERF_RECORD_FORK
This record indicates a fork event.

.in +4n
.nf
struct {
    struct perf_event_header header;
    u32 pid, ppid;
    u32 tid, ptid;
    u64 time;
    struct sample_id sample_id;
};
.fi
.in
.TP
.B PERF_RECORD_READ
This record indicates a read event.

.in +4n
.nf
struct {
    struct perf_event_header header;
    u32 pid, tid;
    struct read_format values;
    struct sample_id sample_id;
};
.fi
.in
.TP
.B PERF_RECORD_SAMPLE
This record indicates a sample.

.in +4n
.nf
struct {
    struct perf_event_header header;
    u64   sample_id;  /* if PERF_SAMPLE_IDENTIFIER */
    u64   ip;         /* if PERF_SAMPLE_IP */
    u32   pid, tid;   /* if PERF_SAMPLE_TID */
    u64   time;       /* if PERF_SAMPLE_TIME */
    u64   addr;       /* if PERF_SAMPLE_ADDR */
    u64   id;         /* if PERF_SAMPLE_ID */
    u64   stream_id;  /* if PERF_SAMPLE_STREAM_ID */
    u32   cpu, res;   /* if PERF_SAMPLE_CPU */
    u64   period;     /* if PERF_SAMPLE_PERIOD */
    struct read_format v; /* if PERF_SAMPLE_READ */
    u64   nr;         /* if PERF_SAMPLE_CALLCHAIN */
    u64   ips[nr];    /* if PERF_SAMPLE_CALLCHAIN */
    u32   size;       /* if PERF_SAMPLE_RAW */
    char  data[size]; /* if PERF_SAMPLE_RAW */
    u64   bnr;        /* if PERF_SAMPLE_BRANCH_STACK */
    struct perf_branch_entry lbr[bnr];
                      /* if PERF_SAMPLE_BRANCH_STACK */
    u64   abi;        /* if PERF_SAMPLE_REGS_USER */
    u64   regs[weight(mask)];
                      /* if PERF_SAMPLE_REGS_USER */
    u64   size;       /* if PERF_SAMPLE_STACK_USER */
    char  data[size]; /* if PERF_SAMPLE_STACK_USER */
    u64   dyn_size;   /* if PERF_SAMPLE_STACK_USER */
    u64   weight;     /* if PERF_SAMPLE_WEIGHT */
    u64   data_src;   /* if PERF_SAMPLE_DATA_SRC */
    u64   transaction;/* if PERF_SAMPLE_TRANSACTION */
};
.fi
.RS 4
.TP 4
.I sample_id
If
.B PERF_SAMPLE_IDENTIFIER
is enabled, a 64-bit unique ID is included.
This is a duplication of the
.B PERF_SAMPLE_ID
.I id
value, but included at the beginning of the sample
so parsers can easily obtain the value.
.TP
.I ip
If
.B PERF_SAMPLE_IP
is enabled, then a 64-bit instruction
pointer value is included.
.TP
.IR pid ", " tid
If
.B PERF_SAMPLE_TID
is enabled, then a 32-bit process ID
and 32-bit thread ID are included.
.TP
.I time
If
.B PERF_SAMPLE_TIME
is enabled, then a 64-bit timestamp
is included.
This is obtained via local_clock() which is a hardware timestamp
if available and the jiffies value if not.
.TP
.I addr
If
.B PERF_SAMPLE_ADDR
is enabled, then a 64-bit address is included.
This is usually the address of a tracepoint,
breakpoint, or software event; otherwise the value is 0.
.TP
.I id
If
.B PERF_SAMPLE_ID
is enabled, a 64-bit unique ID is included.
If the event is a member of an event group, the group leader ID is returned.
This ID is the same as the one returned by
.BR PERF_FORMAT_ID .
.TP
.I stream_id
If
.B PERF_SAMPLE_STREAM_ID
is enabled, a 64-bit unique ID is included.
Unlike
.B PERF_SAMPLE_ID
the actual ID is returned, not the group leader.
This ID is the same as the one returned by
.BR PERF_FORMAT_ID .
.TP
.IR cpu ", " res
If
.B PERF_SAMPLE_CPU
is enabled, this is a 32-bit value indicating
which CPU was being used, in addition to a reserved (unused)
32-bit value.
.TP
.I period
If
.B PERF_SAMPLE_PERIOD
is enabled, a 64-bit value indicating
the current sampling period is written.
.TP
.I v
If
.B PERF_SAMPLE_READ
is enabled, a structure of type read_format
is included which has values for all events in the event group.
The values included depend on the
.I read_format
value used at
.BR perf_event_open ()
time.
.TP
.IR nr ", " ips[nr]
If
.B PERF_SAMPLE_CALLCHAIN
is enabled, then a 64-bit number is included
which indicates how many following 64-bit instruction pointers will
follow.
This is the current callchain.
.TP
.IR size ", " data[size]
If
.B PERF_SAMPLE_RAW
is enabled, then a 32-bit value indicating size
is included followed by an array of 8-bit values of length size.
The values are padded with 0 to have 64-bit alignment.

This RAW record data is opaque with respect to the ABI.
The ABI doesn't make any promises with respect to the stability
of its content, it may vary depending
on event, hardware, and kernel version.
.TP
.IR bnr ", " lbr[bnr]
If
.B PERF_SAMPLE_BRANCH_STACK
is enabled, then a 64-bit value indicating
the number of records is included, followed by
.I bnr
.I perf_branch_entry
structures which each include the fields:
.RS
.TP
.I from
This indicates the source instruction (may not be a branch).
.TP
.I to
The branch target.
.TP
.I mispred
The branch target was mispredicted.
.TP
.I predicted
The branch target was predicted.
.TP
.IR in_tx " (since Linux 3.11)"
.\" commit 135c5612c460f89657c4698fe2ea753f6f667963
The branch was in a transactional memory transaction.
.TP
.IR abort " (since Linux 3.11)"
.\" commit 135c5612c460f89657c4698fe2ea753f6f667963
The branch was in an aborted transactional memory transaction.

.P
The entries are from most to least recent, so the first entry
has the most recent branch.

Support for
.I mispred
and
.I predicted
is optional; if not supported, both
values will be 0.

The type of branches recorded is specified by the
.I branch_sample_type
field.
.RE

.TP
.IR abi ", " regs[weight(mask)]
If
.B PERF_SAMPLE_REGS_USER
is enabled, then the user CPU registers are recorded.

The
.I abi
field is one of
.BR PERF_SAMPLE_REGS_ABI_NONE ", " PERF_SAMPLE_REGS_ABI_32 " or "
.BR PERF_SAMPLE_REGS_ABI_64 .

The
.I regs
field is an array of the CPU registers that were specified by
the
.I sample_regs_user
attr field.
The number of values is the number of bits set in the
.I sample_regs_user
bit mask.
.TP
.IR size ", " data[size] ", " dyn_size
If
.B PERF_SAMPLE_STACK_USER
is enabled, then the user stack is recorded.
This can be used to generate stack backtraces.
.I size
is the size requested by the user in
.I sample_stack_user
or else the maximum record size.
.I data
is the stack data (a raw dump of the memory pointed to by the
stack pointer at the time of sampling).
.I dyn_size
is the amount of data actually dumped (can be less than
.IR size ).
.TP
.I weight
If
.B PERF_SAMPLE_WEIGHT
is enabled, then a 64-bit value provided by the hardware
is recorded that indicates how costly the event was.
This allows expensive events to stand out more clearly
in profiles.
.TP
.I data_src
If
.B PERF_SAMPLE_DATA_SRC
is enabled, then a 64-bit value is recorded that is made up of
the following fields:
.RS
.TP 4
.I mem_op
Type of opcode, a bitwise combination of:

.PD 0
.RS
.TP 24
.B PERF_MEM_OP_NA
Not available
.TP
.B PERF_MEM_OP_LOAD
Load instruction
.TP
.B PERF_MEM_OP_STORE
Store instruction
.TP
.B PERF_MEM_OP_PFETCH
Prefetch
.TP
.B PERF_MEM_OP_EXEC
Executable code
.RE
.PD
.TP
.I mem_lvl
Memory hierarchy level hit or miss, a bitwise combination of
the following, shifted left by
.BR PERF_MEM_LVL_SHIFT :

.PD 0
.RS
.TP 24
.B PERF_MEM_LVL_NA
Not available
.TP
.B PERF_MEM_LVL_HIT
Hit
.TP
.B PERF_MEM_LVL_MISS
Miss
.TP
.B PERF_MEM_LVL_L1
Level 1 cache
.TP
.B PERF_MEM_LVL_LFB
Line fill buffer
.TP
.B PERF_MEM_LVL_L2
Level 2 cache
.TP
.B PERF_MEM_LVL_L3
Level 3 cache
.TP
.B PERF_MEM_LVL_LOC_RAM
Local DRAM
.TP
.B PERF_MEM_LVL_REM_RAM1
Remote DRAM 1 hop
.TP
.B PERF_MEM_LVL_REM_RAM2
Remote DRAM 2 hops
.TP
.B PERF_MEM_LVL_REM_CCE1
Remote cache 1 hop
.TP
.B PERF_MEM_LVL_REM_CCE2
Remote cache 2 hops
.TP
.B PERF_MEM_LVL_IO
I/O memory
.TP
.B PERF_MEM_LVL_UNC
Uncached memory
.RE
.PD
.TP
.I mem_snoop
Snoop mode, a bitwise combination of the following, shifted left by
.BR PERF_MEM_SNOOP_SHIFT :

.PD 0
.RS
.TP 24
.B PERF_MEM_SNOOP_NA
Not available
.TP
.B PERF_MEM_SNOOP_NONE
No snoop
.TP
.B PERF_MEM_SNOOP_HIT
Snoop hit
.TP
.B PERF_MEM_SNOOP_MISS
Snoop miss
.TP
.B PERF_MEM_SNOOP_HITM
Snoop hit modified
.RE
.PD
.TP
.I mem_lock
Lock instruction, a bitwise combination of the following, shifted left by
.BR PERF_MEM_LOCK_SHIFT :

.PD 0
.RS
.TP 24
.B PERF_MEM_LOCK_NA
Not available
.TP
.B PERF_MEM_LOCK_LOCKED
Locked transaction
.RE
.PD
.TP
.I mem_dtlb
TLB access hit or miss, a bitwise combination of the following, shifted
left by
.BR PERF_MEM_TLB_SHIFT :

.PD 0
.RS
.TP 24
.B PERF_MEM_TLB_NA
Not available
.TP
.B PERF_MEM_TLB_HIT
Hit
.TP
.B PERF_MEM_TLB_MISS
Miss
.TP
.B PERF_MEM_TLB_L1
Level 1 TLB
.TP
.B PERF_MEM_TLB_L2
Level 2 TLB
.TP
.B PERF_MEM_TLB_WK
Hardware walker
.TP
.B PERF_MEM_TLB_OS
OS fault handler
.RE
.PD
.RE
.TP
.I transaction
If the
.B PERF_SAMPLE_TRANSACTION
flag is set, then a 64-bit field is recorded describing
the sources of any transactional memory aborts.

The field is a bitwise combination of the following values:
.RS
.TP
.B PERF_TXN_ELISION
Abort from an elision type transaction (Intel-CPU-specific).
.TP
.B PERF_TXN_TRANSACTION
Abort from a generic transaction.
.TP
.B PERF_TXN_SYNC
Synchronous abort (related to the reported instruction).
.TP
.B PERF_TXN_ASYNC
Asynchronous abort (not related to the reported instruction).
.TP
.B PERF_TXN_RETRY
Retryable abort (retrying the transaction may have succeeded).
.TP
.B PERF_TXN_CONFLICT
Abort due to memory conflicts with other threads.
.TP
.B PERF_TXN_CAPACITY_WRITE
Abort due to write capacity overflow.
.TP
.B PERF_TXN_CAPACITY_READ
Abort due to read capacity overflow.
.RE
.IP
In addition, a user-specified abort code can be obtained from
the high 32 bits of the field by shifting right by
.B PERF_TXN_ABORT_SHIFT
and masking with
.BR PERF_TXN_ABORT_MASK .
.RE
.TP
.B PERF_RECORD_MMAP2
This record includes extended information on
.BR mmap (2)
calls returning executable mappings.
The format is similar to that of the
.B PERF_RECORD_MMAP
record, but includes extra values that allow uniquely identifying
shared mappings.

.in +4n
.nf
struct {
    struct perf_event_header header;
    u32 pid;
    u32 tid;
    u64 addr;
    u64 len;
    u64 pgoff;
    u32 maj;
    u32 min;
    u64 ino;
    u64 ino_generation;
    u32 prot;
    u32 flags;
    char filename[];
    struct sample_id sample_id;
};
.fi
.RS
.TP
.I pid
is the process ID.
.TP
.I tid
is the thread ID.
.TP
.I addr
is the address of the allocated memory.
.TP
.I len
is the length of the allocated memory.
.TP
.I pgoff
is the page offset of the allocated memory.
.TP
.I maj
is the major ID of the underlying device.
.TP
.I min
is the minor ID of the underlying device.
.TP
.I ino
is the inode number.
.TP
.I ino_generation
is the inode generation.
.TP
.I prot
is the protection information.
.TP
.I flags
is the flags information.
.TP
.I filename
is a string describing the backing of the allocated memory.
.RE
.RE
.SS Overflow handling
Events can be set to notify when a threshold is crossed,
indicating an overflow.
Overflow conditions can be captured by monitoring the
event file descriptor with
.BR poll (2),
.BR select (2),
or
.BR epoll (2).
Alternately, a SIGIO signal handler can be created and
the event configured with
.BR fcntl (2)
to generate SIGIO signals.

Overflows are generated only by sampling events
.RI ( sample_period
must have a nonzero value).

There are two ways to generate overflow notifications.

The first is to set a
.I wakeup_events
or
.I wakeup_watermark
value that will trigger if a certain number of samples
or bytes have been written to the mmap ring buffer.
In this case
.B POLL_IN
is indicated.

The other way is by use of the
.B PERF_EVENT_IOC_REFRESH
ioctl.
This ioctl adds to a counter that decrements each time the event overflows.
When nonzero,
.B POLL_IN
is indicated, but
once the counter reaches 0
.B POLL_HUP
is indicated and
the underlying event is disabled.

Refreshing an event group leader refreshes all siblings and
refreshing with a parameter of 0 currently enables infinite
refreshes;
these behaviors are unsupported and should not be relied on.
.\" See https://lkml.org/lkml/2011/5/24/337

Starting with Linux 3.18,
.\" commit 179033b3e064d2cd3f5f9945e76b0a0f0fbf4883
.B POLL_HUP
is indicated if the event being monitored is attached to a different
process and that process exits.
.SS rdpmc instruction
Starting with Linux 3.4 on x86, you can use the
.\" commit c7206205d00ab375839bd6c7ddb247d600693c09
.I rdpmc
instruction to get low-latency reads without having to enter the kernel.
Note that using
.I rdpmc
is not necessarily faster than other methods for reading event values.

Support for this can be detected with the
.I cap_usr_rdpmc
field in the mmap page; documentation on how
to calculate event values can be found in that section.
.SS perf_event ioctl calls
.PP
Various ioctls act on
.BR perf_event_open ()
file descriptors:
.TP
.B PERF_EVENT_IOC_ENABLE
This enables the individual event or event group specified by the
file descriptor argument.

If the
.B PERF_IOC_FLAG_GROUP
bit is set in the ioctl argument, then all events in a group are
enabled, even if the event specified is not the group leader
(but see BUGS).
.TP
.B PERF_EVENT_IOC_DISABLE
This disables the individual counter or event group specified by the
file descriptor argument.

Enabling or disabling the leader of a group enables or disables the
entire group; that is, while the group leader is disabled, none of the
counters in the group will count.
Enabling or disabling a member of a group other than the leader
affects only that counter; disabling a non-leader
stops that counter from counting but doesn't affect any other counter.

If the
.B PERF_IOC_FLAG_GROUP
bit is set in the ioctl argument, then all events in a group are
disabled, even if the event specified is not the group leader
(but see BUGS).
.TP
.B PERF_EVENT_IOC_REFRESH
Non-inherited overflow counters can use this
to enable a counter for a number of overflows specified by the argument,
after which it is disabled.
Subsequent calls of this ioctl add the argument value to the current
count.
An overflow notification with
.B POLL_IN
set will happen on each overflow until the
count reaches 0; when that happens a notification with
.B POLL_HUP
set is sent and the event is disabled.
Using an argument of 0 is considered undefined behavior.
.TP
.B PERF_EVENT_IOC_RESET
Reset the event count specified by the
file descriptor argument to zero.
This resets only the counts; there is no way to reset the
multiplexing
.I time_enabled
or
.I time_running
values.

If the
.B PERF_IOC_FLAG_GROUP
bit is set in the ioctl argument, then all events in a group are
reset, even if the event specified is not the group leader
(but see BUGS).
.TP
.B PERF_EVENT_IOC_PERIOD
This updates the overflow period for the event.

Since Linux 3.7 (on ARM)
.\" commit 3581fe0ef37ce12ac7a4f74831168352ae848edc
and Linux 3.14 (all other architectures),
.\" commit bad7192b842c83e580747ca57104dd51fe08c223
the new period takes effect immediately.
On older kernels, the new period did not take effect until
after the next overflow.

The argument is a pointer to a 64-bit value containing the
desired new period.

Prior to Linux 2.6.36
.\" commit ad0cf3478de8677f720ee06393b3147819568d6a
this ioctl always failed due to a bug
in the kernel.

.TP
.B PERF_EVENT_IOC_SET_OUTPUT
This tells the kernel to report event notifications to the specified
file descriptor rather than the default one.
The file descriptors must all be on the same CPU.

The argument specifies the desired file descriptor, or \-1 if
output should be ignored.
.TP
.BR PERF_EVENT_IOC_SET_FILTER " (since Linux 2.6.33)"
.\" commit 6fb2915df7f0747d9044da9dbff5b46dc2e20830
This adds an ftrace filter to this event.

The argument is a pointer to the desired ftrace filter.
.TP
.BR PERF_EVENT_IOC_ID " (since Linux 3.12)"
.\" commit cf4957f17f2a89984915ea808876d9c82225b862
This returns the event ID value for the given event file descriptor.

The argument is a pointer to a 64-bit unsigned integer
to hold the result.
.SS Using prctl
A process can enable or disable all the event groups that are
attached to it using the
.BR prctl (2)
.B PR_TASK_PERF_EVENTS_ENABLE
and
.B PR_TASK_PERF_EVENTS_DISABLE
operations.
This applies to all counters on the calling process, whether created by
this process or by another, and does not affect any counters that this
process has created on other processes.
It enables or disables only
the group leaders, not any other members in the groups.
.SS perf_event related configuration files
Files in
.I /proc/sys/kernel/
.RS 4
.TP
.I /proc/sys/kernel/perf_event_paranoid

The
.I perf_event_paranoid
file can be set to restrict access to the performance counters.
.RS
.IP 2 4
allow only user-space measurements.
.IP 1
allow both kernel and user measurements (default).
.IP 0
allow access to CPU-specific data but not raw tracepoint samples.
.IP \-1
no restrictions.
.RE
.IP
The existence of the
.I perf_event_paranoid
file is the official method for determining if a kernel supports
.BR perf_event_open ().
.TP
.I /proc/sys/kernel/perf_event_max_sample_rate

This sets the maximum sample rate.
Setting this too high can allow
users to sample at a rate that impacts overall machine performance
and potentially lock up the machine.
The default value is
100000 (samples per second).
.TP
.I /proc/sys/kernel/perf_event_mlock_kb

Maximum number of pages an unprivileged user can
.BR mlock (2).
The default is 516 (kB).

.RE
Files in
.I /sys/bus/event_source/devices/
.RS 4
Since Linux 2.6.34, the kernel supports having multiple PMUs
available for monitoring.
Information on how to program these PMUs can be found under
.IR /sys/bus/event_source/devices/ .
Each subdirectory corresponds to a different PMU.
.TP
.IR /sys/bus/event_source/devices/*/type " (since Linux 2.6.38)"
.\" commit abe43400579d5de0078c2d3a760e6598e183f871
This contains an integer that can be used in the
.I type
field of
.I perf_event_attr
to indicate that you wish to use this PMU.
.TP
.IR /sys/bus/event_source/devices/*/rdpmc " (since Linux 3.4)"
.\" commit 0c9d42ed4cee2aa1dfc3a260b741baae8615744f
If this file is 1, then direct user-space access to the
performance counter registers is allowed via the rdpmc instruction.
This can be disabled by echoing 0 to the file.
.TP
.IR /sys/bus/event_source/devices/*/format/ " (since Linux 3.4)"
.\" commit 641cc938815dfd09f8fa1ec72deb814f0938ac33
This subdirectory contains information on the architecture-specific
subfields available for programming the various
.I config
fields in the
.I perf_event_attr
struct.

The content of each file is the name of the config field, followed
by a colon, followed by a series of integer bit ranges separated by
commas.
For example, the file
.I event
may contain the value
.I config1:1,6-10,44
which indicates that event is an attribute that occupies bits 1,6-10, and 44
of
.IR perf_event_attr::config1 .
.TP
.IR /sys/bus/event_source/devices/*/events/ " (since Linux 3.4)"
.\" commit 641cc938815dfd09f8fa1ec72deb814f0938ac33
This subdirectory contains files with predefined events.
The contents are strings describing the event settings
expressed in terms of the fields found in the previously mentioned
.I ./format/
directory.
These are not necessarily complete lists of all events supported by
a PMU, but usually a subset of events deemed useful or interesting.

The content of each file is a list of attribute names
separated by commas.
Each entry has an optional value (either hex or decimal).
If no value is specified, then it is assumed to be a single-bit
field with a value of 1.
An example entry may look like this:
.IR event=0x2,inv,ldlat=3 .
.TP
.I /sys/bus/event_source/devices/*/uevent
This file is the standard kernel device interface
for injecting hotplug events.
.TP
.IR /sys/bus/event_source/devices/*/cpumask " (since Linux 3.7)"
.\" commit 314d9f63f385096580e9e2a06eaa0745d92fe4ac
The
.I cpumask
file contains a comma-separated list of integers that
indicate a representative CPU number for each socket (package)
on the motherboard.
This is needed when setting up uncore or northbridge events, as
those PMUs present socket-wide events.
.RE
.SH RETURN VALUE
.BR perf_event_open ()
returns the new file descriptor, or \-1 if an error occurred
(in which case,
.I errno
is set appropriately).
.SH ERRORS
The errors returned by
.BR perf_event_open ()
can be inconsistent, and may
vary across processor architectures and performance monitoring units.
.TP
.B E2BIG
Returned if the
.I perf_event_attr
.I size
value is too small
(smaller than
.BR PERF_ATTR_SIZE_VER0 ),
too big (larger than the page size),
or larger than the kernel supports and the extra bytes are not zero.
When
.B E2BIG
is returned, the
.I perf_event_attr
.I size
field is overwritten by the kernel to be the size of the structure
it was expecting.
.TP
.B EACCES
Returned when the requested event requires
.B CAP_SYS_ADMIN
permissions (or a more permissive perf_event paranoid setting).
Some common cases where an unprivileged process
may encounter this error:
attaching to a process owned by a different user;
monitoring all processes on a given CPU (i.e., specifying the
.I pid
argument as \-1);
and not setting
.I exclude_kernel
when the paranoid setting requires it.
.TP
.B EBADF
Returned if the
.I group_fd
file descriptor is not valid, or, if
.B PERF_FLAG_PID_CGROUP
is set,
the cgroup file descriptor in
.I pid
is not valid.
.TP
.B EFAULT
Returned if the
.I attr
pointer points at an invalid memory address.
.TP
.B EINVAL
Returned if the specified event is invalid.
There are many possible reasons for this.
A not-exhaustive list:
.I sample_freq
is higher than the maximum setting;
the
.I cpu
to monitor does not exist;
.I read_format
is out of range;
.I sample_type
is out of range;
the
.I flags
value is out of range;
.I exclusive
or
.I pinned
set and the event is not a group leader;
the event
.I config
values are out of range or set reserved bits;
the generic event selected is not supported; or
there is not enough room to add the selected event.
.TP
.B EMFILE
Each opened event uses one file descriptor.
If a large number of events are opened the per-user file
descriptor limit (often 1024) will be hit and no more
events can be created.
.TP
.B ENODEV
Returned when the event involves a feature not supported
by the current CPU.
.TP
.B ENOENT
Returned if the
.I type
setting is not valid.
This error is also returned for
some unsupported generic events.
.TP
.B ENOSPC
Prior to Linux 3.3, if there was not enough room for the event,
.\" commit aa2bc1ade59003a379ffc485d6da2d92ea3370a6
.B ENOSPC
was returned.
In Linux 3.3, this was changed to
.BR EINVAL .
.B ENOSPC
is still returned if you try to add more breakpoint events
than supported by the hardware.
.TP
.B ENOSYS
Returned if
.B PERF_SAMPLE_STACK_USER
is set in
.I sample_type
and it is not supported by hardware.
.TP
.B EOPNOTSUPP
Returned if an event requiring a specific hardware feature is
requested but there is no hardware support.
This includes requesting low-skid events if not supported,
branch tracing if it is not available, sampling if no PMU
interrupt is available, and branch stacks for software events.
.TP
.B EPERM
Returned on many (but not all) architectures when an unsupported
.IR exclude_hv ", " exclude_idle ", " exclude_user ", or " exclude_kernel
setting is specified.

It can also happen, as with
.BR EACCES ,
when the requested event requires
.B CAP_SYS_ADMIN
permissions (or a more permissive perf_event paranoid setting).
This includes setting a breakpoint on a kernel address,
and (since Linux 3.13) setting a kernel function-trace tracepoint.
.\" commit a4e95fc2cbb31d70a65beffeaf8773f881328c34
.TP
.B ESRCH
Returned if attempting to attach to a process that does not exist.
.SH VERSION
.BR perf_event_open ()
was introduced in Linux 2.6.31 but was called
.\" commit 0793a61d4df8daeac6492dbf8d2f3e5713caae5e
.BR perf_counter_open ().
It was renamed in Linux 2.6.32.
.\" commit cdd6c482c9ff9c55475ee7392ec8f672eddb7be6
.SH CONFORMING TO
This
.BR perf_event_open ()
system call Linux- specific
and should not be used in programs intended to be portable.
.SH NOTES
Glibc does not provide a wrapper for this system call; call it using
.BR syscall (2).
See the example below.

The official way of knowing if
.BR perf_event_open ()
support is enabled is checking
for the existence of the file
.IR /proc/sys/kernel/perf_event_paranoid .
.SH BUGS
The
.B F_SETOWN_EX
option to
.BR fcntl (2)
is needed to properly get overflow signals in threads.
This was introduced in Linux 2.6.32.
.\" commit ba0a6c9f6fceed11c6a99e8326f0477fe383e6b5

Prior to Linux 2.6.33 (at least for x86),
.\" commit b690081d4d3f6a23541493f1682835c3cd5c54a1
the kernel did not check
if events could be scheduled together until read time.
The same happens on all known kernels if the NMI watchdog is enabled.
This means to see if a given set of events works you have to
.BR perf_event_open (),
start, then read before you know for sure you
can get valid measurements.

Prior to Linux 2.6.34, event constraints were not enforced by the kernel.
In that case, some events would silently return "0" if the kernel
scheduled them in an improper counter slot.
.\" FIXME: cannot find a kernel commit for this one

Prior to Linux 2.6.34, there was a bug when multiplexing where the
wrong results could be returned.
.\" commit 45e16a6834b6af098702e5ea6c9a40de42ff77d8

Kernels from Linux 2.6.35 to Linux 2.6.39 can quickly crash the kernel if
"inherit" is enabled and many threads are started.
.\" commit 38b435b16c36b0d863efcf3f07b34a6fac9873fd

Prior to Linux 2.6.35,
.\" commit 050735b08ca8a016bbace4445fa025b88fee770b
.B PERF_FORMAT_GROUP
did not work with attached processes.

There is a bug in the kernel code between
Linux 2.6.36 and Linux 3.0 that ignores the
"watermark" field and acts as if a wakeup_event
was chosen if the union has a
nonzero value in it.
.\" commit 4ec8363dfc1451f8c8f86825731fe712798ada02

From Linux 2.6.31 to Linux 3.4, the
.B PERF_IOC_FLAG_GROUP
ioctl argument was broken and would repeatedly operate
on the event specified rather than iterating across
all sibling events in a group.
.\" commit 724b6daa13e100067c30cfc4d1ad06629609dc4e

From Linux 3.4 to Linux 3.11, the mmap
.\" commit fa7315871046b9a4c48627905691dbde57e51033
.I cap_usr_rdpmc
and
.I cap_usr_time
bits mapped to the same location.
Code should migrate to the new
.I cap_user_rdpmc
and
.I cap_user_time
fields instead.

Always double-check your results!
Various generalized events have had wrong values.
For example, retired branches measured
the wrong thing on AMD machines until Linux 2.6.35.
.\" commit f287d332ce835f77a4f5077d2c0ef1e3f9ea42d2
.SH EXAMPLE
The following is a short example that measures the total
instruction count of a call to
.BR printf (3).
.nf

#include <stdlib.h>
#include <stdio.h>
#include <unistd.h>
#include <string.h>
#include <sys/ioctl.h>
#include <linux/perf_event.h>
#include <asm/unistd.h>

static long
perf_event_open(struct perf_event_attr *hw_event, pid_t pid,
                int cpu, int group_fd, unsigned long flags)
{
    int ret;

    ret = syscall(__NR_perf_event_open, hw_event, pid, cpu,
                   group_fd, flags);
    return ret;
}

int
main(int argc, char **argv)
{
    struct perf_event_attr pe;
    long long count;
    int fd;

    memset(&pe, 0, sizeof(struct perf_event_attr));
    pe.type = PERF_TYPE_HARDWARE;
    pe.size = sizeof(struct perf_event_attr);
    pe.config = PERF_COUNT_HW_INSTRUCTIONS;
    pe.disabled = 1;
    pe.exclude_kernel = 1;
    pe.exclude_hv = 1;

    fd = perf_event_open(&pe, 0, \-1, \-1, 0);
    if (fd == \-1) {
       fprintf(stderr, "Error opening leader %llx\\n", pe.config);
       exit(EXIT_FAILURE);
    }

    ioctl(fd, PERF_EVENT_IOC_RESET, 0);
    ioctl(fd, PERF_EVENT_IOC_ENABLE, 0);

    printf("Measuring instruction count for this printf\\n");

    ioctl(fd, PERF_EVENT_IOC_DISABLE, 0);
    read(fd, &count, sizeof(long long));

    printf("Used %lld instructions\\n", count);

    close(fd);
}
.fi
.SH SEE ALSO
.BR fcntl (2),
.BR mmap (2),
.BR open (2),
.BR prctl (2),
.BR read (2)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2006 Red Hat, Inc. All Rights Reserved.
.\" and Copyright (C) 2013 Michael Kerrisk <mtk.manpages@gmail.com>
.\" Written by Ivana Varekova <varekova@redhat.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH PERFMONCTL 2 2013-02-13 Linux "Linux Programmer's Manual"
.SH NAME
perfmonctl \- interface to IA-64 performance monitoring unit
.SH SYNOPSIS
.nf
.B #include <syscall.h>
.B #include <perfmon.h>
.sp
.BI "long perfmonctl(int " fd ", int " cmd ", void *" arg ", int " narg ");
.fi
.IR Note :
There is no glibc wrapper for this system call; see NOTES.
.SH DESCRIPTION
The IA-64-specific
.BR perfmonctl ()
system call provides an interface to the
PMU (performance monitoring unit).
The PMU consists of PMD (performance monitoring data) registers and
PMC (performance monitoring control) registers,
which gather hardware statistics.

.BR perfmonctl ()
applies the operation
.I cmd
to the input arguments specified by
.IR arg .
The number of arguments is defined by \fInarg\fR.
The
.I fd
argument specifies the perfmon context to operate on.

Supported values for
.I cmd
are:
.TP
.B PFM_CREATE_CONTEXT
.nf
.BI  "perfmonctl(int " fd ", PFM_CREATE_CONTEXT, pfarg_context_t *" ctxt ", 1);
.fi
Set up a context.

The
.I fd
parameter is ignored.
A new perfmon context is created as specified in
.I ctxt
and its file descriptor is returned in \fIctxt->ctx_fd\fR.

The file descriptor can be used in subsequent calls to
.BR perfmonctl ()
and can be used to read event notifications (type
.IR pfm_msg_t )
using
.BR read (2).
The file descriptor is pollable using
.BR select (2),
.BR poll (2),
and
.BR epoll (7).

The context can be destroyed by calling
.BR close (2)
on the file descriptor.
.TP
.B PFM_WRITE_PMCS
.\" pfm_write_pmcs()
.nf
.BI  "perfmonctl(int " fd ", PFM_WRITE_PMCS, pfarg_reg_t *" pmcs ", n);
.fi
Set PMC registers.
.TP
.B PFM_WRITE_PMDS
.nf
.BI  "perfmonctl(int " fd ", PFM_WRITE_PMDS, pfarg_reg_t *" pmds ", n);
.fi
.\" pfm_write_pmds()
Set PMD registers.
.TP
.B PFM_READ_PMDS
.\" pfm_read_pmds()
.nf
.BI  "perfmonctl(int " fd ", PFM_READ_PMDS, pfarg_reg_t *" pmds ", n);
.fi
Read PMD registers.
.TP
.B PFM_START
.\" pfm_start()
.nf
.\" .BI  "perfmonctl(int " fd ", PFM_START, arg, 1);
.BI  "perfmonctl(int " fd ", PFM_START, NULL, 0);
.fi
Start monitoring.
.TP
.B PFM_STOP
.\" pfm_stop()
.nf
.BI  "perfmonctl(int " fd ", PFM_STOP, NULL, 0);
.fi
Stop monitoring.
.TP
.B PFM_LOAD_CONTEXT
.\" pfm_context_load()
.nf
.BI  "perfmonctl(int " fd ", PFM_LOAD_CONTEXT, pfarg_load_t *" largs ", 1);
.fi
Attach the context to a thread.
.TP
.B PFM_UNLOAD_CONTEXT
.\" pfm_context_unload()
.nf
.BI  "perfmonctl(int " fd ", PFM_UNLOAD_CONTEXT, NULL, 0);
.fi
Detach the context from a thread.
.TP
.B PFM_RESTART
.\" pfm_restart()
.nf
.BI  "perfmonctl(int " fd ", PFM_RESTART, NULL, 0);
.fi
Restart monitoring after receiving an overflow notification.
.TP
.B PFM_GET_FEATURES
.\" pfm_get_features()
.nf
.BI  "perfmonctl(int " fd ", PFM_GET_FEARURES, pfarg_features_t *" arg ", 1);
.fi
.TP
.B PFM_DEBUG
.\" pfm_debug()
.nf
.BI  "perfmonctl(int " fd ", PFM_DEBUG, " val ", 0);
.fi
If
.I val
is nonzero, enable debugging mode, otherwise disable.
.TP
.B PFM_GET_PMC_RESET_VAL
.\" pfm_get_pmc_reset()
.nf
.BI  "perfmonctl(int " fd ", PFM_GET_PMC_RESET_VAL, pfarg_reg_t * " req  ", n);
.fi
Reset PMC registers to default values.
.\"
.\"
.\" .TP
.\" .B PFM_CREATE_EVTSETS
.\"
.\" create or modify event sets
.\" .nf
.\" .BI  "perfmonctl(int " fd ", PFM_CREATE_EVTSETS, pfarg_setdesc_t *desc , n);
.\" .fi
.\" .TP
.\" .B PFM_DELETE_EVTSETS
.\" delete event sets
.\" .nf
.\" .BI  "perfmonctl(int " fd ", PFM_DELETE_EVTSET, pfarg_setdesc_t *desc , n);
.\" .fi
.\" .TP
.\" .B PFM_GETINFO_EVTSETS
.\" get information about event sets
.\" .nf
.\" .BI  "perfmonctl(int " fd ", PFM_GETINFO_EVTSETS, pfarg_setinfo_t *info, n);
.\" .fi
.SH RETURN VALUE
.BR perfmonctl ()
returns zero when the operation is successful.
On error, \-1 is returned and
.I errno
is set to indicate the cause of the error.
.SH VERSIONS
.BR perfmonctl ()
is available since Linux 2.4.
.SH CONFORMING TO
.BR perfmonctl ()
is Linux-specific and is available only on the IA-64 architecture.
.SH NOTES
Glibc does not provide a wrapper for this system call; call it using
.BR syscall (2).
.SH SEE ALSO
.BR gprof (1)

The perfmon2 interface specification
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 1995, Thomas K. Dyas <tdyas@eden.rutgers.edu>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Created   Sat Aug 21 1995     Thomas K. Dyas <tdyas@eden.rutgers.edu>
.\"
.\" typo corrected, aeb, 950825
.\" added layout change from joey, 960722
.\" changed prototype, documented 0xffffffff, aeb, 030101
.\" Modified 2004-11-03 patch from Martin Schulze <joey@infodrom.org>
.\"
.TH PERSONALITY 2 2015-02-01 "Linux" "Linux Programmer's Manual"
.SH NAME
personality \- set the process execution domain
.SH SYNOPSIS
.B #include <sys/personality.h>
.sp
.BI "int personality(unsigned long " persona );
.SH DESCRIPTION
Linux supports different execution domains, or personalities, for each
process.
Among other things, execution domains tell Linux how to map
signal numbers into signal actions.
The execution domain system allows
Linux to provide limited support for binaries compiled under other
UNIX-like operating systems.

If
.I persona
is not
0xffffffff, then
.BR personality ()
sets the caller's execution domain to the value specified by
.IR persona .
Specifying
.IR persona
as 0xffffffff provides a way of retrieving
the current persona without changing it.

A list of the available execution domains can be found in
.IR <sys/personality.h> .
.SH RETURN VALUE
On success, the previous
.I persona
is returned.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EINVAL
The kernel was unable to change the personality.
.SH CONFORMING TO
.BR personality ()
is Linux-specific and should not be used in programs intended to
be portable.
.SH SEE ALSO
.BR setarch (8)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2005, 2008, Michael Kerrisk <mtk.manpages@gmail.com>
.\" (A few fragments remain from an earlier (1992) version by
.\" Drew Eckhardt <drew@cs.colorado.edu>.)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified by Michael Haardt <michael@moria.de>
.\" Modified 1993-07-23 by Rik Faith <faith@cs.unc.edu>
.\" Modified 1996-10-22 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified 2004-06-17 by Michael Kerrisk <mtk.manpages@gmail.com>
.\" Modified 2005, mtk: added an example program
.\" Modified 2008-01-09, mtk: rewrote DESCRIPTION; minor additions
.\"     to EXAMPLE text.
.\" 2008-10-10, mtk: add description of pipe2()
.\"
.TH PIPE 2 2014-07-08 "Linux" "Linux Programmer's Manual"
.SH NAME
pipe, pipe2 \- create pipe
.SH SYNOPSIS
.nf
.B #include <unistd.h>
.sp
.BI "int pipe(int " pipefd "[2]);"
.sp
.BR "#define _GNU_SOURCE" "             /* See feature_test_macros(7) */"
.BR "#include <fcntl.h>" "              /* Obtain O_* constant definitions */
.B #include <unistd.h>
.sp
.BI "int pipe2(int " pipefd "[2], int " flags );
.fi
.SH DESCRIPTION
.BR pipe ()
creates a pipe, a unidirectional data channel that
can be used for interprocess communication.
The array
.IR pipefd
is used to return two file descriptors referring to the ends of the pipe.
.IR pipefd[0]
refers to the read end of the pipe.
.IR pipefd[1]
refers to the write end of the pipe.
Data written to the write end of the pipe is buffered by the kernel
until it is read from the read end of the pipe.
For further details, see
.BR pipe (7).

If
.IR flags
is 0, then
.BR pipe2 ()
is the same as
.BR pipe ().
The following values can be bitwise ORed in
.IR flags
to obtain different behavior:
.TP
.B O_CLOEXEC
Set the close-on-exec
.RB ( FD_CLOEXEC )
flag on the two new file descriptors.
See the description of the same flag in
.BR open (2)
for reasons why this may be useful.
.TP
.BR O_DIRECT " (since Linux 3.4)"
.\" commit 9883035ae7edef3ec62ad215611cb8e17d6a1a5d
Create a pipe that performs I/O in "packet" mode.
Each
.BR write (2)
to the pipe is dealt with as a separate packet, and
.BR read (2)s
from the pipe will read one packet at a time.
Note the following points:
.RS
.IP * 3
Writes of greater than
.BR PIPE_BUF
bytes (see
.BR pipe (7))
will be split into multiple packets.
The constant
.BR PIPE_BUF
is defined in
.IR <limits.h> .
.IP *
If a
.BR read (2)
specifies a buffer size that is smaller than the next packet,
then the requested number of bytes are read,
and the excess bytes in the packet are discarded.
Specifying a buffer size of
.BR PIPE_BUF
will be sufficient to read the largest possible packets
(see the previous point).
.IP *
Zero-length packets are not supported.
(A
.BR read (2)
that specifies a buffer size of zero is a no-op, and returns 0.)
.RE
.IP
Older kernels that do not support this flag will indicate this via an
.B EINVAL
error.
.TP
.B O_NONBLOCK
Set the
.BR O_NONBLOCK
file status flag on the two new open file descriptions.
Using this flag saves extra calls to
.BR fcntl (2)
to achieve the same result.
.SH RETURN VALUE
On success, zero is returned.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EFAULT
.I pipefd
is not valid.
.TP
.B EINVAL
.RB ( pipe2 ())
Invalid value in
.IR flags .
.TP
.B EMFILE
Too many file descriptors are in use by the process.
.TP
.B ENFILE
The system limit on the total number of open files has been reached.
.SH VERSIONS
.BR pipe2 ()
was added to Linux in version 2.6.27;
glibc support is available starting with
version 2.9.
.SH CONFORMING TO
.BR pipe ():
POSIX.1-2001.

.BR pipe2 ()
is Linux-specific.
.SH EXAMPLE
.\" fork.2 refers to this example program.
The following program creates a pipe, and then
.BR fork (2)s
to create a child process;
the child inherits a duplicate set of file
descriptors that refer to the same pipe.
After the
.BR fork (2),
each process closes the descriptors that it doesn't need for the pipe
(see
.BR pipe (7)).
The parent then writes the string contained in the program's
command-line argument to the pipe,
and the child reads this string a byte at a time from the pipe
and echoes it on standard output.
.SS Program source
.nf
#include <sys/types.h>
#include <sys/wait.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>

int
main(int argc, char *argv[])
{
    int pipefd[2];
    pid_t cpid;
    char buf;

    if (argc != 2) {
        fprintf(stderr, "Usage: %s <string>\\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    if (pipe(pipefd) == \-1) {
        perror("pipe");
        exit(EXIT_FAILURE);
    }

    cpid = fork();
    if (cpid == \-1) {
        perror("fork");
        exit(EXIT_FAILURE);
    }

    if (cpid == 0) {    /* Child reads from pipe */
        close(pipefd[1]);          /* Close unused write end */

        while (read(pipefd[0], &buf, 1) > 0)
            write(STDOUT_FILENO, &buf, 1);

        write(STDOUT_FILENO, "\\n", 1);
        close(pipefd[0]);
        _exit(EXIT_SUCCESS);

    } else {            /* Parent writes argv[1] to pipe */
        close(pipefd[0]);          /* Close unused read end */
        write(pipefd[1], argv[1], strlen(argv[1]));
        close(pipefd[1]);          /* Reader will see EOF */
        wait(NULL);                /* Wait for child */
        exit(EXIT_SUCCESS);
    }
}
.fi
.SH SEE ALSO
.BR fork (2),
.BR read (2),
.BR socketpair (2),
.BR write (2),
.BR popen (3),
.BR pipe (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2000 by Werner Almesberger
.\"
.\" %%%LICENSE_START(GPL_NOVERSION_ONELINE)
.\" May be distributed under GPL
.\" %%%LICENSE_END
.\"
.\" Written 2000-02-23 by Werner Almesberger
.\" Modified 2004-06-17 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.TH PIVOT_ROOT 2 2012-07-13 "Linux" "Linux Programmer's Manual"
.SH NAME
pivot_root \- change the root filesystem
.SH SYNOPSIS
.BI "int pivot_root(const char *" new_root ", const char *" put_old );

.IR Note :
There is no glibc wrapper for this system call; see NOTES.
.SH DESCRIPTION
.BR pivot_root ()
moves the root filesystem of the calling process to the
directory \fIput_old\fP and makes \fInew_root\fP the new root filesystem
of the calling process.
.\"
.\" The
.\" .B CAP_SYS_ADMIN
.\" capability is required.

The typical use of
.BR pivot_root ()
is during system startup, when the
system mounts a temporary root filesystem (e.g., an \fBinitrd\fP), then
mounts the real root filesystem, and eventually turns the latter into
the current root of all relevant processes or threads.

.BR pivot_root ()
may or may not change the current root and the current
working directory of any processes or threads which use the old
root directory.
The caller of
.BR pivot_root ()
must ensure that processes with root or current working directory
at the old root operate correctly in either case.
An easy way to ensure this is to change their
root and current working directory to \fInew_root\fP before invoking
.BR pivot_root ().

The paragraph above is intentionally vague because the implementation
of
.BR pivot_root ()
may change in the future.
At the time of writing,
.BR pivot_root ()
changes root and current working directory of each process or
thread to \fInew_root\fP if they point to the old root directory.
This
is necessary in order to prevent kernel threads from keeping the old
root directory busy with their root and current working directory,
even if they never access
the filesystem in any way.
In the future, there may be a mechanism for
kernel threads to explicitly relinquish any access to the filesystem,
such that this fairly intrusive mechanism can be removed from
.BR pivot_root ().

Note that this also applies to the calling process:
.BR pivot_root ()
may
or may not affect its current working directory.
It is therefore recommended to call
\fBchdir("/")\fP immediately after
.BR pivot_root ().

The following restrictions apply to \fInew_root\fP and \fIput_old\fP:
.IP \- 3
They must be directories.
.IP \- 3
\fInew_root\fP and \fIput_old\fP must not be on the same filesystem as
the current root.
.IP \- 3
\fIput_old\fP must be underneath \fInew_root\fP, that is, adding a nonzero
number of \fI/..\fP to the string pointed to by \fIput_old\fP must yield
the same directory as \fInew_root\fP.
.IP \- 3
No other filesystem may be mounted on \fIput_old\fP.
.PP
See also
.BR pivot_root (8)
for additional usage examples.

If the current root is not a mount point (e.g., after
.BR chroot (2)
or
.BR pivot_root (),
see also below), not the old root directory, but the
mount point of that filesystem is mounted on \fIput_old\fP.

\fInew_root\fP does not have to be a mount point.
In this case,
\fI/proc/mounts\fP will show the mount point of the filesystem containing
\fInew_root\fP as root (\fI/\fP).
.SH RETURN VALUE
On success, zero is returned.
On error, \-1 is returned, and
\fIerrno\fP is set appropriately.
.SH ERRORS
.BR pivot_root ()
may return (in \fIerrno\fP) any of the errors returned by
.BR stat (2).
Additionally, it may return:
.TP
.B EBUSY
\fInew_root\fP or \fIput_old\fP are on the current root filesystem,
or a filesystem is already mounted on \fIput_old\fP.
.TP
.B EINVAL
\fIput_old\fP is not underneath \fInew_root\fP.
.TP
.B ENOTDIR
\fInew_root\fP or \fIput_old\fP is not a directory.
.TP
.B EPERM
The calling process does not have the
.B CAP_SYS_ADMIN
capability.
.SH VERSIONS
.BR pivot_root ()
was introduced in Linux 2.3.41.
.SH CONFORMING TO
.BR pivot_root ()
is Linux-specific and hence is not portable.
.SH NOTES
Glibc does not provide a wrapper for this system call; call it using
.BR syscall (2).
.SH BUGS
.BR pivot_root ()
should not have to change root and current working directory of all other
processes in the system.

Some of the more obscure uses of
.BR pivot_root ()
may quickly lead to
insanity.
.SH SEE ALSO
.BR chdir (2),
.BR chroot (2),
.BR stat (2),
.BR initrd (4),
.BR pivot_root (8)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 1997 Andries Brouwer (aeb@cwi.nl)
.\" and Copyright (C) 2006, Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Additions from Richard Gooch <rgooch@atnf.CSIRO.AU> and aeb, 971207
.\" 2006-03-13, mtk, Added ppoll() + various other rewordings
.\" 2006-07-01, mtk, Added POLLRDHUP + various other wording and
.\"	formatting changes.
.\"
.TH POLL 2 2015-04-19 "Linux" "Linux Programmer's Manual"
.SH NAME
poll, ppoll \- wait for some event on a file descriptor
.SH SYNOPSIS
.nf
.B #include <poll.h>
.sp
.BI "int poll(struct pollfd *" fds ", nfds_t " nfds ", int " timeout );
.sp
.BR "#define _GNU_SOURCE" "         /* See feature_test_macros(7) */"
.B #include <signal.h>
.B #include <poll.h>
.sp
.BI "int ppoll(struct pollfd *" fds ", nfds_t " nfds ", "
.BI "        const struct timespec *" timeout_ts ", const sigset_t *" sigmask );
.fi
.SH DESCRIPTION
.BR poll ()
performs a similar task to
.BR select (2):
it waits for one of a set of file descriptors to become ready
to perform I/O.

The set of file descriptors to be monitored is specified in the
.I fds
argument, which is an array of structures of the following form:
.in +4n
.nf

struct pollfd {
    int   fd;         /* file descriptor */
    short events;     /* requested events */
    short revents;    /* returned events */
};
.in
.fi
.PP
The caller should specify the number of items in the
.I fds
array in
.IR nfds .

The field
.I fd
contains a file descriptor for an open file.
If this field is negative, then the corresponding
.I events
field is ignored and the
.I revents
field returns zero.
(This provides an easy way of ignoring a
file descriptor for a single
.BR poll ()
call: simply negate the
.I fd
field.
Note, however, that this technique can't be used to ignore file descriptor 0.)

The field
.I events
is an input parameter, a bit mask specifying the events the application
is interested in for the file descriptor
.IR fd .
This field may be specified as zero,
in which case the only events that can be returned in
.I revents
are
.BR POLLHUP ,
.BR POLLERR ,
and
.B POLLNVAL
(see below).

The field
.I revents
is an output parameter, filled by the kernel with the events that
actually occurred.
The bits returned in
.I revents
can include any of those specified in
.IR events ,
or one of the values
.BR POLLERR ,
.BR POLLHUP ,
or
.BR POLLNVAL .
(These three bits are meaningless in the
.I events
field, and will be set in the
.I revents
field whenever the corresponding condition is true.)

If none of the events requested (and no error) has occurred for any
of the file descriptors, then
.BR poll ()
blocks until one of the events occurs.

The
.I timeout
argument specifies the number of milliseconds that
.BR poll ()
should block waiting for a file descriptor to become ready.
The call will block until either:
.IP * 3
a file descriptor becomes ready;
.IP *
the call is interrupted by a signal handler; or
.IP *
the timeout expires.
.PP
Note that the
.I timeout
interval will be rounded up to the system clock granularity,
and kernel scheduling delays mean that the blocking interval
may overrun by a small amount.
Specifying a negative value in
.I timeout
means an infinite timeout.
Specifying a
.I timeout
of zero causes
.BR poll ()
to return immediately, even if no file descriptors are ready.

The bits that may be set/returned in
.I events
and
.I revents
are defined in \fI<poll.h>\fP:
.RS
.TP
.B POLLIN
There is data to read.
.TP
.B POLLPRI
There is urgent data to read (e.g., out-of-band data on TCP socket;
pseudoterminal master in packet mode has seen state change in slave).
.TP
.B POLLOUT
Writing is now possible, though a write larger that the available space
in a socket or pipe will still block (unless
.B O_NONBLOCK
is set).
.TP
.BR POLLRDHUP " (since Linux 2.6.17)"
Stream socket peer closed connection,
or shut down writing half of connection.
The
.B _GNU_SOURCE
feature test macro must be defined
(before including
.I any
header files)
in order to obtain this definition.
.TP
.B POLLERR
Error condition (only returned in
.IR revents ;
ignored in
.IR events ).
.TP
.B POLLHUP
Hang up (only returned in
.IR revents ;
ignored in
.IR events ).
Note that when reading from a channel such as a pipe or a stream socket,
this event merely indicates that the peer closed its end of the channel.
Subsequent reads from the channel will return 0 (end of file)
only after all outstanding data in the channel has been consumed.
.TP
.B POLLNVAL
Invalid request:
.I fd
not open (only returned in
.IR revents ;
ignored in
.IR events ).
.RE
.PP
When compiling with
.B _XOPEN_SOURCE
defined, one also has the following,
which convey no further information beyond the bits listed above:
.RS
.TP
.B POLLRDNORM
Equivalent to
.BR POLLIN .
.TP
.B POLLRDBAND
Priority band data can be read (generally unused on Linux).
.\" POLLRDBAND is used in the DECnet protocol.
.TP
.B POLLWRNORM
Equivalent to
.BR POLLOUT .
.TP
.B POLLWRBAND
Priority data may be written.
.RE
.PP
Linux also knows about, but does not use
.BR POLLMSG .
.SS ppoll()
The relationship between
.BR poll ()
and
.BR ppoll ()
is analogous to the relationship between
.BR select (2)
and
.BR pselect (2):
like
.BR pselect (2),
.BR ppoll ()
allows an application to safely wait until either a file descriptor
becomes ready or until a signal is caught.
.PP
Other than the difference in the precision of the
.I timeout
argument, the following
.BR ppoll ()
call:
.nf

    ready = ppoll(&fds, nfds, timeout_ts, &sigmask);

.fi
is equivalent to
.I atomically
executing the following calls:
.nf

    sigset_t origmask;
    int timeout;

    timeout = (timeout_ts == NULL) ? \-1 :
              (timeout_ts.tv_sec * 1000 + timeout_ts.tv_nsec / 1000000);
    pthread_sigmask(SIG_SETMASK, &sigmask, &origmask);
    ready = poll(&fds, nfds, timeout);
    pthread_sigmask(SIG_SETMASK, &origmask, NULL);
.fi
.PP
See the description of
.BR pselect (2)
for an explanation of why
.BR ppoll ()
is necessary.

If the
.I sigmask
argument is specified as NULL, then
no signal mask manipulation is performed
(and thus
.BR ppoll ()
differs from
.BR poll ()
only in the precision of the
.I timeout
argument).

The
.I timeout_ts
argument specifies an upper limit on the amount of time that
.BR ppoll ()
will block.
This argument is a pointer to a structure of the following form:
.in +4n
.nf

struct timespec {
    long    tv_sec;         /* seconds */
    long    tv_nsec;        /* nanoseconds */
};
.fi
.in

If
.I timeout_ts
is specified as NULL, then
.BR ppoll ()
can block indefinitely.
.SH RETURN VALUE
On success, a positive number is returned; this is
the number of structures which have nonzero
.I revents
fields (in other words, those descriptors with events or errors reported).
A value of 0 indicates that the call timed out and no file
descriptors were ready.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EFAULT
The array given as argument was not contained in the calling program's
address space.
.TP
.B EINTR
A signal occurred before any requested event; see
.BR signal (7).
.TP
.B EINVAL
The
.I nfds
value exceeds the
.B RLIMIT_NOFILE
value.
.TP
.B ENOMEM
There was no space to allocate file descriptor tables.
.SH VERSIONS
The
.BR poll ()
system call was introduced in Linux 2.1.23.
On older kernels that lack this system call,
.\" library call was introduced in libc 5.4.28
the glibc (and the old Linux libc)
.BR poll ()
wrapper function provides emulation using
.BR select (2).

The
.BR ppoll ()
system call was added to Linux in kernel 2.6.16.
The
.BR ppoll ()
library call was added in glibc 2.4.
.SH CONFORMING TO
.BR poll ()
conforms to POSIX.1-2001.
.BR ppoll ()
is Linux-specific.
.\" NetBSD 3.0 has a pollts() which is like Linux ppoll().
.SH NOTES
Some implementations define the nonstandard constant
.B INFTIM
with the value \-1 for use as a
.IR timeout
for
.BR poll ().
This constant is not provided in glibc.

For a discussion of what may happen if a file descriptor being monitored by
.BR poll ()
is closed in another thread, see
.BR select (2).
.SS C library/kernel ABI differences
The Linux
.BR ppoll ()
system call modifies its
.I timeout_ts
argument.
However, the glibc wrapper function hides this behavior
by using a local variable for the timeout argument that
is passed to the system call.
Thus, the glibc
.BR ppoll ()
function does not modify its
.I timeout_ts
argument.

The raw
.BR ppoll ()
system call has a fifth argument,
.IR "size_t sigsetsize" ,
which specifies the size in bytes of the
.IR sigmask
argument.
The glibc
.BR ppoll ()
wrapper function specifies this argument as a fixed value
(equal to
.IR sizeof(sigset_t) ).
.SH BUGS
See the discussion of spurious readiness notifications under the
BUGS section of
.BR select (2).
.SH SEE ALSO
.BR restart_syscall (2),
.BR select (2),
.BR select_tut (2),
.BR epoll (7),
.BR time (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 2003 Abhijit Menon-Sen <ams@wiw.org>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" 2005-04-08 mtk, noted kernel version and added BUGS
.\" 2010-10-09, mtk, document arm_fadvise64_64()
.\"
.TH POSIX_FADVISE 2 2015-04-19 "Linux" "Linux Programmer's Manual"
.SH NAME
posix_fadvise \- predeclare an access pattern for file data
.SH SYNOPSIS
.nf
.B #include <fcntl.h>
.sp
.BI "int posix_fadvise(int " fd ", off_t " offset ", off_t " len \
", int " advice ");"
.fi
.sp
.ad l
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR posix_fadvise ():
.RS 4
_XOPEN_SOURCE\ >=\ 600 || _POSIX_C_SOURCE\ >=\ 200112L
.RE
.ad
.SH DESCRIPTION
Programs can use
.BR posix_fadvise ()
to announce an intention to access
file data in a specific pattern in the future, thus allowing the kernel
to perform appropriate optimizations.

The \fIadvice\fP applies to a (not necessarily existent) region starting
at \fIoffset\fP and extending for \fIlen\fP bytes (or until the end of
the file if \fIlen\fP is 0) within the file referred to by \fIfd\fP.
The \fIadvice\fP is not binding;
it merely constitutes an expectation on behalf of
the application.

Permissible values for \fIadvice\fP include:
.TP
.B POSIX_FADV_NORMAL
Indicates that the application has no advice to give about its access
pattern for the specified data.
If no advice is given for an open file,
this is the default assumption.
.TP
.B POSIX_FADV_SEQUENTIAL
The application expects to access the specified data sequentially (with
lower offsets read before higher ones).
.TP
.B POSIX_FADV_RANDOM
The specified data will be accessed in random order.
.TP
.B POSIX_FADV_NOREUSE
The specified data will be accessed only once.
.TP
.B POSIX_FADV_WILLNEED
The specified data will be accessed in the near future.
.TP
.B POSIX_FADV_DONTNEED
The specified data will not be accessed in the near future.
.SH RETURN VALUE
On success, zero is returned.
On error, an error number is returned.
.SH ERRORS
.TP
.B EBADF
The \fIfd\fP argument was not a valid file descriptor.
.TP
.B EINVAL
An invalid value was specified for \fIadvice\fP.
.TP
.B ESPIPE
The specified file descriptor refers to a pipe or FIFO.
.RB ( ESPIPE
is the error specified by POSIX,
but before kernel version 2.16,
.\" commit 87ba81dba431232548ce29d5d224115d0c2355ac
Linux returned
.B EINVAL
in this case.)
.SH VERSIONS
Kernel support first appeared in Linux 2.5.60;
the underlying system call is called
.BR fadvise64 ().
.\" of fadvise64_64()
Library support has been provided since glibc version 2.2,
via the wrapper function
.BR posix_fadvise ().

Since Linux 3.18,
.\" commit d3ac21cacc24790eb45d735769f35753f5b56ceb
support for the underlying system call is optional,
depending on the setting of the
.B CONFIG_ADVISE_SYSCALLS
configuration option.
.SH CONFORMING TO
POSIX.1-2001.
Note that the type of the
.I len
argument was changed from
.I size_t
to
.I off_t
in POSIX.1-2003 TC1.
.SH NOTES
Under Linux, \fBPOSIX_FADV_NORMAL\fP sets the readahead window to the
default size for the backing device; \fBPOSIX_FADV_SEQUENTIAL\fP doubles
this size, and \fBPOSIX_FADV_RANDOM\fP disables file readahead entirely.
These changes affect the entire file, not just the specified region
(but other open file handles to the same file are unaffected).

\fBPOSIX_FADV_WILLNEED\fP initiates a
nonblocking read of the specified region into the page cache.
The amount of data read may be decreased by the kernel depending
on virtual memory load.
(A few megabytes will usually be fully satisfied,
and more is rarely useful.)

In kernels before 2.6.18, \fBPOSIX_FADV_NOREUSE\fP had the
same semantics as \fBPOSIX_FADV_WILLNEED\fP.
This was probably a bug; since kernel 2.6.18, this flag is a no-op.

\fBPOSIX_FADV_DONTNEED\fP attempts to free cached pages associated with
the specified region.
This is useful, for example, while streaming large
files.
A program may periodically request the kernel to free cached data
that has already been used, so that more useful cached pages are not
discarded instead.

Requests to discard partial pages are ignored.
It is preferable to preserve needed data than discard unneeded data.
If the application requires that data be considered for discarding then
.I offset
and
.I len
must be page-aligned.

Pages that have not yet been written out will be unaffected, so if the
application wishes to guarantee that pages will be released, it should
call
.BR fsync (2)
or
.BR fdatasync (2)
first.
.SS C library/kernel ABI differences
The name of the wrapper function in the C library is
.BR posix_fadvise ().
The underlying system call is called
.BR fadvise64 ()
(or, on some architectures,
.BR fadvise64_64 ()).
.SS Architecture-specific variants
Some architectures require
64-bit arguments to be aligned in a suitable pair of registers (see
.BR syscall (2)
for further detail).
On such architectures, the call signature of
.BR posix_fadvise ()
shown in the SYNOPSIS would force
a register to be wasted as padding between the
.I fd
and
.I offset
arguments.
Therefore, these architectures define a version of the
system call that orders the arguments suitably,
but is otherwise exactly the same as
.BR posix_fadvise ().

For example, since Linux 2.6.14, ARM has the following system call:
.PP
.in +4n
.nf
.BI "long arm_fadvise64_64(int " fd ", int " advice ,
.BI "                      loff_t " offset ", loff_t " len );
.fi
.in
.PP
These architecture-specific details are generally
hidden from applications by the glibc
.BR posix_fadvise ()
wrapper function,
which invokes the appropriate architecture-specific system call.
.SH BUGS
In kernels before 2.6.6, if
.I len
was specified as 0, then this was interpreted literally as "zero bytes",
rather than as meaning "all bytes through to the end of the file".
.SH SEE ALSO
.BR readahead (2),
.BR sync_file_range (2),
.BR posix_fallocate (3),
.BR posix_madvise (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 1998 Andries Brouwer (aeb@cwi.nl)
.\" and Copyright (C) 2002, 2006, 2008, 2012, 2013 Michael Kerrisk <mtk.manpages@gmail.com>
.\" and Copyright Guillem Jover <guillem@hadrons.org>
.\" and Copyright (C) 2014 Dave Hansen / Intel
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified Thu Nov 11 04:19:42 MET 1999, aeb: added PR_GET_PDEATHSIG
.\" Modified 27 Jun 02, Michael Kerrisk
.\" 	Added PR_SET_DUMPABLE, PR_GET_DUMPABLE,
.\"	PR_SET_KEEPCAPS, PR_GET_KEEPCAPS
.\" Modified 2006-08-30 Guillem Jover <guillem@hadrons.org>
.\"	Updated Linux versions where the options where introduced.
.\"	Added PR_SET_TIMING, PR_GET_TIMING, PR_SET_NAME, PR_GET_NAME,
.\"	PR_SET_UNALIGN, PR_GET_UNALIGN, PR_SET_FPEMU, PR_GET_FPEMU,
.\"	PR_SET_FPEXC, PR_GET_FPEXC
.\" 2008-04-29 Serge Hallyn, Document PR_CAPBSET_READ and PR_CAPBSET_DROP
.\" 2008-06-13 Erik Bosman, <ejbosman@cs.vu.nl>
.\"     Document PR_GET_TSC and PR_SET_TSC.
.\" 2008-06-15 mtk, Document PR_SET_SECCOMP, PR_GET_SECCOMP
.\" 2009-10-03 Andi Kleen, document PR_MCE_KILL
.\" 2012-04 Cyrill Gorcunov, Document PR_SET_MM
.\" 2012-04-25 Michael Kerrisk, Document PR_TASK_PERF_EVENTS_DISABLE and
.\"				PR_TASK_PERF_EVENTS_ENABLE
.\" 2012-09-20 Kees Cook, update PR_SET_SECCOMP for mode 2
.\" 2012-09-20 Kees Cook, document PR_SET_NO_NEW_PRIVS, PR_GET_NO_NEW_PRIVS
.\" 2012-10-25 Michael Kerrisk, Document PR_SET_TIMERSLACK and
.\"                             PR_GET_TIMERSLACK
.\" 2013-01-10 Kees Cook, document PR_SET_PTRACER
.\" 2012-02-04 Michael kerrisk, document PR_{SET,GET}_CHILD_SUBREAPER
.\" 2014-11-10 Dave Hansen, document PR_MPX_{EN,DIS}ABLE_MANAGEMENT
.\"
.\"
.TH PRCTL 2 2015-05-07 "Linux" "Linux Programmer's Manual"
.SH NAME
prctl \- operations on a process
.SH SYNOPSIS
.nf
.B #include <sys/prctl.h>
.sp
.BI "int prctl(int " option ", unsigned long " arg2 ", unsigned long " arg3 ,
.BI "          unsigned long " arg4 ", unsigned long " arg5 );
.fi
.SH DESCRIPTION
.BR prctl ()
is called with a first argument describing what to do
(with values defined in \fI<linux/prctl.h>\fP), and further
arguments with a significance depending on the first one.
The first argument can be:
.TP
.BR PR_CAPBSET_READ " (since Linux 2.6.25)"
Return (as the function result) 1 if the capability specified in
.I arg2
is in the calling thread's capability bounding set,
or 0 if it is not.
(The capability constants are defined in
.IR <linux/capability.h> .)
The capability bounding set dictates
whether the process can receive the capability through a
file's permitted capability set on a subsequent call to
.BR execve (2).

If the capability specified in
.I arg2
is not valid, then the call fails with the error
.BR EINVAL .
.TP
.BR PR_CAPBSET_DROP " (since Linux 2.6.25)"
If the calling thread has the
.B CAP_SETPCAP
capability, then drop the capability specified by
.I arg2
from the calling thread's capability bounding set.
Any children of the calling thread will inherit the newly
reduced bounding set.

The call fails with the error:
.B EPERM
if the calling thread does not have the
.BR CAP_SETPCAP ;
.BR EINVAL
if
.I arg2
does not represent a valid capability; or
.BR EINVAL
if file capabilities are not enabled in the kernel,
in which case bounding sets are not supported.
.TP
.BR PR_SET_CHILD_SUBREAPER " (since Linux 3.4)"
.\" commit ebec18a6d3aa1e7d84aab16225e87fd25170ec2b
If
.I arg2
is nonzero,
set the "child subreaper" attribute of the calling process;
if
.I arg2
is zero, unset the attribute.
When a process is marked as a child subreaper,
all of the children that it creates, and their descendants,
will be marked as having a subreaper.
In effect, a subreaper fulfills the role of
.BR init (1)
for its descendant processes.
Upon termination of a process
that is orphaned (i.e., its immediate parent has already terminated)
and marked as having a subreaper,
the nearest still living ancestor subreaper
will receive a
.BR SIGCHLD
signal and be able to
.BR wait (2)
on the process to discover its termination status.
.TP
.BR PR_GET_CHILD_SUBREAPER " (since Linux 3.4)"
Return the "child subreaper" setting of the caller,
in the location pointed to by
.IR "(int\ *) arg2" .
.TP
.BR PR_SET_DUMPABLE " (since Linux 2.3.20)"
Set the state of the "dumpable" flag,
which determines whether core dumps are produced for the calling process
upon delivery of a signal whose default behavior is to produce a core dump.

In kernels up to and including 2.6.12,
.I arg2
must be either 0
.RB ( SUID_DUMP_DISABLE ,
process is not dumpable) or 1
.RB ( SUID_DUMP_USER ,
process is dumpable).
Between kernels 2.6.13 and 2.6.17,
.\" commit abf75a5033d4da7b8a7e92321d74021d1fcfb502
the value 2 was also permitted,
which caused any binary which normally would not be dumped
to be dumped readable by root only;
for security reasons, this feature has been removed.
.\" See http://marc.theaimsgroup.com/?l=linux-kernel&m=115270289030630&w=2
.\" Subject:    Fix prctl privilege escalation (CVE-2006-2451)
.\" From:       Marcel Holtmann <marcel () holtmann ! org>
.\" Date:       2006-07-12 11:12:00
(See also the description of
.I /proc/sys/fs/\:suid_dumpable
in
.BR proc (5).)

Normally, this flag is set to 1.
However, it is reset to the current value contained in the file
.IR /proc/sys/fs/\:suid_dumpable
(which by default has the value 0),
if any of the following attributes of the process
are changed by the operations listed below:
.\" See kernel/cred.c::commit_creds() (Linux 3.18 sources)
.RS
.IP * 3
The effective user or group ID is changed.
.IP *
The filesystem user or group ID is changed (see
.BR credentials (7)).
.IP *
The process's set of permitted capabilities (see
.BR capabilities (7))
is changed such that its new set of capabilities is
not a subset of its previous set of capabilities.
.RE
.IP
The operations that may trigger changes to the dumpable flag include:
.\" Look for uses of commit_creds() in the kernel source code
.RS
.IP * 3
execution
.RB ( execve (2))
of a set-user-ID or set-group-ID program,
or a program that has capabilities (see
.BR capabilities (7));
.IP *
.BR capset (2);
and
.IP *
system calls that change process credentials
.RB ( setuid (2)
.BR setgid (2),
.BR setresuid (2),
.BR setresgid (2),
.BR setgroups (2),
and so on).
.\" Also certain namespace operations;
.RE
.IP
Processes that are not dumpable can not be attached via
.BR ptrace (2)
.BR PTRACE_ATTACH .
.TP
.BR PR_GET_DUMPABLE " (since Linux 2.3.20)"
Return (as the function result) the current state of the calling
process's dumpable flag.
.\" Since Linux 2.6.13, the dumpable flag can have the value 2,
.\" but in 2.6.13 PR_GET_DUMPABLE simply returns 1 if the dumpable
.\" flags has a nonzero value.  This was fixed in 2.6.14.
.TP
.BR PR_SET_ENDIAN " (since Linux 2.6.18, PowerPC only)"
Set the endian-ness of the calling process to the value given
in \fIarg2\fP, which should be one of the following:
.\" Respectively 0, 1, 2
.BR PR_ENDIAN_BIG ,
.BR PR_ENDIAN_LITTLE ,
or
.B PR_ENDIAN_PPC_LITTLE
(PowerPC pseudo little endian).
.TP
.BR PR_GET_ENDIAN " (since Linux 2.6.18, PowerPC only)"
Return the endian-ness of the calling process,
in the location pointed to by
.IR "(int\ *) arg2" .
.TP
.BR PR_SET_FPEMU " (since Linux 2.4.18, 2.5.9, only on ia64)"
Set floating-point emulation control bits to \fIarg2\fP.
Pass \fBPR_FPEMU_NOPRINT\fP to silently emulate fp operations accesses, or
\fBPR_FPEMU_SIGFPE\fP to not emulate fp operations and send
.B SIGFPE
instead.
.TP
.BR PR_GET_FPEMU " (since Linux 2.4.18, 2.5.9, only on ia64)"
Return floating-point emulation control bits,
in the location pointed to by
.IR "(int\ *) arg2" .
.TP
.BR PR_SET_FPEXC " (since Linux 2.4.21, 2.5.32, only on PowerPC)"
Set floating-point exception mode to \fIarg2\fP.
Pass \fBPR_FP_EXC_SW_ENABLE\fP to use FPEXC for FP exception enables,
\fBPR_FP_EXC_DIV\fP for floating-point divide by zero,
\fBPR_FP_EXC_OVF\fP for floating-point overflow,
\fBPR_FP_EXC_UND\fP for floating-point underflow,
\fBPR_FP_EXC_RES\fP for floating-point inexact result,
\fBPR_FP_EXC_INV\fP for floating-point invalid operation,
\fBPR_FP_EXC_DISABLED\fP for FP exceptions disabled,
\fBPR_FP_EXC_NONRECOV\fP for async nonrecoverable exception mode,
\fBPR_FP_EXC_ASYNC\fP for async recoverable exception mode,
\fBPR_FP_EXC_PRECISE\fP for precise exception mode.
.TP
.BR PR_GET_FPEXC " (since Linux 2.4.21, 2.5.32, only on PowerPC)"
Return floating-point exception mode,
in the location pointed to by
.IR "(int\ *) arg2" .
.TP
.BR PR_SET_KEEPCAPS " (since Linux 2.2.18)"
Set the state of the thread's "keep capabilities" flag,
which determines whether the threads's permitted
capability set is cleared when a change is made to the threads's user IDs
such that the threads's real UID, effective UID, and saved set-user-ID
all become nonzero when at least one of them previously had the value 0.
By default, the permitted capability set is cleared when such a change is made;
setting the "keep capabilities" flag prevents it from being cleared.
.I arg2
must be either 0 (permitted capabilities are cleared)
or 1 (permitted capabilities are kept).
(A thread's
.I effective
capability set is always cleared when such a credential change is made,
regardless of the setting of the "keep capabilities" flag.)
The "keep capabilities" value will be reset to 0 on subsequent calls to
.BR execve (2).
.TP
.BR PR_GET_KEEPCAPS " (since Linux 2.2.18)"
Return (as the function result) the current state of the calling threads's
"keep capabilities" flag.
.TP
.BR PR_SET_NAME " (since Linux 2.6.9)"
Set the name of the calling thread,
using the value in the location pointed to by
.IR "(char\ *) arg2" .
The name can be up to 16 bytes long,
.\" TASK_COMM_LEN in include/linux/sched.h
including the terminating null byte.
(If the length of the string, including the terminating null byte,
exceeds 16 bytes, the string is silently truncated.)
This is the same attribute that can be set via
.BR pthread_setname_np (3)
and retrieved using
.BR pthread_getname_np (3).
The attribute is likewise accessible via
.IR /proc/self/task/[tid]/comm ,
where
.I tid
is the name of the calling thread.
.TP
.BR PR_GET_NAME " (since Linux 2.6.11)"
Return the name of the calling thread,
in the buffer pointed to by
.IR "(char\ *) arg2" .
The buffer should allow space for up to 16 bytes;
the returned string will be null-terminated.
.TP
.BR PR_SET_NO_NEW_PRIVS " (since Linux 3.5)"
Set the calling process's
.I no_new_privs
bit to the value in
.IR arg2 .
With
.I no_new_privs
set to 1,
.BR execve (2)
promises not to grant privileges to do anything
that could not have been done without the
.BR execve (2)
call (for example,
rendering the set-user-ID and set-group-ID mode bits,
and file capabilities non-functional).
Once set, this bit cannot be unset.
The setting of this bit is inherited by children created by
.BR fork (2)
and
.BR clone (2),
and preserved across
.BR execve (2).

For more information, see the kernel source file
.IR Documentation/prctl/no_new_privs.txt .
.TP
.BR PR_GET_NO_NEW_PRIVS " (since Linux 3.5)"
Return (as the function result) the value of the
.I no_new_privs
bit for the current process.
A value of 0 indicates the regular
.BR execve (2)
behavior.
A value of 1 indicates
.BR execve (2)
will operate in the privilege-restricting mode described above.
.TP
.BR PR_SET_PDEATHSIG " (since Linux 2.1.57)"
Set the parent death signal
of the calling process to \fIarg2\fP (either a signal value
in the range 1..maxsig, or 0 to clear).
This is the signal that the calling process will get when its
parent dies.
This value is cleared for the child of a
.BR fork (2)
and (since Linux 2.4.36 / 2.6.23)
when executing a set-user-ID or set-group-ID binary,
or a binary that has associated capabilities (see
.BR capabilities (7)).
This value is preserved across
.BR execve (2).

.IR Warning :
.\" https://bugzilla.kernel.org/show_bug.cgi?id=43300
the "parent" in this case is considered to be the
.I thread
that created this process.
In other words, the signal will be sent when that thread terminates
(via, for example,
.BR pthread_exit (3)),
rather than after all of the threads in the parent process terminate.
.TP
.BR PR_GET_PDEATHSIG " (since Linux 2.3.15)"
Return the current value of the parent process death signal,
in the location pointed to by
.IR "(int\ *) arg2" .
.TP
.BR PR_SET_PTRACER " (since Linux 3.4)"
.\" commit 2d514487faf188938a4ee4fb3464eeecfbdcf8eb
.\" commit bf06189e4d14641c0148bea16e9dd24943862215
This is meaningful only when the Yama LSM is enabled and in mode 1
("restricted ptrace", visible via
.IR /proc/sys/kernel/yama/ptrace_scope ).
When a "ptracer process ID" is passed in \fIarg2\fP,
the caller is declaring that the ptracer process can
.BR ptrace (2)
the calling process as if it were a direct process ancestor.
Each
.B PR_SET_PTRACER
operation replaces the previous "ptracer process ID".
Employing
.B PR_SET_PTRACER
with
.I arg2
set to 0 clears the caller's "ptracer process ID".
If
.I arg2
is
.BR PR_SET_PTRACER_ANY ,
the ptrace restrictions introduced by Yama are effectively disabled for the
calling process.

For further information, see the kernel source file
.IR Documentation/security/Yama.txt .
.TP
.BR PR_SET_SECCOMP " (since Linux 2.6.23)"
.\" See http://thread.gmane.org/gmane.linux.kernel/542632
.\" [PATCH 0 of 2] seccomp updates
.\" andrea@cpushare.com
Set the secure computing (seccomp) mode for the calling thread, to limit
the available system calls.
The more recent
.BR seccomp (2)
system call provides a superset of the functionality of
.BR PR_SET_SECCOMP .

The seccomp mode is selected via
.IR arg2 .
(The seccomp constants are defined in
.IR <linux/seccomp.h> .)

With
.IR arg2
set to
.BR SECCOMP_MODE_STRICT ,
the only system calls that the thread is permitted to make are
.BR read (2),
.BR write (2),
.BR _exit (2),
and
.BR sigreturn (2).
Other system calls result in the delivery of a
.BR SIGKILL
signal.
Strict secure computing mode is useful for number-crunching applications
that may need to execute untrusted byte code,
perhaps obtained by reading from a pipe or socket.
This operation is available only
if the kernel is configured with
.B CONFIG_SECCOMP
enabled.

With
.IR arg2
set to
.BR SECCOMP_MODE_FILTER " (since Linux 3.5),"
the system calls allowed are defined by a pointer
to a Berkeley Packet Filter passed in
.IR arg3 .
This argument is a pointer to
.IR "struct sock_fprog" ;
it can be designed to filter
arbitrary system calls and system call arguments.
This mode is available only if the kernel is configured with
.B CONFIG_SECCOMP_FILTER
enabled.

If
.BR SECCOMP_MODE_FILTER
filters permit
.BR fork (2),
then the seccomp mode is inherited by children created by
.BR fork (2);
if
.BR execve (2)
is permitted, then the seccomp mode is preserved across
.BR execve (2).
If the filters permit
.BR prctl ()
calls, then additional filters can be added;
they are run in order until the first non-allow result is seen.

For further information, see the kernel source file
.IR Documentation/prctl/seccomp_filter.txt .
.TP
.BR PR_GET_SECCOMP " (since Linux 2.6.23)"
Return (as the function result)
the secure computing mode of the calling thread.
If the caller is not in secure computing mode, this operation returns 0;
if the caller is in strict secure computing mode, then the
.BR prctl ()
call will cause a
.B SIGKILL
signal to be sent to the process.
If the caller is in filter mode, and this system call is allowed by the
seccomp filters, it returns 2; otherwise, the process is killed with a
.BR SIGKILL
signal.
This operation is available only
if the kernel is configured with
.B CONFIG_SECCOMP
enabled.

Since Linux 3.8, the
.IR Seccomp
field of the
.IR /proc/[pid]/status
file provides a method of obtaining the same information,
without the risk that the process is killed; see
.BR proc (5).
.TP
.BR PR_SET_SECUREBITS " (since Linux 2.6.26)"
Set the "securebits" flags of the calling thread to the value supplied in
.IR arg2 .
See
.BR capabilities (7).
.TP
.BR PR_GET_SECUREBITS " (since Linux 2.6.26)"
Return (as the function result)
the "securebits" flags of the calling thread.
See
.BR capabilities (7).
.TP
.BR PR_SET_THP_DISABLE " (since Linux 3.15)"
.\" commit a0715cc22601e8830ace98366c0c2bd8da52af52
Set the state of the "THP disable" flag for the calling thread.
If
.I arg2
has a nonzero value, the flag is set, otherwise it is cleared.
Setting this flag provides a method
for disabling transparent huge pages
for jobs where the code cannot be modified, and using a malloc hook with
.BR madvise (2)
is not an option (i.e., statically allocated data).
The setting of the "THP disable" flag is inherited by a child created via
.BR fork (2)
and is preserved across
.BR execve (2).
.TP
.BR PR_GET_THP_DISABLE " (since Linux 3.15)"
Return (via the function result) the current setting of the "THP disable"
flag for the calling thread:
either 1, if the flag is set, or 0, if it is not.
.TP
.BR PR_GET_TID_ADDRESS " (since Linux 3.5)"
.\" commit 300f786b2683f8bb1ec0afb6e1851183a479c86d
Retrieve the
.I clear_child_tid
address set by
.BR set_tid_address (2)
and the
.BR clone (2)
.B CLONE_CHILD_CLEARTID
flag, in the location pointed to by
.IR "(int\ **)\ arg2" .
This feature is available only if the kernel is built with the
.BR CONFIG_CHECKPOINT_RESTORE
option enabled.
.TP
.BR PR_SET_TIMERSLACK " (since Linux 2.6.28)"
.\" See https://lwn.net/Articles/369549/
.\" commit 6976675d94042fbd446231d1bd8b7de71a980ada
Set the current timer slack for the calling thread to the nanosecond value
supplied in
.IR arg2 .
If
.I arg2
is less than or equal to zero,
.\" It seems that it's not possible to set the timer slack to zero;
.\" The minimum value is 1? Seems a little strange.
reset the current timer slack to the thread's default timer slack value.
The timer slack is used by the kernel to group timer expirations
for the calling thread that are close to one another;
as a consequence, timer expirations for the thread may be
up to the specified number of nanoseconds late (but will never expire early).
Grouping timer expirations can help reduce system power consumption
by minimizing CPU wake-ups.

The timer expirations affected by timer slack are those set by
.BR select (2),
.BR pselect (2),
.BR poll (2),
.BR ppoll (2),
.BR epoll_wait (2),
.BR epoll_pwait (2),
.BR clock_nanosleep (2),
.BR nanosleep (2),
and
.BR futex (2)
(and thus the library functions implemented via futexes, including
.\" List obtained by grepping for futex usage in glibc source
.BR pthread_cond_timedwait (3),
.BR pthread_mutex_timedlock (3),
.BR pthread_rwlock_timedrdlock (3),
.BR pthread_rwlock_timedwrlock (3),
and
.BR sem_timedwait (3)).

Timer slack is not applied to threads that are scheduled under
a real-time scheduling policy (see
.BR sched_setscheduler (2)).

Each thread has two associated timer slack values:
a "default" value, and a "current" value.
The current value is the one that governs grouping
of timer expirations.
When a new thread is created,
the two timer slack values are made the same as the current value
of the creating thread.
Thereafter, a thread can adjust its current timer slack value via
.BR PR_SET_TIMERSLACK
(the default value can't be changed).
The timer slack values of
.IR init
(PID 1), the ancestor of all processes,
are 50,000 nanoseconds (50 microseconds).
The timer slack values are preserved across
.BR execve (2).
.TP
.BR PR_GET_TIMERSLACK " (since Linux 2.6.28)"
Return (as the function result)
the current timer slack value of the calling thread.
.TP
.BR PR_SET_TIMING " (since Linux 2.6.0-test4)"
Set whether to use (normal, traditional) statistical process timing or
accurate timestamp-based process timing, by passing
.B PR_TIMING_STATISTICAL
.\" 0
or
.B PR_TIMING_TIMESTAMP
.\" 1
to \fIarg2\fP.
.B PR_TIMING_TIMESTAMP
is not currently implemented
(attempting to set this mode will yield the error
.BR EINVAL ).
.\" PR_TIMING_TIMESTAMP doesn't do anything in 2.6.26-rc8,
.\" and looking at the patch history, it appears
.\" that it never did anything.
.TP
.BR PR_GET_TIMING " (since Linux 2.6.0-test4)"
Return (as the function result) which process timing method is currently
in use.
.TP
.BR PR_TASK_PERF_EVENTS_DISABLE " (since Linux 2.6.31)"
Disable all performance counters attached to the calling process,
regardless of whether the counters were created by
this process or another process.
Performance counters created by the calling process for other
processes are unaffected.
For more information on performance counters, see the Linux kernel source file
.IR tools/perf/design.txt .
.IP
Originally called
.BR PR_TASK_PERF_COUNTERS_DISABLE ;
.\" commit 1d1c7ddbfab358445a542715551301b7fc363e28
renamed (with same numerical value)
in Linux 2.6.32.
.TP
.BR PR_TASK_PERF_EVENTS_ENABLE " (since Linux 2.6.31)"
The converse of
.BR PR_TASK_PERF_EVENTS_DISABLE ;
enable performance counters attached to the calling process.
.IP
Originally called
.BR PR_TASK_PERF_COUNTERS_ENABLE ;
.\" commit 1d1c7ddbfab358445a542715551301b7fc363e28
renamed
.\" commit cdd6c482c9ff9c55475ee7392ec8f672eddb7be6
in Linux 2.6.32.
.TP
.BR PR_SET_TSC " (since Linux 2.6.26, x86 only)"
Set the state of the flag determining whether the timestamp counter
can be read by the process.
Pass
.B PR_TSC_ENABLE
to
.I arg2
to allow it to be read, or
.B PR_TSC_SIGSEGV
to generate a
.B SIGSEGV
when the process tries to read the timestamp counter.
.TP
.BR PR_GET_TSC " (since Linux 2.6.26, x86 only)"
Return the state of the flag determining whether the timestamp counter
can be read,
in the location pointed to by
.IR "(int\ *) arg2" .
.TP
.B PR_SET_UNALIGN
(Only on: ia64, since Linux 2.3.48; parisc, since Linux 2.6.15;
PowerPC, since Linux 2.6.18; Alpha, since Linux 2.6.22)
Set unaligned access control bits to \fIarg2\fP.
Pass
\fBPR_UNALIGN_NOPRINT\fP to silently fix up unaligned user accesses,
or \fBPR_UNALIGN_SIGBUS\fP to generate
.B SIGBUS
on unaligned user access.
.TP
.B PR_GET_UNALIGN
(see
.B PR_SET_UNALIGN
for information on versions and architectures)
Return unaligned access control bits, in the location pointed to by
.IR "(int\ *) arg2" .
.TP
.BR PR_MCE_KILL " (since Linux 2.6.32)"
Set the machine check memory corruption kill policy for the current thread.
If
.I arg2
is
.BR PR_MCE_KILL_CLEAR ,
clear the thread memory corruption kill policy and use the system-wide default.
(The system-wide default is defined by
.IR /proc/sys/vm/memory_failure_early_kill ;
see
.BR proc (5).)
If
.I arg2
is
.BR PR_MCE_KILL_SET ,
use a thread-specific memory corruption kill policy.
In this case,
.I arg3
defines whether the policy is
.I early kill
.RB ( PR_MCE_KILL_EARLY ),
.I late kill
.RB ( PR_MCE_KILL_LATE ),
or the system-wide default
.RB ( PR_MCE_KILL_DEFAULT ).
Early kill means that the thread receives a
.B SIGBUS
signal as soon as hardware memory corruption is detected inside
its address space.
In late kill mode, the process is killed only when it accesses a corrupted page.
See
.BR sigaction (2)
for more information on the
.BR SIGBUS
signal.
The policy is inherited by children.
The remaining unused
.BR prctl ()
arguments must be zero for future compatibility.
.TP
.BR PR_MCE_KILL_GET " (since Linux 2.6.32)"
Return the current per-process machine check kill policy.
All unused
.BR prctl ()
arguments must be zero.
.TP
.BR PR_SET_MM " (since Linux 3.3)"
.\" commit 028ee4be34a09a6d48bdf30ab991ae933a7bc036
Modify certain kernel memory map descriptor fields
of the calling process.
Usually these fields are set by the kernel and dynamic loader (see
.BR ld.so (8)
for more information) and a regular application should not use this feature.
However, there are cases, such as self-modifying programs,
where a program might find it useful to change its own memory map.
This feature is available only if the kernel is built with the
.BR CONFIG_CHECKPOINT_RESTORE
option enabled.
The calling process must have the
.BR CAP_SYS_RESOURCE
capability.
The value in
.I arg2
is one of the options below, while
.I arg3
provides a new value for the option.
.RS
.TP
.BR PR_SET_MM_START_CODE
Set the address above which the program text can run.
The corresponding memory area must be readable and executable,
but not writable or sharable (see
.BR mprotect (2)
and
.BR mmap (2)
for more information).
.TP
.BR PR_SET_MM_END_CODE
Set the address below which the program text can run.
The corresponding memory area must be readable and executable,
but not writable or sharable.
.TP
.BR PR_SET_MM_START_DATA
Set the address above which initialized and
uninitialized (bss) data are placed.
The corresponding memory area must be readable and writable,
but not executable or sharable.
.TP
.B PR_SET_MM_END_DATA
Set the address below which initialized and
uninitialized (bss) data are placed.
The corresponding memory area must be readable and writable,
but not executable or sharable.
.TP
.BR PR_SET_MM_START_STACK
Set the start address of the stack.
The corresponding memory area must be readable and writable.
.TP
.BR PR_SET_MM_START_BRK
Set the address above which the program heap can be expanded with
.BR brk (2)
call.
The address must be greater than the ending address of
the current program data segment.
In addition, the combined size of the resulting heap and
the size of the data segment can't exceed the
.BR RLIMIT_DATA
resource limit (see
.BR setrlimit (2)).
.TP
.BR PR_SET_MM_BRK
Set the current
.BR brk (2)
value.
The requirements for the address are the same as for the
.BR PR_SET_MM_START_BRK
option.
.P
The following options are available since Linux 3.5.
.\" commit fe8c7f5cbf91124987106faa3bdf0c8b955c4cf7
.TP
.BR PR_SET_MM_ARG_START
Set the address above which the program command line is placed.
.TP
.BR PR_SET_MM_ARG_END
Set the address below which the program command line is placed.
.TP
.BR PR_SET_MM_ENV_START
Set the address above which the program environment is placed.
.TP
.BR PR_SET_MM_ENV_END
Set the address below which the program environment is placed.
.IP
The address passed with
.BR PR_SET_MM_ARG_START ,
.BR PR_SET_MM_ARG_END ,
.BR PR_SET_MM_ENV_START ,
and
.BR PR_SET_MM_ENV_END
should belong to a process stack area.
Thus, the corresponding memory area must be readable, writable, and
(depending on the kernel configuration) have the
.BR MAP_GROWSDOWN
attribute set (see
.BR mmap (2)).
.TP
.BR PR_SET_MM_AUXV
Set a new auxiliary vector.
The
.I arg3
argument should provide the address of the vector.
The
.I arg4
is the size of the vector.
.TP
.BR PR_SET_MM_EXE_FILE
.\" commit b32dfe377102ce668775f8b6b1461f7ad428f8b6
Supersede the
.IR /proc/pid/exe
symbolic link with a new one pointing to a new executable file
identified by the file descriptor provided in
.I arg3
argument.
The file descriptor should be obtained with a regular
.BR open (2)
call.
.IP
To change the symbolic link, one needs to unmap all existing
executable memory areas, including those created by the kernel itself
(for example the kernel usually creates at least one executable
memory area for the ELF
.IR \.text
section).
.IP
The second limitation is that such transitions can be done only once
in a process life time.
Any further attempts will be rejected.
This should help system administrators monitor unusual
symbolic-link transitions over all processes running on a system.
.RE
.TP
.BR PR_MPX_ENABLE_MANAGEMENT ", " PR_MPX_DISABLE_MANAGEMENT " (since Linux 3.19) "
.\" commit fe3d197f84319d3bce379a9c0dc17b1f48ad358c
.\" See also http://lwn.net/Articles/582712/
.\" See also https://gcc.gnu.org/wiki/Intel%20MPX%20support%20in%20the%20GCC%20compiler
Enable or disable kernel management of Memory Protection eXtensions (MPX)
bounds tables.
The
.IR arg2 ,
.IR arg3 ,
.IR arg4 ,
and
.IR arg5
.\" commit e9d1b4f3c60997fe197bf0243cb4a41a44387a88
arguments must be zero.

MPX is a hardware-assisted mechanism for performing bounds checking on
pointers.
It consists of a set of registers storing bounds information
and a set of special instruction prefixes that tell the CPU on which
instructions it should do bounds enforcement.
There is a limited number of these registers and
when there are more pointers than registers,
their contents must be "spilled" into a set of tables.
These tables are called "bounds tables" and the MPX
.BR prctl ()
operations control
whether the kernel manages their allocation and freeing.

When management is enabled, the kernel will take over allocation
and freeing of the bounds tables.
It does this by trapping the #BR exceptions that result
at first use of missing bounds tables and
instead of delivering the exception to user space,
it allocates the table and populates the bounds directory
with the location of the new table.
For freeing, the kernel checks to see if bounds tables are
present for memory which is not allocated, and frees them if so.

Before enabling MPX management using
.BR PR_MPX_ENABLE_MANAGEMENT ,
the application must first have allocated a user-space buffer for
the bounds directory and placed the location of that directory in the
.I bndcfgu
register.

These calls will fail if the CPU or kernel does not support MPX.
Kernel support for MPX is enabled via the
.BR CONFIG_X86_INTEL_MPX
configuration option.
You can check whether the CPU supports MPX by looking for the 'mpx'
CPUID bit, like with the following command:

	cat /proc/cpuinfo | grep ' mpx '

A thread may not switch in or out of long (64-bit) mode while MPX is
enabled.

All threads in a process are affected by these calls.

The child of a
.BR fork (2)
inherits the state of MPX management.
During
.BR execve (2),
MPX management is reset to a state as if
.BR PR_MPX_DISABLE_MANAGEMENT
had been called.

For further information on Intel MPX, see the kernel source file
.IR Documentation/x86/intel_mpx.txt .
.\"
.SH RETURN VALUE
On success,
.BR PR_GET_DUMPABLE ,
.BR PR_GET_KEEPCAPS ,
.BR PR_GET_NO_NEW_PRIVS ,
.BR PR_GET_THP_DISABLE ,
.BR PR_CAPBSET_READ ,
.BR PR_GET_TIMING ,
.BR PR_GET_TIMERSLACK ,
.BR PR_GET_SECUREBITS ,
.BR PR_MCE_KILL_GET ,
and (if it returns)
.BR PR_GET_SECCOMP
return the nonnegative values described above.
All other
.I option
values return 0 on success.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EFAULT
.I arg2
is an invalid address.
.TP
.B EFAULT
.I option
is
.BR PR_SET_SECCOMP ,
.I arg2
is
.BR SECCOMP_MODE_FILTER ,
the system was built with
.BR CONFIG_SECCOMP_FILTER ,
and
.I arg3
is an invalid address.
.TP
.B EINVAL
The value of
.I option
is not recognized.
.TP
.B EINVAL
.I option
is
.BR PR_MCE_KILL
or
.BR PR_MCE_KILL_GET
or
.BR PR_SET_MM ,
and unused
.BR prctl ()
arguments were not specified as zero.
.TP
.B EINVAL
.I arg2
is not valid value for this
.IR option .
.TP
.B EINVAL
.I option
is
.BR PR_SET_SECCOMP
or
.BR PR_GET_SECCOMP ,
and the kernel was not configured with
.BR CONFIG_SECCOMP .
.TP
.B EINVAL
.I option
is
.BR PR_SET_SECCOMP ,
.I arg2
is
.BR SECCOMP_MODE_FILTER ,
and the kernel was not configured with
.BR CONFIG_SECCOMP_FILTER .
.TP
.B EINVAL
.I option
is
.BR PR_SET_MM ,
and one of the following is true
.RS
.IP * 3
.I arg4
or
.I arg5
is nonzero;
.IP *
.I arg3
is greater than
.B TASK_SIZE
(the limit on the size of the user address space for this architecture);
.IP *
.I arg2
is
.BR PR_SET_MM_START_CODE ,
.BR PR_SET_MM_END_CODE ,
.BR PR_SET_MM_START_DATA ,
.BR PR_SET_MM_END_DATA ,
or
.BR PR_SET_MM_START_STACK ,
and the permissions of the corresponding memory area are not as required;
.IP *
.I arg2
is
.BR PR_SET_MM_START_BRK
or
.BR PR_SET_MM_BRK ,
and
.I arg3
is less than or equal to the end of the data segment
or specifies a value that would cause the
.B RLIMIT_DATA
resource limit to be exceeded.
.RE
.TP
.B EINVAL
.I option
is
.BR PR_SET_PTRACER
and
.I arg2
is not 0,
.BR PR_SET_PTRACER_ANY ,
or the PID of an existing process.
.TP
.B EINVAL
.I option
is
.B PR_SET_PDEATHSIG
and
.I arg2
is not a valid signal number.
.TP
.B EINVAL
.I option
is
.BR PR_SET_DUMPABLE
and
.I arg2
is neither
.B SUID_DUMP_DISABLE
nor
.BR SUID_DUMP_USER .
.TP
.B EINVAL
.I option
is
.BR PR_SET_TIMING
and
.I arg2
is not
.BR PR_TIMING_STATISTICAL .
.TP
.B EINVAL
.I option
is
.BR PR_SET_NO_NEW_PRIVS
and
.I arg2
is not equal to 1
or
.IR arg3 ,
.IR arg4 ,
or
.IR arg5
is nonzero.
.TP
.B EINVAL
.I option
is
.BR PR_GET_NO_NEW_PRIVS
and
.IR arg2 ,
.IR arg3 ,
.IR arg4 ,
or
.IR arg5
is nonzero.
.TP
.B EINVAL
.I option
is
.BR PR_SET_THP_DISABLE
and
.IR arg3 ,
.IR arg4 ,
or
.IR arg5
is nonzero.
.TP
.B EINVAL
.I option
is
.BR PR_GET_THP_DISABLE
and
.IR arg2 ,
.IR arg3 ,
.IR arg4 ,
or
.IR arg5
is nonzero.
.TP
.B EPERM
.I option
is
.BR PR_SET_SECUREBITS ,
and the caller does not have the
.B CAP_SETPCAP
capability,
or tried to unset a "locked" flag,
or tried to set a flag whose corresponding locked flag was set
(see
.BR capabilities (7)).
.TP
.B EPERM
.I option
is
.BR PR_SET_KEEPCAPS ,
and the callers's
.B SECURE_KEEP_CAPS_LOCKED
flag is set
(see
.BR capabilities (7)).
.TP
.B EPERM
.I option
is
.BR PR_CAPBSET_DROP ,
and the caller does not have the
.B CAP_SETPCAP
capability.
.TP
.B EPERM
.I option
is
.BR PR_SET_MM ,
and the caller does not have the
.B CAP_SYS_RESOURCE
capability.
.TP
.B EACCES
.I option
is
.BR PR_SET_MM ,
and
.I arg3
is
.BR PR_SET_MM_EXE_FILE ,
the file is not executable.
.TP
.B EBUSY
.I option
is
.BR PR_SET_MM ,
.I arg3
is
.BR PR_SET_MM_EXE_FILE ,
and this the second attempt to change the
.I /proc/pid/exe
symbolic link, which is prohibited.
.TP
.B EBADF
.I option
is
.BR PR_SET_MM ,
.I arg3
is
.BR PR_SET_MM_EXE_FILE ,
and the file descriptor passed in
.I arg4
is not valid.
.\" The following can't actually happen, because prctl() in
.\" seccomp mode will cause SIGKILL.
.\" .TP
.\" .B EPERM
.\" .I option
.\" is
.\" .BR PR_SET_SECCOMP ,
.\" and secure computing mode is already 1.
.TP
.B ENXIO
.I option
was
.BR PR_MPX_ENABLE_MANAGEMENT
or
.BR PR_MPX_DISABLE_MANAGEMENT
and the kernel or the CPU does not support MPX management.
Check that the kernel and processor have MPX support.
.SH VERSIONS
The
.BR prctl ()
system call was introduced in Linux 2.1.57.
.\" The library interface was added in glibc 2.0.6
.SH CONFORMING TO
This call is Linux-specific.
IRIX has a
.BR prctl ()
system call (also introduced in Linux 2.1.44
as irix_prctl on the MIPS architecture),
with prototype
.sp
.BI "ptrdiff_t prctl(int " option ", int " arg2 ", int " arg3 );
.sp
and options to get the maximum number of processes per user,
get the maximum number of processors the calling process can use,
find out whether a specified process is currently blocked,
get or set the maximum stack size, and so on.
.SH SEE ALSO
.BR signal (2),
.BR core (5)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 1999 Joseph Samuel Myers.
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH PREAD 2 2015-04-19 "Linux" "Linux Programmer's Manual"
.SH NAME
pread, pwrite \- read from or write to a file descriptor at a given offset
.SH SYNOPSIS
.B #include <unistd.h>
.sp
.BI "ssize_t pread(int " fd ", void *" buf ", size_t " count \
", off_t " offset );
.sp
.BI "ssize_t pwrite(int " fd ", const void *" buf ", size_t " count \
", off_t " offset );
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.PD 0
.ad l
.sp
.BR pread (),
.BR pwrite ():
.RS 4
_XOPEN_SOURCE\ >=\ 500
.br
|| /* Since glibc 2.12: */ _POSIX_C_SOURCE\ >=\ 200809L
.RE
.ad
.PD
.SH DESCRIPTION
.BR pread ()
reads up to
.I count
bytes from file descriptor
.I fd
at offset
.I offset
(from the start of the file) into the buffer starting at
.IR buf .
The file offset is not changed.
.PP
.BR pwrite ()
writes up to
.I count
bytes from the buffer starting at
.I buf
to the file descriptor
.I fd
at offset
.IR offset .
The file offset is not changed.
.PP
The file referenced by
.I fd
must be capable of seeking.
.SH RETURN VALUE
On success, the number of bytes read or written is returned (zero
indicates that nothing was written, in the case of
.BR pwrite (),
or
end of file, in the case of
.BR pread ()),
or \-1 on error, in which case
.I errno
is set to indicate the error.
.SH ERRORS
.BR pread ()
can fail and set
.I errno
to any error specified for
.BR read (2)
or
.BR lseek (2).
.BR pwrite ()
can fail and set
.I errno
to any error specified for
.BR write (2)
or
.BR lseek (2).
.SH VERSIONS
The
.BR pread ()
and
.BR pwrite ()
system calls were added to Linux in
version 2.1.60; the entries in the i386 system call table were added
in 2.1.69.
C library support (including emulation using
.BR lseek (2)
on older kernels without the system calls) was added in glibc 2.1.
.SH CONFORMING TO
POSIX.1-2001.
.SH NOTES
The
.BR pread ()
and
.BR pwrite ()
system calls are especially useful in multithreaded applications.
They allow multiple threads to perform I/O on the same file descriptor
without being affected by changes to the file offset by other threads.
.\"
.SS C library/kernel ABI differences
On Linux, the underlying system calls were renamed
in kernel 2.6:
.BR pread ()
became
.BR pread64 (),
and
.BR pwrite ()
became
.BR pwrite64 ().
The system call numbers remained the same.
The glibc
.BR pread ()
and
.BR pwrite ()
wrapper functions transparently deal with the change.

On some 32-bit architectures,
the calling signature for these system calls differ,
for the reasons described in
.BR syscall (2).
.SH BUGS
POSIX requires that opening a file with the
.BR O_APPEND
flag should have no effect on the location at which
.BR pwrite ()
writes data.
However, on Linux, if a file is opened with
.\" FIXME . https://bugzilla.kernel.org/show_bug.cgi?id=43178
.BR O_APPEND ,
.BR pwrite ()
appends data to the end of the file, regardless of the value of
.IR offset .
.SH SEE ALSO
.BR lseek (2),
.BR read (2),
.BR readv (2),
.BR write (2)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2011 Christopher Yeoh <cyeoh@au1.ibm.com>
.\" and Copyright (C) 2012 Mike Frysinger <vapier@gentoo.org>
.\" and Copyright (C) 2012 Michael Kerrisk <mtk.man-pages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Commit fcf634098c00dd9cd247447368495f0b79be12d1
.\"	
.TH PROCESS_VM_READV 2 2014-08-19 "Linux" "Linux Programmer's Manual"
.SH NAME
process_vm_readv, process_vm_writev \- transfer data between process address spaces
.SH SYNOPSIS
.nf
.B #include <sys/uio.h>

.BI "ssize_t process_vm_readv(pid_t " pid ,
.BI "                         const struct iovec *" local_iov ,
.BI "                         unsigned long " liovcnt ,
.BI "                         const struct iovec *" remote_iov ,
.BI "                         unsigned long " riovcnt ,
.BI "                         unsigned long " flags ");"

.BI "ssize_t process_vm_writev(pid_t " pid ,
.BI "                          const struct iovec *" local_iov ,
.BI "                          unsigned long " liovcnt ,
.BI "                          const struct iovec *" remote_iov ,
.BI "                          unsigned long " riovcnt ,
.BI "                          unsigned long " flags ");"
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR process_vm_readv (),
.BR process_vm_writev ():
.PD 0
.ad l
.RS 4
.BR _GNU_SOURCE
.RE
.ad
.PD
.fi
.SH DESCRIPTION
These system calls transfer data between the address space
of the calling process ("the local process") and the process identified by
.IR pid
("the remote process").
The data moves directly between the address spaces of the two processes,
without passing through kernel space.

The
.BR process_vm_readv ()
system call transfers data from the remote process to the local process.
The data to be transferred is identified by
.IR remote_iov
and
.IR riovcnt :
.IR remote_iov
is a pointer to an array describing address ranges in the process
.IR pid ,
and
.IR riovcnt
specifies the number of elements in
.IR remote_iov .
The data is transferred to the locations specified by
.IR local_iov
and
.IR liovcnt :
.IR local_iov
is a pointer to an array describing address ranges in the calling process,
and
.IR liovcnt
specifies the number of elements in
.IR local_iov .

The
.BR process_vm_writev ()
system call is the converse of
.BR process_vm_readv ()\(emit
transfers data from the local process to the remote process.
Other than the direction of the transfer, the arguments
.IR liovcnt ,
.IR local_iov ,
.IR riovcnt ,
and
.IR remote_iov
have the same meaning as for
.BR process_vm_readv ().

The
.I local_iov
and
.I remote_iov
arguments point to an array of
.I iovec
structures, defined in
.IR <sys/uio.h>
as:

.in +4n
.nf
struct iovec {
    void  *iov_base;    /* Starting address */
    size_t iov_len;     /* Number of bytes to transfer */
};
.fi
.in

Buffers are processed in array order.
This means that
.BR process_vm_readv ()
completely fills
.I local_iov[0]
before proceeding to
.IR local_iov[1] ,
and so on.
Likewise,
.I remote_iov[0]
is completely read before proceeding to
.IR remote_iov[1] ,
and so on.

Similarly,
.BR process_vm_writev ()
writes out the entire contents of
.I local_iov[0]
before proceeding to
.IR local_iov[1] ,
and it completely fills
.I remote_iov[0]
before proceeding to
.IR remote_iov[1] .

The lengths of
.I remote_iov[i].iov_len
and
.I local_iov[i].iov_len
do not have to be the same.
Thus, it is possible to split a single local buffer
into multiple remote buffers, or vice versa.

The
.I flags
argument is currently unused and must be set to 0.

The values specified in the
.I liovcnt
and
.I riovcnt
arguments must be less than or equal to
.BR IOV_MAX
(defined in
.I <limits.h>
or accessible via the call
.IR sysconf(_SC_IOV_MAX) ).
.\" In time, glibc might provide a wrapper that works around this limit,
.\" as is done for readv()/writev()

The count arguments and
.IR local_iov
are checked before doing any transfers.
If the counts are too big, or
.I local_iov
is invalid,
or the addresses refer to regions that are inaccessible to the local process,
none of the vectors will be processed
and an error will be returned immediately.

Note, however, that these system calls do not check the memory regions
in the remote process until just before doing the read/write.
Consequently, a partial read/write (see RETURN VALUE)
may result if one of the
.I remote_iov
elements points to an invalid memory region in the remote process.
No further reads/writes will be attempted beyond that point.
Keep this in mind when attempting to read data of unknown length
(such as C strings that are null-terminated) from a remote process,
by avoiding spanning memory pages (typically 4KiB) in a single remote
.I iovec
element.
(Instead, split the remote read into two
.I remote_iov
elements and have them merge back into a single write
.I local_iov
entry.
The first read entry goes up to the page boundary,
while the second starts on the next page boundary.)

In order to read from or write to another process,
either the caller must have the capability
.BR CAP_SYS_PTRACE ,
or
the real user ID, effective user ID, and saved set-user-ID
of the remote process must match the real user ID of the caller
.I and
the real group ID, effective group ID, and saved set-group-ID
of the remote process must match the real group ID of the caller.
(The permission required is exactly the same as that required to perform a
.BR ptrace (2)
.BR PTRACE_ATTACH
on the remote process.)
.SH RETURN VALUE
On success,
.BR process_vm_readv ()
returns the number of bytes read and
.BR process_vm_writev ()
returns the number of bytes written.
This return value may be less than the total number of requested bytes,
if a partial read/write occurred.
(Partial transfers apply at the granularity of
.I iovec
elements.
These system calls won't perform a partial transfer that splits a single
.I iovec
element.)
The caller should check the return value to determine whether
a partial read/write occurred.

On error, \-1 is returned and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EINVAL
The sum of the
.I iov_len
values of either
.I local_iov
or
.I remote_iov
overflows a
.I ssize_t
value.
.TP
.B EINVAL
.I flags
is not 0.
.TP
.B EINVAL
.I liovcnt
or
.I riovcnt
is too large.
.TP
.B EFAULT
The memory described by
.I local_iov
is outside the caller's accessible address space.
.TP
.B EFAULT
The memory described by
.I remote_iov
is outside the accessible address space of the process
.IR pid .
.TP
.B ENOMEM
Could not allocate memory for internal copies of the
.I iovec
structures.
.TP
.B EPERM
The caller does not have permission to access the address space of the process
.IR pid .
.TP
.B ESRCH
No process with ID
.I pid
exists.
.SH VERSIONS
These system calls were added in Linux 3.2.
Support is provided in glibc since version 2.15.
.SH CONFORMING TO
These system calls are nonstandard Linux extensions.
.SH NOTES
The data transfers performed by
.BR process_vm_readv ()
and
.BR process_vm_writev ()
are not guaranteed to be atomic in any way.

These system calls were designed to permit fast message passing
by allowing messages to be exchanged with a single copy operation
(rather than the double copy that would be required
when using, for example, shared memory or pipes).
.\" Original user is MPI, http://www.mcs.anl.gov/research/projects/mpi/
.\" See also some benchmarks at http://lwn.net/Articles/405284/
.\" and http://marc.info/?l=linux-mm&m=130105930902915&w=2
.SH EXAMPLE
The following code sample demonstrates the use of
.BR process_vm_readv ().
It reads 20 bytes at the address 0x10000 from the process with PID 10
and writes the first 10 bytes into
.I buf1
and the second 10 bytes into
.IR buf2 .
.sp
.nf
#include <sys/uio.h>

int
main(void)
{
    struct iovec local[2];
    struct iovec remote[1];
    char buf1[10];
    char buf2[10];
    ssize_t nread;
    pid_t pid = 10;             /* PID of remote process */

    local[0].iov_base = buf1;
    local[0].iov_len = 10;
    local[1].iov_base = buf2;
    local[1].iov_len = 10;
    remote[0].iov_base = (void *) 0x10000;
    remote[0].iov_len = 20;

    nread = process_vm_readv(pid, local, 2, remote, 1, 0);
    if (nread != 20)
        return 1;
    else
        return 0;
}
.fi
.SH SEE ALSO
.BR readv (2),
.BR writev (2)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1993 Michael Haardt <michael@moria.de>
.\" Fri Apr  2 11:32:09 MET DST 1993
.\"
.\" and changes Copyright (C) 1999 Mike Coleman (mkc@acm.org)
.\" -- major revision to fully document ptrace semantics per recent Linux
.\"    kernel (2.2.10) and glibc (2.1.2)
.\" Sun Nov  7 03:18:35 CST 1999
.\"
.\" and Copyright (c) 2011, Denys Vlasenko <vda.linux@googlemail.com>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.\" Modified Fri Jul 23 23:47:18 1993 by Rik Faith <faith@cs.unc.edu>
.\" Modified Fri Jan 31 16:46:30 1997 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified Thu Oct  7 17:28:49 1999 by Andries Brouwer <aeb@cwi.nl>
.\" Modified, 27 May 2004, Michael Kerrisk <mtk.manpages@gmail.com>
.\"     Added notes on capability requirements
.\"
.\" 2006-03-24, Chuck Ebbert <76306.1226@compuserve.com>
.\"    Added    PTRACE_SETOPTIONS, PTRACE_GETEVENTMSG, PTRACE_GETSIGINFO,
.\"        PTRACE_SETSIGINFO, PTRACE_SYSEMU, PTRACE_SYSEMU_SINGLESTEP
.\"    (Thanks to Blaisorblade, Daniel Jacobowitz and others who helped.)
.\" 2011-09, major update by Denys Vlasenko <vda.linux@googlemail.com>
.\" 2015-01, Kees Cook <keescook@chromium.org>
.\"    Added PTRACE_O_TRACESECCOMP, PTRACE_EVENT_SECCOMP
.\"
.TH PTRACE 2 2015-02-21 "Linux" "Linux Programmer's Manual"
.SH NAME
ptrace \- process trace
.SH SYNOPSIS
.nf
.B #include <sys/ptrace.h>
.sp
.BI "long ptrace(enum __ptrace_request " request ", pid_t " pid ", "
.BI "            void *" addr ", void *" data );
.fi
.SH DESCRIPTION
The
.BR ptrace ()
system call provides a means by which one process (the "tracer")
may observe and control the execution of another process (the "tracee"),
and examine and change the tracee's memory and registers.
It is primarily used to implement breakpoint debugging and system
call tracing.
.LP
A tracee first needs to be attached to the tracer.
Attachment and subsequent commands are per thread:
in a multithreaded process,
every thread can be individually attached to a
(potentially different) tracer,
or left not attached and thus not debugged.
Therefore, "tracee" always means "(one) thread",
never "a (possibly multithreaded) process".
Ptrace commands are always sent to
a specific tracee using a call of the form

    ptrace(PTRACE_foo, pid, ...)

where
.I pid
is the thread ID of the corresponding Linux thread.
.LP
(Note that in this page, a "multithreaded process"
means a thread group consisting of threads created using the
.BR clone (2)
.B CLONE_THREAD
flag.)
.LP
A process can initiate a trace by calling
.BR fork (2)
and having the resulting child do a
.BR PTRACE_TRACEME ,
followed (typically) by an
.BR execve (2).
Alternatively, one process may commence tracing another process using
.B PTRACE_ATTACH
or
.BR PTRACE_SEIZE .
.LP
While being traced, the tracee will stop each time a signal is delivered,
even if the signal is being ignored.
(An exception is
.BR SIGKILL ,
which has its usual effect.)
The tracer will be notified at its next call to
.BR waitpid (2)
(or one of the related "wait" system calls); that call will return a
.I status
value containing information that indicates
the cause of the stop in the tracee.
While the tracee is stopped,
the tracer can use various ptrace requests to inspect and modify the tracee.
The tracer then causes the tracee to continue,
optionally ignoring the delivered signal
(or even delivering a different signal instead).
.LP
If the
.B PTRACE_O_TRACEEXEC
option is not in effect, all successful calls to
.BR execve (2)
by the traced process will cause it to be sent a
.B SIGTRAP
signal,
giving the parent a chance to gain control before the new program
begins execution.
.LP
When the tracer is finished tracing, it can cause the tracee to continue
executing in a normal, untraced mode via
.BR PTRACE_DETACH .
.LP
The value of
.I request
determines the action to be performed:
.TP
.B PTRACE_TRACEME
Indicate that this process is to be traced by its parent.
A process probably shouldn't make this request if its parent
isn't expecting to trace it.
.RI ( pid ,
.IR addr ,
and
.IR data
are ignored.)
.IP
The
.B PTRACE_TRACEME
request is used only by the tracee;
the remaining requests are used only by the tracer.
In the following requests,
.I pid
specifies the thread ID of the tracee to be acted on.
For requests other than
.BR PTRACE_ATTACH ,
.BR PTRACE_SEIZE ,
.BR PTRACE_INTERRUPT ,
and
.BR PTRACE_KILL ,
the tracee must be stopped.
.TP
.BR PTRACE_PEEKTEXT ", " PTRACE_PEEKDATA
Read a word at the address
.I addr
in the tracee's memory, returning the word as the result of the
.BR ptrace ()
call.
Linux does not have separate text and data address spaces,
so these two requests are currently equivalent.
.RI ( data
is ignored; but see NOTES.)
.TP
.B PTRACE_PEEKUSER
.\" PTRACE_PEEKUSR in kernel source, but glibc uses PTRACE_PEEKUSER,
.\" and that is the name that seems common on other systems.
Read a word at offset
.I addr
in the tracee's USER area,
which holds the registers and other information about the process
(see
.IR <sys/user.h> ).
The word is returned as the result of the
.BR ptrace ()
call.
Typically, the offset must be word-aligned, though this might vary by
architecture.
See NOTES.
.RI ( data
is ignored; but see NOTES.)
.TP
.BR PTRACE_POKETEXT ", " PTRACE_POKEDATA
Copy the word
.I data
to the address
.I addr
in the tracee's memory.
As for
.BR PTRACE_PEEKTEXT
and
.BR PTRACE_PEEKDATA ,
these two requests are currently equivalent.
.TP
.B PTRACE_POKEUSER
.\" PTRACE_POKEUSR in kernel source, but glibc uses PTRACE_POKEUSER,
.\" and that is the name that seems common on other systems.
Copy the word
.I data
to offset
.I addr
in the tracee's USER area.
As for
.BR PTRACE_PEEKUSER ,
the offset must typically be word-aligned.
In order to maintain the integrity of the kernel,
some modifications to the USER area are disallowed.
.\" FIXME In the preceding sentence, which modifications are disallowed,
.\" and when they are disallowed, how does user space discover that fact?
.TP
.BR PTRACE_GETREGS ", " PTRACE_GETFPREGS
Copy the tracee's general-purpose or floating-point registers,
respectively, to the address
.I data
in the tracer.
See
.I <sys/user.h>
for information on the format of this data.
.RI ( addr
is ignored.)
Note that SPARC systems have the meaning of
.I data
and
.I addr
reversed; that is,
.I data
is ignored and the registers are copied to the address
.IR addr .
.B PTRACE_GETREGS
and
.B PTRACE_GETFPREGS
are not present on all architectures.
.TP
.BR PTRACE_GETREGSET " (since Linux 2.6.34)"
Read the tracee's registers.
.I addr
specifies, in an architecture-dependent way, the type of registers to be read.
.B NT_PRSTATUS
(with numerical value 1)
usually results in reading of general-purpose registers.
If the CPU has, for example,
floating-point and/or vector registers, they can be retrieved by setting
.I addr
to the corresponding
.B NT_foo
constant.
.I data
points to a
.BR "struct iovec" ,
which describes the destination buffer's location and length.
On return, the kernel modifies
.B iov.len
to indicate the actual number of bytes returned.
.TP
.BR PTRACE_SETREGS ", " PTRACE_SETFPREGS
Modify the tracee's general-purpose or floating-point registers,
respectively, from the address
.I data
in the tracer.
As for
.BR PTRACE_POKEUSER ,
some general-purpose register modifications may be disallowed.
.\" FIXME . In the preceding sentence, which modifications are disallowed,
.\" and when they are disallowed, how does user space discover that fact?
.RI ( addr
is ignored.)
Note that SPARC systems have the meaning of
.I data
and
.I addr
reversed; that is,
.I data
is ignored and the registers are copied from the address
.IR addr .
.B PTRACE_SETREGS
and
.B PTRACE_SETFPREGS
are not present on all architectures.
.TP
.BR PTRACE_SETREGSET " (since Linux 2.6.34)"
Modify the tracee's registers.
The meaning of
.I addr
and
.I data
is analogous to
.BR PTRACE_GETREGSET .
.TP
.BR PTRACE_GETSIGINFO " (since Linux 2.3.99-pre6)"
Retrieve information about the signal that caused the stop.
Copy a
.I siginfo_t
structure (see
.BR sigaction (2))
from the tracee to the address
.I data
in the tracer.
.RI ( addr
is ignored.)
.TP
.BR PTRACE_SETSIGINFO " (since Linux 2.3.99-pre6)"
Set signal information:
copy a
.I siginfo_t
structure from the address
.I data
in the tracer to the tracee.
This will affect only signals that would normally be delivered to
the tracee and were caught by the tracer.
It may be difficult to tell
these normal signals from synthetic signals generated by
.BR ptrace ()
itself.
.RI ( addr
is ignored.)
.TP
.BR PTRACE_PEEKSIGINFO " (since Linux 3.10)"
.\" commit 84c751bd4aebbaae995fe32279d3dba48327bad4
Retrieve
.I siginfo_t
structures without removing signals from a queue.
.I addr
points to a
.I ptrace_peeksiginfo_args
structure that specifies the ordinal position from which
copying of signals should start,
and the number of signals to copy.
.I siginfo_t
structures are copied into the buffer pointed to by
.IR data .
The return value contains the number of copied signals (zero indicates
that there is no signal corresponding to the specified ordinal position).
Within the returned
.I siginfo
structures,
the
.IR si_code
field includes information
.RB ( __SI_CHLD ,
.BR __SI_FAULT ,
etc.) that are not otherwise exposed to user space.
.PP
.in +10n
.nf
struct ptrace_peeksiginfo_args {
    u64 off;    /* Ordinal position in queue at which
                   to start copying signals */
    u32 flags;  /* PTRACE_PEEKSIGINFO_SHARED or 0 */
    s32 nr;     /* Number of signals to copy */
};
.fi

Currently, there is only one flag,
.BR PTRACE_PEEKSIGINFO_SHARED ,
for dumping signals from the process-wide signal queue.
If this flag is not set,
signals are read from the per-thread queue of the specified thread.
.in
.PP
.TP
.BR PTRACE_GETSIGMASK " (since Linux 3.11)"
.\" commit 29000caecbe87b6b66f144f72111f0d02fbbf0c1
Place a copy of the mask of blocked signals (see
.BR sigprocmask (2))
in the buffer pointed to by
.IR data ,
which should be a pointer to a buffer of type
.IR sigset_t .
The
.I addr
argument contains the size of the buffer pointed to by
.IR data
(i.e.,
.IR sizeof(sigset_t) ).
.TP
.BR PTRACE_SETSIGMASK " (since Linux 3.11)"
Change the mask of blocked signals (see
.BR sigprocmask (2))
to the value specified in the buffer pointed to by
.IR data ,
which should be a pointer to a buffer of type
.IR sigset_t .
The
.I addr
argument contains the size of the buffer pointed to by
.IR data
(i.e.,
.IR sizeof(sigset_t) ).
.TP
.BR PTRACE_SETOPTIONS " (since Linux 2.4.6; see BUGS for caveats)"
Set ptrace options from
.IR data .
.RI ( addr
is ignored.)
.IR data
is interpreted as a bit mask of options,
which are specified by the following flags:
.RS
.TP
.BR PTRACE_O_EXITKILL " (since Linux 3.8)"
.\" commit 992fb6e170639b0849bace8e49bf31bd37c4123
If a tracer sets this flag, a
.B SIGKILL
signal will be sent to every tracee if the tracer exits.
This option is useful for ptrace jailers that
want to ensure that tracees can never escape the tracer's control.
.TP
.BR PTRACE_O_TRACECLONE " (since Linux 2.5.46)"
Stop the tracee at the next
.BR clone (2)
and automatically start tracing the newly cloned process,
which will start with a
.BR SIGSTOP ,
or
.B PTRACE_EVENT_STOP
if
.B PTRACE_SEIZE
was used.
A
.BR waitpid (2)
by the tracer will return a
.I status
value such that

.nf
  status>>8 == (SIGTRAP | (PTRACE_EVENT_CLONE<<8))
.fi

The PID of the new process can be retrieved with
.BR PTRACE_GETEVENTMSG .
.IP
This option may not catch
.BR clone (2)
calls in all cases.
If the tracee calls
.BR clone (2)
with the
.B CLONE_VFORK
flag,
.B PTRACE_EVENT_VFORK
will be delivered instead
if
.B PTRACE_O_TRACEVFORK
is set; otherwise if the tracee calls
.BR clone (2)
with the exit signal set to
.BR SIGCHLD ,
.B PTRACE_EVENT_FORK
will be delivered if
.B PTRACE_O_TRACEFORK
is set.
.TP
.BR PTRACE_O_TRACEEXEC " (since Linux 2.5.46)"
Stop the tracee at the next
.BR execve (2).
A
.BR waitpid (2)
by the tracer will return a
.I status
value such that

.nf
  status>>8 == (SIGTRAP | (PTRACE_EVENT_EXEC<<8))
.fi

If the execing thread is not a thread group leader,
the thread ID is reset to thread group leader's ID before this stop.
Since Linux 3.0, the former thread ID can be retrieved with
.BR PTRACE_GETEVENTMSG .
.TP
.BR PTRACE_O_TRACEEXIT " (since Linux 2.5.60)"
Stop the tracee at exit.
A
.BR waitpid (2)
by the tracer will return a
.I status
value such that

.nf
  status>>8 == (SIGTRAP | (PTRACE_EVENT_EXIT<<8))
.fi

The tracee's exit status can be retrieved with
.BR PTRACE_GETEVENTMSG .
.IP
The tracee is stopped early during process exit,
when registers are still available,
allowing the tracer to see where the exit occurred,
whereas the normal exit notification is done after the process
is finished exiting.
Even though context is available,
the tracer cannot prevent the exit from happening at this point.
.TP
.BR PTRACE_O_TRACEFORK " (since Linux 2.5.46)"
Stop the tracee at the next
.BR fork (2)
and automatically start tracing the newly forked process,
which will start with a
.BR SIGSTOP ,
or
.B PTRACE_EVENT_STOP
if
.B PTRACE_SEIZE
was used.
A
.BR waitpid (2)
by the tracer will return a
.I status
value such that

.nf
  status>>8 == (SIGTRAP | (PTRACE_EVENT_FORK<<8))
.fi

The PID of the new process can be retrieved with
.BR PTRACE_GETEVENTMSG .
.TP
.BR PTRACE_O_TRACESYSGOOD " (since Linux 2.4.6)"
When delivering system call traps, set bit 7 in the signal number
(i.e., deliver
.IR "SIGTRAP|0x80" ).
This makes it easy for the tracer to distinguish
normal traps from those caused by a system call.
.RB ( PTRACE_O_TRACESYSGOOD
may not work on all architectures.)
.TP
.BR PTRACE_O_TRACEVFORK " (since Linux 2.5.46)"
Stop the tracee at the next
.BR vfork (2)
and automatically start tracing the newly vforked process,
which will start with a
.BR SIGSTOP ,
or
.B PTRACE_EVENT_STOP
if
.B PTRACE_SEIZE
was used.
A
.BR waitpid (2)
by the tracer will return a
.I status
value such that

.nf
  status>>8 == (SIGTRAP | (PTRACE_EVENT_VFORK<<8))
.fi

The PID of the new process can be retrieved with
.BR PTRACE_GETEVENTMSG .
.TP
.BR PTRACE_O_TRACEVFORKDONE " (since Linux 2.5.60)"
Stop the tracee at the completion of the next
.BR vfork (2).
A
.BR waitpid (2)
by the tracer will return a
.I status
value such that

.nf
  status>>8 == (SIGTRAP | (PTRACE_EVENT_VFORK_DONE<<8))
.fi

The PID of the new process can (since Linux 2.6.18) be retrieved with
.BR PTRACE_GETEVENTMSG .
.TP
.BR PTRACE_O_TRACESECCOMP " (since Linux 3.5)"
Stop the tracee when a
.BR seccomp (2)
.BR SECCOMP_RET_TRACE
rule is triggered.
A
.BR waitpid (2)
by the tracer will return a
.I status
value such that

.nf
  status>>8 == (SIGTRAP | (PTRACE_EVENT_SECCOMP<<8))
.fi

While this triggers a
.BR PTRACE_EVENT
stop, it is similar to a syscall-enter-stop, in that the tracee has
not yet entered the syscall that seccomp triggered on.
The seccomp event message data (from the
.BR SECCOMP_RET_DATA
portion of the seccomp filter rule) can be retrieved with
.BR PTRACE_GETEVENTMSG .
.RE
.TP
.BR PTRACE_GETEVENTMSG " (since Linux 2.5.46)"
Retrieve a message (as an
.IR "unsigned long" )
about the ptrace event
that just happened, placing it at the address
.I data
in the tracer.
For
.BR PTRACE_EVENT_EXIT ,
this is the tracee's exit status.
For
.BR PTRACE_EVENT_FORK ,
.BR PTRACE_EVENT_VFORK ,
.BR PTRACE_EVENT_VFORK_DONE ,
and
.BR PTRACE_EVENT_CLONE ,
this is the PID of the new process.
For
.BR PTRACE_EVENT_SECCOMP ,
this is the
.BR seccomp (2)
filter's
.BR SECCOMP_RET_DATA
associated with the triggered rule.
.RI ( addr
is ignored.)
.TP
.B PTRACE_CONT
Restart the stopped tracee process.
If
.I data
is nonzero,
it is interpreted as the number of a signal to be delivered to the tracee;
otherwise, no signal is delivered.
Thus, for example, the tracer can control
whether a signal sent to the tracee is delivered or not.
.RI ( addr
is ignored.)
.TP
.BR PTRACE_SYSCALL ", " PTRACE_SINGLESTEP
Restart the stopped tracee as for
.BR PTRACE_CONT ,
but arrange for the tracee to be stopped at
the next entry to or exit from a system call,
or after execution of a single instruction, respectively.
(The tracee will also, as usual, be stopped upon receipt of a signal.)
From the tracer's perspective, the tracee will appear to have been
stopped by receipt of a
.BR SIGTRAP .
So, for
.BR PTRACE_SYSCALL ,
for example, the idea is to inspect
the arguments to the system call at the first stop,
then do another
.B PTRACE_SYSCALL
and inspect the return value of the system call at the second stop.
The
.I data
argument is treated as for
.BR PTRACE_CONT .
.RI ( addr
is ignored.)
.TP
.BR PTRACE_SYSEMU ", " PTRACE_SYSEMU_SINGLESTEP " (since Linux 2.6.14)"
For
.BR PTRACE_SYSEMU ,
continue and stop on entry to the next system call,
which will not be executed.
For
.BR PTRACE_SYSEMU_SINGLESTEP ,
do the same but also singlestep if not a system call.
This call is used by programs like
User Mode Linux that want to emulate all the tracee's system calls.
The
.I data
argument is treated as for
.BR PTRACE_CONT .
The
.I addr
argument is ignored.
These requests are currently
.\" As at 3.7
supported only on x86.
.TP
.BR PTRACE_LISTEN " (since Linux 3.4)"
Restart the stopped tracee, but prevent it from executing.
The resulting state of the tracee is similar to a process which
has been stopped by a
.B SIGSTOP
(or other stopping signal).
See the "group-stop" subsection for additional information.
.B PTRACE_LISTEN
works only on tracees attached by
.BR PTRACE_SEIZE .
.TP
.B PTRACE_KILL
Send the tracee a
.B SIGKILL
to terminate it.
.RI ( addr
and
.I data
are ignored.)
.IP
.I This operation is deprecated; do not use it!
Instead, send a
.BR SIGKILL
directly using
.BR kill (2)
or
.BR tgkill (2).
The problem with
.B PTRACE_KILL
is that it requires the tracee to be in signal-delivery-stop,
otherwise it may not work
(i.e., may complete successfully but won't kill the tracee).
By contrast, sending a
.B SIGKILL
directly has no such limitation.
.\" [Note from Denys Vlasenko:
.\"     deprecation suggested by Oleg Nesterov. He prefers to deprecate it
.\"     instead of describing (and needing to support) PTRACE_KILL's quirks.]
.TP
.BR PTRACE_INTERRUPT " (since Linux 3.4)"
Stop a tracee.
If the tracee is running or sleeping in kernel space and
.B PTRACE_SYSCALL
is in effect,
the system call is interrupted and syscall-exit-stop is reported.
(The interrupted system call is restarted when the tracee is restarted.)
If the tracee was already stopped by a signal and
.B PTRACE_LISTEN
was sent to it,
the tracee stops with
.B PTRACE_EVENT_STOP
and
.I WSTOPSIG(status)
returns the stop signal.
If any other ptrace-stop is generated at the same time (for example,
if a signal is sent to the tracee), this ptrace-stop happens.
If none of the above applies (for example, if the tracee is running in user
space), it stops with
.B PTRACE_EVENT_STOP
with
.I WSTOPSIG(status)
==
.BR SIGTRAP .
.B PTRACE_INTERRUPT
only works on tracees attached by
.BR PTRACE_SEIZE .
.TP
.B PTRACE_ATTACH
Attach to the process specified in
.IR pid ,
making it a tracee of the calling process.
.\" No longer true (removed by Denys Vlasenko, 2011, who remarks:
.\"        "I think it isn't true in non-ancient 2.4 and in 2.6/3.x.
.\"         Basically, it's not true for any Linux in practical use.
.\" ; the behavior of the tracee is as if it had done a
.\" .BR PTRACE_TRACEME .
.\" The calling process actually becomes the parent of the tracee
.\" process for most purposes (e.g., it will receive
.\" notification of tracee events and appears in
.\" .BR ps (1)
.\" output as the tracee's parent), but a
.\" .BR getppid (2)
.\" by the tracee will still return the PID of the original parent.
The tracee is sent a
.BR SIGSTOP ,
but will not necessarily have stopped
by the completion of this call; use
.BR waitpid (2)
to wait for the tracee to stop.
See the "Attaching and detaching" subsection for additional information.
.RI ( addr
and
.I data
are ignored.)
.TP
.BR PTRACE_SEIZE " (since Linux 3.4)"
Attach to the process specified in
.IR pid ,
making it a tracee of the calling process.
Unlike
.BR PTRACE_ATTACH ,
.B PTRACE_SEIZE
does not stop the process.
Group-stops are reported as
.B PTRACE_EVENT_STOP
and
.I WSTOPSIG(status)
returns the stop signal.
Automatically attached children stop with
.B PTRACE_EVENT_STOP
and
.I WSTOPSIG(status)
returns
.B SIGTRAP
instead of having
.B SIGSTOP
signal delivered to them.
.BR evecve (2)
does not deliver an extra
.BR SIGTRAP .
Only a
.BR PTRACE_SEIZE d
process can accept
.B PTRACE_INTERRUPT
and
.B PTRACE_LISTEN
commands.
The "seized" behavior just described is inherited by
children that are automatically attached using
.BR PTRACE_O_TRACEFORK ,
.BR PTRACE_O_TRACEVFORK ,
and
.BR PTRACE_O_TRACECLONE .
.I addr
must be zero.
.I data
contains a bit mask of ptrace options to activate immediately.
.TP
.B PTRACE_DETACH
Restart the stopped tracee as for
.BR PTRACE_CONT ,
but first detach from it.
Under Linux, a tracee can be detached in this way regardless
of which method was used to initiate tracing.
.RI ( addr
is ignored.)
.SS Death under ptrace
When a (possibly multithreaded) process receives a killing signal
(one whose disposition is set to
.B SIG_DFL
and whose default action is to kill the process),
all threads exit.
Tracees report their death to their tracer(s).
Notification of this event is delivered via
.BR waitpid (2).
.LP
Note that the killing signal will first cause signal-delivery-stop
(on one tracee only),
and only after it is injected by the tracer
(or after it was dispatched to a thread which isn't traced),
will death from the signal happen on
.I all
tracees within a multithreaded process.
(The term "signal-delivery-stop" is explained below.)
.LP
.B SIGKILL
does not generate signal-delivery-stop and
therefore the tracer can't suppress it.
.B SIGKILL
kills even within system calls
(syscall-exit-stop is not generated prior to death by
.BR SIGKILL ).
The net effect is that
.B SIGKILL
always kills the process (all its threads),
even if some threads of the process are ptraced.
.LP
When the tracee calls
.BR _exit (2),
it reports its death to its tracer.
Other threads are not affected.
.LP
When any thread executes
.BR exit_group (2),
every tracee in its thread group reports its death to its tracer.
.LP
If the
.B PTRACE_O_TRACEEXIT
option is on,
.B PTRACE_EVENT_EXIT
will happen before actual death.
This applies to exits via
.BR exit (2),
.BR exit_group (2),
and signal deaths (except
.BR SIGKILL ),
and when threads are torn down on
.BR execve (2)
in a multithreaded process.
.LP
The tracer cannot assume that the ptrace-stopped tracee exists.
There are many scenarios when the tracee may die while stopped (such as
.BR SIGKILL ).
Therefore, the tracer must be prepared to handle an
.B ESRCH
error on any ptrace operation.
Unfortunately, the same error is returned if the tracee
exists but is not ptrace-stopped
(for commands which require a stopped tracee),
or if it is not traced by the process which issued the ptrace call.
The tracer needs to keep track of the stopped/running state of the tracee,
and interpret
.B ESRCH
as "tracee died unexpectedly" only if it knows that the tracee has
been observed to enter ptrace-stop.
Note that there is no guarantee that
.I waitpid(WNOHANG)
will reliably report the tracee's death status if a
ptrace operation returned
.BR ESRCH .
.I waitpid(WNOHANG)
may return 0 instead.
In other words, the tracee may be "not yet fully dead",
but already refusing ptrace requests.
.LP
The tracer can't assume that the tracee
.I always
ends its life by reporting
.I WIFEXITED(status)
or
.IR WIFSIGNALED(status) ;
there are cases where this does not occur.
For example, if a thread other than thread group leader does an
.BR execve (2),
it disappears;
its PID will never be seen again,
and any subsequent ptrace stops will be reported under
the thread group leader's PID.
.SS Stopped states
A tracee can be in two states: running or stopped.
For the purposes of ptrace, a tracee which is blocked in a system call
(such as
.BR read (2),
.BR pause (2),
etc.)
is nevertheless considered to be running, even if the tracee is blocked
for a long time.
The state of the tracee after
.BR PTRACE_LISTEN
is somewhat of a gray area: it is not in any ptrace-stop (ptrace commands
won't work on it, and it will deliver
.BR waitpid (2)
notifications),
but it also may be considered "stopped" because
it is not executing instructions (is not scheduled), and if it was
in group-stop before
.BR PTRACE_LISTEN ,
it will not respond to signals until
.B SIGCONT
is received.
.LP
There are many kinds of states when the tracee is stopped, and in ptrace
discussions they are often conflated.
Therefore, it is important to use precise terms.
.LP
In this manual page, any stopped state in which the tracee is ready
to accept ptrace commands from the tracer is called
.IR ptrace-stop .
Ptrace-stops can
be further subdivided into
.IR signal-delivery-stop ,
.IR group-stop ,
.IR syscall-stop ,
and so on.
These stopped states are described in detail below.
.LP
When the running tracee enters ptrace-stop, it notifies its tracer using
.BR waitpid (2)
(or one of the other "wait" system calls).
Most of this manual page assumes that the tracer waits with:
.LP
    pid = waitpid(pid_or_minus_1, &status, __WALL);
.LP
Ptrace-stopped tracees are reported as returns with
.I pid
greater than 0 and
.I WIFSTOPPED(status)
true.
.\" Denys Vlasenko:
.\"     Do we require __WALL usage, or will just using 0 be ok? (With 0,
.\"     I am not 100% sure there aren't ugly corner cases.) Are the
.\"     rules different if user wants to use waitid? Will waitid require
.\"     WEXITED?
.\"
.LP
The
.B __WALL
flag does not include the
.B WSTOPPED
and
.B WEXITED
flags, but implies their functionality.
.LP
Setting the
.B WCONTINUED
flag when calling
.BR waitpid (2)
is not recommended: the "continued" state is per-process and
consuming it can confuse the real parent of the tracee.
.LP
Use of the
.B WNOHANG
flag may cause
.BR waitpid (2)
to return 0 ("no wait results available yet")
even if the tracer knows there should be a notification.
Example:
.nf

    errno = 0;
    ptrace(PTRACE_CONT, pid, 0L, 0L);
    if (errno == ESRCH) {
        /* tracee is dead */
        r = waitpid(tracee, &status, __WALL | WNOHANG);
        /* r can still be 0 here! */
    }
.fi
.\" FIXME .
.\"     waitid usage? WNOWAIT?
.\"     describe how wait notifications queue (or not queue)
.LP
The following kinds of ptrace-stops exist: signal-delivery-stops,
group-stops,
.B PTRACE_EVENT
stops, syscall-stops.
They all are reported by
.BR waitpid (2)
with
.I WIFSTOPPED(status)
true.
They may be differentiated by examining the value
.IR status>>8 ,
and if there is ambiguity in that value, by querying
.BR PTRACE_GETSIGINFO .
(Note: the
.I WSTOPSIG(status)
macro can't be used to perform this examination,
because it returns the value
.IR "(status>>8)\ &\ 0xff" .)
.SS Signal-delivery-stop
When a (possibly multithreaded) process receives any signal except
.BR SIGKILL ,
the kernel selects an arbitrary thread which handles the signal.
(If the signal is generated with
.BR tgkill (2),
the target thread can be explicitly selected by the caller.)
If the selected thread is traced, it enters signal-delivery-stop.
At this point, the signal is not yet delivered to the process,
and can be suppressed by the tracer.
If the tracer doesn't suppress the signal,
it passes the signal to the tracee in the next ptrace restart request.
This second step of signal delivery is called
.I "signal injection"
in this manual page.
Note that if the signal is blocked,
signal-delivery-stop doesn't happen until the signal is unblocked,
with the usual exception that
.B SIGSTOP
can't be blocked.
.LP
Signal-delivery-stop is observed by the tracer as
.BR waitpid (2)
returning with
.I WIFSTOPPED(status)
true, with the signal returned by
.IR WSTOPSIG(status) .
If the signal is
.BR SIGTRAP ,
this may be a different kind of ptrace-stop;
see the "Syscall-stops" and "execve" sections below for details.
If
.I WSTOPSIG(status)
returns a stopping signal, this may be a group-stop; see below.
.SS Signal injection and suppression
After signal-delivery-stop is observed by the tracer,
the tracer should restart the tracee with the call
.LP
    ptrace(PTRACE_restart, pid, 0, sig)
.LP
where
.B PTRACE_restart
is one of the restarting ptrace requests.
If
.I sig
is 0, then a signal is not delivered.
Otherwise, the signal
.I sig
is delivered.
This operation is called
.I "signal injection"
in this manual page, to distinguish it from signal-delivery-stop.
.LP
The
.I sig
value may be different from the
.I WSTOPSIG(status)
value: the tracer can cause a different signal to be injected.
.LP
Note that a suppressed signal still causes system calls to return
prematurely.
In this case, system calls will be restarted: the tracer will
observe the tracee to reexecute the interrupted system call (or
.BR restart_syscall (2)
system call for a few system calls which use a different mechanism
for restarting) if the tracer uses
.BR PTRACE_SYSCALL .
Even system calls (such as
.BR poll (2))
which are not restartable after signal are restarted after
signal is suppressed;
however, kernel bugs exist which cause some system calls to fail with
.B EINTR
even though no observable signal is injected to the tracee.
.LP
Restarting ptrace commands issued in ptrace-stops other than
signal-delivery-stop are not guaranteed to inject a signal, even if
.I sig
is nonzero.
No error is reported; a nonzero
.I sig
may simply be ignored.
Ptrace users should not try to "create a new signal" this way: use
.BR tgkill (2)
instead.
.LP
The fact that signal injection requests may be ignored
when restarting the tracee after
ptrace stops that are not signal-delivery-stops
is a cause of confusion among ptrace users.
One typical scenario is that the tracer observes group-stop,
mistakes it for signal-delivery-stop, restarts the tracee with

    ptrace(PTRACE_restart, pid, 0, stopsig)

with the intention of injecting
.IR stopsig ,
but
.I stopsig
gets ignored and the tracee continues to run.
.LP
The
.B SIGCONT
signal has a side effect of waking up (all threads of)
a group-stopped process.
This side effect happens before signal-delivery-stop.
The tracer can't suppress this side effect (it can
only suppress signal injection, which only causes the
.BR SIGCONT
handler to not be executed in the tracee, if such a handler is installed).
In fact, waking up from group-stop may be followed by
signal-delivery-stop for signal(s)
.I other than
.BR SIGCONT ,
if they were pending when
.B SIGCONT
was delivered.
In other words,
.B SIGCONT
may be not the first signal observed by the tracee after it was sent.
.LP
Stopping signals cause (all threads of) a process to enter group-stop.
This side effect happens after signal injection, and therefore can be
suppressed by the tracer.
.LP
In Linux 2.4 and earlier, the
.B SIGSTOP
signal can't be injected.
.\" In the Linux 2.4 sources, in arch/i386/kernel/signal.c::do_signal(),
.\" there is:
.\"
.\"             /* The debugger continued.  Ignore SIGSTOP.  */
.\"             if (signr == SIGSTOP)
.\"                     continue;
.LP
.B PTRACE_GETSIGINFO
can be used to retrieve a
.I siginfo_t
structure which corresponds to the delivered signal.
.B PTRACE_SETSIGINFO
may be used to modify it.
If
.B PTRACE_SETSIGINFO
has been used to alter
.IR siginfo_t ,
the
.I si_signo
field and the
.I sig
parameter in the restarting command must match,
otherwise the result is undefined.
.SS Group-stop
When a (possibly multithreaded) process receives a stopping signal,
all threads stop.
If some threads are traced, they enter a group-stop.
Note that the stopping signal will first cause signal-delivery-stop
(on one tracee only), and only after it is injected by the tracer
(or after it was dispatched to a thread which isn't traced),
will group-stop be initiated on
.I all
tracees within the multithreaded process.
As usual, every tracee reports its group-stop separately
to the corresponding tracer.
.LP
Group-stop is observed by the tracer as
.BR waitpid (2)
returning with
.I WIFSTOPPED(status)
true, with the stopping signal available via
.IR WSTOPSIG(status) .
The same result is returned by some other classes of ptrace-stops,
therefore the recommended practice is to perform the call
.LP
    ptrace(PTRACE_GETSIGINFO, pid, 0, &siginfo)
.LP
The call can be avoided if the signal is not
.BR SIGSTOP ,
.BR SIGTSTP ,
.BR SIGTTIN ,
or
.BR SIGTTOU ;
only these four signals are stopping signals.
If the tracer sees something else, it can't be a group-stop.
Otherwise, the tracer needs to call
.BR PTRACE_GETSIGINFO .
If
.B PTRACE_GETSIGINFO
fails with
.BR EINVAL ,
then it is definitely a group-stop.
(Other failure codes are possible, such as
.B ESRCH
("no such process") if a
.B SIGKILL
killed the tracee.)
.LP
If tracee was attached using
.BR PTRACE_SEIZE ,
group-stop is indicated by
.BR PTRACE_EVENT_STOP :
.IR "status>>16 == PTRACE_EVENT_STOP" .
This allows detection of group-stops
without requiring an extra
.B PTRACE_GETSIGINFO
call.
.LP
As of Linux 2.6.38,
after the tracer sees the tracee ptrace-stop and until it
restarts or kills it, the tracee will not run,
and will not send notifications (except
.B SIGKILL
death) to the tracer, even if the tracer enters into another
.BR waitpid (2)
call.
.LP
The kernel behavior described in the previous paragraph
causes a problem with transparent handling of stopping signals.
If the tracer restarts the tracee after group-stop,
the stopping signal
is effectively ignored\(emthe tracee doesn't remain stopped, it runs.
If the tracer doesn't restart the tracee before entering into the next
.BR waitpid (2),
future
.B SIGCONT
signals will not be reported to the tracer;
this would cause the
.B SIGCONT
signals to have no effect on the tracee.
.LP
Since Linux 3.4, there is a method to overcome this problem: instead of
.BR PTRACE_CONT ,
a
.B PTRACE_LISTEN
command can be used to restart a tracee in a way where it does not execute,
but waits for a new event which it can report via
.BR waitpid (2)
(such as when
it is restarted by a
.BR SIGCONT ).
.SS PTRACE_EVENT stops
If the tracer sets
.B PTRACE_O_TRACE_*
options, the tracee will enter ptrace-stops called
.B PTRACE_EVENT
stops.
.LP
.B PTRACE_EVENT
stops are observed by the tracer as
.BR waitpid (2)
returning with
.IR WIFSTOPPED(status) ,
and
.I WSTOPSIG(status)
returns
.BR SIGTRAP .
An additional bit is set in the higher byte of the status word:
the value
.I status>>8
will be

    (SIGTRAP | PTRACE_EVENT_foo << 8).

The following events exist:
.TP
.B PTRACE_EVENT_VFORK
Stop before return from
.BR vfork (2)
or
.BR clone (2)
with the
.B CLONE_VFORK
flag.
When the tracee is continued after this stop, it will wait for child to
exit/exec before continuing its execution
(in other words, the usual behavior on
.BR vfork (2)).
.TP
.B PTRACE_EVENT_FORK
Stop before return from
.BR fork (2)
or
.BR clone (2)
with the exit signal set to
.BR SIGCHLD .
.TP
.B PTRACE_EVENT_CLONE
Stop before return from
.BR clone (2).
.TP
.B PTRACE_EVENT_VFORK_DONE
Stop before return from
.BR vfork (2)
or
.BR clone (2)
with the
.B CLONE_VFORK
flag,
but after the child unblocked this tracee by exiting or execing.
.LP
For all four stops described above,
the stop occurs in the parent (i.e., the tracee),
not in the newly created thread.
.BR PTRACE_GETEVENTMSG
can be used to retrieve the new thread's ID.
.TP
.B PTRACE_EVENT_EXEC
Stop before return from
.BR execve (2).
Since Linux 3.0,
.BR PTRACE_GETEVENTMSG
returns the former thread ID.
.TP
.B PTRACE_EVENT_EXIT
Stop before exit (including death from
.BR exit_group (2)),
signal death, or exit caused by
.BR execve (2)
in a multithreaded process.
.B PTRACE_GETEVENTMSG
returns the exit status.
Registers can be examined
(unlike when "real" exit happens).
The tracee is still alive; it needs to be
.BR PTRACE_CONT ed
or
.BR PTRACE_DETACH ed
to finish exiting.
.TP
.B PTRACE_EVENT_STOP
Stop induced by
.B PTRACE_INTERRUPT
command, or group-stop, or initial ptrace-stop when a new child is attached
(only if attached using
.BR PTRACE_SEIZE ).
.TP
.B PTRACE_EVENT_SECCOMP
Stop triggered by a
.BR seccomp (2)
rule on tracee syscall entry when
.BR PTRACE_O_TRACESECCOMP
has been set by the tracer.
The seccomp event message data (from the
.BR SECCOMP_RET_DATA
portion of the seccomp filter rule) can be retrieved with
.BR PTRACE_GETEVENTMSG .
.LP
.B PTRACE_GETSIGINFO
on
.B PTRACE_EVENT
stops returns
.B SIGTRAP
in
.IR si_signo ,
with
.I si_code
set to
.IR "(event<<8)\ |\ SIGTRAP" .
.SS Syscall-stops
If the tracee was restarted by
.BR PTRACE_SYSCALL ,
the tracee enters
syscall-enter-stop just prior to entering any system call.
If the tracer restarts the tracee with
.BR PTRACE_SYSCALL ,
the tracee enters syscall-exit-stop when the system call is finished,
or if it is interrupted by a signal.
(That is, signal-delivery-stop never happens between syscall-enter-stop
and syscall-exit-stop; it happens
.I after
syscall-exit-stop.)
.LP
Other possibilities are that the tracee may stop in a
.B PTRACE_EVENT
stop, exit (if it entered
.BR _exit (2)
or
.BR exit_group (2)),
be killed by
.BR SIGKILL ,
or die silently (if it is a thread group leader, the
.BR execve (2)
happened in another thread,
and that thread is not traced by the same tracer;
this situation is discussed later).
.LP
Syscall-enter-stop and syscall-exit-stop are observed by the tracer as
.BR waitpid (2)
returning with
.I WIFSTOPPED(status)
true, and
.I WSTOPSIG(status)
giving
.BR SIGTRAP .
If the
.B PTRACE_O_TRACESYSGOOD
option was set by the tracer, then
.I WSTOPSIG(status)
will give the value
.IR "(SIGTRAP\ |\ 0x80)" .
.LP
Syscall-stops can be distinguished from signal-delivery-stop with
.B SIGTRAP
by querying
.BR PTRACE_GETSIGINFO
for the following cases:
.TP
.IR si_code " <= 0"
.B SIGTRAP
was delivered as a result of a user-space action,
for example, a system call
.RB ( tgkill (2),
.BR kill (2),
.BR sigqueue (3),
etc.),
expiration of a POSIX timer,
change of state on a POSIX message queue,
or completion of an asynchronous I/O request.
.TP
.IR si_code " == SI_KERNEL (0x80)"
.B SIGTRAP
was sent by the kernel.
.TP
.IR si_code " == SIGTRAP or " si_code " == (SIGTRAP|0x80)"
This is a syscall-stop.
.LP
However, syscall-stops happen very often (twice per system call),
and performing
.B PTRACE_GETSIGINFO
for every syscall-stop may be somewhat expensive.
.LP
Some architectures allow the cases to be distinguished
by examining registers.
For example, on x86,
.I rax
==
.RB - ENOSYS
in syscall-enter-stop.
Since
.B SIGTRAP
(like any other signal) always happens
.I after
syscall-exit-stop,
and at this point
.I rax
almost never contains
.RB - ENOSYS ,
the
.B SIGTRAP
looks like "syscall-stop which is not syscall-enter-stop";
in other words, it looks like a
"stray syscall-exit-stop" and can be detected this way.
But such detection is fragile and is best avoided.
.LP
Using the
.B PTRACE_O_TRACESYSGOOD
option is the recommended method to distinguish syscall-stops
from other kinds of ptrace-stops,
since it is reliable and does not incur a performance penalty.
.LP
Syscall-enter-stop and syscall-exit-stop are
indistinguishable from each other by the tracer.
The tracer needs to keep track of the sequence of
ptrace-stops in order to not misinterpret syscall-enter-stop as
syscall-exit-stop or vice versa.
The rule is that syscall-enter-stop is
always followed by syscall-exit-stop,
.B PTRACE_EVENT
stop or the tracee's death;
no other kinds of ptrace-stop can occur in between.
.LP
If after syscall-enter-stop,
the tracer uses a restarting command other than
.BR PTRACE_SYSCALL ,
syscall-exit-stop is not generated.
.LP
.B PTRACE_GETSIGINFO
on syscall-stops returns
.B SIGTRAP
in
.IR si_signo ,
with
.I si_code
set to
.B SIGTRAP
or
.IR (SIGTRAP|0x80) .
.SS PTRACE_SINGLESTEP, PTRACE_SYSEMU, PTRACE_SYSEMU_SINGLESTEP stops
[Details of these kinds of stops are yet to be documented.]
.\"
.\" FIXME .
.\" document stops occurring with PTRACE_SINGLESTEP, PTRACE_SYSEMU,
.\" PTRACE_SYSEMU_SINGLESTEP
.SS Informational and restarting ptrace commands
Most ptrace commands (all except
.BR PTRACE_ATTACH ,
.BR PTRACE_SEIZE ,
.BR PTRACE_TRACEME ,
.BR PTRACE_INTERRUPT ,
and
.BR PTRACE_KILL )
require the tracee to be in a ptrace-stop, otherwise they fail with
.BR ESRCH .
.LP
When the tracee is in ptrace-stop,
the tracer can read and write data to
the tracee using informational commands.
These commands leave the tracee in ptrace-stopped state:
.LP
.nf
    ptrace(PTRACE_PEEKTEXT/PEEKDATA/PEEKUSER, pid, addr, 0);
    ptrace(PTRACE_POKETEXT/POKEDATA/POKEUSER, pid, addr, long_val);
    ptrace(PTRACE_GETREGS/GETFPREGS, pid, 0, &struct);
    ptrace(PTRACE_SETREGS/SETFPREGS, pid, 0, &struct);
    ptrace(PTRACE_GETREGSET, pid, NT_foo, &iov);
    ptrace(PTRACE_SETREGSET, pid, NT_foo, &iov);
    ptrace(PTRACE_GETSIGINFO, pid, 0, &siginfo);
    ptrace(PTRACE_SETSIGINFO, pid, 0, &siginfo);
    ptrace(PTRACE_GETEVENTMSG, pid, 0, &long_var);
    ptrace(PTRACE_SETOPTIONS, pid, 0, PTRACE_O_flags);
.fi
.LP
Note that some errors are not reported.
For example, setting signal information
.RI ( siginfo )
may have no effect in some ptrace-stops, yet the call may succeed
(return 0 and not set
.IR errno );
querying
.B PTRACE_GETEVENTMSG
may succeed and return some random value if current ptrace-stop
is not documented as returning a meaningful event message.
.LP
The call

    ptrace(PTRACE_SETOPTIONS, pid, 0, PTRACE_O_flags);

affects one tracee.
The tracee's current flags are replaced.
Flags are inherited by new tracees created and "auto-attached" via active
.BR PTRACE_O_TRACEFORK ,
.BR PTRACE_O_TRACEVFORK ,
or
.BR PTRACE_O_TRACECLONE
options.
.LP
Another group of commands makes the ptrace-stopped tracee run.
They have the form:
.LP
    ptrace(cmd, pid, 0, sig);
.LP
where
.I cmd
is
.BR PTRACE_CONT ,
.BR PTRACE_LISTEN ,
.BR PTRACE_DETACH ,
.BR PTRACE_SYSCALL ,
.BR PTRACE_SINGLESTEP ,
.BR PTRACE_SYSEMU ,
or
.BR PTRACE_SYSEMU_SINGLESTEP .
If the tracee is in signal-delivery-stop,
.I sig
is the signal to be injected (if it is nonzero).
Otherwise,
.I sig
may be ignored.
(When restarting a tracee from a ptrace-stop other than signal-delivery-stop,
recommended practice is to always pass 0 in
.IR sig .)
.SS Attaching and detaching
A thread can be attached to the tracer using the call

    ptrace(PTRACE_ATTACH, pid, 0, 0);

or

    ptrace(PTRACE_SEIZE, pid, 0, PTRACE_O_flags);

.B PTRACE_ATTACH
sends
.B SIGSTOP
to this thread.
If the tracer wants this
.B SIGSTOP
to have no effect, it needs to suppress it.
Note that if other signals are concurrently sent to
this thread during attach,
the tracer may see the tracee enter signal-delivery-stop
with other signal(s) first!
The usual practice is to reinject these signals until
.B SIGSTOP
is seen, then suppress
.B SIGSTOP
injection.
The design bug here is that a ptrace attach and a concurrently delivered
.B SIGSTOP
may race and the concurrent
.B SIGSTOP
may be lost.
.\"
.\" FIXME . Describe how to attach to a thread which is already group-stopped.
.LP
Since attaching sends
.B SIGSTOP
and the tracer usually suppresses it, this may cause a stray
.B EINTR
return from the currently executing system call in the tracee,
as described in the "Signal injection and suppression" section.
.LP
Since Linux 3.4,
.B PTRACE_SEIZE
can be used instead of
.BR PTRACE_ATTACH .
.B PTRACE_SEIZE
does not stop the attached process.
If you need to stop
it after attach (or at any other time) without sending it any signals,
use
.B PTRACE_INTERRUPT
command.
.LP
The request

    ptrace(PTRACE_TRACEME, 0, 0, 0);

turns the calling thread into a tracee.
The thread continues to run (doesn't enter ptrace-stop).
A common practice is to follow the
.B PTRACE_TRACEME
with

    raise(SIGSTOP);

and allow the parent (which is our tracer now) to observe our
signal-delivery-stop.
.LP
If the
.BR PTRACE_O_TRACEFORK ,
.BR PTRACE_O_TRACEVFORK ,
or
.BR PTRACE_O_TRACECLONE
options are in effect, then children created by, respectively,
.BR vfork (2)
or
.BR clone (2)
with the
.B CLONE_VFORK
flag,
.BR fork (2)
or
.BR clone (2)
with the exit signal set to
.BR SIGCHLD ,
and other kinds of
.BR clone (2),
are automatically attached to the same tracer which traced their parent.
.B SIGSTOP
is delivered to the children, causing them to enter
signal-delivery-stop after they exit the system call which created them.
.LP
Detaching of the tracee is performed by:

    ptrace(PTRACE_DETACH, pid, 0, sig);

.B PTRACE_DETACH
is a restarting operation;
therefore it requires the tracee to be in ptrace-stop.
If the tracee is in signal-delivery-stop, a signal can be injected.
Otherwise, the
.I sig
parameter may be silently ignored.
.LP
If the tracee is running when the tracer wants to detach it,
the usual solution is to send
.B SIGSTOP
(using
.BR tgkill (2),
to make sure it goes to the correct thread),
wait for the tracee to stop in signal-delivery-stop for
.B SIGSTOP
and then detach it (suppressing
.B SIGSTOP
injection).
A design bug is that this can race with concurrent
.BR SIGSTOP s.
Another complication is that the tracee may enter other ptrace-stops
and needs to be restarted and waited for again, until
.B SIGSTOP
is seen.
Yet another complication is to be sure that
the tracee is not already ptrace-stopped,
because no signal delivery happens while it is\(emnot even
.BR SIGSTOP .
.\" FIXME . Describe how to detach from a group-stopped tracee so that it
.\"        doesn't run, but continues to wait for SIGCONT.
.LP
If the tracer dies, all tracees are automatically detached and restarted,
unless they were in group-stop.
Handling of restart from group-stop is currently buggy,
but the "as planned" behavior is to leave tracee stopped and waiting for
.BR SIGCONT .
If the tracee is restarted from signal-delivery-stop,
the pending signal is injected.
.SS execve(2) under ptrace
.\" clone(2) CLONE_THREAD says:
.\"     If  any  of the threads in a thread group performs an execve(2),
.\"     then all threads other than the thread group leader are terminated,
.\"     and the new program is executed in the thread group leader.
.\"
When one thread in a multithreaded process calls
.BR execve (2),
the kernel destroys all other threads in the process,
.\" In kernel 3.1 sources, see fs/exec.c::de_thread()
and resets the thread ID of the execing thread to the
thread group ID (process ID).
(Or, to put things another way, when a multithreaded process does an
.BR execve (2),
at completion of the call, it appears as though the
.BR execve (2)
occurred in the thread group leader, regardless of which thread did the
.BR execve (2).)
This resetting of the thread ID looks very confusing to tracers:
.IP * 3
All other threads stop in
.B PTRACE_EVENT_EXIT
stop, if the
.BR PTRACE_O_TRACEEXIT
option was turned on.
Then all other threads except the thread group leader report
death as if they exited via
.BR _exit (2)
with exit code 0.
.IP *
The execing tracee changes its thread ID while it is in the
.BR execve (2).
(Remember, under ptrace, the "pid" returned from
.BR waitpid (2),
or fed into ptrace calls, is the tracee's thread ID.)
That is, the tracee's thread ID is reset to be the same as its process ID,
which is the same as the thread group leader's thread ID.
.IP *
Then a
.B PTRACE_EVENT_EXEC
stop happens, if the
.BR PTRACE_O_TRACEEXEC
option was turned on.
.IP *
If the thread group leader has reported its
.B PTRACE_EVENT_EXIT
stop by this time,
it appears to the tracer that
the dead thread leader "reappears from nowhere".
(Note: the thread group leader does not report death via
.I WIFEXITED(status)
until there is at least one other live thread.
This eliminates the possibility that the tracer will see
it dying and then reappearing.)
If the thread group leader was still alive,
for the tracer this may look as if thread group leader
returns from a different system call than it entered,
or even "returned from a system call even though
it was not in any system call".
If the thread group leader was not traced
(or was traced by a different tracer), then during
.BR execve (2)
it will appear as if it has become a tracee of
the tracer of the execing tracee.
.LP
All of the above effects are the artifacts of
the thread ID change in the tracee.
.LP
The
.B PTRACE_O_TRACEEXEC
option is the recommended tool for dealing with this situation.
First, it enables
.BR PTRACE_EVENT_EXEC
stop,
which occurs before
.BR execve (2)
returns.
In this stop, the tracer can use
.B PTRACE_GETEVENTMSG
to retrieve the tracee's former thread ID.
(This feature was introduced in Linux 3.0.)
Second, the
.B PTRACE_O_TRACEEXEC
option disables legacy
.B SIGTRAP
generation on
.BR execve (2).
.LP
When the tracer receives
.B PTRACE_EVENT_EXEC
stop notification,
it is guaranteed that except this tracee and the thread group leader,
no other threads from the process are alive.
.LP
On receiving the
.B PTRACE_EVENT_EXEC
stop notification,
the tracer should clean up all its internal
data structures describing the threads of this process,
and retain only one data structure\(emone which
describes the single still running tracee, with

    thread ID == thread group ID == process ID.
.LP
Example: two threads call
.BR execve (2)
at the same time:
.LP
.nf
*** we get syscall-enter-stop in thread 1: **
PID1 execve("/bin/foo", "foo" <unfinished ...>
*** we issue PTRACE_SYSCALL for thread 1 **
*** we get syscall-enter-stop in thread 2: **
PID2 execve("/bin/bar", "bar" <unfinished ...>
*** we issue PTRACE_SYSCALL for thread 2 **
*** we get PTRACE_EVENT_EXEC for PID0, we issue PTRACE_SYSCALL **
*** we get syscall-exit-stop for PID0: **
PID0 <... execve resumed> )             = 0
.fi
.LP
If the
.B PTRACE_O_TRACEEXEC
option is
.I not
in effect for the execing tracee,
and if the tracee was
.BR PTRACE_ATTACH ed
rather that
.BR PTRACE_SEIZE d,
the kernel delivers an extra
.B SIGTRAP
to the tracee after
.BR execve (2)
returns.
This is an ordinary signal (similar to one which can be
generated by
.IR "kill -TRAP" ),
not a special kind of ptrace-stop.
Employing
.B PTRACE_GETSIGINFO
for this signal returns
.I si_code
set to 0
.RI ( SI_USER ).
This signal may be blocked by signal mask,
and thus may be delivered (much) later.
.LP
Usually, the tracer (for example,
.BR strace (1))
would not want to show this extra post-execve
.B SIGTRAP
signal to the user, and would suppress its delivery to the tracee (if
.B SIGTRAP
is set to
.BR SIG_DFL ,
it is a killing signal).
However, determining
.I which
.B SIGTRAP
to suppress is not easy.
Setting the
.B PTRACE_O_TRACEEXEC
option or using
.B PTRACE_SEIZE
and thus suppressing this extra
.B SIGTRAP
is the recommended approach.
.SS Real parent
The ptrace API (ab)uses the standard UNIX parent/child signaling over
.BR waitpid (2).
This used to cause the real parent of the process to stop receiving
several kinds of
.BR waitpid (2)
notifications when the child process is traced by some other process.
.LP
Many of these bugs have been fixed, but as of Linux 2.6.38 several still
exist; see BUGS below.
.LP
As of Linux 2.6.38, the following is believed to work correctly:
.IP * 3
exit/death by signal is reported first to the tracer, then,
when the tracer consumes the
.BR waitpid (2)
result, to the real parent (to the real parent only when the
whole multithreaded process exits).
If the tracer and the real parent are the same process,
the report is sent only once.
.SH RETURN VALUE
On success, the
.B PTRACE_PEEK*
requests return the requested data (but see NOTES),
while other requests return zero.
.LP
On error, all requests return \-1, and
.I errno
is set appropriately.
Since the value returned by a successful
.B PTRACE_PEEK*
request may be \-1, the caller must clear
.I errno
before the call, and then check it afterward
to determine whether or not an error occurred.
.SH ERRORS
.TP
.B EBUSY
(i386 only) There was an error with allocating or freeing a debug register.
.TP
.B EFAULT
There was an attempt to read from or write to an invalid area in
the tracer's or the tracee's memory,
probably because the area wasn't mapped or accessible.
Unfortunately, under Linux, different variations of this fault
will return
.B EIO
or
.B EFAULT
more or less arbitrarily.
.TP
.B EINVAL
An attempt was made to set an invalid option.
.TP
.B EIO
.I request
is invalid, or an attempt was made to read from or
write to an invalid area in the tracer's or the tracee's memory,
or there was a word-alignment violation,
or an invalid signal was specified during a restart request.
.TP
.B EPERM
The specified process cannot be traced.
This could be because the
tracer has insufficient privileges (the required capability is
.BR CAP_SYS_PTRACE );
unprivileged processes cannot trace processes that they
cannot send signals to or those running
set-user-ID/set-group-ID programs, for obvious reasons.
Alternatively, the process may already be being traced,
or (on kernels before 2.6.26) be
.BR init (1)
(PID 1).
.TP
.B ESRCH
The specified process does not exist, or is not currently being traced
by the caller, or is not stopped
(for requests that require a stopped tracee).
.SH CONFORMING TO
SVr4, 4.3BSD.
.SH NOTES
Although arguments to
.BR ptrace ()
are interpreted according to the prototype given,
glibc currently declares
.BR ptrace ()
as a variadic function with only the
.I request
argument fixed.
It is recommended to always supply four arguments,
even if the requested operation does not use them,
setting unused/ignored arguments to
.I 0L
or
.IR "(void\ *)\ 0".
.LP
In Linux kernels before 2.6.26,
.\" See commit 00cd5c37afd5f431ac186dd131705048c0a11fdb
.BR init (1),
the process with PID 1, may not be traced.
.LP
A tracees parent continues to be the tracer even if that tracer calls
.BR execve (2).
.LP
The layout of the contents of memory and the USER area are
quite operating-system- and architecture-specific.
The offset supplied, and the data returned,
might not entirely match with the definition of
.IR "struct user" .
.\" See http://lkml.org/lkml/2008/5/8/375
.LP
The size of a "word" is determined by the operating-system variant
(e.g., for 32-bit Linux it is 32 bits).
.LP
This page documents the way the
.BR ptrace ()
call works currently in Linux.
Its behavior differs significantly on other flavors of UNIX.
In any case, use of
.BR ptrace ()
is highly specific to the operating system and architecture.
.SS C library/kernel ABI differences
At the system call level, the
.BR PTRACE_PEEKTEXT ,
.BR PTRACE_PEEKDATA ,
and
.BR PTRACE_PEEKUSER
requests have a different API: they store the result
at the address specified by the
.I data
parameter, and the return value is the error flag.
The glibc wrapper function provides the API given in DESCRIPTION above,
with the result being returned via the function return value.
.SH BUGS
On hosts with 2.6 kernel headers,
.B PTRACE_SETOPTIONS
is declared with a different value than the one for 2.4.
This leads to applications compiled with 2.6 kernel
headers failing when run on 2.4 kernels.
This can be worked around by redefining
.B PTRACE_SETOPTIONS
to
.BR PTRACE_OLDSETOPTIONS ,
if that is defined.
.LP
Group-stop notifications are sent to the tracer, but not to real parent.
Last confirmed on 2.6.38.6.
.LP
If a thread group leader is traced and exits by calling
.BR _exit (2),
.\" Note from Denys Vlasenko:
.\"     Here "exits" means any kind of death - _exit, exit_group,
.\"     signal death. Signal death and exit_group cases are trivial,
.\"     though: since signal death and exit_group kill all other threads
.\"     too, "until all other threads exit" thing happens rather soon
.\"     in these cases. Therefore, only _exit presents observably
.\"     puzzling behavior to ptrace users: thread leader _exit's,
.\"     but WIFEXITED isn't reported! We are trying to explain here
.\"     why it is so.
a
.B PTRACE_EVENT_EXIT
stop will happen for it (if requested), but the subsequent
.B WIFEXITED
notification will not be delivered until all other threads exit.
As explained above, if one of other threads calls
.BR execve (2),
the death of the thread group leader will
.I never
be reported.
If the execed thread is not traced by this tracer,
the tracer will never know that
.BR execve (2)
happened.
One possible workaround is to
.B PTRACE_DETACH
the thread group leader instead of restarting it in this case.
Last confirmed on 2.6.38.6.
.\"  FIXME . need to test/verify this scenario
.LP
A
.B SIGKILL
signal may still cause a
.B PTRACE_EVENT_EXIT
stop before actual signal death.
This may be changed in the future;
.B SIGKILL
is meant to always immediately kill tasks even under ptrace.
Last confirmed on 2.6.38.6.
.LP
Some system calls return with
.B EINTR
if a signal was sent to a tracee, but delivery was suppressed by the tracer.
(This is very typical operation: it is usually
done by debuggers on every attach, in order to not introduce
a bogus
.BR SIGSTOP ).
As of Linux 3.2.9, the following system calls are affected
(this list is likely incomplete):
.BR epoll_wait (2),
and
.BR read (2)
from an
.BR inotify (7)
file descriptor.
The usual symptom of this bug is that when you attach to
a quiescent process with the command

    strace \-p <process-ID>

then, instead of the usual
and expected one-line output such as
.nf

    restart_syscall(<... resuming interrupted call ...>_

.fi
or
.nf

    select(6, [5], NULL, [5], NULL_

.fi
('_' denotes the cursor position), you observe more than one line.
For example:
.nf

    clock_gettime(CLOCK_MONOTONIC, {15370, 690928118}) = 0
    epoll_wait(4,_

.fi
What is not visible here is that the process was blocked in
.BR epoll_wait (2)
before
.BR strace (1)
has attached to it.
Attaching caused
.BR epoll_wait (2)
to return to user space with the error
.BR EINTR .
In this particular case, the program reacted to
.B EINTR
by checking the current time, and then executing
.BR epoll_wait (2)
again.
(Programs which do not expect such "stray"
.BR EINTR
errors may behave in an unintended way upon an
.BR strace (1)
attach.)
.SH SEE ALSO
.BR gdb (1),
.BR strace (1),
.BR clone (2),
.BR execve (2),
.BR fork (2),
.BR gettid (2),
.BR seccomp (2),
.BR sigaction (2),
.BR tgkill (2),
.BR vfork (2),
.BR waitpid (2),
.BR exec (3),
.BR capabilities (7),
.BR signal (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 1996 Free Software Foundation, Inc.
.\"
.\" %%%LICENSE_START(GPL_NOVERSION_ONELINE)
.\" This file is distributed according to the GNU General Public License.
.\" %%%LICENSE_END
.\"
.\" 2006-02-09, some reformatting by Luc Van Oostenryck; some
.\" reformatting and rewordings by mtk
.\"
.TH QUERY_MODULE 2 2014-05-10 "Linux" "Linux Programmer's Manual"
.SH NAME
query_module \- query the kernel for various bits pertaining to modules
.SH SYNOPSIS
.nf
.B #include <linux/module.h>
.sp
.BI "int query_module(const char *" name ", int " which ", void *" buf ,
.BI "                 size_t " bufsize ", size_t *" ret );
.fi

.IR Note :
No declaration of this function is provided in glibc headers; see NOTES.
.SH DESCRIPTION
.IR Note :
This system call is present only in kernels before Linux 2.6.

.BR query_module ()
requests information from the kernel about loadable modules.
The returned information is placed in the buffer pointed to by
.IR buf .
The caller must specify the size of
.I buf
in
.IR bufsize .
The precise nature and format of the returned information
depend on the operation specified by
.IR which .
Some operations require
.I name
to identify a currently loaded module, some allow
.I name
to be NULL, indicating the kernel proper.

The following values can be specified for
.IR which :
.TP
.B 0
Returns success, if the kernel supports
.BR query_module ().
Used to probe for availability of the system call.
.TP
.B QM_MODULES
Returns the names of all loaded modules.
The returned buffer consists of a sequence of null-terminated strings;
.I ret
is set to the number of
modules.
.\" ret is set on ENOSPC
.TP
.B QM_DEPS
Returns the names of all modules used by the indicated module.
The returned buffer consists of a sequence of null-terminated strings;
.I ret
is set to the number of modules.
.\" ret is set on ENOSPC
.TP
.B QM_REFS
Returns the names of all modules using the indicated module.
This is the inverse of
.BR QM_DEPS .
The returned buffer consists of a sequence of null-terminated strings;
.I ret
is set to the number of modules.
.\" ret is set on ENOSPC
.TP
.B QM_SYMBOLS
Returns the symbols and values exported by the kernel or the indicated
module.
The returned buffer is an array of structures of the following form
.\" ret is set on ENOSPC
.in +4n
.nf

struct module_symbol {
    unsigned long value;
    unsigned long name;
};
.fi
.in
.IP
followed by null-terminated strings.
The value of
.I name
is the character offset of the string relative to the start of
.IR buf ;
.I ret
is set to the number of symbols.
.TP
.B QM_INFO
Returns miscellaneous information about the indicated module.
The output buffer format is:
.in +4n
.nf

struct module_info {
    unsigned long address;
    unsigned long size;
    unsigned long flags;
};
.fi
.in
.IP
where
.I address
is the kernel address at which the module resides,
.I size
is the size of the module in bytes, and
.I flags
is a mask of
.BR MOD_RUNNING ,
.BR MOD_AUTOCLEAN ,
and so on, that indicates the current status of the module
(see the Linux kernel source file
.IR include/linux/module.h ).
.I ret
is set to the size of the
.I module_info
structure.
.SH RETURN VALUE
On success, zero is returned.
On error, \-1 is returned and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EFAULT
At least one of
.IR name ,
.IR buf ,
or
.I ret
was outside the program's accessible address space.
.TP
.B EINVAL
Invalid
.IR which ;
or
.I name
is NULL (indicating "the kernel"),
but this is not permitted with the specified value of
.IR which .
.\" Not permitted with QM_DEPS, QM_REFS, or QM_INFO.
.TP
.B ENOENT
No module by that
.I name
exists.
.TP
.B ENOSPC
The buffer size provided was too small.
.I ret
is set to the minimum size needed.
.TP
.B ENOSYS
.BR query_module ()
is not supported in this version of the kernel
(e.g., the kernel is version 2.6 or later).
.SH VERSIONS
This system call is present on Linux only up until kernel 2.4;
it was removed in Linux 2.6.
.\" Removed in Linux 2.5.48
.SH CONFORMING TO
.BR query_module ()
is Linux-specific.
.SH NOTES
Some of the information that was formerly available via
.BR query_module ()
can be obtained from
.IR /proc/modules ,
.IR /proc/kallsyms ,
and the files under the directory
.IR /sys/module .

The
.BR query_module ()
system call is not supported by glibc.
No declaration is provided in glibc headers, but,
through a quirk of history, glibc does export an ABI for this system call.
Therefore, in order to employ this system call,
it is sufficient to manually declare the interface in your code;
alternatively, you can invoke the system call using
.BR syscall (2).
.SH SEE ALSO
.BR create_module (2),
.BR delete_module (2),
.BR get_kernel_syms (2),
.BR init_module (2),
.BR lsmod (8),
.BR modinfo (8)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2010, Jan Kara
.\" A few pieces copyright (c) 1996 Andries Brouwer (aeb@cwi.nl)
.\" and copyright 2010 (c) Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of
.\" this manual under the conditions for verbatim copying, provided that
.\" the entire resulting derived work is distributed under the terms of
.\" a permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume
.\" no responsibility for errors or omissions, or for damages resulting
.\" from the use of the information contained herein.  The author(s) may
.\" not have taken the same level of care in the production of this
.\" manual, which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH QUOTACTL 2 2010-06-16 "Linux" "Linux Programmer's Manual"
.SH NAME
quotactl \- manipulate disk quotas
.SH SYNOPSIS
.nf
.B #include <sys/quota.h>
.B #include <xfs/xqm.h>
.LP
.BI "int quotactl(int " cmd ", const char *" special ", int " id \
", caddr_t " addr );
.fi
.SH DESCRIPTION
.LP
The quota system can be used to set per-user and per-group limits on the
amount of disk space used on a filesystem.
For each user and/or group,
a soft limit and a hard limit can be set for each filesystem.
The hard limit can't be exceeded.
The soft limit can be exceeded, but warnings will ensue.
Moreover, the user can't exceed the soft limit for more than one week
(by default) at a time;
after this time, the soft limit counts as a hard limit.

The
.BR quotactl ()
call manipulates disk quotas.
The
.I cmd
argument indicates a command to be applied to the user or
group ID specified in
.IR id .
To initialize the
.IR cmd
argument, use the
.IR "QCMD(subcmd, type)"
macro.
The
.I type
value is either
.BR USRQUOTA ,
for user quotas,
or
.BR GRPQUOTA ,
for group quotas.
The
.I subcmd
value is described below.

The
.I special
argument is a pointer to a null-terminated string containing the pathname
of the (mounted) block special device for the filesystem being manipulated.

The
.I addr
argument is the address of an optional, command-specific, data structure
that is copied in or out of the system.
The interpretation of
.I addr
is given with each command below.

The
.I subcmd
value is one of the following:
.TP 8
.B Q_QUOTAON
Turn on quotas for a filesystem.
The
.I id
argument is the identification number of the quota format to be used.
Currently, there are three supported quota formats:
.RS
.TP 13
.BR QFMT_VFS_OLD
The original quota format.
.TP
.BR QFMT_VFS_V0
The standard VFS v0 quota format, which can handle 32-bit UIDs and GIDs
and quota limits up to 2^42 bytes and 2^32 inodes.
.TP
.BR QFMT_VFS_V1
A quota format that can handle 32-bit UIDs and GIDs
and quota limits of 2^64 bytes and 2^64 inodes.
.RE
.IP
The
.IR addr
argument points to the pathname of a file containing the quotas for
the filesystem.
The quota file must exist; it is normally created with the
.BR quotacheck (8)
program.
This operation requires privilege
.RB ( CAP_SYS_ADMIN ).
.TP 8
.B Q_QUOTAOFF
Turn off quotas for a filesystem.
The
.I addr
and
.I id
arguments are ignored.
This operation requires privilege
.RB ( CAP_SYS_ADMIN ).
.TP
.B Q_GETQUOTA
Get disk quota limits and current usage for user or group
.IR id .
The
.I addr
argument is a pointer to a
.I dqblk
structure defined in
.IR <sys/quota.h>
as follows:
.in +4n
.nf

/* uint64_t is an unsigned 64\-bit integer;
   uint32_t is an unsigned 32\-bit integer */

struct dqblk {          /* Definition since Linux 2.4.22 */
    uint64_t dqb_bhardlimit;   /* absolute limit on disk
                                  quota blocks alloc */
    uint64_t dqb_bsoftlimit;   /* preferred limit on
                                  disk quota blocks */
    uint64_t dqb_curspace;     /* current quota block
                                  count */
    uint64_t dqb_ihardlimit;   /* maximum number of
                                  allocated inodes */
    uint64_t dqb_isoftlimit;   /* preferred inode limit */
    uint64_t dqb_curinodes;    /* current number of
                                  allocated inodes */
    uint64_t dqb_btime;        /* time limit for excessive
                                  disk use */
    uint64_t dqb_itime;        /* time limit for excessive
                                  files */
    uint32_t dqb_valid;        /* bit mask of QIF_*
                                  constants */
};

/* Flags in dqb_valid that indicate which fields in
   dqblk structure are valid. */

#define QIF_BLIMITS   1
#define QIF_SPACE     2
#define QIF_ILIMITS   4
#define QIF_INODES    8
#define QIF_BTIME     16
#define QIF_ITIME     32
#define QIF_LIMITS    (QIF_BLIMITS | QIF_ILIMITS)
#define QIF_USAGE     (QIF_SPACE | QIF_INODES)
#define QIF_TIMES     (QIF_BTIME | QIF_ITIME)
#define QIF_ALL       (QIF_LIMITS | QIF_USAGE | QIF_TIMES)

.fi
.in
The
.I dqb_valid
field is a bit mask that is set to indicate the entries in the
.I dqblk
structure that are valid.
Currently, the kernel fills in all entries of the
.I dqblk
structure and marks them as valid in the
.I dqb_valid
field.
Unprivileged users may retrieve only their own quotas;
a privileged user
.RB ( CAP_SYS_ADMIN )
can retrieve the quotas of any user.
.TP
.B Q_SETQUOTA
Set quota information for user or group
.IR id ,
using the information supplied in the
.I dqblk
structure pointed to by
.IR addr .
The
.I dqb_valid
field of the
.I dqblk
structure indicates which entries in the structure have been set by the caller.
This operation supersedes the
.B Q_SETQLIM
and
.B Q_SETUSE
operations in the previous quota interfaces.
This operation requires privilege
.RB ( CAP_SYS_ADMIN ).
.TP
.B Q_GETINFO
Get information (like grace times) about quotafile.
The
.I addr
argument should be a pointer to a
.I dqinfo
structure.
This structure is defined in
.IR <sys/quota.h>
as follows:
.in +4n
.nf

/* uint64_t is an unsigned 64\-bit integer;
   uint32_t is an unsigned 32\-bit integer */

struct dqinfo {         /* Defined since kernel 2.4.22 */
    uint64_t dqi_bgrace;    /* Time before block soft limit
                               becomes hard limit */

    uint64_t dqi_igrace;    /* Time before inode soft limit
                               becomes hard limit */
    uint32_t dqi_flags;     /* Flags for quotafile
                               (DQF_*) */
    uint32_t dqi_valid;
};

/* Bits for dqi_flags */

/* Quota format QFMT_VFS_OLD */

#define V1_DQF_RSQUASH	1   /* Root squash enabled */

/* Other quota formats have no dqi_flags bits defined */

/* Flags in dqi_valid that indicate which fields in
   dqinfo structure are valid. */

# define IIF_BGRACE	1
# define IIF_IGRACE	2
# define IIF_FLAGS	4
# define IIF_ALL        (IIF_BGRACE | IIF_IGRACE | IIF_FLAGS)

.fi
.in
The
.I dqi_valid
field in the
.I dqinfo
structure indicates the entries in the structure that are valid.
Currently, the kernel fills in all entries of the
.I dqinfo
structure and marks them all as valid in the
.I dqi_valid
field.
The
.I id
argument is ignored.
.TP
.B Q_SETINFO
Set information about quotafile.
The
.I addr
argument should be a pointer to a
.I dqinfo
structure.
The
.I dqi_valid
field of the
.I dqinfo
structure indicates the entries in the structure
that have been set by the caller.
This operation supersedes the
.B Q_SETGRACE
and
.B Q_SETFLAGS
operations in the previous quota interfaces.
The
.I id
argument is ignored.
This operation requires privilege
.RB ( CAP_SYS_ADMIN ).
.TP
.B Q_GETFMT
Get quota format used on the specified filesystem.
The
.I addr
argument should be a pointer to a 4-byte buffer
where the format number will be stored.
.TP
.B Q_SYNC
Update the on-disk copy of quota usages for a filesystem.
If
.I special
is NULL, then all filesystems with active quotas are sync'ed.
The
.I addr
and
.I id
arguments are ignored.
.TP
.B Q_GETSTATS
Get statistics and other generic information about the quota subsystem.
The
.I addr
argument should be a pointer to a
.I dqstats
structure in which data should be stored.
This structure is defined in
.IR <sys/quota.h> .
The
.I special
and
.I id
arguments are ignored.
This operation is obsolete and not supported by recent kernels.
.\" Q_GETSTATS was removed in kernel 2.4.22.
Files in
.I /proc/sys/fs/quota/
carry the information instead.
.PP
For XFS filesystems making use of the XFS Quota Manager (XQM),
the above commands are bypassed and the following commands are used:
.TP 8
.B Q_XQUOTAON
Turn on quotas for an XFS filesystem.
XFS provides the ability to turn on/off quota limit enforcement
with quota accounting.
Therefore, XFS expects
.I addr
to be a pointer to an
.I "unsigned int"
that contains either the flags
.B XFS_QUOTA_UDQ_ACCT
and/or
.B XFS_QUOTA_UDQ_ENFD
(for user quota), or
.B XFS_QUOTA_GDQ_ACCT
and/or
.B XFS_QUOTA_GDQ_ENFD
(for group quota), as defined in
.IR <xfs/xqm.h> .
This operation requires privilege
.RB ( CAP_SYS_ADMIN ).
.TP
.B Q_XQUOTAOFF
Turn off quotas for an XFS filesystem.
As with
.BR Q_QUOTAON ,
XFS filesystems expect a pointer to an
.I "unsigned int"
that specifies whether quota accounting and/or limit enforcement need
to be turned off.
This operation requires privilege
.RB ( CAP_SYS_ADMIN ).
.TP
.B Q_XGETQUOTA
Get disk quota limits and current usage for user
.IR id .
The
.I addr
argument is a pointer to an
.I fs_disk_quota
structure (defined in
.IR <xfs/xqm.h> ).
Unprivileged users may retrieve only their own quotas;
a privileged user
.RB ( CAP_SYS_ADMIN )
may retrieve the quotas of any user.
.TP
.B Q_XSETQLIM
Set disk quota limits for user
.IR id .
The
.I addr
argument is a pointer to an
.I fs_disk_quota
structure (defined in
.IR <xfs/xqm.h> ).
This operation requires privilege
.RB ( CAP_SYS_ADMIN ).
.TP
.B Q_XGETQSTAT
Returns an
.I fs_quota_stat
structure containing XFS filesystem-specific quota information.
This is useful for finding out how much space is used to store quota
information, and also to get quotaon/off status of a given local XFS
filesystem.
.TP
.B Q_XQUOTARM
Free the disk space taken by disk quotas.
Quotas must have already been turned off.
.PP
There is no command equivalent to
.B Q_SYNC
for XFS since
.BR sync (1)
writes quota information to disk (in addition to the other filesystem
metadata that it writes out).
.SH RETURN VALUE
.LP
On success,
.BR quotactl ()
returns 0; on error \-1
is returned, and
.I errno
is set to indicate the error.
.SH ERRORS
.TP
.B EFAULT
.I addr
or
.I special
is invalid.
.TP
.B EINVAL
.I cmd
or
.I type
is invalid.
.TP
.B ENOENT
The file specified by
.I special
or
.I addr
does not exist.
.TP
.B ENOSYS
The kernel has not been compiled with the
.B CONFIG_QUOTA
option.
.TP
.B ENOTBLK
.I special
is not a block device.
.TP
.B EPERM
The caller lacked the required privilege
.RB ( CAP_SYS_ADMIN )
for the specified operation.
.TP
.B ESRCH
No disk quota is found for the indicated user.
Quotas have not been turned on for this filesystem.
.LP
If
.I cmd
is
.BR Q_SETQUOTA ,
.BR quotactl ()
may also set
.I errno
to:
.TP
.B ERANGE
Specified limits are out of range allowed by quota format.
.LP
If
.I cmd
is
.BR Q_QUOTAON ,
.BR quotactl ()
may also set
.I errno
to:
.TP
.B EACCES
The quota file pointed to by
.I addr
exists, but is not a regular file; or,
the quota file pointed to by
.I addr
exists, but is not on the filesystem pointed to by
.IR special .
.TP
.B EBUSY
.B Q_QUOTAON
attempted, but another
.B Q_QUOTAON
had already been performed.
.TP
.B EINVAL
The quota file is corrupted.
.TP
.B ESRCH
Specified quota format was not found.
.SH SEE ALSO
.BR quota (1),
.BR getrlimit (2),
.BR quotacheck (8),
.BR quotaon (8)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" This manpage is Copyright (C) 1992 Drew Eckhardt;
.\"             and Copyright (C) 1993 Michael Haardt, Ian Jackson.
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified Sat Jul 24 00:06:00 1993 by Rik Faith <faith@cs.unc.edu>
.\" Modified Wed Jan 17 16:02:32 1996 by Michael Haardt
.\"   <michael@cantor.informatik.rwth-aachen.de>
.\" Modified Thu Apr 11 19:26:35 1996 by Andries Brouwer <aeb@cwi.nl>
.\" Modified Sun Jul 21 18:59:33 1996 by Andries Brouwer <aeb@cwi.nl>
.\" Modified Fri Jan 31 16:47:33 1997 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified Sat Jul 12 20:45:39 1997 by Michael Haardt
.\"   <michael@cantor.informatik.rwth-aachen.de>
.\"
.TH READ 2 2014-05-04 "Linux" "Linux Programmer's Manual"
.SH NAME
read \- read from a file descriptor
.SH SYNOPSIS
.nf
.B #include <unistd.h>
.sp
.BI "ssize_t read(int " fd ", void *" buf ", size_t " count );
.fi
.SH DESCRIPTION
.BR read ()
attempts to read up to
.I count
bytes from file descriptor
.I fd
into the buffer starting at
.IR buf .

On files that support seeking,
the read operation commences at the current file offset,
and the file offset is incremented by the number of bytes read.
If the current file offset is at or past the end of file,
no bytes are read, and
.BR read ()
returns zero.

If
.I count
is zero,
.BR read ()
.I may
detect the errors described below.
In the absence of any errors,
or if
.BR read ()
does not check for errors, a
.BR read ()
with a
.I count
of 0 returns zero and has no other effects.

If
.I count
is greater than
.BR SSIZE_MAX ,
the result is unspecified.
.SH RETURN VALUE
On success, the number of bytes read is returned (zero indicates end of
file), and the file position is advanced by this number.
It is not an error if this number is smaller than the number of bytes
requested; this may happen for example because fewer bytes are actually
available right now (maybe because we were close to end-of-file, or
because we are reading from a pipe, or from a terminal), or because
.BR read ()
was interrupted by a signal.
On error, \-1 is returned, and
.I errno
is set appropriately.
In this case, it is left unspecified whether
the file position (if any) changes.
.SH ERRORS
.TP
.B EAGAIN
The file descriptor
.I fd
refers to a file other than a socket and has been marked nonblocking
.RB ( O_NONBLOCK ),
and the read would block.
.TP
.BR EAGAIN " or " EWOULDBLOCK
.\" Actually EAGAIN on Linux
The file descriptor
.I fd
refers to a socket and has been marked nonblocking
.RB ( O_NONBLOCK ),
and the read would block.
POSIX.1-2001 allows either error to be returned for this case,
and does not require these constants to have the same value,
so a portable application should check for both possibilities.
.TP
.B EBADF
.I fd
is not a valid file descriptor or is not open for reading.
.TP
.B EFAULT
.I buf
is outside your accessible address space.
.TP
.B EINTR
The call was interrupted by a signal before any data was read; see
.BR signal (7).
.TP
.B EINVAL
.I fd
is attached to an object which is unsuitable for reading;
or the file was opened with the
.B O_DIRECT
flag, and either the address specified in
.IR buf ,
the value specified in
.IR count ,
or the current file offset is not suitably aligned.
.TP
.B EINVAL
.I fd
was created via a call to
.BR timerfd_create (2)
and the wrong size buffer was given to
.BR read ();
see
.BR timerfd_create (2)
for further information.
.TP
.B EIO
I/O error.
This will happen for example when the process is in a
background process group, tries to read from its controlling terminal,
and either it is ignoring or blocking
.B SIGTTIN
or its process group
is orphaned.
It may also occur when there is a low-level I/O error
while reading from a disk or tape.
.TP
.B EISDIR
.I fd
refers to a directory.
.PP
Other errors may occur, depending on the object connected to
.IR fd .
POSIX allows a
.BR read ()
that is interrupted after reading some data
to return \-1 (with
.I errno
set to
.BR EINTR )
or to return the number of bytes already read.
.SH CONFORMING TO
SVr4, 4.3BSD, POSIX.1-2001.
.SH NOTES
On NFS filesystems, reading small amounts of data will update the
timestamp only the first time, subsequent calls may not do so.
This is caused
by client side attribute caching, because most if not all NFS clients
leave st_atime (last file access time)
updates to the server and client side reads satisfied from the
client's cache will not cause st_atime updates on the server as there are no
server side reads.
UNIX semantics can be obtained by disabling client
side attribute caching, but in most situations this will substantially
increase server load and decrease performance.
.SH BUGS
According to POSIX.1-2008/SUSv4 Section XSI 2.9.7
("Thread Interactions with Regular File Operations"):

.RS 4
All of the following functions shall be atomic with respect to
each other in the effects specified in POSIX.1-2008 when they
operate on regular files or symbolic links: ...
.RE

Among the APIs subsequently listed are
.BR read ()
and
.BR readv (2).
And among the effects that should be atomic across threads (and processes)
are updates of the file offset.
However, on Linux before version 3.14,
this was not the case: if two processes that share
an open file description (see
.BR open (2))
perform a
.BR read ()
(or
.BR readv (2))
at the same time, then the I/O operations were not atomic
with respect updating the file offset,
with the result that the reads in the two processes
might (incorrectly) overlap in the blocks of data that they obtained.
This problem was fixed in Linux 3.14.
.\" http://thread.gmane.org/gmane.linux.kernel/1649458
.\"    From: Michael Kerrisk (man-pages <mtk.manpages <at> gmail.com>
.\"    Subject: Update of file offset on write() etc. is non-atomic with I/O
.\"    Date: 2014-02-17 15:41:37 GMT
.\"    Newsgroups: gmane.linux.kernel, gmane.linux.file-systems
.\" commit 9c225f2655e36a470c4f58dbbc99244c5fc7f2d4
.\"    Author: Linus Torvalds <torvalds@linux-foundation.org>
.\"    Date:   Mon Mar 3 09:36:58 2014 -0800
.\"
.\"        vfs: atomic f_pos accesses as per POSIX
.SH SEE ALSO
.BR close (2),
.BR fcntl (2),
.BR ioctl (2),
.BR lseek (2),
.BR open (2),
.BR pread (2),
.BR readdir (2),
.BR readlink (2),
.BR readv (2),
.BR select (2),
.BR write (2),
.BR fread (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" This manpage is Copyright (C) 2004, Michael Kerrisk
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" 2004-05-40 Created by Michael Kerrisk <mtk.manpages@gmail.com>
.\" 2004-10-05 aeb, minor correction
.\"
.TH READAHEAD 2 2014-03-15 "Linux" "Linux Programmer's Manual"
.SH NAME
readahead \- initiate file readahead into page cache
.SH SYNOPSIS
.nf
.BR "#define _GNU_SOURCE" "             /* See feature_test_macros(7) */"
.B #include <fcntl.h>
.sp
.BI "ssize_t readahead(int " fd ", off64_t " offset ", size_t " count );
.fi
.SH DESCRIPTION
.BR readahead ()
initiates readahead on a file so that subsequent reads from that file will
be satisfied from the cache, and not block on disk I/O
(assuming the readahead was initiated early enough and that other activity
on the system did not in the meantime flush pages from the cache).

The
.I fd
argument is a file descriptor identifying the file which is
to be read.
The
.I offset
argument specifies the starting point from which data is to be read
and
.I count
specifies the number of bytes to be read.
I/O is performed in whole pages, so that
.I offset
is effectively rounded down to a page boundary
and bytes are read up to the next page boundary greater than or
equal to
.IR "(offset+count)" .
.BR readahead ()
does not read beyond the end of the file.
The current file offset of the open file referred to by
.I fd
is left unchanged.
.SH RETURN VALUE
On success,
.BR readahead ()
returns 0; on failure, \-1 is returned, with
.I errno
set to indicate the cause of the error.
.SH ERRORS
.TP
.B EBADF
.I fd
is not a valid file descriptor or is not open for reading.
.TP
.B EINVAL
.I fd
does not refer to a file type to which
.BR readahead ()
can be applied.
.SH VERSIONS
The
.BR readahead ()
system call appeared in Linux 2.4.13;
glibc support has been provided since version 2.3.
.SH CONFORMING TO
The
.BR readahead ()
system call is Linux-specific, and its use should be avoided
in portable applications.
.SH NOTES
On some 32-bit architectures,
the calling signature for this system call differs,
for the reasons described in
.BR syscall (2).
.SH BUGS
.BR readahead ()
attempts to schedule the reads in the background and return immediately.
However, it may block while it reads the filesystem metadata needed
to locate the requested blocks.
This occurs frequently with ext[234] on large files
using indirect blocks instead of extents,
giving the appearance that the call blocks until the requested data has
been read.
.SH SEE ALSO
.BR lseek (2),
.BR madvise (2),
.BR mmap (2),
.BR posix_fadvise (2),
.BR read (2)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 1995 Andries Brouwer (aeb@cwi.nl)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Written 11 June 1995 by Andries Brouwer <aeb@cwi.nl>
.\" Modified 22 July 1995 by Michael Chastain <mec@duracef.shout.net>:
.\"   In 1.3.X, returns only one entry each time; return value is different.
.\" Modified 2004-12-01, mtk, fixed headers listed in SYNOPSIS
.\"
.TH READDIR 2  2013-06-21 "Linux" "Linux Programmer's Manual"
.SH NAME
readdir \- read directory entry
.SH SYNOPSIS
.nf
.sp
.BI "int readdir(unsigned int " fd ", struct old_linux_dirent *" dirp ","
.BI "            unsigned int " count );
.fi

.IR Note :
There is no glibc wrapper for this system call; see NOTES.
.SH DESCRIPTION
This is not the function you are interested in.
Look at
.BR readdir (3)
for the POSIX conforming C library interface.
This page documents the bare kernel system call interface,
which is superseded by
.BR getdents (2).
.PP
.BR readdir ()
reads one
.I old_linux_dirent
structure from the directory
referred to by the file descriptor
.I fd
into the buffer pointed to by
.IR dirp .
The argument
.I count
is ignored; at most one
.I old_linux_dirent
structure is read.
.PP
The
.I old_linux_dirent
structure is declared as follows:
.PP
.in +4n
.nf
struct old_linux_dirent {
    long  d_ino;              /* inode number */
    off_t d_off;              /* offset to this \fIold_linux_dirent\fP */
    unsigned short d_reclen;  /* length of this \fId_name\fP */
    char  d_name[NAME_MAX+1]; /* filename (null-terminated) */
}
.fi
.in
.PP
.I d_ino
is an inode number.
.I d_off
is the distance from the start of the directory to this
.IR old_linux_dirent .
.I d_reclen
is the size of
.IR d_name ,
not counting the terminating null byte (\(aq\\0\(aq).
.I d_name
is a null-terminated filename.
.SH RETURN VALUE
On success, 1 is returned.
On end of directory, 0 is returned.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EBADF
Invalid file descriptor
.IR fd .
.TP
.B EFAULT
Argument points outside the calling process's address space.
.TP
.B EINVAL
Result buffer is too small.
.TP
.B ENOENT
No such directory.
.TP
.B ENOTDIR
File descriptor does not refer to a directory.
.SH CONFORMING TO
This system call is Linux-specific.
.SH NOTES
Glibc does not provide a wrapper for this system call; call it using
.BR syscall (2).
You will need to define the
.I old_linux_dirent
structure yourself.
However, probably you should use
.BR readdir (3)
instead.

This system call does not exist on x86-64.
.SH SEE ALSO
.BR getdents (2),
.BR readdir (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1983, 1991 The Regents of the University of California.
.\" And Copyright (C) 2011 Guillem Jover <guillem@hadrons.org>
.\" And Copyright (C) 2006, 2014 Michael Kerrisk
.\" All rights reserved.
.\"
.\" %%%LICENSE_START(BSD_4_CLAUSE_UCB)
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\" %%%LICENSE_END
.\"
.\"     @(#)readlink.2	6.8 (Berkeley) 3/10/91
.\"
.\" Modified Sat Jul 24 00:10:21 1993 by Rik Faith (faith@cs.unc.edu)
.\" Modified Tue Jul  9 23:55:17 1996 by aeb
.\" Modified Fri Jan 24 00:26:00 1997 by aeb
.\" 2011-09-20, Guillem Jover <guillem@hadrons.org>:
.\"     Added text on dynamically allocating buffer + example program
.\"
.TH READLINK 2 2014-10-15 "Linux" "Linux Programmer's Manual"
.SH NAME
readlink, readlinkat \- read value of a symbolic link
.SH SYNOPSIS
.nf
.B #include <unistd.h>
.sp
.BI "ssize_t readlink(const char *" pathname ", char *" buf \
", size_t " bufsiz );
.sp
.BR "#include <fcntl.h>           " "/* Definition of AT_* constants */"
.B #include <unistd.h>
.sp
.BI "ssize_t readlinkat(int " dirfd ", const char *" pathname ,
.BI "                   char *" buf ", size_t " bufsiz );
.sp
.fi
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR readlink ():
.RS 4
_BSD_SOURCE || _XOPEN_SOURCE\ >=\ 500 ||
_XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED || _POSIX_C_SOURCE\ >=\ 200112L
.RE
.sp
.BR readlinkat ():
.PD 0
.ad l
.RS 4
.TP 4
Since glibc 2.10:
_XOPEN_SOURCE\ >=\ 700 || _POSIX_C_SOURCE\ >=\ 200809L
.TP
Before glibc 2.10:
_ATFILE_SOURCE
.RE
.ad b
.PD
.SH DESCRIPTION
.BR readlink ()
places the contents of the symbolic link
.I pathname
in the buffer
.IR buf ,
which has size
.IR bufsiz .
.BR readlink ()
does not append a null byte to
.IR buf .
It will truncate the contents (to a length of
.I bufsiz
characters), in case the buffer is too small to hold all of the contents.
.SS readlinkat()
The
.BR readlinkat ()
system call operates in exactly the same way as
.BR readlink (),
except for the differences described here.

If the pathname given in
.I pathname
is relative, then it is interpreted relative to the directory
referred to by the file descriptor
.I dirfd
(rather than relative to the current working directory of
the calling process, as is done by
.BR readlink ()
for a relative pathname).

If
.I pathname
is relative and
.I dirfd
is the special value
.BR AT_FDCWD ,
then
.I pathname
is interpreted relative to the current working
directory of the calling process (like
.BR readlink ()).

If
.I pathname
is absolute, then
.I dirfd
is ignored.

Since Linux 2.6.39,
.\" commit 65cfc6722361570bfe255698d9cd4dccaf47570d
.I pathname
can be an empty string,
in which case the call operates on the symbolic link referred to by
.IR dirfd
(which should have been obtained using
.BR open (2)
with the
.B O_PATH
and
.B O_NOFOLLOW
flags).
.PP
See
.BR openat (2)
for an explanation of the need for
.BR readlinkat ().
.SH RETURN VALUE
On success, these calls return the number of bytes placed in
.IR buf .
On error, \-1 is returned and
.I errno
is set to indicate the error.
.SH ERRORS
.TP
.B EACCES
Search permission is denied for a component of the path prefix.
(See also
.BR path_resolution (7).)
.TP
.B EFAULT
.I buf
extends outside the process's allocated address space.
.TP
.B EINVAL
.I bufsiz
is not positive.
.\" At the glibc level, bufsiz is unsigned, so this error can only occur
.\" if bufsiz==0.  However, the in the kernel syscall, bufsiz is signed,
.\" and this error can also occur if bufsiz < 0.
.\" See: http://thread.gmane.org/gmane.linux.man/380
.\" Subject: [patch 0/3] [RFC] kernel/glibc mismatch of "readlink" syscall?
.TP
.B EINVAL
The named file is not a symbolic link.
.TP
.B EIO
An I/O error occurred while reading from the filesystem.
.TP
.B ELOOP
Too many symbolic links were encountered in translating the pathname.
.TP
.B ENAMETOOLONG
A pathname, or a component of a pathname, was too long.
.TP
.B ENOENT
The named file does not exist.
.TP
.B ENOMEM
Insufficient kernel memory was available.
.TP
.B ENOTDIR
A component of the path prefix is not a directory.
.PP
The following additional errors can occur for
.BR readlinkat ():
.TP
.B EBADF
.I dirfd
is not a valid file descriptor.
.TP
.B ENOTDIR
.I pathname
is relative and
.I dirfd
is a file descriptor referring to a file other than a directory.
.SH VERSIONS
.BR readlinkat ()
was added to Linux in kernel 2.6.16;
library support was added to glibc in version 2.4.
.SH CONFORMING TO
.BR readlink ():
4.4BSD
.RB ( readlink ()
first appeared in 4.2BSD),
POSIX.1-2001, POSIX.1-2008.

.BR readlinkat ():
POSIX.1-2008.
.SH NOTES
In versions of glibc up to and including glibc 2.4, the return type of
.BR readlink ()
was declared as
.IR int .
Nowadays, the return type is declared as
.IR ssize_t ,
as (newly) required in POSIX.1-2001.

Using a statically sized buffer might not provide enough room for the
symbolic link contents.
The required size for the buffer can be obtained from the
.I stat.st_size
value returned by a call to
.BR lstat (2)
on the link.
However, the number of bytes written by
.BR readlink ()
and
.BR readlinkat ()
should be checked to make sure that the size of the
symbolic link did not increase between the calls.
Dynamically allocating the buffer for
.BR readlink ()
and
.BR readlinkat ()
also addresses a common portability problem when using
.I PATH_MAX
for the buffer size,
as this constant is not guaranteed to be defined per POSIX
if the system does not have such limit.
.SS Glibc notes
On older kernels where
.BR readlinkat ()
is unavailable, the glibc wrapper function falls back to the use of
.BR readlink ().
When
.I pathname
is a relative pathname,
glibc constructs a pathname based on the symbolic link in
.IR /proc/self/fd
that corresponds to the
.IR dirfd
argument.
.SH EXAMPLE
The following program allocates the buffer needed by
.BR readlink ()
dynamically from the information provided by
.BR lstat (),
making sure there's no race condition between the calls.
.nf

#include <sys/types.h>
#include <sys/stat.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

int
main(int argc, char *argv[])
{
    struct stat sb;
    char *linkname;
    ssize_t r;

    if (argc != 2) {
        fprintf(stderr, "Usage: %s <pathname>\\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    if (lstat(argv[1], &sb) == \-1) {
        perror("lstat");
        exit(EXIT_FAILURE);
    }

    linkname = malloc(sb.st_size + 1);
    if (linkname == NULL) {
        fprintf(stderr, "insufficient memory\\n");
        exit(EXIT_FAILURE);
    }

    r = readlink(argv[1], linkname, sb.st_size + 1);

    if (r == \-1) {
        perror("readlink");
        exit(EXIT_FAILURE);
    }

    if (r > sb.st_size) {
        fprintf(stderr, "symlink increased in size "
                        "between lstat() and readlink()\\n");
        exit(EXIT_FAILURE);
    }

    linkname[r] = \(aq\\0\(aq;

    printf("\(aq%s\(aq points to \(aq%s\(aq\\n", argv[1], linkname);

    free(linkname);

    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR readlink (1),
.BR lstat (2),
.BR stat (2),
.BR symlink (2),
.BR realpath (3),
.BR path_resolution (7),
.BR symlink (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2007, 2010 Michael Kerrisk <mtk.manpages@gmail.com>
.\" and Copyright (c) 1993 by Thomas Koenig (ig25@rz.uni-karlsruhe.de)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified Sat Jul 24 18:34:44 1993 by Rik Faith (faith@cs.unc.edu)
.\" Merged readv.[23], 2002-10-17, aeb
.\" 2007-04-30 mtk, A fairly major rewrite to fix errors and
.\"     add more details.
.\" 2010-11-16, mtk, Added documentation of preadv() and pwritev()
.\"
.TH READV 2  2015-01-22 "Linux" "Linux Programmer's Manual"
.SH NAME
readv, writev, preadv, pwritev \- read or write data into multiple buffers
.SH SYNOPSIS
.nf
.B #include <sys/uio.h>
.sp
.BI "ssize_t readv(int " fd ", const struct iovec *" iov ", int " iovcnt );
.sp
.BI "ssize_t writev(int " fd ", const struct iovec *" iov ", int " iovcnt );
.sp
.BI "ssize_t preadv(int " fd ", const struct iovec *" iov ", int " iovcnt ,
.BI "               off_t " offset );
.sp
.BI "ssize_t pwritev(int " fd ", const struct iovec *" iov ", int " iovcnt ,
.BI "                off_t " offset );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR preadv (),
.BR pwritev ():
_BSD_SOURCE
.SH DESCRIPTION
The
.BR readv ()
system call reads
.I iovcnt
buffers from the file associated with the file descriptor
.I fd
into the buffers described by
.I iov
("scatter input").
.PP
The
.BR writev ()
system call writes
.I iovcnt
buffers of data described by
.I iov
to the file associated with the file descriptor
.I fd
("gather output").
.PP
The pointer
.I iov
points to an array of
.I iovec
structures,
defined in
.I <sys/uio.h>
as:
.PP
.br
.in +4n
.nf
struct iovec {
    void  *iov_base;    /* Starting address */
    size_t iov_len;     /* Number of bytes to transfer */
};
.fi
.in
.PP
The
.BR readv ()
system call works just like
.BR read (2)
except that multiple buffers are filled.
.PP
The
.BR writev ()
system call works just like
.BR write (2)
except that multiple buffers are written out.
.PP
Buffers are processed in array order.
This means that
.BR readv ()
completely fills
.IR iov [0]
before proceeding to
.IR iov [1],
and so on.
(If there is insufficient data, then not all buffers pointed to by
.I iov
may be filled.)
Similarly,
.BR writev ()
writes out the entire contents of
.IR iov [0]
before proceeding to
.IR iov [1],
and so on.
.PP
The data transfers performed by
.BR readv ()
and
.BR writev ()
are atomic: the data written by
.BR writev ()
is written as a single block that is not intermingled with output
from writes in other processes (but see
.BR pipe (7)
for an exception);
analogously,
.BR readv ()
is guaranteed to read a contiguous block of data from the file,
regardless of read operations performed in other threads or processes
that have file descriptors referring to the same open file description
(see
.BR open (2)).
.SS preadv() and pwritev()
The
.BR preadv ()
system call combines the functionality of
.BR readv ()
and
.BR pread (2).
It performs the same task as
.BR readv (),
but adds a fourth argument,
.IR offset ,
which specifies the file offset at which the input operation
is to be performed.

The
.BR pwritev ()
system call combines the functionality of
.BR writev ()
and
.BR pwrite (2).
It performs the same task as
.BR writev (),
but adds a fourth argument,
.IR offset ,
which specifies the file offset at which the output operation
is to be performed.

The file offset is not changed by these system calls.
The file referred to by
.I fd
must be capable of seeking.
.SH RETURN VALUE
On success,
.BR readv ()
and
.BR preadv ()
return the number of bytes read;
.BR writev ()
and
.BR pwritev ()
return the number of bytes written.
On error, \-1 is returned, and \fIerrno\fP is set appropriately.
.SH ERRORS
The errors are as given for
.BR read (2)
and
.BR write (2).
Furthermore,
.BR preadv ()
and
.BR pwritev ()
can also fail for the same reasons as
.BR lseek (2).
Additionally, the following error is defined:
.TP
.B EINVAL
The sum of the
.I iov_len
values overflows an
.I ssize_t
value.
.TP
.B EINVAL
The vector count \fIiovcnt\fP is less than zero or greater than the
permitted maximum.
.SH VERSIONS
.BR preadv ()
and
.BR pwritev ()
first appeared in Linux 2.6.30; library support was added in glibc 2.10.
.SH CONFORMING TO
.BR readv (),
.BR writev ():
4.4BSD (these system calls first appeared in 4.2BSD), POSIX.1-2001.
.\" Linux libc5 used \fIsize_t\fP as the type of the \fIiovcnt\fP argument,
.\" and \fIint\fP as the return type.
.\" The readv/writev system calls were buggy before Linux 1.3.40.
.\" (Says release.libc.)

.BR preadv (),
.BR pwritev ():
nonstandard, but present also on the modern BSDs.
.SH NOTES
POSIX.1-2001 allows an implementation to place a limit on
the number of items that can be passed in
.IR iov .
An implementation can advertise its limit by defining
.B IOV_MAX
in
.I <limits.h>
or at run time via the return value from
.IR sysconf(_SC_IOV_MAX) .
On modern Linux systems, the limit is 1024.
Back in Linux 2.0 days, this limit was 16.
\"
\"
.SS C library/kernel ABI differences
The raw
.BR preadv ()
and
.BR pwritev ()
system calls have call signatures that differ slightly from that of the
corresponding GNU C library wrapper functions shown in the SYNOPSIS.
The final argument,
.IR offset ,
is unpacked by the wrapper functions into two arguments in the system calls:

.BI "    unsigned long " pos_l ", unsigned long " pos

These arguments contain, respectively, the low order and high order 32 bits of
.IR offset .
.SS Historical C library/kernel ABI differences
To deal with the fact that
.B IOV_MAX
was so low on early versions of Linux,
the glibc wrapper functions for
.BR readv ()
and
.BR writev ()
did some extra work if they detected that the underlying kernel
system call failed because this limit was exceeded.
In the case of
.BR readv (),
the wrapper function allocated a temporary buffer large enough
for all of the items specified by
.IR iov ,
passed that buffer in a call to
.BR read (2),
copied data from the buffer to the locations specified by the
.I iov_base
fields of the elements of
.IR iov ,
and then freed the buffer.
The wrapper function for
.BR writev ()
performed the analogous task using a temporary buffer and a call to
.BR write (2).

The need for this extra effort in the glibc wrapper functions
went away with Linux 2.2 and later.
However, glibc continued to provide this behavior until version 2.10.
Starting with glibc version 2.9,
the wrapper functions provide this behavior only if the library detects
that the system is running a Linux kernel older than version 2.6.18
(an arbitrarily selected kernel version).
And since glibc 2.20
(which requires a minimum Linux kernel version of 2.6.32),
the glibc wrapper functions always just directly invoke the system calls.
.SH BUGS
It is not advisable to mix calls to
.BR readv ()
or
.BR writev (),
which operate on file descriptors, with the functions from the stdio
library; the results will be undefined and probably not what you want.
.SH EXAMPLE
The following code sample demonstrates the use of
.BR writev ():

.in +4n
.nf
char *str0 = "hello ";
char *str1 = "world\\n";
struct iovec iov[2];
ssize_t nwritten;

iov[0].iov_base = str0;
iov[0].iov_len = strlen(str0);
iov[1].iov_base = str1;
iov[1].iov_len = strlen(str1);

nwritten = writev(STDOUT_FILENO, iov, 2);
.fi
.in
.SH SEE ALSO
.BR pread (2),
.BR read (2),
.BR write (2)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1998 Andries Brouwer (aeb@cwi.nl), 24 September 1998
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified, 27 May 2004, Michael Kerrisk <mtk.manpages@gmail.com>
.\"     Added notes on capability requirements
.\"
.TH REBOOT 2 2015-02-01 "Linux" "Linux Programmer's Manual"
.SH NAME
reboot \- reboot or enable/disable Ctrl-Alt-Del
.SH SYNOPSIS
/* For libc4 and libc5 the library call and the system call
   are identical, and since kernel version 2.1.30 there are
   symbolic names LINUX_REBOOT_* for the constants and a
   fourth argument to the call: */
.sp
.B #include <unistd.h>
.br
.B #include <linux/reboot.h>
.sp
.BI "int reboot(int " magic ", int " magic2 ", int " cmd ", void *" arg );
.sp
/* Under glibc some of the constants involved have gotten
   symbolic names RB_*, and the library call is a 1-argument
   wrapper around the 3-argument system call: */
.sp
.B #include <unistd.h>
.br
.B #include <sys/reboot.h>
.sp
.BI "int reboot(int " cmd );
.SH DESCRIPTION
The
.BR reboot ()
call reboots the system, or enables/disables the reboot keystroke
(abbreviated CAD, since the default is Ctrl-Alt-Delete;
it can be changed using
.BR loadkeys (1)).
.PP
This system call will fail (with
.BR EINVAL )
unless
.I magic
equals
.B LINUX_REBOOT_MAGIC1
(that is, 0xfee1dead) and
.I magic2
equals
.B LINUX_REBOOT_MAGIC2
(that is, 672274793).
However, since 2.1.17 also
.B LINUX_REBOOT_MAGIC2A
(that is, 85072278)
and since 2.1.97 also
.B LINUX_REBOOT_MAGIC2B
(that is, 369367448)
and since 2.5.71 also
.B LINUX_REBOOT_MAGIC2C
(that is, 537993216)
are permitted as values for
.IR magic2 .
(The hexadecimal values of these constants are meaningful.)

The
.I cmd
argument can have the following values:
.TP
.B LINUX_REBOOT_CMD_CAD_OFF
.RB ( RB_DISABLE_CAD ,
0).
CAD is disabled.
This means that the CAD keystroke will cause a
.B SIGINT
signal to be
sent to init (process 1), whereupon this process may decide upon a
proper action (maybe: kill all processes, sync, reboot).
.TP
.B LINUX_REBOOT_CMD_CAD_ON
.RB ( RB_ENABLE_CAD ,
0x89abcdef).
CAD is enabled.
This means that the CAD keystroke will immediately cause
the action associated with
.BR LINUX_REBOOT_CMD_RESTART .
.TP
.B LINUX_REBOOT_CMD_HALT
.RB ( RB_HALT_SYSTEM ,
0xcdef0123; since Linux 1.1.76).
The message "System halted." is printed, and the system is halted.
Control is given to the ROM monitor, if there is one.
If not preceded by a
.BR sync (2),
data will be lost.
.TP
.BR LINUX_REBOOT_CMD_KEXEC
.RB ( RB_KEXEC ,
0x45584543, since Linux 2.6.13).
Execute a kernel that has been loaded earlier with
.BR kexec_load (2).
This option is available only if the kernel was configured with
.BR CONFIG_KEXEC .
.TP
.B LINUX_REBOOT_CMD_POWER_OFF
.RB ( RB_POWER_OFF ,
0x4321fedc; since Linux 2.1.30).
The message "Power down." is printed, the system is stopped,
and all power is removed from the system, if possible.
If not preceded by a
.BR sync (2),
data will be lost.
.TP
.B LINUX_REBOOT_CMD_RESTART
.RB ( RB_AUTOBOOT ,
0x1234567).
The message "Restarting system." is printed, and a default
restart is performed immediately.
If not preceded by a
.BR sync (2),
data will be lost.
.TP
.B LINUX_REBOOT_CMD_RESTART2
(0xa1b2c3d4; since Linux 2.1.30).
The message "Restarting system with command \(aq%s\(aq" is printed,
and a restart (using the command string given in
.IR arg )
is performed immediately.
If not preceded by a
.BR sync (2),
data will be lost.
.TP
.BR LINUX_REBOOT_CMD_SW_SUSPEND
.RB ( RB_SW_SUSPEND ,
0xd000fce1; since Linux 2.5.18).
The system is suspended (hibernated) to disk.
This option is available only if the kernel was configured with
.BR CONFIG_HIBERNATION .
.LP
Only the superuser may call
.BR reboot ().
.LP
The precise effect of the above actions depends on the architecture.
For the i386 architecture, the additional argument does not do
anything at present (2.1.122), but the type of reboot can be
determined by kernel command-line arguments ("reboot=...") to be
either warm or cold, and either hard or through the BIOS.
.SS Behavior inside PID namespaces
.\" commit cf3f89214ef6a33fad60856bc5ffd7bb2fc4709b
.\" see also commit 923c7538236564c46ee80c253a416705321f13e3
Since Linux 3.4, when
.BR reboot ()
is called from a PID namespace (see
.BR pid_namespaces (7))
other than the initial PID namespace,
the effect of the call is to send a signal to the namespace "init" process.
.BR LINUX_REBOOT_CMD_RESTART
and
.BR LINUX_REBOOT_CMD_RESTART2
cause a
.BR SIGHUP
signal to be sent.
.BR LINUX_REBOOT_CMD_POWER_OFF
and
.BR LINUX_REBOOT_CMD_HALT
cause a
.B SIGINT
signal to be sent.
.SH RETURN VALUE
For the values of
.I cmd
that stop or restart the system,
a successful call to
.BR reboot ()
does not return.
For the other
.I cmd
values, zero is returned on success.
In all cases, \-1 is returned on failure, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EFAULT
Problem with getting user-space data under
.BR LINUX_REBOOT_CMD_RESTART2 .
.TP
.B EINVAL
Bad magic numbers or \fIcmd\fP.
.TP
.B EPERM
The calling process has insufficient privilege to call
.BR reboot ();
the
.B CAP_SYS_BOOT
capability is required.
.SH CONFORMING TO
.BR reboot ()
is Linux-specific,
and should not be used in programs intended to be portable.
.SH SEE ALSO
.BR kexec_load (2),
.BR sync (2),
.BR bootparam (7),
.BR capabilities (7),
.BR ctrlaltdel (8),
.BR halt (8),
.BR reboot (8)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1983, 1990, 1991 The Regents of the University of California.
.\" All rights reserved.
.\"
.\" %%%LICENSE_START(BSD_4_CLAUSE_UCB)
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\" %%%LICENSE_END
.\"
.\"     $Id: recv.2,v 1.3 1999/05/13 11:33:38 freitag Exp $
.\"
.\" Modified Sat Jul 24 00:22:20 1993 by Rik Faith <faith@cs.unc.edu>
.\" Modified Tue Oct 22 17:45:19 1996 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified 1998,1999 by Andi Kleen
.\" 2001-06-19 corrected SO_EE_OFFENDER, bug report by James Hawtin
.\"
.TH RECV 2 2014-08-19 "Linux" "Linux Programmer's Manual"
.SH NAME
recv, recvfrom, recvmsg \- receive a message from a socket
.SH SYNOPSIS
.\" .B #include <sys/uio.h>
.\" .br
.nf
.B #include <sys/types.h>
.br
.B #include <sys/socket.h>
.sp
.BI "ssize_t recv(int " sockfd ", void *" buf ", size_t " len ", int " flags );
.sp
.BI "ssize_t recvfrom(int " sockfd ", void *" buf ", size_t " len ", int " flags ,
.BI "                 struct sockaddr *" src_addr ", socklen_t *" addrlen );
.sp
.BI "ssize_t recvmsg(int " sockfd ", struct msghdr *" msg ", int " flags );
.fi
.SH DESCRIPTION
The
.BR recv (),
.BR recvfrom (),
and
.BR recvmsg ()
calls are used to receive messages from a socket.
They may be used
to receive data on both connectionless and connection-oriented sockets.
This page first describes common features of all three system calls,
and then describes the differences between the calls.
.PP
All three calls return the length of the message on successful
completion.
If a message is too long to fit in the supplied buffer, excess
bytes may be discarded depending on the type of socket the message is
received from.
.PP
If no messages are available at the socket, the receive calls wait for a
message to arrive, unless the socket is nonblocking (see
.BR fcntl (2)),
in which case the value \-1 is returned and the external variable
.I errno
is set to
.BR EAGAIN " or " EWOULDBLOCK .
The receive calls normally return any data available, up to the requested
amount, rather than waiting for receipt of the full amount requested.
.PP
An application can use
.BR select (2),
.BR poll (2),
or
.BR epoll (7)
to determine when more data arrives on a socket.
.SS The flags argument
The
.I flags
argument is formed by ORing one or more of the following values:
.TP
.BR MSG_CMSG_CLOEXEC " (" recvmsg "() only; since Linux 2.6.23)"
Set the close-on-exec flag for the file descriptor received
via a UNIX domain file descriptor using the
.B SCM_RIGHTS
operation (described in
.BR unix (7)).
This flag is useful for the same reasons as the
.B O_CLOEXEC
flag of
.BR open (2).
.TP
.BR MSG_DONTWAIT " (since Linux 2.2)"
Enables nonblocking operation; if the operation would block,
the call fails with the error
.BR EAGAIN " or " EWOULDBLOCK
(this can also be enabled using the
.B O_NONBLOCK
flag with the
.B F_SETFL
.BR fcntl (2)).
.TP
.BR MSG_ERRQUEUE " (since Linux 2.2)"
This flag
specifies that queued errors should be received from the socket error queue.
The error is passed in
an ancillary message with a type dependent on the protocol (for IPv4
.BR IP_RECVERR ).
The user should supply a buffer of sufficient size.
See
.BR cmsg (3)
and
.BR ip (7)
for more information.
The payload of the original packet that caused the error
is passed as normal data via
.IR msg_iovec .
The original destination address of the datagram that caused the error
is supplied via
.IR msg_name .
.IP
For local errors, no address is passed (this can be checked with the
.I cmsg_len
member of the
.IR cmsghdr ).
For error receives, the
.B MSG_ERRQUEUE
is set in the
.IR msghdr .
After an error has been passed, the pending socket error
is regenerated based on the next queued error and will be passed
on the next socket operation.

The error is supplied in a
.I sock_extended_err
structure:
.in +4n
.nf

#define SO_EE_ORIGIN_NONE    0
#define SO_EE_ORIGIN_LOCAL   1
#define SO_EE_ORIGIN_ICMP    2
#define SO_EE_ORIGIN_ICMP6   3

struct sock_extended_err
{
    uint32_t ee_errno;   /* error number */
    uint8_t  ee_origin;  /* where the error originated */
    uint8_t  ee_type;    /* type */
    uint8_t  ee_code;    /* code */
    uint8_t  ee_pad;     /* padding */
    uint32_t ee_info;    /* additional information */
    uint32_t ee_data;    /* other data */
    /* More data may follow */
};

struct sockaddr *SO_EE_OFFENDER(struct sock_extended_err *);
.fi
.in
.IP
.I ee_errno
contains the
.I errno
number of the queued error.
.I ee_origin
is the origin code of where the error originated.
The other fields are protocol-specific.
The macro
.B SOCK_EE_OFFENDER
returns a pointer to the address of the network object
where the error originated from given a pointer to the ancillary message.
If this address is not known, the
.I sa_family
member of the
.I sockaddr
contains
.B AF_UNSPEC
and the other fields of the
.I sockaddr
are undefined.
The payload of the packet that caused the error is passed as normal data.
.IP
For local errors, no address is passed (this
can be checked with the
.I cmsg_len
member of the
.IR cmsghdr ).
For error receives,
the
.B MSG_ERRQUEUE
is set in the
.IR msghdr .
After an error has been passed, the pending socket error
is regenerated based on the next queued error and will be passed
on the next socket operation.
.TP
.B MSG_OOB
This flag requests receipt of out-of-band data that would not be received
in the normal data stream.
Some protocols place expedited data
at the head of the normal data queue, and thus this flag cannot
be used with such protocols.
.TP
.B MSG_PEEK
This flag causes the receive operation to
return data from the beginning of the
receive queue without removing that data from the queue.
Thus, a
subsequent receive call will return the same data.
.TP
.BR MSG_TRUNC " (since Linux 2.2)"
For raw
.RB ( AF_PACKET ),
Internet datagram (since Linux 2.4.27/2.6.8),
netlink (since Linux 2.6.22), and UNIX datagram (since Linux 3.4) sockets:
return the real length of the packet or datagram,
even when it was longer than the passed buffer.

For use with Internet stream sockets, see
.BR tcp (7).
.TP
.BR MSG_WAITALL " (since Linux 2.2)"
This flag requests that the operation block until the full request is
satisfied.
However, the call may still return less data than requested if
a signal is caught, an error or disconnect occurs, or the next data to be
received is of a different type than that returned.
.\"
.SS recvfrom()
.BR recvfrom ()
places the received message into the buffer
.IR buf .
The caller must specify the size of the buffer in
.IR len .

If
.I src_addr
is not NULL,
and the underlying protocol provides the source address of the message,
that source address is placed in the buffer pointed to by
.IR src_addr .
.\" (Note: for datagram sockets in both the UNIX and Internet domains,
.\" .I src_addr
.\" is filled in.
.\" .I src_addr
.\" is also filled in for stream sockets in the UNIX domain, but is not
.\" filled in for stream sockets in the Internet domain.)
.\" [The above notes on AF_UNIX and AF_INET sockets apply as at
.\" Kernel 2.4.18. (MTK, 22 Jul 02)]
In this case,
.I addrlen
is a value-result argument.
Before the call,
it should be initialized to the size of the buffer associated with
.IR src_addr .
Upon return,
.I addrlen
is updated to contain the actual size of the source address.
The returned address is truncated if the buffer provided is too small;
in this case,
.I addrlen
will return a value greater than was supplied to the call.

If the caller is not interested in the source address,
.I src_addr
and
.I addrlen
should be specified as NULL.
.\"
.SS recv()
The
.BR recv ()
call is normally used only on a
.I connected
socket (see
.BR connect (2)).
It is equivalent to the call:

    recvfrom(fd, buf, len, flags, NULL, 0));
.\"
.SS recvmsg()
The
.BR recvmsg ()
call uses a
.I msghdr
structure to minimize the number of directly supplied arguments.
This structure is defined as follows in
.IR <sys/socket.h> :
.in +4n
.nf

struct iovec {                    /* Scatter/gather array items */
    void  *iov_base;              /* Starting address */
    size_t iov_len;               /* Number of bytes to transfer */
};

struct msghdr {
    void         *msg_name;       /* optional address */
    socklen_t     msg_namelen;    /* size of address */
    struct iovec *msg_iov;        /* scatter/gather array */
    size_t        msg_iovlen;     /* # elements in msg_iov */
    void         *msg_control;    /* ancillary data, see below */
    size_t        msg_controllen; /* ancillary data buffer len */
    int           msg_flags;      /* flags on received message */
};
.fi
.in
.PP
The
.I msg_name
field points to a caller-allocated buffer that is used to
return the source address if the socket is unconnected.
The caller should set
.I msg_namelen
to the size of this buffer before this call;
upon return from a successful call,
.I msg_namelen
will contain the length of the returned address.
If the application does not need to know the source address,
.I msg_name
can be specified as NULL.

The fields
.I msg_iov
and
.I msg_iovlen
describe scatter-gather locations, as discussed in
.BR readv (2).

The field
.IR msg_control ,
which has length
.IR msg_controllen ,
points to a buffer for other protocol control-related messages or
miscellaneous ancillary data.
When
.BR recvmsg ()
is called,
.I msg_controllen
should contain the length of the available buffer in
.IR msg_control ;
upon return from a successful call it will contain the length
of the control message sequence.
.PP
The messages are of the form:
.in +4n
.nf

struct cmsghdr {
    socklen_t     cmsg_len;     /* data byte count, including hdr */
    int           cmsg_level;   /* originating protocol */
    int           cmsg_type;    /* protocol-specific type */
/* followed by
    unsigned char cmsg_data[]; */
};
.fi
.in
.PP
Ancillary data should be accessed only by the macros defined in
.BR cmsg (3).
.PP
As an example, Linux uses this ancillary data mechanism to pass extended
errors, IP options, or file descriptors over UNIX domain sockets.
.PP
The
.I msg_flags
field in the
.I msghdr
is set on return of
.BR recvmsg ().
It can contain several flags:
.TP
.B MSG_EOR
indicates end-of-record; the data returned completed a record (generally
used with sockets of type
.BR SOCK_SEQPACKET ).
.TP
.B MSG_TRUNC
indicates that the trailing portion of a datagram was discarded because the
datagram was larger than the buffer supplied.
.TP
.B MSG_CTRUNC
indicates that some control data were discarded due to lack of space in the
buffer for ancillary data.
.TP
.B MSG_OOB
is returned to indicate that expedited or out-of-band data were received.
.TP
.B MSG_ERRQUEUE
indicates that no data was received but an extended error from the socket
error queue.
.SH RETURN VALUE
These calls return the number of bytes received, or \-1
if an error occurred.
In the event of an error,
.I errno
is set to indicate the error.

When a stream socket peer has performed an orderly shutdown,
the return value will be 0 (the traditional "end-of-file" return).

Datagram sockets in various domains (e.g., the UNIX and Internet domains)
permit zero-length datagrams.
When such a datagram is received, the return value is 0.

The value 0 may also be returned if the requested number of bytes
to receive from a stream socket was 0.
.SH ERRORS
These are some standard errors generated by the socket layer.
Additional errors
may be generated and returned from the underlying protocol modules;
see their manual pages.
.TP
.BR EAGAIN " or " EWOULDBLOCK
.\" Actually EAGAIN on Linux
The socket is marked nonblocking and the receive operation
would block, or a receive timeout had been set and the timeout expired
before data was received.
POSIX.1-2001 allows either error to be returned for this case,
and does not require these constants to have the same value,
so a portable application should check for both possibilities.
.TP
.B EBADF
The argument
.I sockfd
is an invalid descriptor.
.TP
.B ECONNREFUSED
A remote host refused to allow the network connection (typically
because it is not running the requested service).
.TP
.B EFAULT
The receive buffer pointer(s) point outside the process's
address space.
.TP
.B EINTR
The receive was interrupted by delivery of a signal before
any data were available; see
.BR signal (7).
.TP
.B EINVAL
Invalid argument passed.
.\" e.g., msg_namelen < 0 for recvmsg() or addrlen < 0 for recvfrom()
.TP
.B ENOMEM
Could not allocate memory for
.BR recvmsg ().
.TP
.B ENOTCONN
The socket is associated with a connection-oriented protocol
and has not been connected (see
.BR connect (2)
and
.BR accept (2)).
.TP
.B ENOTSOCK
The argument
.I sockfd
does not refer to a socket.
.SH CONFORMING TO
4.4BSD (these function calls first appeared in 4.2BSD),
POSIX.1-2001.
.LP
POSIX.1-2001 describes only the
.BR MSG_OOB ,
.BR MSG_PEEK ,
and
.B MSG_WAITALL
flags.
.SH NOTES
The
.I socklen_t
type was invented by POSIX.
See also
.BR accept (2).

According to POSIX.1-2001, the
.I msg_controllen
field of the
.I msghdr
structure should be typed as
.IR socklen_t ,
but glibc currently types it as
.IR size_t .
.\" glibc bug raised 12 Mar 2006
.\" http://sourceware.org/bugzilla/show_bug.cgi?id=2448
.\" The problem is an underlying kernel issue: the size of the
.\" __kernel_size_t type used to type this field varies
.\" across architectures, but socklen_t is always 32 bits.

See
.BR recvmmsg (2)
for information about a Linux-specific system call
that can be used to receive multiple datagrams in a single call.
.SH EXAMPLE
An example of the use of
.BR recvfrom ()
is shown in
.BR getaddrinfo (3).
.SH SEE ALSO
.BR fcntl (2),
.BR getsockopt (2),
.BR read (2),
.BR recvmmsg (2),
.BR select (2),
.BR shutdown (2),
.BR socket (2),
.BR cmsg (3),
.BR sockatmark (3),
.BR socket (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2011 by Andi Kleen <andi@firstfloor.org>
.\" and Copyright (c) 2011 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Syscall added in following commit
.\"	commit a2e2725541fad72416326798c2d7fa4dafb7d337
.\"	Author: Arnaldo Carvalho de Melo <acme@redhat.com>
.\"	Date:   Mon Oct 12 23:40:10 2009 -0700
.\"
.TH RECVMMSG 2 2014-06-13 "Linux" "Linux Programmer's Manual"
.SH NAME
recvmmsg \- receive multiple messages on a socket
.SH SYNOPSIS
.nf
.BR "#define _GNU_SOURCE" "         /* See feature_test_macros(7) */"
.BI "#include <sys/socket.h>"

.BI "int recvmmsg(int " sockfd ", struct mmsghdr *" msgvec \
", unsigned int " vlen ","
.br
.BI "             unsigned int " flags ", struct timespec *" timeout ");"
.fi
.SH DESCRIPTION
The
.BR recvmmsg ()
system call is an extension of
.BR recvmsg (2)
that allows the caller to receive multiple messages from a socket
using a single system call.
(This has performance benefits for some applications.)
A further extension over
.BR recvmsg (2)
is support for a timeout on the receive operation.

The
.I sockfd
argument is the file descriptor of the socket to receive data from.

The
.I msgvec
argument is a pointer to an array of
.I mmsghdr
structures.
The size of this array is specified in
.IR vlen .

The
.I mmsghdr
structure is defined in
.I <sys/socket.h>
as:

.in +4n
.nf
struct mmsghdr {
    struct msghdr msg_hdr;  /* Message header */
    unsigned int  msg_len;  /* Number of received bytes for header */
};
.fi
.in
.PP
The
.I msg_hdr
field is a
.I msghdr
structure, as described in
.BR recvmsg (2).
The
.I msg_len
field is the number of bytes returned for the message in the entry.
This field has the same value as the return value of a single
.BR recvmsg (2)
on the header.

The
.I flags
argument contains flags ORed together.
The flags are the same as documented for
.BR recvmsg (2),
with the following addition:
.TP
.BR MSG_WAITFORONE " (since Linux 2.6.34)"
Turns on
.B MSG_DONTWAIT
after the first message has been received.
.PP
The
.I timeout
argument points to a
.I struct timespec
(see
.BR clock_gettime (2))
defining a timeout (seconds plus nanoseconds) for the receive operation
.RI ( "but see BUGS!" ).
(This interval will be rounded up to the system clock granularity,
and kernel scheduling delays mean that the blocking interval
may overrun by a small amount.)
If
.I timeout
is NULL, then the operation blocks indefinitely.

A blocking
.BR recvmmsg ()
call blocks until
.I vlen
messages have been received
or until the timeout expires.
A nonblocking call reads as many messages as are available
(up to the limit specified by
.IR vlen )
and returns immediately.

On return from
.BR recvmmsg (),
successive elements of
.IR msgvec
are updated to contain information about each received message:
.I msg_len
contains the size of the received message;
the subfields of
.I msg_hdr
are updated as described in
.BR recvmsg (2).
The return value of the call indicates the number of elements of
.I msgvec
that have been updated.
.SH RETURN VALUE
On success,
.BR recvmmsg ()
returns the number of messages received in
.IR msgvec ;
on error, \-1 is returned, and
.I errno
is set to indicate the error.
.SH ERRORS
Errors are as for
.BR recvmsg (2).
In addition, the following error can occur:
.TP
.B EINVAL
.I timeout
is invalid.
.SH VERSIONS
The
.BR recvmmsg ()
system call was added in Linux 2.6.33.
Support in glibc was added in version 2.12.
.SH CONFORMING TO
.BR recvmmsg ()
is Linux-specific.
.SH EXAMPLE
.PP
The following program uses
.BR recvmmsg ()
to receive multiple messages on a socket and stores
them in multiple buffers.
The call returns if all buffers are filled or if the
timeout specified has expired.

The following snippet periodically generates UDP datagrams
containing a random number:
.in +4n
.nf

.RB "$" " while true; do echo $RANDOM > /dev/udp/127.0.0.1/1234; "
.B      "      sleep 0.25; done"
.fi
.in

These datagrams are read by the example application, which
can give the following output:
.in +4n
.nf

.RB "$" " ./a.out"
5 messages received
1 11782
2 11345
3 304
4 13514
5 28421
.fi
.in
.SS Program source
\&
.nf
#define _GNU_SOURCE
#include <netinet/ip.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/socket.h>

int
main(void)
{
#define VLEN 10
#define BUFSIZE 200
#define TIMEOUT 1
    int sockfd, retval, i;
    struct sockaddr_in sa;
    struct mmsghdr msgs[VLEN];
    struct iovec iovecs[VLEN];
    char bufs[VLEN][BUFSIZE+1];
    struct timespec timeout;

    sockfd = socket(AF_INET, SOCK_DGRAM, 0);
    if (sockfd == \-1) {
        perror("socket()");
        exit(EXIT_FAILURE);
    }

    sa.sin_family = AF_INET;
    sa.sin_addr.s_addr = htonl(INADDR_LOOPBACK);
    sa.sin_port = htons(1234);
    if (bind(sockfd, (struct sockaddr *) &sa, sizeof(sa)) == \-1) {
        perror("bind()");
        exit(EXIT_FAILURE);
    }

    memset(msgs, 0, sizeof(msgs));
    for (i = 0; i < VLEN; i++) {
        iovecs[i].iov_base         = bufs[i];
        iovecs[i].iov_len          = BUFSIZE;
        msgs[i].msg_hdr.msg_iov    = &iovecs[i];
        msgs[i].msg_hdr.msg_iovlen = 1;
    }

    timeout.tv_sec = TIMEOUT;
    timeout.tv_nsec = 0;

    retval = recvmmsg(sockfd, msgs, VLEN, 0, &timeout);
    if (retval == \-1) {
        perror("recvmmsg()");
        exit(EXIT_FAILURE);
    }

    printf("%d messages received\\n", retval);
    for (i = 0; i < retval; i++) {
        bufs[i][msgs[i].msg_len] = 0;
        printf("%d %s", i+1, bufs[i]);
    }
    exit(EXIT_SUCCESS);
}
.fi
.SH BUGS
The
.I timeout
argument does not work as intended.
.\" FIXME . https://bugzilla.kernel.org/show_bug.cgi?id=75371
.\" http://thread.gmane.org/gmane.linux.man/5677
The timeout is checked only after the receipt of each datagram,
so that if up to
.I vlen\-1
datagrams are received before the timeout expires,
but then no further datagrams are received, the call will block forever.
.SH SEE ALSO
.BR clock_gettime (2),
.BR recvmsg (2),
.BR sendmmsg (2),
.BR sendmsg (2),
.BR socket (2),
.BR socket (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2003, Michael Kerrisk (mtk.manpages@gmail.com)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" 2003-12-10 Initial creation, Michael Kerrisk <mtk.manpages@gmail.com>
.\" 2004-10-28 aeb, corrected prototype, prot must be 0
.\"
.TH REMAP_FILE_PAGES 2 2014-05-28 "Linux" "Linux Programmer's Manual"
.SH NAME
remap_file_pages \- create a nonlinear file mapping
.SH SYNOPSIS
.nf
.BR "#define _GNU_SOURCE" "         /* See feature_test_macros(7) */"
.B #include <sys/mman.h>
.sp
.BI "int remap_file_pages(void *" addr ", size_t " size ", int " prot ,
.BI "                     size_t " pgoff ", int " flags );
.fi
.SH DESCRIPTION
.BR Note :
.\" commit 33041a0d76d3c3e0aff28ac95a2ffdedf1282dbc
.\" http://lwn.net/Articles/597632/
this system call is (since Linux 3.16) deprecated and will
eventually be replaced by a slower in-kernel emulation.
Those few applications that use this system call should
consider migrating to alternatives.

The
.BR remap_file_pages ()
system call is used to create a nonlinear mapping, that is, a mapping
in which the pages of the file are mapped into a nonsequential order
in memory.
The advantage of using
.BR remap_file_pages ()
over using repeated calls to
.BR mmap (2)
is that the former approach does not require the kernel to create
additional VMA (Virtual Memory Area) data structures.

To create a nonlinear mapping we perform the following steps:
.TP 3
1.
Use
.BR mmap (2)
to create a mapping (which is initially linear).
This mapping must be created with the
.B MAP_SHARED
flag.
.TP
2.
Use one or more calls to
.BR remap_file_pages ()
to rearrange the correspondence between the pages of the mapping
and the pages of the file.
It is possible to map the same page of a file
into multiple locations within the mapped region.
.LP
The
.I pgoff
and
.I size
arguments specify the region of the file that is to be relocated
within the mapping:
.I pgoff
is a file offset in units of the system page size;
.I size
is the length of the region in bytes.

The
.I addr
argument serves two purposes.
First, it identifies the mapping whose pages we want to rearrange.
Thus,
.I addr
must be an address that falls within
a region previously mapped by a call to
.BR mmap (2).
Second,
.I addr
specifies the address at which the file pages
identified by
.I pgoff
and
.I size
will be placed.

The values specified in
.I addr
and
.I size
should be multiples of the system page size.
If they are not, then the kernel rounds
.I both
values
.I down
to the nearest multiple of the page size.
.\" This rounding is weird, and not consistent with the treatment of
.\" the analogous arguments for munmap()/mprotect() and for mlock().
.\" MTK, 14 Sep 2005

The
.I prot
argument must be specified as 0.

The
.I flags
argument has the same meaning as for
.BR mmap (2),
but all flags other than
.B MAP_NONBLOCK
are ignored.
.SH RETURN VALUE
On success,
.BR remap_file_pages ()
returns 0.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EINVAL
.I addr
does not refer to a valid mapping
created with the
.B MAP_SHARED
flag.
.TP
.B EINVAL
.IR addr ,
.IR size ,
.IR prot ,
or
.I pgoff
is invalid.
.\" And possibly others from vma->vm_ops->populate()
.SH VERSIONS
The
.BR remap_file_pages ()
system call appeared in Linux 2.5.46;
glibc support was added in version 2.3.3.
.SH CONFORMING TO
The
.BR remap_file_pages ()
system call is Linux-specific.
.SH NOTES
Since Linux 2.6.23,
.\" commit 3ee6dafc677a68e461a7ddafc94a580ebab80735
.BR remap_file_pages ()
creates non-linear mappings only
on in-memory file systems such as tmpfs, hugetlbfs or ramfs.
On filesystems with a backing store,
.BR remap_file_pages ()
is not much more efficient than using
.BR mmap (2)
to adjust which parts of the file are mapped to which addresses.
.SH SEE ALSO
.BR getpagesize (2),
.BR mmap (2),
.BR mmap2 (2),
.BR mprotect (2),
.BR mremap (2),
.BR msync (2)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) Andreas Gruenbacher, February 2001
.\" Copyright (C) Silicon Graphics Inc, September 2001
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.TH REMOVEXATTR 2 2015-05-07 "Linux" "Linux Programmer's Manual"
.SH NAME
removexattr, lremovexattr, fremovexattr \- remove an extended attribute
.SH SYNOPSIS
.fam C
.nf
.B #include <sys/types.h>
.B #include <sys/xattr.h>
.sp
.BI "int removexattr(const char\ *" path ", const char\ *" name );
.BI "int lremovexattr(const char\ *" path ", const char\ *" name );
.BI "int fremovexattr(int " fd ", const char\ *" name );
.fi
.fam T
.SH DESCRIPTION
Extended attributes are
.IR name : value
pairs associated with inodes (files, directories, symbolic links, etc.).
They are extensions to the normal attributes which are associated
with all inodes in the system (i.e., the
.BR stat (2)
data).
A complete overview of extended attributes concepts can be found in
.BR xattr (7).
.PP
.BR removexattr ()
removes the extended attribute identified by
.I name
and associated with the given
.I path
in the filesystem.
.PP
.BR lremovexattr ()
is identical to
.BR removexattr (),
except in the case of a symbolic link, where the extended attribute is
removed from the link itself, not the file that it refers to.
.PP
.BR fremovexattr ()
is identical to
.BR removexattr (),
only the extended attribute is removed from the open file referred to by
.I fd
(as returned by
.BR open (2))
in place of
.IR path .
.PP
An extended attribute name is a null-terminated string.
The
.I name
includes a namespace prefix; there may be several, disjoint
namespaces associated with an individual inode.
.SH RETURN VALUE
On success, zero is returned.
On failure, \-1 is returned and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B ENOATTR
The named attribute does not exist.
.RB ( ENOATTR
is defined to be a synonym for
.BR ENODATA
in
.IR <attr/xattr.h> .)
.TP
.B ENOTSUP
Extended attributes are not supported by the filesystem, or are disabled.
.PP
In addition, the errors documented in
.BR stat (2)
can also occur.
.SH VERSIONS
These system calls have been available on Linux since kernel 2.4;
glibc support is provided since version 2.3.
.SH CONFORMING TO
These system calls are Linux-specific.
.\" .SH AUTHORS
.\" Andreas Gruenbacher,
.\" .RI < a.gruenbacher@computer.org >
.\" and the SGI XFS development team,
.\" .RI < linux-xfs@oss.sgi.com >.
.\" Please send any bug reports or comments to these addresses.
.SH SEE ALSO
.BR getfattr (1),
.BR setfattr (1),
.BR getxattr (2),
.BR listxattr (2),
.BR open (2),
.BR setxattr (2),
.BR stat (2),
.BR symlink (7),
.BR xattr (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" This manpage is Copyright (C) 1992 Drew Eckhardt;
.\"             and Copyright (C) 1993 Michael Haardt;
.\"             and Copyright (C) 1993,1995 Ian Jackson
.\"		and Copyright (C) 2006, 2014 Michael Kerrisk
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified Sat Jul 24 00:35:52 1993 by Rik Faith <faith@cs.unc.edu>
.\" Modified Thu Jun  4 12:21:13 1998 by Andries Brouwer <aeb@cwi.nl>
.\" Modified Thu Mar  3 09:49:35 2005 by Michael Haardt <michael@moria.de>
.\" 2007-03-25, mtk, added various text to DESCRIPTION.
.\"
.TH RENAME 2 2014-08-19 "Linux" "Linux Programmer's Manual"
.SH NAME
rename, renameat, renameat2 \- change the name or location of a file
.SH SYNOPSIS
.nf
.B #include <stdio.h>
.sp
.BI "int rename(const char *" oldpath ", const char *" newpath );
.sp
.BR "#include <fcntl.h>           " "/* Definition of AT_* constants */"
.B #include <stdio.h>
.sp
.BI "int renameat(int " olddirfd ", const char *" oldpath ,
.BI "             int " newdirfd ", const char *" newpath );

.BI "int renameat2(int " olddirfd ", const char *" oldpath ,
.BI "              int " newdirfd ", const char *" newpath \
", unsigned int " flags );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR renameat ():
.PD 0
.ad l
.RS 4
.TP 4
Since glibc 2.10:
_XOPEN_SOURCE\ >=\ 700 || _POSIX_C_SOURCE\ >=\ 200809L
.TP
Before glibc 2.10:
_ATFILE_SOURCE
.\" FIXME . need to define FTMs for renameat2(), once it hits glibc
.RE
.ad
.PD
.SH DESCRIPTION
.BR rename ()
renames a file, moving it between directories if required.
Any other hard links to the file (as created using
.BR link (2))
are unaffected.
Open file descriptors for
.I oldpath
are also unaffected.

If
.I newpath
already exists, it will be atomically replaced (subject to
a few conditions; see ERRORS below), so that there is
no point at which another process attempting to access
.I newpath
will find it missing.

If
.I oldpath
and
.I newpath
are existing hard links referring to the same file, then
.BR rename ()
does nothing, and returns a success status.

If
.I newpath
exists but the operation fails for some reason,
.BR rename ()
guarantees to leave an instance of
.I newpath
in place.

.I oldpath
can specify a directory.
In this case,
.I newpath
must either not exist, or it must specify an empty directory.

However, when overwriting there will probably be a window in which
both
.I oldpath
and
.I newpath
refer to the file being renamed.

If
.I oldpath
refers to a symbolic link, the link is renamed; if
.I newpath
refers to a symbolic link, the link will be overwritten.
.SS renameat()
The
.BR renameat ()
system call operates in exactly the same way as
.BR rename (),
except for the differences described here.

If the pathname given in
.I oldpath
is relative, then it is interpreted relative to the directory
referred to by the file descriptor
.I olddirfd
(rather than relative to the current working directory of
the calling process, as is done by
.BR rename ()
for a relative pathname).

If
.I oldpath
is relative and
.I olddirfd
is the special value
.BR AT_FDCWD ,
then
.I oldpath
is interpreted relative to the current working
directory of the calling process (like
.BR rename ()).

If
.I oldpath
is absolute, then
.I olddirfd
is ignored.

The interpretation of
.I newpath
is as for
.IR oldpath ,
except that a relative pathname is interpreted relative
to the directory referred to by the file descriptor
.IR newdirfd .

See
.BR openat (2)
for an explanation of the need for
.BR renameat ().
.SS renameat2()
.BR renameat2 ()
has an additional
.I flags
argument.
A
.BR renameat2 ()
call with a zero
.I flags
argument is equivalent to
.BR renameat ().

The
.I flags
argument is a bit mask consisting of zero or more of the following flags:
.TP
.B RENAME_NOREPLACE
Don't overwrite
.IR newpath
of the rename.
Return an error if
.IR newpath
already exists.
.TP
.B RENAME_EXCHANGE
Atomically exchange
.IR oldpath
and
.IR newpath .
Both pathnames must exist
but may be of different types (e.g., one could be a non-empty directory
and the other a symbolic link).
.SH RETURN VALUE
On success, zero is returned.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EACCES
Write permission is denied for the directory containing
.I oldpath
or
.IR newpath ,
or, search permission is denied for one of the directories
in the path prefix of
.I oldpath
or
.IR newpath ,
or
.I oldpath
is a directory and does not allow write permission (needed to update
the
.I ..
entry).
(See also
.BR path_resolution (7).)
.TP
.B EBUSY
The rename fails because
.IR oldpath " or " newpath
is a directory that is in use by some process (perhaps as
current working directory, or as root directory, or because
it was open for reading) or is in use by the system
(for example as mount point), while the system considers
this an error.
(Note that there is no requirement to return
.B EBUSY
in such
cases\(emthere is nothing wrong with doing the rename anyway\(embut
it is allowed to return
.B EBUSY
if the system cannot otherwise
handle such situations.)
.TP
.B EDQUOT
The user's quota of disk blocks on the filesystem has been exhausted.
.TP
.B EFAULT
.IR oldpath " or " newpath " points outside your accessible address space."
.TP
.B EINVAL
The new pathname contained a path prefix of the old, or, more generally,
an attempt was made to make a directory a subdirectory of itself.
.TP
.B EISDIR
.I newpath
is an existing directory, but
.I oldpath
is not a directory.
.TP
.B ELOOP
Too many symbolic links were encountered in resolving
.IR oldpath " or " newpath .
.TP
.B EMLINK
.I oldpath
already has the maximum number of links to it, or
it was a directory and the directory containing
.I newpath
has the maximum number of links.
.TP
.B ENAMETOOLONG
.IR oldpath " or " newpath " was too long."
.TP
.B ENOENT
The link named by
.I oldpath
does not exist;
or, a directory component in
.I newpath
does not exist;
or,
.I oldpath
or
.I newpath
is an empty string.
.TP
.B ENOMEM
Insufficient kernel memory was available.
.TP
.B ENOSPC
The device containing the file has no room for the new directory
entry.
.TP
.B ENOTDIR
A component used as a directory in
.IR oldpath " or " newpath
is not, in fact, a directory.
Or,
.I oldpath
is a directory, and
.I newpath
exists but is not a directory.
.TP
.BR ENOTEMPTY " or " EEXIST
.I newpath
is a nonempty directory, that is, contains entries other than "." and "..".
.TP
.BR EPERM " or " EACCES
The directory containing
.I oldpath
has the sticky bit
.RB ( S_ISVTX )
set and the process's effective user ID is neither
the user ID of the file to be deleted nor that of the directory
containing it, and the process is not privileged
(Linux: does not have the
.B CAP_FOWNER
capability);
or
.I newpath
is an existing file and the directory containing it has the sticky bit set
and the process's effective user ID is neither the user ID of the file
to be replaced nor that of the directory containing it,
and the process is not privileged
(Linux: does not have the
.B CAP_FOWNER
capability);
or the filesystem containing
.I pathname
does not support renaming of the type requested.
.TP
.B EROFS
The file is on a read-only filesystem.
.TP
.B EXDEV
.IR oldpath " and " newpath
are not on the same mounted filesystem.
(Linux permits a filesystem to be mounted at multiple points, but
.BR rename ()
does not work across different mount points,
even if the same filesystem is mounted on both.)
.PP
The following additional errors can occur for
.BR renameat ()
and
.BR renameat2 ():
.TP
.B EBADF
.I olddirfd
or
.I newdirfd
is not a valid file descriptor.
.TP
.B ENOTDIR
.I oldpath
is relative and
.I olddirfd
is a file descriptor referring to a file other than a directory;
or similar for
.I newpath
and
.I newdirfd
.PP
The following additional errors can occur for
.BR renameat2 ():
.TP
.B EEXIST
.I flags
contains
.B RENAME_NOREPLACE
and
.I newpath
already exists.
.TP
.B EINVAL
An invalid flag was specified in
.IR flags ,
or both
.B RENAME_NOREPLACE
and
.B RENAME_EXCHANGE
were specified.
.TP
.B EINVAL
The filesystem does not support one of the flags in
.IR flags .
.TP
.B ENOENT
.I flags
contains
.B RENAME_EXCHANGE
and
.IR newpath
does not exist.
.SH VERSIONS
.BR renameat ()
was added to Linux in kernel 2.6.16;
library support was added to glibc in version 2.4.

.BR renameat2 ()
was added to Linux in kernel 3.15.
.\" FIXME . glibc support is pending.
.SH CONFORMING TO
.BR rename ():
4.3BSD, C89, C99, POSIX.1-2001, POSIX.1-2008.

.BR renameat ():
POSIX.1-2008.

.BR renameat2 ()
is Linux-specific.
.SH NOTES
.SS Glibc notes
On older kernels where
.BR renameat ()
is unavailable, the glibc wrapper function falls back to the use of
.BR rename ().
When
.I oldpath
and
.I newpath
are relative pathnames,
glibc constructs pathnames based on the symbolic links in
.IR /proc/self/fd
that correspond to the
.I olddirfd
and
.IR newdirfd
arguments.
.SH BUGS
On NFS filesystems, you can not assume that if the operation
failed, the file was not renamed.
If the server does the rename operation
and then crashes, the retransmitted RPC which will be processed when the
server is up again causes a failure.
The application is expected to
deal with this.
See
.BR link (2)
for a similar problem.
.SH SEE ALSO
.BR mv (1),
.BR chmod (2),
.BR link (2),
.BR symlink (2),
.BR unlink (2),
.BR path_resolution (7),
.BR symlink (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2006 Red Hat, Inc. All Rights Reserved.
.\" Written by David Howells (dhowells@redhat.com)
.\"
.\" %%%LICENSE_START(GPLv2+_SW_ONEPARA)
.\" This program is free software; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License
.\" as published by the Free Software Foundation; either version
.\" 2 of the License, or (at your option) any later version.
.\" %%%LICENSE_END
.\"
.TH REQUEST_KEY 2 2015-05-07 Linux "Linux Key Management Calls"
.SH NAME
request_key \- request a key from the kernel's key management facility
.SH SYNOPSIS
.nf
.B #include <keyutils.h>
.sp
.BI "key_serial_t request_key(const char *" type ", const char *" description ,
.BI "                         const char *" callout_info ,
.BI "                         key_serial_t " keyring ");"
.fi
.SH DESCRIPTION
.BR request_key ()
asks the kernel to find a key of the given
.I type
that matches the specified
.I description
and, if successful, to attach it to the nominated
.I keyring
and to return its serial number.
.P
.BR request_key ()
first recursively searches all the keyrings attached to the calling process in
the order thread-specific keyring, process-specific keyring and then session
keyring for a matching key.
.P
If
.BR request_key ()
is called from a program invoked by
.BR request_key ()
on behalf of some other process to generate a key, then the keyrings of that
other process will be searched next, using that other process's UID, GID,
groups, and security context to control access.
.P
The keys in each keyring searched are checked for a match before any child
keyrings are recursed into.
Only keys that are
.B searchable
for the caller may be found, and only
.B searchable
keyrings may be searched.
.P
If the key is not found, then, if
.I callout_info
is set, this function will attempt to look further afield.
In such a case, the
.I callout_info
is passed to a user-space service such as
.B /sbin/request\-key
to generate the key.
.P
If that is unsuccessful also, then an error will be returned, and a temporary
negative key will be installed in the nominated
.IR keyring .
This will expire after a few seconds, but will cause subsequent
calls to
.BR request_key ()
to fail until it does.
.P
The
.I keyring
serial number may be that of a valid keyring to which the caller has write
permission, or it may be a special keyring ID:
.TP
.B KEY_SPEC_THREAD_KEYRING
This specifies the caller's thread-specific keyring.
.TP
.B KEY_SPEC_PROCESS_KEYRING
This specifies the caller's process-specific keyring.
.TP
.B KEY_SPEC_SESSION_KEYRING
This specifies the caller's session-specific keyring.
.TP
.B KEY_SPEC_USER_KEYRING
This specifies the caller's UID-specific keyring.
.TP
.B KEY_SPEC_USER_SESSION_KEYRING
This specifies the caller's UID-session keyring.
.P
If a key is created, no matter whether it's a valid key or a negative key, it
will displace any other key of the same type and description from the
destination
.IR keyring .
.SH RETURN VALUE
On success
.BR request_key ()
returns the serial number of the key it found.
On error, the value \-1
will be returned and errno will have been set to an appropriate error.
.SH ERRORS
.TP
.B EACCES
The keyring wasn't available for modification by the user.
.TP
.B EINTR
The request was interrupted by a signal.
.TP
.B EDQUOT
The key quota for this user would be exceeded by creating this key or linking
it to the keyring.
.TP
.B EKEYEXPIRED
An expired key was found, but no replacement could be obtained.
.TP
.B EKEYREJECTED
The attempt to generate a new key was rejected.
.TP
.B EKEYREVOKED
A revoked key was found, but no replacement could be obtained.
.TP
.B ENOMEM
Insufficient memory to create a key.
.TP
.B ENOKEY
No matching key was found.
.SH LINKING
Although this is a Linux system call, it is not present in
.I libc
but can be found rather in
.IR libkeyutils .
When linking,
.B -lkeyutils
should be specified to the linker.
.SH SEE ALSO
.BR keyctl (1),
.BR add_key (2),
.BR keyctl (2),
.BR keyctl (3),
.BR keyrings (7),
.BR request-key (8)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2013 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" http://thread.gmane.org/gmane.linux.kernel/76552/focus=76803
.\" From: Linus Torvalds <torvalds <at> transmeta.com>
.\" Subject: Re: [PATCH] compatibility syscall layer (lets try again)
.\" Newsgroups: gmane.linux.kernel
.\" Date: 2002-12-05 02:51:12 GMT
.\"
.\" See also Section 11.3.3 of Understanding the Linux Kernel, 3rd edition
.\"
.TH RESTART_SYSCALL 2 2014-12-31 "Linux" "Linux Programmer's Manual"
.SH NAME
restart_syscall \- restart a system call after interruption by a stop signal
.SH SYNOPSIS
.B int restart_syscall(void);

.IR Note :
There is no glibc wrapper for this system call; see NOTES.
.SH DESCRIPTION
The
.BR restart_syscall ()
system call is used to restart certain system calls
after a process that was stopped by a signal (e.g.,
.BR SIGSTOP
or
.BR SIGTSTP )
is later resumed after receiving a
.BR SIGCONT
signal.
This system call is designed only for internal use by the kernel.

.BR restart_syscall ()
is used for restarting only those system calls that,
when restarted, should adjust their time-related parameters\(emnamely
.BR poll (2)
(since Linux 2.6.24),
.BR nanosleep (2)
(since Linux 2.6),
.BR clock_nanosleep (2)
(since Linux 2.6),
and
.BR futex (2),
when employed with the
.BR FUTEX_WAIT
(since Linux 2.6.22)
and
.BR FUTEX_WAIT_BITSET
(since Linux 2.6.31)
operations.
.\" These system calls correspond to the special internal errno value
.\" ERESTART_RESTARTBLOCK. Each of the system calls has a "restart"
.\" helper function that is invoked by restart_syscall().
.\" Notable (as at Linux 3.17) is that poll() has such a "restart"
.\" function, but ppoll(), select(), and pselect() do not.
.\" This means that the latter system calls do not take account of the
.\" time spent in the stopped state when restarting.
.BR restart_syscall ()
restarts the interrupted system call with a
time argument that is suitably adjusted to account for the
time that has already elapsed (including the time where the process
was stopped by a signal).
Without the
.BR restart_syscall ()
mechanism, restarting these system calls would not correctly deduct the
already elapsed time when the process continued execution.
.SH RETURN VALUE
The return value of
.BR restart_syscall ()
is the return value of whatever system call is being restarted.
.SH ERRORS
.I errno
is set as per the errors for whatever system call is being restarted by
.BR restart_syscall ().
.SH VERSIONS
The
.BR restart_syscall ()
system call is present since Linux 2.6.
.SH CONFORMING TO
This system call is Linux-specific.
.SH NOTES
There is no glibc wrapper for this system call,
because it is intended for use only by the kernel and
should never be called by applications.

The kernel uses
.BR restart_syscall ()
to ensure that when a system call is restarted
after a process has been stopped by a signal and then resumed by
.BR SIGCONT ,
then the time that the process spent in the stopped state is counted
against the timeout interval specified in the original system call.
In the case of system calls that take a timeout argument and
automatically restart after a stop signal plus
.BR SIGCONT ,
but which do not have the
.BR restart_syscall (2)
mechanism built in, then, after the process resumes execution,
the time that the process spent in the stop state is
.I not
counted against the timeout value.
Notable examples of system calls that suffer this problem are
.BR ppoll (2),
.BR select (2),
and
.BR pselect (2).

From user space, the operation of
.BR restart_syscall ()
is largely invisible:
to the process that made the system call that is restarted,
it appears as though that system call executed and
returned in the usual fashion.
.SH SEE ALSO
.BR sigaction (2),
.BR sigreturn (2),
.BR signal (7)
.\" FIXME . ppoll(2), select(2), and pselect(2)
.\"     should probably get the restart_syscall() treatment:
.\"     If a select() call is suspended by stop-sig+SIGCONT, the time
.\"     spent suspended is *not* deducted when the select() is restarted.
.\" FIXME . check whether recvmmsg() handles stop-sig+SIGCONT properly.
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" This manpage is Copyright (C) 1992 Drew Eckhardt;
.\"             and Copyright (C) 1993 Michael Haardt, Ian Jackson.
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified 1993-07-24 by Rik Faith <faith@cs.unc.edu>
.\" Modified 1997-01-31 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified 2004-06-23 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.TH RMDIR 2 2008-05-08 "Linux" "Linux Programmer's Manual"
.SH NAME
rmdir \- delete a directory
.SH SYNOPSIS
.B #include <unistd.h>
.sp
.BI "int rmdir(const char *" pathname );
.SH DESCRIPTION
.BR rmdir ()
deletes a directory, which must be empty.
.SH RETURN VALUE
On success, zero is returned.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EACCES
Write access to the directory containing
.I pathname
was not allowed, or one of the directories in the path prefix of
.I pathname
did not allow search permission.
(See also
.BR path_resolution (7).
.TP
.B EBUSY
.I pathname
is currently in use by the system or some process that prevents its
removal.
On Linux this means
.I pathname
is currently used as a mount point
or is the root directory of the calling process.
.TP
.B EFAULT
.IR pathname " points outside your accessible address space."
.TP
.B EINVAL
.I pathname
has
.I .
as last component.
.TP
.B ELOOP
Too many symbolic links were encountered in resolving
.IR pathname .
.TP
.B ENAMETOOLONG
.IR pathname " was too long."
.TP
.B ENOENT
A directory component in
.I pathname
does not exist or is a dangling symbolic link.
.TP
.B ENOMEM
Insufficient kernel memory was available.
.TP
.B ENOTDIR
.IR pathname ,
or a component used as a directory in
.IR pathname ,
is not, in fact, a directory.
.TP
.B ENOTEMPTY
.I pathname
contains entries other than
.IR . " and " .. " ;"
or,
.I pathname
has
.I ..
as its final component.
POSIX.1-2001 also allows
.B EEXIST
for this condition.
.TP
.B EPERM
The directory containing
.I pathname
has the sticky bit
.RB ( S_ISVTX )
set and the process's effective user ID is neither the user ID
of the file to be deleted nor that of the directory containing it,
and the process is not privileged (Linux: does not have the
.B CAP_FOWNER
capability).
.TP
.B EPERM
The filesystem containing
.I pathname
does not support the removal of directories.
.TP
.B EROFS
.I pathname
refers to a directory on a read-only filesystem.
.SH CONFORMING TO
SVr4, 4.3BSD, POSIX.1-2001.
.SH BUGS
Infelicities in the protocol underlying NFS can cause the unexpected
disappearance of directories which are still being used.
.SH SEE ALSO
.BR rm (1),
.BR rmdir (1),
.BR chdir (2),
.BR chmod (2),
.BR mkdir (2),
.BR rename (2),
.BR unlink (2),
.BR unlinkat (2)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2002, 2011 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH RT_SIGQUEUEINFO 2 2012-07-13 "Linux" "Linux Programmer's Manual"
.SH NAME
rt_sigqueueinfo, rt_tgsigqueueinfo \- queue a signal and data
.SH SYNOPSIS
.nf
.BI "int rt_sigqueueinfo(pid_t " tgid ", int " sig ", siginfo_t *" uinfo );
.sp
.BI "int rt_tgsigqueueinfo(pid_t " tgid ", pid_t " tid ", int " sig ,
.BI "                      siginfo_t *" uinfo );
.fi

.IR Note :
There are no glibc wrappers for these system calls; see NOTES.
.SH DESCRIPTION
The
.BR rt_sigqueueinfo ()
and
.BR rt_tgsigqueueinfo ()
system calls are the low-level interfaces used to send a signal plus data
to a process or thread.
The receiver of the signal can obtain the accompanying data
by establishing a signal handler with the
.BR sigaction (2)
.B SA_SIGINFO
flag.

These system calls are not intended for direct application use;
they are provided to allow the implementation of
.BR sigqueue (3)
and
.BR pthread_sigqueue (3).

The
.BR rt_sigqueueinfo ()
system call sends the signal
.I sig
to the thread group with the ID
.IR tgid .
(The term "thread group" is synonymous with "process", and
.I tid
corresponds to the traditional UNIX process ID.)
The signal will be delivered to an arbitrary member of the thread group
(i.e., one of the threads that is not currently blocking the signal).

The
.I uinfo
argument specifies the data to accompany the signal.
This argument is a pointer to a structure of type
.IR siginfo_t ,
described in
.BR sigaction (2)
(and defined by including
.IR <sigaction.h> ).
The caller should set the following fields in this structure:
.TP
.I si_code
This must be one of the
.B SI_*
codes in the Linux kernel source file
.IR include/asm-generic/siginfo.h ,
with the restriction that the code must be negative
(i.e., cannot be
.BR SI_USER ,
which is used by the kernel to indicate a signal sent by
.BR kill (2))
and cannot (since Linux 2.6.39) be
.BR SI_TKILL
(which is used by the kernel to indicate a signal sent using
.\" tkill(2) or
.BR tgkill (2)).
.TP
.I si_pid
This should be set to a process ID,
typically the process ID of the sender.
.TP
.I si_uid
This should be set to a user ID,
typically the real user ID of the sender.
.TP
.I si_value
This field contains the user data to accompany the signal.
For more information, see the description of the last
.RI ( "union sigval" )
argument of
.BR sigqueue (3).
.PP
Internally, the kernel sets the
.I si_signo
field to the value specified in
.IR sig ,
so that the receiver of the signal can also obtain
the signal number via that field.

The
.BR rt_tgsigqueueinfo ()
system call is like
.BR rt_sigqueueinfo (),
but sends the signal and data to the single thread
specified by the combination of
.IR tgid ,
a thread group ID,
and
.IR tid ,
a thread in that thread group.
.SH RETURN VALUE
On success, these system calls return 0.
On error, they return \-1 and
.I errno
is set to indicate the error.
.SH ERRORS
.TP
.B EAGAIN
The limit of signals which may be queued has been reached.
(See
.BR signal (7)
for further information.)
.TP
.B EINVAL
.IR sig ,
.IR tgid ,
or
.IR tid
was invalid.
.TP
.B EPERM
The caller does not have permission to send the signal to the target.
For the required permissions, see
.BR kill (2).
Or:
.I uinfo->si_code
is invalid.
.TP
.B ESRCH
.BR rt_sigqueueinfo ():
No thread group matching
.I tgid
was found.
.br
.BR rt_tgsigqueinfo ():
No thread matching
.I tgid
and
.I tid
was found.
.SH VERSIONS
The
.BR rt_sigqueueinfo ()
system call was added to Linux in version 2.2.
The
.BR rt_tgsigqueueinfo ()
system call was added to Linux in version 2.6.31.
.SH CONFORMING TO
These system calls are Linux-specific.
.SH NOTES
Since these system calls are not intended for application use,
there are no glibc wrapper functions; use
.BR syscall (2)
in the unlikely case that you want to call them directly.

As with
.BR kill (2),
the null signal (0) can be used to check if the specified process
or thread exists.
.SH SEE ALSO
.BR kill (2),
.BR sigaction (2),
.BR sigprocmask (2),
.BR tgkill (2),
.BR pthread_sigqueue (3),
.BR sigqueue (3),
.BR signal (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) IBM Corp. 2015
.\" Author: Alexey Ishchuk <aishchuk@linux.vnet.ibm.com>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.TH S390_PCI_MMIO_WRITE 2 2015-01-15 "Linux Programmer's Manual"
.SH NAME
s390_pci_mmio_write, s390_pci_mmio_read \- transfer data to/from PCI
MMIO memory page
.SH SYNOPSIS
.nf
.B #include <asm/unistd.h>

.BI "int s390_pci_mmio_write(unsigned long " mmio_addr ",
.BI "                        void *" user_buffer ", size_t " length ");
.br
.BI "int s390_pci_mmio_read(unsigned long " mmio_addr ",
.BI "                        void *" user_buffer ", size_t " length ");
.fi
.SH DESCRIPTION
The
.BR s390_pci_mmio_write ()
system call writes
.IR length
bytes of data from the user-space buffer
.IR user_buffer
to the PCI MMIO memory location specified by
.IR mmio_addr .
The
.BR s390_pci_mmio_read ()
system call reads
.I length
bytes of
data from the PCI MMIO memory location specified by
.IR mmio_addr
to the user-space buffer
.IR user_buffer .

These system calls must be used instead of the simple assignment
or data-transfer operations that are used to access the PCI MMIO
memory areas mapped to user space on the Linux System z platform.
The address specified by
.IR mmio_addr
must belong to a PCI MMIO memory page mapping in the caller's address space,
and the data being written or read must not cross a page boundary.
The
.IR length
value cannot be greater than the system page size.
.SH RETURN VALUE
On success,
.BR s390_pci_mmio_write ()
and
.BR s390_pci_mmio_read ()
return 0.
On error, \-1 is returned and
.IR errno
is set to one of the error codes listed below.
.SH ERRORS
.TP
.B EFAULT
The address in
.I mmio_addr
is invalid.
.TP
.B EFAULT
.IR user_buffer
does not point to a valid location in the caller's address space.
.TP
.B EINVAL
Invalid
.I length
argument.
.TP
.B ENODEV
PCI support is not enabled.
.TP
.B ENOMEM
Insufficient memory.
.SH VERSIONS
These system calls are available since Linux 3.19.
.SH CONFORMING TO
This Linux-specific system call is available only on the s390 architecture.
The required PCI support is available beginning with System z EC12.
.SH NOTES
Glibc does not provide a wrapper for this system call, use
.BR syscall (2)
to call it.
.SH SEE ALSO
.BR syscall (2)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) IBM Corp. 2012
.\" Author: Jan Glauber <jang@linux.vnet.ibm.com>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.TH S390_RUNTIME_INSTR 2 2012-12-17 "Linux Programmer's Manual"
.SH NAME
s390_runtime_instr \- enable/disable s390 CPU run-time instrumentation
.SH SYNOPSIS
.nf
.B #include <asm/runtime_instr.h>

.BI "int s390_runtime_instr(int " command ", int " signum ");
.fi
.SH DESCRIPTION
The
.BR s390_runtime_instr ()
system call starts or stops CPU run-time instrumentation for the
calling thread.

The
.IR command
argument controls whether run-time instrumentation is started
.RB ( S390_RUNTIME_INSTR_START ,
1) or stopped
.RB ( S390_RUNTIME_INSTR_STOP ,
2) for the calling thread.

The
.IR signum
argument specifies the number of a real-time signal.
The real-time signal is sent to the thread if the run-time instrumentation
buffer is full or if the run-time-instrumentation-halted interrupt
occurred.
.SH RETURN VALUE
On success,
.BR s390_runtime_instr ()
returns 0 and enables the thread for
run-time instrumentation by assigning the thread a default run-time
instrumentation control block.
The caller can then read and modify the control block and start the run-time
instrumentation.
On error, \-1 is returned and
.IR errno
is set to one of the error codes listed below.
.SH ERRORS
.TP
.B EINVAL
The value specified in
.IR command
is not a valid command or the value specified in
.IR signum
is not a real-time signal number.
.TP
.B ENOMEM
Allocating memory for the run-time instrumentation control block failed.
.TP
.B EOPNOTSUPP
The run-time instrumentation facility is not available.
.SH VERSIONS
This system call is available since Linux 3.7.
.SH CONFORMING TO
This Linux-specific system call is available only on the s390 architecture.
The run-time instrumentation facility is available beginning with System z EC12.
.SH NOTES
Glibc does not provide a wrapper for this system call, use
.BR syscall (2)
to call it.
.SH SEE ALSO
.BR syscall (2),
.BR signal (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) Tom Bjorkholm & Markus Kuhn, 1996
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.\" 1996-04-01 Tom Bjorkholm <tomb@mydata.se>
.\"            First version written
.\" 1996-04-10 Markus Kuhn <mskuhn@cip.informatik.uni-erlangen.de>
.\"            revision
.\"
.TH SCHED_GET_PRIORITY_MAX 2 2014-05-12 "Linux" "Linux Programmer's Manual"
.SH NAME
sched_get_priority_max, sched_get_priority_min  \- get static priority range
.SH SYNOPSIS
.B #include <sched.h>
.sp
.BI "int sched_get_priority_max(int " policy );
.sp
.BI "int sched_get_priority_min(int " policy );
.SH DESCRIPTION
.BR sched_get_priority_max ()
returns the maximum priority value that can be used with the
scheduling algorithm identified by
.IR policy .
.BR sched_get_priority_min ()
returns the minimum priority value that can be used with the
scheduling algorithm identified by
.IR policy .
Supported
.I policy
values are
.BR SCHED_FIFO ,
.BR SCHED_RR ,
.BR SCHED_OTHER ,
.BR SCHED_BATCH ,
.BR SCHED_IDLE ,
and
.BR SCHED_DEADLINE .
Further details about these policies can be found in
.BR sched (7).

Processes with numerically higher priority values are scheduled before
processes with numerically lower priority values.
Thus, the value
returned by
.BR sched_get_priority_max ()
will be greater than the
value returned by
.BR sched_get_priority_min ().

Linux allows the static priority range 1 to 99 for the
.B SCHED_FIFO
and
.B SCHED_RR
policies, and the priority 0 for the remaining policies.
Scheduling priority ranges for the various policies
are not alterable.

The range of scheduling priorities may vary on other POSIX systems,
thus it is a good idea for portable applications to use a virtual
priority range and map it to the interval given by
.BR sched_get_priority_max ()
and
.BR sched_get_priority_min ().
POSIX.1-2001 requires a spread of at least 32 between the maximum and the
minimum values for
.B SCHED_FIFO
and
.BR SCHED_RR .

POSIX systems on which
.BR sched_get_priority_max ()
and
.BR sched_get_priority_min ()
are available define
.B _POSIX_PRIORITY_SCHEDULING
in
.IR <unistd.h> .
.SH RETURN VALUE
On success,
.BR sched_get_priority_max ()
and
.BR sched_get_priority_min ()
return the maximum/minimum priority value for the named scheduling
policy.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EINVAL
The argument
.I policy
does not identify a defined scheduling policy.
.SH CONFORMING TO
POSIX.1-2001.
.SH SEE ALSO
.ad l
.nh
.BR sched_getaffinity (2),
.BR sched_getparam (2),
.BR sched_getscheduler (2),
.BR sched_setaffinity (2),
.BR sched_setparam (2),
.BR sched_setscheduler (2),
.BR sched (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) Tom Bjorkholm & Markus Kuhn, 1996
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.\" 1996-04-01 Tom Bjorkholm <tomb@mydata.se>
.\"            First version written
.\" 1996-04-10 Markus Kuhn <mskuhn@cip.informatik.uni-erlangen.de>
.\"            revision
.\"
.TH SCHED_RR_GET_INTERVAL 2 2014-04-28 "Linux" "Linux Programmer's Manual"
.SH NAME
sched_rr_get_interval \- get the SCHED_RR interval for the named process
.SH SYNOPSIS
.B #include <sched.h>
.sp
.BI "int sched_rr_get_interval(pid_t " pid ", struct timespec * " tp );
.SH DESCRIPTION
.BR sched_rr_get_interval ()
writes into the
.I timespec
structure pointed to by
.I tp
the round-robin time quantum for the process identified by
.IR pid .
The specified process should be running under the
.B SCHED_RR
scheduling policy.

The
.I timespec
structure has the following form:

.in +4n
.nf
struct timespec {
    time_t tv_sec;    /* seconds */
    long   tv_nsec;   /* nanoseconds */
};
.fi
.in

If
.I pid
is zero, the time quantum for the calling process is written into
.IR *tp .
.\" FIXME . On Linux, sched_rr_get_interval()
.\" returns the timeslice for SCHED_OTHER processes -- this timeslice
.\" is influenced by the nice value.
.\" For SCHED_FIFO processes, this always returns 0.
.\"
.\" The round-robin time quantum value is not alterable under Linux
.\" 1.3.81.
.\"
.SH RETURN VALUE
On success,
.BR sched_rr_get_interval ()
returns 0.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EFAULT
Problem with copying information to user space.
.TP
.B EINVAL
Invalid pid.
.TP
.B ENOSYS
The system call is not yet implemented (only on rather old kernels).
.TP
.B ESRCH
Could not find a process with the ID
.IR pid .
.SH CONFORMING TO
POSIX.1-2001.
.SH NOTES
POSIX systems on which
.BR sched_rr_get_interval ()
is available define
.B _POSIX_PRIORITY_SCHEDULING
in
.IR <unistd.h> .
.SS Linux notes
POSIX does not specify any mechanism for controlling the size of the
round-robin time quantum.
Older Linux kernels provide a (nonportable) method of doing this.
The quantum can be controlled by adjusting the process's nice value (see
.BR setpriority (2)).
Assigning a negative (i.e., high) nice value results in a longer quantum;
assigning a positive (i.e., low) nice value results in a shorter quantum.
The default quantum is 0.1 seconds;
the degree to which changing the nice value affects the
quantum has varied somewhat across kernel versions.
This method of adjusting the quantum was removed
.\" commit a4ec24b48ddef1e93f7578be53270f0b95ad666c
starting with Linux 2.6.24.

Linux 3.9 added
.\" commit ce0dbbbb30aee6a835511d5be446462388ba9eee
a new mechanism for adjusting (and viewing) the
.BR SCHED_RR
quantum: the
.I /proc/sys/kernel/sched_rr_timeslice_ms
file exposes the quantum as a millisecond value, whose default is 100.
Writing 0 to this file resets the quantum to the default value.
.\" .SH BUGS
.\" As of Linux 1.3.81
.\" .BR sched_rr_get_interval ()
.\" returns with error
.\" ENOSYS, because SCHED_RR has not yet been fully implemented and tested
.\" properly.
.SH SEE ALSO
.BR sched (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2002 Robert Love
.\" and Copyright (C) 2006 Michael Kerrisk
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.\" 2002-11-19 Robert Love <rml@tech9.net> - initial version
.\" 2004-04-20 mtk - fixed description of return value
.\" 2004-04-22 aeb - added glibc prototype history
.\" 2005-05-03 mtk - noted that sched_setaffinity may cause thread
.\"	migration and that CPU affinity is a per-thread attribute.
.\" 2006-02-03 mtk -- Major rewrite
.\" 2008-11-12, mtk, removed CPU_*() macro descriptions to a
.\" separate CPU_SET(3) page.
.\"
.TH SCHED_SETAFFINITY 2 2014-12-31 "Linux" "Linux Programmer's Manual"
.SH NAME
sched_setaffinity, sched_getaffinity \- \
set and get a thread's CPU affinity mask
.SH SYNOPSIS
.nf
.BR "#define _GNU_SOURCE" "             /* See feature_test_macros(7) */"
.B #include <sched.h>
.sp
.BI "int sched_setaffinity(pid_t " pid ", size_t " cpusetsize ,
.BI "                      const cpu_set_t *" mask );
.sp
.BI "int sched_getaffinity(pid_t " pid ", size_t " cpusetsize ,
.BI "                      cpu_set_t *" mask );
.fi
.SH DESCRIPTION
A thread's CPU affinity mask determines the set of CPUs on which
it is eligible to run.
On a multiprocessor system, setting the CPU affinity mask
can be used to obtain performance benefits.
For example,
by dedicating one CPU to a particular thread
(i.e., setting the affinity mask of that thread to specify a single CPU,
and setting the affinity mask of all other threads to exclude that CPU),
it is possible to ensure maximum execution speed for that thread.
Restricting a thread to run on a single CPU also avoids
the performance cost caused by the cache invalidation that occurs
when a thread ceases to execute on one CPU and then
recommences execution on a different CPU.

A CPU affinity mask is represented by the
.I cpu_set_t
structure, a "CPU set", pointed to by
.IR mask .
A set of macros for manipulating CPU sets is described in
.BR CPU_SET (3).

.BR sched_setaffinity ()
sets the CPU affinity mask of the thread whose ID is
.I pid
to the value specified by
.IR mask .
If
.I pid
is zero, then the calling thread is used.
The argument
.I cpusetsize
is the length (in bytes) of the data pointed to by
.IR mask .
Normally this argument would be specified as
.IR "sizeof(cpu_set_t)" .

If the thread specified by
.I pid
is not currently running on one of the CPUs specified in
.IR mask ,
then that thread is migrated to one of the CPUs specified in
.IR mask .

.BR sched_getaffinity ()
writes the affinity mask of the thread whose ID is
.I pid
into the
.I cpu_set_t
structure pointed to by
.IR mask .
The
.I cpusetsize
argument specifies the size (in bytes) of
.IR mask .
If
.I pid
is zero, then the mask of the calling thread is returned.
.SH RETURN VALUE
On success,
.BR sched_setaffinity ()
and
.BR sched_getaffinity ()
return 0.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EFAULT
A supplied memory address was invalid.
.TP
.B EINVAL
The affinity bit mask
.I mask
contains no processors that are currently physically on the system
and permitted to the thread according to any restrictions that
may be imposed by the "cpuset" mechanism described in
.BR cpuset (7).
.TP
.B EINVAL
.RB ( sched_getaffinity ()
and, in kernels before 2.6.9,
.BR sched_setaffinity ())
.I cpusetsize
is smaller than the size of the affinity mask used by the kernel.
.TP
.B EPERM
.RB ( sched_setaffinity ())
The calling thread does not have appropriate privileges.
The caller needs an effective user ID equal to the real user ID
or effective user ID of the thread identified by
.IR pid ,
or it must possess the
.B CAP_SYS_NICE
capability.
.TP
.B ESRCH
The thread whose ID is \fIpid\fP could not be found.
.SH VERSIONS
The CPU affinity system calls were introduced in Linux kernel 2.5.8.
The system call wrappers were introduced in glibc 2.3.
Initially, the glibc interfaces included a
.I cpusetsize
argument, typed as
.IR "unsigned int" .
In glibc 2.3.3, the
.I cpusetsize
argument was removed, but was then restored in glibc 2.3.4, with type
.IR size_t .
.SH CONFORMING TO
These system calls are Linux-specific.
.SH NOTES
After a call to
.BR sched_setaffinity (),
the set of CPUs on which the thread will actually run is
the intersection of the set specified in the
.I mask
argument and the set of CPUs actually present on the system.
The system may further restrict the set of CPUs on which the thread
runs if the "cpuset" mechanism described in
.BR cpuset (7)
is being used.
These restrictions on the actual set of CPUs on which the thread
will run are silently imposed by the kernel.

There are various ways of determining the number of CPUs
available on the system, including: inspecting the contents of
.IR /proc/cpuinfo ;
using
.BR sysconf (3)
to obtain the values of the
.BR _SC_NPROCESSORS_CONF
and
.BR _SC_NPROCESSORS_ONLN
parameters; and inspecting the list CPU directories under
.IR /sys/devices/system/cpu/ .

.BR sched (7)
has a description of the Linux scheduling scheme.
.PP
The affinity mask is a per-thread attribute that can be
adjusted independently for each of the threads in a thread group.
The value returned from a call to
.BR gettid (2)
can be passed in the argument
.IR pid .
Specifying
.I pid
as 0 will set the attribute for the calling thread,
and passing the value returned from a call to
.BR getpid (2)
will set the attribute for the main thread of the thread group.
(If you are using the POSIX threads API, then use
.BR pthread_setaffinity_np (3)
instead of
.BR sched_setaffinity ().)

A child created via
.BR fork (2)
inherits its parent's CPU affinity mask.
The affinity mask is preserved across an
.BR execve (2).
.SS C library/kernel ABI differences
This manual page describes the glibc interface for the CPU affinity calls.
The actual system call interface is slightly different, with the
.I mask
being typed as
.IR "unsigned long\ *" ,
reflecting the fact that the underlying implementation of CPU
sets is a simple bit mask.
On success, the raw
.BR sched_getaffinity ()
system call returns the size (in bytes) of the
.I cpumask_t
data type that is used internally by the kernel to
represent the CPU set bit mask.
.SH SEE ALSO
.ad l
.nh
.BR lscpu (1),
.BR nproc (1),
.BR taskset (1),
.BR clone (2),
.BR getcpu (2),
.BR getpriority (2),
.BR gettid (2),
.BR nice (2),
.BR sched_get_priority_max (2),
.BR sched_get_priority_min (2),
.BR sched_getscheduler (2),
.BR sched_setscheduler (2),
.BR setpriority (2),
.BR CPU_SET (3),
.BR pthread_setaffinity_np (3),
.BR sched_getcpu (3),
.BR capabilities (7),
.BR cpuset (7),
.BR sched (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2014 Michael Kerrisk <mtk.manpages@gmail.com>
.\" and Copyright (C) 2014 Peter Zijlstra <peterz@infradead.org>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH SCHED_SETATTR 2 2015-02-21 "Linux" "Linux Programmer's Manual"
.SH NAME
sched_setattr, sched_getattr \-
set and get scheduling policy and attributes
.SH SYNOPSIS
.nf
.B #include <sched.h>

.BI "int sched_setattr(pid_t " pid ", const struct sched_attr *" attr ,
.BI "                  unsigned int " flags );

.BI "int sched_getattr(pid_t " pid ", struct sched_attr *" attr ,
.BI "                  unsigned int " size ", unsigned int " flags );
.fi
.\" FIXME . Add feature test macro requirements
.SH DESCRIPTION
.SS sched_setattr()
The
.BR sched_setattr ()
system call sets the scheduling policy and
associated attributes for the thread whose ID is specified in
.IR pid .
If
.I pid
equals zero,
the scheduling policy and attributes of the calling thread will be set.

Currently, Linux supports the following "normal"
(i.e., non-real-time) scheduling policies as values that may be specified in
.IR policy :
.TP 14
.BR SCHED_OTHER
the standard round-robin time-sharing policy;
.\" In the 2.6 kernel sources, SCHED_OTHER is actually called
.\" SCHED_NORMAL.
.TP
.BR SCHED_BATCH
for "batch" style execution of processes; and
.TP
.BR SCHED_IDLE
for running
.I very
low priority background jobs.
.PP
Various "real-time" policies are also supported,
for special time-critical applications that need precise control over
the way in which runnable threads are selected for execution.
For the rules governing when a process may use these policies, see
.BR sched (7).
The real-time policies that may be specified in
.IR policy
are:
.TP 14
.BR SCHED_FIFO
a first-in, first-out policy; and
.TP
.BR SCHED_RR
a round-robin policy.
.PP
Linux also provides the following policy:
.TP 14
.B SCHED_DEADLINE
a deadline scheduling policy; see
.BR sched (7)
for details.
.PP
The
.I attr
argument is a pointer to a structure that defines
the new scheduling policy and attributes for the specified thread.
This structure has the following form:

.in +4n
.nf
struct sched_attr {
    u32 size;              /* Size of this structure */
    u32 sched_policy;      /* Policy (SCHED_*) */
    u64 sched_flags;       /* Flags */
    s32 sched_nice;        /* Nice value (SCHED_OTHER,
                              SCHED_BATCH) */
    u32 sched_priority;    /* Static priority (SCHED_FIFO,
                              SCHED_RR) */
    /* Remaining fields are for SCHED_DEADLINE */
    u64 sched_runtime;
    u64 sched_deadline;
    u64 sched_period;
};
.fi
.in

The fields of this structure are as follows:
.TP
.B size
This field should be set to the size of the structure in bytes, as in
.IR "sizeof(struct sched_attr)" .
If the provided structure is smaller than the kernel structure,
any additional fields are assumed to be '0'.
If the provided structure is larger than the kernel structure,
the kernel verifies that all additional fields are 0;
if they are not,
.BR sched_setattr ()
fails with the error
.BR E2BIG
and updates
.I size
to contain the size of the kernel structure.
.IP
The above behavior when the size of the user-space
.I sched_attr
structure does not match the size of the kernel structure
allows for future extensibility of the interface.
Malformed applications that pass oversize structures
won't break in the future if the size of the kernel
.I sched_attr
structure is increased.
In the future,
it could also allow applications that know about a larger user-space
.I sched_attr
structure to determine whether they are running on an older kernel
that does not support the larger structure.
.TP
.I sched_policy
This field specifies the scheduling policy, as one of the
.BR SCHED_*
values listed above.
.TP
.I sched_flags
This field contains flags controlling scheduling behavior.
Only one such flag is currently defined:
.BR SCHED_FLAG_RESET_ON_FORK .
As a result of including this flag, children created by
.BR fork (2)
do not inherit privileged scheduling policies.
See
.BR sched (7)
for details.
.TP
.I sched_nice
This field specifies the nice value to be set when specifying
.IR sched_policy
as
.BR SCHED_OTHER
or
.BR SCHED_BATCH .
The nice value is a number in the range \-20 (high priority)
to +19 (low priority); see
.BR setpriority (2).
.TP
.I sched_priority
This field specifies the static priority to be set when specifying
.IR sched_policy
as
.BR SCHED_FIFO
or
.BR SCHED_RR .
The allowed range of priorities for these policies can be determined using
.BR sched_get_priority_min (2)
and
.BR sched_get_priority_max (2).
For other policies, this field must be specified as 0.
.TP
.I sched_runtime
This field specifies the "Runtime" parameter for deadline scheduling.
The value is expressed in nanoseconds.
This field, and the next two fields,
are used only for
.BR SCHED_DEADLINE
scheduling; for further details, see
.BR sched (7).
.TP
.I sched_deadline
This field specifies the "Deadline" parameter for deadline scheduling.
The value is expressed in nanoseconds.
.TP
.I sched_period
This field specifies the "Period" parameter for deadline scheduling.
The value is expressed in nanoseconds.
.PP
The
.I flags
argument is provided to allow for future extensions to the interface;
in the current implementation it must be specified as 0.
.\"
.\"
.SS sched_getattr()
The
.BR sched_getattr ()
system call fetches the scheduling policy and the
associated attributes for the thread whose ID is specified in
.IR pid .
If
.I pid
equals zero,
the scheduling policy and attributes of the calling thread
will be retrieved.

The
.I size
argument should be set to the size of the
.I sched_attr
structure as known to user space.
The value must be at least as large as the size of the initially published
.I sched_attr
structure, or the call fails with the error
.BR EINVAL .

The retrieved scheduling attributes are placed in the fields of the
.I sched_attr
structure pointed to by
.IR attr .
The kernel sets
.I attr.size
to the size of its
.I sched_attr
structure.

If the caller-provided
.I attr
buffer is larger than the kernel's
.I sched_attr
structure,
the additional bytes in the user-space structure are not touched.
If the caller-provided structure is smaller than the kernel
.I sched_attr
structure and the kernel needs to return values outside the provided space,
.BR sched_getattr ()
fails with the error
.BR E2BIG .
As with
.BR sched_setattr (),
these semantics allow for future extensibility of the interface.

The
.I flags
argument is provided to allow for future extensions to the interface;
in the current implementation it must be specified as 0.
.SH RETURN VALUE
On success,
.BR sched_setattr ()
and
.BR sched_getattr ()
return 0.
On error, \-1 is returned, and
.I errno
is set to indicate the cause of the error.
.SH ERRORS
.BR sched_getattr ()
and
.BR sched_setattr ()
can both fail for the following reasons:
.TP
.B EINVAL
.I attr
is NULL; or
.I pid
is negative; or
.I flags
is not zero.
.TP
.B ESRCH
The thread whose ID is
.I pid
could not be found.
.PP
In addition,
.BR sched_getattr ()
can fail for the following reasons:
.TP
.B E2BIG
The buffer specified by
.I size
and
.I attr
is too small.
.TP
.B EINVAL
.I size
is invalid; that is, it is smaller than the initial version of the
.I sched_attr
structure (48 bytes) or larger than the system page size.
.PP
In addition,
.BR sched_setattr ()
can fail for the following reasons:
.TP
.B E2BIG
The buffer specified by
.I size
and
.I attr
is larger than the kernel structure,
and one or more of the excess bytes is nonzero.
.TP
.B EBUSY
.B SCHED_DEADLINE
admission control failure, see
.BR sched (7).
.TP
.B EINVAL
.I attr.sched_policy
is not one of the recognized policies;
.I attr.sched_flags
contains a flag other than
.BR SCHED_FLAG_RESET_ON_FORK ;
or
.I attr.sched_priority
is invalid; or
.I attr.sched_policy
is
.BR SCHED_DEADLINE
and the deadline scheduling parameters in
.I attr
are invalid.
.TP
.B EPERM
The caller does not have appropriate privileges.
.TP
.B EPERM
The caller's CPU affinity mask
does not include all CPUs in the system
(see
.BR sched_setaffinity (2)).
.SH VERSIONS
These system calls first appeared in Linux 3.14.
.\" FIXME . Add glibc version
.SH CONFORMING TO
These system calls are nonstandard Linux extensions.
.SH NOTES
.BR sched_setattr ()
provides a superset of the functionality of
.BR sched_setscheduler (2),
.BR sched_setparam (2),
.BR nice (2),
and (other than the ability to set the priority of all processes
belonging to a specified user or all processes in a specified group)
.BR setpriority (2).
Analogously,
.BR sched_getattr ()
provides a superset of the functionality of
.BR sched_getscheduler (2),
.BR sched_getparam (2),
and (partially)
.BR getpriority (2).
.SH BUGS
In Linux versions up to
.\" FIXME . patch sent to Peter Zijlstra
3.15,
.BR sched_settattr ()
failed with the error
.BR EFAULT
instead of
.BR E2BIG
for the case described in ERRORS.
.\" In Linux versions up to up 3.15,
.\" FIXME . patch from Peter Zijlstra pending
.\" .BR sched_setattr ()
.\" allowed a negative
.\" .I attr.sched_policy
.\" value.
.SH SEE ALSO
.ad l
.nh
.BR chrt (1),
.BR nice (2),
.BR sched_get_priority_max (2),
.BR sched_get_priority_min (2),
.BR sched_getaffinity (2),
.BR sched_getscheduler (2),
.BR sched_getparam (2),
.BR sched_rr_get_interval (2),
.BR sched_setaffinity (2),
.BR sched_setscheduler (2),
.BR sched_setparam (2),
.BR sched_yield (2),
.BR setpriority (2),
.BR pthread_getschedparam (3),
.BR pthread_setschedparam (3),
.BR pthread_setschedprio (3),
.BR capabilities (7),
.BR cpuset (7),
.BR sched (7)
.ad
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) Tom Bjorkholm & Markus Kuhn, 1996
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.\" 1996-04-01 Tom Bjorkholm <tomb@mydata.se>
.\"            First version written
.\" 1996-04-10 Markus Kuhn <mskuhn@cip.informatik.uni-erlangen.de>
.\"            revision
.\" Modified 2004-05-27 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.TH SCHED_SETPARAM 2 2014-05-11 "Linux" "Linux Programmer's Manual"
.SH NAME
sched_setparam, sched_getparam \- set and get scheduling parameters
.SH SYNOPSIS
.nf
.B #include <sched.h>
.sp
.BI "int sched_setparam(pid_t " pid ", const struct sched_param *" param );
.sp
.BI "int sched_getparam(pid_t " pid ", struct sched_param *" param );
.sp
\fBstruct sched_param {
    ...
    int \fIsched_priority\fB;
    ...
};
.fi
.SH DESCRIPTION
.BR sched_setparam ()
sets the scheduling parameters associated with the scheduling policy
for the process identified by \fIpid\fP.
If \fIpid\fP is zero, then
the parameters of the calling process are set.
The interpretation of
the argument \fIparam\fP depends on the scheduling
policy of the process identified by
.IR pid .
See
.BR sched (7)
for a description of the scheduling policies supported under Linux.

.BR sched_getparam ()
retrieves the scheduling parameters for the
process identified by \fIpid\fP.
If \fIpid\fP is zero, then the parameters
of the calling process are retrieved.

.BR sched_setparam ()
checks the validity of \fIparam\fP for the scheduling policy of the
thread.
The value \fIparam\->sched_priority\fP must lie within the
range given by
.BR sched_get_priority_min (2)
and
.BR sched_get_priority_max (2).

For a discussion of the privileges and resource limits related to
scheduling priority and policy, see
.BR sched (7).

POSIX systems on which
.BR sched_setparam ()
and
.BR sched_getparam ()
are available define
.B _POSIX_PRIORITY_SCHEDULING
in \fI<unistd.h>\fP.
.SH RETURN VALUE
On success,
.BR sched_setparam ()
and
.BR sched_getparam ()
return 0.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EINVAL
Invalid arguments:
.I param
is NULL or
.I pid
is negative
.TP
.B EINVAL
.RB ( sched_setparam ())
The argument \fIparam\fP does not make sense for the current
scheduling policy.
.TP
.B EPERM
.RB ( sched_setparam ())
The calling process does not have appropriate privileges
(Linux: does not have the
.B CAP_SYS_NICE
capability).
.TP
.B ESRCH
The process whose ID is \fIpid\fP could not be found.
.SH CONFORMING TO
POSIX.1-2001.
.SH NOTES
.PP
Scheduling parameters are in fact per-thread
attributes on Linux;
see
.BR sched (7).
.SH SEE ALSO
.ad l
.nh
.BR getpriority (2),
.BR nice (2),
.BR sched_get_priority_max (2),
.BR sched_get_priority_min (2),
.BR sched_getaffinity (2),
.BR sched_getscheduler (2),
.BR sched_setaffinity (2),
.BR sched_setscheduler (2),
.BR sched_setattr (2),
.BR setpriority (2),
.BR capabilities (7),
.BR sched (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2014 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\"
.TH SCHED_SETSCHEDULER 2 2014-10-02 "Linux" "Linux Programmer's Manual"
.SH NAME
sched_setscheduler, sched_getscheduler \-
set and get scheduling policy/parameters
.SH SYNOPSIS
.nf
.B #include <sched.h>
.sp
.BI "int sched_setscheduler(pid_t " pid ", int " policy ,
.br
.BI "                       const struct sched_param *" param );
.sp
.BI "int sched_getscheduler(pid_t " pid );
.sp
.fi
.SH DESCRIPTION
The
.BR sched_setscheduler ()
system call
sets both the scheduling policy and parameters for the
thread whose ID is specified in \fIpid\fP.
If \fIpid\fP equals zero, the
scheduling policy and parameters of the calling thread will be set.

The scheduling parameters are specified in the
.I param
argument, which is a pointer to a structure of the following form:

.nf
.in +4n
struct sched_param {
    ...
    int sched_priority;
    ...
};
.in
.fi

In the current implementation, the structure contains only one field,
.IR sched_priority .
The interpretation of
.I param
depends on the selected policy.

Currently, Linux supports the following "normal"
(i.e., non-real-time) scheduling policies as values that may be specified in
.IR policy :
.TP 14
.BR SCHED_OTHER
the standard round-robin time-sharing policy;
.\" In the 2.6 kernel sources, SCHED_OTHER is actually called
.\" SCHED_NORMAL.
.TP
.BR SCHED_BATCH
for "batch" style execution of processes; and
.TP
.BR SCHED_IDLE
for running
.I very
low priority background jobs.
.PP
For each of the above policies,
.IR param\->sched_priority
must be 0.

Various "real-time" policies are also supported,
for special time-critical applications that need precise control over
the way in which runnable threads are selected for execution.
For the rules governing when a process may use these policies, see
.BR sched (7).
The real-time policies that may be specified in
.IR policy
are:
.TP 14
.BR SCHED_FIFO
a first-in, first-out policy; and
.TP
.BR SCHED_RR
a round-robin policy.
.PP
For each of the above policies,
.IR param\->sched_priority
specifies a scheduling priority for the thread.
This is a number in the range returned by calling
.BR sched_get_priority_min (2)
and
.BR sched_get_priority_max (2)
with the specified
.IR policy .
On Linux, these system calls return, respectively, 1 and 99.

Since Linux 2.6.32, the
.B SCHED_RESET_ON_FORK
flag can be ORed in
.I policy
when calling
.BR sched_setscheduler ().
As a result of including this flag, children created by
.BR fork (2)
do not inherit privileged scheduling policies.
See
.BR sched (7)
for details.

.BR sched_getscheduler ()
returns the current scheduling policy of the thread
identified by \fIpid\fP.
If \fIpid\fP equals zero, the policy of the
calling thread will be retrieved.
.SH RETURN VALUE
On success,
.BR sched_setscheduler ()
returns zero.
On success,
.BR sched_getscheduler ()
returns the policy for the thread (a nonnegative integer).
On error, both calls return \-1, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EINVAL
Invalid arguments:
.I pid
is negative or
.I param
is NULL.
.TP
.B EINVAL
.RB ( sched_setscheduler ())
.I policy
is not one of the recognized policies.
.TP
.B EINVAL
.RB ( sched_setscheduler ())
.I param
does not make sense for the specified
.IR policy .
.TP
.B EPERM
The calling thread does not have appropriate privileges.
.TP
.B ESRCH
The thread whose ID is \fIpid\fP could not be found.
.SH CONFORMING TO
POSIX.1-2001 (but see BUGS below).
The \fBSCHED_BATCH\fP and \fBSCHED_IDLE\fP policies are Linux-specific.
.SH NOTES
Further details of the semantics of all of the above "normal"
and "real-time" scheduling policies can be found in
.BR sched (7).

POSIX systems on which
.BR sched_setscheduler ()
and
.BR sched_getscheduler ()
are available define
.B _POSIX_PRIORITY_SCHEDULING
in \fI<unistd.h>\fP.

POSIX.1 does not detail the permissions that an unprivileged
thread requires in order to call
.BR sched_setscheduler (),
and details vary across systems.
For example, the Solaris 7 manual page says that
the real or effective user ID of the caller must
match the real user ID or the save set-user-ID of the target.
.PP
The scheduling policy and parameters are in fact per-thread
attributes on Linux.
The value returned from a call to
.BR gettid (2)
can be passed in the argument
.IR pid .
Specifying
.I pid
as 0 will operate on the attributes of the calling thread,
and passing the value returned from a call to
.BR getpid (2)
will operate on the attributes of the main thread of the thread group.
(If you are using the POSIX threads API, then use
.BR pthread_setschedparam (3),
.BR pthread_getschedparam (3),
and
.BR pthread_setschedprio (3),
instead of the
.BR sched_* (2)
system calls.)
.SH BUGS
POSIX says that on success,
.BR sched_setscheduler ()
should return the previous scheduling policy.
Linux
.BR sched_setscheduler ()
does not conform to this requirement,
since it always returns 0 on success.
.SH SEE ALSO
.ad l
.nh
.BR chrt (1),
.BR nice (2),
.BR sched_get_priority_max (2),
.BR sched_get_priority_min (2),
.BR sched_getaffinity (2),
.BR sched_getattr (2),
.BR sched_getparam (2),
.BR sched_rr_get_interval (2),
.BR sched_setaffinity (2),
.BR sched_setattr (2),
.BR sched_setparam (2),
.BR sched_yield (2),
.BR setpriority (2),
.BR capabilities (7),
.BR cpuset (7),
.BR sched (7)
.ad
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) Tom Bjorkholm & Markus Kuhn, 1996
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.\" 1996-04-01 Tom Bjorkholm <tomb@mydata.se>
.\"            First version written
.\" 1996-04-10 Markus Kuhn <mskuhn@cip.informatik.uni-erlangen.de>
.\"            revision
.\"
.TH SCHED_YIELD 2 2014-04-28 "Linux" "Linux Programmer's Manual"
.SH NAME
sched_yield \- yield the processor
.SH SYNOPSIS
.B #include <sched.h>
.sp
.B int sched_yield(void);
.SH DESCRIPTION
.BR sched_yield ()
causes the calling thread to relinquish the CPU.
The thread is moved to the end of the queue for its static
priority and a new thread gets to run.
.SH RETURN VALUE
On success,
.BR sched_yield ()
returns 0.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
In the Linux implementation,
.BR sched_yield ()
always succeeds.
.SH CONFORMING TO
POSIX.1-2001.
.SH NOTES
If the calling thread is the only thread in the highest
priority list at that time,
it will continue to run after a call to
.BR sched_yield ().

POSIX systems on which
.BR sched_yield ()
is available define
.B _POSIX_PRIORITY_SCHEDULING
in
.IR <unistd.h> .

Strategic calls to
.BR sched_yield ()
can improve performance by giving other threads or processes
a chance to run when (heavily) contended resources (e.g., mutexes)
have been released by the caller.
Avoid calling
.BR sched_yield ()
unnecessarily or inappropriately
(e.g., when resources needed by other
schedulable threads are still held by the caller),
since doing so will result in unnecessary context switches,
which will degrade system performance.
.SH SEE ALSO
.BR sched (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2014 Kees Cook <keescook@chromium.org>
.\" and Copyright (C) 2012 Will Drewry <wad@chromium.org>
.\" and Copyright (C) 2008, 2014 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH SECCOMP 2 2015-03-29 "Linux" "Linux Programmer's Manual"
.SH NAME
seccomp \- operate on Secure Computing state of the process
.SH SYNOPSIS
.nf
.B #include <linux/seccomp.h>
.B #include <linux/filter.h>
.B #include <linux/audit.h>
.B #include <linux/signal.h>
.B #include <sys/ptrace.h>
.\" Kees Cook noted: Anything that uses SECCOMP_RET_TRACE returns will
.\"                  need <sys/ptrace.h>

.BI "int seccomp(unsigned int " operation ", unsigned int " flags \
", void *" args );
.fi
.SH DESCRIPTION
The
.BR seccomp ()
system call operates on the Secure Computing (seccomp) state of the
calling process.

Currently, Linux supports the following
.IR operation
values:
.TP
.BR SECCOMP_SET_MODE_STRICT
The only system calls that the calling thread is permitted to make are
.BR read (2),
.BR write (2),
.BR _exit (2),
and
.BR sigreturn (2).
Other system calls result in the delivery of a
.BR SIGKILL
signal.
Strict secure computing mode is useful for number-crunching
applications that may need to execute untrusted byte code, perhaps
obtained by reading from a pipe or socket.

Note that although the calling thread can no longer call
.BR sigprocmask (2),
it can use
.BR sigreturn (2)
to block all signals apart from
.BR SIGKILL
and
.BR SIGSTOP .
This means that
.BR alarm (2)
(for example) is not sufficient for restricting the process's execution time.
Instead, to reliably terminate the process,
.BR SIGKILL
must be used.
This can be done by using
.BR timer_create (2)
with
.BR SIGEV_SIGNAL
and
.IR sigev_signo
set to
.BR SIGKILL ,
or by using
.BR setrlimit (2)
to set the hard limit for
.BR RLIMIT_CPU .

This operation is available only if the kernel is configured with
.BR CONFIG_SECCOMP
enabled.

The value of
.IR flags
must be 0, and
.IR args
must be NULL.

This operation is functionally identical to the call:

    prctl(PR_SET_SECCOMP, SECCOMP_MODE_STRICT);
.TP
.BR SECCOMP_SET_MODE_FILTER
The system calls allowed are defined by a pointer to a Berkeley Packet
Filter (BPF) passed via
.IR args .
This argument is a pointer to a
.IR "struct\ sock_fprog" ;
it can be designed to filter arbitrary system calls and system call
arguments.
If the filter is invalid,
.BR seccomp ()
fails, returning
.BR EINVAL
in
.IR errno .

If
.BR fork (2)
or
.BR clone (2)
is allowed by the filter, any child processes will be constrained to
the same system call filters as the parent.
If
.BR execve (2)
is allowed,
the existing filters will be preserved across a call to
.BR execve (2).

In order to use the
.BR SECCOMP_SET_MODE_FILTER
operation, either the caller must have the
.BR CAP_SYS_ADMIN
capability, or the thread must already have the
.I no_new_privs
bit set.
If that bit was not already set by an ancestor of this thread,
the thread must make the following call:

    prctl(PR_SET_NO_NEW_PRIVS, 1);

Otherwise, the
.BR SECCOMP_SET_MODE_FILTER
operation will fail and return
.BR EACCES
in
.IR errno .
This requirement ensures that an unprivileged process cannot apply
a malicious filter and then invoke a set-user-ID or
other privileged program using
.BR execve (2),
thus potentially compromising that program.
(Such a malicious filter might, for example, cause an attempt to use
.BR setuid (2)
to set the caller's user IDs to non-zero values to instead
return 0 without actually making the system call.
Thus, the program might be tricked into retaining superuser privileges
in circumstances where it is possible to influence it to do
dangerous things because it did not actually drop privileges.)

If
.BR prctl (2)
or
.BR seccomp (2)
is allowed by the attached filter, further filters may be added.
This will increase evaluation time, but allows for further reduction of
the attack surface during execution of a thread.

The
.BR SECCOMP_SET_MODE_FILTER
operation is available only if the kernel is configured with
.BR CONFIG_SECCOMP_FILTER
enabled.

When
.IR flags
is 0, this operation is functionally identical to the call:

    prctl(PR_SET_SECCOMP, SECCOMP_MODE_FILTER, args);

The recognized
.IR flags
are:
.RS
.TP
.BR SECCOMP_FILTER_FLAG_TSYNC
When adding a new filter, synchronize all other threads of the calling
process to the same seccomp filter tree.
A "filter tree" is the ordered list of filters attached to a thread.
(Attaching identical filters in separate
.BR seccomp ()
calls results in different filters from this perspective.)

If any thread cannot synchronize to the same filter tree,
the call will not attach the new seccomp filter,
and will fail, returning the first thread ID found that cannot synchronize.
Synchronization will fail if another thread in the same process is in
.BR SECCOMP_MODE_STRICT
or if it has attached new seccomp filters to itself,
diverging from the calling thread's filter tree.
.RE
.SS Filters
When adding filters via
.BR SECCOMP_SET_MODE_FILTER ,
.IR args
points to a filter program:

.in +4n
.nf
struct sock_fprog {
    unsigned short      len;    /* Number of BPF instructions */
    struct sock_filter *filter; /* Pointer to array of
                                   BPF instructions */
};
.fi
.in

Each program must contain one or more BPF instructions:

.in +4n
.nf
struct sock_filter {            /* Filter block */
    __u16 code;                 /* Actual filter code */
    __u8  jt;                   /* Jump true */
    __u8  jf;                   /* Jump false */
    __u32 k;                    /* Generic multiuse field */
};
.fi
.in

When executing the instructions, the BPF program operates on the
system call information made available (i.e., use the
.BR BPF_ABS
addressing mode) as a (read-only)
.\" Quoting Kees Cook:
.\"     If BPF even allows changing the data, it's not copied back to
.\"     the syscall when it runs. Anything wanting to do things like
.\"     that would need to use ptrace to catch the call an directly
.\"     modify the registers before continuing with the call.
buffer of the following form:

.in +4n
.nf
struct seccomp_data {
    int   nr;                   /* System call number */
    __u32 arch;                 /* AUDIT_ARCH_* value
                                   (see <linux/audit.h>) */
    __u64 instruction_pointer;  /* CPU instruction pointer */
    __u64 args[6];              /* Up to 6 system call arguments */
};
.fi
.in

Because the numbers of system calls vary between architectures and
some architectures (e.g., X86-64) allow user-space code to use
the calling conventions of multiple architectures, it is usually
necessary to verify the value of the
.IR arch
field.

It is strongly recommended to use a whitelisting approach whenever
possible because such an approach is more robust and simple.
A blacklist will have to be updated whenever a potentially
dangerous system call is added (or a dangerous flag or option if those
are blacklisted), and it is often possible to alter the
representation of a value without altering its meaning, leading to
a blacklist bypass.

The
.IR arch
field is not unique for all calling conventions.
The X86-64 ABI and the X32 ABI both use
.BR AUDIT_ARCH_X86_64
as
.IR arch ,
and they run on the same processors.
Instead, the mask
.BR __X32_SYSCALL_BIT
is used on the system call number to tell the two ABIs apart.
This means that in order to create a seccomp-based
blacklist for system calls performed through the X86-64 ABI,
it is necessary to not only check that
.IR arch
equals
.BR AUDIT_ARCH_X86_64 ,
but also to explicitly reject all system call that contain
.BR __X32_SYSCALL_BIT
in
.IR nr .

When checking values from
.IR args
against a blacklist, keep in mind that arguments are often
silently truncated before being processed, but after the seccomp check.
For example, this happens if the i386 ABI is used on an
X86-64 kernel: Although the kernel will normally not look beyond
the 32 lowest bits of the arguments, the values of the full
64-bit registers will be present in the seccomp data.
A less surprising example is that if the X86-64 ABI is used to perform
a system call that takes an argument of type
.IR int ,
the more-significant half of the argument register is ignored by
the system call, but visible in the seccomp data.

A seccomp filter returns a 32-bit value consisting of two parts:
the most significant 16 bits
(corresponding to the mask defined by the constant
.BR SECCOMP_RET_ACTION )
contain one of the "action" values listed below;
the least significant 16-bits (defined by the constant
.BR SECCOMP_RET_DATA )
are "data" to be associated with this return value.

If multiple filters exist, they are all executed,
in reverse order of their addition to the filter tree
(i.e., the most recently installed filter is executed first).
The return value for the evaluation of a given system call is the first-seen
.BR SECCOMP_RET_ACTION
value of highest precedence (along with its accompanying data)
returned by execution of all of the filters.

In decreasing order of precedence,
the values that may be returned by a seccomp filter are:
.TP
.BR SECCOMP_RET_KILL
This value results in the process exiting immediately
without executing the system call.
The process terminates as though killed by a
.B SIGSYS
signal
.RI ( not
.BR SIGKILL ).
.TP
.BR SECCOMP_RET_TRAP
This value results in the kernel sending a
.BR SIGSYS
signal to the triggering process without executing the system call.
Various fields will be set in the
.I siginfo_t
structure (see
.BR sigaction (2))
associated with signal:
.RS
.IP * 3
.I si_signo
will contain
.BR SIGSYS .
.IP *
.IR si_call_addr
will show the address of the system call instruction.
.IP *
.IR si_syscall
and
.IR si_arch
will indicate which system call was attempted.
.IP *
.I si_code
will contain
.BR SYS_SECCOMP .
.IP *
.I si_errno
will contain the
.BR SECCOMP_RET_DATA
portion of the filter return value.
.RE
.IP
The program counter will be as though the system call happened
(i.e., it will not point to the system call instruction).
The return value register will contain an architecture\-dependent value;
if resuming execution, set it to something appropriate for the system call.
(The architecture dependency is because replacing it with
.BR ENOSYS
could overwrite some useful information.)
.TP
.BR SECCOMP_RET_ERRNO
This value results in the
.B SECCOMP_RET_DATA
portion of the filter's return value being passed to user space as the
.IR errno
value without executing the system call.
.TP
.BR SECCOMP_RET_TRACE
When returned, this value will cause the kernel to attempt to notify a
.BR ptrace (2)-based
tracer prior to executing the system call.
If there is no tracer present,
the system call is not executed and returns a failure status with
.I errno
set to
.BR ENOSYS .

A tracer will be notified if it requests
.BR PTRACE_O_TRACESECCOMP
using
.IR ptrace(PTRACE_SETOPTIONS) .
The tracer will be notified of a
.BR PTRACE_EVENT_SECCOMP
and the
.BR SECCOMP_RET_DATA
portion of the filter's return value will be available to the tracer via
.BR PTRACE_GETEVENTMSG .

The tracer can skip the system call by changing the system call number
to \-1.
Alternatively, the tracer can change the system call
requested by changing the system call to a valid system call number.
If the tracer asks to skip the system call, then the system call will
appear to return the value that the tracer puts in the return value register.

The seccomp check will not be run again after the tracer is notified.
(This means that seccomp-based sandboxes
.B "must not"
allow use of
.BR ptrace (2)\(emeven
of other
sandboxed processes\(emwithout extreme care;
ptracers can use this mechanism to escape from the seccomp sandbox.)
.TP
.BR SECCOMP_RET_ALLOW
This value results in the system call being executed.
.SH RETURN VALUE
On success,
.BR seccomp ()
returns 0.
On error, if
.BR SECCOMP_FILTER_FLAG_TSYNC
was used,
the return value is the ID of the thread
that caused the synchronization failure.
(This ID is a kernel thread ID of the type returned by
.BR clone (2)
and
.BR gettid (2).)
On other errors, \-1 is returned, and
.IR errno
is set to indicate the cause of the error.
.SH ERRORS
.BR seccomp ()
can fail for the following reasons:
.TP
.BR EACCESS
The caller did not have the
.BR CAP_SYS_ADMIN
capability, or had not set
.IR no_new_privs
before using
.BR SECCOMP_SET_MODE_FILTER .
.TP
.BR EFAULT
.IR args
was not a valid address.
.TP
.BR EINVAL
.IR operation
is unknown; or
.IR flags
are invalid for the given
.IR operation .
.TP
.BR EINVAL
.I operation
included
.BR BPF_ABS ,
but the specified offset was not aligned to a 32-bit boundary or exceeded
.IR "sizeof(struct\ seccomp_data)" .
.TP
.BR EINVAL
.\" See kernel/seccomp.c::seccomp_may_assign_mode() in 3.18 sources
A secure computing mode has already been set, and
.I operation
differs from the existing setting.
.TP
.BR EINVAL
.\" See stub kernel/seccomp.c::seccomp_set_mode_filter() in 3.18 sources
.I operation
specified
.BR SECCOMP_SET_MODE_FILTER ,
but the kernel was not built with
.B CONFIG_SECCOMP_FILTER
enabled.
.TP
.BR EINVAL
.I operation
specified
.BR SECCOMP_SET_MODE_FILTER ,
but the filter program pointed to by
.I args
was not valid or the length of the filter program was zero or exceeded
.B BPF_MAXINSNS
(4096) instructions.
.BR EINVAL
.TP
.BR ENOMEM
Out of memory.
.TP
.BR ENOMEM
.\" ENOMEM in kernel/seccomp.c::seccomp_attach_filter() in 3.18 sources
The total length of all filter programs attached
to the calling thread would exceed
.B MAX_INSNS_PER_PATH
(32768) instructions.
Note that for the purposes of calculating this limit,
each already existing filter program incurs an
overhead penalty of 4 instructions.
.TP
.BR ESRCH
Another thread caused a failure during thread sync, but its ID could not
be determined.
.SH VERSIONS
The
.BR seccomp ()
system call first appeared in Linux 3.17.
.\" FIXME . Add glibc version
.SH CONFORMING TO
The
.BR seccomp ()
system call is a nonstandard Linux extension.
.SH NOTES
Rather than hand-coding seccomp filters as shown in the example below,
you may prefer to employ the
.I libseccomp
library, which provides a front-end for generating seccomp filters.

The
.IR Seccomp
field of the
.IR /proc/[pid]/status
file provides a method of viewing the seccomp mode of a process; see
.BR proc (5).

.BR seccomp ()
provides a superset of the functionality provided by the
.BR prctl (2)
.BR PR_SET_SECCOMP
operation (which does not support
.IR flags ).
.SS Seccomp-specific BPF details
Note the following BPF details specific to seccomp filters:
.IP * 3
The
.B BPF_H
and
.B BPF_B
size modifiers are not supported: all operations must load and store
(4-byte) words
.RB ( BPF_W ).
.IP *
To access the contents of the
.I seccomp_data
buffer, use the
.B BPF_ABS
addressing mode modifier.
.IP *
The
.B BPF_LEN
addressing mode modifier yields an immediate mode operand
whose value is the size of the
.IR seccomp_data
buffer.
.SH EXAMPLE
The program below accepts four or more arguments.
The first three arguments are a system call number,
a numeric architecture identifier, and an error number.
The program uses these values to construct a BPF filter
that is used at run time to perform the following checks:
.IP [1] 4
If the program is not running on the specified architecture,
the BPF filter causes system calls to fail with the error
.BR ENOSYS .
.IP [2]
If the program attempts to execute the system call with the specified number,
the BPF filter causes the system call to fail, with
.I errno
being set to the specified error number.
.PP
The remaining command-line arguments specify
the pathname and additional arguments of a program
that the example program should attempt to execute using
.BR execv (3)
(a library function that employs the
.BR execve (2)
system call).
Some example runs of the program are shown below.

First, we display the architecture that we are running on (x86-64)
and then construct a shell function that looks up system call
numbers on this architecture:

.nf
.in +4n
$ \fBuname -m\fP
x86_64
$ \fBsyscall_nr() {
    cat /usr/src/linux/arch/x86/syscalls/syscall_64.tbl | \\
    awk '$2 != "x32" && $3 == "'$1'" { print $1 }'
}\fP
.in
.fi

When the BPF filter rejects a system call (case [2] above),
it causes the system call to fail with the error number
specified on the command line.
In the experiments shown here, we'll use error number 99:

.nf
.in +4n
$ \fBerrno 99\fP
EADDRNOTAVAIL 99 Cannot assign requested address
.in
.fi

In the following example, we attempt to run the command
.BR whoami (1),
but the BPF filter rejects the
.BR execve (2)
system call, so that the command is not even executed:

.nf
.in +4n
$ \fBsyscall_nr execve\fP
59
$ \fB./a.out\fP
Usage: ./a.out <syscall_nr> <arch> <errno> <prog> [<args>]
Hint for <arch>: AUDIT_ARCH_I386: 0x40000003
                 AUDIT_ARCH_X86_64: 0xC000003E
$ \fB./a.out 59 0xC000003E 99 /bin/whoami\fP
execv: Cannot assign requested address
.in
.fi

In the next example, the BPF filter rejects the
.BR write (2)
system call, so that, although it is successfully started, the
.BR whoami (1)
command is not able to write output:

.nf
.in +4n
$ \fBsyscall_nr write\fP
1
$ \fB./a.out 1 0xC000003E 99 /bin/whoami\fP
.in
.fi

In the final example,
the BPF filter rejects a system call that is not used by the
.BR whoami (1)
command, so it is able to successfully execute and produce output:

.nf
.in +4n
$ \fBsyscall_nr preadv\fP
295
$ \fB./a.out 295 0xC000003E 99 /bin/whoami\fP
cecilia
.in
.fi
.SS Program source
.fi
.nf
#include <errno.h>
#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <linux/audit.h>
#include <linux/filter.h>
#include <linux/seccomp.h>
#include <sys/prctl.h>

#define X32_SYSCALL_BIT 0x40000000

static int
install_filter(int syscall_nr, int t_arch, int f_errno)
{
    unsigned int upper_nr_limit = 0xffffffff;
    /* assume that AUDIT_ARCH_X86_64 means the normal X86-64 ABI */
    if (t_arch == AUDIT_ARCH_X86_64)
        upper_nr_limit = X32_SYSCALL_BIT - 1;

    struct sock_filter filter[] = {
        /* [0] Load architecture from 'seccomp_data' buffer into
               accumulator */
        BPF_STMT(BPF_LD | BPF_W | BPF_ABS,
                 (offsetof(struct seccomp_data, arch))),

        /* [1] Jump forward 5 instructions if architecture does not
               match 't_arch' */
        BPF_JUMP(BPF_JMP | BPF_JEQ | BPF_K, t_arch, 0, 5),

        /* [2] Load system call number from 'seccomp_data' buffer into
               accumulator */
        BPF_STMT(BPF_LD | BPF_W | BPF_ABS,
                 (offsetof(struct seccomp_data, nr))),

        /* [3] Check ABI - only needed for X86-64 in blacklist use
               cases.  Use JGT instead of checking against the bit
               mask to avoid having to reload the syscall number. */
        BPF_JUMP(BPF_JMP | BPF_JGT | BPF_K, upper_nr_limit, 3, 0),

        /* [4] Jump forward 1 instruction if system call number
               does not match 'syscall_nr' */
        BPF_JUMP(BPF_JMP | BPF_JEQ | BPF_K, syscall_nr, 0, 1),

        /* [5] Matching architecture and system call: don't execute
	       the system call, and return 'f_errno' in 'errno' */
        BPF_STMT(BPF_RET | BPF_K,
                 SECCOMP_RET_ERRNO | (f_errno & SECCOMP_RET_DATA)),

        /* [6] Destination of system call number mismatch: allow other
               system calls */
        BPF_STMT(BPF_RET | BPF_K, SECCOMP_RET_ALLOW),

        /* [7] Destination of architecture mismatch: kill process */
        BPF_STMT(BPF_RET | BPF_K, SECCOMP_RET_KILL),
    };

    struct sock_fprog prog = {
        .len = (unsigned short) (sizeof(filter) / sizeof(filter[0])),
        .filter = filter,
    };

    if (seccomp(SECCOMP_SET_MODE_FILTER, 0, &prog)) {
        perror("seccomp");
        return 1;
    }

    return 0;
}

int
main(int argc, char **argv)
{
    if (argc < 5) {
        fprintf(stderr, "Usage: "
                "%s <syscall_nr> <arch> <errno> <prog> [<args>]\\n"
                "Hint for <arch>: AUDIT_ARCH_I386: 0x%X\\n"
                "                 AUDIT_ARCH_X86_64: 0x%X\\n"
                "\\n", argv[0], AUDIT_ARCH_I386, AUDIT_ARCH_X86_64);
        exit(EXIT_FAILURE);
    }

    if (prctl(PR_SET_NO_NEW_PRIVS, 1, 0, 0, 0)) {
        perror("prctl");
        exit(EXIT_FAILURE);
    }

    if (install_filter(strtol(argv[1], NULL, 0),
                       strtol(argv[2], NULL, 0),
                       strtol(argv[3], NULL, 0)))
        exit(EXIT_FAILURE);

    execv(argv[4], &argv[4]);
    perror("execv");
    exit(EXIT_FAILURE);
}
.fi
.SH SEE ALSO
.BR prctl (2),
.BR ptrace (2),
.BR sigaction (2),
.BR signal (7),
.BR socket (7)
.sp
The kernel source files
.IR Documentation/networking/filter.txt
and
.IR Documentation/prctl/seccomp_filter.txt .
.sp
McCanne, S. and Jacobson, V. (1992)
.IR "The BSD Packet Filter: A New Architecture for User-level Packet Capture" ,
Proceedings of the USENIX Winter 1993 Conference
.UR http://www.tcpdump.org/papers/bpf-usenix93.pdf
.UE
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" This manpage is copyright (C) 1992 Drew Eckhardt,
.\"                 copyright (C) 1995 Michael Shields.
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified 1993-07-24 by Rik Faith <faith@cs.unc.edu>
.\" Modified 1995-05-18 by Jim Van Zandt <jrv@vanzandt.mv.com>
.\" Sun Feb 11 14:07:00 MET 1996  Martin Schulze  <joey@linux.de>
.\"	* layout slightly modified
.\"
.\" Modified Mon Oct 21 23:05:29 EDT 1996 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified Thu Feb 24 01:41:09 CET 2000 by aeb
.\" Modified Thu Feb  9 22:32:09 CET 2001 by bert hubert <ahu@ds9a.nl>, aeb
.\" Modified Mon Nov 11 14:35:00 PST 2002 by Ben Woodard <ben@zork.net>
.\" 2005-03-11, mtk, modified pselect() text (it is now a system
.\"     call in 2.6.16.
.\"
.TH SELECT 2 2015-01-22 "Linux" "Linux Programmer's Manual"
.SH NAME
select, pselect, FD_CLR, FD_ISSET, FD_SET, FD_ZERO \-
synchronous I/O multiplexing
.SH SYNOPSIS
.nf
/* According to POSIX.1-2001 */
.br
.B #include <sys/select.h>
.sp
/* According to earlier standards */
.br
.B #include <sys/time.h>
.br
.B #include <sys/types.h>
.br
.B #include <unistd.h>
.sp
.BI "int select(int " nfds ", fd_set *" readfds ", fd_set *" writefds ,
.BI "           fd_set *" exceptfds ", struct timeval *" timeout );
.sp
.BI "void FD_CLR(int " fd ", fd_set *" set );
.br
.BI "int  FD_ISSET(int " fd ", fd_set *" set );
.br
.BI "void FD_SET(int " fd ", fd_set *" set );
.br
.BI "void FD_ZERO(fd_set *" set );
.sp
.B #include <sys/select.h>
.sp
.BI "int pselect(int " nfds ", fd_set *" readfds ", fd_set *" writefds ,
.BI "            fd_set *" exceptfds ", const struct timespec *" timeout ,
.BI "            const sigset_t *" sigmask );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR pselect ():
_POSIX_C_SOURCE\ >=\ 200112L || _XOPEN_SOURCE\ >=\ 600
.SH DESCRIPTION
.BR select ()
and
.BR pselect ()
allow a program to monitor multiple file descriptors,
waiting until one or more of the file descriptors become "ready"
for some class of I/O operation (e.g., input possible).
A file descriptor is considered ready if it is possible to
perform a corresponding I/O operation (e.g.,
.BR read (2)
without blocking, or a sufficiently small
.BR write (2)).
.PP
The operation of
.BR select ()
and
.BR pselect ()
is identical, other than these three differences:
.TP
(i)
.BR select ()
uses a timeout that is a
.I struct timeval
(with seconds and microseconds), while
.BR pselect ()
uses a
.I struct timespec
(with seconds and nanoseconds).
.TP
(ii)
.BR select ()
may update the
.I timeout
argument to indicate how much time was left.
.BR pselect ()
does not change this argument.
.TP
(iii)
.BR select ()
has no
.I sigmask
argument, and behaves as
.BR pselect ()
called with NULL
.IR sigmask .
.PP
Three independent sets of file descriptors are watched.
Those listed in
.I readfds
will be watched to see if characters become
available for reading (more precisely, to see if a read will not
block; in particular, a file descriptor is also ready on end-of-file),
those in
.I writefds
will be watched to see if space is available for write (though a large
write may still block), and those in
.I exceptfds
will be watched for exceptions.
On exit, the sets are modified in place
to indicate which file descriptors actually changed status.
Each of the three file descriptor sets may be specified as NULL
if no file descriptors are to be watched for the corresponding class
of events.
.PP
Four macros are provided to manipulate the sets.
.BR FD_ZERO ()
clears a set.
.BR FD_SET ()
and
.BR FD_CLR ()
respectively add and remove a given file descriptor from a set.
.BR FD_ISSET ()
tests to see if a file descriptor is part of the set;
this is useful after
.BR select ()
returns.
.PP
.I nfds
is the highest-numbered file descriptor in any of the three sets, plus 1.
.PP
The
.I timeout
argument specifies the interval that
.BR select ()
should block waiting for a file descriptor to become ready.
The call will block until either:
.IP * 3
a file descriptor becomes ready;
.IP *
the call is interrupted by a signal handler; or
.IP *
the timeout expires.
.PP
Note that the
.I timeout
interval will be rounded up to the system clock granularity,
and kernel scheduling delays mean that the blocking interval
may overrun by a small amount.
If both fields of the
.I timeval
structure are zero, then
.BR select ()
returns immediately.
(This is useful for polling.)
If
.I timeout
is NULL (no timeout),
.BR select ()
can block indefinitely.
.PP
.I sigmask
is a pointer to a signal mask (see
.BR sigprocmask (2));
if it is not NULL, then
.BR pselect ()
first replaces the current signal mask by the one pointed to by
.IR sigmask ,
then does the "select" function, and then restores the original
signal mask.
.PP
Other than the difference in the precision of the
.I timeout
argument, the following
.BR pselect ()
call:
.nf

    ready = pselect(nfds, &readfds, &writefds, &exceptfds,
                    timeout, &sigmask);

.fi
is equivalent to
.I atomically
executing the following calls:
.nf

    sigset_t origmask;

    pthread_sigmask(SIG_SETMASK, &sigmask, &origmask);
    ready = select(nfds, &readfds, &writefds, &exceptfds, timeout);
    pthread_sigmask(SIG_SETMASK, &origmask, NULL);
.fi
.PP
The reason that
.BR pselect ()
is needed is that if one wants to wait for either a signal
or for a file descriptor to become ready, then
an atomic test is needed to prevent race conditions.
(Suppose the signal handler sets a global flag and
returns.
Then a test of this global flag followed by a call of
.BR select ()
could hang indefinitely if the signal arrived just after the test
but just before the call.
By contrast,
.BR pselect ()
allows one to first block signals, handle the signals that have come in,
then call
.BR pselect ()
with the desired
.IR sigmask ,
avoiding the race.)
.SS The timeout
The time structures involved are defined in
.I <sys/time.h>
and look like

.in +4n
.nf
struct timeval {
    long    tv_sec;         /* seconds */
    long    tv_usec;        /* microseconds */
};
.fi
.in

and

.in +4n
.nf
struct timespec {
    long    tv_sec;         /* seconds */
    long    tv_nsec;        /* nanoseconds */
};
.fi
.in

(However, see below on the POSIX.1-2001 versions.)
.PP
Some code calls
.BR select ()
with all three sets empty,
.I nfds
zero, and a non-NULL
.I timeout
as a fairly portable way to sleep with subsecond precision.
.PP
On Linux,
.BR select ()
modifies
.I timeout
to reflect the amount of time not slept; most other implementations
do not do this.
(POSIX.1-2001 permits either behavior.)
This causes problems both when Linux code which reads
.I timeout
is ported to other operating systems, and when code is ported to Linux
that reuses a \fIstruct timeval\fP for multiple
.BR select ()s
in a loop without reinitializing it.
Consider
.I timeout
to be undefined after
.BR select ()
returns.
.\" .PP - it is rumored that:
.\" On BSD, when a timeout occurs, the file descriptor bits are not changed.
.\" - it is certainly true that:
.\" Linux follows SUSv2 and sets the bit masks to zero upon a timeout.
.SH RETURN VALUE
On success,
.BR select ()
and
.BR pselect ()
return the number of file descriptors contained in the three returned
descriptor sets (that is, the total number of bits that are set in
.IR readfds ,
.IR writefds ,
.IR exceptfds )
which may be zero if the timeout expires before anything interesting happens.
On error, \-1 is returned, and
.I errno
is set to indicate the error;
the file descriptor sets are unmodified,
and
.I timeout
becomes undefined.
.SH ERRORS
.TP
.B EBADF
An invalid file descriptor was given in one of the sets.
(Perhaps a file descriptor that was already closed,
or one on which an error has occurred.)
.TP
.B EINTR
A signal was caught; see
.BR signal (7).
.TP
.B EINVAL
.I nfds
is negative or exceeds the
.BR RLIMIT_NOFILE
resource limit (see
.BR getrlimit (2)).
.TP
.B EINVAL
the value contained within
.I timeout
is invalid.
.TP
.B ENOMEM
unable to allocate memory for internal tables.
.SH VERSIONS
.BR pselect ()
was added to Linux in kernel 2.6.16.
Prior to this,
.BR pselect ()
was emulated in glibc (but see BUGS).
.SH CONFORMING TO
.BR select ()
conforms to POSIX.1-2001 and
4.4BSD
.RB ( select ()
first appeared in 4.2BSD).
Generally portable to/from
non-BSD systems supporting clones of the BSD socket layer (including
System\ V variants).
However, note that the System\ V variant typically
sets the timeout variable before exit, but the BSD variant does not.
.PP
.BR pselect ()
is defined in POSIX.1g, and in
POSIX.1-2001.
.SH NOTES
An
.I fd_set
is a fixed size buffer.
Executing
.BR FD_CLR ()
or
.BR FD_SET ()
with a value of
.I fd
that is negative or is equal to or larger than
.B FD_SETSIZE
will result
in undefined behavior.
Moreover, POSIX requires
.I fd
to be a valid file descriptor.

Concerning the types involved, the classical situation is that
the two fields of a
.I timeval
structure are typed as
.I long
(as shown above), and the structure is defined in
.IR <sys/time.h> .
The POSIX.1-2001 situation is

.in +4n
.nf
struct timeval {
    time_t         tv_sec;     /* seconds */
    suseconds_t    tv_usec;    /* microseconds */
};
.fi
.in

where the structure is defined in
.I <sys/select.h>
and the data types
.I time_t
and
.I suseconds_t
are defined in
.IR <sys/types.h> .
.LP
Concerning prototypes, the classical situation is that one should
include
.I <time.h>
for
.BR select ().
The POSIX.1-2001 situation is that one should include
.I <sys/select.h>
for
.BR select ()
and
.BR pselect ().

Under glibc 2.0,
.I <sys/select.h>
gives the wrong prototype for
.BR pselect ().
Under glibc 2.1 to 2.2.1, it gives
.BR pselect ()
when
.B _GNU_SOURCE
is defined.
Since glibc 2.2.2, the requirements are as shown in the SYNOPSIS.
.SS Multithreaded applications
If a file descriptor being monitored by
.BR select ()
is closed in another thread, the result is unspecified.
On some UNIX systems,
.BR select ()
unblocks and returns, with an indication that the file descriptor is ready
(a subsequent I/O operation will likely fail with an error,
unless another the file descriptor reopened between the time
.BR select ()
returned and the I/O operations was performed).
On Linux (and some other systems),
closing the file descriptor in another thread has no effect on
.BR select ().
In summary, any application that relies on a particular behavior
in this scenario must be considered buggy.
.\"
.SS C library/kernel ABI differences
The
.BR pselect ()
interface described in this page is implemented by glibc.
The underlying Linux system call is named
.BR pselect6 ().
This system call has somewhat different behavior from the glibc
wrapper function.

The Linux
.BR pselect6 ()
system call modifies its
.I timeout
argument.
However, the glibc wrapper function hides this behavior
by using a local variable for the timeout argument that
is passed to the system call.
Thus, the glibc
.BR pselect ()
function does not modify its
.I timeout
argument;
this is the behavior required by POSIX.1-2001.

The final argument of the
.BR pselect6 ()
system call is not a
.I "sigset_t\ *"
pointer, but is instead a structure of the form:
.in +4
.nf

struct {
    const sigset_t *ss;     /* Pointer to signal set */
    size_t          ss_len; /* Size (in bytes) of object pointed
                               to by 'ss' */
};

.fi
.in
This allows the system call to obtain both
a pointer to the signal set and its size,
while allowing for the fact that most architectures
support a maximum of 6 arguments to a system call.
.SH BUGS
Glibc 2.0 provided a version of
.BR pselect ()
that did not take a
.I sigmask
argument.

Starting with version 2.1, glibc provided an emulation of
.BR pselect ()
that was implemented using
.BR sigprocmask (2)
and
.BR select ().
This implementation remained vulnerable to the very race condition that
.BR pselect ()
was designed to prevent.
Modern versions of glibc use the (race-free)
.BR pselect ()
system call on kernels where it is provided.

On systems that lack
.BR pselect (),
reliable (and more portable) signal trapping can be achieved
using the self-pipe trick.
In this technique,
a signal handler writes a byte to a pipe whose other end
is monitored by
.BR select ()
in the main program.
(To avoid possibly blocking when writing to a pipe that may be full
or reading from a pipe that may be empty,
nonblocking I/O is used when reading from and writing to the pipe.)

Under Linux,
.BR select ()
may report a socket file descriptor as "ready for reading", while
nevertheless a subsequent read blocks.
This could for example
happen when data has arrived but upon examination has wrong
checksum and is discarded.
There may be other circumstances
in which a file descriptor is spuriously reported as ready.
.\" Stevens discusses a case where accept can block after select
.\" returns successfully because of an intervening RST from the client.
Thus it may be safer to use
.B O_NONBLOCK
on sockets that should not block.
.\" Maybe the kernel should have returned EIO in such a situation?

On Linux,
.BR select ()
also modifies
.I timeout
if the call is interrupted by a signal handler (i.e., the
.B EINTR
error return).
This is not permitted by POSIX.1-2001.
The Linux
.BR pselect ()
system call has the same behavior,
but the glibc wrapper hides this behavior by internally copying the
.I timeout
to a local variable and passing that variable to the system call.
.SH EXAMPLE
.nf
#include <stdio.h>
#include <stdlib.h>
#include <sys/time.h>
#include <sys/types.h>
#include <unistd.h>

int
main(void)
{
    fd_set rfds;
    struct timeval tv;
    int retval;

    /* Watch stdin (fd 0) to see when it has input. */
    FD_ZERO(&rfds);
    FD_SET(0, &rfds);

    /* Wait up to five seconds. */
    tv.tv_sec = 5;
    tv.tv_usec = 0;

    retval = select(1, &rfds, NULL, NULL, &tv);
    /* Don't rely on the value of tv now! */

    if (retval == \-1)
        perror("select()");
    else if (retval)
        printf("Data is available now.\\n");
        /* FD_ISSET(0, &rfds) will be true. */
    else
        printf("No data within five seconds.\\n");

    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR accept (2),
.BR connect (2),
.BR poll (2),
.BR read (2),
.BR recv (2),
.BR restart_syscall (2),
.BR send (2),
.BR sigprocmask (2),
.BR write (2),
.BR epoll (7),
.BR time (7)

For a tutorial with discussion and examples, see
.BR select_tut (2).
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" This manpage is copyright (C) 2001 Paul Sheer.
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" very minor changes, aeb
.\"
.\" Modified 5 June 2002, Michael Kerrisk <mtk.manpages@gmail.com>
.\" 2006-05-13, mtk, removed much material that is redundant with select.2
.\"             various other changes
.\" 2008-01-26, mtk, substantial changes and rewrites
.\"
.TH SELECT_TUT 2 2013-12-30 "Linux" "Linux Programmer's Manual"
.SH NAME
select, pselect, FD_CLR, FD_ISSET, FD_SET, FD_ZERO \-
synchronous I/O multiplexing
.SH SYNOPSIS
.nf
/* According to POSIX.1-2001 */
.br
.B #include <sys/select.h>
.sp
/* According to earlier standards */
.br
.B #include <sys/time.h>
.br
.B #include <sys/types.h>
.br
.B #include <unistd.h>
.sp
.BI "int select(int " nfds ", fd_set *" readfds ", fd_set *" writefds ,
.BI "           fd_set *" exceptfds ", struct timeval *" utimeout );
.sp
.BI "void FD_CLR(int " fd ", fd_set *" set );
.br
.BI "int  FD_ISSET(int " fd ", fd_set *" set );
.br
.BI "void FD_SET(int " fd ", fd_set *" set );
.br
.BI "void FD_ZERO(fd_set *" set );
.sp
.B #include <sys/select.h>
.sp
.BI "int pselect(int " nfds ", fd_set *" readfds ", fd_set *" writefds ,
.BI "            fd_set *" exceptfds ", const struct timespec *" ntimeout ,
.BI "            const sigset_t *" sigmask );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR pselect ():
_POSIX_C_SOURCE\ >=\ 200112L || _XOPEN_SOURCE\ >=\ 600
.SH DESCRIPTION
.BR select ()
(or
.BR pselect ())
is used to efficiently monitor multiple file descriptors,
to see if any of them is, or becomes, "ready";
that is, to see whether I/O becomes possible,
or an "exceptional condition" has occurred on any of the descriptors.

Its principal arguments are three "sets" of file descriptors:
\fIreadfds\fP, \fIwritefds\fP, and \fIexceptfds\fP.
Each set is declared as type
.IR fd_set ,
and its contents can be manipulated with the macros
.BR FD_CLR (),
.BR FD_ISSET (),
.BR FD_SET (),
and
.BR FD_ZERO ().
A newly declared set should first be cleared using
.BR FD_ZERO ().
.BR select ()
modifies the contents of the sets according to the rules
described below; after calling
.BR select ()
you can test if a file descriptor is still present in a set with the
.BR FD_ISSET ()
macro.
.BR FD_ISSET ()
returns nonzero if a specified file descriptor is present in a set
and zero if it is not.
.BR FD_CLR ()
removes a file descriptor from a set.
.SS Arguments
.TP
\fIreadfds\fP
This set is watched to see if data is available for reading from any of
its file descriptors.
After
.BR select ()
has returned, \fIreadfds\fP will be
cleared of all file descriptors except for those that
are immediately available for reading.
.TP
\fIwritefds\fP
This set is watched to see if there is space to write data to any of
its file descriptors.
After
.BR select ()
has returned, \fIwritefds\fP will be
cleared of all file descriptors except for those that
are immediately available for writing.
.TP
\fIexceptfds\fP
This set is watched for "exceptional conditions".
In practice, only one such exceptional condition is common:
the availability of \fIout-of-band\fP (OOB) data for reading
from a TCP socket.
See
.BR recv (2),
.BR send (2),
and
.BR tcp (7)
for more details about OOB data.
(One other less common case where
.BR select (2)
indicates an exceptional condition occurs with pseudoterminals
in packet mode; see
.BR tty_ioctl (4).)
After
.BR select ()
has returned,
\fIexceptfds\fP will be cleared of all file descriptors except for those
for which an exceptional condition has occurred.
.TP
\fInfds\fP
This is an integer one more than the maximum of any file descriptor in
any of the sets.
In other words, while adding file descriptors to each of the sets,
you must calculate the maximum integer value of all of them,
then increment this value by one, and then pass this as \fInfds\fP.
.TP
\fIutimeout\fP
This is the longest time
.BR select ()
may wait before returning, even if nothing interesting happened.
If this value is passed as NULL, then
.BR select ()
blocks indefinitely waiting for a file descriptor to become ready.
\fIutimeout\fP can be set to zero seconds, which causes
.BR select ()
to return immediately, with information about the readiness
of file descriptors at the time of the call.
The structure \fIstruct timeval\fP is defined as:
.IP
.in +4n
.nf
struct timeval {
    time_t tv_sec;    /* seconds */
    long tv_usec;     /* microseconds */
};
.fi
.in
.TP
\fIntimeout\fP
This argument for
.BR pselect ()
has the same meaning as
.IR utimeout ,
but
.I "struct timespec"
has nanosecond precision as follows:
.IP
.in +4n
.nf
struct timespec {
    long tv_sec;    /* seconds */
    long tv_nsec;   /* nanoseconds */
};
.fi
.in
.TP
\fIsigmask\fP
This argument holds a set of signals that the kernel should unblock
(i.e., remove from the signal mask of the calling thread),
while the caller is blocked inside the
.BR pselect ()
call (see
.BR sigaddset (3)
and
.BR sigprocmask (2)).
It may be NULL,
in which case the call does not modify the signal mask on
entry and exit to the function.
In this case,
.BR pselect ()
will then behave just like
.BR select ().
.SS Combining signal and data events
.BR pselect ()
is useful if you are waiting for a signal as well as
for file descriptor(s) to become ready for I/O.
Programs that receive signals
normally use the signal handler only to raise a global flag.
The global flag will indicate that the event must be processed
in the main loop of the program.
A signal will cause the
.BR select ()
(or
.BR pselect ())
call to return with \fIerrno\fP set to \fBEINTR\fP.
This behavior is essential so that signals can be processed
in the main loop of the program, otherwise
.BR select ()
would block indefinitely.
Now, somewhere
in the main loop will be a conditional to check the global flag.
So we must ask:
what if a signal arrives after the conditional, but before the
.BR select ()
call?
The answer is that
.BR select ()
would block indefinitely, even though an event is actually pending.
This race condition is solved by the
.BR pselect ()
call.
This call can be used to set the signal mask to a set of signals
that are to be received only within the
.BR pselect ()
call.
For instance, let us say that the event in question
was the exit of a child process.
Before the start of the main loop, we
would block \fBSIGCHLD\fP using
.BR sigprocmask (2).
Our
.BR pselect ()
call would enable
.B SIGCHLD
by using an empty signal mask.
Our program would look like:
.PP
.nf
static volatile sig_atomic_t got_SIGCHLD = 0;

static void
child_sig_handler(int sig)
{
    got_SIGCHLD = 1;
}

int
main(int argc, char *argv[])
{
    sigset_t sigmask, empty_mask;
    struct sigaction sa;
    fd_set readfds, writefds, exceptfds;
    int r;

    sigemptyset(&sigmask);
    sigaddset(&sigmask, SIGCHLD);
    if (sigprocmask(SIG_BLOCK, &sigmask, NULL) == \-1) {
        perror("sigprocmask");
        exit(EXIT_FAILURE);
    }

    sa.sa_flags = 0;
    sa.sa_handler = child_sig_handler;
    sigemptyset(&sa.sa_mask);
    if (sigaction(SIGCHLD, &sa, NULL) == \-1) {
        perror("sigaction");
        exit(EXIT_FAILURE);
    }

    sigemptyset(&empty_mask);

    for (;;) {          /* main loop */
        /* Initialize readfds, writefds, and exceptfds
           before the pselect() call. (Code omitted.) */

        r = pselect(nfds, &readfds, &writefds, &exceptfds,
                    NULL, &empty_mask);
        if (r == \-1 && errno != EINTR) {
            /* Handle error */
        }

        if (got_SIGCHLD) {
            got_SIGCHLD = 0;

            /* Handle signalled event here; e.g., wait() for all
               terminated children. (Code omitted.) */
        }

        /* main body of program */
    }
}
.fi
.SS Practical
So what is the point of
.BR select ()?
Can't I just read and write to my descriptors whenever I want?
The point of
.BR select ()
is that it watches
multiple descriptors at the same time and properly puts the process to
sleep if there is no activity.
UNIX programmers often find
themselves in a position where they have to handle I/O from more than one
file descriptor where the data flow may be intermittent.
If you were to merely create a sequence of
.BR read (2)
and
.BR write (2)
calls, you would
find that one of your calls may block waiting for data from/to a file
descriptor, while another file descriptor is unused though ready for I/O.
.BR select ()
efficiently copes with this situation.
.SS Select law
Many people who try to use
.BR select ()
come across behavior that is
difficult to understand and produces nonportable or borderline results.
For instance, the above program is carefully written not to
block at any point, even though it does not set its file descriptors to
nonblocking mode.
It is easy to introduce
subtle errors that will remove the advantage of using
.BR select (),
so here is a list of essentials to watch for when using
.BR select ().
.TP 4
1.
You should always try to use
.BR select ()
without a timeout.
Your program
should have nothing to do if there is no data available.
Code that
depends on timeouts is not usually portable and is difficult to debug.
.TP
2.
The value \fInfds\fP must be properly calculated for efficiency as
explained above.
.TP
3.
No file descriptor must be added to any set if you do not intend
to check its result after the
.BR select ()
call, and respond appropriately.
See next rule.
.TP
4.
After
.BR select ()
returns, all file descriptors in all sets
should be checked to see if they are ready.
.TP
5.
The functions
.BR read (2),
.BR recv (2),
.BR write (2),
and
.BR send (2)
do \fInot\fP necessarily read/write the full amount of data
that you have requested.
If they do read/write the full amount, it's
because you have a low traffic load and a fast stream.
This is not always going to be the case.
You should cope with the case of your
functions managing to send or receive only a single byte.
.TP
6.
Never read/write only in single bytes at a time unless you are really
sure that you have a small amount of data to process.
It is extremely
inefficient not to read/write as much data as you can buffer each time.
The buffers in the example below are 1024 bytes although they could
easily be made larger.
.TP
7.
The functions
.BR read (2),
.BR recv (2),
.BR write (2),
and
.BR send (2)
as well as the
.BR select ()
call can return \-1 with
.I errno
set to \fBEINTR\fP,
or with
.I errno
set to \fBEAGAIN\fP (\fBEWOULDBLOCK\fP).
These results must be properly managed (not done properly above).
If your program is not going to receive any signals, then
it is unlikely you will get \fBEINTR\fP.
If your program does not set nonblocking I/O,
you will not get \fBEAGAIN\fP.
.\" Nonetheless, you should still cope with these errors for completeness.
.TP
8.
Never call
.BR read (2),
.BR recv (2),
.BR write (2),
or
.BR send (2)
with a buffer length of zero.
.TP
9.
If the functions
.BR read (2),
.BR recv (2),
.BR write (2),
and
.BR send (2)
fail with errors other than those listed in \fB7.\fP,
or one of the input functions returns 0, indicating end of file,
then you should \fInot\fP pass that descriptor to
.BR select ()
again.
In the example below,
I close the descriptor immediately, and then set it to \-1
to prevent it being included in a set.
.TP
10.
The timeout value must be initialized with each new call to
.BR select (),
since some operating systems modify the structure.
.BR pselect ()
however does not modify its timeout structure.
.TP
11.
Since
.BR select ()
modifies its file descriptor sets,
if the call is being used in a loop,
then the sets must be reinitialized before each call.
.\" "I have heard" does not fill me with confidence, and doesn't
.\" belong in a man page, so I've commented this point out.
.\" .TP
.\" 11.
.\" I have heard that the Windows socket layer does not cope with OOB data
.\" properly.
.\" It also does not cope with
.\" .BR select ()
.\" calls when no file descriptors are set at all.
.\" Having no file descriptors set is a useful
.\" way to sleep the process with subsecond precision by using the timeout.
.\" (See further on.)
.SS Usleep emulation
On systems that do not have a
.BR usleep (3)
function, you can call
.BR select ()
with a finite timeout and no file descriptors as
follows:
.PP
.nf
    struct timeval tv;
    tv.tv_sec = 0;
    tv.tv_usec = 200000;  /* 0.2 seconds */
    select(0, NULL, NULL, NULL, &tv);
.fi
.PP
This is guaranteed to work only on UNIX systems, however.
.SH RETURN VALUE
On success,
.BR select ()
returns the total number of file descriptors
still present in the file descriptor sets.

If
.BR select ()
timed out, then the return value will be zero.
The file descriptors set should be all
empty (but may not be on some systems).

A return value of \-1 indicates an error, with \fIerrno\fP being
set appropriately.
In the case of an error, the contents of the returned sets and
the \fIstruct timeout\fP contents are undefined and should not be used.
.BR pselect ()
however never modifies \fIntimeout\fP.
.SH NOTES
Generally speaking,
all operating systems that support sockets also support
.BR select ().
.BR select ()
can be used to solve
many problems in a portable and efficient way that naive programmers try
to solve in a more complicated manner using
threads, forking, IPCs, signals, memory sharing, and so on.
.PP
The
.BR poll (2)
system call has the same functionality as
.BR select (),
and is somewhat more efficient when monitoring sparse
file descriptor sets.
It is nowadays widely available, but historically was less portable than
.BR select ().
.PP
The Linux-specific
.BR epoll (7)
API provides an interface that is more efficient than
.BR select (2)
and
.BR poll (2)
when monitoring large numbers of file descriptors.
.SH EXAMPLE
Here is an example that better demonstrates the true utility of
.BR select ().
The listing below is a TCP forwarding program that forwards
from one TCP port to another.
.PP
.nf
#include <stdlib.h>
#include <stdio.h>
#include <unistd.h>
#include <sys/time.h>
#include <sys/types.h>
#include <string.h>
#include <signal.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <errno.h>

static int forward_port;

#undef max
#define max(x,y) ((x) > (y) ? (x) : (y))

static int
listen_socket(int listen_port)
{
    struct sockaddr_in a;
    int s;
    int yes;

    s = socket(AF_INET, SOCK_STREAM, 0);
    if (s == \-1) {
        perror("socket");
        return \-1;
    }
    yes = 1;
    if (setsockopt(s, SOL_SOCKET, SO_REUSEADDR,
            &yes, sizeof(yes)) == \-1) {
        perror("setsockopt");
        close(s);
        return \-1;
    }
    memset(&a, 0, sizeof(a));
    a.sin_port = htons(listen_port);
    a.sin_family = AF_INET;
    if (bind(s, (struct sockaddr *) &a, sizeof(a)) == \-1) {
        perror("bind");
        close(s);
        return \-1;
    }
    printf("accepting connections on port %d\\n", listen_port);
    listen(s, 10);
    return s;
}

static int
connect_socket(int connect_port, char *address)
{
    struct sockaddr_in a;
    int s;

    s = socket(AF_INET, SOCK_STREAM, 0);
    if (s == \-1) {
        perror("socket");
        close(s);
        return \-1;
    }

    memset(&a, 0, sizeof(a));
    a.sin_port = htons(connect_port);
    a.sin_family = AF_INET;

    if (!inet_aton(address, (struct in_addr *) &a.sin_addr.s_addr)) {
        perror("bad IP address format");
        close(s);
        return \-1;
    }

    if (connect(s, (struct sockaddr *) &a, sizeof(a)) == \-1) {
        perror("connect()");
        shutdown(s, SHUT_RDWR);
        close(s);
        return \-1;
    }
    return s;
}

#define SHUT_FD1 do {                                \\
                     if (fd1 >= 0) {                 \\
                         shutdown(fd1, SHUT_RDWR);   \\
                         close(fd1);                 \\
                         fd1 = \-1;                   \\
                     }                               \\
                 } while (0)

#define SHUT_FD2 do {                                \\
                     if (fd2 >= 0) {                 \\
                         shutdown(fd2, SHUT_RDWR);   \\
                         close(fd2);                 \\
                         fd2 = \-1;                   \\
                     }                               \\
                 } while (0)

#define BUF_SIZE 1024

int
main(int argc, char *argv[])
{
    int h;
    int fd1 = \-1, fd2 = \-1;
    char buf1[BUF_SIZE], buf2[BUF_SIZE];
    int buf1_avail, buf1_written;
    int buf2_avail, buf2_written;

    if (argc != 4) {
        fprintf(stderr, "Usage\\n\\tfwd <listen\-port> "
                 "<forward\-to\-port> <forward\-to\-ip\-address>\\n");
        exit(EXIT_FAILURE);
    }

    signal(SIGPIPE, SIG_IGN);

    forward_port = atoi(argv[2]);

    h = listen_socket(atoi(argv[1]));
    if (h == \-1)
        exit(EXIT_FAILURE);

    for (;;) {
        int r, nfds = 0;
        fd_set rd, wr, er;

        FD_ZERO(&rd);
        FD_ZERO(&wr);
        FD_ZERO(&er);
        FD_SET(h, &rd);
        nfds = max(nfds, h);
        if (fd1 > 0 && buf1_avail < BUF_SIZE) {
            FD_SET(fd1, &rd);
            nfds = max(nfds, fd1);
        }
        if (fd2 > 0 && buf2_avail < BUF_SIZE) {
            FD_SET(fd2, &rd);
            nfds = max(nfds, fd2);
        }
        if (fd1 > 0 && buf2_avail \- buf2_written > 0) {
            FD_SET(fd1, &wr);
            nfds = max(nfds, fd1);
        }
        if (fd2 > 0 && buf1_avail \- buf1_written > 0) {
            FD_SET(fd2, &wr);
            nfds = max(nfds, fd2);
        }
        if (fd1 > 0) {
            FD_SET(fd1, &er);
            nfds = max(nfds, fd1);
        }
        if (fd2 > 0) {
            FD_SET(fd2, &er);
            nfds = max(nfds, fd2);
        }

        r = select(nfds + 1, &rd, &wr, &er, NULL);

        if (r == \-1 && errno == EINTR)
            continue;

        if (r == \-1) {
            perror("select()");
            exit(EXIT_FAILURE);
        }

        if (FD_ISSET(h, &rd)) {
            unsigned int l;
            struct sockaddr_in client_address;

            memset(&client_address, 0, l = sizeof(client_address));
            r = accept(h, (struct sockaddr *) &client_address, &l);
            if (r == \-1) {
                perror("accept()");
            } else {
                SHUT_FD1;
                SHUT_FD2;
                buf1_avail = buf1_written = 0;
                buf2_avail = buf2_written = 0;
                fd1 = r;
                fd2 = connect_socket(forward_port, argv[3]);
                if (fd2 == \-1)
                    SHUT_FD1;
                else
                    printf("connect from %s\\n",
                            inet_ntoa(client_address.sin_addr));
            }
        }

        /* NB: read oob data before normal reads */

        if (fd1 > 0)
            if (FD_ISSET(fd1, &er)) {
                char c;

                r = recv(fd1, &c, 1, MSG_OOB);
                if (r < 1)
                    SHUT_FD1;
                else
                    send(fd2, &c, 1, MSG_OOB);
            }
        if (fd2 > 0)
            if (FD_ISSET(fd2, &er)) {
                char c;

                r = recv(fd2, &c, 1, MSG_OOB);
                if (r < 1)
                    SHUT_FD2;
                else
                    send(fd1, &c, 1, MSG_OOB);
            }
        if (fd1 > 0)
            if (FD_ISSET(fd1, &rd)) {
                r = read(fd1, buf1 + buf1_avail,
                          BUF_SIZE \- buf1_avail);
                if (r < 1)
                    SHUT_FD1;
                else
                    buf1_avail += r;
            }
        if (fd2 > 0)
            if (FD_ISSET(fd2, &rd)) {
                r = read(fd2, buf2 + buf2_avail,
                          BUF_SIZE \- buf2_avail);
                if (r < 1)
                    SHUT_FD2;
                else
                    buf2_avail += r;
            }
        if (fd1 > 0)
            if (FD_ISSET(fd1, &wr)) {
                r = write(fd1, buf2 + buf2_written,
                           buf2_avail \- buf2_written);
                if (r < 1)
                    SHUT_FD1;
                else
                    buf2_written += r;
            }
        if (fd2 > 0)
            if (FD_ISSET(fd2, &wr)) {
                r = write(fd2, buf1 + buf1_written,
                           buf1_avail \- buf1_written);
                if (r < 1)
                    SHUT_FD2;
                else
                    buf1_written += r;
            }

        /* check if write data has caught read data */

        if (buf1_written == buf1_avail)
            buf1_written = buf1_avail = 0;
        if (buf2_written == buf2_avail)
            buf2_written = buf2_avail = 0;

        /* one side has closed the connection, keep
           writing to the other side until empty */

        if (fd1 < 0 && buf1_avail \- buf1_written == 0)
            SHUT_FD2;
        if (fd2 < 0 && buf2_avail \- buf2_written == 0)
            SHUT_FD1;
    }
    exit(EXIT_SUCCESS);
}
.fi
.PP
The above program properly forwards most kinds of TCP connections
including OOB signal data transmitted by \fBtelnet\fP servers.
It handles the tricky problem of having data flow in both directions
simultaneously.
You might think it more efficient to use a
.BR fork (2)
call and devote a thread to each stream.
This becomes more tricky than you might suspect.
Another idea is to set nonblocking I/O using
.BR fcntl (2).
This also has its problems because you end up using
inefficient timeouts.

The program does not handle more than one simultaneous connection at a
time, although it could easily be extended to do this with a linked list
of buffers\(emone for each connection.
At the moment, new
connections cause the current connection to be dropped.
.SH SEE ALSO
.BR accept (2),
.BR connect (2),
.BR ioctl (2),
.BR poll (2),
.BR read (2),
.BR recv (2),
.BR select (2),
.BR send (2),
.BR sigprocmask (2),
.BR write (2),
.BR sigaddset (3),
.BR sigdelset (3),
.BR sigemptyset (3),
.BR sigfillset (3),
.BR sigismember (3),
.BR epoll (7)
.\" .SH AUTHORS
.\" This man page was written by Paul Sheer.
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 Giorgio Ciucci (giorgio@crcc.it)
.\" and Copyright 2004, 2005 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified Tue Oct 22 17:53:56 1996 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified Fri Jun 19 10:59:15 1998 by Andries Brouwer <aeb@cwi.nl>
.\" Modified Sun Feb 18 01:59:29 2001 by Andries Brouwer <aeb@cwi.nl>
.\" Modified 20 Dec 2001, Michael Kerrisk <mtk.manpages@gmail.com>
.\" Modified 21 Dec 2001, aeb
.\" Modified 27 May 2004, Michael Kerrisk <mtk.manpages@gmail.com>
.\"     Added notes on CAP_IPC_OWNER requirement
.\" Modified 17 Jun 2004, Michael Kerrisk <mtk.manpages@gmail.com>
.\"     Added notes on CAP_SYS_ADMIN requirement for IPC_SET and IPC_RMID
.\" Modified, 11 Nov 2004, Michael Kerrisk <mtk.manpages@gmail.com>
.\"	Language and formatting clean-ups
.\"	Rewrote semun text
.\"	Added semid_ds and ipc_perm structure definitions
.\" 2005-08-02, mtk: Added IPC_INFO, SEM_INFO, SEM_STAT descriptions.
.\"
.TH SEMCTL 2 2013-06-03 "Linux" "Linux Programmer's Manual"
.SH NAME
semctl \- System V semaphore control operations
.SH SYNOPSIS
.nf
.B #include <sys/types.h>
.B #include <sys/ipc.h>
.B #include <sys/sem.h>
.sp
.BI "int semctl(int " semid ", int " semnum ", int " cmd ", ...);"
.fi
.SH DESCRIPTION
.BR semctl ()
performs the control operation specified by
.I cmd
on the System\ V semaphore set identified by
.IR semid ,
or on the
.IR semnum -th
semaphore of that set.
(The semaphores in a set are numbered starting at 0.)
.PP
This function has three or four arguments, depending on
.IR cmd .
When there are four, the fourth has the type
.IR "union semun" .
The \fIcalling program\fP must define this union as follows:

.nf
.in +4n
union semun {
    int              val;    /* Value for SETVAL */
    struct semid_ds *buf;    /* Buffer for IPC_STAT, IPC_SET */
    unsigned short  *array;  /* Array for GETALL, SETALL */
    struct seminfo  *__buf;  /* Buffer for IPC_INFO
                                (Linux-specific) */
};
.in
.fi
.PP
The
.I semid_ds
data structure is defined in \fI<sys/sem.h>\fP as follows:
.nf
.in +4n

struct semid_ds {
    struct ipc_perm sem_perm;  /* Ownership and permissions */
    time_t          sem_otime; /* Last semop time */
    time_t          sem_ctime; /* Last change time */
    unsigned long   sem_nsems; /* No. of semaphores in set */
};
.in
.fi
.PP
The
.I ipc_perm
structure is defined as follows
(the highlighted fields are settable using
.BR IPC_SET ):
.PP
.nf
.in +4n
struct ipc_perm {
    key_t          __key; /* Key supplied to semget(2) */
    uid_t          \fBuid\fP;   /* Effective UID of owner */
    gid_t          \fBgid\fP;   /* Effective GID of owner */
    uid_t          cuid;  /* Effective UID of creator */
    gid_t          cgid;  /* Effective GID of creator */
    unsigned short \fBmode\fP;  /* Permissions */
    unsigned short __seq; /* Sequence number */
};
.in
.fi
.PP
Valid values for
.I cmd
are:
.TP 10
.B IPC_STAT
Copy information from the kernel data structure associated with
.I semid
into the
.I semid_ds
structure pointed to by
.IR arg.buf .
The argument
.I semnum
is ignored.
The calling process must have read permission on the semaphore set.
.TP
.B IPC_SET
Write the values of some members of the
.I semid_ds
structure pointed to by
.I arg.buf
to the kernel data structure associated with this semaphore set,
updating also its
.I sem_ctime
member.
The following members of the structure are updated:
.IR sem_perm.uid ,
.IR sem_perm.gid ,
and (the least significant 9 bits of)
.IR sem_perm.mode .
The effective UID of the calling process must match the owner
.RI ( sem_perm.uid )
or creator
.RI ( sem_perm.cuid )
of the semaphore set, or the caller must be privileged.
The argument
.I semnum
is ignored.
.TP
.B IPC_RMID
Immediately remove the semaphore set,
awakening all processes blocked in
.BR semop (2)
calls on the set (with an error return and
.I errno
set to
.BR EIDRM ).
The effective user ID of the calling process must
match the creator or owner of the semaphore set,
or the caller must be privileged.
The argument
.I semnum
is ignored.
.TP
.BR IPC_INFO " (Linux-specific)"
Return information about system-wide semaphore limits and
parameters in the structure pointed to by
.IR arg.__buf .
This structure is of type
.IR seminfo ,
defined in
.I <sys/sem.h>
if the
.B _GNU_SOURCE
feature test macro is defined:
.nf
.in +4n

struct  seminfo {
    int semmap;  /* Number of entries in semaphore
                    map; unused within kernel */
    int semmni;  /* Maximum number of semaphore sets */
    int semmns;  /* Maximum number of semaphores in all
                    semaphore sets */
    int semmnu;  /* System-wide maximum number of undo
                    structures; unused within kernel */
    int semmsl;  /* Maximum number of semaphores in a
                    set */
    int semopm;  /* Maximum number of operations for
                    semop(2) */
    int semume;  /* Maximum number of undo entries per
                    process; unused within kernel */
    int semusz;  /* Size of struct sem_undo */
    int semvmx;  /* Maximum semaphore value */
    int semaem;  /* Max. value that can be recorded for
                    semaphore adjustment (SEM_UNDO) */
};

.in
.fi
The
.IR semmsl ,
.IR semmns ,
.IR semopm ,
and
.I semmni
settings can be changed via
.IR /proc/sys/kernel/sem ;
see
.BR proc (5)
for details.
.TP
.BR SEM_INFO " (Linux-specific)"
Return a
.I seminfo
structure containing the same information as for
.BR IPC_INFO ,
except that the following fields are returned with information
about system resources consumed by semaphores: the
.I semusz
field returns the number of semaphore sets that currently exist
on the system; and the
.I semaem
field returns the total number of semaphores in all semaphore sets
on the system.
.TP
.BR SEM_STAT " (Linux-specific)"
Return a
.I semid_ds
structure as for
.BR IPC_STAT .
However, the
.I semid
argument is not a semaphore identifier, but instead an index into
the kernel's internal array that maintains information about
all semaphore sets on the system.
.TP
.B GETALL
Return
.B semval
(i.e., the current value)
for all semaphores of the set into
.IR arg.array .
The argument
.I semnum
is ignored.
The calling process must have read permission on the semaphore set.
.TP
.B GETNCNT
Return the value of
.B semncnt
for the
.IR semnum \-th
semaphore of the set
(i.e., the number of processes waiting for an increase of
.B semval
for the
.IR semnum \-th
semaphore of the set).
The calling process must have read permission on the semaphore set.
.TP
.B GETPID
Return the value of
.B sempid
for the
.IR semnum \-th
semaphore of the set
(i.e., the PID of the process that executed the last
.BR semop (2)
call for the
.IR semnum \-th
semaphore of the set).
The calling process must have read permission on the semaphore set.
.TP
.B GETVAL
Return the value of
.B semval
for the
.IR semnum \-th
semaphore of the set.
The calling process must have read permission on the semaphore set.
.TP
.B GETZCNT
Return the value of
.B semzcnt
for the
.IR semnum \-th
semaphore of the set
(i.e., the number of processes waiting for
.B semval
of the
.IR semnum \-th
semaphore of the set to become 0).
The calling process must have read permission on the semaphore set.
.TP
.B SETALL
Set
.B semval
for all semaphores of the set using
.IR arg.array ,
updating also the
.I sem_ctime
member of the
.I semid_ds
structure associated with the set.
Undo entries (see
.BR semop (2))
are cleared for altered semaphores in all processes.
If the changes to semaphore values would permit blocked
.BR semop (2)
calls in other processes to proceed, then those processes are woken up.
The argument
.I semnum
is ignored.
The calling process must have alter (write) permission on
the semaphore set.
.TP
.B SETVAL
Set the value of
.B semval
to
.I arg.val
for the
.IR semnum \-th
semaphore of the set, updating also the
.I sem_ctime
member of the
.I semid_ds
structure associated with the set.
Undo entries are cleared for altered semaphores in all processes.
If the changes to semaphore values would permit blocked
.BR semop (2)
calls in other processes to proceed, then those processes are woken up.
The calling process must have alter permission on the semaphore set.
.SH RETURN VALUE
On failure,
.BR semctl ()
returns \-1
with
.I errno
indicating the error.

Otherwise, the system call returns a nonnegative value depending on
.I cmd
as follows:
.TP 10
.B GETNCNT
the value of
.BR semncnt .
.TP
.B GETPID
the value of
.BR sempid .
.TP
.B GETVAL
the value of
.BR semval .
.TP
.B GETZCNT
the value of
.BR semzcnt .
.TP
.B IPC_INFO
the index of the highest used entry in the
kernel's internal array recording information about all
semaphore sets.
(This information can be used with repeated
.B SEM_STAT
operations to obtain information about all semaphore sets on the system.)
.TP
.B SEM_INFO
as for
.BR IPC_INFO .
.TP
.B SEM_STAT
the identifier of the semaphore set whose index was given in
.IR semid .
.LP
All other
.I cmd
values return 0 on success.
.SH ERRORS
On failure,
.I errno
will be set to one of the following:
.TP
.B EACCES
The argument
.I cmd
has one of the values
.BR GETALL ,
.BR GETPID ,
.BR GETVAL ,
.BR GETNCNT ,
.BR GETZCNT ,
.BR IPC_STAT ,
.BR SEM_STAT ,
.BR SETALL ,
or
.B SETVAL
and the calling process does not have the required
permissions on the semaphore set and does not have the
.B CAP_IPC_OWNER
capability.
.TP
.B EFAULT
The address pointed to by
.I arg.buf
or
.I arg.array
isn't accessible.
.TP
.B EIDRM
The semaphore set was removed.
.TP
.B EINVAL
Invalid value for
.I cmd
or
.IR semid .
Or: for a
.B SEM_STAT
operation, the index value specified in
.I semid
referred to an array slot that is currently unused.
.TP
.B EPERM
The argument
.I cmd
has the value
.B IPC_SET
or
.B IPC_RMID
but the effective user ID of the calling process is not the creator
(as found in
.IR sem_perm.cuid )
or the owner
(as found in
.IR sem_perm.uid )
of the semaphore set,
and the process does not have the
.B CAP_SYS_ADMIN
capability.
.TP
.B ERANGE
The argument
.I cmd
has the value
.B SETALL
or
.B SETVAL
and the value to which
.B semval
is to be set (for some semaphore of the set) is less than 0
or greater than the implementation limit
.BR SEMVMX .
.SH CONFORMING TO
SVr4, POSIX.1-2001.
.\" SVr4 documents more error conditions EINVAL and EOVERFLOW.

POSIX.1-2001 specifies the
.I sem_nsems
field of the
.I semid_ds
structure as having the type
.IR "unsigned\ short" ,
and the field is so defined on most other systems.
It was also so defined on Linux 2.2 and earlier,
but, since Linux 2.4, the field has the type
.IR "unsigned\ long" .
.SH NOTES
The inclusion of
.I <sys/types.h>
and
.I <sys/ipc.h>
isn't required on Linux or by any version of POSIX.
However,
some old implementations required the inclusion of these header files,
and the SVID also documented their inclusion.
Applications intended to be portable to such old systems may need
to include these header files.
.\" Like Linux, the FreeBSD man pages still document
.\" the inclusion of these header files.

The
.BR IPC_INFO ,
.B SEM_STAT
and
.B SEM_INFO
operations are used by the
.BR ipcs (1)
program to provide information on allocated resources.
In the future these may modified or moved to a
.I /proc
filesystem interface.
.LP
Various fields in a \fIstruct semid_ds\fP were typed as
.I short
under Linux 2.2
and have become
.I long
under Linux 2.4.
To take advantage of this,
a recompilation under glibc-2.1.91 or later should suffice.
(The kernel distinguishes old and new calls by an
.B IPC_64
flag in
.IR cmd .)
.PP
In some earlier versions of glibc, the
.I semun
union was defined in \fI<sys/sem.h>\fP, but POSIX.1-2001 requires
that the caller define this union.
On versions of glibc where this union is \fInot\fP defined,
the macro
.B _SEM_SEMUN_UNDEFINED
is defined in \fI<sys/sem.h>\fP.
.PP
The following system limit on semaphore sets affects a
.BR semctl ()
call:
.TP
.B SEMVMX
Maximum value for
.BR semval :
implementation dependent (32767).
.LP
For greater portability, it is best to always call
.BR semctl ()
with four arguments.
.SH SEE ALSO
.BR ipc (2),
.BR semget (2),
.BR semop (2),
.BR capabilities (7),
.BR sem_overview (7),
.BR svipc (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 Giorgio Ciucci (giorgio@crcc.it)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified Tue Oct 22 17:54:56 1996 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified 1 Jan 2002, Martin Schulze <joey@infodrom.org>
.\" Modified 4 Jan 2002, Michael Kerrisk <mtk.manpages@gmail.com>
.\" Modified, 27 May 2004, Michael Kerrisk <mtk.manpages@gmail.com>
.\"     Added notes on capability requirements
.\" Modified, 11 Nov 2004, Michael Kerrisk <mtk.manpages@gmail.com>
.\"	Language and formatting clean-ups
.\"	Added notes on /proc files
.\"	Rewrote BUGS note about semget()'s failure to initialize
.\"		semaphore values
.\"
.TH SEMGET 2 2015-02-21 "Linux" "Linux Programmer's Manual"
.SH NAME
semget \- get a System V semaphore set identifier
.SH SYNOPSIS
.nf
.B #include <sys/types.h>
.B #include <sys/ipc.h>
.B #include <sys/sem.h>
.fi
.sp
.BI "int semget(key_t " key ,
.BI "int " nsems ,
.BI "int " semflg );
.SH DESCRIPTION
The
.BR semget ()
system call returns the System\ V semaphore set identifier
associated with the argument
.IR key .
A new set of
.I nsems
semaphores is created if
.I key
has the value
.B IPC_PRIVATE
or if no existing semaphore set is associated with
.I key
and
.B IPC_CREAT
is specified in
.IR semflg .
.PP
If
.I semflg
specifies both
.B IPC_CREAT
and
.B IPC_EXCL
and a semaphore set already exists for
.IR key ,
then
.BR semget ()
fails with
.I errno
set to
.BR EEXIST .
(This is analogous to the effect of the combination
.B O_CREAT | O_EXCL
for
.BR open (2).)
.PP
Upon creation, the least significant 9 bits of the argument
.I semflg
define the permissions (for owner, group and others)
for the semaphore set.
These bits have the same format, and the same
meaning, as the
.I mode
argument of
.BR open (2)
(though the execute permissions are
not meaningful for semaphores, and write permissions mean permission
to alter semaphore values).
.PP
When creating a new semaphore set,
.BR semget ()
initializes the set's associated data structure,
.I semid_ds
(see
.BR semctl (2)),
as follows:
.IP
.I sem_perm.cuid
and
.I sem_perm.uid
are set to the effective user ID of the calling process.
.IP
.I sem_perm.cgid
and
.I sem_perm.gid
are set to the effective group ID of the calling process.
.IP
The least significant 9 bits of
.I sem_perm.mode
are set to the least significant 9 bits of
.IR semflg .
.IP
.I sem_nsems
is set to the value of
.IR nsems .
.IP
.I sem_otime
is set to 0.
.IP
.I sem_ctime
is set to the current time.
.PP
The argument
.I nsems
can be 0
(a don't care)
when a semaphore set is not being created.
Otherwise,
.I nsems
must be greater than 0
and less than or equal to the maximum number of semaphores per semaphore set
.RB ( SEMMSL ).
.PP
If the semaphore set already exists, the permissions are
verified.
.\" and a check is made to see if it is marked for destruction.
.SH RETURN VALUE
If successful, the return value will be the semaphore set identifier
(a nonnegative integer), otherwise, \-1
is returned, with
.I errno
indicating the error.
.SH ERRORS
On failure,
.I errno
will be set to one of the following:
.TP
.B EACCES
A semaphore set exists for
.IR key ,
but the calling process does not have permission to access the set,
and does not have the
.B CAP_IPC_OWNER
capability.
.TP
.B EEXIST
.B IPC_CREAT
and
.BR IPC_EXCL
were specified in
.IR semflg ,
but a semaphore set already exists for
.IR key .
.\" .TP
.\" .B EIDRM
.\" The semaphore set is marked to be deleted.
.TP
.B EINVAL
.I nsems
is less than 0 or greater than the limit on the number
of semaphores per semaphore set
.RB ( SEMMSL ).
.TP
.B EINVAL
A semaphore set corresponding to
.I key
already exists, but
.I nsems
is larger than the number of semaphores in that set.
.TP
.B ENOENT
No semaphore set exists for
.I key
and
.I semflg
did not specify
.BR IPC_CREAT .
.TP
.B ENOMEM
A semaphore set has to be created but the system does not have
enough memory for the new data structure.
.TP
.B ENOSPC
A semaphore set has to be created but the system limit for the maximum
number of semaphore sets
.RB ( SEMMNI ),
or the system wide maximum number of semaphores
.RB ( SEMMNS ),
would be exceeded.
.SH CONFORMING TO
SVr4, POSIX.1-2001.
.\" SVr4 documents additional error conditions EFBIG, E2BIG, EAGAIN,
.\" ERANGE, EFAULT.
.SH NOTES
The inclusion of
.I <sys/types.h>
and
.I <sys/ipc.h>
isn't required on Linux or by any version of POSIX.
However,
some old implementations required the inclusion of these header files,
and the SVID also documented their inclusion.
Applications intended to be portable to such old systems may need
to include these header files.
.\" Like Linux, the FreeBSD man pages still document
.\" the inclusion of these header files.

.B IPC_PRIVATE
isn't a flag field but a
.I key_t
type.
If this special value is used for
.IR key ,
the system call ignores all but the least significant 9 bits of
.I semflg
and creates a new semaphore set (on success).
.\"
.SS Semaphore initialization
The values of the semaphores in a newly created set are indeterminate.
(POSIX.1-2001 and POSIX.1-2008 are explicit on this point,
although POSIX.1-2008 notes that a future version of the standard
may require an implementation to initialize the semaphores to 0.)
Although Linux, like many other implementations,
initializes the semaphore values to 0,
a portable application cannot rely on this:
it should explicitly initialize the semaphores to the desired values.
.\" In truth, every one of the many implementations that I've tested sets
.\" the values to zero, but I suppose there is/was some obscure
.\" implementation out there that does not.

Initialization can be done using
.BR semctl (2)
.B SETVAL
or
.B SETALL
operation.
Where multiple peers do not know who will be the first to
initialize the set, checking for a nonzero
.I sem_otime
in the associated data structure retrieved by a
.BR semctl (2)
.B IPC_STAT
operation can be used to avoid races.
.\"
.SS Semaphore limits
The following limits on semaphore set resources affect the
.BR semget ()
call:
.TP
.B SEMMNI
System-wide limit on the number of semaphore sets.
On Linux systems before version 3.19,
the default value for this limit was 128.
Since Linux 3.19,
.\" commit e843e7d2c88b7db107a86bd2c7145dc715c058f4
the default value is 32,000.
On Linux, this limit can be read and modified via the fourth field of
.IR /proc/sys/kernel/sem .
.\" This /proc file is not available in Linux 2.2 and earlier -- MTK
.TP
.B SEMMSL
Maximum number of semaphores per semaphore ID.
On Linux systems before version 3.19,
the default value for this limit was 250.
Since Linux 3.19,
.\" commit e843e7d2c88b7db107a86bd2c7145dc715c058f4
the default value is 32,000.
On Linux, this limit can be read and modified via the first field of
.IR /proc/sys/kernel/sem .
.TP
.B SEMMNS
System-wide limit on the number of semaphores: policy dependent
(on Linux, this limit can be read and modified via the second field of
.IR /proc/sys/kernel/sem ).
Note that the number of semaphores system-wide
is also limited by the product of
.B SEMMSL
and
.BR SEMMNI .
.SH BUGS
The name choice
.B IPC_PRIVATE
was perhaps unfortunate,
.B IPC_NEW
would more clearly show its function.
.SH SEE ALSO
.BR semctl (2),
.BR semop (2),
.BR ftok (3),
.BR capabilities (7),
.BR sem_overview (7),
.BR svipc (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 Giorgio Ciucci (giorgio@crcc.it)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified 1996-10-22, Eric S. Raymond <esr@thyrsus.com>
.\" Modified 2002-01-08, Michael Kerrisk <mtk.manpages@gmail.com>
.\" Modified 2003-04-28, Ernie Petrides <petrides@redhat.com>
.\" Modified 2004-05-27, Michael Kerrisk <mtk.manpages@gmail.com>
.\" Modified, 11 Nov 2004, Michael Kerrisk <mtk.manpages@gmail.com>
.\"	Language and formatting clean-ups
.\"	Added notes on /proc files
.\" 2005-04-08, mtk, Noted kernel version numbers for semtimedop()
.\" 2007-07-09, mtk, Added an EXAMPLE code segment.
.\"
.TH SEMOP 2 2015-02-21 "Linux" "Linux Programmer's Manual"
.SH NAME
semop, semtimedop \- System V semaphore operations
.SH SYNOPSIS
.nf
.B #include <sys/types.h>
.B #include <sys/ipc.h>
.B #include <sys/sem.h>
.sp
.BI "int semop(int " semid ", struct sembuf *" sops ", size_t " nsops );
.sp
.BI "int semtimedop(int " semid ", struct sembuf *" sops ", size_t " nsops ,
.BI "               const struct timespec *" timeout );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR semtimedop ():
_GNU_SOURCE
.SH DESCRIPTION
Each semaphore in a System\ V semaphore set
has the following associated values:
.sp
.in +4n
.nf
unsigned short  semval;   /* semaphore value */
unsigned short  semzcnt;  /* # waiting for zero */
unsigned short  semncnt;  /* # waiting for increase */
pid_t           sempid;   /* ID of process that did last op */
.sp
.in -4n
.fi
.BR semop ()
performs operations on selected semaphores in the set indicated by
.IR semid .
Each of the
.I nsops
elements in the array pointed to by
.I sops
is a structure that
specifies an operation to be performed on a single semaphore.
The elements of this structure are of type
.IR "struct sembuf" ,
containing the following members:
.sp
.in +4n
.nf
unsigned short sem_num;  /* semaphore number */
short          sem_op;   /* semaphore operation */
short          sem_flg;  /* operation flags */
.sp
.in -4n
.fi
Flags recognized in
.I sem_flg
are
.B IPC_NOWAIT
and
.BR SEM_UNDO .
If an operation specifies
.BR SEM_UNDO ,
it will be automatically undone when the process terminates.
.PP
The set of operations contained in
.I sops
is performed in
.IR "array order" ,
and
.IR atomically ,
that is, the operations are performed either as a complete unit,
or not at all.
The behavior of the system call if not all operations can be
performed immediately depends on the presence of the
.B IPC_NOWAIT
flag in the individual
.I sem_flg
fields, as noted below.

Each operation is performed on the
.IR sem_num \-th
semaphore of the semaphore set, where the first semaphore of the set
is numbered 0.
There are three types of operation, distinguished by the value of
.IR sem_op .
.PP
If
.I sem_op
is a positive integer, the operation adds this value to
the semaphore value
.RI  ( semval ).
Furthermore, if
.B SEM_UNDO
is specified for this operation, the system subtracts the value
.I sem_op
from the semaphore adjustment
.RI ( semadj )
value for this semaphore.
This operation can always proceed\(emit never forces a thread to wait.
The calling process must have alter permission on the semaphore set.
.PP
If
.I sem_op
is zero, the process must have read permission on the semaphore
set.
This is a "wait-for-zero" operation: if
.I semval
is zero, the operation can immediately proceed.
Otherwise, if
.B IPC_NOWAIT
is specified in
.IR sem_flg ,
.BR semop ()
fails with
.I errno
set to
.B EAGAIN
(and none of the operations in
.I sops
is performed).
Otherwise,
.I semzcnt
(the count of threads waiting until this semaphore's value becomes zero)
is incremented by one and the thread sleeps until
one of the following occurs:
.IP \(bu 3
.I semval
becomes 0, at which time the value of
.I semzcnt
is decremented.
.IP \(bu
The semaphore set
is removed:
.BR semop ()
fails, with
.I errno
set to
.BR EIDRM .
.IP \(bu
The calling thread catches a signal:
the value of
.I semzcnt
is decremented and
.BR semop ()
fails, with
.I errno
set to
.BR EINTR .
.PP
If
.I sem_op
is less than zero, the process must have alter permission on the
semaphore set.
If
.I semval
is greater than or equal to the absolute value of
.IR sem_op ,
the operation can proceed immediately:
the absolute value of
.I sem_op
is subtracted from
.IR semval ,
and, if
.B SEM_UNDO
is specified for this operation, the system adds the absolute value of
.I sem_op
to the semaphore adjustment
.RI ( semadj )
value for this semaphore.
If the absolute value of
.I sem_op
is greater than
.IR semval ,
and
.B IPC_NOWAIT
is specified in
.IR sem_flg ,
.BR semop ()
fails, with
.I errno
set to
.B EAGAIN
(and none of the operations in
.I sops
is performed).
Otherwise,
.I semncnt
(the counter of threads waiting for this semaphore's value to increase)
is incremented by one and the thread sleeps until
one of the following occurs:
.IP \(bu 3
.I semval
becomes greater than or equal to the absolute value of
.IR sem_op :
the operation now proceeds, as described above.
.IP \(bu
The semaphore set is removed from the system:
.BR semop ()
fails, with
.I errno
set to
.BR EIDRM .
.IP \(bu
The calling thread catches a signal:
the value of
.I semncnt
is decremented and
.BR semop ()
fails, with
.I errno
set to
.BR EINTR .
.PP
On successful completion, the
.I sempid
value for each semaphore specified in the array pointed to by
.I sops
is set to the caller's process ID.
In addition, the
.I sem_otime
.\" and
.\" .I sem_ctime
is set to the current time.
.SS semtimedop()
.BR semtimedop ()
behaves identically to
.BR semop ()
except that in those cases where the calling thread would sleep,
the duration of that sleep is limited by the amount of elapsed
time specified by the
.I timespec
structure whose address is passed in the
.I timeout
argument.
(This sleep interval will be rounded up to the system clock granularity,
and kernel scheduling delays mean that the interval
may overrun by a small amount.)
If the specified time limit has been reached,
.BR semtimedop ()
fails with
.I errno
set to
.B EAGAIN
(and none of the operations in
.I sops
is performed).
If the
.I timeout
argument is NULL,
then
.BR semtimedop ()
behaves exactly like
.BR semop ().

Note that if
.BR semtimeop ()
is interrupted by a signal, causing the call to fail with the error
.BR EINTR ,
the contents of
.IR timeout
are left unchanged.
.SH RETURN VALUE
If successful,
.BR semop ()
and
.BR semtimedop ()
return 0;
otherwise they return \-1
with
.I errno
indicating the error.
.SH ERRORS
On failure,
.I errno
is set to one of the following:
.TP
.B E2BIG
The argument
.I nsops
is greater than
.BR SEMOPM ,
the maximum number of operations allowed per system
call.
.TP
.B EACCES
The calling process does not have the permissions required
to perform the specified semaphore operations,
and does not have the
.B CAP_IPC_OWNER
capability.
.TP
.B EAGAIN
An operation could not proceed immediately and either
.B IPC_NOWAIT
was specified in
.I sem_flg
or the time limit specified in
.I timeout
expired.
.TP
.B EFAULT
An address specified in either the
.I sops
or the
.I timeout
argument isn't accessible.
.TP
.B EFBIG
For some operation the value of
.I sem_num
is less than 0 or greater than or equal to the number
of semaphores in the set.
.TP
.B EIDRM
The semaphore set was removed.
.TP
.B EINTR
While blocked in this system call, the thread caught a signal; see
.BR signal (7).
.TP
.B EINVAL
The semaphore set doesn't exist, or
.I semid
is less than zero, or
.I nsops
has a nonpositive value.
.TP
.B ENOMEM
The
.I sem_flg
of some operation specified
.B SEM_UNDO
and the system does not have enough memory to allocate the undo
structure.
.TP
.B ERANGE
For some operation
.I sem_op+semval
is greater than
.BR SEMVMX ,
the implementation dependent maximum value for
.IR semval .
.SH VERSIONS
.BR semtimedop ()
first appeared in Linux 2.5.52,
and was subsequently backported into kernel 2.4.22.
Glibc support for
.BR semtimedop ()
first appeared in version 2.3.3.
.SH CONFORMING TO
SVr4, POSIX.1-2001.
.\" SVr4 documents additional error conditions EINVAL, EFBIG, ENOSPC.
.SH NOTES
The inclusion of
.I <sys/types.h>
and
.I <sys/ipc.h>
isn't required on Linux or by any version of POSIX.
However,
some old implementations required the inclusion of these header files,
and the SVID also documented their inclusion.
Applications intended to be portable to such old systems may need
to include these header files.
.\" Like Linux, the FreeBSD man pages still document
.\" the inclusion of these header files.

The
.I sem_undo
structures of a process aren't inherited by the child produced by
.BR fork (2),
but they are inherited across an
.BR execve (2)
system call.
.PP
.BR semop ()
is never automatically restarted after being interrupted by a signal handler,
regardless of the setting of the
.B SA_RESTART
flag when establishing a signal handler.

A semaphore adjustment
.RI ( semadj )
value is a per-process, per-semaphore integer that is the negated sum
of all operations performed on a semaphore specifying the
.B SEM_UNDO
flag.
Each process has a list of
.I semadj
values\(emone value for each semaphore on which it has operated using
.BR SEM_UNDO .
When a process terminates, each of its per-semaphore
.I semadj
values is added to the corresponding semaphore,
thus undoing the effect of that process's operations on the semaphore
(but see BUGS below).
When a semaphore's value is directly set using the
.B SETVAL
or
.B SETALL
request to
.BR semctl (2),
the corresponding
.I semadj
values in all processes are cleared.
The
.BR clone (2)
.B CLONE_SYSVSEM
flag allows more than one process to share a
.I semadj
list; see
.BR clone (2)
for details.

The \fIsemval\fP, \fIsempid\fP, \fIsemzcnt\fP, and \fIsemnct\fP values
for a semaphore can all be retrieved using appropriate
.BR semctl (2)
calls.
.SS Semaphore limits
The following limits on semaphore set resources affect the
.BR semop ()
call:
.TP
.B SEMOPM
Maximum number of operations allowed for one
.BR semop ()
call.
Before Linux 3.19,
.\" commit e843e7d2c88b7db107a86bd2c7145dc715c058f4
the default value for this limit was 32.
Since Linux 3.19, the default value is 500.
On Linux, this limit can be read and modified via the third field of
.IR /proc/sys/kernel/sem .
.\" This /proc file is not available in Linux 2.2 and earlier -- MTK
.IR Note :
this limit should not be raised above 1000,
.\" See comment in Linux 3.19 source file include/uapi/linux/sem.h
because of the risk of that
.BR semop (2)
fails due to kernel memory fragmentation when allocating memory to copy the
.IR sops
array.
.TP
.B SEMVMX
Maximum allowable value for
.IR semval :
implementation dependent (32767).
.PP
The implementation has no intrinsic limits for
the adjust on exit maximum value
.RB ( SEMAEM ),
the system wide maximum number of undo structures
.RB ( SEMMNU )
and the per-process maximum number of undo entries system parameters.
.SH BUGS
When a process terminates, its set of associated
.I semadj
structures is used to undo the effect of all of the
semaphore operations it performed with the
.B SEM_UNDO
flag.
This raises a difficulty: if one (or more) of these semaphore adjustments
would result in an attempt to decrease a semaphore's value below zero,
what should an implementation do?
One possible approach would be to block until all the semaphore
adjustments could be performed.
This is however undesirable since it could force process termination to
block for arbitrarily long periods.
Another possibility is that such semaphore adjustments could be ignored
altogether (somewhat analogously to failing when
.B IPC_NOWAIT
is specified for a semaphore operation).
Linux adopts a third approach: decreasing the semaphore value
as far as possible (i.e., to zero) and allowing process
termination to proceed immediately.

In kernels 2.6.x, x <= 10, there is a bug that in some circumstances
prevents a thread that is waiting for a semaphore value to become
zero from being woken up when the value does actually become zero.
This bug is fixed in kernel 2.6.11.
.\" The bug report:
.\" http://marc.theaimsgroup.com/?l=linux-kernel&m=110260821123863&w=2
.\" the fix:
.\" http://marc.theaimsgroup.com/?l=linux-kernel&m=110261701025794&w=2
.SH EXAMPLE
The following code segment uses
.BR semop ()
to atomically wait for the value of semaphore 0 to become zero,
and then increment the semaphore value by one.
.nf

    struct sembuf sops[2];
    int semid;

    /* Code to set \fIsemid\fP omitted */

    sops[0].sem_num = 0;        /* Operate on semaphore 0 */
    sops[0].sem_op = 0;         /* Wait for value to equal 0 */
    sops[0].sem_flg = 0;

    sops[1].sem_num = 0;        /* Operate on semaphore 0 */
    sops[1].sem_op = 1;         /* Increment value by one */
    sops[1].sem_flg = 0;

    if (semop(semid, sops, 2) == \-1) {
        perror("semop");
        exit(EXIT_FAILURE);
    }
.fi
.SH SEE ALSO
.BR clone (2),
.BR semctl (2),
.BR semget (2),
.BR sigaction (2),
.BR capabilities (7),
.BR sem_overview (7),
.BR svipc (7),
.BR time (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1983, 1991 The Regents of the University of California.
.\" All rights reserved.
.\"
.\" %%%LICENSE_START(BSD_4_CLAUSE_UCB)
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\" %%%LICENSE_END
.\"
.\" Modified 1993-07-24 by Rik Faith <faith@cs.unc.edu>
.\" Modified 1996-10-22 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified Oct 1998 by Andi Kleen
.\" Modified Oct 2003 by aeb
.\" Modified 2004-07-01 by mtk
.\"
.TH SEND 2 2014-08-19 "Linux" "Linux Programmer's Manual"
.SH NAME
send, sendto, sendmsg \- send a message on a socket
.SH SYNOPSIS
.nf
.B #include <sys/types.h>
.B #include <sys/socket.h>
.sp
.BI "ssize_t send(int " sockfd ", const void *" buf ", size_t " len \
", int " flags );

.BI "ssize_t sendto(int " sockfd ", const void *" buf ", size_t " len \
", int " flags ,
.BI "               const struct sockaddr *" dest_addr ", socklen_t " addrlen );

.BI "ssize_t sendmsg(int " sockfd ", const struct msghdr *" msg \
", int " flags );
.fi
.SH DESCRIPTION
The system calls
.BR send (),
.BR sendto (),
and
.BR sendmsg ()
are used to transmit a message to another socket.
.PP
The
.BR send ()
call may be used only when the socket is in a
.I connected
state (so that the intended recipient is known).
The only difference between
.BR send ()
and
.BR write (2)
is the presence of
.IR flags .
With a zero
.I flags
argument,
.BR send ()
is equivalent to
.BR write (2).
Also, the following call

    send(sockfd, buf, len, flags);

is equivalent to

    sendto(sockfd, buf, len, flags, NULL, 0);
.PP
The argument
.I sockfd
is the file descriptor of the sending socket.
.PP
If
.BR sendto ()
is used on a connection-mode
.RB ( SOCK_STREAM ,
.BR SOCK_SEQPACKET )
socket, the arguments
.I dest_addr
and
.I addrlen
are ignored (and the error
.B EISCONN
may be returned when they are
not NULL and 0), and the error
.B ENOTCONN
is returned when the socket was not actually connected.
Otherwise, the address of the target is given by
.I dest_addr
with
.I addrlen
specifying its size.
For
.BR sendmsg (),
the address of the target is given by
.IR msg.msg_name ,
with
.I msg.msg_namelen
specifying its size.
.PP
For
.BR send ()
and
.BR sendto (),
the message is found in
.I buf
and has length
.IR len .
For
.BR sendmsg (),
the message is pointed to by the elements of the array
.IR msg.msg_iov .
The
.BR sendmsg ()
call also allows sending ancillary data (also known as control information).
.PP
If the message is too long to pass atomically through the
underlying protocol, the error
.B EMSGSIZE
is returned, and the message is not transmitted.
.PP
No indication of failure to deliver is implicit in a
.BR send ().
Locally detected errors are indicated by a return value of \-1.
.PP
When the message does not fit into the send buffer of the socket,
.BR send ()
normally blocks, unless the socket has been placed in nonblocking I/O
mode.
In nonblocking mode it would fail with the error
.B EAGAIN
or
.B EWOULDBLOCK
in this case.
The
.BR select (2)
call may be used to determine when it is possible to send more data.
.SS The flags argument
The
.I flags
argument is the bitwise OR
of zero or more of the following flags.
.\" FIXME . ? document MSG_PROXY (which went away in 2.3.15)
.TP
.BR MSG_CONFIRM " (since Linux 2.3.15)"
Tell the link layer that forward progress happened: you got a successful
reply from the other side.
If the link layer doesn't get this
it will regularly reprobe the neighbor (e.g., via a unicast ARP).
Only valid on
.B SOCK_DGRAM
and
.B SOCK_RAW
sockets and currently implemented only for IPv4 and IPv6.
See
.BR arp (7)
for details.
.TP
.B MSG_DONTROUTE
Don't use a gateway to send out the packet, send to hosts only on
directly connected networks.
This is usually used only
by diagnostic or routing programs.
This is defined only for protocol
families that route; packet sockets don't.
.TP
.BR MSG_DONTWAIT " (since Linux 2.2)"
Enables nonblocking operation; if the operation would block,
.B EAGAIN
or
.B EWOULDBLOCK
is returned (this can also be enabled using the
.B O_NONBLOCK
flag with the
.B F_SETFL
.BR fcntl (2)).
.TP
.BR MSG_EOR " (since Linux 2.2)"
Terminates a record (when this notion is supported, as for sockets of type
.BR SOCK_SEQPACKET ).
.TP
.BR MSG_MORE " (since Linux 2.4.4)"
The caller has more data to send.
This flag is used with TCP sockets to obtain the same effect
as the
.B TCP_CORK
socket option (see
.BR tcp (7)),
with the difference that this flag can be set on a per-call basis.

Since Linux 2.6, this flag is also supported for UDP sockets, and informs
the kernel to package all of the data sent in calls with this flag set
into a single datagram which is transmitted only when a call is performed
that does not specify this flag.
(See also the
.B UDP_CORK
socket option described in
.BR udp (7).)
.TP
.BR MSG_NOSIGNAL " (since Linux 2.2)"
Requests not to send
.B SIGPIPE
on errors on stream oriented sockets when the other end breaks the
connection.
The
.B EPIPE
error is still returned.
.TP
.B MSG_OOB
Sends
.I out-of-band
data on sockets that support this notion (e.g., of type
.BR SOCK_STREAM );
the underlying protocol must also support
.I out-of-band
data.
.SS sendmsg()
The definition of the
.I msghdr
structure employed by
.BR sendmsg ()
is as follows:
.in +4n
.nf

struct msghdr {
    void         *msg_name;       /* optional address */
    socklen_t     msg_namelen;    /* size of address */
    struct iovec *msg_iov;        /* scatter/gather array */
    size_t        msg_iovlen;     /* # elements in msg_iov */
    void         *msg_control;    /* ancillary data, see below */
    size_t        msg_controllen; /* ancillary data buffer len */
    int           msg_flags;      /* flags (unused) */
};
.fi
.in
.PP
The
.I msg_name
field is used on an unconnected socket to specify the target
address for a datagram.
It points to a buffer containing the address; the
.I msg_namelen
field should be set to the size of the address.
For a connected socket, these fields should be specified as NULL and 0,
respectively.

The
.I msg_iov
and
.I msg_iovlen
fields specify scatter-gather locations, as for
.BR writev (2).

You may send control information using the
.I msg_control
and
.I msg_controllen
members.
The maximum control buffer length the kernel can process is limited
per socket by the value in
.IR /proc/sys/net/core/optmem_max ;
see
.BR socket (7).

The
.I msg_flags
field is ignored.
.\" Still to be documented:
.\"  Send file descriptors and user credentials using the
.\"  msg_control* fields.
.SH RETURN VALUE
On success, these calls return the number of bytes sent.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
These are some standard errors generated by the socket layer.
Additional errors
may be generated and returned from the underlying protocol modules;
see their respective manual pages.
.TP
.B EACCES
(For UNIX domain sockets, which are identified by pathname)
Write permission is denied on the destination socket file,
or search permission is denied for one of the directories
the path prefix.
(See
.BR path_resolution (7).)
.sp
(For UDP sockets) An attempt was made to send to a
network/broadcast address as though it was a unicast address.
.TP
.BR EAGAIN " or " EWOULDBLOCK
.\" Actually EAGAIN on Linux
The socket is marked nonblocking and the requested operation
would block.
POSIX.1-2001 allows either error to be returned for this case,
and does not require these constants to have the same value,
so a portable application should check for both possibilities.
.TP
.B EAGAIN
(Internet domain datagram sockets)
The socket referred to by
.I sockfd
had not previously been bound to an address and,
upon attempting to bind it to an ephemeral port,
it was determined that all port numbers in the ephemeral port range
are currently in use.
See the discussion of
.I /proc/sys/net/ipv4/ip_local_port_range
in
.BR ip (7).
.TP
.B EBADF
An invalid descriptor was specified.
.TP
.B ECONNRESET
Connection reset by peer.
.TP
.B EDESTADDRREQ
The socket is not connection-mode, and no peer address is set.
.TP
.B EFAULT
An invalid user space address was specified for an argument.
.TP
.B EINTR
A signal occurred before any data was transmitted; see
.BR signal (7).
.TP
.B EINVAL
Invalid argument passed.
.TP
.B EISCONN
The connection-mode socket was connected already but a
recipient was specified.
(Now either this error is returned, or the recipient specification
is ignored.)
.TP
.B EMSGSIZE
The socket type
.\" (e.g., SOCK_DGRAM )
requires that message be sent atomically, and the size
of the message to be sent made this impossible.
.TP
.B ENOBUFS
The output queue for a network interface was full.
This generally indicates that the interface has stopped sending,
but may be caused by transient congestion.
(Normally, this does not occur in Linux.
Packets are just silently dropped
when a device queue overflows.)
.TP
.B ENOMEM
No memory available.
.TP
.B ENOTCONN
The socket is not connected, and no target has been given.
.TP
.B ENOTSOCK
The argument
.I sockfd
is not a socket.
.TP
.B EOPNOTSUPP
Some bit in the
.I flags
argument is inappropriate for the socket type.
.TP
.B EPIPE
The local end has been shut down on a connection oriented socket.
In this case, the process
will also receive a
.B SIGPIPE
unless
.B MSG_NOSIGNAL
is set.
.SH CONFORMING TO
4.4BSD, SVr4, POSIX.1-2001.
These function calls appeared in 4.2BSD.
.LP
POSIX.1-2001 describes only the
.B MSG_OOB
and
.B MSG_EOR
flags.
POSIX.1-2008 adds a specification of
.BR MSG_NOSIGNAL .
The
.B MSG_CONFIRM
flag is a Linux extension.
.SH NOTES
According to POSIX.1-2001, the
.I msg_controllen
field of the
.I msghdr
structure should be typed as
.IR socklen_t ,
but glibc currently types it as
.IR size_t .
.\" glibc bug raised 12 Mar 2006
.\" http://sourceware.org/bugzilla/show_bug.cgi?id=2448
.\" The problem is an underlying kernel issue: the size of the
.\" __kernel_size_t type used to type this field varies
.\" across architectures, but socklen_t is always 32 bits.

See
.BR sendmmsg (2)
for information about a Linux-specific system call
that can be used to transmit multiple datagrams in a single call.
.SH BUGS
Linux may return
.B EPIPE
instead of
.BR ENOTCONN .
.SH EXAMPLE
An example of the use of
.BR sendto ()
is shown in
.BR getaddrinfo (3).
.SH SEE ALSO
.BR fcntl (2),
.BR getsockopt (2),
.BR recv (2),
.BR select (2),
.BR sendfile (2),
.BR sendmmsg (2),
.BR shutdown (2),
.BR socket (2),
.BR write (2),
.BR cmsg (3),
.BR ip (7),
.BR socket (7),
.BR tcp (7),
.BR udp (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" This man page is Copyright (C) 1998 Pawel Krawczyk.
.\"
.\" %%%LICENSE_START(VERBATIM_ONE_PARA)
.\" Permission is granted to distribute possibly modified copies
.\" of this page provided the header is included verbatim,
.\" and in case of nontrivial modification author and date
.\" of the modification is added to the header.
.\" %%%LICENSE_END
.\"
.\" $Id: sendfile.2,v 1.5 1999/05/18 11:54:11 freitag Exp $
.\" 2000-11-19 bert hubert <ahu@ds9a.nl>: in_fd cannot be socket
.\"
.\" 2004-12-17, mtk
.\"	updated description of in_fd and out_fd for 2.6
.\"	Various wording and formatting changes
.\"
.\" 2005-03-31 Martin Pool <mbp@sourcefrog.net> mmap() improvements
.\"
.TH SENDFILE 2 2015-05-07 "Linux" "Linux Programmer's Manual"
.SH NAME
sendfile \- transfer data between file descriptors
.SH SYNOPSIS
.B #include <sys/sendfile.h>
.sp
.BI "ssize_t sendfile(int" " out_fd" ", int" " in_fd" ", off_t *" \
                      offset ", size_t" " count" );
.\" The below is too ugly. Comments about glibc versions belong
.\" in the notes, not in the header.
.\"
.\" .B #include <features.h>
.\" .br
.\" .B #if (__GLIBC__==2 && __GLIBC_MINOR__>=1) || __GLIBC__>2
.\" .br
.\" .B #include <sys/sendfile.h>
.\" .br
.\" #else
.\" .br
.\" .B #include <sys/types.h>
.\" .br
.\" .B /* No system prototype before glibc 2.1. */
.\" .br
.\" .BI "ssize_t sendfile(int" " out_fd" ", int" " in_fd" ", off_t *" \
.\"                       offset ", size_t" " count" )
.\" .br
.\" .B #endif
.\"
.SH DESCRIPTION
.BR sendfile ()
copies data between one file descriptor and another.
Because this copying is done within the kernel,
.BR sendfile ()
is more efficient than the combination of
.BR read (2)
and
.BR write (2),
which would require transferring data to and from user space.

.I in_fd
should be a file descriptor opened for reading and
.I out_fd
should be a descriptor opened for writing.

If
.I offset
is not NULL, then it points
to a variable holding the file offset from which
.BR sendfile ()
will start reading data from
.IR in_fd .
When
.BR sendfile ()
returns, this variable
will be set to the offset of the byte following the last byte that was read.
If
.I offset
is not NULL, then
.BR sendfile ()
does not modify the current file offset of
.IR in_fd ;
otherwise the current file offset is adjusted to reflect
the number of bytes read from
.IR in_fd .

If
.I offset
is NULL, then data will be read from
.IR in_fd
starting at the current file offset,
and the file offset will be updated by the call.

.I count
is the number of bytes to copy between the file descriptors.

The
.IR in_fd
argument must correspond to a file which supports
.BR mmap (2)-like
operations
(i.e., it cannot be a socket).

In Linux kernels before 2.6.33,
.I out_fd
must refer to a socket.
Since Linux 2.6.33 it can be any file.
If it is a regular file, then
.BR sendfile ()
changes the file offset appropriately.
.SH RETURN VALUE
If the transfer was successful, the number of bytes written to
.I out_fd
is returned.
Note that a successful call to
.BR sendfile ()
may write fewer bytes than requested;
the caller should be prepared to retry the call if there were unsent bytes.

On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EAGAIN
Nonblocking I/O has been selected using
.B O_NONBLOCK
and the write would block.
.TP
.B EBADF
The input file was not opened for reading or the output file
was not opened for writing.
.TP
.B EFAULT
Bad address.
.TP
.B EINVAL
Descriptor is not valid or locked, or an
.BR mmap (2)-like
operation is not available for
.IR in_fd .
.TP
.B EINVAL
.I out_fd
was has the
.B O_APPEND
flag set.
This is not currently supported by
.BR sendfile ().
.TP
.B EIO
Unspecified error while reading from
.IR in_fd .
.TP
.B ENOMEM
Insufficient memory to read from
.IR in_fd .
.SH VERSIONS
.BR sendfile ()
first appeared in Linux 2.2.
The include file
.I <sys/sendfile.h>
is present since glibc 2.1.
.SH CONFORMING TO
Not specified in POSIX.1-2001, nor in other standards.

Other UNIX systems implement
.BR sendfile ()
with different semantics and prototypes.
It should not be used in portable programs.
.SH NOTES
If you plan to use
.BR sendfile ()
for sending files to a TCP socket, but need
to send some header data in front of the file contents, you will find
it useful to employ the
.B TCP_CORK
option, described in
.BR tcp (7),
to minimize the number of packets and to tune performance.

In Linux 2.4 and earlier,
.I out_fd
could also refer to a regular file;
this possibility went away in the Linux 2.6.x kernel series,
but was restored in Linux 2.6.33.

The original Linux
.BR sendfile ()
system call was not designed to handle large file offsets.
Consequently, Linux 2.4 added
.BR sendfile64 (),
with a wider type for the
.I offset
argument.
The glibc
.BR sendfile ()
wrapper function transparently deals with the kernel differences.

Applications may wish to fall back to
.BR read (2)/ write (2)
in the case where
.BR sendfile ()
fails with
.B EINVAL
or
.BR ENOSYS .

If
.I out_fd
refers to a socket or pipe with zero-copy support, callers must ensure the
transferred portions of the file referred to by
.I in_fd
remain unmodified until the reader on the other end of
.I out_fd
has consumed the transferred data.

The Linux-specific
.BR splice (2)
call supports transferring data between arbitrary files
(e.g., a pair of sockets).
.SH SEE ALSO
.BR mmap (2),
.BR open (2),
.BR socket (2),
.BR splice (2)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2012 by Michael Kerrisk <mtk.manpages@gmail.com>
.\" with some material from a draft by
.\" Stephan Mueller <stephan.mueller@atsec.com>
.\" in turn based on Andi Kleen's recvmmsg.2 page.
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH SENDMMSG 2 2014-07-08 "Linux" "Linux Programmer's Manual"
.SH NAME
sendmmsg \- send multiple messages on a socket
.SH SYNOPSIS
.nf
.BR "#define _GNU_SOURCE" "         /* See feature_test_macros(7) */"
.BI "#include <sys/socket.h>"

.BI "int sendmmsg(int " sockfd ", struct mmsghdr *" msgvec \
", unsigned int " vlen ","
.BI "             unsigned int " flags ");"
.fi
.SH DESCRIPTION
The
.BR sendmmsg ()
system call is an extension of
.BR sendmsg (2)
that allows the caller to transmit multiple messages on a socket
using a single system call.
(This has performance benefits for some applications.)
.\" See commit 228e548e602061b08ee8e8966f567c12aa079682

The
.I sockfd
argument is the file descriptor of the socket
on which data is to be transmitted.

The
.I msgvec
argument is a pointer to an array of
.I mmsghdr
structures.
The size of this array is specified in
.IR vlen .

The
.I mmsghdr
structure is defined in
.I <sys/socket.h>
as:

.in +4n
.nf
struct mmsghdr {
    struct msghdr msg_hdr;  /* Message header */
    unsigned int  msg_len;  /* Number of bytes transmitted */
};
.fi
.in
.PP
The
.I msg_hdr
field is a
.I msghdr
structure, as described in
.BR sendmsg (2).
The
.I msg_len
field is used to return the number of bytes sent from the message in
.IR msg_hdr
(i.e., the same as the return value from a single
.BR sendmsg (2)
call).

The
.I flags
argument contains flags ORed together.
The flags are the same as for
.BR sendmsg (2).

A blocking
.BR sendmmsg ()
call blocks until
.I vlen
messages have been sent.
A nonblocking call sends as many messages as possible
(up to the limit specified by
.IR vlen )
and returns immediately.

On return from
.BR sendmmsg (),
the
.I msg_len
fields of successive elements of
.IR msgvec
are updated to contain the number of bytes transmitted from the corresponding
.IR msg_hdr .
The return value of the call indicates the number of elements of
.I msgvec
that have been updated.
.SH RETURN VALUE
On success,
.BR sendmmsg ()
returns the number of messages sent from
.IR msgvec ;
if this is less than
.IR vlen ,
the caller can retry with a further
.BR sendmmsg ()
call to send the remaining messages.

On error, \-1 is returned, and
.I errno
is set to indicate the error.
.SH ERRORS
Errors are as for
.BR sendmsg (2).
An error is returned only if no datagrams could be sent.
.\" commit 728ffb86f10873aaf4abd26dde691ee40ae731fe
.\"     ... only return an error if no datagrams could be sent.
.\"     If less than the requested number of messages were sent, the application
.\"     must retry starting at the first failed one and if the problem is
.\"     persistent the error will be returned.
.\"
.\"     This matches the behavior of other syscalls like read/write - it
.\"     is not an error if less than the requested number of elements are sent.
.SH VERSIONS
The
.BR sendmmsg ()
system call was added in Linux 3.0.
Support in glibc was added in version 2.14.
.SH CONFORMING TO
.BR sendmmsg ()
is Linux-specific.
.SH NOTES
The value specified in
.I vlen
is capped to
.B UIO_MAXIOV
(1024).
.\" commit 98382f419f32d2c12d021943b87dea555677144b
.\"     net: Cap number of elements for sendmmsg
.\"
.\"     To limit the amount of time we can spend in sendmmsg, cap the
.\"     number of elements to UIO_MAXIOV (currently 1024).
.\"
.\"     For error handling an application using sendmmsg needs to retry at
.\"     the first unsent message, so capping is simpler and requires less
.\"     application logic than returning EINVAL.
.SH EXAMPLE
The example below uses
.BR sendmmsg ()
to send
.I onetwo
and
.I three
in two distinct UDP datagrams using one system call.
The contents of the first datagram originates from a pair of buffers.

.nf
#define _GNU_SOURCE
#include <netinet/ip.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>

int
main(void)
{
    int sockfd;
    struct sockaddr_in sa;
    struct mmsghdr msg[2];
    struct iovec msg1[2], msg2;
    int retval;

    sockfd = socket(AF_INET, SOCK_DGRAM, 0);
    if (sockfd == \-1) {
        perror("socket()");
        exit(EXIT_FAILURE);
    }

    sa.sin_family = AF_INET;
    sa.sin_addr.s_addr = htonl(INADDR_LOOPBACK);
    sa.sin_port = htons(1234);
    if (connect(sockfd, (struct sockaddr *) &sa, sizeof(sa)) == \-1) {
        perror("connect()");
        exit(EXIT_FAILURE);
    }

    memset(msg1, 0, sizeof(msg1));
    msg1[0].iov_base = "one";
    msg1[0].iov_len = 3;
    msg1[1].iov_base = "two";
    msg1[1].iov_len = 3;

    memset(&msg2, 0, sizeof(msg2));
    msg2.iov_base = "three";
    msg2.iov_len = 5;

    memset(msg, 0, sizeof(msg));
    msg[0].msg_hdr.msg_iov = msg1;
    msg[0].msg_hdr.msg_iovlen = 2;

    msg[1].msg_hdr.msg_iov = &msg2;
    msg[1].msg_hdr.msg_iovlen = 1;

    retval = sendmmsg(sockfd, msg, 2, 0);
    if (retval == \-1)
        perror("sendmmsg()");
    else
        printf("%d messages sent\\n", retval);

    exit(0);
}
.fi
.SH SEE ALSO
.BR recvmmsg (2),
.BR sendmsg (2),
.BR socket (2),
.BR socket (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2001 Andries Brouwer (aeb@cwi.nl)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" [should really be seteuid.3]
.\" Modified, 27 May 2004, Michael Kerrisk <mtk.manpages@gmail.com>
.\"     Added notes on capability requirements
.\"
.TH SETEUID 2 2014-09-21 "Linux" "Linux Programmer's Manual"
.SH NAME
seteuid, setegid \- set effective user or group ID
.SH SYNOPSIS
.B #include <sys/types.h>
.br
.B #include <unistd.h>
.sp
.BI "int seteuid(uid_t " euid );
.br
.BI "int setegid(gid_t " egid );
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR seteuid (),
.BR setegid ():
.RS 4
_BSD_SOURCE || _POSIX_C_SOURCE\ >=\ 200112L || _XOPEN_SOURCE\ >=\ 600
.RE
.ad
.SH DESCRIPTION
.BR seteuid ()
sets the effective user ID of the calling process.
Unprivileged user processes may only set the effective user ID to the
real user ID, the effective user ID or the saved set-user-ID.

Precisely the same holds for
.BR setegid ()
with "group" instead of "user".
.\" When
.\" .I euid
.\" equals \-1, nothing is changed.
.\" (This is an artifact of the implementation in glibc of seteuid()
.\" using setresuid(2).)
.SH RETURN VALUE
On success, zero is returned.
On error, \-1 is returned, and
.I errno
is set appropriately.

.IR Note :
there are cases where
.BR seteuid ()
can fail even when the caller is UID 0;
it is a grave security error to omit checking for a failure return from
.BR seteuid ().
.SH ERRORS
.TP
.B EINVAL
The target user or group ID is not valid in this user namespace.
.TP
.B EPERM
The calling process is not privileged (Linux: does not have the
.B CAP_SETUID
capability in the case of
.BR seteuid (),
or the
.B CAP_SETGID
capability in the case of
.BR setegid ())
and
.I euid
(respectively,
.IR egid )
is not the real user (group) ID, the effective user (group) ID,
or the saved set-user-ID (saved set-group-ID).
.SH CONFORMING TO
4.3BSD, POSIX.1-2001.
.SH NOTES
Setting the effective user (group) ID to the
saved set-user-ID (saved set-group-ID) is
possible since Linux 1.1.37 (1.1.38).
On an arbitrary system one should check
.BR _POSIX_SAVED_IDS .
.LP
Under glibc 2.0
.BI seteuid( euid )
is equivalent to
.BI setreuid(\-1, " euid" )
and hence may change the saved set-user-ID.
Under glibc 2.1 and later it is equivalent to
.BI setresuid(\-1, " euid" ", \-1)"
and hence does not change the saved set-user-ID.
Analogous remarks hold for
.BR setegid (),
with the difference that the change in implementation from
.BI setregid(\-1, " egid" )
to
.BI setresgid(\-1, " egid" ", \-1)"
occurred in glibc 2.2 or 2.3 (depending on the hardware architecture).

According to POSIX.1,
.BR seteuid ()
.RB ( setegid ())
need not permit
.I euid
.RI ( egid )
to be the same value as the current effective user (group) ID,
and some implementations do not permit this.
.SS C library/kernel ABI differences
On Linux,
.BR seteuid ()
and
.BR setegid ()
are implemented as library functions that call, respectively,
.BR setreuid (2)
and
.BR setregid (2).
.SH SEE ALSO
.BR geteuid (2),
.BR setresuid (2),
.BR setreuid (2),
.BR setuid (2),
.BR capabilities (7),
.BR credentials (7),
.BR user_namespaces (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 1995, Thomas K. Dyas <tdyas@eden.rutgers.edu>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Created   1995-08-06 Thomas K. Dyas <tdyas@eden.rutgers.edu>
.\" Modified  2000-07-01 aeb
.\" Modified  2002-07-23 aeb
.\" Modified, 27 May 2004, Michael Kerrisk <mtk.manpages@gmail.com>
.\"     Added notes on capability requirements
.\"
.TH SETFSGID 2 2013-08-08 "Linux" "Linux Programmer's Manual"
.SH NAME
setfsgid \- set group identity used for filesystem checks
.SH SYNOPSIS
.B #include <sys/fsuid.h>
.sp
.BI "int setfsgid(uid_t " fsgid );
.SH DESCRIPTION
The system call
.BR setfsgid ()
changes the value of the caller's filesystem group ID\(emthe
group ID that the Linux kernel uses to check for all accesses
to the filesystem.
Normally, the value of
the filesystem group ID
will shadow the value of the effective group ID.
In fact, whenever the
effective group ID is changed,
the filesystem group ID
will also be changed to the new value of the effective group ID.

Explicit calls to
.BR setfsuid (2)
and
.BR setfsgid ()
are usually used only by programs such as the Linux NFS server that
need to change what user and group ID is used for file access without a
corresponding change in the real and effective user and group IDs.
A change in the normal user IDs for a program such as the NFS server
is a security hole that can expose it to unwanted signals.
(But see below.)

.BR setfsgid ()
will succeed only if the caller is the superuser or if
.I fsgid
matches either the caller's real group ID, effective group ID,
saved set-group-ID, or current the filesystem user ID.
.SH RETURN VALUE
On both success and failure,
this call returns the previous filesystem group ID of the caller.
.SH VERSIONS
This system call is present in Linux since version 1.2.
.\" This system call is present since Linux 1.1.44
.\" and in libc since libc 4.7.6.
.SH CONFORMING TO
.BR setfsgid ()
is Linux-specific and should not be used in programs intended
to be portable.
.SH NOTES
When glibc determines that the argument is not a valid group ID,
it will return \-1 and set \fIerrno\fP to
.B EINVAL
without attempting
the system call.
.LP
Note that at the time this system call was introduced, a process
could send a signal to a process with the same effective user ID.
Today signal permission handling is slightly different.
See
.BR setfsuid (2)
for a discussion of why the use of both
.BR setfsuid (2)
and
.BR setfsgid ()
is nowadays unneeded.

The original Linux
.BR setfsgid ()
system call supported only 16-bit group IDs.
Subsequently, Linux 2.4 added
.BR setfsgid32 ()
supporting 32-bit IDs.
The glibc
.BR setfsgid ()
wrapper function transparently deals with the variation across kernel versions.
.SH BUGS
No error indications of any kind are returned to the caller,
and the fact that both successful and unsuccessful calls return
the same value makes it impossible to directly determine
whether the call succeeded or failed.
Instead, the caller must resort to looking at the return value
from a further call such as
.IR setfsgid(\-1)
(which will always fail), in order to determine if a preceding call to
.BR setfsgid ()
changed the filesystem group ID.
At the very
least,
.B EPERM
should be returned when the call fails (because the caller lacks the
.B CAP_SETGID
capability).
.SH SEE ALSO
.BR kill (2),
.BR setfsuid (2),
.BR capabilities (7),
.BR credentials (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 1995, Thomas K. Dyas <tdyas@eden.rutgers.edu>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Created   1995-08-06 Thomas K. Dyas <tdyas@eden.rutgers.edu>
.\" Modified  2000-07-01 aeb
.\" Modified  2002-07-23 aeb
.\" Modified, 27 May 2004, Michael Kerrisk <mtk.manpages@gmail.com>
.\"     Added notes on capability requirements
.\"
.TH SETFSUID 2 2013-08-08 "Linux" "Linux Programmer's Manual"
.SH NAME
setfsuid \- set user identity used for filesystem checks
.SH SYNOPSIS
.B #include <sys/fsuid.h>
.sp
.BI "int setfsuid(uid_t " fsuid );
.SH DESCRIPTION
The system call
.BR setfsuid ()
changes the value of the caller's filesystem user ID\(emthe
user ID that the Linux kernel uses to check for all accesses
to the filesystem.
Normally, the value of
the filesystem user ID
will shadow the value of the effective user ID.
In fact, whenever the
effective user ID is changed,
the filesystem user ID
will also be changed to the new value of the effective user ID.

Explicit calls to
.BR setfsuid ()
and
.BR setfsgid (2)
are usually used only by programs such as the Linux NFS server that
need to change what user and group ID is used for file access without a
corresponding change in the real and effective user and group IDs.
A change in the normal user IDs for a program such as the NFS server
is a security hole that can expose it to unwanted signals.
(But see below.)

.BR setfsuid ()
will succeed only if the caller is the superuser or if
.I fsuid
matches either the caller's real user ID, effective user ID,
saved set-user-ID, or current filesystem user ID.
.SH RETURN VALUE
On both success and failure,
this call returns the previous filesystem user ID of the caller.
.SH VERSIONS
This system call is present in Linux since version 1.2.
.\" This system call is present since Linux 1.1.44
.\" and in libc since libc 4.7.6.
.SH CONFORMING TO
.BR setfsuid ()
is Linux-specific and should not be used in programs intended
to be portable.
.SH NOTES
When glibc determines that the argument is not a valid user ID,
it will return \-1 and set \fIerrno\fP to
.B EINVAL
without attempting
the system call.
.LP
At the time when this system call was introduced, one process
could send a signal to another process with the same effective user ID.
This meant that if a privileged process changed its effective user ID
for the purpose of file permission checking,
then it could become vulnerable to receiving signals
sent by another (unprivileged) process with the same user ID.
The filesystem user ID attribute was thus added to allow a process to
change its user ID for the purposes of file permission checking without
at the same time becoming vulnerable to receiving unwanted signals.
Since Linux 2.0, signal permission handling is different (see
.BR kill (2)),
with the result that a process change can change its effective user ID
without being vulnerable to receiving signals from unwanted processes.
Thus,
.BR setfsuid ()
is nowadays unneeded and should be avoided in new applications
(likewise for
.BR setfsgid (2)).

The original Linux
.BR setfsuid ()
system call supported only 16-bit user IDs.
Subsequently, Linux 2.4 added
.BR setfsuid32 ()
supporting 32-bit IDs.
The glibc
.BR setfsuid ()
wrapper function transparently deals with the variation across kernel versions.
.SH BUGS
No error indications of any kind are returned to the caller,
and the fact that both successful and unsuccessful calls return
the same value makes it impossible to directly determine
whether the call succeeded or failed.
Instead, the caller must resort to looking at the return value
from a further call such as
.IR setfsuid(\-1)
(which will always fail), in order to determine if a preceding call to
.BR setfsuid ()
changed the filesystem user ID.
At the very
least,
.B EPERM
should be returned when the call fails (because the caller lacks the
.B CAP_SETUID
capability).
.SH SEE ALSO
.BR kill (2),
.BR setfsgid (2),
.BR capabilities (7),
.BR credentials (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C), 1994, Graeme W. Wilford. (Wilf.)
.\" and Copyright (C) 2010, 2015, Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Fri Jul 29th 12:56:44 BST 1994  Wilf. <G.Wilford@ee.surrey.ac.uk>
.\" Modified 1997-01-31 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified 2002-03-09 by aeb
.\"
.TH SETGID 2 2015-03-29 "Linux" "Linux Programmer's Manual"
.SH NAME
setgid \- set group identity
.SH SYNOPSIS
.B #include <sys/types.h>
.br
.B #include <unistd.h>
.sp
.BI "int setgid(gid_t " gid );
.SH DESCRIPTION
.BR setgid ()
sets the effective group ID of the calling process.
If the caller is privileged (has the
CAP_SETGID
capability), the real GID and saved set-group-ID are also set.

Under Linux,
.BR setgid ()
is implemented like the POSIX version with the
.B _POSIX_SAVED_IDS
feature.
This allows a set-group-ID program that is not set-user-ID-root
to drop all of its group
privileges, do some un-privileged work, and then reengage the original
effective group ID in a secure manner.
.SH RETURN VALUE
On success, zero is returned.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EINVAL
The group ID specified in
.I gid
is not valid in this user namespace.
.TP
.B EPERM
The calling process is not privileged (does not have the
\fBCAP_SETGID\fP capability), and
.I gid
does not match the real group ID or saved set-group-ID of
the calling process.
.SH CONFORMING TO
SVr4, POSIX.1-2001.
.SH NOTES
The original Linux
.BR setgid ()
system call supported only 16-bit group IDs.
Subsequently, Linux 2.4 added
.BR setgid32 ()
supporting 32-bit IDs.
The glibc
.BR setgid ()
wrapper function transparently deals with the variation across kernel versions.
.\"
.SS C library/kernel ABI differences
At the kernel level, user IDs and group IDs are a per-thread attribute.
However, POSIX requires that all threads in a process
share the same credentials.
The NPTL threading implementation handles the POSIX requirements by
providing wrapper functions for
the various system calls that change process UIDs and GIDs.
These wrapper functions (including the one for
.BR setgid ())
employ a signal-based technique to ensure
that when one thread changes credentials,
all of the other threads in the process also change their credentials.
For details, see
.BR nptl (7).
.SH SEE ALSO
.BR getgid (2),
.BR setegid (2),
.BR setregid (2),
.BR capabilities (7),
.BR credentials (7),
.BR user_namespaces (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 2003,2004 Andi Kleen, SuSE Labs.
.\" and Copyright 2007 Lee Schermerhorn, Hewlett Packard
.\"
.\" %%%LICENSE_START(VERBATIM_PROF)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" 2006-02-03, mtk, substantial wording changes and other improvements
.\" 2007-08-27, Lee Schermerhorn <Lee.Schermerhorn@hp.com>
.\"     more precise specification of behavior.
.\"
.TH SET_MEMPOLICY 2 2015-05-07 Linux "Linux Programmer's Manual"
.SH NAME
set_mempolicy \- set default NUMA memory policy for a thread and its children
.SH SYNOPSIS
.nf
.B "#include <numaif.h>"
.sp
.BI "long set_mempolicy(int " mode ", const unsigned long *" nodemask ,
.BI "                   unsigned long " maxnode );
.sp
Link with \fI\-lnuma\fP.
.fi
.SH DESCRIPTION
.BR set_mempolicy ()
sets the NUMA memory policy of the calling thread,
which consists of a policy mode and zero or more nodes,
to the values specified by the
.IR mode ,
.I nodemask
and
.I maxnode
arguments.

A NUMA machine has different
memory controllers with different distances to specific CPUs.
The memory policy defines from which node memory is allocated for
the thread.

This system call defines the default policy for the thread.
The thread policy governs allocation of pages in the process's
address space outside of memory ranges
controlled by a more specific policy set by
.BR mbind (2).
The thread default policy also controls allocation of any pages for
memory-mapped files mapped using the
.BR mmap (2)
call with the
.B MAP_PRIVATE
flag and that are only read [loaded] from by the thread
and of memory-mapped files mapped using the
.BR mmap (2)
call with the
.B MAP_SHARED
flag, regardless of the access type.
The policy is applied only when a new page is allocated
for the thread.
For anonymous memory this is when the page is first
touched by the thread.

The
.I mode
argument must specify one of
.BR MPOL_DEFAULT ,
.BR MPOL_BIND ,
.BR MPOL_INTERLEAVE ,
or
.BR MPOL_PREFERRED .
All modes except
.B MPOL_DEFAULT
require the caller to specify via the
.I nodemask
argument one or more nodes.

The
.I mode
argument may also include an optional
.IR "mode flag" .
The supported
.I "mode flags"
are:
.TP
.BR MPOL_F_STATIC_NODES " (since Linux 2.6.26)"
A nonempty
.I nodemask
specifies physical node ids.
Linux will not remap the
.I nodemask
when the process moves to a different cpuset context,
nor when the set of nodes allowed by the process's
current cpuset context changes.
.TP
.BR MPOL_F_RELATIVE_NODES " (since Linux 2.6.26)"
A nonempty
.I nodemask
specifies node ids that are relative to the set of
node ids allowed by the process's current cpuset.
.PP
.I nodemask
points to a bit mask of node IDs that contains up to
.I maxnode
bits.
The bit mask size is rounded to the next multiple of
.IR "sizeof(unsigned long)" ,
but the kernel will use bits only up to
.IR maxnode .
A NULL value of
.I nodemask
or a
.I maxnode
value of zero specifies the empty set of nodes.
If the value of
.I maxnode
is zero,
the
.I nodemask
argument is ignored.

Where a
.I nodemask
is required, it must contain at least one node that is on-line,
allowed by the process's current cpuset context,
[unless the
.B MPOL_F_STATIC_NODES
mode flag is specified],
and contains memory.
If the
.B MPOL_F_STATIC_NODES
is set in
.I mode
and a required
.I nodemask
contains no nodes that are allowed by the process's current cpuset context,
the memory policy reverts to
.IR "local allocation" .
This effectively overrides the specified policy until the process's
cpuset context includes one or more of the nodes specified by
.IR nodemask .

The
.B MPOL_DEFAULT
mode specifies that any nondefault thread memory policy be removed,
so that the memory policy "falls back" to the system default policy.
The system default policy is "local allocation"\(emthat is,
allocate memory on the node of the CPU that triggered the allocation.
.I nodemask
must be specified as NULL.
If the "local node" contains no free memory, the system will
attempt to allocate memory from a "near by" node.

The
.B MPOL_BIND
mode defines a strict policy that restricts memory allocation to the
nodes specified in
.IR nodemask .
If
.I nodemask
specifies more than one node, page allocations will come from
the node with the lowest numeric node ID first, until that node
contains no free memory.
Allocations will then come from the node with the next highest
node ID specified in
.I nodemask
and so forth, until none of the specified nodes contain free memory.
Pages will not be allocated from any node not specified in the
.IR nodemask .

.B MPOL_INTERLEAVE
interleaves page allocations across the nodes specified in
.I nodemask
in numeric node ID order.
This optimizes for bandwidth instead of latency
by spreading out pages and memory accesses to those pages across
multiple nodes.
However, accesses to a single page will still be limited to
the memory bandwidth of a single node.
.\" NOTE:  the following sentence doesn't make sense in the context
.\" of set_mempolicy() -- no memory area specified.
.\" To be effective the memory area should be fairly large,
.\" at least 1MB or bigger.

.B MPOL_PREFERRED
sets the preferred node for allocation.
The kernel will try to allocate pages from this node first
and fall back to "near by" nodes if the preferred node is low on free
memory.
If
.I nodemask
specifies more than one node ID, the first node in the
mask will be selected as the preferred node.
If the
.I nodemask
and
.I maxnode
arguments specify the empty set, then the policy
specifies "local allocation"
(like the system default policy discussed above).

The thread memory policy is preserved across an
.BR execve (2),
and is inherited by child threads created using
.BR fork (2)
or
.BR clone (2).
.SH RETURN VALUE
On success,
.BR set_mempolicy ()
returns 0;
on error, \-1 is returned and
.I errno
is set to indicate the error.
.SH ERRORS
.TP
.B EFAULT
Part of all of the memory range specified by
.I nodemask
and
.I maxnode
points outside your accessible address space.
.TP
.B EINVAL
.I mode
is invalid.
Or,
.I mode
is
.B MPOL_DEFAULT
and
.I nodemask
is nonempty,
or
.I mode
is
.B MPOL_BIND
or
.B MPOL_INTERLEAVE
and
.I nodemask
is empty.
Or,
.I maxnode
specifies more than a page worth of bits.
Or,
.I nodemask
specifies one or more node IDs that are
greater than the maximum supported node ID.
Or, none of the node IDs specified by
.I nodemask
are on-line and allowed by the process's current cpuset context,
or none of the specified nodes contain memory.
Or, the
.I mode
argument specified both
.B MPOL_F_STATIC_NODES
and
.BR MPOL_F_RELATIVE_NODES .
.TP
.B ENOMEM
Insufficient kernel memory was available.
.SH VERSIONS
The
.BR set_mempolicy (),
system call was added to the Linux kernel in version 2.6.7.
.SH CONFORMING TO
This system call is Linux-specific.
.SH NOTES
Memory policy is not remembered if the page is swapped out.
When such a page is paged back in, it will use the policy of
the thread or memory range that is in effect at the time the
page is allocated.

For information on library support, see
.BR numa (7).
.SH SEE ALSO
.BR get_mempolicy (2),
.BR getcpu (2),
.BR mbind (2),
.BR mmap (2),
.BR numa (3),
.BR cpuset (7),
.BR numa (7),
.BR numactl (8)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2011, Eric Biederman <ebiederm@xmission.com>
.\" and Copyright (C) 2011, 2012, Michael Kerrisk <mtk.manpages@gamil.com>
.\"
.\" %%%LICENSE_START(GPLv2_ONELINE)
.\" Licensed under the GPLv2
.\" %%%LICENSE_END
.\"
.TH SETNS 2 2015-01-10 "Linux" "Linux Programmer's Manual"
.SH NAME
setns \- reassociate thread with a namespace
.SH SYNOPSIS
.nf
.BR "#define _GNU_SOURCE" "             /* See feature_test_macros(7) */"
.B #include <sched.h>
.sp
.BI "int setns(int " fd ", int " nstype );
.fi
.SH DESCRIPTION
Given a file descriptor referring to a namespace,
reassociate the calling thread with that namespace.

The
.I fd
argument is a file descriptor referring to one of the namespace entries in a
.I /proc/[pid]/ns/
directory; see
.BR namespaces (7)
for further information on
.IR /proc/[pid]/ns/ .
The calling thread will be reassociated with the corresponding namespace,
subject to any constraints imposed by the
.I nstype
argument.

The
.I nstype
argument specifies which type of namespace
the calling thread may be reassociated with.
This argument can have one of the following values:
.TP
.BR 0
Allow any type of namespace to be joined.
.TP
.BR CLONE_NEWIPC " (since Linux 3.0)"
.I fd
must refer to an IPC namespace.
.TP
.BR CLONE_NEWNET " (since Linux 3.0)"
.I fd
must refer to a network namespace.
.TP
.BR CLONE_NEWNS " (since Linux 3.8)"
.I fd
must refer to a mount namespace.
.TP
.BR CLONE_NEWPID " (since Linux 3.8)"
.I fd
must refer to a descendant PID namespace.
.TP
.BR CLONE_NEWUSER " (since Linux 3.8)"
.I fd
must refer to a user namespace.
.TP
.BR CLONE_NEWUTS " (since Linux 3.0)"
.I fd
must refer to a UTS namespace.
.PP
Specifying
.I nstype
as 0 suffices if the caller knows (or does not care)
what type of namespace is referred to by
.IR fd .
Specifying a nonzero value for
.I nstype
is useful if the caller does not know what type of namespace is referred to by
.IR fd
and wants to ensure that the namespace is of a particular type.
(The caller might not know the type of the namespace referred to by
.IR fd
if the file descriptor was opened by another process and, for example,
passed to the caller via a UNIX domain socket.)

.B CLONE_NEWPID
behaves somewhat differently from the other
.I nstype
values:
reassociating the calling thread with a PID namespace changes only
the PID namespace that child processes of the caller will be created in;
it does not change the PID namespace of the caller itself.
Reassociating with a PID namespace is allowed only if the
PID namespace specified by
.IR fd
is a descendant (child, grandchild, etc.)
of the PID namespace of the caller.
For further details on PID namespaces, see
.BR pid_namespaces (7).

A process reassociating itself with a user namespace must have the
.B CAP_SYS_ADMIN
.\" See kernel/user_namespace.c:userns_install() [3.8 source]
capability in the target user namespace.
Upon successfully joining a user namespace,
a process is granted all capabilities in that namespace,
regardless of its user and group IDs.
A multithreaded process may not change user namespace with
.BR setns ().
It is not permitted to use
.BR setns ()
to reenter the caller's current user namespace.
This prevents a caller that has dropped capabilities from regaining
those capabilities via a call to
.BR setns ().
For security reasons,
.\" commit e66eded8309ebf679d3d3c1f5820d1f2ca332c71
.\" https://lwn.net/Articles/543273/
a process can't join a new user namespace if it is sharing
filesystem-related attributes
(the attributes whose sharing is controlled by the
.BR clone (2)
.B CLONE_FS
flag) with another process.
For further details on user namespaces, see
.BR user_namespaces (7).

A process may not be reassociated with a new mount namespace if it is
multithreaded.
.\" Above check is in fs/namespace.c:mntns_install() [3.8 source]
Changing the mount namespace requires that the caller possess both
.B CAP_SYS_CHROOT
and
.BR CAP_SYS_ADMIN
capabilities in its own user namespace and
.BR CAP_SYS_ADMIN
in the target mount namespace.
See
.BR user_namespaces (7)
for details on the interaction of user namespaces and mount namespaces.
.SH RETURN VALUE
On success,
.BR setns ()
returns 0.
On failure, \-1 is returned and
.I errno
is set to indicate the error.
.SH ERRORS
.TP
.B EBADF
.I fd
is not a valid file descriptor.
.TP
.B EINVAL
.I fd
refers to a namespace whose type does not match that specified in
.IR nstype .
.TP
.B EINVAL
There is problem with reassociating
the thread with the specified namespace.
.TP
.\" See kernel/pid_namespace.c::pidns_install() [kernel 3.18 sources]
.B EINVAL
The caller tried to join an ancestor (parent, grandparent, and so on)
PID namespace.
.TP
.B EINVAL
The caller attempted to join the user namespace
in which it is already a member.
.TP
.B EINVAL
.\" commit e66eded8309ebf679d3d3c1f5820d1f2ca332c71
The caller shares filesystem
.RB ( CLONE_FS )
state (in particular, the root directory)
with other processes and tried to join a new user namespace.
.TP
.B EINVAL
.\" See kernel/user_namespace.c::userns_install() [kernel 3.15 sources]
The caller is multithreaded and tried to join a new user namespace.
.TP
.B ENOMEM
Cannot allocate sufficient memory to change the specified namespace.
.TP
.B EPERM
The calling thread did not have the required capability
for this operation.
.SH VERSIONS
The
.BR setns ()
system call first appeared in Linux in kernel 3.0;
library support was added to glibc in version 2.14.
.SH CONFORMING TO
The
.BR setns ()
system call is Linux-specific.
.SH NOTES
Not all of the attributes that can be shared when
a new thread is created using
.BR clone (2)
can be changed using
.BR setns ().
.SH EXAMPLE
The program below takes two or more arguments.
The first argument specifies the pathname of a namespace file in an existing
.I /proc/[pid]/ns/
directory.
The remaining arguments specify a command and its arguments.
The program opens the namespace file, joins that namespace using
.BR setns (),
and executes the specified command inside that namespace.

The following shell session demonstrates the use of this program
(compiled as a binary named
.IR ns_exec )
in conjunction with the
.BR CLONE_NEWUTS
example program in the
.BR clone (2)
man page (complied as a binary named
.IR newuts ).

We begin by executing the example program in
.BR clone (2)
in the background.
That program creates a child in a separate UTS namespace.
The child changes the hostname in its namespace,
and then both processes display the hostnames in their UTS namespaces,
so that we can see that they are different.

.nf
.in +4n
$ \fBsu\fP                   # Need privilege for namespace operations
Password:
# \fB./newuts bizarro &\fP
[1] 3549
clone() returned 3550
uts.nodename in child:  bizarro
uts.nodename in parent: antero
# \fBuname \-n\fP             # Verify hostname in the shell
antero
.in
.fi

We then run the program shown below,
using it to execute a shell.
Inside that shell, we verify that the hostname is the one
set by the child created by the first program:

.nf
.in +4n
# \fB./ns_exec /proc/3550/ns/uts /bin/bash\fP
# \fBuname \-n\fP             # Executed in shell started by ns_exec
bizarro
.in
.fi
.SS Program source
.nf
#define _GNU_SOURCE
#include <fcntl.h>
#include <sched.h>
#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>

#define errExit(msg)    do { perror(msg); exit(EXIT_FAILURE); \\
                        } while (0)

int
main(int argc, char *argv[])
{
    int fd;

    if (argc < 3) {
        fprintf(stderr, "%s /proc/PID/ns/FILE cmd args...\\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    fd = open(argv[1], O_RDONLY);  /* Get descriptor for namespace */
    if (fd == \-1)
        errExit("open");

    if (setns(fd, 0) == \-1)        /* Join that namespace */
        errExit("setns");

    execvp(argv[2], &argv[2]);     /* Execute a command in namespace */
    errExit("execvp");
}
.fi
.SH SEE ALSO
.BR clone (2),
.BR fork (2),
.BR unshare (2),
.BR vfork (2),
.BR namespaces (7),
.BR unix (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1983, 1991 Regents of the University of California.
.\" and Copyright (C) 2007, Michael Kerrisk <mtk.manpages@gmail.com>
.\" All rights reserved.
.\"
.\" %%%LICENSE_START(BSD_4_CLAUSE_UCB)
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\" %%%LICENSE_END
.\"
.\"     @(#)getpgrp.2	6.4 (Berkeley) 3/10/91
.\"
.\" Modified 1993-07-24 by Rik Faith <faith@cs.unc.edu>
.\" Modified 1995-04-15 by Michael Chastain <mec@shell.portal.com>:
.\"   Added 'getpgid'.
.\" Modified 1996-07-21 by Andries Brouwer <aeb@cwi.nl>
.\" Modified 1996-11-06 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified 1999-09-02 by Michael Haardt <michael@moria.de>
.\" Modified 2002-01-18 by Michael Kerrisk <mtk.manpages@gmail.com>
.\" Modified 2003-01-20 by Andries Brouwer <aeb@cwi.nl>
.\" 2007-07-25, mtk, fairly substantial rewrites and rearrangements
.\" of text.
.\"
.TH SETPGID 2 2014-01-07 "Linux" "Linux Programmer's Manual"
.SH NAME
setpgid, getpgid, setpgrp, getpgrp \- set/get process group
.SH SYNOPSIS
.B #include <unistd.h>
.sp
.BI "int setpgid(pid_t " pid ", pid_t " pgid );
.br
.BI "pid_t getpgid(pid_t " pid );
.sp
.BR "pid_t getpgrp(void);" "                 /* POSIX.1 version */"
.br
.BI "pid_t getpgrp(pid_t " pid ");\ \ \ \ \ \ \ \ \ \ \ "
/* BSD version */
.sp
.BR "int setpgrp(void);" "                   /* System V version */"
.br
.BI "int setpgrp(pid_t " pid ", pid_t " pgid ");\ "
/* BSD version */
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.PD 0
.BR getpgid ():
.RS 4
_XOPEN_SOURCE\ >=\ 500 ||
_XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED
.br
|| /* Since glibc 2.12: */ _POSIX_C_SOURCE\ >=\ 200809L
.RE
.sp
.BR setpgrp "() (POSIX.1):"
.nf
    _SVID_SOURCE || _XOPEN_SOURCE\ >=\ 500 ||
    _XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED
.br
    || /* Since glibc 2.19: */ _BSD_SOURCE
.fi
.sp
.BR setpgrp "()\ (BSD),"
.BR getpgrp "()\ (BSD) [before glibc 2.19]:"
.nf
    _BSD_SOURCE &&
        !\ (_POSIX_SOURCE || _POSIX_C_SOURCE || _XOPEN_SOURCE ||
           _XOPEN_SOURCE_EXTENDED || _GNU_SOURCE || _SVID_SOURCE)
.fi
.PD
.ad
.SH DESCRIPTION
All of these interfaces are available on Linux,
and are used for getting and setting the
process group ID (PGID) of a process.
The preferred, POSIX.1-specified ways of doing this are:
.BR getpgrp (void),
for retrieving the calling process's PGID; and
.BR setpgid (),
for setting a process's PGID.

.BR setpgid ()
sets the PGID of the process specified by
.I pid
to
.IR pgid .
If
.I pid
is zero, then the process ID of the calling process is used.
If
.I pgid
is zero, then the PGID of the process specified by
.I pid
is made the same as its process ID.
If
.BR setpgid ()
is used to move a process from one process
group to another (as is done by some shells when creating pipelines),
both process groups must be part of the same session (see
.BR setsid (2)
and
.BR credentials (7)).
In this case,
the \fIpgid\fP specifies an existing process group to be joined and the
session ID of that group must match the session ID of the joining process.

The POSIX.1 version of
.BR getpgrp (),
which takes no arguments,
returns the PGID of the calling process.

.BR getpgid ()
returns the PGID of the process specified by
.IR pid .
If
.I pid
is zero, the process ID of the calling process is used.
(Retrieving the PGID of a process other than the caller is rarely
necessary, and the POSIX.1
.BR getpgrp ()
is preferred for that task.)

The System\ V-style
.BR setpgrp (),
which takes no arguments, is equivalent to
.IR "setpgid(0,\ 0)" .

The BSD-specific
.BR setpgrp ()
call, which takes arguments
.I pid
and
.IR pgid ,
is a wrapper function that calls

    setpgid(pid, pgid)

.\" The true BSD setpgrp() system call differs in allowing the PGID
.\" to be set to arbitrary values, rather than being restricted to
.\" PGIDs in the same session.
Since glibc 2.19, the BSD-specific
.BR setpgrp ()
function is no longer exposed by
.IR <unistd.h> ;
calls should be replaced with the
.BR setpgid ()
call shown above.

The BSD-specific
.BR getpgrp ()
call, which takes a single
.I pid
argument, is a wrapper function that calls

    getpgid(pid)

Since glibc 2.19, the BSD-specific
.BR getpgrp ()
function is no longer exposed by
.IR <unistd.h> ;
calls should be replaced with calls to the POSIX.1
.BR getpgrp ()
which takes no arguments (if the intent is to obtain the caller's PGID),
or with the
.BR getpgid ()
call shown above.
.SH RETURN VALUE
On success,
.BR setpgid ()
and
.BR setpgrp ()
return zero.
On error, \-1 is returned, and
.I errno
is set appropriately.

The POSIX.1
.BR getpgrp ()
always returns the PGID of the caller.

.BR getpgid (),
and the BSD-specific
.BR getpgrp ()
return a process group on success.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EACCES
An attempt was made to change the process group ID
of one of the children of the calling process and the child had
already performed an
.BR execve (2)
.RB ( setpgid (),
.BR setpgrp ()).
.TP
.B EINVAL
.I pgid
is less than 0
.RB ( setpgid (),
.BR setpgrp ()).
.TP
.B EPERM
An attempt was made to move a process into a process group in a
different session, or to change the process
group ID of one of the children of the calling process and the
child was in a different session, or to change the process group ID of
a session leader
.RB ( setpgid (),
.BR setpgrp ()).
.TP
.B ESRCH
For
.BR getpgid ():
.I pid
does not match any process.
For
.BR setpgid ():
.I pid
is not the calling process and not a child of the calling process.
.SH CONFORMING TO
.BR setpgid ()
and the version of
.BR getpgrp ()
with no arguments
conform to POSIX.1-2001.

POSIX.1-2001 also specifies
.BR getpgid ()
and the version of
.BR setpgrp ()
that takes no arguments.
(POSIX.1-2008 marks this
.BR setpgrp ()
specification as obsolete.)

The version of
.BR getpgrp ()
with one argument and the version of
.BR setpgrp ()
that takes two arguments derive from 4.2BSD,
and are not specified by POSIX.1.
.SH NOTES
A child created via
.BR fork (2)
inherits its parent's process group ID.
The PGID is preserved across an
.BR execve (2).

Each process group is a member of a session and each process is a
member of the session of which its process group is a member.

A session can have a controlling terminal.
At any time, one (and only one) of the process groups
in the session can be the foreground process group
for the terminal;
the remaining process groups are in the background.
If a signal is generated from the terminal (e.g., typing the
interrupt key to generate
.BR SIGINT ),
that signal is sent to the foreground process group.
(See
.BR termios (3)
for a description of the characters that generate signals.)
Only the foreground process group may
.BR read (2)
from the terminal;
if a background process group tries to
.BR read (2)
from the terminal, then the group is sent a
.B SIGTTIN
signal, which suspends it.
The
.BR tcgetpgrp (3)
and
.BR tcsetpgrp (3)
functions are used to get/set the foreground
process group of the controlling terminal.

The
.BR setpgid ()
and
.BR getpgrp ()
calls are used by programs such as
.BR bash (1)
to create process groups in order to implement shell job control.

If a session has a controlling terminal, and the
.B CLOCAL
flag for that terminal is not set,
and a terminal hangup occurs, then the session leader is sent a
.BR SIGHUP .
If the session leader exits, then a
.B SIGHUP
signal will also be sent to each process in the foreground
process group of the controlling terminal.

If the exit of the process causes a process group to become orphaned,
and if any member of the newly orphaned process group is stopped, then a
.B SIGHUP
signal followed by a
.B SIGCONT
signal will be sent to each process
in the newly orphaned process group.
.\" exit.3 refers to the following text:
An orphaned process group is one in which the parent of
every member of process group is either itself also a member
of the process group or is a member of a process group
in a different session (see also
.BR credentials (7)).
.SH SEE ALSO
.BR getuid (2),
.BR setsid (2),
.BR tcgetpgrp (3),
.BR tcsetpgrp (3),
.BR termios (3),
.BR credentials (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 1997 Andries Brouwer (aeb@cwi.nl)
.\" and Copyright (C) 2005, 2010, 2014, 2015, Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified, 2003-05-26, Michael Kerrisk, <mtk.manpages@gmail.com>
.TH SETRESUID 2 2015-03-29 "Linux" "Linux Programmer's Manual"
.SH NAME
setresuid, setresgid \- set real, effective and saved user or group ID
.SH SYNOPSIS
.BR "#define _GNU_SOURCE" "         /* See feature_test_macros(7) */"
.br
.B #include <unistd.h>
.sp
.BI "int setresuid(uid_t " ruid ", uid_t " euid ", uid_t " suid );
.br
.BI "int setresgid(gid_t " rgid ", gid_t " egid ", gid_t " sgid );
.SH DESCRIPTION
.BR setresuid ()
sets the real user ID, the effective user ID, and the
saved set-user-ID of the calling process.

Unprivileged user processes
may change the real UID,
effective UID, and saved set-user-ID, each to one of:
the current real UID, the current effective UID or the
current saved set-user-ID.

Privileged processes (on Linux, those having the \fBCAP_SETUID\fP capability)
may set the real UID, effective UID, and
saved set-user-ID to arbitrary values.

If one of the arguments equals \-1, the corresponding value is not changed.

Regardless of what changes are made to the real UID, effective UID,
and saved set-user-ID, the filesystem UID is always set to the same
value as the (possibly new) effective UID.

Completely analogously,
.BR setresgid ()
sets the real GID, effective GID, and saved set-group-ID
of the calling process (and always modifies the filesystem GID
to be the same as the effective GID),
with the same restrictions for unprivileged processes.
.SH RETURN VALUE
On success, zero is returned.
On error, \-1 is returned, and
.I errno
is set appropriately.

.IR Note :
there are cases where
.BR setresuid ()
can fail even when the caller is UID 0;
it is a grave security error to omit checking for a failure return from
.BR setresuid ().
.SH ERRORS
.TP
.B EAGAIN
The call would change the caller's real UID (i.e.,
.I ruid
does not match the caller's real UID),
but there was a temporary failure allocating the
necessary kernel data structures.
.TP
.B EAGAIN
.I ruid
does not match the caller's real UID and this call would
bring the number of processes belonging to the real user ID
.I ruid
over the caller's
.B RLIMIT_NPROC
resource limit.
Since Linux 3.1, this error case no longer occurs
(but robust applications should check for this error);
see the description of
.B EAGAIN
in
.BR execve (2).
.TP
.B EINVAL
One or more of the target user or group IDs
is not valid in this user namespace.
.TP
.B EPERM
The calling process is not privileged (did not have the \fBCAP_SETUID\fP
capability) and tried to change the IDs to values that are not permitted.
.SH VERSIONS
These calls are available under Linux since Linux 2.1.44.
.SH CONFORMING TO
These calls are nonstandard;
they also appear on HP-UX and some of the BSDs.
.SH NOTES
Under HP-UX and FreeBSD, the prototype is found in
.IR <unistd.h> .
Under Linux, the prototype is provided by glibc since version 2.3.2.

The original Linux
.BR setresuid ()
and
.BR setresgid ()
system calls supported only 16-bit user and group IDs.
Subsequently, Linux 2.4 added
.BR setresuid32 ()
and
.BR setresgid32 (),
supporting 32-bit IDs.
The glibc
.BR setresuid ()
and
.BR setresgid ()
wrapper functions transparently deal with the variations across kernel versions.
.\"
.SS C library/kernel ABI differences
At the kernel level, user IDs and group IDs are a per-thread attribute.
However, POSIX requires that all threads in a process
share the same credentials.
The NPTL threading implementation handles the POSIX requirements by
providing wrapper functions for
the various system calls that change process UIDs and GIDs.
These wrapper functions (including those for
.BR setresuid ()
and
.BR setresgid ())
employ a signal-based technique to ensure
that when one thread changes credentials,
all of the other threads in the process also change their credentials.
For details, see
.BR nptl (7).
.SH SEE ALSO
.BR getresuid (2),
.BR getuid (2),
.BR setfsgid (2),
.BR setfsuid (2),
.BR setreuid (2),
.BR setuid (2),
.BR capabilities (7),
.BR credentials (7),
.BR user_namespaces (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1983, 1991 The Regents of the University of California.
.\" and Copyright (C) 2009, 2010, 2014, 2015, Michael Kerrisk <mtk.manpages@gmail.com>
.\" All rights reserved.
.\"
.\" %%%LICENSE_START(BSD_4_CLAUSE_UCB)
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\" %%%LICENSE_END
.\"
.\"     @(#)setregid.2	6.4 (Berkeley) 3/10/91
.\"
.\" Modified Sat Jul 24 09:08:49 1993 by Rik Faith <faith@cs.unc.edu>
.\" Portions extracted from linux/kernel/sys.c:
.\"             Copyright (C) 1991, 1992  Linus Torvalds
.\"             May be distributed under the GNU General Public License
.\" Changes: 1994-07-29 by Wilf <G.Wilford@ee.surrey.ac.uk>
.\"          1994-08-02 by Wilf due to change in kernel.
.\"          2004-07-04 by aeb
.\"          2004-05-27 by Michael Kerrisk
.\"
.TH SETREUID 2 2015-03-29 "Linux" "Linux Programmer's Manual"
.SH NAME
setreuid, setregid \- set real and/or effective user or group ID
.SH SYNOPSIS
.B #include <sys/types.h>
.br
.B #include <unistd.h>
.sp
.BI "int setreuid(uid_t " ruid ", uid_t " euid );
.br
.BI "int setregid(gid_t " rgid ", gid_t " egid );
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR setreuid (),
.BR setregid ():
.RS 4
.ad l
_BSD_SOURCE || _XOPEN_SOURCE\ >=\ 500 ||
_XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED
.ad
.RE
.SH DESCRIPTION
.BR setreuid ()
sets real and effective user IDs of the calling process.

Supplying a value of \-1 for either the real or effective user ID forces
the system to leave that ID unchanged.

Unprivileged processes may only set the effective user ID to the real user ID,
the effective user ID, or the saved set-user-ID.

Unprivileged users may only set the real user ID to
the real user ID or the effective user ID.

If the real user ID is set (i.e.,
.I ruid
is not \-1) or the effective user ID is set to a value
not equal to the previous real user ID,
the saved set-user-ID will be set to the new effective user ID.

Completely analogously,
.BR setregid ()
sets real and effective group ID's of the calling process,
and all of the above holds with "group" instead of "user".
.SH RETURN VALUE
On success, zero is returned.
On error, \-1 is returned, and
.I errno
is set appropriately.

.IR Note :
there are cases where
.BR setreuid ()
can fail even when the caller is UID 0;
it is a grave security error to omit checking for a failure return from
.BR setreuid ().
.SH ERRORS
.TP
.B EAGAIN
The call would change the caller's real UID (i.e.,
.I ruid
does not match the caller's real UID),
but there was a temporary failure allocating the
necessary kernel data structures.
.TP
.B EAGAIN
.I ruid
does not match the caller's real UID and this call would
bring the number of processes belonging to the real user ID
.I ruid
over the caller's
.B RLIMIT_NPROC
resource limit.
Since Linux 3.1, this error case no longer occurs
(but robust applications should check for this error);
see the description of
.B EAGAIN
in
.BR execve (2).
.TP
.B EINVAL
One or more of the target user or group IDs
is not valid in this user namespace.
.TP
.B EPERM
The calling process is not privileged
(Linux: does not have the
.B CAP_SETUID
capability in the case of
.BR setreuid (),
or the
.B CAP_SETGID
capability in the case of
.BR setregid ())
and a change other than (i)
swapping the effective user (group) ID with the real user (group) ID,
or (ii) setting one to the value of the other or (iii) setting the
effective user (group) ID to the value of the
saved set-user-ID (saved set-group-ID) was specified.
.SH CONFORMING TO
POSIX.1-2001, 4.3BSD (the
.BR setreuid ()
and
.BR setregid ()
function calls first appeared in 4.2BSD).
.SH NOTES
Setting the effective user (group) ID to the
saved set-user-ID (saved set-group-ID) is
possible since Linux 1.1.37 (1.1.38).

POSIX.1 does not specify all of the UID changes that Linux permits
for an unprivileged process.
For
.BR setreuid (),
the effective user ID can be made the same as the
real user ID or the saved set-user-ID,
and it is unspecified whether unprivileged processes may set the
real user ID to the real user ID, the effective user ID, or the
saved set-user-ID.
For
.BR setregid (),
the real group ID can be changed to the value of the saved set-group-ID,
and the effective group ID can be changed to the value of
the real group ID or the saved set-group-ID.
The precise details of what ID changes are permitted vary
across implementations.

POSIX.1 makes no specification about the effect of these calls
on the saved set-user-ID and saved set-group-ID.

The original Linux
.BR setreuid ()
and
.BR setregid ()
system calls supported only 16-bit user and group IDs.
Subsequently, Linux 2.4 added
.BR setreuid32 ()
and
.BR setregid32 (),
supporting 32-bit IDs.
The glibc
.BR setreuid ()
and
.BR setregid ()
wrapper functions transparently deal with the variations across kernel versions.
.\"
.SS C library/kernel ABI differences
At the kernel level, user IDs and group IDs are a per-thread attribute.
However, POSIX requires that all threads in a process
share the same credentials.
The NPTL threading implementation handles the POSIX requirements by
providing wrapper functions for
the various system calls that change process UIDs and GIDs.
These wrapper functions (including those for
.BR setreuid ()
and
.BR setregid ())
employ a signal-based technique to ensure
that when one thread changes credentials,
all of the other threads in the process also change their credentials.
For details, see
.BR nptl (7).
.SH SEE ALSO
.BR getgid (2),
.BR getuid (2),
.BR seteuid (2),
.BR setgid (2),
.BR setresuid (2),
.BR setuid (2),
.BR capabilities (7),
.BR credentials (7),
.BR user_namespaces (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright Michael Haardt (michael@cantor.informatik.rwth-aachen.de)
.\"     Sat Aug 27 20:43:50 MET DST 1994
.\" and Copyright (C) 2014, Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.\" Modified Sun Sep 11 19:19:05 1994 <faith@cs.unc.edu>
.\" Modified Mon Mar 25 10:19:00 1996 <aeb@cwi.nl> (merged a few
.\"	tiny changes from a man page by Charles Livingston).
.\" Modified Sun Jul 21 14:45:46 1996 <aeb@cwi.nl>
.\"
.TH SETSID 2 2014-12-31 "Linux" "Linux Programmer's Manual"
.SH NAME
setsid \- creates a session and sets the process group ID
.SH SYNOPSIS
.ad l
.B #include <unistd.h>
.sp
.B pid_t setsid(void);
.br
.ad b
.SH DESCRIPTION
.BR setsid ()
creates a new session if the calling process is not a
process group leader.
The calling process is the leader of the new session
(i.e., its session ID is made the same as it process ID).
The calling process also becomes
the process group leader of a new process group in the session
(i.e., its process group ID is made the same as it process ID).

The calling process will be the only process in
the new process group and in the new session.
The new session has no controlling terminal.
.SH RETURN VALUE
On success, the (new) session ID of the calling process is returned.
On error,
.I "(pid_t)\ \-1"
is returned, and
.I errno
is set to indicate the error.
.SH ERRORS
.TP
.B EPERM
The process group ID of any process equals the PID of the calling process.
Thus, in particular,
.BR setsid ()
fails if the calling process is already a process group leader.
.SH CONFORMING TO
SVr4, POSIX.1-2001.
.SH NOTES
A child created via
.BR fork (2)
inherits its parent's session ID.
The session ID is preserved across an
.BR execve (2).

A process group leader is a process whose process group ID equals its PID.
Disallowing a process group leader from calling
.BR setsid ()
prevents the possibility that a process group leader places itself
in a new session while other processes in the process group remain
in the original session;
such a scenario would break the strict
two-level hierarchy of sessions and process groups.
In order to be sure that
.BR setsid ()
will succeed,
.BR fork (2)
and
.BR _exit (2),
and have the child do
.BR setsid ().
.SH SEE ALSO
.BR setsid (1),
.BR getsid (2),
.BR setpgid (2),
.BR setpgrp (2),
.BR tcgetsid (3),
.BR credentials (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2003 Free Software Foundation, Inc.
.\" Copyright (C) 2015 Andrew Lutomirski
.\" Author: Kent Yoder
.\"
.\" %%%LICENSE_START(GPL_NOVERSION_ONELINE)
.\" This file is distributed according to the GNU General Public License.
.\" %%%LICENSE_END
.\"
.TH SET_THREAD_AREA 2 2015-02-21 "Linux" "Linux Programmer's Manual"
.SH NAME
set_thread_area \- set a GDT entry for thread-local storage
.SH SYNOPSIS
.nf
.B #include <linux/unistd.h>
.B #include <asm/ldt.h>

.BI "int get_thread_area(struct user_desc *" u_info );
.BI "int set_thread_area(struct user_desc *" u_info );
.fi

.IR Note :
There are no glibc wrappers for these system calls; see NOTES.
.SH DESCRIPTION
Linux dedicates three global descriptor table (GDT) entries for
thread-local storage.
For more information about the GDT, see the
Intel Software Developer's Manual or the AMD Architecture Programming Manual.

Both of these system calls take an argument that is a pointer
to a structure of the following type:

.in +4n
struct user_desc {
    unsigned int  entry_number;
    unsigned long base_addr;
    unsigned int  limit;
    unsigned int  seg_32bit:1;
    unsigned int  contents:2;
    unsigned int  read_exec_only:1;
    unsigned int  limit_in_pages:1;
    unsigned int  seg_not_present:1;
    unsigned int  useable:1;
};
.in

.BR get_thread_area ()
reads the GDT entry indicated by
.I u_info\->entry_number
and fills in the rest of the fields in
.IR u_info .

.BR set_thread_area ()
sets a TLS entry in the GDT.
.PP
The TLS array entry set by
.BR set_thread_area ()
corresponds to the value of
.I u_info\->entry_number
passed in by the user.
If this value is in bounds,
.BR set_thread_area ()
writes the TLS descriptor pointed to by
.I u_info
into the thread's TLS array.
.PP
When
.BR set_thread_area ()
is passed an
.I entry_number
of \-1, it searches for a free TLS entry.
If
.BR set_thread_area ()
finds a free TLS entry, the value of
.I u_info\->entry_number
is set upon return to show which entry was changed.
.PP
A
.I user_desc
is considered "empty" if
.I read_exec_only
and
.I seg_not_present
are set to 1 and all of the other fields are 0.
If an "empty" descriptor is passed to
.BR set_thread_area,
the corresponding TLS entry will be cleared.
See BUGS for additional details.
.PP
Since Linux 3.19,
.BR set_thread_area ()
cannot be used to write non-present segments, 16-bit segments, or code
segments, although clearing a segment is still acceptable.
.SH RETURN VALUE
These system calls
return 0 on success, and \-1 on failure, with
.I errno
set appropriately.
.SH ERRORS
.TP
.B EFAULT
\fIu_info\fP is an invalid pointer.
.TP
.B EINVAL
\fIu_info\->entry_number\fP is out of bounds.
.TP
.B ENOSYS
.BR get_thread_area (2)
or
.BR set_thread_area (2)
was invoked as a 64-bit system call.
.TP
.B ESRCH
.RB ( set_thread_area ())
A free TLS entry could not be located.
.SH VERSIONS
.BR set_thread_area ()
first appeared in Linux 2.5.29.
.BR get_thread_area ()
first appeared in Linux 2.5.32.
.SH CONFORMING TO
.BR set_thread_area ()
is Linux-specific and should not be used in programs that are intended
to be portable.
.SH NOTES
Glibc does not provide wrappers for these system calls,
since they are generally intended for use only by threading libraries.
In the unlikely event that you want to call them directly, use
.BR syscall (2).
.PP
.BR arch_prctl (2)
can interfere with
.BR set_thread_area (2).
See
.BR arch_prctl (2)
for more details.
This is not normally a problem, as
.BR arch_prctl (2)
is normally used only by 64-bit programs.
.SH BUGS
On 64-bit kernels before Linux 3.19,
.\" commit e30ab185c490e9a9381385529e0fd32f0a399495
one of the padding bits in
.IR user_desc ,
if set, would prevent the descriptor from being considered empty (see
.BR modify_ldt (2)).
As a result, the only reliable way to clear a TLS entry is to use
.BR memset (3)
to zero the entire
.I user_desc
structure, including padding bits, and then to set the
.I read_exec_only
and
.I seg_not_present
bits.
On Linux 3.19, a
.I user_desc
consisting entirely of zeros except for
.I entry_number
will also be interpreted as a request to clear a TLS entry, but this
behaved differently on older kernels.
.PP
Prior to Linux 3.19, the DS and ES segment registers must not reference
TLS entries.
.SH SEE ALSO
.BR arch_prctl (2),
.BR modify_ldt (2)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2004 Andries Brouwer (aeb@cwi.nl)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH SET_TID_ADDRESS 2 2014-07-08 "Linux" "Linux Programmer's Manual"
.SH NAME
set_tid_address \- set pointer to thread ID
.SH SYNOPSIS
.nf
.B #include <linux/unistd.h>
.sp
.BI "long set_tid_address(int *" tidptr );
.fi
.SH DESCRIPTION
For each thread, the kernel maintains two attributes (addresses) called
.I set_child_tid
and
.IR clear_child_tid .
These two attributes contain the value NULL by default.
.TP
.I set_child_tid
If a thread is started using
.BR clone (2)
with the
.B CLONE_CHILD_SETTID
flag,
.I set_child_tid
is set to the value passed in the
.I ctid
argument of that system call.
.IP
When
.I set_child_tid
is set, the very first thing the new thread does
is to write its thread ID at this address.
.TP
.I clear_child_tid
If a thread is started using
.BR clone (2)
with the
.B CLONE_CHILD_CLEARTID
flag,
.I clear_child_tid
is set to the value passed in the
.I ctid
argument of that system call.
.LP
The system call
.BR set_tid_address ()
sets the
.I clear_child_tid
value for the calling thread to
.IR tidptr .
.LP
When a thread whose
.I clear_child_tid
is not NULL terminates, then,
if the thread is sharing memory with other threads,
then 0 is written at the address specified in
.I clear_child_tid
and the kernel performs the following operation:

    futex(clear_child_tid, FUTEX_WAKE, 1, NULL, NULL, 0);

The effect of this operation is to wake a single thread that
is performing a futex wait on the memory location.
Errors from the futex wake operation are ignored.
.SH RETURN VALUE
.BR set_tid_address ()
always returns the caller's thread ID.
.SH ERRORS
.BR set_tid_address ()
always succeeds.
.SH VERSIONS
This call is present since Linux 2.5.48.
Details as given here are valid since Linux 2.5.49.
.SH CONFORMING TO
This system call is Linux-specific.
.SH SEE ALSO
.BR clone (2),
.BR futex (2),
.BR gettid (2)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C), 1994, Graeme W. Wilford (Wilf).
.\" and Copyright (C) 2010, 2014, 2015, Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Fri Jul 29th 12:56:44 BST 1994  Wilf. <G.Wilford@ee.surrey.ac.uk>
.\" Changes inspired by patch from Richard Kettlewell
.\"   <richard@greenend.org.uk>, aeb 970616.
.\" Modified, 27 May 2004, Michael Kerrisk <mtk.manpages@gmail.com>
.\"     Added notes on capability requirements
.TH SETUID 2 2015-03-29 "Linux" "Linux Programmer's Manual"
.SH NAME
setuid \- set user identity
.SH SYNOPSIS
.B #include <sys/types.h>
.br
.B #include <unistd.h>
.sp
.BI "int setuid(uid_t " uid );
.SH DESCRIPTION
.BR setuid ()
sets the effective user ID of the calling process.
If the effective UID of the caller is root
(more precisely: if the caller has the
.BR CAP_SETUID
capability),
the real UID and saved set-user-ID are also set.
.PP
Under Linux,
.BR setuid ()
is implemented like the POSIX version with the
.B _POSIX_SAVED_IDS
feature.
This allows a set-user-ID (other than root) program to drop all of its user
privileges, do some un-privileged work, and then reengage the original
effective user ID in a secure manner.
.PP
If the user is root or the program is set-user-ID-root, special care must be
taken.
The
.BR setuid ()
function checks the effective user ID of the caller and if it is
the superuser, all process-related user ID's are set to
.IR uid .
After this has occurred, it is impossible for the program to regain root
privileges.
.PP
Thus, a set-user-ID-root program wishing to temporarily drop root
privileges, assume the identity of an unprivileged user, and then regain
root privileges afterward cannot use
.BR setuid ().
You can accomplish this with
.BR seteuid (2).
.SH RETURN VALUE
On success, zero is returned.
On error, \-1 is returned, and
.I errno
is set appropriately.

.IR Note :
there are cases where
.BR setuid ()
can fail even when the caller is UID 0;
it is a grave security error to omit checking for a failure return from
.BR setuid ().
.SH ERRORS
.TP
.B EAGAIN
The call would change the caller's real UID (i.e.,
.I uid
does not match the caller's real UID),
but there was a temporary failure allocating the
necessary kernel data structures.
.TP
.B EAGAIN
.I uid
does not match the real user ID of the caller and this call would
bring the number of processes belonging to the real user ID
.I uid
over the caller's
.B RLIMIT_NPROC
resource limit.
Since Linux 3.1, this error case no longer occurs
(but robust applications should check for this error);
see the description of
.B EAGAIN
in
.BR execve (2).
.TP
.B EINVAL
The user ID specified in
.I uid
is not valid in this user namespace.
.TP
.B EPERM
The user is not privileged (Linux: does not have the
.B CAP_SETUID
capability) and
.I uid
does not match the real UID or saved set-user-ID of the calling process.
.SH CONFORMING TO
SVr4, POSIX.1-2001.
Not quite compatible with the 4.4BSD call, which
sets all of the real, saved, and effective user IDs.
.\" SVr4 documents an additional EINVAL error condition.
.SH NOTES
Linux has the concept of the filesystem user ID, normally equal to the
effective user ID.
The
.BR setuid ()
call also sets the filesystem user ID of the calling process.
See
.BR setfsuid (2).
.PP
If
.I uid
is different from the old effective UID, the process will
be forbidden from leaving core dumps.

The original Linux
.BR setuid ()
system call supported only 16-bit user IDs.
Subsequently, Linux 2.4 added
.BR setuid32 ()
supporting 32-bit IDs.
The glibc
.BR setuid ()
wrapper function transparently deals with the variation across kernel versions.
.\"
.SS C library/kernel ABI differences
At the kernel level, user IDs and group IDs are a per-thread attribute.
However, POSIX requires that all threads in a process
share the same credentials.
The NPTL threading implementation handles the POSIX requirements by
providing wrapper functions for
the various system calls that change process UIDs and GIDs.
These wrapper functions (including the one for
.BR setuid ())
employ a signal-based technique to ensure
that when one thread changes credentials,
all of the other threads in the process also change their credentials.
For details, see
.BR nptl (7).
.SH SEE ALSO
.BR getuid (2),
.BR seteuid (2),
.BR setfsuid (2),
.BR setreuid (2),
.BR capabilities (7),
.BR credentials (7),
.BR user_namespaces (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1992 Drew Eckhardt (drew@cs.colorado.edu), March 28, 1992
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified by Michael Haardt <michael@moria.de>
.\" Modified Sun Jul 25 10:14:13 1993 by Rik Faith <faith@cs.unc.edu>
.\" Modified 15 April 1995 by Michael Chastain <mec@shell.portal.com>
.\"   Update calling parameters to Linux 1.2.4 values.
.\" Modified 10 June 1995 by Andries Brouwer <aeb@cwi.nl>
.\" Modified 3 May 1996 by Martin Schulze <joey@infodrom.north.de>
.\" Modified Wed Nov  6 04:05:28 1996 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified Sat Jan 29 01:08:23 2000 by aeb
.\"
.TH SETUP 2 2008-12-03 "Linux" "Linux Programmer's Manual"
.SH NAME
setup \- setup devices and filesystems, mount root filesystem
.SH SYNOPSIS
.B #include <unistd.h>
.sp
.B int setup(void);
.SH DESCRIPTION
.BR setup ()
is called once from within
.IR linux/init/main.c .
It calls initialization functions for devices and filesystems
configured into the kernel and then mounts the root filesystem.
.PP
No user process may call
.BR setup ().
Any user process, even a process with superuser permission,
will receive
.BR EPERM .
.SH RETURN VALUE
.BR setup ()
always returns \-1 for a user process.
.SH ERRORS
.TP
.B EPERM
Always, for a user process.
.SH VERSIONS
Since Linux 2.1.121, no such function exists anymore.
.SH CONFORMING TO
This function is Linux-specific, and should not be used in programs
intended to be portable, or indeed in any programs at all.
.SH NOTES
The calling sequence varied: at some times
.BR setup ()
has had a single argument
.I "void\ *BIOS"
and at other times a single argument
.IR "int magic" .
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) Andreas Gruenbacher, February 2001
.\" Copyright (C) Silicon Graphics Inc, September 2001
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.TH SETXATTR 2 2015-05-07 "Linux" "Linux Programmer's Manual"
.SH NAME
setxattr, lsetxattr, fsetxattr \- set an extended attribute value
.SH SYNOPSIS
.fam C
.nf
.B #include <sys/types.h>
.B #include <sys/xattr.h>
.sp
.BI "int setxattr(const char\ *" path ", const char\ *" name ,
.BI "              const void\ *" value ", size_t " size ", int " flags );
.BI "int lsetxattr(const char\ *" path ", const char\ *" name ,
.BI "              const void\ *" value ", size_t " size ", int " flags );
.BI "int fsetxattr(int " fd ", const char\ *" name ,
.BI "              const void\ *" value ", size_t " size ", int " flags );
.fi
.fam T
.SH DESCRIPTION
Extended attributes are
.IR name :\c
.I value
pairs associated with inodes (files, directories, symbolic links, etc.).
They are extensions to the normal attributes which are associated
with all inodes in the system (i.e., the
.BR stat (2)
data).
A complete overview of extended attributes concepts can be found in
.BR xattr (7).
.PP
.BR setxattr ()
sets the
.I value
of the extended attribute identified by
.I name
and associated with the given
.I path
in the filesystem.
The
.I size
argument specifies the size (in bytes) of
.IR value ;
a zero-length value is permitted.
.PP
.BR lsetxattr ()
is identical to
.BR setxattr (),
except in the case of a symbolic link, where the extended attribute is
set on the link itself, not the file that it refers to.
.PP
.BR fsetxattr ()
is identical to
.BR setxattr (),
only the extended attribute is set on the open file referred to by
.I fd
(as returned by
.BR open (2))
in place of
.IR path .
.PP
An extended attribute name is a null-terminated string.
The
.I name
includes a namespace prefix; there may be several, disjoint
namespaces associated with an individual inode.
The
.I value
of an extended attribute is a chunk of arbitrary textual or
binary data of specified length.
.PP
By default
(i.e.,
.IR flags
is zero),
the extended attribute will be created if it does not exist,
or the value will be replaced if the attribute already exists.
To modify these semantics, one of the following values can be specified in
.IR flags :
.TP
.B XATTR_CREATE
Perform a pure create, which fails if the named attribute exists already.
.TP
.B XATTR_REPLACE
Perform a pure replace operation,
which fails if the named attribute does not already exist.
.SH RETURN VALUE
On success, zero is returned.
On failure, \-1 is returned and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EDQUOT
Disk quota limits meant that
there is insufficient space remaining to store the extended attribute.
.TP
.B EEXIST
.B XATTR_CREATE
was specified, and the attribute exists already.
.TP
.B ENOATTR
.B XATTR_REPLACE
was specified, and the attribute does not exist.
.RB ( ENOATTR
is defined to be a synonym for
.BR ENODATA
in
.IR <attr/xattr.h> .)
.TP
.B ENOSPC
There is insufficient space remaining to store the extended attribute.
.TP
.B ENOTSUP
The namespace prefix of
.I name
is not valid.
.TP
.B ENOTSUP
Extended attributes are not supported by the filesystem, or are disabled,
.PP
In addition, the errors documented in
.BR stat (2)
can also occur.
.SH VERSIONS
These system calls have been available on Linux since kernel 2.4;
glibc support is provided since version 2.3.
.SH CONFORMING TO
These system calls are Linux-specific.
.\" .SH AUTHORS
.\" Andreas Gruenbacher,
.\" .RI < a.gruenbacher@computer.org >
.\" and the SGI XFS development team,
.\" .RI < linux-xfs@oss.sgi.com >.
.\" Please send any bug reports or comments to these addresses.
.SH SEE ALSO
.BR getfattr (1),
.BR setfattr (1),
.BR getxattr (2),
.BR listxattr (2),
.BR open (2),
.BR removexattr (2),
.BR stat (2),
.BR symlink (7),
.BR xattr (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
'\" t
.\" Copyright (c) 2007 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH SGETMASK 2  2014-12-31 "Linux" "Linux Programmer's Manual"
.SH NAME
sgetmask, ssetmask \- manipulation of signal mask (obsolete)
.SH SYNOPSIS
.B "long sgetmask(void);"
.sp
.BI "long ssetmask(long " newmask );

.IR Note :
There are no glibc wrappers for these system calls; see NOTES.
.SH DESCRIPTION
These system calls are obsolete.
.IR "Do not use them" ;
use
.BR sigprocmask (2)
instead.

.BR sgetmask ()
returns the signal mask of the calling process.

.BR ssetmask ()
sets the signal mask of the calling process to the value given in
.IR newmask .
The previous signal mask is returned.

The signal masks dealt with by these two system calls
are plain bit masks (unlike the
.I sigset_t
used by
.BR sigprocmask (2));
use
.BR sigmask (3)
to create and inspect these masks.
.SH RETURN VALUE
.BR sgetmask ()
always successfully returns the signal mask.
.BR ssetmask ()
always succeeds, and returns the previous signal mask.
.SH ERRORS
These system calls always succeed.
.SH VERSIONS
Since Linux 3.16,
.\" f6187769dae48234f3877df3c4d99294cc2254fa
support for these system calls is optional,
depending on whether the kernel was built with the
.B CONFIG_SGETMASK_SYSCALL
option.
.SH CONFORMING TO
These system calls are Linux-specific.
.SH NOTES
Glibc does not provide wrappers for these obsolete system calls;
in the unlikely event that you want to call them, use
.BR syscall (2).

These system calls are unaware of signal numbers greater than 31
(i.e., real-time signals).

These system calls do not exist on x86-64.

It is not possible to block
.B SIGSTOP
or
.BR SIGKILL .
.SH SEE ALSO
.BR sigprocmask (2),
.BR signal (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1993 Luigi P. Bai (lpb@softint.com) July 28, 1993
.\" and Copyright 1993 Giorgio Ciucci <giorgio@crcc.it>
.\" and Copyright 2004, 2005 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified 1993-07-28, Rik Faith <faith@cs.unc.edu>
.\" Modified 1993-11-28, Giorgio Ciucci <giorgio@crcc.it>
.\" Modified 1997-01-31, Eric S. Raymond <esr@thyrsus.com>
.\" Modified 2001-02-18, Andries Brouwer <aeb@cwi.nl>
.\" Modified 2002-01-05, 2004-05-27, 2004-06-17,
.\"    Michael Kerrisk <mtk.manpages@gmail.com>
.\" Modified 2004-10-11, aeb
.\" Modified, Nov 2004, Michael Kerrisk <mtk.manpages@gmail.com>
.\"	Language and formatting clean-ups
.\"	Updated shmid_ds structure definitions
.\"	Added information on SHM_DEST and SHM_LOCKED flags
.\"	Noted that CAP_IPC_LOCK is not required for SHM_UNLOCK
.\"		since kernel 2.6.9
.\" Modified, 2004-11-25, mtk, notes on 2.6.9 RLIMIT_MEMLOCK changes
.\" 2005-04-25, mtk -- noted aberrant Linux behavior w.r.t. new
.\"	attaches to a segment that has already been marked for deletion.
.\" 2005-08-02, mtk: Added IPC_INFO, SHM_INFO, SHM_STAT descriptions.
.\"
.TH SHMCTL 2 2014-02-07 "Linux" "Linux Programmer's Manual"
.SH NAME
shmctl \- System V shared memory control
.SH SYNOPSIS
.ad l
.B #include <sys/ipc.h>
.br
.B #include <sys/shm.h>
.sp
.BI "int shmctl(int " shmid ", int " cmd ", struct shmid_ds *" buf );
.ad b
.SH DESCRIPTION
.BR shmctl ()
performs the control operation specified by
.I cmd
on the System\ V shared memory segment whose identifier is given in
.IR shmid .
.PP
The
.I buf
argument is a pointer to a \fIshmid_ds\fP structure,
defined in \fI<sys/shm.h>\fP as follows:
.PP
.in +4n
.nf
struct shmid_ds {
    struct ipc_perm shm_perm;    /* Ownership and permissions */
    size_t          shm_segsz;   /* Size of segment (bytes) */
    time_t          shm_atime;   /* Last attach time */
    time_t          shm_dtime;   /* Last detach time */
    time_t          shm_ctime;   /* Last change time */
    pid_t           shm_cpid;    /* PID of creator */
    pid_t           shm_lpid;    /* PID of last shmat(2)/shmdt(2) */
    shmatt_t        shm_nattch;  /* No. of current attaches */
    ...
};
.fi
.in
.PP
The
.I ipc_perm
structure is defined as follows
(the highlighted fields are settable using
.BR IPC_SET ):
.PP
.in +4n
.nf
struct ipc_perm {
    key_t          __key;    /* Key supplied to shmget(2) */
    uid_t          \fBuid\fP;      /* Effective UID of owner */
    gid_t          \fBgid\fP;      /* Effective GID of owner */
    uid_t          cuid;     /* Effective UID of creator */
    gid_t          cgid;     /* Effective GID of creator */
    unsigned short \fBmode\fP;     /* \fBPermissions\fP + SHM_DEST and
                                SHM_LOCKED flags */
    unsigned short __seq;    /* Sequence number */
};
.fi
.in
.PP
Valid values for
.I cmd
are:
.br
.TP 10
.B IPC_STAT
Copy information from the kernel data structure associated with
.I shmid
into the
.I shmid_ds
structure pointed to by \fIbuf\fP.
The caller must have read permission on the
shared memory segment.
.TP
.B IPC_SET
Write the values of some members of the
.I shmid_ds
structure pointed to by
.I buf
to the kernel data structure associated with this shared memory segment,
updating also its
.I shm_ctime
member.
The following fields can be changed:
\fIshm_perm.uid\fP, \fIshm_perm.gid\fP,
and (the least significant 9 bits of) \fIshm_perm.mode\fP.
The effective UID of the calling process must match the owner
.RI ( shm_perm.uid )
or creator
.RI ( shm_perm.cuid )
of the shared memory segment, or the caller must be privileged.
.TP
.B IPC_RMID
Mark the segment to be destroyed.
The segment will actually be destroyed
only after the last process detaches it (i.e., when the
.I shm_nattch
member of the associated structure
.I shmid_ds
is zero).
The caller must be the owner or creator of the segment, or be privileged.
The
.I buf
argument is ignored.
.IP
If a segment has been marked for destruction, then the (nonstandard)
.B SHM_DEST
flag of the
.I shm_perm.mode
field in the associated data structure retrieved by
.B IPC_STAT
will be set.
.IP
The caller \fImust\fP ensure that a segment is eventually destroyed;
otherwise its pages that were faulted in will remain in memory or swap.
.IP
See also the description of
.I  /proc/sys/kernel/shm_rmid_forced
in
.BR proc (5).
.TP 10
.BR IPC_INFO " (Linux-specific)"
Return information about system-wide shared memory limits and
parameters in the structure pointed to by
.IR buf .
This structure is of type
.I shminfo
(thus, a cast is required),
defined in
.I <sys/shm.h>
if the
.B _GNU_SOURCE
feature test macro is defined:
.nf
.in +4n

struct shminfo {
    unsigned long shmmax; /* Maximum segment size */
    unsigned long shmmin; /* Minimum segment size;
                             always 1 */
    unsigned long shmmni; /* Maximum number of segments */
    unsigned long shmseg; /* Maximum number of segments
                             that a process can attach;
                             unused within kernel */
    unsigned long shmall; /* Maximum number of pages of
                             shared memory, system-wide */
};

.in
.fi
The
.IR shmmni ,
.IR shmmax ,
and
.I shmall
settings can be changed via
.I /proc
files of the same name; see
.BR proc (5)
for details.
.TP
.BR SHM_INFO " (Linux-specific)"
Return a
.I shm_info
structure whose fields contain information
about system resources consumed by shared memory.
This structure is defined in
.I <sys/shm.h>
if the
.B _GNU_SOURCE
feature test macro is defined:
.nf
.in +4n

struct shm_info {
    int           used_ids; /* # of currently existing
                               segments */
    unsigned long shm_tot;  /* Total number of shared
                               memory pages */
    unsigned long shm_rss;  /* # of resident shared
                               memory pages */
    unsigned long shm_swp;  /* # of swapped shared
                               memory pages */
    unsigned long swap_attempts;
                            /* Unused since Linux 2.4 */
    unsigned long swap_successes;
                            /* Unused since Linux 2.4 */
};
.in
.fi
.TP
.BR SHM_STAT " (Linux-specific)"
Return a
.I shmid_ds
structure as for
.BR IPC_STAT .
However, the
.I shmid
argument is not a segment identifier, but instead an index into
the kernel's internal array that maintains information about
all shared memory segments on the system.
.PP
The caller can prevent or allow swapping of a shared
memory segment with the following \fIcmd\fP values:
.br
.TP 10
.BR SHM_LOCK " (Linux-specific)"
Prevent swapping of the shared memory segment.
The caller must fault in
any pages that are required to be present after locking is enabled.
If a segment has been locked, then the (nonstandard)
.B SHM_LOCKED
flag of the
.I shm_perm.mode
field in the associated data structure retrieved by
.B IPC_STAT
will be set.
.TP
.BR SHM_UNLOCK " (Linux-specific)"
Unlock the segment, allowing it to be swapped out.
.PP
In kernels before 2.6.10, only a privileged process
could employ
.B SHM_LOCK
and
.BR SHM_UNLOCK .
Since kernel 2.6.10, an unprivileged process can employ these operations
if its effective UID matches the owner or creator UID of the segment, and
(for
.BR SHM_LOCK )
the amount of memory to be locked falls within the
.B RLIMIT_MEMLOCK
resource limit (see
.BR setrlimit (2)).
.\" There was some weirdness in 2.6.9: SHM_LOCK and SHM_UNLOCK could
.\" be applied to a segment, regardless of ownership of the segment.
.\" This was a botch-up in the move to RLIMIT_MEMLOCK, and was fixed
.\" in 2.6.10.  MTK, May 2005
.SH RETURN VALUE
A successful
.B IPC_INFO
or
.B SHM_INFO
operation returns the index of the highest used entry in the
kernel's internal array recording information about all
shared memory segments.
(This information can be used with repeated
.B SHM_STAT
operations to obtain information about all shared memory segments
on the system.)
A successful
.B SHM_STAT
operation returns the identifier of the shared memory segment
whose index was given in
.IR shmid .
Other operations return 0 on success.

On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EACCES
\fBIPC_STAT\fP or \fBSHM_STAT\fP is requested and
\fIshm_perm.mode\fP does not allow read access for
.IR shmid ,
and the calling process does not have the
.B CAP_IPC_OWNER
capability.
.TP
.B EFAULT
The argument
.I cmd
has value
.B IPC_SET
or
.B IPC_STAT
but the address pointed to by
.I buf
isn't accessible.
.TP
.B EIDRM
\fIshmid\fP points to a removed identifier.
.TP
.B EINVAL
\fIshmid\fP is not a valid identifier, or \fIcmd\fP
is not a valid command.
Or: for a
.B SHM_STAT
operation, the index value specified in
.I shmid
referred to an array slot that is currently unused.
.TP
.B ENOMEM
(In kernels since 2.6.9),
.B SHM_LOCK
was specified and the size of the to-be-locked segment would mean
that the total bytes in locked shared memory segments would exceed
the limit for the real user ID of the calling process.
This limit is defined by the
.B RLIMIT_MEMLOCK
soft resource limit (see
.BR setrlimit (2)).
.TP
.B EOVERFLOW
\fBIPC_STAT\fP is attempted, and the GID or UID value
is too large to be stored in the structure pointed to by
.IR buf .
.TP
.B EPERM
\fBIPC_SET\fP or \fBIPC_RMID\fP is attempted, and the
effective user ID of the calling process is not that of the creator
(found in
.IR shm_perm.cuid ),
or the owner
(found in
.IR shm_perm.uid ),
and the process was not privileged (Linux: did not have the
.B CAP_SYS_ADMIN
capability).

Or (in kernels before 2.6.9),
.B SHM_LOCK
or
.B SHM_UNLOCK
was specified, but the process was not privileged
(Linux: did not have the
.B CAP_IPC_LOCK
capability).
(Since Linux 2.6.9, this error can also occur if the
.B RLIMIT_MEMLOCK
is 0 and the caller is not privileged.)
.SH CONFORMING TO
SVr4, POSIX.1-2001.
.\" SVr4 documents additional error conditions EINVAL,
.\" ENOENT, ENOSPC, ENOMEM, EEXIST.  Neither SVr4 nor SVID documents
.\" an EIDRM error condition.
.SH NOTES
The inclusion of
.I <sys/types.h>
and
.I <sys/ipc.h>
isn't required on Linux or by any version of POSIX.
However,
some old implementations required the inclusion of these header files,
and the SVID also documented their inclusion.
Applications intended to be portable to such old systems may need
to include these header files.
.\" Like Linux, the FreeBSD man pages still document
.\" the inclusion of these header files.

The
.BR IPC_INFO ,
.B SHM_STAT
and
.B SHM_INFO
operations are used by the
.BR ipcs (1)
program to provide information on allocated resources.
In the future, these may modified or moved to a
.I /proc
filesystem interface.

Linux permits a process to attach
.RB ( shmat (2))
a shared memory segment that has already been marked for deletion
using
.IR shmctl(IPC_RMID) .
This feature is not available on other UNIX implementations;
portable applications should avoid relying on it.

Various fields in a \fIstruct shmid_ds\fP were typed as
.I short
under Linux 2.2
and have become
.I long
under Linux 2.4.
To take advantage of this,
a recompilation under glibc-2.1.91 or later should suffice.
(The kernel distinguishes old and new calls by an
.B IPC_64
flag in
.IR cmd .)
.SH SEE ALSO
.BR mlock (2),
.BR setrlimit (2),
.BR shmget (2),
.BR shmop (2),
.BR capabilities (7),
.BR svipc (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1993 Luigi P. Bai (lpb@softint.com) July 28, 1993
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified Wed Jul 28 10:57:35 1993, Rik Faith <faith@cs.unc.edu>
.\" Modified Sun Nov 28 16:43:30 1993, Rik Faith <faith@cs.unc.edu>
.\"          with material from Giorgio Ciucci <giorgio@crcc.it>
.\" Portions Copyright 1993 Giorgio Ciucci <giorgio@crcc.it>
.\" Modified Tue Oct 22 22:03:17 1996 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified, 8 Jan 2003, Michael Kerrisk, <mtk.manpages@gmail.com>
.\"	Removed EIDRM from errors - that can't happen...
.\" Modified, 27 May 2004, Michael Kerrisk <mtk.manpages@gmail.com>
.\"     Added notes on capability requirements
.\" Modified, 11 Nov 2004, Michael Kerrisk <mtk.manpages@gmail.com>
.\"	Language and formatting clean-ups
.\"	Added notes on /proc files
.\"
.TH SHMGET 2 2015-05-07 "Linux" "Linux Programmer's Manual"
.SH NAME
shmget \- allocates a System V shared memory segment
.SH SYNOPSIS
.ad l
.B #include <sys/ipc.h>
.br
.B #include <sys/shm.h>
.sp
.BI "int shmget(key_t " key ", size_t " size ", int " shmflg );
.ad b
.SH DESCRIPTION
.BR shmget ()
returns the identifier of the System\ V shared memory segment
associated with the value of the argument
.IR key .
A new shared memory segment, with size equal to the value of
.I size
rounded up to a multiple of
.BR PAGE_SIZE ,
is created if
.I key
has the value
.B IPC_PRIVATE
or
.I key
isn't
.BR IPC_PRIVATE ,
no shared memory segment corresponding to
.I key
exists, and
.B IPC_CREAT
is specified in
.IR shmflg .
.PP
If
.I shmflg
specifies both
.B IPC_CREAT
and
.B IPC_EXCL
and a shared memory segment already exists for
.IR key ,
then
.BR shmget ()
fails with
.I errno
set to
.BR EEXIST .
(This is analogous to the effect of the combination
.B O_CREAT | O_EXCL
for
.BR open (2).)
.PP
The value
.I shmflg
is composed of:
.TP 12
.B IPC_CREAT
Create a new segment.
If this flag is not used, then
.BR shmget ()
will find the segment associated with \fIkey\fP and check to see if
the user has permission to access the segment.
.TP
.B IPC_EXCL
This flag is used with
.B IPC_CREAT
to ensure that this call creates the segment.
If the segment already exists, the call fails.
.TP
.BR SHM_HUGETLB " (since Linux 2.6)"
Allocate the segment using "huge pages."
See the Linux kernel source file
.I Documentation/vm/hugetlbpage.txt
for further information.
.TP
.BR SHM_HUGE_2MB ", " SHM_HUGE_1GB " (since Linux 3.8)"
.\" See https://lwn.net/Articles/533499/
Used in conjunction with
.B SHM_HUGETLB
to select alternative hugetlb page sizes (respectively, 2 MB and 1 GB)
on systems that support multiple hugetlb page sizes.

More generally, the desired huge page size can be configured by encoding
the base-2 logarithm of the desired page size in the six bits at the offset
.BR SHM_HUGE_SHIFT .
Thus, the above two constants are defined as:

.nf
.in +4
#define SHM_HUGE_2MB    (21 << SHM_HUGE_SHIFT)
#define SHM_HUGE_1GB    (30 << SHM_HUGE_SHIFT)
.in
.fi

For some additional details,
see the discussion of the similarly named constants in
.BR mmap (2).
.TP
.BR SHM_NORESERVE " (since Linux 2.6.15)"
This flag serves the same purpose as the
.BR mmap (2)
.B MAP_NORESERVE
flag.
Do not reserve swap space for this segment.
When swap space is reserved, one has the guarantee
that it is possible to modify the segment.
When swap space is not reserved one might get
.B SIGSEGV
upon a write
if no physical memory is available.
See also the discussion of the file
.I /proc/sys/vm/overcommit_memory
in
.BR proc (5).
.\" As at 2.6.17-rc2, this flag has no effect if SHM_HUGETLB was also
.\" specified.
.PP
In addition to the above flags, the least significant 9 bits of
.I shmflg
specify the permissions granted to the owner, group, and others.
These bits have the same format, and the same
meaning, as the
.I mode
argument of
.BR open (2).
Presently, execute permissions are not used by the system.
.PP
When a new shared memory segment is created,
its contents are initialized to zero values, and
its associated data structure,
.I shmid_ds
(see
.BR shmctl (2)),
is initialized as follows:
.IP
.I shm_perm.cuid
and
.I shm_perm.uid
are set to the effective user ID of the calling process.
.IP
.I shm_perm.cgid
and
.I shm_perm.gid
are set to the effective group ID of the calling process.
.IP
The least significant 9 bits of
.I shm_perm.mode
are set to the least significant 9 bit of
.IR shmflg .
.IP
.I shm_segsz
is set to the value of
.IR size .
.IP
.IR shm_lpid ,
.IR shm_nattch ,
.IR shm_atime ,
and
.I shm_dtime
are set to 0.
.IP
.I shm_ctime
is set to the current time.
.PP
If the shared memory segment already exists, the permissions are
verified, and a check is made to see if it is marked for destruction.
.SH RETURN VALUE
On success, a valid shared memory identifier is returned.
On error, \-1 is returned, and
.I errno
is set to indicate the error.
.SH ERRORS
On failure,
.I errno
is set to one of the following:
.TP
.B EACCES
The user does not have permission to access the
shared memory segment, and does not have the
.B CAP_IPC_OWNER
capability.
.TP
.B EEXIST
.BR IPC_CREAT
and
.BR IPC_EXCL
were specified in
.IR shmflg ,
but a shared memory segment already exists for
.IR key .
.TP
.B EINVAL
A new segment was to be created and
.I size
is less than
.B SHMMIN
or greater than
.BR SHMMAX .
.TP
.B EINVAL
A segment for the given
.I key
exists, but \fIsize\fP is greater than the size
of that segment.
.TP
.B ENFILE
.\" [2.6.7] shmem_zero_setup()-->shmem_file_setup()-->get_empty_filp()
The system limit on the total number of open files has been reached.
.TP
.B ENOENT
No segment exists for the given \fIkey\fP, and
.B IPC_CREAT
was not specified.
.TP
.B ENOMEM
No memory could be allocated for segment overhead.
.TP
.B ENOSPC
All possible shared memory IDs have been taken
.RB ( SHMMNI ),
or allocating a segment of the requested
.I size
would cause the system to exceed the system-wide limit on shared memory
.RB ( SHMALL ).
.TP
.B EPERM
The
.B SHM_HUGETLB
flag was specified, but the caller was not privileged (did not have the
.B CAP_IPC_LOCK
capability).
.SH CONFORMING TO
SVr4, POSIX.1-2001.
.\" SVr4 documents an additional error condition EEXIST.

.B SHM_HUGETLB
and
.B SHM_NORESERVE
are Linux extensions.
.SH NOTES
The inclusion of
.I <sys/types.h>
and
.I <sys/ipc.h>
isn't required on Linux or by any version of POSIX.
However,
some old implementations required the inclusion of these header files,
and the SVID also documented their inclusion.
Applications intended to be portable to such old systems may need
to include these header files.
.\" Like Linux, the FreeBSD man pages still document
.\" the inclusion of these header files.

.B IPC_PRIVATE
isn't a flag field but a
.I key_t
type.
If this special value is used for
.IR key ,
the system call ignores all but the least significant 9 bits of
.I shmflg
and creates a new shared memory segment.
.\"
.SS Shared memory limits
The following limits on shared memory segment resources affect the
.BR shmget ()
call:
.TP
.B SHMALL
System-wide limit on the total amount of shared memory,
measured in units of the system page size.

On Linux, this limit can be read and modified via
.IR /proc/sys/kernel/shmall .
Since Linux 3.16,
.\" commit 060028bac94bf60a65415d1d55a359c3a17d5c31
the default value for this limit is:

    ULONG_MAX - 2^24

The effect of this value
(which is suitable for both 32-bit and 64-bit systems)
is to impose no limitation on allocations.
This value, rather than
.BR ULONG_MAX ,
was chosen as the default to prevent some cases where historical
applications simply raised the existing limit without first checking
its current value.
Such applications would cause the value to overflow if the limit was set at
.BR ULONG_MAX .

From Linux 2.4 up to Linux 3.15,
the default value for this limit was:

    SHMMAX / PAGE_SIZE * (SHMMNI / 16)

If
.B SHMMAX
and
.B SHMMNI
were not modified, then multiplying the result of this formula
by the page size (to get a value in bytes) yielded a value of 8 GB
as the limit on the total memory used by all shared memory segments.
.TP
.B SHMMAX
Maximum size in bytes for a shared memory segment.

On Linux, this limit can be read and modified via
.IR /proc/sys/kernel/shmmax .
Since Linux 3.16,
.\" commit 060028bac94bf60a65415d1d55a359c3a17d5c31
the default value for this limit is:

    ULONG_MAX - 2^24

The effect of this value
(which is suitable for both 32-bit and 64-bit systems)
is to impose no limitation on allocations.
See the description of
.BR SHMALL
for a discussion of why this default value (rather than
.BR ULONG_MAX )
is used.

From Linux 2.2 up to Linux 3.15, the default value of
this limit was 0x2000000 (32MB).

Because it is not possible to map just part of a shared memory segment,
the amount of virtual memory places another limit on the maximum size of a
usable segment:
for example, on i386 the largest segments that can be mapped have a
size of around 2.8 GB, and on x86_64 the limit is around 127 TB.
.TP
.B SHMMIN
Minimum size in bytes for a shared memory segment: implementation
dependent (currently 1 byte, though
.B PAGE_SIZE
is the effective minimum size).
.TP
.B SHMMNI
System-wide limit on the number of shared memory segments.
In Linux 2.2, the default value for this limit was 128;
since Linux 2.4, the default value is 4096.

On Linux, this limit can be read and modified via
.IR /proc/sys/kernel/shmmni .
.\" Kernels between 2.4.x and 2.6.8 had an off-by-one error that meant
.\" that we could create one more segment than SHMMNI -- MTK
.\" This /proc file is not available in Linux 2.2 and earlier -- MTK
.PP
The implementation has no specific limits for the per-process maximum
number of shared memory segments
.RB ( SHMSEG ).
.SS Linux notes
Until version 2.3.30, Linux would return
.B EIDRM
for a
.BR shmget ()
on a shared memory segment scheduled for deletion.
.SH BUGS
The name choice
.B IPC_PRIVATE
was perhaps unfortunate,
.B IPC_NEW
would more clearly show its function.
.SH SEE ALSO
.BR memfd_create (2),
.BR shmat (2),
.BR shmctl (2),
.BR shmdt (2),
.BR ftok (3),
.BR capabilities (7),
.BR shm_overview (7),
.BR svipc (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 Giorgio Ciucci (giorgio@crcc.it)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified Sun Nov 28 17:06:19 1993, Rik Faith (faith@cs.unc.edu)
.\"          with material from Luigi P. Bai (lpb@softint.com)
.\" Portions Copyright 1993 Luigi P. Bai
.\" Modified Tue Oct 22 22:04:23 1996 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified, 5 Jan 2002, Michael Kerrisk <mtk.manpages@gmail.com>
.\" Modified, 19 Sep 2002, Michael Kerrisk <mtk.manpages@gmail.com>
.\"	Added SHM_REMAP flag description
.\" Modified, 27 May 2004, Michael Kerrisk <mtk.manpages@gmail.com>
.\"     Added notes on capability requirements
.\" Modified, 11 Nov 2004, Michael Kerrisk <mtk.manpages@gmail.com>
.\"	Language and formatting clean-ups
.\"	Changed wording and placement of sentence regarding attachment
.\"		of segments marked for destruction
.\"
.\" FIXME . Add an example program to this page.
.\"
.TH SHMOP 2 2014-07-08 "Linux" "Linux Programmer's Manual"
.SH NAME
shmat, shmdt \- System V shared memory operations
.SH SYNOPSIS
.nf
.B #include <sys/types.h>
.B #include <sys/shm.h>

.BI "void *shmat(int " shmid ", const void *" shmaddr ", int " shmflg );

.BI "int shmdt(const void *" shmaddr );
.fi
.SH DESCRIPTION
.SS shmat()
.BR shmat ()
attaches the System\ V shared memory segment identified by
.I shmid
to the address space of the calling process.
The attaching address is specified by
.I shmaddr
with one of the following criteria:
.IP * 3
If
.I shmaddr
is NULL,
the system chooses a suitable (unused) address at which to attach
the segment.
.IP *
If
.I shmaddr
isn't NULL
and
.B SHM_RND
is specified in
.IR shmflg ,
the attach occurs at the address equal to
.I shmaddr
rounded down to the nearest multiple of
.BR SHMLBA .
.IP *
Otherwise,
.I shmaddr
must be a page-aligned address at which the attach occurs.
.PP
In addition to
.BR SHM_RND ,
the following flags may be specified in the
.I shmflg
bit-mask argument:
.TP
.BR SHM_EXEC " (Linux-specific; since Linux 2.6.9)"
Allow the contents of the segment to be executed.
The caller must have execute permission on the segment.
.TP
.BR SHM_RDONLY
Attach the segment for read-only access.
The process must have read permission for the segment.
If this flag is not specified,
the segment is attached for read and write access,
and the process must have read and write permission for the segment.
There is no notion of a write-only shared memory segment.
.TP
.BR SHM_REMAP " (Linux-specific)"
This flag specifies
that the mapping of the segment should replace
any existing mapping in the range starting at
.I shmaddr
and continuing for the size of the segment.
(Normally, an
.B EINVAL
error would result if a mapping already exists in this address range.)
In this case,
.I shmaddr
must not be NULL.
.PP
The
.BR brk (2)
value of the calling process is not altered by the attach.
The segment will automatically be detached at process exit.
The same segment may be attached as a read and as a read-write
one, and more than once, in the process's address space.
.PP
A successful
.BR shmat ()
call updates the members of the
.I shmid_ds
structure (see
.BR shmctl (2))
associated with the shared memory segment as follows:
.IP
.I shm_atime
is set to the current time.
.IP
.I shm_lpid
is set to the process-ID of the calling process.
.IP
.I shm_nattch
is incremented by one.
.\"
.SS shmdt()
.BR shmdt ()
detaches the shared memory segment located at the address specified by
.I shmaddr
from the address space of the calling process.
The to-be-detached segment must be currently
attached with
.I shmaddr
equal to the value returned by the attaching
.BR shmat ()
call.
.PP
On a successful
.BR shmdt ()
call, the system updates the members of the
.I shmid_ds
structure associated with the shared memory segment as follows:
.IP
.I shm_dtime
is set to the current time.
.IP
.I shm_lpid
is set to the process-ID of the calling process.
.IP
.I shm_nattch
is decremented by one.
If it becomes 0 and the segment is marked for deletion,
the segment is deleted.
.SH RETURN VALUE
On success,
.BR shmat ()
returns the address of the attached shared memory segment; on error,
.I (void\ *)\ \-1
is returned, and
.I errno
is set to indicate the cause of the error.

On success,
.BR shmdt ()
returns 0; on error \-1 is returned, and
.I errno
is set to indicate the cause of the error.
.SH ERRORS
When
.BR shmat ()
fails,
.I errno
is set to one of the following:
.TP
.B EACCES
The calling process does not have the required permissions for
the requested attach type, and does not have the
.B CAP_IPC_OWNER
capability.
.TP
.B EIDRM
\fIshmid\fP points to a removed identifier.
.TP
.B EINVAL
Invalid
.I shmid
value, unaligned (i.e., not page-aligned and \fBSHM_RND\fP was not
specified) or invalid
.I shmaddr
value, or can't attach segment at
.IR shmaddr ,
or
.B SHM_REMAP
was specified and
.I shmaddr
was NULL.
.TP
.B ENOMEM
Could not allocate memory for the descriptor or for the page tables.
.PP
When
.BR shmdt ()
fails,
.I errno
is set as follows:
.TP
.B EINVAL
There is no shared memory segment attached at
.IR shmaddr ;
or,
.\" The following since 2.6.17-rc1:
.I shmaddr
is not aligned on a page boundary.
.SH CONFORMING TO
SVr4, POSIX.1-2001.
.\" SVr4 documents an additional error condition EMFILE.

In SVID 3 (or perhaps earlier),
the type of the \fIshmaddr\fP argument was changed from
.I "char\ *"
into
.IR "const void\ *" ,
and the returned type of
.BR shmat ()
from
.I "char\ *"
into
.IR "void\ *" .
.SH NOTES
.PP
After a
.BR fork (2),
the child inherits the attached shared memory segments.

After an
.BR execve (2),
all attached shared memory segments are detached from the process.

Upon
.BR _exit (2),
all attached shared memory segments are detached from the process.

Using
.BR shmat ()
with
.I shmaddr
equal to NULL
is the preferred, portable way of attaching a shared memory segment.
Be aware that the shared memory segment attached in this way
may be attached at different addresses in different processes.
Therefore, any pointers maintained within the shared memory must be
made relative (typically to the starting address of the segment),
rather than absolute.
.PP
On Linux, it is possible to attach a shared memory segment even if it
is already marked to be deleted.
However, POSIX.1-2001 does not specify this behavior and
many other implementations do not support it.
.LP
The following system parameter affects
.BR shmat ():
.TP
.B SHMLBA
Segment low boundary address multiple.
When explicitly specifying an attach address in a call to
.BR shmat (),
the caller should ensure that the address is a multiple of this value.
This is necessary on some architectures,
in order either to ensure good CPU cache performance or to ensure that
different attaches of the same segment have consistent views
within the CPU cache.
.B SHMLBA
is normally some multiple of the system page size
(on many Linux architectures, it is the same as the system page size).
.PP
The implementation places no intrinsic per-process limit on the
number of shared memory segments
.RB ( SHMSEG ).
.SH SEE ALSO
.BR brk (2),
.BR mmap (2),
.BR shmctl (2),
.BR shmget (2),
.BR capabilities (7),
.BR shm_overview (7),
.BR svipc (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1983, 1991 The Regents of the University of California.
.\" All rights reserved.
.\"
.\" %%%LICENSE_START(BSD_4_CLAUSE_UCB)
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\" %%%LICENSE_END
.\"
.\"     $Id: shutdown.2,v 1.1.1.1 1999/03/21 22:52:23 freitag Exp $
.\"
.\" Modified Sat Jul 24 09:57:55 1993 by Rik Faith <faith@cs.unc.edu>
.\" Modified Tue Oct 22 22:04:51 1996 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified 1998 by Andi Kleen
.\"
.TH SHUTDOWN 2 2015-05-07 "Linux" "Linux Programmer's Manual"
.SH NAME
shutdown \- shut down part of a full-duplex connection
.SH SYNOPSIS
.B #include <sys/socket.h>
.sp
.BI "int shutdown(int " sockfd ", int " how );
.SH DESCRIPTION
The
.BR shutdown ()
call causes all or part of a full-duplex connection on the socket
associated with
.I sockfd
to be shut down.
If
.I how
is
.BR SHUT_RD ,
further receptions will be disallowed.
If
.I how
is
.BR SHUT_WR ,
further transmissions will be disallowed.
If
.I how
is
.BR SHUT_RDWR ,
further receptions and transmissions will be disallowed.
.SH RETURN VALUE
On success, zero is returned.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EBADF
.I sockfd
is not a valid descriptor.
.TP
.B EINVAL
An invalid value was specified in
.IR how
(but see BUGS).
.TP
.B ENOTCONN
The specified socket is not connected.
.TP
.B ENOTSOCK
.I sockfd
is a file, not a socket.
.SH CONFORMING TO
POSIX.1-2001, 4.4BSD (the
.BR shutdown ()
function call first appeared in 4.2BSD).
.SH NOTES
The constants
.BR SHUT_RD ,
.BR SHUT_WR ,
.B SHUT_RDWR
have the value 0, 1, 2,
respectively, and are defined in
.I <sys/socket.h>
since glibc-2.1.91.
.SH BUGS
Checks for the validity of
.I how
are done in domain-specific code,
and before Linux 3.7 not all domains performed these checks.
.\" https://bugzilla.kernel.org/show_bug.cgi?id=47111
Most notably, UNIX domain sockets simply ignored invalid values.
This problem was fixed for UNIX domain sockets
.\" commit fc61b928dc4d72176cf4bd4d30bf1d22e599aefc
.\" and for DECnet sockets in commit 46b66d7077b89fb4917ceef19b3f7dd86055c94a
in Linux 3.7.
.SH SEE ALSO
.BR connect (2),
.BR socket (2),
.BR socket (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
'\" t
.\" Copyright (c) 1994,1995 Mike Battersby <mib@deakin.edu.au>
.\" and Copyright 2004, 2005 Michael Kerrisk <mtk.manpages@gmail.com>
.\" based on work by faith@cs.unc.edu
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified, aeb, 960424
.\" Modified Fri Jan 31 17:31:20 1997 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified Thu Nov 26 02:12:45 1998 by aeb - add SIGCHLD stuff.
.\" Modified Sat May  8 17:40:19 1999 by Matthew Wilcox
.\"	add POSIX.1b signals
.\" Modified Sat Dec 29 01:44:52 2001 by Evan Jones <ejones@uwaterloo.ca>
.\"	SA_ONSTACK
.\" Modified 2004-11-11 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"	Added mention of SIGCONT under SA_NOCLDSTOP
.\"	Added SA_NOCLDWAIT
.\" Modified 2004-11-17 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"	Updated discussion for POSIX.1-2001 and SIGCHLD and sa_flags.
.\"	Formatting fixes
.\" 2004-12-09, mtk, added SI_TKILL + other minor changes
.\" 2005-09-15, mtk, split sigpending(), sigprocmask(), sigsuspend()
.\"	out of this page into separate pages.
.\" 2010-06-11 Andi Kleen, add hwpoison signal extensions
.\" 2010-06-11 mtk, improvements to discussion of various siginfo_t fields.
.\" 2015-01-17, Kees Cook <keescook@chromium.org>
.\"	Added notes on ptrace SIGTRAP and SYS_SECCOMP.
.\"
.TH SIGACTION 2 2015-05-07 "Linux" "Linux Programmer's Manual"
.SH NAME
sigaction, rt_sigaction \- examine and change a signal action
.SH SYNOPSIS
.nf
.B #include <signal.h>
.sp
.BI "int sigaction(int " signum ", const struct sigaction *" act ,
.BI "              struct sigaction *" oldact );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR sigaction ():
_POSIX_C_SOURCE\ >=\ 1 || _XOPEN_SOURCE || _POSIX_SOURCE

.IR siginfo_t :
_POSIX_C_SOURCE >= 199309L
.ad b
.SH DESCRIPTION
The
.BR sigaction ()
system call is used to change the action taken by a process on
receipt of a specific signal.
(See
.BR signal (7)
for an overview of signals.)
.PP
.I signum
specifies the signal and can be any valid signal except
.B SIGKILL
and
.BR SIGSTOP .
.PP
If
.I act
is non-NULL, the new action for signal
.I signum
is installed from
.IR act .
If
.I oldact
is non-NULL, the previous action is saved in
.IR oldact .
.PP
The
.I sigaction
structure is defined as something like:
.sp
.in +4n
.nf
struct sigaction {
    void     (*sa_handler)(int);
    void     (*sa_sigaction)(int, siginfo_t *, void *);
    sigset_t   sa_mask;
    int        sa_flags;
    void     (*sa_restorer)(void);
};
.fi
.in
.PP
On some architectures a union is involved: do not assign to both
.I sa_handler
and
.IR sa_sigaction .
.PP
The
.I sa_restorer
field is not intended for application use.
(POSIX does not specify a
.I sa_restorer
field.)
Some further details of purpose of this field can be found in
.BR sigreturn (2).
.PP
.I sa_handler
specifies the action to be associated with
.I signum
and may be
.B SIG_DFL
for the default action,
.B SIG_IGN
to ignore this signal, or a pointer to a signal handling function.
This function receives the signal number as its only argument.
.PP
If
.B SA_SIGINFO
is specified in
.IR sa_flags ,
then
.I sa_sigaction
(instead of
.IR sa_handler )
specifies the signal-handling function for
.IR signum .
This function receives the signal number as its first argument, a
pointer to a
.I siginfo_t
as its second argument and a pointer to a
.I ucontext_t
(cast to \fIvoid\ *\fP) as its third argument.
(Commonly, the handler function doesn't make any use of the third argument.
See
.BR getcontext (3)
for further information about
.IR ucontext_t .)
.PP
.I sa_mask
specifies a mask of signals which should be blocked
(i.e., added to the signal mask of the thread in which
the signal handler is invoked)
during execution of the signal handler.
In addition, the signal which triggered the handler
will be blocked, unless the
.B SA_NODEFER
flag is used.
.PP
.I sa_flags
specifies a set of flags which modify the behavior of the signal.
It is formed by the bitwise OR of zero or more of the following:
.RS 4
.TP
.B SA_NOCLDSTOP
If
.I signum
is
.BR SIGCHLD ,
do not receive notification when child processes stop (i.e., when they
receive one of
.BR SIGSTOP ", " SIGTSTP ", " SIGTTIN ", "
or
.BR SIGTTOU )
or resume (i.e., they receive
.BR SIGCONT )
(see
.BR wait (2)).
This flag is meaningful only when establishing a handler for
.BR SIGCHLD .
.TP
.BR SA_NOCLDWAIT " (since Linux 2.6)"
.\" To be precise: Linux 2.5.60 -- MTK
If
.I signum
is
.BR SIGCHLD ,
do not transform children into zombies when they terminate.
See also
.BR waitpid (2).
This flag is meaningful only when establishing a handler for
.BR SIGCHLD ,
or when setting that signal's disposition to
.BR SIG_DFL .

If the
.B SA_NOCLDWAIT
flag is set when establishing a handler for
.BR SIGCHLD ,
POSIX.1 leaves it unspecified whether a
.B SIGCHLD
signal is generated when a child process terminates.
On Linux, a
.B SIGCHLD
signal is generated in this case;
on some other implementations, it is not.
.TP
.B SA_NODEFER
Do not prevent the signal from being received from within its own signal
handler.
This flag is meaningful only when establishing a signal handler.
.B SA_NOMASK
is an obsolete, nonstandard synonym for this flag.
.TP
.B SA_ONSTACK
Call the signal handler on an alternate signal stack provided by
.BR sigaltstack (2).
If an alternate stack is not available, the default stack will be used.
This flag is meaningful only when establishing a signal handler.
.TP
.BR SA_RESETHAND
Restore the signal action to the default upon entry to the signal handler.
This flag is meaningful only when establishing a signal handler.
.B SA_ONESHOT
is an obsolete, nonstandard synonym for this flag.
.TP
.B SA_RESTART
Provide behavior compatible with BSD signal semantics by making certain
system calls restartable across signals.
This flag is meaningful only when establishing a signal handler.
See
.BR signal (7)
for a discussion of system call restarting.
.TP
.BR SA_RESTORER
.IR "Not intended for application use" .
This flag is used by C libraries to indicate that the
.IR sa_restorer
field contains the address of a "signal trampoline".
See
.BR sigreturn (2)
for more details.
.TP
.BR SA_SIGINFO " (since Linux 2.2)"
The signal handler takes three arguments, not one.
In this case,
.I sa_sigaction
should be set instead of
.IR sa_handler .
This flag is meaningful only when establishing a signal handler.
.\" (The
.\" .I sa_sigaction
.\" field was added in Linux 2.1.86.)
.RE
.PP
The
.I siginfo_t
argument to
.I sa_sigaction
is a struct with the following fields:
.sp
.in +4n
.nf
siginfo_t {
    int      si_signo;     /* Signal number */
    int      si_errno;     /* An errno value */
    int      si_code;      /* Signal code */
    int      si_trapno;    /* Trap number that caused
                              hardware-generated signal
                              (unused on most architectures) */
.\" FIXME
.\" The siginfo_t 'si_trapno' field seems to be used only on SPARC and Alpha;
.\" this page could use a little more detail on its purpose there.
    pid_t    si_pid;       /* Sending process ID */
    uid_t    si_uid;       /* Real user ID of sending process */
    int      si_status;    /* Exit value or signal */
    clock_t  si_utime;     /* User time consumed */
    clock_t  si_stime;     /* System time consumed */
    sigval_t si_value;     /* Signal value */
    int      si_int;       /* POSIX.1b signal */
    void    *si_ptr;       /* POSIX.1b signal */
    int      si_overrun;   /* Timer overrun count;
                              POSIX.1b timers */
    int      si_timerid;   /* Timer ID; POSIX.1b timers */
.\" In the kernel: si_tid
    void    *si_addr;      /* Memory location which caused fault */
    long     si_band;      /* Band event (was \fIint\fP in
                              glibc 2.3.2 and earlier) */
    int      si_fd;        /* File descriptor */
    short    si_addr_lsb;  /* Least significant bit of address
                              (since Linux 2.6.32) */
    void    *si_call_addr; /* Address of system call instruction
                              (since Linux 3.5) */
    int      si_syscall;   /* Number of attempted system call
                              (since Linux 3.5) */
    unsigned int si_arch;  /* Architecture of attempted system call
                              (since Linux 3.5) */
}
.fi
.in

.IR si_signo ", " si_errno " and " si_code
are defined for all signals.
.RI ( si_errno
is generally unused on Linux.)
The rest of the struct may be a union, so that one should
read only the fields that are meaningful for the given signal:
.IP * 2
Signals sent with
.BR kill (2)
and
.BR sigqueue (3)
fill in
.IR si_pid " and " si_uid .
In addition, signals sent with
.BR sigqueue (3)
fill in
.IR si_int " and " si_ptr
with the values specified by the sender of the signal;
see
.BR sigqueue (3)
for more details.
.IP *
Signals sent by POSIX.1b timers (since Linux 2.6) fill in
.I si_overrun
and
.IR si_timerid .
The
.I si_timerid
field is an internal ID used by the kernel to identify
the timer; it is not the same as the timer ID returned by
.BR timer_create (2).
The
.I si_overrun
field is the timer overrun count;
this is the same information as is obtained by a call to
.BR timer_getoverrun (2).
These fields are nonstandard Linux extensions.
.IP *
Signals sent for message queue notification (see the description of
.B SIGEV_SIGNAL
in
.BR mq_notify (3))
fill in
.IR si_int / si_ptr ,
with the
.I sigev_value
supplied to
.BR mq_notify (3);
.IR si_pid ,
with the process ID of the message sender; and
.IR si_uid ,
with the real user ID of the message sender.
.IP *
.B SIGCHLD
fills in
.IR si_pid ", " si_uid ", " si_status ", " si_utime ", and " si_stime ,
providing information about the child.
The
.I si_pid
field is the process ID of the child;
.I si_uid
is the child's real user ID.
The
.I si_status
field contains the exit status of the child (if
.I si_code
is
.BR CLD_EXITED ),
or the signal number that caused the process to change state.
The
.I si_utime
and
.I si_stime
contain the user and system CPU time used by the child process;
these fields do not include the times used by waited-for children (unlike
.BR getrusage (2)
and
.BR times (2)).
In kernels up to 2.6, and since 2.6.27, these fields report
CPU time in units of
.IR sysconf(_SC_CLK_TCK) .
In 2.6 kernels before 2.6.27,
a bug meant that these fields reported time in units
of the (configurable) system jiffy (see
.BR time (7)).
.\" FIXME .
.\" When si_utime and si_stime where originally implemented, the
.\" measurement unit was HZ, which was the same as clock ticks
.\" (sysconf(_SC_CLK_TCK)).  In 2.6, HZ became configurable, and
.\" was *still* used as the unit to return the info these fields,
.\" with the result that the field values depended on the the
.\" configured HZ.  Of course, the should have been measured in
.\" USER_HZ instead, so that sysconf(_SC_CLK_TCK) could be used to
.\" convert to seconds.  I have a queued patch to fix this:
.\" http://thread.gmane.org/gmane.linux.kernel/698061/ .
.\" This patch made it into 2.6.27.
.\" But note that these fields still don't return the times of
.\" waited-for children (as is done by getrusage() and times()
.\" and wait4()).  Solaris 8 does include child times.
.IP *
.BR SIGILL ,
.BR SIGFPE ,
.BR SIGSEGV ,
.BR SIGBUS ,
and
.BR SIGTRAP
fill in
.I si_addr
with the address of the fault.
On some architectures,
these signals also fill in the
.I si_trapno
field.
Some suberrors of
.BR SIGBUS ,
in particular
.B BUS_MCEERR_AO
and
.BR BUS_MCEERR_AR ,
also fill in
.IR si_addr_lsb .
This field indicates the least significant bit of the reported address
and therefore the extent of the corruption.
For example, if a full page was corrupted,
.I si_addr_lsb
contains
.IR log2(sysconf(_SC_PAGESIZE)) .
When
.BR SIGTRAP
is delivered in response to a
.BR ptrace (2)
event (PTRACE_EVENT_foo),
.I si_addr
is not populated, but
.I si_pid
and
.I si_uid
are populated with the respective process ID and user ID responsible for
delivering the trap.
In the case of
.BR seccomp (2),
the tracee will be shown as delivering the event.
.B BUS_MCEERR_*
and
.I si_addr_lsb
are Linux-specific extensions.
.IP *
.BR SIGIO / SIGPOLL
(the two names are synonyms on Linux)
fills in
.IR si_band " and " si_fd .
The
.I si_band
event is a bit mask containing the same values as are filled in the
.I revents
field by
.BR poll (2).
The
.I si_fd
field indicates the file descriptor for which the I/O event occurred;
for further details, see the description of
.BR F_SETSIG
in
.BR fcntl (2).
.IP *
.BR SIGSYS ,
generated (since Linux 3.5)
.\" commit a0727e8ce513fe6890416da960181ceb10fbfae6
when a seccomp filter returns
.BR SECCOMP_RET_TRAP ,
fills in
.IR si_call_addr ,
.IR si_syscall ,
.IR si_arch ,
.IR si_errno ,
and other fields as described in
.BR seccomp (2).
.PP
.I si_code
is a value (not a bit mask) indicating why this signal was sent.
For a
.BR ptrace (2)
event,
.I si_code
will contain
.BR SIGTRAP
and have the ptrace event in the high byte:

.nf
    (SIGTRAP | PTRACE_EVENT_foo << 8).
.fi

For a regular signal, the following list shows the values which can be
placed in
.I si_code
for any signal, along with reason that the signal was generated.
.RS 4
.TP
.B SI_USER
.BR kill (2).
.TP
.B SI_KERNEL
Sent by the kernel.
.TP
.B SI_QUEUE
.BR sigqueue (3).
.TP
.B SI_TIMER
POSIX timer expired.
.TP
.BR SI_MESGQ " (since Linux 2.6.6)"
POSIX message queue state changed; see
.BR mq_notify (3).
.TP
.B SI_ASYNCIO
AIO completed.
.TP
.B SI_SIGIO
Queued
.B SIGIO
(only in kernels up to Linux 2.2; from Linux 2.4 onward
.BR SIGIO / SIGPOLL
fills in
.I si_code
as described below).
.TP
.BR SI_TKILL " (since Linux 2.4.19)"
.BR tkill (2)
or
.BR tgkill (2).
.\" SI_DETHREAD is defined in 2.6.9 sources, but isn't implemented
.\" It appears to have been an idea that was tried during 2.5.6
.\" through to 2.5.24 and then was backed out.
.RE
.PP
The following values can be placed in
.I si_code
for a
.B SIGILL
signal:
.RS 4
.TP
.B ILL_ILLOPC
Illegal opcode.
.TP
.B ILL_ILLOPN
Illegal operand.
.TP
.B ILL_ILLADR
Illegal addressing mode.
.TP
.B ILL_ILLTRP
Illegal trap.
.TP
.B ILL_PRVOPC
Privileged opcode.
.TP
.B ILL_PRVREG
Privileged register.
.TP
.B ILL_COPROC
Coprocessor error.
.TP
.B ILL_BADSTK
Internal stack error.
.RE
.PP
The following values can be placed in
.I si_code
for a
.B SIGFPE
signal:
.RS 4
.TP
.B FPE_INTDIV
Integer divide by zero.
.TP
.B FPE_INTOVF
Integer overflow.
.TP
.B FPE_FLTDIV
Floating-point divide by zero.
.TP
.B FPE_FLTOVF
Floating-point overflow.
.TP
.B FPE_FLTUND
Floating-point underflow.
.TP
.B FPE_FLTRES
Floating-point inexact result.
.TP
.B FPE_FLTINV
Floating-point invalid operation.
.TP
.B FPE_FLTSUB
Subscript out of range.
.RE
.PP
The following values can be placed in
.I si_code
for a
.B SIGSEGV
signal:
.RS 4
.TP
.B SEGV_MAPERR
Address not mapped to object.
.TP
.B SEGV_ACCERR
Invalid permissions for mapped object.
.RE
.PP
The following values can be placed in
.I si_code
for a
.B SIGBUS
signal:
.RS 4
.TP
.B BUS_ADRALN
Invalid address alignment.
.TP
.B BUS_ADRERR
Nonexistent physical address.
.TP
.B BUS_OBJERR
Object-specific hardware error.
.TP
.BR BUS_MCEERR_AR " (since Linux 2.6.32)"
Hardware memory error consumed on a machine check; action required.
.TP
.BR BUS_MCEERR_AO " (since Linux 2.6.32)"
Hardware memory error detected in process but not consumed; action optional.
.RE
.PP
The following values can be placed in
.I si_code
for a
.B SIGTRAP
signal:
.RS 4
.TP
.B TRAP_BRKPT
Process breakpoint.
.TP
.B TRAP_TRACE
Process trace trap.
.TP
.BR TRAP_BRANCH " (since Linux 2.4)"
Process taken branch trap.
.TP
.BR TRAP_HWBKPT " (since Linux 2.4)"
Hardware breakpoint/watchpoint.
.RE
.PP
The following values can be placed in
.I si_code
for a
.B SIGCHLD
signal:
.RS 4
.TP
.B CLD_EXITED
Child has exited.
.TP
.B CLD_KILLED
Child was killed.
.TP
.B CLD_DUMPED
Child terminated abnormally.
.TP
.B CLD_TRAPPED
Traced child has trapped.
.TP
.B CLD_STOPPED
Child has stopped.
.TP
.BR CLD_CONTINUED " (since Linux 2.6.9)"
Stopped child has continued.
.RE
.PP
The following values can be placed in
.I si_code
for a
.BR SIGIO / SIGPOLL
signal:
.RS 4
.TP
.B POLL_IN
Data input available.
.TP
.B POLL_OUT
Output buffers available.
.TP
.B POLL_MSG
Input message available.
.TP
.B POLL_ERR
I/O error.
.TP
.B POLL_PRI
High priority input available.
.TP
.B POLL_HUP
Device disconnected.
.RE
.PP
The following value can be placed in
.I si_code
for a
.BR SIGSYS
signal:
.RS 4
.TP
.BR SYS_SECCOMP " (since Linux 3.5)"
Triggered by a
.BR seccomp (2)
filter rule.
.RE
.SH RETURN VALUE
.BR sigaction ()
returns 0 on success; on error, \-1 is returned, and
.I errno
is set to indicate the error.
.SH ERRORS
.TP
.B EFAULT
.IR act " or " oldact
points to memory which is not a valid part of the process address space.
.TP
.B EINVAL
An invalid signal was specified.
This will also be generated if an attempt
is made to change the action for
.BR SIGKILL " or " SIGSTOP ", "
which cannot be caught or ignored.
.SH CONFORMING TO
POSIX.1-2001, SVr4.
.\" SVr4 does not document the EINTR condition.
.SH NOTES
A child created via
.BR fork (2)
inherits a copy of its parent's signal dispositions.
During an
.BR execve (2),
the dispositions of handled signals are reset to the default;
the dispositions of ignored signals are left unchanged.

According to POSIX, the behavior of a process is undefined after it
ignores a
.BR SIGFPE ,
.BR SIGILL ,
or
.B SIGSEGV
signal that was not generated by
.BR kill (2)
or
.BR raise (3).
Integer division by zero has undefined result.
On some architectures it will generate a
.B SIGFPE
signal.
(Also dividing the most negative integer by \-1 may generate
.BR SIGFPE .)
Ignoring this signal might lead to an endless loop.
.PP
POSIX.1-1990 disallowed setting the action for
.B SIGCHLD
to
.BR SIG_IGN .
POSIX.1-2001 allows this possibility, so that ignoring
.B SIGCHLD
can be used to prevent the creation of zombies (see
.BR wait (2)).
Nevertheless, the historical BSD and System\ V behaviors for ignoring
.B SIGCHLD
differ, so that the only completely portable method of ensuring that
terminated children do not become zombies is to catch the
.B SIGCHLD
signal and perform a
.BR wait (2)
or similar.
.PP
POSIX.1-1990 specified only
.BR SA_NOCLDSTOP .
POSIX.1-2001 added
.BR SA_NOCLDWAIT ,
.BR SA_RESETHAND ,
.BR SA_NODEFER ,
and
.BR SA_SIGINFO .
Use of these latter values in
.I sa_flags
may be less portable in applications intended for older
UNIX implementations.
.PP
The
.B SA_RESETHAND
flag is compatible with the SVr4 flag of the same name.
.PP
The
.B SA_NODEFER
flag is compatible with the SVr4 flag of the same name under kernels
1.3.9 and newer.
On older kernels the Linux implementation
allowed the receipt of any signal, not just the one we are installing
(effectively overriding any
.I sa_mask
settings).
.PP
.BR sigaction ()
can be called with a NULL second argument to query the current signal
handler.
It can also be used to check whether a given signal is valid for
the current machine by calling it with NULL second and third arguments.
.PP
It is not possible to block
.BR SIGKILL " or " SIGSTOP
(by specifying them in
.IR sa_mask ).
Attempts to do so are silently ignored.
.PP
See
.BR sigsetops (3)
for details on manipulating signal sets.
.PP
See
.BR signal (7)
for a list of the async-signal-safe functions that can be
safely called inside from inside a signal handler.
.\"
.SS C library/kernel ABI differences
The glibc wrapper function for
.BR sigaction ()
gives an error
.RB ( EINVAL )
on attempts to change the disposition of the two real-time signals
used internally by the NPTL threading implementation.
See
.BR nptl (7)
for details.

The original Linux system call was named
.BR sigaction ().
However, with the addition of real-time signals in Linux 2.2,
the fixed-size, 32-bit
.IR sigset_t
type supported by that system call was no longer fit for purpose.
Consequently, a new system call,
.BR rt_sigaction (),
was added to support an enlarged
.IR sigset_t
type.
The new system call takes a fourth argument,
.IR "size_t sigsetsize" ,
which specifies the size in bytes of the signal sets in
.IR act.sa_mask
and
.IR oldact.sa_mask .
This argument is currently required to have the value
.IR sizeof(sigset_t)
(or the error
.B EINVAL
results).
The glibc
.BR sigaction ()
wrapper function hides these details from us, transparently calling
.BR rt_sigaction ()
when the kernel provides it.
.\"
.SS Undocumented
Before the introduction of
.BR SA_SIGINFO ,
it was also possible to get some additional information,
namely by using a
.I sa_handler
with second argument of type
.IR "struct sigcontext".
See the relevant Linux kernel sources for details.
This use is obsolete now.
.SH BUGS
In kernels up to and including 2.6.13, specifying
.B SA_NODEFER
in
.I sa_flags
prevents not only the delivered signal from being masked during
execution of the handler, but also the signals specified in
.IR sa_mask .
This bug was fixed in kernel 2.6.14.
.SH EXAMPLE
See
.BR mprotect (2).
.SH SEE ALSO
.BR kill (1),
.BR kill (2),
.BR killpg (2),
.BR pause (2),
.BR restart_syscall (2),
.BR seccomp (2)
.BR sigaltstack (2),
.BR signal (2),
.BR signalfd (2),
.BR sigpending (2),
.BR sigreturn (2),
.BR sigprocmask (2),
.BR sigsuspend (2),
.BR wait (2),
.BR raise (3),
.BR siginterrupt (3),
.BR sigqueue (3),
.BR sigsetops (3),
.BR sigvec (3),
.BR core (5),
.BR signal (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
'\" t
.\" Copyright (c) 2001, Michael Kerrisk (mtk.manpages@gmail.com)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" aeb, various minor fixes
.TH SIGALTSTACK 2 2010-09-26 "Linux" "Linux Programmer's Manual"
.SH NAME
sigaltstack \- set and/or get signal stack context
.SH SYNOPSIS
.B #include <signal.h>
.sp
.BI "int sigaltstack(const stack_t *" ss ", stack_t *" oss );
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR sigaltstack ():
.ad l
.RS 4
.PD 0
_BSD_SOURCE || _XOPEN_SOURCE\ >=\ 500 ||
_XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED
.br
|| /* Since glibc 2.12: */ _POSIX_C_SOURCE\ >=\ 200809L
.PD
.RE
.ad
.SH DESCRIPTION
.BR sigaltstack ()
allows a process to define a new alternate
signal stack and/or retrieve the state of an existing
alternate signal stack.
An alternate signal stack is used during the
execution of a signal handler if the establishment of that handler (see
.BR sigaction (2))
requested it.

The normal sequence of events for using an alternate signal stack
is the following:
.TP 3
1.
Allocate an area of memory to be used for the alternate
signal stack.
.TP
2.
Use
.BR sigaltstack ()
to inform the system of the existence and
location of the alternate signal stack.
.TP
3.
When establishing a signal handler using
.BR sigaction (2),
inform the system that the signal handler should be executed
on the alternate signal stack by
specifying the \fBSA_ONSTACK\fP flag.
.P
The \fIss\fP argument is used to specify a new
alternate signal stack, while the \fIoss\fP argument
is used to retrieve information about the currently
established signal stack.
If we are interested in performing just one
of these tasks, then the other argument can be specified as NULL.
Each of these arguments is a structure of the following type:
.sp
.in +4n
.nf
typedef struct {
    void  *ss_sp;     /* Base address of stack */
    int    ss_flags;  /* Flags */
    size_t ss_size;   /* Number of bytes in stack */
} stack_t;
.fi
.in

To establish a new alternate signal stack,
\fIss.ss_flags\fP is set to zero, and \fIss.ss_sp\fP and
\fIss.ss_size\fP specify the starting address and size of
the stack.
The constant \fBSIGSTKSZ\fP is defined to be large enough
to cover the usual size requirements for an alternate signal stack,
and the constant \fBMINSIGSTKSZ\fP defines the minimum
size required to execute a signal handler.

When a signal handler is invoked on the alternate stack,
the kernel automatically aligns the address given in \fIss.ss_sp\fP
to a suitable address boundary for the underlying hardware architecture.

To disable an existing stack, specify \fIss.ss_flags\fP
as \fBSS_DISABLE\fP.
In this case, the remaining fields
in \fIss\fP are ignored.

If \fIoss\fP is not NULL, then it is used to return information about
the alternate signal stack which was in effect prior to the
call to
.BR sigaltstack ().
The \fIoss.ss_sp\fP and \fIoss.ss_size\fP fields return the starting
address and size of that stack.
The \fIoss.ss_flags\fP may return either of the following values:
.TP
.B SS_ONSTACK
The process is currently executing on the alternate signal stack.
(Note that it is not possible
to change the alternate signal stack if the process is
currently executing on it.)
.TP
.B SS_DISABLE
The alternate signal stack is currently disabled.
.SH RETURN VALUE
.BR sigaltstack ()
returns 0 on success, or \-1 on failure with
\fIerrno\fP set to indicate the error.
.SH ERRORS
.TP
.B EFAULT
Either \fIss\fP or \fIoss\fP is not NULL and points to an area
outside of the process's address space.
.TP
.B EINVAL
\fIss\fP is not NULL and the \fIss_flags\fP field contains
a nonzero value other than
.BR SS_DISABLE .
.TP
.B ENOMEM
The specified size of the new alternate signal stack
.I ss.ss_size
was less than
.BR MINSTKSZ .
.TP
.B EPERM
An attempt was made to change the alternate signal stack while
it was active (i.e., the process was already executing
on the current alternate signal stack).
.SH CONFORMING TO
SUSv2, SVr4, POSIX.1-2001.
.SH NOTES
The most common usage of an alternate signal stack is to handle the
.B SIGSEGV
signal that is generated if the space available for the
normal process stack is exhausted: in this case, a signal handler for
.B SIGSEGV
cannot be invoked on the process stack; if we wish to handle it,
we must use an alternate signal stack.
.P
Establishing an alternate signal stack is useful if a process
expects that it may exhaust its standard stack.
This may occur, for example, because the stack grows so large
that it encounters the upwardly growing heap, or it reaches a
limit established by a call to \fBsetrlimit(RLIMIT_STACK, &rlim)\fP.
If the standard stack is exhausted, the kernel sends
the process a \fBSIGSEGV\fP signal.
In these circumstances the only way to catch this signal is
on an alternate signal stack.
.P
On most hardware architectures supported by Linux, stacks grow
downward.
.BR sigaltstack ()
automatically takes account
of the direction of stack growth.
.P
Functions called from a signal handler executing on an alternate
signal stack will also use the alternate signal stack.
(This also applies to any handlers invoked for other signals while
the process is executing on the alternate signal stack.)
Unlike the standard stack, the system does not
automatically extend the alternate signal stack.
Exceeding the allocated size of the alternate signal stack will
lead to unpredictable results.
.P
A successful call to
.BR execve (2)
removes any existing alternate
signal stack.
A child process created via
.BR fork (2)
inherits a copy of its parent's alternate signal stack settings.
.P
.BR sigaltstack ()
supersedes the older
.BR sigstack ()
call.
For backward compatibility, glibc also provides
.BR sigstack ().
All new applications should be written using
.BR sigaltstack ().
.SS History
4.2BSD had a
.BR sigstack ()
system call.
It used a slightly
different struct, and had the major disadvantage that the caller
had to know the direction of stack growth.
.SH EXAMPLE
The following code segment demonstrates the use of
.BR sigaltstack ():

.in +4n
.nf
stack_t ss;

ss.ss_sp = malloc(SIGSTKSZ);
if (ss.ss_sp == NULL)
    /* Handle error */;
ss.ss_size = SIGSTKSZ;
ss.ss_flags = 0;
if (sigaltstack(&ss, NULL) == \-1)
    /* Handle error */;
.fi
.in
.SH SEE ALSO
.BR execve (2),
.BR setrlimit (2),
.BR sigaction (2),
.BR siglongjmp (3),
.BR sigsetjmp (3),
.BR signal (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2000 Andries Brouwer <aeb@cwi.nl>
.\" and Copyright (c) 2007 Michael Kerrisk <mtk.manpages@gmail.com>
.\" and Copyright (c) 2008, Linux Foundation, written by Michael Kerrisk
.\"      <mtk.manpages@gmail.com>
.\" based on work by Rik Faith <faith@cs.unc.edu>
.\" and Mike Battersby <mike@starbug.apana.org.au>.
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified 2004-11-19, mtk:
.\" added pointer to sigaction.2 for details of ignoring SIGCHLD
.\" 2007-06-03, mtk: strengthened portability warning, and rewrote
.\"     various sections.
.\" 2008-07-11, mtk: rewrote and expanded portability discussion.
.\"
.TH SIGNAL 2 2014-08-19 "Linux" "Linux Programmer's Manual"
.SH NAME
signal \- ANSI C signal handling
.SH SYNOPSIS
.B #include <signal.h>
.sp
.B typedef void (*sighandler_t)(int);
.sp
.BI "sighandler_t signal(int " signum ", sighandler_t " handler );
.SH DESCRIPTION
The behavior of
.BR signal ()
varies across UNIX versions,
and has also varied historically across different versions of Linux.
\fBAvoid its use\fP: use
.BR sigaction (2)
instead.
See \fIPortability\fP below.

.BR signal ()
sets the disposition of the signal
.I signum
to
.IR handler ,
which is either
.BR SIG_IGN ,
.BR SIG_DFL ,
or the address of a programmer-defined function (a "signal handler").

If the signal
.I signum
is delivered to the process, then one of the following happens:
.TP 3
*
If the disposition is set to
.BR SIG_IGN ,
then the signal is ignored.
.TP
*
If the disposition is set to
.BR SIG_DFL ,
then the default action associated with the signal (see
.BR signal (7))
occurs.
.TP
*
If the disposition is set to a function,
then first either the disposition is reset to
.BR SIG_DFL ,
or the signal is blocked (see \fIPortability\fP below), and then
.I handler
is called with argument
.IR signum .
If invocation of the handler caused the signal to be blocked,
then the signal is unblocked upon return from the handler.
.PP
The signals
.B SIGKILL
and
.B SIGSTOP
cannot be caught or ignored.
.SH RETURN VALUE
.BR signal ()
returns the previous value of the signal handler, or
.B SIG_ERR
on error.
In the event of an error,
.I errno
is set to indicate the cause.
.SH ERRORS
.TP
.B EINVAL
.I signum
is invalid.
.SH CONFORMING TO
C89, C99, POSIX.1-2001.
.SH NOTES
The effects of
.BR signal ()
in a multithreaded process are unspecified.
.PP
According to POSIX, the behavior of a process is undefined after it
ignores a
.BR SIGFPE ,
.BR SIGILL ,
or
.B SIGSEGV
signal that was not generated by
.BR kill (2)
or
.BR raise (3).
Integer division by zero has undefined result.
On some architectures it will generate a
.B SIGFPE
signal.
(Also dividing the most negative integer by \-1 may generate
.BR SIGFPE .)
Ignoring this signal might lead to an endless loop.
.PP
See
.BR sigaction (2)
for details on what happens when
.B SIGCHLD
is set to
.BR SIG_IGN .
.PP
See
.BR signal (7)
for a list of the async-signal-safe functions that can be
safely called from inside a signal handler.
.PP
The use of
.I sighandler_t
is a GNU extension, exposed if
.B _GNU_SOURCE
is defined;
.\" libc4 and libc5 define
.\" .IR SignalHandler ;
glibc also defines (the BSD-derived)
.I sig_t
if
.B _BSD_SOURCE
is defined.
Without use of such a type, the declaration of
.BR signal ()
is the somewhat harder to read:
.in +4n
.nf

.BI "void ( *" signal "(int " signum ", void (*" handler ")(int)) ) (int);"
.fi
.in
.SS Portability
The only portable use of
.BR signal ()
is to set a signal's disposition to
.BR SIG_DFL
or
.BR SIG_IGN .
The semantics when using
.BR signal ()
to establish a signal handler vary across systems
(and POSIX.1 explicitly permits this variation);
.B do not use it for this purpose.

POSIX.1 solved the portability mess by specifying
.BR sigaction (2),
which provides explicit control of the semantics when a
signal handler is invoked; use that interface instead of
.BR signal ().

In the original UNIX systems, when a handler that was established using
.BR signal ()
was invoked by the delivery of a signal,
the disposition of the signal would be reset to
.BR SIG_DFL ,
and the system did not block delivery of further instances of the signal.
This is equivalent to calling
.BR sigaction (2)
with the following flags:

    sa.sa_flags = SA_RESETHAND | SA_NODEFER;

System\ V also provides these semantics for
.BR signal ().
This was bad because the signal might be delivered again
before the handler had a chance to reestablish itself.
Furthermore, rapid deliveries of the same signal could
result in recursive invocations of the handler.

BSD improved on this situation, but unfortunately also
changed the semantics of the existing
.BR signal ()
interface while doing so.
On BSD, when a signal handler is invoked,
the signal disposition is not reset,
and further instances of the signal are blocked from
being delivered while the handler is executing.
Furthermore, certain blocking system calls are automatically
restarted if interrupted by a signal handler (see
.BR signal (7)).
The BSD semantics are equivalent to calling
.BR sigaction (2)
with the following flags:

    sa.sa_flags = SA_RESTART;

The situation on Linux is as follows:
.IP * 2
The kernel's
.BR signal ()
system call provides System\ V semantics.
.IP *
By default, in glibc 2 and later, the
.BR signal ()
wrapper function does not invoke the kernel system call.
Instead, it calls
.BR sigaction (2)
using flags that supply BSD semantics.
This default behavior is provided as long as the
.B _BSD_SOURCE
feature test macro is defined.
By default,
.B _BSD_SOURCE
is defined;
it is also implicitly defined if one defines
.BR _GNU_SOURCE ,
and can of course be explicitly defined.
.IP *
On glibc 2 and later, if the
.B _BSD_SOURCE
feature test macro is not defined, then
.BR signal ()
provides System\ V semantics.
(The default implicit definition of
.B _BSD_SOURCE
is not provided if one invokes
.BR gcc (1)
in one of its standard modes
.RI ( -std=xxx " or " -ansi )
or defines various other feature test macros such as
.BR _POSIX_SOURCE ,
.BR _XOPEN_SOURCE ,
or
.BR _SVID_SOURCE ;
see
.BR feature_test_macros (7).)
.\"
.\" System V semantics are also provided if one uses the separate
.\" .BR sysv_signal (3)
.\" function.
.\" .IP *
.\" The
.\" .BR signal ()
.\" function in Linux libc4 and libc5 provide System\ V semantics.
.\" If one on a libc5 system includes
.\" .I <bsd/signal.h>
.\" instead of
.\" .IR <signal.h> ,
.\" then
.\" .BR signal ()
.\" provides BSD semantics.
.SH SEE ALSO
.BR kill (1),
.BR alarm (2),
.BR kill (2),
.BR killpg (2),
.BR pause (2),
.BR sigaction (2),
.BR signalfd (2),
.BR sigpending (2),
.BR sigprocmask (2),
.BR sigsuspend (2),
.BR bsd_signal (3),
.BR raise (3),
.BR siginterrupt (3),
.BR sigqueue (3),
.BR sigsetops (3),
.BR sigvec (3),
.BR sysv_signal (3),
.BR signal (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2008 Michael Kerrisk <mtk.manpages@gmail.com>
.\" starting from a version by Davide Libenzi <davidel@xmailserver.org>
.\"
.\" %%%LICENSE_START(GPLv2+_SW_3_PARA)
.\" This program is free software; you can redistribute it and/or modify
.\" it under the terms of the GNU General Public License as published by
.\" the Free Software Foundation; either version 2 of the License, or
.\" (at your option) any later version.
.\"
.\" This program is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.TH SIGNALFD 2 2014-07-08 Linux "Linux Programmer's Manual"
.SH NAME
signalfd \- create a file descriptor for accepting signals
.SH SYNOPSIS
.B #include <sys/signalfd.h>
.sp
.BI "int signalfd(int " fd ", const sigset_t *" mask ", int " flags );
.SH DESCRIPTION
.BR signalfd ()
creates a file descriptor that can be used to accept signals
targeted at the caller.
This provides an alternative to the use of a signal handler or
.BR sigwaitinfo (2),
and has the advantage that the file descriptor may be monitored by
.BR select (2),
.BR poll (2),
and
.BR epoll (7).

The
.I mask
argument specifies the set of signals that the caller
wishes to accept via the file descriptor.
This argument is a signal set whose contents can be initialized
using the macros described in
.BR sigsetops (3).
Normally, the set of signals to be received via the
file descriptor should be blocked using
.BR sigprocmask (2),
to prevent the signals being handled according to their default
dispositions.
It is not possible to receive
.B SIGKILL
or
.B SIGSTOP
signals via a signalfd file descriptor;
these signals are silently ignored if specified in
.IR mask .

If the
.I fd
argument is \-1,
then the call creates a new file descriptor and associates the
signal set specified in
.I mask
with that descriptor.
If
.I fd
is not \-1,
then it must specify a valid existing signalfd file descriptor, and
.I mask
is used to replace the signal set associated with that descriptor.

Starting with Linux 2.6.27, the following values may be bitwise ORed in
.IR flags
to change the behavior of
.BR signalfd ():
.TP 14
.B SFD_NONBLOCK
Set the
.BR O_NONBLOCK
file status flag on the new open file description.
Using this flag saves extra calls to
.BR fcntl (2)
to achieve the same result.
.TP
.B SFD_CLOEXEC
Set the close-on-exec
.RB ( FD_CLOEXEC )
flag on the new file descriptor.
See the description of the
.B O_CLOEXEC
flag in
.BR open (2)
for reasons why this may be useful.
.PP
In Linux up to version 2.6.26, the
.I flags
argument is unused, and must be specified as zero.

.BR signalfd ()
returns a file descriptor that supports the following operations:
.TP
.BR read (2)
If one or more of the signals specified in
.I mask
is pending for the process, then the buffer supplied to
.BR read (2)
is used to return one or more
.I signalfd_siginfo
structures (see below) that describe the signals.
The
.BR read (2)
returns information for as many signals as are pending and will
fit in the supplied buffer.
The buffer must be at least
.I "sizeof(struct signalfd_siginfo)"
bytes.
The return value of the
.BR read (2)
is the total number of bytes read.
.IP
As a consequence of the
.BR read (2),
the signals are consumed,
so that they are no longer pending for the process
(i.e., will not be caught by signal handlers,
and cannot be accepted using
.BR sigwaitinfo (2)).
.IP
If none of the signals in
.I mask
is pending for the process, then the
.BR read (2)
either blocks until one of the signals in
.I mask
is generated for the process,
or fails with the error
.B EAGAIN
if the file descriptor has been made nonblocking.
.TP
.BR poll "(2), " select "(2) (and similar)"
The file descriptor is readable
(the
.BR select (2)
.I readfds
argument; the
.BR poll (2)
.B POLLIN
flag)
if one or more of the signals in
.I mask
is pending for the process.
.IP
The signalfd file descriptor also supports the other file-descriptor
multiplexing APIs:
.BR pselect (2),
.BR ppoll (2),
and
.BR epoll (7).
.TP
.BR close (2)
When the file descriptor is no longer required it should be closed.
When all file descriptors associated with the same signalfd object
have been closed, the resources for object are freed by the kernel.
.SS The signalfd_siginfo structure
The format of the
.I signalfd_siginfo
structure(s) returned by
.BR read (2)s
from a signalfd file descriptor is as follows:
.in +4n
.nf

struct signalfd_siginfo {
    uint32_t ssi_signo;   /* Signal number */
    int32_t  ssi_errno;   /* Error number (unused) */
    int32_t  ssi_code;    /* Signal code */
    uint32_t ssi_pid;     /* PID of sender */
    uint32_t ssi_uid;     /* Real UID of sender */
    int32_t  ssi_fd;      /* File descriptor (SIGIO) */
    uint32_t ssi_tid;     /* Kernel timer ID (POSIX timers)
    uint32_t ssi_band;    /* Band event (SIGIO) */
    uint32_t ssi_overrun; /* POSIX timer overrun count */
    uint32_t ssi_trapno;  /* Trap number that caused signal */
.\" ssi_trapno is unused on most arches
    int32_t  ssi_status;  /* Exit status or signal (SIGCHLD) */
    int32_t  ssi_int;     /* Integer sent by sigqueue(3) */
    uint64_t ssi_ptr;     /* Pointer sent by sigqueue(3) */
    uint64_t ssi_utime;   /* User CPU time consumed (SIGCHLD) */
    uint64_t ssi_stime;   /* System CPU time consumed (SIGCHLD) */
    uint64_t ssi_addr;    /* Address that generated signal
                             (for hardware-generated signals) */
.\" FIXME Since Linux 2.6.37 there is 'uint16_t ssi_addr_lsb'
.\" in the signalfd_siginfo structure. This needs to be documented.
    uint8_t  pad[\fIX\fP];      /* Pad size to 128 bytes (allow for
                              additional fields in the future) */
};

.fi
.in
Each of the fields in this structure
is analogous to the similarly named field in the
.I siginfo_t
structure.
The
.I siginfo_t
structure is described in
.BR sigaction (2).
Not all fields in the returned
.I signalfd_siginfo
structure will be valid for a specific signal;
the set of valid fields can be determined from the value returned in the
.I ssi_code
field.
This field is the analog of the
.I siginfo_t
.I si_code
field; see
.BR sigaction (2)
for details.
.SS fork(2) semantics
After a
.BR fork (2),
the child inherits a copy of the signalfd file descriptor.
A
.BR read (2)
from the file descriptor in the child will return information
about signals queued to the child.
.SS execve(2) semantics
Just like any other file descriptor,
a signalfd file descriptor remains open across an
.BR execve (2),
unless it has been marked for close-on-exec (see
.BR fcntl (2)).
Any signals that were available for reading before the
.BR execve (2)
remain available to the newly loaded program.
(This is analogous to traditional signal semantics,
where a blocked signal that is pending remains pending across an
.BR execve (2).)
.SS Thread semantics
The semantics of signalfd file descriptors in a multithreaded program
mirror the standard semantics for signals.
In other words,
when a thread reads from a signalfd file descriptor,
it will read the signals that are directed to the thread
itself and the signals that are directed to the process
(i.e., the entire thread group).
(A thread will not be able to read signals that are directed
to other threads in the process.)
.SH RETURN VALUE
On success,
.BR signalfd ()
returns a signalfd file descriptor;
this is either a new file descriptor (if
.I fd
was \-1), or
.I fd
if
.I fd
was a valid signalfd file descriptor.
On error, \-1 is returned and
.I errno
is set to indicate the error.
.SH ERRORS
.TP
.B EBADF
The
.I fd
file descriptor is not a valid file descriptor.
.TP
.B EINVAL
.I fd
is not a valid signalfd file descriptor.
.\" or, the
.\" .I sizemask
.\" argument is not equal to
.\" .IR sizeof(sigset_t) ;
.TP
.B EINVAL
.I flags
is invalid;
or, in Linux 2.6.26 or earlier,
.I flags
is nonzero.
.TP
.B EMFILE
The per-process limit of open file descriptors has been reached.
.TP
.B ENFILE
The system-wide limit on the total number of open files has been
reached.
.TP
.B ENODEV
Could not mount (internal) anonymous inode device.
.TP
.B ENOMEM
There was insufficient memory to create a new signalfd file descriptor.
.SH VERSIONS
.BR signalfd ()
is available on Linux since kernel 2.6.22.
Working support is provided in glibc since version 2.8.
.\" signalfd() is in glibc 2.7, but reportedly does not build
The
.BR signalfd4 ()
system call (see NOTES) is available on Linux since kernel 2.6.27.
.SH CONFORMING TO
.BR signalfd ()
and
.BR signalfd4 ()
are Linux-specific.
.SH NOTES
A process can create multiple signalfd file descriptors.
This makes it possible to accept different signals
on different file descriptors.
(This may be useful if monitoring the file descriptors using
.BR select (2),
.BR poll (2),
or
.BR epoll (7):
the arrival of different signals will make different descriptors ready.)
If a signal appears in the
.I mask
of more than one of the file descriptors, then occurrences
of that signal can be read (once) from any one of the descriptors.
.SS C library/kernel ABI differences
The underlying Linux system call requires an additional argument,
.IR "size_t sizemask" ,
which specifies the size of the
.I mask
argument.
The glibc
.BR signalfd ()
wrapper function does not include this argument,
since it provides the required value for the underlying system call.

There are two underlying Linux system calls:
.BR signalfd ()
and the more recent
.BR signalfd4 ().
The former system call does not implement a
.I flags
argument.
The latter system call implements the
.I flags
values described above.
Starting with glibc 2.9, the
.BR signalfd ()
wrapper function will use
.BR signalfd4 ()
where it is available.
.SH BUGS
In kernels before 2.6.25, the
.I ssi_ptr
and
.I ssi_int
fields are not filled in with the data accompanying a signal sent by
.BR sigqueue (3).
.\" The fix also was put into 2.6.24.5
.SH EXAMPLE
The program below accepts the signals
.B SIGINT
and
.B SIGQUIT
via a signalfd file descriptor.
The program terminates after accepting a
.B SIGQUIT
signal.
The following shell session demonstrates the use of the program:
.in +4n
.nf

.RB "$" " ./signalfd_demo"
.BR "^C" "                   # Control\-C generates SIGINT"
Got SIGINT
.B ^C
Got SIGINT
\fB^\\\fP                    # Control\-\\ generates SIGQUIT
Got SIGQUIT
$
.fi
.in
.SS Program source
\&
.nf
#include <sys/signalfd.h>
#include <signal.h>
#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>

#define handle_error(msg) \\
    do { perror(msg); exit(EXIT_FAILURE); } while (0)

int
main(int argc, char *argv[])
{
    sigset_t mask;
    int sfd;
    struct signalfd_siginfo fdsi;
    ssize_t s;

    sigemptyset(&mask);
    sigaddset(&mask, SIGINT);
    sigaddset(&mask, SIGQUIT);

    /* Block signals so that they aren\(aqt handled
       according to their default dispositions */

    if (sigprocmask(SIG_BLOCK, &mask, NULL) == \-1)
        handle_error("sigprocmask");

    sfd = signalfd(\-1, &mask, 0);
    if (sfd == \-1)
        handle_error("signalfd");

    for (;;) {
        s = read(sfd, &fdsi, sizeof(struct signalfd_siginfo));
        if (s != sizeof(struct signalfd_siginfo))
            handle_error("read");

        if (fdsi.ssi_signo == SIGINT) {
            printf("Got SIGINT\\n");
        } else if (fdsi.ssi_signo == SIGQUIT) {
            printf("Got SIGQUIT\\n");
            exit(EXIT_SUCCESS);
        } else {
            printf("Read unexpected signal\\n");
        }
    }
}
.fi
.SH SEE ALSO
.BR eventfd (2),
.BR poll (2),
.BR read (2),
.BR select (2),
.BR sigaction (2),
.BR sigprocmask (2),
.BR sigwaitinfo (2),
.BR timerfd_create (2),
.BR sigsetops (3),
.BR sigwait (3),
.BR epoll (7),
.BR signal (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2005 Michael Kerrisk
.\" based on earlier work by faith@cs.unc.edu and
.\" Mike Battersby <mib@deakin.edu.au>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" 2005-09-15, mtk, Created new page by splitting off from sigaction.2
.\"
.TH SIGPENDING 2 2015-03-29 "Linux" "Linux Programmer's Manual"
.SH NAME
sigpending, rt_sigpending \- examine pending signals
.SH SYNOPSIS
.B #include <signal.h>
.sp
.BI "int sigpending(sigset_t *" set );
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR sigpending ():
_POSIX_C_SOURCE\ >=\ 1 || _XOPEN_SOURCE || _POSIX_SOURCE
.ad b
.SH DESCRIPTION
.PP
.BR sigpending ()
returns the set of signals that are pending for delivery to the calling
thread (i.e., the signals which have been raised while blocked).
The mask of pending signals is returned in
.IR set .
.SH RETURN VALUE
.BR sigpending ()
returns 0 on success and \-1 on error.
In the event of an error,
.I errno
is set to indicate the cause.
.SH ERRORS
.TP
.B EFAULT
.I set
points to memory which is not a valid part of the process address space.
.SH CONFORMING TO
POSIX.1-2001.
.SH NOTES
See
.BR sigsetops (3)
for details on manipulating signal sets.

If a signal is both blocked and has a disposition of "ignored", it is
.I not
added to the mask of pending signals when generated.

The set of signals that is pending for a thread
is the union of the set of signals that is pending for that thread
and the set of signals that is pending for the process as a whole; see
.BR signal (7).

A child created via
.BR fork (2)
initially has an empty pending signal set;
the pending signal set is preserved across an
.BR execve (2).
.\"
.SS C library/kernel ABI differences
The original Linux system call was named
.BR sigpending ().
However, with the addition of real-time signals in Linux 2.2,
the fixed-size, 32-bit
.IR sigset_t
argument supported by that system call was no longer fit for purpose.
Consequently, a new system call,
.BR rt_sigpending (),
was added to support an enlarged
.IR sigset_t
type.
The new system call takes a second argument,
.IR "size_t sigsetsize" ,
which specifies the size in bytes of the signal set in
.IR set .
.\" This argument is currently required to be less than or equal to
.\" .IR sizeof(sigset_t)
.\" (or the error
.\" .B EINVAL
.\" results).
The glibc
.BR sigpending ()
wrapper function hides these details from us, transparently calling
.BR rt_sigpending ()
when the kernel provides it.
.\"
.SH BUGS
In versions of glibc up to and including 2.2.1,
there is a bug in the wrapper function for
.BR sigpending ()
which means that information about pending real-time signals
is not correctly returned.
.SH SEE ALSO
.BR kill (2),
.BR sigaction (2),
.BR signal (2),
.BR sigprocmask (2),
.BR sigsuspend (2),
.BR sigsetops (3),
.BR signal (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2005 Michael Kerrisk
.\" based on earlier work by faith@cs.unc.edu and
.\" Mike Battersby <mib@deakin.edu.au>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" 2005-09-15, mtk, Created new page by splitting off from sigaction.2
.\"
.TH SIGPROCMASK 2 2015-03-29 "Linux" "Linux Programmer's Manual"
.SH NAME
sigprocmask, rt_sigprocmask \- examine and change blocked signals
.SH SYNOPSIS
.B #include <signal.h>
.sp
.BI "int sigprocmask(int " how ", const sigset_t *" set ,
.BI "sigset_t *" oldset );
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR sigprocmask ():
_POSIX_C_SOURCE\ >=\ 1 || _XOPEN_SOURCE || _POSIX_SOURCE
.ad b
.SH DESCRIPTION
.BR sigprocmask ()
is used to fetch and/or change the signal mask of the calling thread.
The signal mask is the set of signals whose delivery is currently
blocked for the caller
(see also
.BR signal (7)
for more details).

The behavior of the call is dependent on the value of
.IR how ,
as follows.
.TP
.B SIG_BLOCK
The set of blocked signals is the union of the current set and the
.I set
argument.
.TP
.B SIG_UNBLOCK
The signals in
.I set
are removed from the current set of blocked signals.
It is permissible to attempt to unblock a signal which is not blocked.
.TP
.B SIG_SETMASK
The set of blocked signals is set to the argument
.IR set .
.PP
If
.I oldset
is non-NULL, the previous value of the signal mask is stored in
.IR oldset .

If
.I set
is NULL, then the signal mask is unchanged (i.e.,
.I how
is ignored),
but the current value of the signal mask is nevertheless returned in
.I oldset
(if it is not NULL).

The use of
.BR sigprocmask ()
is unspecified in a multithreaded process; see
.BR pthread_sigmask (3).
.SH RETURN VALUE
.BR sigprocmask ()
returns 0 on success and \-1 on error.
In the event of an error,
.I errno
is set to indicate the cause.
.SH ERRORS
.TP
.B EFAULT
The
.I set
or
.I oldset
argument points outside the process's allocated address space.
.TP
.B EINVAL
The value specified in
.I how
was invalid.
.SH CONFORMING TO
POSIX.1-2001.
.SH NOTES
It is not possible to block
.BR SIGKILL " or " SIGSTOP .
Attempts to do so are silently ignored.

Each of the threads in a process has its own signal mask.

A child created via
.BR fork (2)
inherits a copy of its parent's signal mask;
the signal mask is preserved across
.BR execve (2).

If
.BR SIGBUS ,
.BR SIGFPE ,
.BR SIGILL ,
or
.B SIGSEGV
are generated
while they are blocked, the result is undefined,
unless the signal was generated by
.BR kill (2),
.BR sigqueue (3),
or
.BR raise (3).
.PP
See
.BR sigsetops (3)
for details on manipulating signal sets.
.\"
.SS C library/kernel ABI differences
The glibc wrapper function for
.BR sigprocmask ()
silently ignores attempts to block the two real-time signals that
are used internally by the NPTL threading implementation.
See
.BR nptl (7)
for details.

The original Linux system call was named
.BR sigprocmask ().
However, with the addition of real-time signals in Linux 2.2,
the fixed-size, 32-bit
.IR sigset_t
type supported by that system call was no longer fit for purpose.
Consequently, a new system call,
.BR rt_sigprocmask (),
was added to support an enlarged
.IR sigset_t
type.
The new system call takes a fourth argument,
.IR "size_t sigsetsize" ,
which specifies the size in bytes of the signal sets in
.IR set
and
.IR oldset .
This argument is currently required to have the value
.IR sizeof(sigset_t)
(or the error
.B EINVAL
results).
The glibc
.BR sigprocmask ()
wrapper function hides these details from us, transparently calling
.BR rt_sigprocmask ()
when the kernel provides it.
.\"
.SH SEE ALSO
.BR kill (2),
.BR pause (2),
.BR sigaction (2),
.BR signal (2),
.BR sigpending (2),
.BR sigsuspend (2),
.BR pthread_sigmask (3),
.BR sigqueue (3),
.BR sigsetops (3),
.BR signal (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2008, 2014, Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Created   Sat Aug 21 1995     Thomas K. Dyas <tdyas@eden.rutgers.edu>
.\" Modified Tue Oct 22 22:09:03 1996 by Eric S. Raymond <esr@thyrsus.com>
.\" 2008-06-26, mtk, added some more detail on the work done by sigreturn()
.\" 2014-12-05, mtk, rewrote all of the rest of the original page
.\"
.TH SIGRETURN 2 2015-03-29 "Linux" "Linux Programmer's Manual"
.SH NAME
sigreturn, rt_sigreturn \- return from signal handler and cleanup stack frame
.SH SYNOPSIS
.BI "int sigreturn(...);"
.SH DESCRIPTION
If the Linux kernel determines that an unblocked
signal is pending for a process, then,
at the next transition back to user mode in that process
(e.g., upon return from a system call or
when the process is rescheduled onto the CPU),
it saves various pieces of process context
(processor status word, registers, signal mask, and signal stack settings)
into the user-space stack.
.\" See arch/x86/kernel/signal.c::__setup_frame() [in 3.17 source code]

The kernel also arranges that, during the transition back to user mode,
the signal handler is called, and that, upon return from the handler,
control passes to a piece of user-space code commonly called
the "signal trampoline".
The signal trampoline code in turn calls
.BR sigreturn ().

This
.BR sigreturn ()
call undoes everything that was
done\(emchanging the process's signal mask, switching signal stacks (see
.BR sigaltstack "(2))\(emin "
order to invoke the signal handler.
It restores the process's signal mask, switches stacks,
and restores the process's context
(processor flags and registers,
including the stack pointer and instruction pointer),
so that the process resumes execution
at the point where it was interrupted by the signal.
.SH RETURN VALUE
.BR sigreturn ()
never returns.
.SH CONFORMING TO
Many UNIX-type systems have a
.BR sigreturn ()
system call or near equivalent.
However, this call is not specified in POSIX,
and details of its behavior vary across systems.
.SH NOTES
.BR sigreturn ()
exists only to allow the implementation of signal handlers.
It should
.B never
be called directly.
Details of the arguments (if any) passed to
.BR sigreturn ()
vary depending on the architecture.

Once upon a time, UNIX systems placed the signal trampoline code
onto the user stack.
Nowadays, pages of the user stack are protected so as to
disallow code execution.
Thus, on contemporary Linux systems, depending on the architecture,
the signal trampoline code lives either in the
.BR vdso (7)
or in the C library.
In the latter case,
.\" See, for example, sysdeps/unix/sysv/linux/i386/sigaction.c and
.\" sysdeps/unix/sysv/linux/x86_64/sigaction.c in the glibc (2.20) source.
the C library supplies the location of the trampoline code using the
.I sa_restorer
field of the
.I sigaction
structure that is passed to
.BR sigaction (2),
and sets the
.BR SA_RESTORER
flag in the
.IR sa_flags
field.

The saved process context information is placed in a
.I ucontext_t
structure (see
.IR <sys/ucontext.h> ).
That structure is visible within the signal handler
as the third argument of a handler established with the
.BR SA_SIGINFO
flag.

On some other UNIX systems,
the operation of the signal trampoline differs a little.
In particular, on some systems, upon transitioning back to user mode,
the kernel passes control to the trampoline (rather than the signal handler),
and the trampoline code calls the signal handler (and then calls
.BR sigreturn ()
once the handler returns).
.\"
.SS C library/kernel ABI differences
The original Linux system call was named
.BR sigreturn ().
However, with the addition of real-time signals in Linux 2.2,
a new system call,
.BR rt_sigreturn ()
was added to support an enlarged
.IR sigset_t
type.
The GNU C library
hides these details from us, transparently employing
.BR rt_sigreturn ()
when the kernel provides it.
.\"
.SH SEE ALSO
.BR kill (2),
.BR restart_syscall (2),
.BR sigaltstack (2),
.BR signal (2),
.BR getcontext (3),
.BR signal (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2005 Michael Kerrisk
.\" based on earlier work by faith@cs.unc.edu and
.\" Mike Battersby <mib@deakin.edu.au>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" 2005-09-15, mtk, Created new page by splitting off from sigaction.2
.\"
.TH SIGSUSPEND 2 2015-03-29 "Linux" "Linux Programmer's Manual"
.SH NAME
sigsuspend, rt_sigsuspend \- wait for a signal
.SH SYNOPSIS
.B #include <signal.h>
.sp
.BI "int sigsuspend(const sigset_t *" mask );
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR sigsuspend ():
_POSIX_C_SOURCE\ >=\ 1 || _XOPEN_SOURCE || _POSIX_SOURCE
.ad b
.SH DESCRIPTION
.BR sigsuspend ()
temporarily replaces the signal mask of the calling process with the
mask given by
.I mask
and then suspends the process until delivery of a signal whose
action is to invoke a signal handler or to terminate a process.

If the signal terminates the process, then
.BR sigsuspend ()
does not return.
If the signal is caught, then
.BR sigsuspend ()
returns after the signal handler returns,
and the signal mask is restored to the state before the call to
.BR sigsuspend ().

It is not possible to block
.B SIGKILL
or
.BR SIGSTOP ;
specifying these signals in
.IR mask ,
has no effect on the process's signal mask.
.SH RETURN VALUE
.BR sigsuspend ()
always returns \-1, with
.I errno
set to indicate the error (normally,
.BR EINTR ).
.SH ERRORS
.TP
.B EFAULT
.I mask
points to memory which is not a valid part of the process address space.
.TP
.B EINTR
The call was interrupted by a signal.
.SH CONFORMING TO
POSIX.1-2001.
.SH NOTES
.PP
Normally,
.BR sigsuspend ()
is used in conjunction with
.BR sigprocmask (2)
in order to prevent delivery of a signal during the execution of a
critical code section.
The caller first blocks the signals with
.BR sigprocmask (2).
When the critical code has completed, the caller then waits for the
signals by calling
.BR sigsuspend ()
with the signal mask that was returned by
.BR sigprocmask (2)
(in the
.I oldset
argument).
.PP
See
.BR sigsetops (3)
for details on manipulating signal sets.
.\"
.SS C library/kernel ABI differences
The original Linux system call was named
.BR sigsuspend ().
However, with the addition of real-time signals in Linux 2.2,
the fixed-size, 32-bit
.IR sigset_t
type supported by that system call was no longer fit for purpose.
Consequently, a new system call,
.BR rt_sigsuspend (),
was added to support an enlarged
.IR sigset_t
type.
The new system call takes a second argument,
.IR "size_t sigsetsize" ,
which specifies the size in bytes of the signal set in
.IR mask .
This argument is currently required to have the value
.IR sizeof(sigset_t)
(or the error
.B EINVAL
results).
The glibc
.BR sigsuspend ()
wrapper function hides these details from us, transparently calling
.BR rt_sigsuspend ()
when the kernel provides it.
.\"
.SH SEE ALSO
.BR kill (2),
.BR pause (2),
.BR sigaction (2),
.BR signal (2),
.BR sigprocmask (2),
.BR sigwaitinfo (2),
.BR sigsetops (3),
.BR sigwait (3),
.BR signal (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2002 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH SIGWAITINFO 2 2015-03-29 "Linux" "Linux Programmer's Manual"
.SH NAME
sigwaitinfo, sigtimedwait, rt_sigtimedwait \- synchronously wait
for queued signals
.SH SYNOPSIS
.nf
.B #include <signal.h>
.sp
.BI "int sigwaitinfo(const sigset_t *" set ", siginfo_t *" info ");"
.sp
.BI "int sigtimedwait(const sigset_t *" set ", siginfo_t *" info ", "
.BI "                 const struct timespec *" timeout ");"
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR sigwaitinfo (),
.BR sigtimedwait ():
_POSIX_C_SOURCE\ >=\ 199309L
.SH DESCRIPTION
.BR sigwaitinfo ()
suspends execution of the calling thread until one of the signals in
.I set
is pending
(If one of the signals in
.I set
is already pending for the calling thread,
.BR sigwaitinfo ()
will return immediately.)

.BR sigwaitinfo ()
removes the signal from the set of pending
signals and returns the signal number as its function result.
If the
.I info
argument is not NULL,
then the buffer that it points to is used to return a structure of type
.I siginfo_t
(see
.BR sigaction (2))
containing information about the signal.
.PP
If multiple signals in
.I set
are pending for the caller, the signal that is retrieved by
.BR sigwaitinfo ()
is determined according to the usual ordering rules; see
.BR signal (7)
for further details.
.PP
.BR sigtimedwait ()
operates in exactly the same way as
.BR sigwaitinfo ()
except that it has an additional argument,
.IR timeout ,
which specifies the interval for which
the thread is suspended waiting for a signal.
(This interval will be rounded up to the system clock granularity,
and kernel scheduling delays mean that the interval
may overrun by a small amount.)
This argument is of the following type:
.sp
.in +4n
.nf
struct timespec {
    long    tv_sec;         /* seconds */
    long    tv_nsec;        /* nanoseconds */
}
.fi
.in
.sp
If both fields of this structure are specified as 0, a poll is performed:
.BR sigtimedwait ()
returns immediately, either with information about a signal that
was pending for the caller, or with an error
if none of the signals in
.I set
was pending.
.SH RETURN VALUE
On success, both
.BR sigwaitinfo ()
and
.BR sigtimedwait ()
return a signal number (i.e., a value greater than zero).
On failure both calls return \-1, with
.I errno
set to indicate the error.
.SH ERRORS
.TP
.B EAGAIN
No signal in
.I set
was became pending within the
.I timeout
period specified to
.BR sigtimedwait ().
.TP
.B EINTR
The wait was interrupted by a signal handler; see
.BR signal (7).
(This handler was for a signal other than one of those in
.IR set .)
.TP
.B EINVAL
.I timeout
was invalid.
.SH CONFORMING TO
POSIX.1-2001.
.SH NOTES
In normal usage, the calling program blocks the signals in
.I set
via a prior call to
.BR sigprocmask (2)
(so that the default disposition for these signals does not occur if they
become pending between successive calls to
.BR sigwaitinfo ()
or
.BR sigtimedwait ())
and does not establish handlers for these signals.
In a multithreaded program,
the signal should be blocked in all threads, in order to prevent
the signal being treated according to its default disposition in
a thread other than the one calling
.BR sigwaitinfo ()
or
.BR sigtimedwait ()).

The set of signals that is pending for a given thread is the
union of the set of signals that is pending specifically for that thread
and the set of signals that is pending for the process as a whole (see
.BR signal (7)).

Attempts to wait for
.B SIGKILL
and
.B SIGSTOP
are silently ignored.

If multiple threads of a process are blocked
waiting for the same signal(s) in
.BR sigwaitinfo ()
or
.BR sigtimedwait (),
then exactly one of the threads will actually receive the
signal if it becomes pending for the process as a whole;
which of the threads receives the signal is indeterminate.

POSIX leaves the meaning of a NULL value for the
.I timeout
argument of
.BR sigtimedwait ()
unspecified, permitting the possibility that this has the same meaning
as a call to
.BR sigwaitinfo (),
and indeed this is what is done on Linux.
.\"
.SS C library/kernel ABI differences
On Linux,
.BR sigwaitinfo ()
is a library function implemented on top of
.BR sigtimedwait ().

The glibc wrapper functions for
.BR sigwaitinfo ()
and
.BR sigtimedwait ()
silently ignore attempts to wait for the two real-time signals that
are used internally by the NPTL threading implementation.
See
.BR nptl (7)
for details.

The original Linux system call was named
.BR sigtimedwait ().
However, with the addition of real-time signals in Linux 2.2,
the fixed-size, 32-bit
.I sigset_t
type supported by that system call was no longer fit for purpose.
Consequently, a new system call,
.BR rt_sigtimedwait (),
was added to support an enlarged
.IR sigset_t
type.
The new system call takes a fourth argument,
.IR "size_t sigsetsize" ,
which specifies the size in bytes of the signal set in
.IR set .
This argument is currently required to have the value
.IR sizeof(sigset_t)
(or the error
.B EINVAL
results).
The glibc
.BR sigtimedwait ()
wrapper function hides these details from us, transparently calling
.BR rt_sigtimedwait ()
when the kernel provides it.
.\"
.SH SEE ALSO
.BR kill (2),
.BR sigaction (2),
.BR signal (2),
.BR signalfd (2),
.BR sigpending (2),
.BR sigprocmask (2),
.BR sigqueue (3),
.BR sigsetops (3),
.BR sigwait (3),
.BR signal (7),
.BR time (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
'\" t
.\" Copyright (c) 1983, 1991 The Regents of the University of California.
.\" All rights reserved.
.\"
.\" %%%LICENSE_START(BSD_4_CLAUSE_UCB)
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\" %%%LICENSE_END
.\"
.\"     $Id: socket.2,v 1.4 1999/05/13 11:33:42 freitag Exp $
.\"
.\" Modified 1993-07-24 by Rik Faith <faith@cs.unc.edu>
.\" Modified 1996-10-22 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified 1998, 1999 by Andi Kleen <ak@muc.de>
.\" Modified 2002-07-17 by Michael Kerrisk <mtk.manpages@gmail.com>
.\" Modified 2004-06-17 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.TH SOCKET 2 2015-03-29 "Linux" "Linux Programmer's Manual"
.SH NAME
socket \- create an endpoint for communication
.SH SYNOPSIS
.BR "#include <sys/types.h>" "          /* See NOTES */"
.br
.B #include <sys/socket.h>
.sp
.BI "int socket(int " domain ", int " type ", int " protocol );
.SH DESCRIPTION
.BR socket ()
creates an endpoint for communication and returns a descriptor.
.PP
The
.I domain
argument specifies a communication domain; this selects the protocol
family which will be used for communication.
These families are defined in
.IR <sys/socket.h> .
The currently understood formats include:
.TS
tab(:);
l l l.
Name:Purpose:Man page
T{
.BR AF_UNIX ", " AF_LOCAL
T}:T{
Local communication
T}:T{
.BR unix (7)
T}
T{
.B AF_INET
T}:IPv4 Internet protocols:T{
.BR ip (7)
T}
T{
.B AF_INET6
T}:IPv6 Internet protocols:T{
.BR ipv6 (7)
T}
T{
.B AF_IPX
T}:IPX \- Novell protocols:
T{
.B AF_NETLINK
T}:T{
Kernel user interface device
T}:T{
.BR netlink (7)
T}
T{
.B AF_X25
T}:ITU-T X.25 / ISO-8208 protocol:T{
.BR x25 (7)
T}
T{
.B AF_AX25
T}:T{
Amateur radio AX.25 protocol
T}:
T{
.B AF_ATMPVC
T}:Access to raw ATM PVCs:
T{
.B AF_APPLETALK
T}:AppleTalk:T{
.BR ddp (7)
T}
T{
.B AF_PACKET
T}:T{
Low level packet interface
T}:T{
.BR packet (7)
T}
T{
.B AF_ALG
T}:T{
Interface to kernel crypto API
T}
.TE
.PP
The socket has the indicated
.IR type ,
which specifies the communication semantics.
Currently defined types
are:
.TP 16
.B SOCK_STREAM
Provides sequenced, reliable, two-way, connection-based byte streams.
An out-of-band data transmission mechanism may be supported.
.TP
.B SOCK_DGRAM
Supports datagrams (connectionless, unreliable messages of a fixed
maximum length).
.TP
.B SOCK_SEQPACKET
Provides a sequenced, reliable, two-way connection-based data
transmission path for datagrams of fixed maximum length; a consumer is
required to read an entire packet with each input system call.
.TP
.B SOCK_RAW
Provides raw network protocol access.
.TP
.B SOCK_RDM
Provides a reliable datagram layer that does not guarantee ordering.
.TP
.B SOCK_PACKET
Obsolete and should not be used in new programs;
see
.BR packet (7).
.PP
Some socket types may not be implemented by all protocol families.
.PP
Since Linux 2.6.27, the
.I type
argument serves a second purpose:
in addition to specifying a socket type,
it may include the bitwise OR of any of the following values,
to modify the behavior of
.BR socket ():
.TP 16
.B SOCK_NONBLOCK
Set the
.BR O_NONBLOCK
file status flag on the new open file description.
Using this flag saves extra calls to
.BR fcntl (2)
to achieve the same result.
.TP
.B SOCK_CLOEXEC
Set the close-on-exec
.RB ( FD_CLOEXEC )
flag on the new file descriptor.
See the description of the
.B O_CLOEXEC
flag in
.BR open (2)
for reasons why this may be useful.
.PP
The
.I protocol
specifies a particular protocol to be used with the socket.
Normally only a single protocol exists to support a particular
socket type within a given protocol family, in which case
.I protocol
can be specified as 0.
However, it is possible that many protocols may exist, in
which case a particular protocol must be specified in this manner.
The protocol number to use is specific to the \*(lqcommunication domain\*(rq
in which communication is to take place; see
.BR protocols (5).
See
.BR getprotoent (3)
on how to map protocol name strings to protocol numbers.
.PP
Sockets of type
.B SOCK_STREAM
are full-duplex byte streams.
They do not preserve
record boundaries.
A stream socket must be in
a
.I connected
state before any data may be sent or received on it.
A connection to
another socket is created with a
.BR connect (2)
call.
Once connected, data may be transferred using
.BR read (2)
and
.BR write (2)
calls or some variant of the
.BR send (2)
and
.BR recv (2)
calls.
When a session has been completed a
.BR close (2)
may be performed.
Out-of-band data may also be transmitted as described in
.BR send (2)
and received as described in
.BR recv (2).
.PP
The communications protocols which implement a
.B SOCK_STREAM
ensure that data is not lost or duplicated.
If a piece of data for which
the peer protocol has buffer space cannot be successfully transmitted
within a reasonable length of time, then the connection is considered
to be dead.
When
.B SO_KEEPALIVE
is enabled on the socket the protocol checks in a protocol-specific
manner if the other end is still alive.
A
.B SIGPIPE
signal is raised if a process sends or receives
on a broken stream; this causes naive processes,
which do not handle the signal, to exit.
.B SOCK_SEQPACKET
sockets employ the same system calls as
.B SOCK_STREAM
sockets.
The only difference is that
.BR read (2)
calls will return only the amount of data requested,
and any data remaining in the arriving packet will be discarded.
Also all message boundaries in incoming datagrams are preserved.
.PP
.B SOCK_DGRAM
and
.B SOCK_RAW
sockets allow sending of datagrams to correspondents named in
.BR sendto (2)
calls.
Datagrams are generally received with
.BR recvfrom (2),
which returns the next datagram along with the address of its sender.
.PP
.B SOCK_PACKET
is an obsolete socket type to receive raw packets directly from the
device driver.
Use
.BR packet (7)
instead.
.PP
An
.BR fcntl (2)
.B F_SETOWN
operation can be used to specify a process or process group to receive a
.B SIGURG
signal when the out-of-band data arrives or
.B SIGPIPE
signal when a
.B SOCK_STREAM
connection breaks unexpectedly.
This operation may also be used to set the process or process group
that receives the I/O and asynchronous notification of I/O events via
.BR SIGIO .
Using
.B F_SETOWN
is equivalent to an
.BR ioctl (2)
call with the
.B FIOSETOWN
or
.B SIOCSPGRP
argument.
.PP
When the network signals an error condition to the protocol module (e.g.,
using a ICMP message for IP) the pending error flag is set for the socket.
The next operation on this socket will return the error code of the pending
error.
For some protocols it is possible to enable a per-socket error queue
to retrieve detailed information about the error; see
.B IP_RECVERR
in
.BR ip (7).
.PP
The operation of sockets is controlled by socket level
.IR options .
These options are defined in
.IR <sys/socket.h> .
The functions
.BR setsockopt (2)
and
.BR getsockopt (2)
are used to set and get options, respectively.
.SH RETURN VALUE
On success, a file descriptor for the new socket is returned.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EACCES
Permission to create a socket of the specified type and/or protocol
is denied.
.TP
.B EAFNOSUPPORT
The implementation does not support the specified address family.
.TP
.B EINVAL
Unknown protocol, or protocol family not available.
.TP
.B EINVAL
.\" Since Linux 2.6.27
Invalid flags in
.IR type .
.TP
.B EMFILE
Process file table overflow.
.TP
.B ENFILE
The system limit on the total number of open files has been reached.
.TP
.BR ENOBUFS " or " ENOMEM
Insufficient memory is available.
The socket cannot be
created until sufficient resources are freed.
.TP
.B EPROTONOSUPPORT
The protocol type or the specified protocol is not
supported within this domain.
.PP
Other errors may be generated by the underlying protocol modules.
.SH CONFORMING TO
4.4BSD, POSIX.1-2001.

The
.B SOCK_NONBLOCK
and
.B SOCK_CLOEXEC
flags are Linux-specific.

.BR socket ()
appeared in 4.2BSD.
It is generally portable to/from
non-BSD systems supporting clones of the BSD socket layer (including
System\ V variants).
.SH NOTES
POSIX.1-2001 does not require the inclusion of
.IR <sys/types.h> ,
and this header file is not required on Linux.
However, some historical (BSD) implementations required this header
file, and portable applications are probably wise to include it.

The manifest constants used under 4.x BSD for protocol families
are
.BR PF_UNIX ,
.BR PF_INET ,
and so on, while
.BR AF_UNIX ,
.BR AF_INET ,
and so on are used for address
families.
However, already the BSD man page promises: "The protocol
family generally is the same as the address family", and subsequent
standards use AF_* everywhere.

The
.B AF_ALG
protocol type was added in Linux 2.6.38.
More information on this interface is provided in the kernel source file,
.IR Documentation/crypto/crypto-API-userspace.txt .
.SH EXAMPLE
An example of the use of
.BR socket ()
is shown in
.BR getaddrinfo (3).
.SH SEE ALSO
.BR accept (2),
.BR bind (2),
.BR close (2),
.BR connect (2),
.BR fcntl (2),
.BR getpeername (2),
.BR getsockname (2),
.BR getsockopt (2),
.BR ioctl (2),
.BR listen (2),
.BR read (2),
.BR recv (2),
.BR select (2),
.BR send (2),
.BR shutdown (2),
.BR socketpair (2),
.BR write (2),
.BR getprotoent (3),
.BR ip (7),
.BR socket (7),
.BR tcp (7),
.BR udp (7),
.BR unix (7)

\(lqAn Introductory 4.3BSD Interprocess Communication Tutorial\(rq
and
\(lqBSD Interprocess Communication Tutorial\(rq,
reprinted in
.I UNIX Programmer's Supplementary Documents Volume 1.
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1995 Michael Chastain (mec@shell.portal.com), 15 April 1995.
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.\" Modified Tue Oct 22 22:11:53 1996 by Eric S. Raymond <esr@thyrsus.com>
.TH SOCKETCALL 2 2012-10-16 "Linux" "Linux Programmer's Manual"
.SH NAME
socketcall \- socket system calls
.SH SYNOPSIS
.BI "int socketcall(int " call ", unsigned long *" args );
.SH DESCRIPTION
.BR socketcall ()
is a common kernel entry point for the socket system calls.
.I call
determines which socket function to invoke.
.I args
points to a block containing the actual arguments,
which are passed through to the appropriate call.
.PP
User programs should call the appropriate functions by their usual names.
Only standard library implementors and kernel hackers need to know about
.BR socketcall ().
.SH CONFORMING TO
This call is specific to Linux, and should not be used in programs
intended to be portable.
.SH NOTES
On a some architectures\(emfor example, x86-64 and ARM\(emthere is no
.BR socketcall ()
system call; instead
.BR socket (2),
.BR accept (2),
.BR bind (2),
and so on really are implemented as separate system calls.
.SH SEE ALSO
.BR accept (2),
.BR bind (2),
.BR connect (2),
.BR getpeername (2),
.BR getsockname (2),
.BR getsockopt (2),
.BR listen (2),
.BR recv (2),
.BR recvfrom (2),
.BR recvmsg (2),
.BR send (2),
.BR sendmsg (2),
.BR sendto (2),
.BR setsockopt (2),
.BR shutdown (2),
.BR socket (2),
.BR socketpair (2)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1983, 1991 The Regents of the University of California.
.\" All rights reserved.
.\"
.\" %%%LICENSE_START(BSD_4_CLAUSE_UCB)
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\" %%%LICENSE_END
.\"
.\"     @(#)socketpair.2	6.4 (Berkeley) 3/10/91
.\"
.\" Modified 1993-07-24 by Rik Faith <faith@cs.unc.edu>
.\" Modified 1996-10-22 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified 2002-07-22 by Michael Kerrisk <mtk.manpages@gmail.com>
.\" Modified 2004-06-17 by Michael Kerrisk <mtk.manpages@gmail.com>
.\" 2008-10-11, mtk: Add description of SOCK_NONBLOCK and SOCK_CLOEXEC
.\"
.TH SOCKETPAIR 2 2008-10-11 "Linux" "Linux Programmer's Manual"
.SH NAME
socketpair \- create a pair of connected sockets
.SH SYNOPSIS
.BR "#include <sys/types.h>" "          /* See NOTES */"
.br
.B #include <sys/socket.h>
.sp
.BI "int socketpair(int " domain ", int " type ", int " protocol \
", int " sv [2]);
.SH DESCRIPTION
The
.BR socketpair ()
call creates an unnamed pair of connected sockets in the specified
.IR domain ,
of the specified
.IR type ,
and using the optionally specified
.IR protocol .
For further details of these arguments, see
.BR socket (2).

The descriptors used in referencing the new sockets are returned in
.IR sv [0]
and
.IR sv [1].
The two sockets are indistinguishable.
.SH RETURN VALUE
On success, zero is returned.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EAFNOSUPPORT
The specified address family is not supported on this machine.
.TP
.B EFAULT
The address
.I sv
does not specify a valid part of the process address space.
.TP
.B EMFILE
Too many descriptors are in use by this process.
.TP
.B ENFILE
The system limit on the total number of open files has been reached.
.TP
.B EOPNOTSUPP
The specified protocol does not support creation of socket pairs.
.TP
.B EPROTONOSUPPORT
The specified protocol is not supported on this machine.
.SH CONFORMING TO
4.4BSD, POSIX.1-2001.
The
.BR socketpair ()
function call appeared in 4.2BSD.
It is generally portable to/from
non-BSD systems supporting clones of the BSD socket layer (including
System\ V variants).
.SH NOTES
On Linux, the only supported domain for this call is
.B AF_UNIX
(or synonymously,
.BR AF_LOCAL ).
(Most implementations have the same restriction.)

Since Linux 2.6.27,
.BR socketpair ()
supports the
.BR SOCK_NONBLOCK
and
.BR SOCK_CLOEXEC
flags described in
.BR socket (2).

POSIX.1-2001 does not require the inclusion of
.IR <sys/types.h> ,
and this header file is not required on Linux.
However, some historical (BSD) implementations required this header
file, and portable applications are probably wise to include it.
.SH SEE ALSO
.BR pipe (2),
.BR read (2),
.BR socket (2),
.BR write (2),
.BR socket (7),
.BR unix (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" This manpage is Copyright (C) 2006 Jens Axboe
.\" and Copyright (C) 2006 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH SPLICE 2 2014-12-31 "Linux" "Linux Programmer's Manual"
.SH NAME
splice \- splice data to/from a pipe
.SH SYNOPSIS
.nf
.BR "#define _GNU_SOURCE" "         /* See feature_test_macros(7) */"
.B #include <fcntl.h>

.BI "ssize_t splice(int " fd_in ", loff_t *" off_in ", int " fd_out ,
.BI "               loff_t *" off_out ", size_t " len \
", unsigned int " flags );
.\" Return type was long before glibc 2.7
.fi
.SH DESCRIPTION
.BR splice ()
moves data between two file descriptors
without copying between kernel address space and user address space.
It transfers up to
.I len
bytes of data from the file descriptor
.I fd_in
to the file descriptor
.IR fd_out ,
where one of the descriptors must refer to a pipe.

The following semantics apply for
.I fd_in
and
.IR off_in :
.IP * 3
If
.I fd_in
refers to a pipe, then
.I off_in
must be NULL.
.IP *
If
.I fd_in
does not refer to a pipe and
.I off_in
is NULL, then bytes are read from
.I fd_in
starting from the current file offset,
and the current file offset is adjusted appropriately.
.IP *
If
.I fd_in
does not refer to a pipe and
.I off_in
is not NULL, then
.I off_in
must point to a buffer which specifies the starting
offset from which bytes will be read from
.IR fd_in ;
in this case, the current file offset of
.I fd_in
is not changed.
.PP
Analogous statements apply for
.I fd_out
and
.IR off_out .

The
.I flags
argument is a bit mask that is composed by ORing together
zero or more of the following values:
.TP 1.9i
.B SPLICE_F_MOVE
Attempt to move pages instead of copying.
This is only a hint to the kernel:
pages may still be copied if the kernel cannot move the
pages from the pipe, or if
the pipe buffers don't refer to full pages.
The initial implementation of this flag was buggy:
therefore starting in Linux 2.6.21 it is a no-op
(but is still permitted in a
.BR splice ()
call);
in the future, a correct implementation may be restored.
.TP
.B SPLICE_F_NONBLOCK
Do not block on I/O.
This makes the splice pipe operations nonblocking, but
.BR splice ()
may nevertheless block because the file descriptors that
are spliced to/from may block (unless they have the
.B O_NONBLOCK
flag set).
.TP
.B SPLICE_F_MORE
More data will be coming in a subsequent splice.
This is a helpful hint when
the
.I fd_out
refers to a socket (see also the description of
.B MSG_MORE
in
.BR send (2),
and the description of
.B TCP_CORK
in
.BR tcp (7))
.TP
.B SPLICE_F_GIFT
Unused for
.BR splice ();
see
.BR vmsplice (2).
.SH RETURN VALUE
Upon successful completion,
.BR splice ()
returns the number of bytes
spliced to or from the pipe.
A return value of 0 means that there was no data to transfer,
and it would not make sense to block, because there are no
writers connected to the write end of the pipe referred to by
.IR fd_in .

On error,
.BR splice ()
returns \-1 and
.I errno
is set to indicate the error.
.SH ERRORS
.TP
.B EAGAIN
.B SPLICE_F_NONBLOCK
was specified in
.IR flags ,
and the operation would block.
.TP
.B EBADF
One or both file descriptors are not valid,
or do not have proper read-write mode.
.TP
.B EINVAL
Target filesystem doesn't support splicing;
target file is opened in append mode;
.\" The append-mode error is given since 2.6.27; in earlier kernels,
.\" splice() in append mode was broken
neither of the descriptors refers to a pipe; or
offset given for nonseekable device.
.TP
.B ENOMEM
Out of memory.
.TP
.B ESPIPE
Either
.I off_in
or
.I off_out
was not NULL, but the corresponding file descriptor refers to a pipe.
.SH VERSIONS
The
.BR splice ()
system call first appeared in Linux 2.6.17;
library support was added to glibc in version 2.5.
.SH CONFORMING TO
This system call is Linux-specific.
.SH NOTES
The three system calls
.BR splice (),
.BR vmsplice (2),
and
.BR tee (2),
provide user-space programs with full control over an arbitrary
kernel buffer, implemented within the kernel using the same type
of buffer that is used for a pipe.
In overview, these system calls perform the following tasks:
.TP 1.2i
.BR splice ()
moves data from the buffer to an arbitrary file descriptor, or vice versa,
or from one buffer to another.
.TP
.BR tee (2)
"copies" the data from one buffer to another.
.TP
.BR vmsplice (2)
"copies" data from user space into the buffer.
.PP
Though we talk of copying, actual copies are generally avoided.
The kernel does this by implementing a pipe buffer as a set
of reference-counted pointers to pages of kernel memory.
The kernel creates "copies" of pages in a buffer by creating new
pointers (for the output buffer) referring to the pages,
and increasing the reference counts for the pages:
only pointers are copied, not the pages of the buffer.
.\"
.\" Linus: Now, imagine using the above in a media server, for example.
.\" Let's say that a year or two has passed, so that the video drivers
.\" have been updated to be able to do the splice thing, and what can
.\" you do? You can:
.\"
.\" - splice from the (mpeg or whatever - let's just assume that the video
.\"   input is either digital or does the encoding on its own - like they
.\"   pretty much all do) video input into a pipe (remember: no copies - the
.\"   video input will just DMA directly into memory, and splice will just
.\"   set up the pages in the pipe buffer)
.\" - tee that pipe to split it up
.\" - splice one end to a file (ie "save the compressed stream to disk")
.\" - splice the other end to a real-time video decoder window for your
.\"   real-time viewing pleasure.
.\"
.\" Linus: Now, the advantage of splice()/tee() is that you can
.\" do zero-copy movement of data, and unlike sendfile() you can
.\" do it on _arbitrary_ data (and, as shown by "tee()", it's more
.\" than just sending the data to somebody else: you can duplicate
.\" the data and choose to forward it to two or more different
.\" users - for things like logging etc.).
.\"
.SH EXAMPLE
See
.BR tee (2).
.SH SEE ALSO
.BR sendfile (2),
.BR tee (2),
.BR vmsplice (2)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) International Business Machines Corp., 2006
.\"
.\" %%%LICENSE_START(GPLv2+_SW_3_PARA)
.\" This program is free software; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" This program is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See
.\" the GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.\" HISTORY:
.\" 2005-09-28, created by Arnd Bergmann <arndb@de.ibm.com>
.\" 2006-06-16, revised by Eduardo M. Fleury <efleury@br.ibm.com>
.\" 2007-07-10, some polishing by mtk
.\" 2007-09-28, updates for newer kernels by Jeremy Kerr <jk@ozlabs.org>
.\"
.TH SPU_CREATE 2 2012-08-05 Linux "Linux Programmer's Manual"
.SH NAME
spu_create \- create a new spu context
.SH SYNOPSIS
.nf
.B #include <sys/types.h>
.B #include <sys/spu.h>

.BI "int spu_create(const char *" pathname ", int " flags ", mode_t " mode ");"
.BI "int spu_create(const char *" pathname ", int " flags ", mode_t " mode ","
.BI "               int " neighbor_fd ");"
.fi

.IR Note :
There is no glibc wrapper for this system call; see NOTES.
.SH DESCRIPTION
The
.BR spu_create ()
system call is used on PowerPC machines that implement the
Cell Broadband Engine Architecture in order to access Synergistic
Processor Units (SPUs).
It creates a new logical context for an SPU in
.I pathname
and returns a file descriptor associated with it.
.I pathname
must refer to a nonexistent directory in the mount point of
the SPU filesystem
.RB ( spufs ).
If
.BR spu_create ()
is successful, a directory is created at
.I pathname
and it is populated with the files described in
.BR spufs (7).

When a context is created,
the returned file descriptor can only be passed to
.BR spu_run (2),
used as the
.I dirfd
argument to the
.B *at
family of system calls (e.g.,
.BR openat (2)),
or closed;
other operations are not defined.
A logical SPU
context is destroyed (along with all files created within the context's
.I pathname
directory) once the last reference to the context has gone;
this usually occurs when the file descriptor returned by
.BR spu_create ()
is closed.

The
.I flags
argument can be zero or any bitwise OR-ed
combination of the following constants:
.TP
.B SPU_CREATE_EVENTS_ENABLED
Rather than using signals for reporting DMA errors, use the
.I event
argument to
.BR spu_run (2).
.TP
.B SPU_CREATE_GANG
Create an SPU gang instead of a context.
(A gang is a group of SPU contexts that are
functionally related to each other and which share common scheduling
parameters\(empriority and policy.
In the future, gang scheduling may be implemented causing
the group to be switched in and out as a single unit.)

A new directory will be created at the location specified by the
.I pathname
argument.
This gang may be used to hold other SPU contexts, by providing
a pathname that is within the gang directory to further calls to
.BR spu_create ().
.TP
.B SPU_CREATE_NOSCHED
Create a context that is not affected by the SPU scheduler.
Once the context is run,
it will not be scheduled out until it is destroyed by
the creating process.

Because the context cannot be removed from the SPU, some functionality
is disabled for
.BR SPU_CREATE_NOSCHED
contexts.
Only a subset of the files will be
available in this context directory in
.BR spufs .
Additionally,
.BR SPU_CREATE_NOSCHED
contexts cannot dump a core file when crashing.

Creating
.BR SPU_CREATE_NOSCHED
contexts requires the
.B CAP_SYS_NICE
capability.
.TP
.B SPU_CREATE_ISOLATE
Create an isolated SPU context.
Isolated contexts are protected from some
PPE (PowerPC Processing Element)
operations,
such as access to the SPU local store and the NPC register.

Creating
.B SPU_CREATE_ISOLATE
contexts also requires the
.B SPU_CREATE_NOSCHED
flag.
.TP
.B SPU_CREATE_AFFINITY_SPU
Create a context with affinity to another SPU context.
This affinity information is used within the SPU scheduling algorithm.
Using this flag requires that a file descriptor referring to
the other SPU context be passed in the
.I neighbor_fd
argument.
.TP
.B SPU_CREATE_AFFINITY_MEM
Create a context with affinity to system memory.
This affinity information
is used within the SPU scheduling algorithm.
.PP
The
.I mode
argument (minus any bits set in the process's
.BR umask (2))
specifies the permissions used for creating the new directory in
.BR spufs .
See
.BR stat (2)
for a full list of the possible
.I mode
values.
.SH RETURN VALUE
On success,
.BR spu_create ()
returns a new file descriptor.
On error, \-1 is returned, and
.I errno
is set to one of the error codes listed below.
.SH ERRORS
.TP
.B EACCES
The current user does not have write access to the
.BR spufs (7)
mount point.
.TP
.B EEXIST
An SPU context already exists at the given pathname.
.TP
.B EFAULT
.I pathname
is not a valid string pointer in the
calling process's address space.
.TP
.B EINVAL
.I pathname
is not a directory in the
.BR spufs (7)
mount point, or invalid flags have been provided.
.TP
.B ELOOP
Too many symbolic links were found while resolving
.IR pathname .
.TP
.B EMFILE
The process has reached its maximum open files limit.
.TP
.B ENAMETOOLONG
.I pathname
is too long.
.TP
.B ENFILE
The system has reached the global open files limit.
.TP
.B ENODEV
An isolated context was requested, but the hardware does not support
SPU isolation.
.TP
.B ENOENT
Part of
.I pathname
could not be resolved.
.TP
.B ENOMEM
The kernel could not allocate all resources required.
.TP
.B ENOSPC
There are not enough SPU resources available to create
a new context or the user-specific limit for the number
of SPU contexts has been reached.
.TP
.B ENOSYS
The functionality is not provided by the current system, because
either the hardware does not provide SPUs or the spufs module is not
loaded.
.TP
.B ENOTDIR
A part of
.I pathname
is not a directory.
.TP
.B EPERM
The
.I SPU_CREATE_NOSCHED
flag has been given, but the user does not have the
.B CAP_SYS_NICE
capability.
.SH FILES
.I pathname
must point to a location beneath the mount point of
.BR spufs .
By convention, it gets mounted in
.IR /spu .
.SH VERSIONS
The
.BR spu_create ()
system call was added to Linux in kernel 2.6.16.
.SH CONFORMING TO
This call is Linux-specific and implemented only on the PowerPC
architecture.
Programs using this system call are not portable.
.SH NOTES
Glibc does not provide a wrapper for this system call; call it using
.BR syscall (2).
Note however, that
.BR spu_create ()
is meant to be used from libraries that implement a more abstract
interface to SPUs, not to be used from regular applications.
See
.UR http://www.bsc.es\:/projects\:/deepcomputing\:/linuxoncell/
.UE
for the recommended libraries.
.SH EXAMPLE
See
.BR spu_run (2)
for an example of the use of
.BR spu_create ()
.SH SEE ALSO
.BR close (2),
.BR spu_run (2),
.BR capabilities (7),
.BR spufs (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) International Business Machines Corp., 2006
.\"
.\" %%%LICENSE_START(GPLv2+_SW_3_PARA)
.\" This program is free software; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" This program is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See
.\" the GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.\" HISTORY:
.\" 2005-09-28, created by Arnd Bergmann <arndb@de.ibm.com>
.\" 2006-06-16, revised by Eduardo M. Fleury <efleury@br.ibm.com>
.\" 2007-07-10, some polishing by mtk
.\" 2007-09-28, updates for newer kernels, added example
.\"             by Jeremy Kerr <jk@ozlabs.org>
.\"
.TH SPU_RUN 2 2012-08-05 Linux "Linux Programmer's Manual"
.SH NAME
spu_run \- execute an SPU context
.SH SYNOPSIS
.nf
.B #include <sys/spu.h>

.BI "int spu_run(int " fd ", unsigned int *" npc \
", unsigned int *" event ");"
.fi

.IR Note :
There is no glibc wrapper for this system call; see NOTES.
.SH DESCRIPTION
The
.BR spu_run ()
system call is used on PowerPC machines that implement the
Cell Broadband Engine Architecture in order to access Synergistic
Processor Units (SPUs).
The
.I fd
argument is a file descriptor returned by
.BR spu_create (2)
that refers to a specific SPU context.
When the context gets scheduled to a physical SPU,
it starts execution at the instruction pointer passed in
.IR npc .

Execution of SPU code happens synchronously, meaning that
.BR spu_run ()
blocks while the SPU is still running.
If there is a need
to execute SPU code in parallel with other code on either the
main CPU or other SPUs, a new thread of execution must be created
first (e.g., using
.BR pthread_create (3)).

When
.BR spu_run ()
returns, the current value of the SPU program counter is written to
.IR npc ,
so successive calls to
.BR spu_run ()
can use the same
.I npc
pointer.

The
.I event
argument provides a buffer for an extended status code.
If the SPU
context was created with the
.B SPU_CREATE_EVENTS_ENABLED
flag, then this buffer is populated by the Linux kernel before
.BR spu_run ()
returns.

The status code may be one (or more) of the following constants:
.TP
.B SPE_EVENT_DMA_ALIGNMENT
A DMA alignment error occurred.
.TP
.B SPE_EVENT_INVALID_DMA
An invalid MFC DMA command was attempted.
.TP
.B SPE_EVENT_SPE_DATA_STORAGE
A DMA storage error occurred.
.TP
.B SPE_EVENT_SPE_ERROR
An illegal instruction was executed.
.PP
NULL
is a valid value for the
.I event
argument.
In this case, the events will not be reported to the calling process.
.SH RETURN VALUE
On success,
.BR spu_run ()
returns the value of the
.I spu_status
register.
On error, it returns \-1 and sets
.I errno
to one of the error codes listed below.

The
.I spu_status
register value is a bit mask of status codes and
optionally a 14-bit code returned from the
.BR stop-and-signal
instruction on the SPU.
The bit masks for the status codes
are:
.TP
.B 0x02
SPU was stopped by a
.BR stop-and-signal
instruction.
.TP
.B 0x04
SPU was stopped by a
.BR halt
instruction.
.TP
.B 0x08
SPU is waiting for a channel.
.TP
.B 0x10
SPU is in single-step mode.
.TP
.B 0x20
SPU has tried to execute an invalid instruction.
.TP
.B 0x40
SPU has tried to access an invalid channel.
.TP
.B 0x3fff0000
The bits masked with this value contain the code returned from a
.BR stop-and-signal
instruction.
These bits are valid only if the 0x02 bit is set.
.PP
If
.BR spu_run ()
has not returned an error, one or more bits among the lower eight
ones are always set.
.SH ERRORS
.TP
.B EBADF
.I fd
is not a valid file descriptor.
.TP
.B EFAULT
.I npc
is not a valid pointer, or
.I event
is non-NULL and an invalid pointer.
.TP
.B EINTR
A signal occurred while
.BR spu_run ()
was in progress; see
.BR signal (7).
The
.I npc
value has been updated to the new program counter value if
necessary.
.TP
.B EINVAL
.I fd
is not a valid file descriptor returned from
.BR spu_create (2).
.TP
.B ENOMEM
There was not enough memory available to handle a page fault
resulting from a Memory Flow Controller (MFC) direct memory access.
.TP
.B ENOSYS
The functionality is not provided by the current system, because
either the hardware does not provide SPUs or the spufs module is not
loaded.
.SH VERSIONS
The
.BR spu_run ()
system call was added to Linux in kernel 2.6.16.
.SH CONFORMING TO
This call is Linux-specific and implemented only by the PowerPC
architecture.
Programs using this system call are not portable.
.SH NOTES
Glibc does not provide a wrapper for this system call; call it using
.BR syscall (2).
Note however, that
.BR spu_run ()
is meant to be used from libraries that implement a more abstract
interface to SPUs, not to be used from regular applications.
See
.UR http://www.bsc.es\:/projects\:/deepcomputing\:/linuxoncell/
.UE
for the recommended libraries.
.SH EXAMPLE
The following is an example of running a simple, one-instruction SPU
program with the
.BR spu_run ()
system call.

.nf
#include <stdlib.h>
#include <stdint.h>
#include <unistd.h>
#include <stdio.h>
#include <sys/types.h>
#include <fcntl.h>

#define handle_error(msg) \\
    do { perror(msg); exit(EXIT_FAILURE); } while (0)

int main(void)
{
    int context, fd, spu_status;
    uint32_t instruction, npc;

    context = spu_create("/spu/example\-context", 0, 0755);
    if (context == \-1)
        handle_error("spu_create");

    /* write a \(aqstop 0x1234\(aq instruction to the SPU\(aqs
     * local store memory
     */
    instruction = 0x00001234;

    fd = open("/spu/example\-context/mem", O_RDWR);
    if (fd == \-1)
        handle_error("open");
    write(fd, &instruction, sizeof(instruction));

    /* set npc to the starting instruction address of the
     * SPU program. Since we wrote the instruction at the
     * start of the mem file, the entry point will be 0x0
     */
    npc = 0;

    spu_status = spu_run(context, &npc, NULL);
    if (spu_status == \-1)
        handle_error("open");

    /* we should see a status code of 0x1234002:
     *   0x00000002 (spu was stopped due to stop\-and\-signal)
     * | 0x12340000 (the stop\-and\-signal code)
     */
    printf("SPU Status: 0x%08x\\n", spu_status);

    exit(EXIT_SUCCESS);
}
.fi
.\" .SH AUTHORS
.\" Arnd Bergmann <arndb@de.ibm.com>, Jeremy Kerr <jk@ozlabs.org>
.SH SEE ALSO
.BR close (2),
.BR spu_create (2),
.BR capabilities (7),
.BR spufs (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
'\" t
.\" Copyright (c) 1992 Drew Eckhardt (drew@cs.colorado.edu), March 28, 1992
.\" Parts Copyright (c) 1995 Nicolai Langfeldt (janl@ifi.uio.no), 1/1/95
.\" and Copyright (c) 2006, 2007, 2014 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified by Michael Haardt <michael@moria.de>
.\" Modified 1993-07-24 by Rik Faith <faith@cs.unc.edu>
.\" Modified 1995-05-18 by Todd Larason <jtl@molehill.org>
.\" Modified 1997-01-31 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified 1995-01-09 by Richard Kettlewell <richard@greenend.org.uk>
.\" Modified 1998-05-13 by Michael Haardt <michael@cantor.informatik.rwth-aachen.de>
.\" Modified 1999-07-06 by aeb & Albert Cahalan
.\" Modified 2000-01-07 by aeb
.\" Modified 2004-06-23 by Michael Kerrisk <mtk.manpages@gmail.com>
.\" 2007-06-08 mtk: Added example program
.\" 2007-07-05 mtk: Added details on underlying system call interfaces
.\"
.TH STAT 2 2015-04-19 "Linux" "Linux Programmer's Manual"
.SH NAME
stat, fstat, lstat, fstatat \- get file status
.SH SYNOPSIS
.nf
.B #include <sys/types.h>
.br
.B #include <sys/stat.h>
.br
.B #include <unistd.h>
.sp
.BI "int stat(const char *" pathname ", struct stat *" buf );
.br
.BI "int fstat(int " fd ", struct stat *" buf );
.br
.BI "int lstat(const char *" pathname ", struct stat *" buf );
.sp
.BR "#include <fcntl.h>           " "/* Definition of AT_* constants */"
.B #include <sys/stat.h>
.sp
.BI "int fstatat(int " dirfd ", const char *" pathname ", struct stat *" \
buf ,
.BI "            int " flags );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.ad l
.PD 0
.sp
.BR lstat ():
.RS 4
/* glibc 2.19 and earlier */ _BSD_SOURCE ||
.br
/* Since glibc 2.20 */_DEFAULT_SOURCE ||
.br
_XOPEN_SOURCE\ >=\ 500 ||
_XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED
.br
|| /* Since glibc 2.10: */ _POSIX_C_SOURCE\ >=\ 200112L
.RE
.sp
.BR fstatat ():
.PD 0
.ad l
.RS 4
.TP 4
Since glibc 2.10:
_XOPEN_SOURCE\ >=\ 700 || _POSIX_C_SOURCE\ >=\ 200809L
.TP
Before glibc 2.10:
_ATFILE_SOURCE
.RE
.PD
.ad
.SH DESCRIPTION
.PP
These functions return information about a file, in the buffer pointed to by
.IR stat .
No permissions are required on the file itself, but\(emin the case of
.BR stat (),
.BR fstatat (),
and
.BR lstat ()\(emexecute
(search) permission is required on all of the directories in
.I pathname
that lead to the file.
.PP
.BR stat ()
and
.BR fstatat ()
retrieve information about the file pointed to by
.IR pathname ;
the differences for
.BR fstatat ()
are described below.

.BR lstat ()
is identical to
.BR stat (),
except that if
.I pathname
is a symbolic link, then it returns information about the link itself,
not the file that it refers to.

.BR fstat ()
is identical to
.BR stat (),
except that the file about which information is to be retrieved
is specified by the file descriptor
.IR fd .
.PP
All of these system calls return a
.I stat
structure, which contains the following fields:
.PP
.in +4n
.nf
struct stat {
    dev_t     st_dev;         /* ID of device containing file */
    ino_t     st_ino;         /* inode number */
    mode_t    st_mode;        /* protection */
    nlink_t   st_nlink;       /* number of hard links */
    uid_t     st_uid;         /* user ID of owner */
    gid_t     st_gid;         /* group ID of owner */
    dev_t     st_rdev;        /* device ID (if special file) */
    off_t     st_size;        /* total size, in bytes */
    blksize_t st_blksize;     /* blocksize for filesystem I/O */
    blkcnt_t  st_blocks;      /* number of 512B blocks allocated */

    /* Since Linux 2.6, the kernel supports nanosecond
       precision for the following timestamp fields.
       For the details before Linux 2.6, see NOTES. */

    struct timespec st_atim;  /* time of last access */
    struct timespec st_mtim;  /* time of last modification */
    struct timespec st_ctim;  /* time of last status change */

#define st_atime st_atim.tv_sec      /* Backward compatibility */
#define st_mtime st_mtim.tv_sec
#define st_ctime st_ctim.tv_sec
};
.fi
.in

.I Note:
the order of fields in the
.I stat
structure varies somewhat
across architectures.
In addition,
the definition above does not show the padding bytes
that may be present between some fields on various architectures.
Consult the glibc and kernel source code
if you need to know the details.

.\" Background: inode attributes are modified with i_mutex held, but
.\" read by stat() without taking the mutex.
.I Note:
For performance and simplicity reasons, different fields in the
.I stat
structure may contain state information from different moments
during the execution of the system call.
For example, if
.IR st_mode
or
.IR st_uid
is changed by another process by calling
.BR chmod (2)
or
.BR chown (2),
.BR stat ()
might return the old
.I st_mode
together with the new
.IR st_uid ,
or the old
.I st_uid
together with the new
.IR st_mode .

The
.I st_dev
field describes the device on which this file resides.
(The
.BR major (3)
and
.BR minor (3)
macros may be useful to decompose the device ID in this field.)

The
.I st_rdev
field describes the device that this file (inode) represents.

The
.I st_size
field gives the size of the file (if it is a regular
file or a symbolic link) in bytes.
The size of a symbolic link is the length of the pathname
it contains, without a terminating null byte.

The
.I st_blocks
field indicates the number of blocks allocated to the file, 512-byte units.
(This may be smaller than
.IR st_size /512
when the file has holes.)

The
.I st_blksize
field gives the "preferred" blocksize for efficient filesystem I/O.
(Writing to a file in smaller chunks may cause
an inefficient read-modify-rewrite.)
.PP
Not all of the Linux filesystems implement all of the time fields.
Some filesystem types allow mounting in such a way that file
and/or directory accesses do not cause an update of the
.I st_atime
field.
(See
.IR noatime ,
.IR nodiratime ,
and
.I relatime
in
.BR mount (8),
and related information in
.BR mount (2).)
In addition,
.I st_atime
is not updated if a file is opened with the
.BR O_NOATIME ;
see
.BR open (2).

The field
.I st_atime
is changed by file accesses, for example, by
.BR execve (2),
.BR mknod (2),
.BR pipe (2),
.BR utime (2),
and
.BR read (2)
(of more than zero bytes).
Other routines, like
.BR mmap (2),
may or may not update
.IR st_atime .

The field
.I st_mtime
is changed by file modifications, for example, by
.BR mknod (2),
.BR truncate (2),
.BR utime (2),
and
.BR write (2)
(of more than zero bytes).
Moreover,
.I st_mtime
of a directory is changed by the creation or deletion of files
in that directory.
The
.I st_mtime
field is
.I not
changed for changes in owner, group, hard link count, or mode.

The field
.I st_ctime
is changed by writing or by setting inode information
(i.e., owner, group, link count, mode, etc.).
.PP
POSIX refers to the
.I st_mode
bits corresponding to the mask
.B S_IFMT
(see below) as the
.IR "file type" ,
the 12 bits corresponding to the mask 07777 as the
.IR "file mode bits"
and the least significant 9 bits (0777) as the
.IR "file permission bits" .
.PP
The following mask values are defined for the file type of the
.I st_mode
field:
.in +4n
.TS
lB l l.
S_IFMT	0170000	bit mask for the file type bit field

S_IFSOCK	0140000	socket
S_IFLNK	0120000	symbolic link
S_IFREG	0100000	regular file
S_IFBLK	0060000	block device
S_IFDIR	0040000	directory
S_IFCHR	0020000	character device
S_IFIFO	0010000	FIFO
.TE
.in
.PP
Thus, to test for a regular file (for example), one could write:

.nf
.in +4n
stat(pathname, &sb);
if ((sb.st_mode & S_IFMT) == S_IFREG) {
    /* Handle regular file */
}
.in
.fi
.PP
Because tests of the above form are common, additional
macros are defined by POSIX to allow the test of the file type in
.I st_mode
to be written more concisely:
.RS 4
.TP 1.2i
.BR S_ISREG (m)
is it a regular file?
.TP
.BR S_ISDIR (m)
directory?
.TP
.BR S_ISCHR (m)
character device?
.TP
.BR S_ISBLK (m)
block device?
.TP
.BR S_ISFIFO (m)
FIFO (named pipe)?
.TP
.BR S_ISLNK (m)
symbolic link?  (Not in POSIX.1-1996.)
.TP
.BR S_ISSOCK (m)
socket?  (Not in POSIX.1-1996.)
.RE
.PP
The preceding code snippet could thus be rewritten as:

.nf
.in +4n
stat(pathname, &sb);
if (S_ISREG(sb.st_mode)) {
    /* Handle regular file */
}
.in
.fi
.PP
The definitions of most of the above file type test macros
are provided if any of the following feature test macros is defined:
.BR _BSD_SOURCE
(in glibc 2.19 and earlier),
.BR _SVID_SOURCE
(in glibc 2.19 and earlier),
or
.BR _DEFAULT_SOURCE
(in glibc 2.20 and later).
In addition, definitions of all of the above macros except
.BR S_IFSOCK
and
.BR S_ISSOCK ()
are provided if
.BR _XOPEN_SOURCE
is defined.
The definition of
.BR S_IFSOCK
can also be exposed by defining
.BR _XOPEN_SOURCE
with a value of 500 or greater.

The definition of
.BR S_ISSOCK ()
is exposed if any of the following feature test macros is defined:
.BR _BSD_SOURCE
(in glibc 2.19 and earlier),
.BR _DEFAULT_SOURCE
(in glibc 2.20 and later),
.BR _XOPEN_SOURCE
with a value of 500 or greater, or
.BR _POSIX_C_SOURCE
with a value of 200112L or greater.
.PP
The following mask values are defined for
the file mode component of the
.I st_mode
field:
.in +4n
.TS
lB l l.
S_ISUID	  04000	set-user-ID bit
S_ISGID	  02000	set-group-ID bit (see below)
S_ISVTX	  01000	sticky bit (see below)

S_IRWXU	  00700	owner has read, write, and execute permission
S_IRUSR	  00400	owner has read permission
S_IWUSR	  00200	owner has write permission
S_IXUSR	  00100	owner has execute permission

S_IRWXG	  00070	group has read, write, and execute permission
S_IRGRP	  00040	group has read permission
S_IWGRP	  00020	group has write permission
S_IXGRP	  00010	group has execute permission

S_IRWXO	  00007	T{
others (not in group) have read, write, and execute permission
T}
S_IROTH	  00004	others have read permission
S_IWOTH	  00002	others have write permission
S_IXOTH	  00001	others have execute permission
.TE
.in
.P
The set-group-ID bit
.RB ( S_ISGID )
has several special uses.
For a directory, it indicates that BSD semantics is to be used
for that directory: files created there inherit their group ID from
the directory, not from the effective group ID of the creating process,
and directories created there will also get the
.B S_ISGID
bit set.
For a file that does not have the group execution bit
.RB ( S_IXGRP )
set,
the set-group-ID bit indicates mandatory file/record locking.
.P
The sticky bit
.RB ( S_ISVTX )
on a directory means that a file
in that directory can be renamed or deleted only by the owner
of the file, by the owner of the directory, and by a privileged
process.
.\"
.\"
.SS fstatat()
The
.BR fstatat ()
system call operates in exactly the same way as
.BR stat (),
except for the differences described here.

If the pathname given in
.I pathname
is relative, then it is interpreted relative to the directory
referred to by the file descriptor
.I dirfd
(rather than relative to the current working directory of
the calling process, as is done by
.BR stat ()
for a relative pathname).

If
.I pathname
is relative and
.I dirfd
is the special value
.BR AT_FDCWD ,
then
.I pathname
is interpreted relative to the current working
directory of the calling process (like
.BR stat ()).

If
.I pathname
is absolute, then
.I dirfd
is ignored.

.I flags
can either be 0, or include one or more of the following flags ORed:
.TP
.BR AT_EMPTY_PATH " (since Linux 2.6.39)"
.\" commit 65cfc6722361570bfe255698d9cd4dccaf47570d
If
.I pathname
is an empty string, operate on the file referred to by
.IR dirfd
(which may have been obtained using the
.BR open (2)
.B O_PATH
flag).
If
.I dirfd
is
.BR AT_FDCWD ,
the call operates on the current working directory.
In this case,
.I dirfd
can refer to any type of file, not just a directory.
This flag is Linux-specific; define
.B _GNU_SOURCE
.\" Before glibc 2.16, defining _ATFILE_SOURCE sufficed
to obtain its definition.
.TP
.BR AT_NO_AUTOMOUNT " (since Linux 2.6.38)"
Don't automount the terminal ("basename") component of
.I pathname
if it is a directory that is an automount point.
This allows the caller to gather attributes of an automount point
(rather than the location it would mount).
This flag can be used in tools that scan directories
to prevent mass-automounting of a directory of automount points.
The
.B AT_NO_AUTOMOUNT
flag has no effect if the mount point has already been mounted over.
This flag is Linux-specific; define
.B _GNU_SOURCE
.\" Before glibc 2.16, defining _ATFILE_SOURCE sufficed
to obtain its definition.
.TP
.B AT_SYMLINK_NOFOLLOW
If
.I pathname
is a symbolic link, do not dereference it:
instead return information about the link itself, like
.BR lstat ().
(By default,
.BR fstatat ()
dereferences symbolic links, like
.BR stat ().)
.PP
See
.BR openat (2)
for an explanation of the need for
.BR fstatat ().
.SH RETURN VALUE
On success, zero is returned.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EACCES
Search permission is denied for one of the directories
in the path prefix of
.IR pathname .
(See also
.BR path_resolution (7).)
.TP
.B EBADF
.I fd
is bad.
.TP
.B EFAULT
Bad address.
.TP
.B ELOOP
Too many symbolic links encountered while traversing the path.
.TP
.B ENAMETOOLONG
.I pathname
is too long.
.TP
.B ENOENT
A component of
.I pathname
does not exist, or
.I pathname
is an empty string.
.TP
.B ENOMEM
Out of memory (i.e., kernel memory).
.TP
.B ENOTDIR
A component of the path prefix of
.I pathname
is not a directory.
.TP
.B EOVERFLOW
.I pathname
or
.I fd
refers to a file whose size, inode number,
or number of blocks cannot be represented in, respectively, the types
.IR off_t ,
.IR ino_t ,
or
.IR blkcnt_t .
This error can occur when, for example,
an application compiled on a 32-bit platform without
.I -D_FILE_OFFSET_BITS=64
calls
.BR stat ()
on a file whose size exceeds
.I (1<<31)-1
bytes.
.PP
The following additional errors can occur for
.BR fstatat ():
.TP
.B EBADF
.I dirfd
is not a valid file descriptor.
.TP
.B EINVAL
Invalid flag specified in
.IR flags .
.TP
.B ENOTDIR
.I pathname
is relative and
.I dirfd
is a file descriptor referring to a file other than a directory.
.SH VERSIONS
.BR fstatat ()
was added to Linux in kernel 2.6.16;
library support was added to glibc in version 2.4.
.SH CONFORMING TO
.BR stat (),
.BR fstat (),
.BR lstat ():
SVr4, 4.3BSD, POSIX.1-2001, POSIX.1.2008.
.\" SVr4 documents additional
.\" .BR fstat ()
.\" error conditions EINTR, ENOLINK, and EOVERFLOW.  SVr4
.\" documents additional
.\" .BR stat ()
.\" and
.\" .BR lstat ()
.\" error conditions EINTR, EMULTIHOP, ENOLINK, and EOVERFLOW.

.BR fstatat ():
POSIX.1-2008.

According to POSIX.1-2001,
.BR lstat ()
on a symbolic link need return valid information only in the
.I st_size
field and the file type of the
.IR st_mode
field of the
.IR stat
structure.
POSIX.1-2008 tightens the specification, requiring
.BR lstat ()
to return valid information in all fields except the mode bits in
.IR st_mode .

Use of the
.I st_blocks
and
.I st_blksize
fields may be less portable.
(They were introduced in BSD.
The interpretation differs between systems,
and possibly on a single system when NFS mounts are involved.)
If you need to obtain the definition of the
.IR blkcnt_t
or
.IR blksize_t
types from
.IR <sys/stat.h> ,
then define
.BR _XOPEN_SOURCE
with the value 500 or greater (before including
.I any
header files).
.LP
POSIX.1-1990 did not describe the
.BR S_IFMT ,
.BR S_IFSOCK ,
.BR S_IFLNK ,
.BR S_IFREG ,
.BR S_IFBLK ,
.BR S_IFDIR ,
.BR S_IFCHR ,
.BR S_IFIFO ,
.B S_ISVTX
constants, but instead demanded the use of
the macros
.BR S_ISDIR (),
and so on.
The
.BR S_IF*
constants are present in POSIX.1-2001 and later.

The
.BR S_ISLNK ()
and
.BR S_ISSOCK ()
macros are not in
POSIX.1-1996, but both are present in POSIX.1-2001;
the former is from SVID 4, the latter from SUSv2.
.LP
UNIX\ V7 (and later systems) had
.BR S_IREAD ,
.BR S_IWRITE ,
.BR S_IEXEC ,
where POSIX
prescribes the synonyms
.BR S_IRUSR ,
.BR S_IWUSR ,
.BR S_IXUSR .
.SS Other systems
Values that have been (or are) in use on various systems:
.ad l
.TS
l l l l l.
hex	name	ls	octal	description
f000	S_IFMT		170000	mask for file type
0000			000000	T{
SCO out-of-service inode; BSD unknown type; SVID-v2 and XPG2
have both 0 and 0100000 for ordinary file
T}
1000	S_IFIFO	p|	010000	FIFO (named pipe)
2000	S_IFCHR	c	020000	character special (V7)
3000	S_IFMPC		030000	multiplexed character special (V7)
4000	S_IFDIR	d/	040000	directory (V7)
5000	S_IFNAM		050000	T{
XENIX named special file with two subtypes, distinguished by
\fIst_rdev\fP values 1, 2
T}
0001	S_INSEM	s	000001	XENIX semaphore subtype of IFNAM
0002	S_INSHD	m	000002	XENIX shared data subtype of IFNAM
6000	S_IFBLK	b	060000	block special (V7)
7000	S_IFMPB		070000	multiplexed block special (V7)
8000	S_IFREG	-	100000	regular (V7)
9000	S_IFCMP		110000	VxFS compressed
9000	S_IFNWK	n	110000	network special (HP-UX)
a000	S_IFLNK	l@	120000	symbolic link (BSD)
b000	S_IFSHAD		130000	T{
Solaris shadow inode for ACL (not seen by user space)
T}
c000	S_IFSOCK	s=	140000	socket (BSD; also "S_IFSOC" on VxFS)
d000	S_IFDOOR	D>	150000	Solaris door
e000	S_IFWHT	w%	160000	BSD whiteout (not used for inode)
0200	S_ISVTX		001000	T{
sticky bit: save swapped text even after use (V7)
.br
reserved (SVID-v2)
.br
On nondirectories: don't cache this file (SunOS)
.br
On directories: restricted deletion flag (SVID-v4.2)
T}
0400	S_ISGID		002000	T{
set-group-ID on execution (V7)
.br
for directories: use BSD semantics for propagation of GID
T}
0400	S_ENFMT		002000	T{
System V file locking enforcement (shared with S_ISGID)
T}
0800	S_ISUID		004000	set-user-ID on execution (V7)
0800	S_CDF		004000	T{
directory is a context dependent file (HP-UX)
T}
.TE
.ad

A sticky command appeared in Version 32V AT&T UNIX.
.SH NOTES
On Linux,
.BR lstat ()
will generally not trigger automounter action, whereas
.BR stat ()
will (but see
.BR fstatat (2)).

For most files under the
.I /proc
directory,
.BR stat ()
does not return the file size in the
.I st_size
field; instead the field is returned with the value 0.
.SS Timestamp fields
Older kernels and older standards did not support nanosecond timestamp
fields.
Instead, there were three timestamp
.RI fields\(em st_atime ,
.IR st_mtime ,
and
.IR st_ctime \(emtyped
as
.IR time_t
that recorded timestamps with one-second precision.

Since kernel 2.5.48, the
.I stat
structure supports nanosecond resolution for the three file timestamp fields.
The nanosecond components of each timestamp are available
via names of the form
.IR st_atim.tv_nsec
if the
.B _BSD_SOURCE
or
.B _SVID_SOURCE
feature test macro is defined.
Nanosecond timestamps are nowadays standardized,
starting with POSIX.1-2008, and, starting with version 2.12,
glibc also exposes the nanosecond component names if
.BR _POSIX_C_SOURCE
is defined with the value 200809L or greater, or
.BR _XOPEN_SOURCE
is defined with the value 700 or greater.
If none of the aforementioned macros are defined,
then the nanosecond values are exposed with names of the form
.IR st_atimensec .

Nanosecond timestamps are supported on XFS, JFS, Btrfs, and
ext4 (since Linux 2.6.23).
.\" commit ef7f38359ea8b3e9c7f2cae9a4d4935f55ca9e80
Nanosecond timestamps are not supported in ext2, ext3, and Reiserfs.
On filesystems that do not support subsecond timestamps,
the nanosecond fields are returned with the value 0.
.SS C library/kernel ABI differences
Over time, increases in the size of the
.I stat
structure have led to three successive versions of
.BR stat ():
.IR sys_stat ()
(slot
.IR __NR_oldstat ),
.IR sys_newstat ()
(slot
.IR __NR_stat ),
and
.I sys_stat64()
(slot
.IR __NR_stat64 )
on 32-bit platforms such as i386.
The first two versions were already present in Linux 1.0
(albeit with different names);
.\" See include/asm-i386/stat.h in the Linux 2.4 source code for the
.\" various versions of the structure definitions
the last was added in Linux 2.4.
Similar remarks apply for
.BR fstat ()
and
.BR lstat ().

The kernel-internal versions of the
.I stat
structure dealt with by the different versions are, respectively:
.RS
.TP
.IR __old_kernel_stat
The original structure, with rather narrow fields, and no padding.
.TP
.IR stat
Larger
.I st_ino
field and padding added to various parts of the structure to
allow for future expansion.
.TP
.IR stat64
Even larger
.I st_ino
field,
larger
.I st_uid
and
.I st_gid
fields to accommodate the Linux-2.4 expansion of UIDs and GIDs to 32 bits,
and various other enlarged fields and further padding in the structure.
(Various padding bytes were eventually consumed in Linux 2.6,
with the advent of 32-bit device IDs and nanosecond components
for the timestamp fields.)
.RE
.PP
The glibc
.BR stat ()
wrapper function hides these details from applications,
invoking the most recent version of the system call provided by the kernel,
and repacking the returned information if required for old binaries.
.\"
.\" A note from Andries Brouwer, July 2007
.\"
.\" > Is the story not rather more complicated for some calls like
.\" > stat(2)?
.\"
.\" Yes and no, mostly no. See /usr/include/sys/stat.h .
.\"
.\" The idea is here not so much that syscalls change, but that
.\" the definitions of struct stat and of the types dev_t and mode_t change.
.\" This means that libc (even if it does not call the kernel
.\" but only calls some internal function) must know what the
.\" format of dev_t or of struct stat is.
.\" The communication between the application and libc goes via
.\" the include file <sys/stat.h> that defines a _STAT_VER and
.\" _MKNOD_VER describing the layout of the data that user space
.\" uses. Each (almost each) occurrence of stat() is replaced by
.\" an occurrence of xstat() where the first parameter of xstat()
.\" is this version number _STAT_VER.
.\"
.\" Now, also the definitions used by the kernel change.
.\" But glibc copes with this in the standard way, and the
.\" struct stat as returned by the kernel is repacked into
.\" the struct stat as expected by the application.
.\" Thus, _STAT_VER and this setup cater for the application-libc
.\" interface, rather than the libc-kernel interface.
.\"
.\" (Note that the details depend on gcc being used as c compiler.)

On modern 64-bit systems, life is simpler: there is a single
.BR stat ()
system call and the kernel deals with a
.I stat
structure that contains fields of a sufficient size.

The underlying system call employed by the glibc
.BR fstatat ()
wrapper function is actually called
.BR fstatat64 ()
or, on some architectures,
.\" strace(1) shows the name "newfstatat" on x86-64
.BR newfstatat ().
.SH EXAMPLE
The following program calls
.BR stat ()
and displays selected fields in the returned
.I stat
structure.
.nf

#include <sys/types.h>
#include <sys/stat.h>
#include <time.h>
#include <stdio.h>
#include <stdlib.h>

int
main(int argc, char *argv[])
{
    struct stat sb;

    if (argc != 2) {
        fprintf(stderr, "Usage: %s <pathname>\\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    if (stat(argv[1], &sb) == \-1) {
        perror("stat");
        exit(EXIT_FAILURE);
    }

    printf("File type:                ");

    switch (sb.st_mode & S_IFMT) {
    case S_IFBLK:  printf("block device\\n");            break;
    case S_IFCHR:  printf("character device\\n");        break;
    case S_IFDIR:  printf("directory\\n");               break;
    case S_IFIFO:  printf("FIFO/pipe\\n");               break;
    case S_IFLNK:  printf("symlink\\n");                 break;
    case S_IFREG:  printf("regular file\\n");            break;
    case S_IFSOCK: printf("socket\\n");                  break;
    default:       printf("unknown?\\n");                break;
    }

    printf("I\-node number:            %ld\\n", (long) sb.st_ino);

    printf("Mode:                     %lo (octal)\\n",
            (unsigned long) sb.st_mode);

    printf("Link count:               %ld\\n", (long) sb.st_nlink);
    printf("Ownership:                UID=%ld   GID=%ld\\n",
            (long) sb.st_uid, (long) sb.st_gid);

    printf("Preferred I/O block size: %ld bytes\\n",
            (long) sb.st_blksize);
    printf("File size:                %lld bytes\\n",
            (long long) sb.st_size);
    printf("Blocks allocated:         %lld\\n",
            (long long) sb.st_blocks);

    printf("Last status change:       %s", ctime(&sb.st_ctime));
    printf("Last file access:         %s", ctime(&sb.st_atime));
    printf("Last file modification:   %s", ctime(&sb.st_mtime));

    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR ls (1),
.BR stat (1),
.BR access (2),
.BR chmod (2),
.BR chown (2),
.BR readlink (2),
.BR utime (2),
.BR capabilities (7),
.BR symlink (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2003 Andries Brouwer (aeb@cwi.nl)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified 2003-08-17 by Walter Harms
.\" Modified 2004-06-23 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.TH STATFS 2 2015-02-21 "Linux" "Linux Programmer's Manual"
.SH NAME
statfs, fstatfs \- get filesystem statistics
.SH SYNOPSIS
.BR "#include <sys/vfs.h>    " "/* or <sys/statfs.h> */"
.sp
.BI "int statfs(const char *" path ", struct statfs *" buf );
.br
.BI "int fstatfs(int " fd ", struct statfs *" buf );
.SH DESCRIPTION
The
.BR statfs ()
system call returns information about a mounted filesystem.
.I path
is the pathname of any file within the mounted filesystem.
.I buf
is a pointer to a
.I statfs
structure defined approximately as follows:

.in +4n
.nf
struct statfs {
    __fsword_t f_type;    /* Type of filesystem (see below) */
    __fsword_t f_bsize;   /* Optimal transfer block size */
    fsblkcnt_t f_blocks;  /* Total data blocks in filesystem */
    fsblkcnt_t f_bfree;   /* Free blocks in filesystem */
    fsblkcnt_t f_bavail;  /* Free blocks available to
                             unprivileged user */
    fsfilcnt_t f_files;   /* Total file nodes in filesystem */
    fsfilcnt_t f_ffree;   /* Free file nodes in filesystem */
    fsid_t     f_fsid;    /* Filesystem ID */
    __fsword_t f_namelen; /* Maximum length of filenames */
    __fsword_t f_frsize;  /* Fragment size (since Linux 2.6) */
    __fsword_t f_flags;   /* Mount flags of filesystem
                             (since Linux 2.6.36) */
    __fsword_t f_spare[xxx];
                    /* Padding bytes reserved for future use */
};

Filesystem types:

   ADFS_SUPER_MAGIC      0xadf5
   AFFS_SUPER_MAGIC      0xADFF
   BDEVFS_MAGIC          0x62646576
   BEFS_SUPER_MAGIC      0x42465331
   BFS_MAGIC             0x1BADFACE
   BINFMTFS_MAGIC        0x42494e4d
   BTRFS_SUPER_MAGIC     0x9123683E
   CGROUP_SUPER_MAGIC    0x27e0eb
   CIFS_MAGIC_NUMBER     0xFF534D42
   CODA_SUPER_MAGIC      0x73757245
   COH_SUPER_MAGIC       0x012FF7B7
   CRAMFS_MAGIC          0x28cd3d45
   DEBUGFS_MAGIC         0x64626720
   DEVFS_SUPER_MAGIC     0x1373
   DEVPTS_SUPER_MAGIC    0x1cd1
   EFIVARFS_MAGIC        0xde5e81e4
   EFS_SUPER_MAGIC       0x00414A53
   EXT_SUPER_MAGIC       0x137D
   EXT2_OLD_SUPER_MAGIC  0xEF51
   EXT2_SUPER_MAGIC      0xEF53
   EXT3_SUPER_MAGIC      0xEF53
   EXT4_SUPER_MAGIC      0xEF53
   FUSE_SUPER_MAGIC      0x65735546
   FUTEXFS_SUPER_MAGIC   0xBAD1DEA
   HFS_SUPER_MAGIC       0x4244
   HOSTFS_SUPER_MAGIC    0x00c0ffee
   HPFS_SUPER_MAGIC      0xF995E849
   HUGETLBFS_MAGIC       0x958458f6
   ISOFS_SUPER_MAGIC     0x9660
   JFFS2_SUPER_MAGIC     0x72b6
   JFS_SUPER_MAGIC       0x3153464a
   MINIX_SUPER_MAGIC     0x137F /* orig. minix */
   MINIX_SUPER_MAGIC2    0x138F /* 30 char minix */
   MINIX2_SUPER_MAGIC    0x2468 /* minix V2 */
   MINIX2_SUPER_MAGIC2   0x2478 /* minix V2, 30 char names */
   MINIX3_SUPER_MAGIC    0x4d5a /* minix V3 fs, 60 char names */
   MQUEUE_MAGIC          0x19800202
   MSDOS_SUPER_MAGIC     0x4d44
   NCP_SUPER_MAGIC       0x564c
   NFS_SUPER_MAGIC       0x6969
   NILFS_SUPER_MAGIC     0x3434
   NTFS_SB_MAGIC         0x5346544e
   OCFS2_SUPER_MAGIC     0x7461636f
   OPENPROM_SUPER_MAGIC  0x9fa1
   PIPEFS_MAGIC          0x50495045
   PROC_SUPER_MAGIC      0x9fa0
   PSTOREFS_MAGIC        0x6165676C
   QNX4_SUPER_MAGIC      0x002f
   QNX6_SUPER_MAGIC      0x68191122
   RAMFS_MAGIC           0x858458f6
   REISERFS_SUPER_MAGIC  0x52654973
   ROMFS_MAGIC           0x7275
   SELINUX_MAGIC         0xf97cff8c
   SMACK_MAGIC           0x43415d53
   SMB_SUPER_MAGIC       0x517B
   SOCKFS_MAGIC          0x534F434B
   SQUASHFS_MAGIC        0x73717368
   SYSFS_MAGIC           0x62656572
   SYSV2_SUPER_MAGIC     0x012FF7B6
   SYSV4_SUPER_MAGIC     0x012FF7B5
   TMPFS_MAGIC           0x01021994
   UDF_SUPER_MAGIC       0x15013346
   UFS_MAGIC             0x00011954
   USBDEVICE_SUPER_MAGIC 0x9fa2
   V9FS_MAGIC            0x01021997
   VXFS_SUPER_MAGIC      0xa501FCF5
   XENFS_SUPER_MAGIC     0xabba1974
   XENIX_SUPER_MAGIC     0x012FF7B4
   XFS_SUPER_MAGIC       0x58465342
   _XIAFS_SUPER_MAGIC    0x012FD16D
.fi
.in
.PP
Most of these MAGIC constants are defined in
.IR /usr/include/linux/magic.h ,
and some are hardcoded in kernel sources.

The
.IR f_flags
is a bit mask indicating mount options for the file system.
It contains zero or more of the following bits:
.\" XXX Keep this list in sync with statvfs(3)
.TP
.B ST_MANDLOCK
Mandatory locking is permitted on the filesystem (see
.BR fcntl (2)).
.TP
.B ST_NOATIME
Do not update access times; see
.BR mount (2).
.TP
.B ST_NODEV
Disallow access to device special files on this filesystem.
.TP
.B ST_NODIRATIME
Do not update directory access times; see
.BR mount (2).
.TP
.B ST_NOEXEC
Execution of programs is disallowed on this filesystem.
.TP
.B ST_NOSUID
The set-user-ID and set-group-ID bits are ignored by
.BR exec (3)
for executable files on this filesystem
.TP
.B ST_RDONLY
This filesystem is mounted read-only.
.TP
.B ST_RELATIME
Update atime relative to mtime/ctime; see
.BR mount (2).
.TP
.B ST_SYNCHRONOUS
Writes are synched to the filesystem immediately (see the description of
.B O_SYNC
in
.BR open (2)).
.PP
Nobody knows what
.I f_fsid
is supposed to contain (but see below).
.PP
Fields that are undefined for a particular filesystem are set to 0.

.BR fstatfs ()
returns the same information about an open file referenced by descriptor
.IR fd .
.SH RETURN VALUE
On success, zero is returned.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EACCES
.RB ( statfs ())
Search permission is denied for a component of the path prefix of
.IR path .
(See also
.BR path_resolution (7).)
.TP
.B EBADF
.RB ( fstatfs ())
.I fd
is not a valid open file descriptor.
.TP
.B EFAULT
.I buf
or
.I path
points to an invalid address.
.TP
.B EINTR
This call was interrupted by a signal.
.TP
.B EIO
An I/O error occurred while reading from the filesystem.
.TP
.B ELOOP
.RB ( statfs ())
Too many symbolic links were encountered in translating
.IR path .
.TP
.B ENAMETOOLONG
.RB ( statfs ())
.I path
is too long.
.TP
.B ENOENT
.RB ( statfs ())
The file referred to by
.I path
does not exist.
.TP
.B ENOMEM
Insufficient kernel memory was available.
.TP
.B ENOSYS
The filesystem does not support this call.
.TP
.B ENOTDIR
.RB ( statfs ())
A component of the path prefix of
.I path
is not a directory.
.TP
.B EOVERFLOW
Some values were too large to be represented in the returned struct.
.SH CONFORMING TO
Linux-specific.
The Linux
.BR statfs ()
was inspired by the 4.4BSD one
(but they do not use the same structure).
.SH NOTES
The
.I __fsword_t
type used for various fields in the
.I statfs
structure definition is a glibc internal type,
not intended for public use.
This leaves the programmer in a bit of a conundrum when trying to copy
or compare these fields to local variables in a program.
Using
.I "unsigned\ int"
for such variables suffices on most systems.

The original Linux
.BR statfs ()
and
.BR fstatfs ()
system calls were not designed with extremely large file sizes in mind.
Subsequently, Linux 2.6
added new
.BR statfs64 ()
and
.BR fstatfs64 ()
system calls that employ a new structure,
.IR statfs64 .
The new structure contains the same fields as the original
.I statfs
structure, but the sizes of various fields are increased,
to accommodate large file sizes.
The glibc
.BR statfs ()
and
.BR fstatfs ()
wrapper functions transparently deal with the kernel differences.

Some systems have only \fI<sys/vfs.h>\fP, other systems also have
\fI<sys/statfs.h>\fP, where the former includes the latter.
So it seems
including the former is the best choice.

LSB has deprecated the library calls
.BR statfs ()
and
.BR fstatfs ()
and tells us to use
.BR statvfs (2)
and
.BR fstatvfs (2)
instead.
.SS The f_fsid field
Solaris, Irix and POSIX have a system call
.BR statvfs (2)
that returns a
.I "struct statvfs"
(defined in
.IR <sys/statvfs.h> )
containing an
.I "unsigned long"
.IR f_fsid .
Linux, SunOS, HP-UX, 4.4BSD have a system call
.BR statfs ()
that returns a
.I "struct statfs"
(defined in
.IR <sys/vfs.h> )
containing a
.I fsid_t
.IR f_fsid ,
where
.I fsid_t
is defined as
.IR "struct { int val[2]; }" .
The same holds for FreeBSD, except that it uses the include file
.IR <sys/mount.h> .

The general idea is that
.I f_fsid
contains some random stuff such that the pair
.RI ( f_fsid , ino )
uniquely determines a file.
Some operating systems use (a variation on) the device number,
or the device number combined with the filesystem type.
Several operating systems restrict giving out the
.I f_fsid
field to the superuser only (and zero it for unprivileged users),
because this field is used in the filehandle of the filesystem
when NFS-exported, and giving it out is a security concern.
.LP
Under some operating systems, the
.I fsid
can be used as the second argument to the
.BR sysfs (2)
system call.
.SH BUGS
From Linux 2.6.38 up to and including Linux 3.1,
.\" broken in commit ff0c7d15f9787b7e8c601533c015295cc68329f8
.\" fixed in commit d70ef97baf048412c395bb5d65791d8fe133a52b
.BR fstatfs ()
failed with the error
.B ENOSYS
for file descriptors created by
.BR pipe (2).
.SH SEE ALSO
.BR stat (2),
.BR statvfs (2),
.BR path_resolution (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1992 Drew Eckhardt (drew@cs.colorado.edu), March 28, 1992
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified by Michael Haardt <michael@moria.de>
.\" Modified 1993-07-24 by Rik Faith <faith@cs.unc.edu>
.\" Modified 2001-03-16 by Andries Brouwer <aeb@cwi.nl>
.\" Modified 2004-05-27 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.TH STIME 2 2014-05-10 "Linux" "Linux Programmer's Manual"
.SH NAME
stime \- set time
.SH SYNOPSIS
.B #include <time.h>
.sp
.BI "int stime(const time_t *" t );
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR stime ():
_SVID_SOURCE
.SH DESCRIPTION
.BR stime ()
sets the system's idea of the time and date.
The time, pointed
to by \fIt\fP, is measured in seconds since the
Epoch, 1970-01-01 00:00:00 +0000 (UTC).
.BR stime ()
may be executed only by the superuser.
.SH RETURN VALUE
On success, zero is returned.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EFAULT
Error in getting information from user space.
.TP
.B EPERM
The calling process has insufficient privilege.
Under Linux, the
.B CAP_SYS_TIME
privilege is required.
.SH CONFORMING TO
SVr4.
.SH SEE ALSO
.BR date (1),
.BR settimeofday (2),
.BR capabilities (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2010 Michael Kerrisk <mtk.manpages@gmail.com>
.\" based on a proposal from Stephan Mueller <smueller@atsec.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of
.\" this manual under the conditions for verbatim copying, provided that
.\" the entire resulting derived work is distributed under the terms of
.\" a permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume
.\" no responsibility for errors or omissions, or for damages resulting
.\" from the use of the information contained herein.  The author(s) may
.\" not have taken the same level of care in the production of this
.\" manual, which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Various pieces of text taken from the kernel source and the commentary
.\" in kernel commit fa28237cfcc5827553044cbd6ee52e33692b0faa
.\" both written by Paul Mackerras <paulus@samba.org>
.\"
.TH SUBPAGE_PROT 2 2012-07-13 "Linux" "Linux Programmer's Manual"
.SH NAME
subpage_prot \- define a subpage protection for an address range
.SH SYNOPSIS
.nf
.BI "long subpage_prot(unsigned long " addr ", unsigned long " len ,
.BI "                  uint32_t *" map ");
.fi

.IR Note :
There is no glibc wrapper for this system call; see NOTES.
.SH DESCRIPTION
The PowerPC-specific
.BR subpage_prot ()
system call provides the facility to control the access
permissions on individual 4kB subpages on systems configured with
a page size of 64kB.

The protection map is applied to the memory pages in the region starting at
.I addr
and continuing for
.I len
bytes.
Both of these arguments must be aligned to a 64-kB boundary.

The protection map is specified in the buffer pointed to by
.IR map .
The map has 2 bits per 4kB subpage;
thus each 32-bit word specifies the protections of 16 4kB subpages
inside a 64kB page
(so, the number of 32-bit words pointed to by
.I map
should equate to the number of 64-kB pages specified by
.IR len ).
Each 2-bit field in the protection map is either 0 to allow any access,
1 to prevent writes, or 2 or 3 to prevent all accesses.
.SH RETURN VALUE
On success,
.BR subpage_prot ()
returns 0.
Otherwise, one of the error codes specified below is returned.
.SH ERRORS
.TP
.B EFAULT
The buffer referred to by
.I map
is not accessible.
.TP
.B EINVAL
The
.I addr
or
.I len
arguments are incorrect.
Both of these arguments must be aligned to a multiple of the system page size,
and they must not refer to a region outside of the
address space of the process or to a region that consists of huge pages.
.TP
.B ENOMEM
Out of memory.
.SH VERSIONS
This system call is provided on the PowerPC architecture
since Linux 2.6.25.
The system call is provided only if the kernel is configured with
.BR CONFIG_PPC_64K_PAGES .
No library support is provided.
.SH CONFORMING TO
This system call is Linux-specific.
.SH NOTES
Glibc does not provide a wrapper for this system call; call it using
.BR syscall (2).

Normal page protections (at the 64-kB page level) also apply;
the subpage protection mechanism is an additional constraint,
so putting 0 in a 2-bit field won't allow writes to a page that is otherwise
write-protected.
.SS Rationale
This system call is provided to assist writing emulators that
operate using 64-kB pages on PowerPC systems.
When emulating systems such as x86, which uses a smaller page size,
the emulator can no longer use the memory-management unit (MMU)
and normal system calls for controlling page protections.
(The emulator could emulate the MMU by checking and possibly remapping
the address for each memory access in software, but that is slow.)
The idea is that the emulator supplies an array of protection masks
to apply to a specified range of virtual addresses.
These masks are applied at the level where hardware page-table entries (PTEs)
are inserted into the hardware page table based on the Linux PTEs,
so the Linux PTEs are not affected.
Implicit in this is that the regions of the address space that are
protected are switched to use 4-kB hardware pages rather than 64-kB
hardware pages (on machines with hardware 64-kB page support).
.\" In the initial implementation, it was the case that:
.\"     In fact the whole process is switched to use 4k hardware pages when the
.\"     subpage_prot system call is used, but this could be improved in future
.\"     to switch only the affected segments.
.\" But Paul Mackerass says (Oct 2010): I'm pretty sure we now only switch
.\" the affected segment, not the whole process.
.SH SEE ALSO
.BR mprotect (2),
.BR syscall (2)

.IR Documentation/vm/hugetlbpage.txt
in the Linux kernel source tree
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1992 Drew Eckhardt (drew@cs.colorado.edu), March 28, 1992
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified by Michael Haardt <michael@moria.de>
.\" Modified 1993-07-24 by Rik Faith <faith@cs.unc.edu>
.\" Modified 1995-07-22 by Michael Chastain <mec@duracef.shout.net>
.\" Modified 1995-07-23 by aeb
.\" Modified 1996-10-22 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified 1998-09-08 by aeb
.\" Modified 2004-06-17 by Michael Kerrisk <mtk.manpages@gmail.com>
.\" Modified 2004-10-10 by aeb
.\" 2004-12-14 mtk, Anand Kumria: added new errors
.\" 2007-06-22 Ivana Varekova <varekova@redhat.com>, mtk
.\"     Update text describing limit on number of swap files.
.\"
.\" FIXME Linux 3.11 added SWAP_FLAG_DISCARD_ONCE and SWAP_FLAG_DISCARD_PAGES
.\"	commit dcf6b7ddd7df8965727746f89c59229b23180e5a
.\"	Author: Rafael Aquini <aquini@redhat.com>
.\"	Date:   Wed Jul 3 15:02:46 2013 -0700
.\"
.TH SWAPON 2 2014-05-28 "Linux" "Linux Programmer's Manual"
.SH NAME
swapon, swapoff \- start/stop swapping to file/device
.SH SYNOPSIS
.B #include <unistd.h>
.br
.B #include <sys/swap.h>
.sp
.BI "int swapon(const char *" path ", int " swapflags );
.br
.BI "int swapoff(const char *" path );
.SH DESCRIPTION
.BR swapon ()
sets the swap area to the file or block device specified by
.IR path .
.BR swapoff ()
stops swapping to the file or block device specified by
.IR path .
.PP
If the
.B SWAP_FLAG_PREFER
flag is specified in the
.BR swapon ()
.I swapflags
argument, the new swap area will have a higher priority than default.
The priority is encoded within
.I swapflags
as:
.br
.sp
.I "    (prio << SWAP_FLAG_PRIO_SHIFT) & SWAP_FLAG_PRIO_MASK"
.br
.PP
If the
.B SWAP_FLAG_DISCARD
flag is specified in the
.BR swapon ()
.I swapflags
argument, freed swap pages will be discarded before they are reused,
if the swap device supports the discard or trim operation.
(This may improve performance on some Solid State Devices,
but often it does not.)
See also NOTES.
.PP
These functions may be used only by a privileged process (one having the
.B CAP_SYS_ADMIN
capability).
.SS Priority
Each swap area has a priority, either high or low.
The default priority is low.
Within the low-priority areas,
newer areas are even lower priority than older areas.
.PP
All priorities set with
.I swapflags
are high-priority, higher than default.
They may have any nonnegative value chosen by the caller.
Higher numbers mean higher priority.
.PP
Swap pages are allocated from areas in priority order,
highest priority first.
For areas with different priorities,
a higher-priority area is exhausted before using a lower-priority area.
If two or more areas have the same priority,
and it is the highest priority available,
pages are allocated on a round-robin basis between them.
.PP
As of Linux 1.3.6, the kernel usually follows these rules,
but there are exceptions.
.SH RETURN VALUE
On success, zero is returned.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EBUSY
(for
.BR swapon ())
The specified
.I path
is already being used as a swap area.
.TP
.B EINVAL
The file
.I path
exists, but refers neither to a regular file nor to a block device;
.TP
.B EINVAL
.RB ( swapon ())
The indicated path does not contain a valid swap signature or
resides on an in-memory filesystem such as tmpfs.
.TP
.BR EINVAL " (since Linux 3.4)"
.RB ( swapon ())
An invalid flag value was specified in
.IR flags .
.TP
.B EINVAL
.RB ( swapoff ())
.I path
is not currently a swap area.
.TP
.B ENFILE
The system limit on the total number of open files has been reached.
.TP
.B ENOENT
The file
.I path
does not exist.
.TP
.B ENOMEM
The system has insufficient memory to start swapping.
.TP
.B EPERM
The caller does not have the
.B CAP_SYS_ADMIN
capability.
Alternatively, the maximum number of swap files are already in use;
see NOTES below.
.SH CONFORMING TO
These functions are Linux-specific and should not be used in programs
intended to be portable.
The second
.I swapflags
argument was introduced in Linux 1.3.2.
.SH NOTES
The partition or path must be prepared with
.BR mkswap (8).

There is an upper limit on the number of swap files that may be used,
defined by the kernel constant
.BR MAX_SWAPFILES .
Before kernel 2.4.10,
.B MAX_SWAPFILES
has the value 8;
since kernel 2.4.10, it has the value 32.
Since kernel 2.6.18, the limit is decreased by 2 (thus: 30)
if the kernel is built with the
.B CONFIG_MIGRATION
option
(which reserves two swap table entries for the page migration features of
.BR mbind (2)
and
.BR migrate_pages (2)).
Since kernel 2.6.32, the limit is further decreased by 1
if the kernel is built with the
.B CONFIG_MEMORY_FAILURE
option.

Discard of swap pages was introduced in kernel 2.6.29,
then made conditional
on the
.B SWAP_FLAG_DISCARD
flag in kernel 2.6.36,
.\" To be precise: 2.6.35.5
which still discards the
entire swap area when
.BR swapon ()
is called, even if that flag bit is not set.
.SH SEE ALSO
.BR mkswap (8),
.BR swapoff (8),
.BR swapon (8)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" This manpage is Copyright (C) 1992 Drew Eckhardt;
.\"             and Copyright (C) 1993 Michael Haardt, Ian Jackson.
.\"		and Copyright (C) 2006, 2014 Michael Kerrisk
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified 1993-07-24 by Rik Faith
.\" Modified 1996-04-26 by Nick Duffek <nsd@bbc.com>
.\" Modified 1996-11-06 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified 1997-01-31 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified 2004-06-23 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.TH SYMLINK 2 2015-04-19 "Linux" "Linux Programmer's Manual"
.SH NAME
symlink, symlinkat \- make a new name for a file
.SH SYNOPSIS
.nf
.B #include <unistd.h>
.sp
.BI "int symlink(const char *" target ", const char *" linkpath );
.sp
.BR "#include <fcntl.h>           " "/* Definition of AT_* constants */"
.B #include <unistd.h>
.sp
.BI "int symlinkat(const char *" target ", int " newdirfd \
", const char *" linkpath );
.sp
.fi
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR symlink ():
.RS 4
_BSD_SOURCE || _XOPEN_SOURCE\ >=\ 500 ||
_XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED || _POSIX_C_SOURCE\ >=\ 200112L
.RE
.sp
.BR symlinkat ():
.PD 0
.ad l
.RS 4
.TP 4
Since glibc 2.10:
_XOPEN_SOURCE\ >=\ 700 || _POSIX_C_SOURCE\ >=\ 200809L
.TP
Before glibc 2.10:
_ATFILE_SOURCE
.RE
.ad b
.PD
.SH DESCRIPTION
.BR symlink ()
creates a symbolic link named
.I linkpath
which contains the string
.IR target .

Symbolic links are interpreted at run time as if the contents of the
link had been substituted into the path being followed to find a file or
directory.

Symbolic links may contain
.I ..
path components, which (if used at the start of the link) refer to the
parent directories of that in which the link resides.

A symbolic link (also known as a soft link) may point to an existing
file or to a nonexistent one; the latter case is known as a dangling
link.

The permissions of a symbolic link are irrelevant; the ownership is
ignored when following the link, but is checked when removal or
renaming of the link is requested and the link is in a directory with
the sticky bit
.RB ( S_ISVTX )
set.

If
.I linkpath
exists, it will
.I not
be overwritten.
.SS symlinkat()
The
.BR symlinkat ()
system call operates in exactly the same way as
.BR symlink (),
except for the differences described here.

If the pathname given in
.I linkpath
is relative, then it is interpreted relative to the directory
referred to by the file descriptor
.I newdirfd
(rather than relative to the current working directory of
the calling process, as is done by
.BR symlink ()
for a relative pathname).

If
.I linkpath
is relative and
.I newdirfd
is the special value
.BR AT_FDCWD ,
then
.I linkpath
is interpreted relative to the current working
directory of the calling process (like
.BR symlink ()).

If
.I linkpath
is absolute, then
.I newdirfd
is ignored.
.SH RETURN VALUE
On success, zero is returned.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EACCES
Write access to the directory containing
.I linkpath
is denied, or one of the directories in the path prefix of
.I linkpath
did not allow search permission.
(See also
.BR path_resolution (7).)
.TP
.B EDQUOT
The user's quota of resources on the filesystem has been exhausted.
The resources could be inodes or disk blocks, depending on the filesystem
implementation.
.TP
.B EEXIST
.I linkpath
already exists.
.TP
.B EFAULT
.IR target " or " linkpath " points outside your accessible address space."
.TP
.B EIO
An I/O error occurred.
.TP
.B ELOOP
Too many symbolic links were encountered in resolving
.IR linkpath .
.TP
.B ENAMETOOLONG
.IR target " or " linkpath " was too long."
.TP
.B ENOENT
A directory component in
.I linkpath
does not exist or is a dangling symbolic link, or
.I target
or
.I linkpath
is an empty string.
.TP
.B ENOMEM
Insufficient kernel memory was available.
.TP
.B ENOSPC
The device containing the file has no room for the new directory
entry.
.TP
.B ENOTDIR
A component used as a directory in
.I linkpath
is not, in fact, a directory.
.TP
.B EPERM
The filesystem containing
.I linkpath
does not support the creation of symbolic links.
.TP
.B EROFS
.I linkpath
is on a read-only filesystem.
.PP
The following additional errors can occur for
.BR symlinkat ():
.TP
.B EBADF
.I newdirfd
is not a valid file descriptor.
.TP
.B ENOENT
.I linkpath
is a relative pathname and
.IR newdirfd
refers to a directory that has been deleted.
.TP
.B ENOTDIR
.I linkpath
is relative and
.I newdirfd
is a file descriptor referring to a file other than a directory.
.SH VERSIONS
.BR symlinkat ()
was added to Linux in kernel 2.6.16;
library support was added to glibc in version 2.4.
.SH CONFORMING TO
.BR symlink ():
SVr4, 4.3BSD, POSIX.1-2001, POSIX.1-2008.
.\" SVr4 documents additional error codes EDQUOT and ENOSYS.
.\" See
.\" .BR open (2)
.\" re multiple files with the same name, and NFS.

.BR symlinkat ():
POSIX.1-2008.
.SH NOTES
No checking of
.I target
is done.

Deleting the name referred to by a symbolic link will actually delete the
file (unless it also has other hard links).
If this behavior is not desired, use
.BR link (2).
.SS Glibc notes
On older kernels where
.BR symlinkat ()
is unavailable, the glibc wrapper function falls back to the use of
.BR symlink (2).
When
.I linkpath
is a relative pathname,
glibc constructs a pathname based on the symbolic link in
.IR /proc/self/fd
that corresponds to the
.IR newdirfd
argument.
.SH SEE ALSO
.BR ln (1),
.BR lchown (2),
.BR link (2),
.BR lstat (2),
.BR open (2),
.BR readlink (2),
.BR rename (2),
.BR unlink (2),
.BR path_resolution (7),
.BR symlink (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1992 Drew Eckhardt (drew@cs.colorado.edu), March 28, 1992
.\" and Copyright (c) 2011 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified by Michael Haardt <michael@moria.de>
.\" Modified Sat Jul 24 12:02:47 1993 by Rik Faith <faith@cs.unc.edu>
.\" Modified 15 Apr 1995 by Michael Chastain <mec@shell.portal.com>:
.\"   Added reference to `bdflush(2)'.
.\" Modified 960414 by Andries Brouwer <aeb@cwi.nl>:
.\"   Added the fact that since 1.3.20 sync actually waits.
.\" Modified Tue Oct 22 22:27:07 1996 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified 2001-10-10 by aeb, following Michael Kerrisk.
.\" 2011-09-07, mtk, Added syncfs() documentation,
.\"
.TH SYNC 2 2014-08-19 "Linux" "Linux Programmer's Manual"
.SH NAME
sync, syncfs \- commit buffer cache to disk
.SH SYNOPSIS
.B #include <unistd.h>
.sp
.B void sync(void);
.sp
.BI "int syncfs(int " fd );
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR sync ():
.ad l
.RS 4
_BSD_SOURCE || _XOPEN_SOURCE\ >=\ 500 ||
_XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED
.RE
.ad
.sp
.BR syncfs ():
.ad l
.RS 4
_GNU_SOURCE
.RE
.ad
.SH DESCRIPTION
.BR sync ()
causes all buffered modifications to file metadata and data to be
written to the underlying filesystems.

.BR syncfs ()
is like
.BR sync (),
but synchronizes just the filesystem containing file
referred to by the open file descriptor
.IR fd .
.SH RETURN VALUE
.BR syncfs ()
returns 0 on success;
on error, it returns \-1 and sets
.I errno
to indicate the error.
.SH ERRORS
.BR sync ()
is always successful.

.BR syncfs ()
can fail for at least the following reason:
.TP
.B EBADF
.I fd
is not a valid file descriptor.
.SH VERSIONS
.BR syncfs ()
first appeared in Linux 2.6.39;
library support was added to glibc in version 2.14.
.SH CONFORMING TO
.BR sync ():
SVr4, 4.3BSD, POSIX.1-2001.

.BR syncfs ()
is Linux-specific.
.SH NOTES
Since glibc 2.2.2, the Linux prototype for
.BR sync ()
is as listed above,
following the various standards.
In glibc 2.2.1 and earlier,
it was "int sync(void)", and
.BR sync ()
always returned 0.
.SH BUGS
According to the standard specification (e.g., POSIX.1-2001),
.BR sync ()
schedules the writes, but may return before the actual
writing is done.
However, since version 1.3.20 Linux does actually wait.
(This still does not guarantee data integrity: modern disks have
large caches.)
.SH SEE ALSO
.BR bdflush (2),
.BR fdatasync (2),
.BR fsync (2),
.BR sync (1)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2006 Andrew Morton <akpm@osdl.org>
.\" and Copyright 2006 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" 2006-07-05 Initial creation, Michael Kerrisk based on
.\"     Andrew Morton's comments in fs/sync.c
.\" 2010-10-09, mtk, Document sync_file_range2()
.\"
.TH SYNC_FILE_RANGE 2 2014-08-19 "Linux" "Linux Programmer's Manual"
.SH NAME
sync_file_range \- sync a file segment with disk
.SH SYNOPSIS
.nf
.BR "#define _GNU_SOURCE" "         /* See feature_test_macros(7) */"
.B #include <fcntl.h>

.BI "int sync_file_range(int " fd ", off64_t " offset ", off64_t " nbytes ,
.BI "                    unsigned int " flags );
.fi
.SH DESCRIPTION
.BR sync_file_range ()
permits fine control when synchronizing the open file referred to by the
file descriptor
.I fd
with disk.

.I offset
is the starting byte of the file range to be synchronized.
.I nbytes
specifies the length of the range to be synchronized, in bytes; if
.I nbytes
is zero, then all bytes from
.I offset
through to the end of file are synchronized.
Synchronization is in units of the system page size:
.I offset
is rounded down to a page boundary;
.I (offset+nbytes-1)
is rounded up to a page boundary.

The
.I flags
bit-mask argument can include any of the following values:
.TP
.B SYNC_FILE_RANGE_WAIT_BEFORE
Wait upon write-out of all pages in the specified range
that have already been submitted to the device driver for write-out
before performing any write.
.TP
.B SYNC_FILE_RANGE_WRITE
Initiate write-out of all dirty pages in the specified
range which are not presently submitted write-out.
Note that even this may block if you attempt to
write more than request queue size.
.TP
.B SYNC_FILE_RANGE_WAIT_AFTER
Wait upon write-out of all pages in the range
after performing any write.
.PP
Specifying
.I flags
as 0 is permitted, as a no-op.
.SS Warning
This system call is extremely dangerous and should not be used in portable
programs.
None of these operations writes out the file's metadata.
Therefore, unless the application is strictly performing overwrites of
already-instantiated disk blocks, there are no guarantees that the data will
be available after a crash.
There is no user interface to know if a write is purely an overwrite.
On filesystems using copy-on-write semantics (e.g.,
.IR btrfs )
an overwrite of existing allocated blocks is impossible.
When writing into preallocated space,
many filesystems also require calls into the block
allocator, which this system call does not sync out to disk.
This system call does not flush disk write caches and thus does not provide
any data integrity on systems with volatile disk write caches.
.SS Some details
.B SYNC_FILE_RANGE_WAIT_BEFORE
and
.B SYNC_FILE_RANGE_WAIT_AFTER
will detect any
I/O errors or
.B ENOSPC
conditions and will return these to the caller.

Useful combinations of the
.I flags
bits are:
.TP
.B SYNC_FILE_RANGE_WAIT_BEFORE | SYNC_FILE_RANGE_WRITE
Ensures that all pages
in the specified range which were dirty when
.BR sync_file_range ()
was called are placed
under write-out.
This is a start-write-for-data-integrity operation.
.TP
.B SYNC_FILE_RANGE_WRITE
Start write-out of all dirty pages in the specified range which
are not presently under write-out.
This is an asynchronous flush-to-disk
operation.
This is not suitable for data integrity operations.
.TP
.BR SYNC_FILE_RANGE_WAIT_BEFORE " (or " SYNC_FILE_RANGE_WAIT_AFTER )
Wait for
completion of write-out of all pages in the specified range.
This can be used after an earlier
.B SYNC_FILE_RANGE_WAIT_BEFORE | SYNC_FILE_RANGE_WRITE
operation to wait for completion of that operation, and obtain its result.
.TP
.B SYNC_FILE_RANGE_WAIT_BEFORE | SYNC_FILE_RANGE_WRITE | \
SYNC_FILE_RANGE_WAIT_AFTER
This is a write-for-data-integrity operation
that will ensure that all pages in the specified range which were dirty when
.BR sync_file_range ()
was called are committed to disk.
.SH RETURN VALUE
On success,
.BR sync_file_range ()
returns 0; on failure \-1 is returned and
.I errno
is set to indicate the error.
.SH ERRORS
.TP
.B EBADF
.I fd
is not a valid file descriptor.
.TP
.B EINVAL
.I flags
specifies an invalid bit; or
.I offset
or
.I nbytes
is invalid.
.TP
.B EIO
I/O error.
.TP
.B ENOMEM
Out of memory.
.TP
.B ENOSPC
Out of disk space.
.TP
.B ESPIPE
.I fd
refers to something other than a regular file, a block device,
a directory, or a symbolic link.
.\" FIXME . (bug?) Actually, how can 'fd' refer to a symbolic link (S_ISLNK)?
.\" (In user space at least) it isn't possible to obtain a file descriptor
.\" for a symbolic link.
.SH VERSIONS
.BR sync_file_range ()
appeared on Linux in kernel 2.6.17.
.SH CONFORMING TO
This system call is Linux-specific, and should be avoided
in portable programs.
.SH NOTES
.SS sync_file_range2()
Some architectures (e.g., PowerPC, ARM)
need 64-bit arguments to be aligned in a suitable pair of registers.
.\" See kernel commit edd5cd4a9424f22b0fa08bef5e299d41befd5622
On such architectures, the call signature of
.BR sync_file_range ()
shown in the SYNOPSIS would force
a register to be wasted as padding between the
.I fd
and
.I offset
arguments.
(See
.BR syscall (2)
for details.)
Therefore, these architectures define a different
system call that orders the arguments suitably:
.PP
.in +4n
.nf
.BI "int sync_file_range2(int " fd ", unsigned int " flags ,
.BI "                     off64_t " offset ", off64_t " nbytes );
.fi
.in
.PP
The behavior of this system call is otherwise exactly the same as
.BR sync_file_range ().

A system call with this signature first appeared on the ARM architecture
in Linux 2.6.20, with the name
.BR arm_sync_file_range ().
It was renamed in Linux 2.6.22,
when the analogous system call was added for PowerPC.
On architectures where glibc support is provided,
glibc transparently wraps
.BR sync_file_range2 ()
under the name
.BR sync_file_range ().
.SH SEE ALSO
.BR fdatasync (2),
.BR fsync (2),
.BR msync (2),
.BR sync (2)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1993 Michael Haardt (michael@moria.de),
.\"   Fri Apr  2 11:32:09 MET DST 1993
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.\" Tue Jul  6 12:42:46 MDT 1993 <dminer@nyx.cs.du.edu>
.\" Added "Calling Directly" and supporting paragraphs
.\"
.\" Modified Sat Jul 24 15:19:12 1993 by Rik Faith <faith@cs.unc.edu>
.\"
.\" Modified 21 Aug 1994 by Michael Chastain <mec@shell.portal.com>:
.\"   Added explanation of arg stacking when 6 or more args.
.\"
.\" Modified 10 June 1995 by Andries Brouwer <aeb@cwi.nl>
.\"
.\" 2007-10-23 mtk: created as a new page, by taking the content
.\" specific to the _syscall() macros from intro(2).
.\"
.TH _SYSCALL 2 2007-12-19 "Linux" "Linux Programmer's Manual"
.SH NAME
_syscall \- invoking a system call without library support (OBSOLETE)
.SH SYNOPSIS
.B #include <linux/unistd.h>

A _syscall macro

desired system call
.SH DESCRIPTION
The important thing to know about a system call is its prototype.
You need to know how many arguments, their types,
and the function return type.
There are seven macros that make the actual call into the system easier.
They have the form:
.sp
.RS
.RI _syscall X ( type , name , type1 , arg1 , type2 , arg2 ,...)
.RE
.PP
where
.IP
.I X
is 0\(en6, which are the number of arguments taken by the
system call
.IP
.I type
is the return type of the system call
.IP
.I name
is the name of the system call
.IP
.I typeN
is the Nth argument's type
.IP
.I argN
is the name of the Nth argument
.PP
These macros create a function called
.I name
with the arguments you
specify.
Once you include the _syscall() in your source file,
you call the system call by
.IR name .
.SH FILES
.I /usr/include/linux/unistd.h
.SH CONFORMING TO
The use of these macros is Linux-specific, and deprecated.
.SH NOTES
Starting around kernel 2.6.18, the _syscall macros were removed
from header files supplied to user space.
Use
.BR syscall (2)
instead.
(Some architectures, notably ia64, never provided the _syscall macros;
on those architectures,
.BR syscall (2)
was always required.)

The _syscall() macros
.I "do not"
produce a prototype.
You may have to
create one, especially for C++ users.

System calls are not required to return only positive or negative error
codes.
You need to read the source to be sure how it will return errors.
Usually, it is the negative of a standard error code,
for example,
.RI \- EPERM .
The _syscall() macros will return the result
.I r
of the system call
when
.I r
is nonnegative, but will return \-1 and set the variable
.I errno
to
.RI \- r
when
.I r
is negative.
For the error codes, see
.BR errno (3).

When defining a system call, the argument types
.I must
be
passed by-value or by-pointer (for aggregates like structs).
.\" The preferred way to invoke system calls that glibc does not know
.\" about yet is via
.\" .BR syscall (2).
.\" However, this mechanism can be used only if using a libc
.\" (such as glibc) that supports
.\" .BR syscall (2),
.\" and if the
.\" .I <sys/syscall.h>
.\" header file contains the required SYS_foo definition.
.\" Otherwise, the use of a _syscall macro is required.
.\"
.SH EXAMPLE
.nf
#include <stdio.h>
#include <stdlib.h>
#include <errno.h>
#include <linux/unistd.h>       /* for _syscallX macros/related stuff */
#include <linux/kernel.h>       /* for struct sysinfo */

_syscall1(int, sysinfo, struct sysinfo *, info);

/* Note: if you copy directly from the nroff source, remember to
REMOVE the extra backslashes in the printf statement. */

int
main(void)
{
    struct sysinfo s_info;
    int error;

    error = sysinfo(&s_info);
    printf("code error = %d\\n", error);
    printf("Uptime = %lds\\nLoad: 1 min %lu / 5 min %lu / 15 min %lu\\n"
           "RAM: total %lu / free %lu / shared %lu\\n"
           "Memory in buffers = %lu\\nSwap: total %lu / free %lu\\n"
           "Number of processes = %d\\n",
           s_info.uptime, s_info.loads[0],
           s_info.loads[1], s_info.loads[2],
           s_info.totalram, s_info.freeram,
           s_info.sharedram, s_info.bufferram,
           s_info.totalswap, s_info.freeswap,
           s_info.procs);
    exit(EXIT_SUCCESS);
}
.fi
.SS Sample output
.nf
code error = 0
uptime = 502034s
Load: 1 min 13376 / 5 min 5504 / 15 min 1152
RAM: total 15343616 / free 827392 / shared 8237056
Memory in buffers = 5066752
Swap: total 27881472 / free 24698880
Number of processes = 40
.fi
.SH SEE ALSO
.BR intro (2),
.BR syscall (2),
.BR errno (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1980, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" %%%LICENSE_START(BSD_4_CLAUSE_UCB)
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\" %%%LICENSE_END
.\"
.\"     @(#)syscall.2	8.1 (Berkeley) 6/16/93
.\"
.\"
.\" 2002-03-20  Christoph Hellwig <hch@infradead.org>
.\"	- adopted for Linux
.\" 2015-01-17, Kees Cook <keescook@chromium.org>
.\"	Added mips and arm64.
.\"
.TH SYSCALL 2 2015-03-29 "Linux" "Linux Programmer's Manual"
.SH NAME
syscall \- indirect system call
.SH SYNOPSIS
.nf
.BR "#define _GNU_SOURCE" "         /* See feature_test_macros(7) */"
.B #include <unistd.h>
.BR "#include <sys/syscall.h>   "  "/* For SYS_xxx definitions */"

.BI "long syscall(long " number ", ...);"
.fi
.SH DESCRIPTION
.BR syscall ()
is a small library function that invokes
the system call whose assembly language
interface has the specified
.I number
with the specified arguments.
Employing
.BR syscall ()
is useful, for example,
when invoking a system call that has no wrapper function in the C library.

.BR syscall ()
saves CPU registers before making the system call,
restores the registers upon return from the system call,
and stores any error code returned by the system call in
.BR errno (3)
if an error occurs.

Symbolic constants for system call numbers can be found in the header file
.IR <sys/syscall.h> .
.SH RETURN VALUE
The return value is defined by the system call being invoked.
In general, a 0 return value indicates success.
A \-1 return value indicates an error,
and an error code is stored in
.IR errno .
.SH NOTES
.BR syscall ()
first appeared in
4BSD.
.SS Architecture-specific requirements
Each architecture ABI has its own requirements on how
system call arguments are passed to the kernel.
For system calls that have a glibc wrapper (e.g., most system calls),
glibc handles the details of copying arguments to the right registers
in a manner suitable for the architecture.
However, when using
.BR syscall ()
to make a system call,
the caller might need to handle architecture-dependent details;
this requirement is most commonly encountered on certain 32-bit architectures.

For example, on the ARM architecture Embedded ABI (EABI), a
64-bit value (e.g.,
.IR "long long" )
must be aligned to an even register pair.
Thus, using
.BR syscall ()
instead of the wrapper provided by glibc,
the
.BR readahead ()
system call would be invoked as follows on the ARM architecture with the EABI:

.in +4n
.nf
syscall(SYS_readahead, fd, 0,
        (unsigned int) (offset >> 32),
        (unsigned int) (offset & 0xFFFFFFFF),
        count);
.fi
.in
.PP
Since the offset argument is 64 bits, and the first argument
.RI ( fd )
is passed in
.IR r0 ,
the caller must manually split and align the 64-bit value
so that it is passed in the
.IR r2 / r3
register pair.
That means inserting a dummy value into
.I r1
(the second argument of 0).

Similar issues can occur on MIPS with the O32 ABI,
on PowerPC with the 32-bit ABI, and on Xtensa.
.\" Mike Frysinger: this issue ends up forcing MIPS
.\" O32 to take 7 arguments to syscall()

The affected system calls are
.BR fadvise64_64 (2),
.BR ftruncate64 (2),
.BR posix_fadvise (2),
.BR pread64 (2),
.BR pwrite64 (2),
.BR readahead (2),
.BR sync_file_range (2),
and
.BR truncate64 (2).
.SS Architecture calling conventions
Every architecture has its own way of invoking and passing arguments to the
kernel.
The details for various architectures are listed in the two tables below.

The first table lists the instruction used to transition to kernel mode,
(which might not be the fastest or best way to transition to the kernel,
so you might have to refer to
.BR vdso (7)),
the register used to indicate the system call number,
and the register used to return the system call result.
.if t \{\
.ft CW
\}
.TS
l l1 l l1 l.
arch/ABI	instruction	syscall #	retval	Notes
_
arm/OABI	swi NR	-	a1	NR is syscall #
arm/EABI	swi 0x0	r7	r0
arm64	svc #0	x8	x0
blackfin	excpt 0x0	P0	R0
i386	int $0x80	eax	eax
ia64	break 0x100000	r15	r8	See below
mips	syscall	v0	v0	See below
parisc	ble 0x100(%sr2, %r0)	r20	r28
s390	svc 0	r1	r2	See below
s390x	svc 0	r1	r2	See below
sparc/32	t 0x10	g1	o0
sparc/64	t 0x6d	g1	o0
x86_64	syscall	rax	rax	See below
x32	syscall	rax	rax	See below
.TE
.PP
For s390 and s390x, NR (the system call number)
may be passed directly with "svc NR" if it is less than 256.

The x32 ABI uses the same instruction as the x86_64 ABI and is used on
the same processors.
To differentiate between them, the bit mask
.I __X32_SYSCALL_BIT
is bitwise-ORed into the system call number for system calls
under the x32 ABI.

On a few architectures,
a register is used to indicate simple boolean failure of the system call:
ia64 uses
.I r10
for this purpose,
and mips uses
.IR a3 .
.if t \{\
.in
.ft P
\}
.PP
The second table shows the registers used to pass the system call arguments.
.if t \{\
.ft CW
\}
.TS
l	l2	l2	l2	l2	l2	l2	l2	l.
arch/ABI	arg1	arg2	arg3	arg4	arg5	arg6	arg7	Notes
_
arm/OABI	a1	a2	a3	a4	v1	v2	v3
arm/EABI	r0	r1	r2	r3	r4	r5	r6
arm64	x0	x1	x2	x3	x4	x5	-
blackfin	R0	R1	R2	R3	R4	R5	-
i386	ebx	ecx	edx	esi	edi	ebp	-
ia64	out0	out1	out2	out3	out4	out5	-
mips/o32	a0	a1	a2	a3	-	-	-	See below
mips/n32,64	a0	a1	a2	a3	a4	a5	-
parisc	r26	r25	r24	r23	r22	r21	-
s390	r2	r3	r4	r5	r6	r7	-
s390x	r2	r3	r4	r5	r6	r7	-
sparc/32	o0	o1	o2	o3	o4	o5	-
sparc/64	o0	o1	o2	o3	o4	o5	-
x86_64	rdi	rsi	rdx	r10	r8	r9	-
x32	rdi	rsi	rdx	r10	r8	r9	-
.TE
.PP
The mips/o32 system call convention passes
arguments 5 through 8 on the user stack.
.if t \{\
.in
.ft P
\}
.PP
Note that these tables don't cover the entire calling convention\(emsome
architectures may indiscriminately clobber other registers not listed here.
.SH EXAMPLE
.nf
#define _GNU_SOURCE
#include <unistd.h>
#include <sys/syscall.h>
#include <sys/types.h>
#include <signal.h>

int
main(int argc, char *argv[])
{
    pid_t tid;

    tid = syscall(SYS_gettid);
    tid = syscall(SYS_tgkill, getpid(), tid, SIGHUP);
}
.fi
.SH SEE ALSO
.BR _syscall (2),
.BR intro (2),
.BR syscalls (2),
.BR errno (3),
.BR vdso (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2007 Michael Kerrisk <mtk.manpages@gmail.com>
.\" with some input from Stepan Kasal <kasal@ucw.cz>
.\"
.\" Some content retained from an earlier version of this page:
.\" Copyright (C) 1998 Andries Brouwer (aeb@cwi.nl)
.\" Modifications for 2.2 and 2.4 Copyright (C) 2002 Ian Redfern
.\" <redferni@logica.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH SYSCALLS 2 2015-03-29 "Linux" "Linux Programmer's Manual"
.SH NAME
syscalls \- Linux system calls
.SH SYNOPSIS
Linux system calls.
.SH DESCRIPTION
The system call is the fundamental interface between an application
and the Linux kernel.
.SS System calls and library wrapper functions
System calls are generally not invoked directly,
but rather via wrapper functions in glibc (or perhaps some other library).
For details of direct invocation of a system call, see
.BR intro (2).
Often, but not always, the name of the wrapper function is the same
as the name of the system call that it invokes.
For example, glibc contains a function
.BR truncate ()
which invokes the underlying "truncate" system call.

Often the glibc wrapper function is quite thin, doing little work
other than copying arguments to the right registers
before invoking the system call,
and then setting
.I errno
appropriately after the system call has returned.
(These are the same steps that are performed by
.BR syscall (2),
which can be used to invoke system calls
for which no wrapper function is provided.)
Note: system calls indicate a failure by returning a negative error
number to the caller;
when this happens,
the wrapper function negates the returned error number
(to make it positive), copies it to
.IR errno ,
and returns \-1 to the caller of the wrapper.

Sometimes, however, the wrapper function does some extra work
before invoking the system call.
For example, nowadays there are (for reasons described below) two
related system calls,
.BR truncate (2)
and
.BR truncate64 (2),
and the glibc
.BR truncate ()
wrapper function checks which of those system calls
are provided by the kernel and determines which should be employed.
.SS System call list
Below is a list of the Linux system calls.
In the list, the
.I Kernel
column indicates the kernel version
for those system calls that were new in Linux 2.2,
or have appeared since that kernel version.
Note the following points:
.IP * 3
Where no kernel version is indicated,
the system call appeared in kernel 1.0 or earlier.
.IP *
Where a system call is marked "1.2"
this means the system call probably appeared in a 1.1.x kernel version,
and first appeared in a stable kernel with 1.2.
(Development of the 1.2 kernel was initiated from a branch of kernel
1.0.6 via the 1.1.x unstable kernel series.)
.IP *
Where a system call is marked "2.0"
this means the system call probably appeared in a 1.3.x kernel version,
and first appeared in a stable kernel with 2.0.
(Development of the 2.0 kernel was initiated from a branch of kernel
1.2.x, somewhere around 1.2.10,
via the 1.3.x unstable kernel series.)
.\" Was kernel 2.0 started from a branch of 1.2.10?
.\" At least from the timestamps of the tarballs of
.\" of 1.2.10 and 1.3.0, that's how it looks, but in
.\" fact the diff doesn't seem very clear, the
.\" 1.3.0 .tar.bz is much bigger (2.0 MB) than the
.\" 1.2.10 .tar.bz2 (1.8 MB), and AEB points out the
.\" timestamps of some files in 1.3.0 seem to be older
.\" than those in 1.2.10.  All of this suggests
.\" that there might not have been a clean branch point.
.IP *
Where a system call is marked "2.2"
this means the system call probably appeared in a 2.1.x kernel version,
and first appeared in a stable kernel with 2.2.0.
(Development of the 2.2 kernel was initiated from a branch of kernel
2.0.21 via the 2.1.x unstable kernel series.)
.IP *
Where a system call is marked "2.4"
this means the system call probably appeared in a 2.3.x kernel version,
and first appeared in a stable kernel with 2.4.0.
(Development of the 2.4 kernel was initiated from a branch of
kernel 2.2.8 via the 2.3.x unstable kernel series.)
.IP *
Where a system call is marked "2.6"
this means the system call probably appeared in a 2.5.x kernel version,
and first appeared in a stable kernel with 2.6.0.
(Development of kernel 2.6 was initiated from a branch
of kernel 2.4.15 via the 2.5.x unstable kernel series.)
.IP *
Starting with kernel 2.6.0, the development model changed,
and new system calls may appear in each 2.6.x release.
In this case, the exact version number where the system call appeared
is shown.
This convention continues with the 3.x kernel series,
which followed on from kernel 2.6.39, and the 4.x kernel series,
which followed on from kernel 3.19.
.IP *
In some cases, a system call was added to a stable kernel
series after it branched from the previous stable kernel
series, and then backported into the earlier stable kernel series.
For example some system calls that appeared in 2.6.x were also backported
into a 2.4.x release after 2.4.15.
When this is so, the version where the system call appeared
in both of the major kernel series is listed.
.PP
The list of system calls that are available as at kernel 4.0
(or in a few cases only on older kernels) is as follows:
.\"
.\" Looking at scripts/checksyscalls.sh in the kernel source is
.\" instructive about x86 specifics.
.\"
.ad l
.TS
l2 le l
---
l l l.
\fBSystem call\fP	\fBKernel\fP	\fBNotes\fP

\fB_llseek\fP(2)	1.2
\fB_newselect\fP(2)	2.0
\fB_sysctl\fP(2)	2.0
\fBaccept\fP(2)	2.0	See notes on \fBsocketcall\fP(2)
\fBaccept4\fP(2)	2.6.28
\fBaccess\fP(2)	1.0
\fBacct\fP(2)	1.0
\fBadd_key\fP(2)	2.6.11
\fBadjtimex\fP(2)	1.0
\fBalarm\fP(2)	1.0
\fBalloc_hugepages\fP(2)	2.5.36	Removed in 2.5.44
\fBbdflush\fP(2)	1.2	T{
Deprecated (does nothing)
.br
since 2.6
T}
\fBbind\fP(2)	2.0	See notes on \fBsocketcall\fP(2)
\fBbpf\fP(2)	3.18
\fBbrk\fP(2)	1.0
\fBcacheflush\fP(2)	1.2	Not on x86
\fBcapget\fP(2)	2.2
\fBcapset\fP(2)	2.2
\fBchdir\fP(2)	1.0
\fBchmod\fP(2)	1.0
\fBchown\fP(2)	2.2	T{
See \fBchown\fP(2) for
.br
version details
T}
\fBchown32\fP(2)	2.4
\fBchroot\fP(2)	1.0
\fBclock_adjtime\fP(2)	2.6.39
\fBclock_getres\fP(2)	2.6
\fBclock_gettime\fP(2)	2.6
\fBclock_nanosleep\fP(2)	2.6
\fBclock_settime\fP(2)	2.6
\fBclone\fP(2)	1.0
\fBclose\fP(2)	1.0
\fBconnect\fP(2)	2.0	See notes on \fBsocketcall\fP(2)
\fBcreat\fP(2)	1.0
\fBcreate_module\fP(2)	1.0	Removed in 2.6
\fBdelete_module\fP(2)	1.0
\fBdup\fP(2)	1.0
\fBdup2\fP(2)	1.0
\fBdup3\fP(2)	2.6.27
\fBepoll_create\fP(2)	2.6
\fBepoll_create1\fP(2)	2.6.27
\fBepoll_ctl\fP(2)	2.6
\fBepoll_pwait\fP(2)	2.6.19
\fBepoll_wait\fP(2)	2.6
\fBeventfd\fP(2)	2.6.22
\fBeventfd2\fP(2)	2.6.27
\fBexecve\fP(2)	1.0
\fBexecveat\fP(2)	3.19
\fBexit\fP(2)	1.0
\fBexit_group\fP(2)	2.6
\fBfaccessat\fP(2)	2.6.16
\fBfadvise64\fP(2)	2.6
.\" Implements \fBposix_fadvise\fP(2)
\fBfadvise64_64\fP(2)	2.6
\fBfallocate\fP(2)	2.6.23
\fBfanotify_init\fP(2)	2.6.37
\fBfanotify_mark\fP(2)	2.6.37
.\" The fanotify calls were added in Linux 2.6.36,
.\" but disabled while the API was finalized.
\fBfchdir\fP(2)	1.0
\fBfchmod\fP(2)	1.0
\fBfchmodat\fP(2)	2.6.16
\fBfchown\fP(2)	1.0
\fBfchown32\fP(2)	2.4
\fBfchownat\fP(2)	2.6.16
\fBfcntl\fP(2)	1.0
\fBfcntl64\fP(2)	2.4
\fBfdatasync\fP(2)	2.0
\fBfgetxattr\fP(2)	2.6; 2.4.18
\fBfinit_module\fP(2)	3.8
\fBflistxattr\fP(2)	2.6; 2.4.18
\fBflock\fP(2)	2.0
\fBfork\fP(2)	1.0
\fBfree_hugepages\fP(2)	2.5.36	Removed in 2.5.44
\fBfremovexattr\fP(2)	2.6; 2.4.18
\fBfsetxattr\fP(2)	2.6; 2.4.18
\fBfstat\fP(2)	1.0
\fBfstat64\fP(2)	2.4
\fBfstatat64\fP(2)	2.6.16
\fBfstatfs\fP(2)	1.0
\fBfstatfs64\fP(2)	2.6
\fBfsync\fP(2)	1.0
\fBftruncate\fP(2)	1.0
\fBftruncate64\fP(2)	2.4
\fBfutex\fP(2)	2.6
\fBfutimesat\fP(2)	2.6.16
\fBget_kernel_syms\fP(2)	1.0	Removed in 2.6
\fBget_mempolicy\fP(2)	2.6.6
\fBget_robust_list\fP(2)	2.6.17
\fBget_thread_area\fP(2)	2.6
\fBgetcpu\fP(2)	2.6.19
\fBgetcwd\fP(2)	2.2
\fBgetdents\fP(2)	2.0
\fBgetdents64\fP(2)	2.4
\fBgetegid\fP(2)	1.0
\fBgetegid32\fP(2)	2.4
\fBgeteuid\fP(2)	1.0
\fBgeteuid32\fP(2)	2.4
\fBgetgid\fP(2)	1.0
\fBgetgid32\fP(2)	2.4
\fBgetgroups\fP(2)	1.0
\fBgetgroups32\fP(2)	2.4
\fBgetitimer\fP(2)	1.0
\fBgetpeername\fP(2)	2.0	See notes on \fBsocketcall\fP(2)
\fBgetpagesize\fP(2)	2.0	Not on x86
\fBgetpgid\fP(2)	1.0
\fBgetpgrp\fP(2)	1.0
\fBgetpid\fP(2)	1.0
\fBgetppid\fP(2)	1.0
\fBgetpriority\fP(2)	1.0
\fBgetrandom\fP(2)	3.17
\fBgetresgid\fP(2)	2.2
\fBgetresgid32\fP(2)	2.4
\fBgetresuid\fP(2)	2.2
\fBgetresuid32\fP(2)	2.4
\fBgetrlimit\fP(2)	1.0
\fBgetrusage\fP(2)	1.0
\fBgetsid\fP(2)	2.0
\fBgetsockname\fP(2)	2.0	See notes on \fBsocketcall\fP(2)
\fBgetsockopt\fP(2)	2.0	See notes on \fBsocketcall\fP(2)
\fBgettid\fP(2)	2.4.11
\fBgettimeofday\fP(2)	1.0
\fBgetuid\fP(2)	1.0
\fBgetuid32\fP(2)	2.4
.\" \fBgetunwind\fP(2)	2.4.8	ia64; DEPRECATED
\fBgetxattr\fP(2)	2.6; 2.4.18
\fBinit_module\fP(2)	1.0
\fBinotify_add_watch\fP(2)	2.6.13
\fBinotify_init\fP(2)	2.6.13
\fBinotify_init1\fP(2)	2.6.27
\fBinotify_rm_watch\fP(2)	2.6.13
\fBio_cancel\fP(2)	2.6
\fBio_destroy\fP(2)	2.6
\fBio_getevents\fP(2)	2.6
\fBio_setup\fP(2)	2.6
\fBio_submit\fP(2)	2.6
\fBioctl\fP(2)	1.0
\fBioperm\fP(2)	1.0
\fBiopl\fP(2)	1.0
\fBioprio_get\fP(2)	2.6.13
\fBioprio_set\fP(2)	2.6.13
\fBipc\fP(2)	1.0
.\" Implements System V IPC calls
\fBkcmp\fP(2)	3.5
\fBkern_features\fP(2)	3.7	Sparc64
.\" FIXME . document kern_features():
.\" commit 517ffce4e1a03aea979fe3a18a3dd1761a24fafb
\fBkexec_file_load\fP(2)	3.17
\fBkexec_load\fP(2)	2.6.13
.\" The entry in the syscall table was reserved starting in 2.6.7
.\" Was named sys_kexec_load() from 2.6.7 to 2.6.16
\fBkeyctl\fP(2)	2.6.11
\fBkill\fP(2)	1.0
\fBlchown\fP(2)	1.0	T{
See \fBchown\fP(2) for
.br
version details
T}
\fBlchown32\fP(2)	2.4
\fBlgetxattr\fP(2)	2.6; 2.4.18
\fBlink\fP(2)	1.0
\fBlinkat\fP(2)	2.6.16
\fBlisten\fP(2)	2.0	See notes on \fBsocketcall\fP(2)
\fBlistxattr\fP(2)	2.6; 2.4.18
\fBllistxattr\fP(2)	2.6; 2.4.18
\fBlookup_dcookie\fP(2)	2.6
\fBlremovexattr\fP(2)	2.6; 2.4.18
\fBlseek\fP(2)	1.0
\fBlsetxattr\fP(2)	2.6; 2.4.18
\fBlstat\fP(2)	1.0
\fBlstat64\fP(2)	2.4
\fBmadvise\fP(2)	2.4
\fBmbind\fP(2)	2.6.6
.\" \fBmemory_ordering\fP(2)	???	Sparc64
\fBmemfd_create\fP(2)	3.17
\fBmigrate_pages\fP(2)	2.6.16
\fBmincore\fP(2)	2.4
\fBmkdir\fP(2)	1.0
\fBmkdirat\fP(2)	2.6.16
\fBmknod\fP(2)	1.0
\fBmknodat\fP(2)	2.6.16
\fBmlock\fP(2)	2.0
\fBmlockall\fP(2)	2.0
\fBmmap\fP(2)	1.0
\fBmmap2\fP(2)	2.4
\fBmodify_ldt\fP(2)	1.0
\fBmount\fP(2)	1.0
\fBmove_pages\fP(2)	2.6.18
\fBmprotect\fP(2)	1.0
\fBmq_getsetattr\fP(2)	2.6.6
.\" Implements \fBmq_getattr\fP(3) and \fBmq_setattr\fP(3)
\fBmq_notify\fP(2)	2.6.6
\fBmq_open\fP(2)	2.6.6
\fBmq_timedreceive\fP(2)	2.6.6
\fBmq_timedsend\fP(2)	2.6.6
\fBmq_unlink\fP(2)	2.6.6
\fBmremap\fP(2)	2.0
\fBmsgctl\fP(2)	2.0	See notes on \fBipc\fP(2)
\fBmsgget\fP(2)	2.0	See notes on \fBipc\fP(2)
\fBmsgrcv\fP(2)	2.0	See notes on \fBipc\fP(2)
\fBmsgsnd\fP(2)	2.0	See notes on \fBipc\fP(2)
\fBmsync\fP(2)	2.0
.\" \fBmultiplexer\fP(2)	??	__NR_multiplexer reserved on
.\"		PowerPC, but unimplemented?
\fBmunlock\fP(2)	2.0
\fBmunlockall\fP(2)	2.0
\fBmunmap\fP(2)	1.0
\fBname_to_handle_at\fP(2)	2.6.39
\fBnanosleep\fP(2)	2.0
\fBnfsservctl\fP(2)	2.2	Removed in 3.1
\fBnice\fP(2)	1.0
\fBoldfstat\fP(2)	1.0
\fBoldlstat\fP(2)	1.0
\fBoldolduname\fP(2)	1.0
\fBoldstat\fP(2)	1.0
\fBolduname\fP(2)	1.0
\fBopen\fP(2)	1.0
\fBopen_by_handle_at\fP(2)	2.6.39
\fBopenat\fP(2)	2.6.16
\fBpause\fP(2)	1.0
\fBpciconfig_iobase\fP(2)	2.2.15; 2.4	Not on x86
.\" Alpha, PowerPC, ARM; not x86
\fBpciconfig_read\fP(2)	2.0.26; 2.2	Not on x86
.\" , PowerPC, ARM; not x86
\fBpciconfig_write\fP(2)	2.0.26; 2.2	Not on x86
.\" , PowerPC, ARM; not x86
\fBperf_event_open\fP(2)	2.6.31	T{
Was perf_counter_open() in
.br
2.6.31; renamed in 2.6.32
T}
\fBpersonality\fP(2)	1.2
\fBperfctr\fP(2)	2.2	Sparc; removed in 2.6.34
.\"	commit c7d5a0050773e98d1094eaa9f2a1a793fafac300 removed perfctr()
\fBperfmonctl\fP(2)	2.4	ia64
\fBpipe\fP(2)	1.0
\fBpipe2\fP(2)	2.6.27
\fBpivot_root\fP(2)	2.4
\fBpoll\fP(2)	2.0.36; 2.2
\fBppc_rtas\fP(2)	2.6.2	PowerPC only
\fBppoll\fP(2)	2.6.16
\fBprctl\fP(2)	2.2
\fBpread64\fP(2)		T{
Added as "pread" in 2.2;
.br
renamed "pread64" in 2.6
T}
\fBpreadv\fP(2)	2.6.30
\fBprlimit64\fP(2)	2.6.36
\fBprocess_vm_readv\fP(2)	3.2
\fBprocess_vm_writev\fP(2)	3.2
\fBpselect6\fP(2)	2.6.16
.\" Implements \fBpselect\fP(2)
\fBptrace\fP(2)	1.0
\fBpwrite64\fP(2)		T{
Added as "pwrite" in 2.2;
.br
renamed "pwrite64" in 2.6
T}
\fBpwritev\fP(2)	2.6.30
\fBquery_module\fP(2)	2.2	Removed in 2.6
\fBquotactl\fP(2)	1.0
\fBread\fP(2)	1.0
\fBreadahead\fP(2)	2.4.13
\fBreaddir\fP(2)	1.0
.\" Supersedes \fBgetdents\fP(2)
\fBreadlink\fP(2)	1.0
\fBreadlinkat\fP(2)	2.6.16
\fBreadv\fP(2)	2.0
\fBreboot\fP(2)	1.0
\fBrecv\fP(2)	2.0	See notes on \fBsocketcall\fP(2)
\fBrecvfrom\fP(2)	2.0	See notes on \fBsocketcall\fP(2)
\fBrecvmsg\fP(2)	2.0	See notes on \fBsocketcall\fP(2)
\fBrecvmmsg\fP(2)	2.6.33
\fBremap_file_pages\fP(2)	2.6	Deprecated since 3.16
\fBremovexattr\fP(2)	2.6; 2.4.18
\fBrename\fP(2)	1.0
\fBrenameat\fP(2)	2.6.16
\fBrenameat2\fP(2)	3.15
\fBrequest_key\fP(2)	2.6.11
\fBrestart_syscall\fP(2)	2.6
\fBrmdir\fP(2)	1.0
\fBrt_sigaction\fP(2)	2.2
\fBrt_sigpending\fP(2)	2.2
\fBrt_sigprocmask\fP(2)	2.2
\fBrt_sigqueueinfo\fP(2)	2.2
\fBrt_sigreturn\fP(2)	2.2
\fBrt_sigsuspend\fP(2)	2.2
\fBrt_sigtimedwait\fP(2)	2.2
\fBrt_tgsigqueueinfo\fP(2)	2.6.31
\fBs390_runtime_instr\fP(2)	3.7	s390 only
\fBs390_pci_mmio_read\fP(2)	3.19	s390 only
\fBs390_pci_mmio_write\fP(2)	3.19	s390 only
\fBsched_get_priority_max\fP(2)	2.0
\fBsched_get_priority_min\fP(2)	2.0
\fBsched_getaffinity\fP(2)	2.6
\fBsched_getattr\fP(2)	3.14
\fBsched_getparam\fP(2)	2.0
\fBsched_getscheduler\fP(2)	2.0
\fBsched_rr_get_interval\fP(2)	2.0
\fBsched_setaffinity\fP(2)	2.6
\fBsched_setattr\fP(2)	3.14
\fBsched_setparam\fP(2)	2.0
\fBsched_setscheduler\fP(2)	2.0
\fBsched_yield\fP(2)	2.0
\fBseccomp\fP(2)	3.17
\fBselect\fP(2)	1.0
\fBsemctl\fP(2)	2.0	See notes on \fBipc\fP(2)
\fBsemget\fP(2)	2.0	See notes on \fBipc\fP(2)
\fBsemop\fP(2)	2.0	See notes on \fBipc\fP(2)
\fBsemtimedop\fP(2)	2.6; 2.4.22
\fBsend\fP(2)	2.0	See notes on \fBsocketcall\fP(2)
\fBsendfile\fP(2)	2.2
\fBsendfile64\fP(2)	2.6; 2.4.19
\fBsendmmsg\fP(2)	3.0
\fBsendmsg\fP(2)	2.0	See notes on \fBsocketcall\fP(2)
\fBsendto\fP(2)	2.0	See notes on \fBsocketcall\fP(2)
\fBset_mempolicy\fP(2)	2.6.6
\fBset_robust_list\fP(2)	2.6.17
\fBset_thread_area\fP(2)	2.6
\fBset_tid_address\fP(2)	2.6
.\" See http://lkml.org/lkml/2005/8/1/83
.\" "[PATCH] remove sys_set_zone_reclaim()"
\fBsetdomainname\fP(2)	1.0
\fBsetfsgid\fP(2)	1.2
\fBsetfsgid32\fP(2)	2.4
\fBsetfsuid\fP(2)	1.2
\fBsetfsuid32\fP(2)	2.4
\fBsetgid\fP(2)	1.0
\fBsetgid32\fP(2)	2.4
\fBsetgroups\fP(2)	1.0
\fBsetgroups32\fP(2)	2.4
\fBsethostname\fP(2)	1.0
\fBsetitimer\fP(2)	1.0
\fBsetns\fP(2)	3.0
\fBsetpgid\fP(2)	1.0
\fBsetpriority\fP(2)	1.0
\fBsetregid\fP(2)	1.0
\fBsetregid32\fP(2)	2.4
\fBsetresgid\fP(2)	2.2
\fBsetresgid32\fP(2)	2.4
\fBsetresuid\fP(2)	2.2
\fBsetresuid32\fP(2)	2.4
\fBsetreuid\fP(2)	1.0
\fBsetreuid32\fP(2)	2.4
\fBsetrlimit\fP(2)	1.0
\fBsetsid\fP(2)	1.0
\fBsetsockopt\fP(2)	2.0	See notes on \fBsocketcall\fP(2)
\fBsettimeofday\fP(2)	1.0
\fBsetuid\fP(2)	1.0
\fBsetuid32\fP(2)	2.4
\fBsetup\fP(2)	1.0	Removed in 2.2
\fBsetxattr\fP(2)	2.6; 2.4.18
\fBsgetmask\fP(2)	1.0
\fBshmat\fP(2)	2.0	See notes on \fBipc\fP(2)
\fBshmctl\fP(2)	2.0	See notes on \fBipc\fP(2)
\fBshmdt\fP(2)	2.0	See notes on \fBipc\fP(2)
\fBshmget\fP(2)	2.0	See notes on \fBipc\fP(2)
\fBshutdown\fP(2)	2.0	See notes on \fBsocketcall\fP(2)
\fBsigaction\fP(2)	1.0
\fBsigaltstack\fP(2)	2.2
\fBsignal\fP(2)	1.0
\fBsignalfd\fP(2)	2.6.22
\fBsignalfd4\fP(2)	2.6.27
\fBsigpending\fP(2)	1.0
\fBsigprocmask\fP(2)	1.0
\fBsigreturn\fP(2)	1.0
\fBsigsuspend\fP(2)	1.0
\fBsocket\fP(2)	2.0	See notes on \fBsocketcall\fP(2)
\fBsocketcall\fP(2)	1.0
.\" Implements BSD socket calls
\fBsocketpair\fP(2)	2.0	See notes on \fBsocketcall\fP(2)
\fBsplice\fP(2)	2.6.17
\fBspu_create\fP(2)	2.6.16	PowerPC only
\fBspu_run\fP(2)	2.6.16	PowerPC only
\fBssetmask\fP(2)	1.0
\fBstat\fP(2)	1.0
\fBstat64\fP(2)	2.4
\fBstatfs\fP(2)	1.0
\fBstatfs64\fP(2)	2.6
\fBstime\fP(2)	1.0
\fBsubpage_prot\fP(2)	2.6.25	PowerPC only
\fBswapoff\fP(2)	1.0
\fBswapon\fP(2)	1.0
\fBsymlink\fP(2)	1.0
\fBsymlinkat\fP(2)	2.6.16
\fBsync\fP(2)	1.0
\fBsync_file_range\fP(2)	2.6.17
\fBsync_file_range2\fP(2)	2.6.22
.\" PowerPC, ARM, tile
.\" First appeared on ARM, as arm_sync_file_range(), but later renamed
.\" \fBsys_debug_setcontext\fP(2)	???	PowerPC if CONFIG_PPC32
\fBsyncfs\fP(2)	2.6.39
\fBsysfs\fP(2)	1.2
\fBsysinfo\fP(2)	1.0
\fBsyslog\fP(2)	1.0
.\" glibc interface is \fBklogctl\fP(3)
\fBtee\fP(2)	2.6.17
\fBtgkill\fP(2)	2.6
\fBtime\fP(2)	1.0
\fBtimer_create\fP(2)	2.6
\fBtimer_delete\fP(2)	2.6
\fBtimer_getoverrun\fP(2)	2.6
\fBtimer_gettime\fP(2)	2.6
\fBtimer_settime\fP(2)	2.6
\fBtimerfd_create\fP(2)	2.6.25
\fBtimerfd_gettime\fP(2)	2.6.25
\fBtimerfd_settime\fP(2)	2.6.25
\fBtimes\fP(2)	1.0
\fBtkill\fP(2)	2.6; 2.4.22
\fBtruncate\fP(2)	1.0
\fBtruncate64\fP(2)	2.4
\fBugetrlimit\fP(2)	2.4
\fBumask\fP(2)	1.0
\fBumount\fP(2)	1.0
.\" sys_oldumount() -- __NR_umount
\fBumount2\fP(2)	2.2
.\" sys_umount() -- __NR_umount2
\fBuname\fP(2)	1.0
\fBunlink\fP(2)	1.0
\fBunlinkat\fP(2)	2.6.16
\fBunshare\fP(2)	2.6.16
\fBuselib\fP(2)	1.0
\fBustat\fP(2)	1.0
\fButime\fP(2)	1.0
\fButimensat\fP(2)	2.6.22
\fButimes\fP(2)	2.2
\fButrap_install\fP(2)	2.2	Sparc only
.\" FIXME . document utrap_install()
.\" There's a man page for Solaris 5.11
\fBvfork\fP(2)	2.2
\fBvhangup\fP(2)	1.0
\fBvm86old\fP(2)	1.0	T{
Was "vm86"; renamed in
2.0.28/2.2
T}
\fBvm86\fP(2)	2.0.28; 2.2
\fBvmsplice\fP(2)	2.6.17
\fBwait4\fP(2)	1.0
\fBwaitid\fP(2)	2.6.10
\fBwaitpid\fP(2)	1.0
\fBwrite\fP(2)	1.0
\fBwritev\fP(2)	2.0
.TE
.ad
.PP
On many platforms, including x86-32, socket calls are all multiplexed
(via glibc wrapper functions) through
.BR socketcall (2)
and similarly System\ V IPC calls are multiplexed through
.BR ipc (2).

Although slots are reserved for them in the system call table,
the following system calls are not implemented in the standard kernel:
.BR afs_syscall (2), \" __NR_afs_syscall is 53 on Linux 2.6.22/i386
.BR break (2),       \" __NR_break is 17 on Linux 2.6.22/i386
.BR ftime (2),       \" __NR_ftime is 35 on Linux 2.6.22/i386
.BR getpmsg (2),     \" __NR_getpmsg is 188 on Linux 2.6.22/i386
.BR gtty (2),        \" __NR_gtty is 32 on Linux 2.6.22/i386
.BR idle (2),        \" __NR_idle is 112 on Linux 2.6.22/i386
.BR lock (2),        \" __NR_lock is 53 on Linux 2.6.22/i386
.BR madvise1 (2),    \" __NR_madvise1 is 219 on Linux 2.6.22/i386
.BR mpx (2),         \" __NR_mpx is 66 on Linux 2.6.22/i386
.BR phys (2),        \" Slot has been reused
.BR prof (2),        \" __NR_prof is 44 on Linux 2.6.22/i386
.BR profil (2),      \" __NR_profil is 98 on Linux 2.6.22/i386
.BR putpmsg (2),     \" __NR_putpmsg is 189 on Linux 2.6.22/i386
.\" __NR_security is 223 on Linux 2.4/i386; absent on 2.6/i386, present
.\" on a couple of 2.6 architectures
.BR security (2),    \" __NR_security is 223 on Linux 2.4/i386
.\" The security call is for future use.
.BR stty (2),        \" __NR_stty is 31 on Linux 2.6.22/i386
.BR tuxcall (2),     \" __NR_tuxcall is 184 on x86_64, also on PPC and alpha
.BR ulimit (2),      \" __NR_ulimit is 58 on Linux 2.6.22/i386
and
.BR vserver (2)      \" __NR_vserver is 273 on Linux 2.6.22/i386
(see also
.BR unimplemented (2)).
However,
.BR ftime (3),
.BR profil (3),
and
.BR ulimit (3)
exist as library routines.
The slot for
.BR phys (2)
is in use since kernel 2.1.116 for
.BR umount (2);
.BR phys (2)
will never be implemented.
The
.BR getpmsg (2)
and
.BR putpmsg (2)
calls are for kernels patched to support STREAMS,
and may never be in the standard kernel.

There was briefly
.BR set_zone_reclaim (2),
added in Linux 2.6.13, and removed in 2.6.16;
this system call was never available to user space.
.SH NOTES
.PP
Roughly speaking, the code belonging to the system call
with number __NR_xxx defined in
.I /usr/include/asm/unistd.h
can be found in the Linux kernel source in the routine
.IR sys_xxx ().
(The dispatch table for i386 can be found in
.IR /usr/src/linux/arch/i386/kernel/entry.S .)
There are many exceptions, however, mostly because
older system calls were superseded by newer ones,
and this has been treated somewhat unsystematically.
On platforms with
proprietary operating-system emulation,
such as parisc, sparc, sparc64, and alpha,
there are many additional system calls; mips64 also contains a full
set of 32-bit system calls.

Over time, changes to the interfaces of some system calls have been
necessary.
One reason for such changes was the need to increase the size of
structures or scalar values passed to the system call.
Because of these changes, certain architectures
(notably, longstanding 32-bit architectures such as i386)
now have various groups of related system calls (e.g.,
.BR truncate (2)
and
.BR truncate64 (2))
which perform similar tasks, but which vary in
details such as the size of their arguments.
(As noted earlier, applications are generally unaware of this:
the glibc wrapper functions do some work to ensure that the right
system call is invoked, and that ABI compatibility is
preserved for old binaries.)
Examples of systems calls that exist in multiple versions are
the following:
.IP * 3
By now there are three different versions of
.BR stat (2):
.IR sys_stat ()
(slot
.IR __NR_oldstat ),
.IR sys_newstat ()
(slot
.IR __NR_stat ),
and
.IR sys_stat64 ()
(slot
.IR __NR_stat64 ),
with the last being the most current.
.\" e.g., on 2.6.22/i386: __NR_oldstat 18, __NR_stat 106, __NR_stat64 195
.\" The stat system calls deal with three different data structures,
.\" defined in include/asm-i386/stat.h: __old_kernel_stat, stat, stat64
A similar story applies for
.BR lstat (2)
and
.BR fstat (2).
.IP *
Similarly, the defines
.IR __NR_oldolduname ,
.IR __NR_olduname ,
and
.I __NR_uname
refer to the routines
.IR sys_olduname (),
.IR sys_uname ()
and
.IR sys_newuname ().
.IP *
In Linux 2.0, a new version of
.BR vm86 (2)
appeared, with the old and the new kernel routines being named
.IR sys_vm86old ()
and
.IR sys_vm86 ().
.IP *
In Linux 2.4, a new version of
.BR getrlimit (2)
appeared, with the old and the new kernel routines being named
.IR sys_old_getrlimit ()
(slot
.IR __NR_getrlimit )
and
.IR sys_getrlimit ()
(slot
.IR __NR_ugetrlimit ).
.IP *
Linux 2.4 increased the size of user and group IDs from 16 to 32 bits.
.\" 64-bit off_t changes: ftruncate64, *stat64,
.\" fcntl64 (because of the flock structure), getdents64, *statfs64
To support this change, a range of system calls were added
(e.g.,
.BR chown32 (2),
.BR getuid32 (2),
.BR getgroups32 (2),
.BR setresuid32 (2)),
superseding earlier calls of the same name without the
"32" suffix.
.IP *
Linux 2.4 added support for applications on 32-bit architectures
to access large files (i.e., files for which the sizes and
file offsets can't be represented in 32 bits.)
To support this change, replacements were required for system calls
that deal with file offsets and sizes.
Thus the following system calls were added:
.BR fcntl64 (2),
.BR getdents64 (2),
.BR stat64 (2),
.BR statfs64 (2),
.BR truncate64 (2),
and their analogs that work with file descriptors or
symbolic links.
These system calls supersede the older system calls
which, except in the case of the "stat" calls,
have the same name without the "64" suffix.

On newer platforms that only have 64-bit file access and 32-bit UIDs/GIDs
(e.g., alpha, ia64, s390x, x86-64), there is just a single version of
the UID/GID and file access system calls.
On platforms (typically, 32-bit platforms) where the *64 and *32 calls exist,
the other versions are obsolete.
.IP *
The
.I rt_sig*
calls were added in kernel 2.2 to support the addition
of real-time signals (see
.BR signal (7)).
These system calls supersede the older system calls of the same
name without the "rt_" prefix.
.IP *
The
.BR select (2)
and
.BR mmap (2)
system calls use five or more arguments,
which caused problems in the way
argument passing on the i386 used to be set up.
Thus, while other architectures have
.IR sys_select ()
and
.IR sys_mmap ()
corresponding to
.I __NR_select
and
.IR __NR_mmap ,
on i386 one finds
.IR old_select ()
and
.IR old_mmap ()
(routines that use a pointer to a
argument block) instead.
These days passing five arguments
is not a problem any more, and there is a
.I __NR__newselect
.\" (used by libc 6)
that corresponds directly to
.IR sys_select ()
and similarly
.IR __NR_mmap2 .
.\" .PP
.\" Two system call numbers,
.\" .IR __NR__llseek
.\" and
.\" .IR __NR__sysctl
.\" have an additional underscore absent in
.\" .IR sys_llseek ()
.\" and
.\" .IR sys_sysctl ().
.\"
.\" In kernel 2.1.81,
.\" .BR lchown (2)
.\" and
.\" .BR chown (2)
.\" were swapped; that is,
.\" .BR lchown (2)
.\" was added with the semantics that were then current for
.\" .BR chown (2),
.\" and the semantics of the latter call were changed to what
.\" they are today.
.SH SEE ALSO
.BR intro (2),
.BR syscall (2),
.BR unimplemented (2),
.BR errno (3),
.BR libc (7),
.BR vdso (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 1996 Andries Brouwer (aeb@cwi.nl)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Written 11 April 1996 by Andries Brouwer <aeb@cwi.nl>
.\" 960412: Added comments from Stephen Tweedie
.\" Modified Tue Oct 22 22:28:41 1996 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified Mon Jan  5 20:31:04 1998 by aeb.
.\"
.TH SYSCTL 2 2012-12-22 "Linux" "Linux Programmer's Manual"
.SH NAME
sysctl \- read/write system parameters
.SH SYNOPSIS
.nf
.B #include <unistd.h>
.br
.B #include <linux/sysctl.h>
.sp
.BI "int _sysctl(struct __sysctl_args *" args );
.fi

.IR Note :
There is no glibc wrapper for this system call; see NOTES.
.SH DESCRIPTION
.B Do not use this system call!
See NOTES.

The
.BR _sysctl ()
call reads and/or writes kernel parameters.
For example, the hostname,
or the maximum number of open files.
The argument has the form
.PP
.in +4n
.nf
struct __sysctl_args {
    int    *name;    /* integer vector describing variable */
    int     nlen;    /* length of this vector */
    void   *oldval;  /* 0 or address where to store old value */
    size_t *oldlenp; /* available room for old value,
                        overwritten by actual size of old value */
    void   *newval;  /* 0 or address of new value */
    size_t  newlen;  /* size of new value */
};
.fi
.in
.PP
This call does a search in a tree structure, possibly resembling
a directory tree under
.IR /proc/sys ,
and if the requested item is found calls some appropriate routine
to read or modify the value.
.SH RETURN VALUE
Upon successful completion,
.BR _sysctl ()
returns 0.
Otherwise, a value of \-1 is returned and
.I errno
is set to indicate the error.
.SH ERRORS
.TP
.B EFAULT
The invocation asked for the previous value by setting
.I oldval
non-NULL, but allowed zero room in
.IR oldlenp .
.TP
.B ENOTDIR
.I name
was not found.
.TP
.BR EACCES ", " EPERM
No search permission for one of the encountered "directories",
or no read permission where
.I oldval
was nonzero, or no write permission where
.I newval
was nonzero.
.SH CONFORMING TO
This call is Linux-specific, and should not be used in programs
intended to be portable.
A
.BR sysctl ()
call has been present in Linux since version 1.3.57.
It originated in
4.4BSD.
Only Linux has the
.I /proc/sys
mirror, and the object naming schemes differ between Linux and 4.4BSD,
but the declaration of the
.BR sysctl ()
function is the same in both.
.SH NOTES
Glibc does not provide a wrapper for this system call; call it using
.BR syscall (2).
Or rather...
.I don't
call it:
use of this system call has long been discouraged,
and it is so unloved that
\fBit is likely to disappear in a future kernel version\fP.
.\" See http://lwn.net/Articles/247243/
Since Linux 2.6.24,
uses of this system call result in warnings in the kernel log.
.\" Though comments in suggest that it is needed by old glibc binaries,
.\" so maybe it's not going away.
Remove it from your programs now; use the
.I /proc/sys
interface instead.

This system call is available only if the kernel was configured with the
.B CONFIG_SYSCTL_SYSCALL
option.
.SH BUGS
The object names vary between kernel versions,
making this system call worthless for applications.
.PP
Not all available objects are properly documented.
.PP
It is not yet possible to change operating system by writing to
.IR /proc/sys/kernel/ostype .
.SH EXAMPLE
.nf
#define _GNU_SOURCE
#include <unistd.h>
#include <sys/syscall.h>
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <linux/sysctl.h>

int _sysctl(struct __sysctl_args *args );

#define OSNAMESZ 100

int
main(void)
{
    struct __sysctl_args args;
    char osname[OSNAMESZ];
    size_t osnamelth;
    int name[] = { CTL_KERN, KERN_OSTYPE };

    memset(&args, 0, sizeof(struct __sysctl_args));
    args.name = name;
    args.nlen = sizeof(name)/sizeof(name[0]);
    args.oldval = osname;
    args.oldlenp = &osnamelth;

    osnamelth = sizeof(osname);

    if (syscall(SYS__sysctl, &args) == \-1) {
        perror("_sysctl");
        exit(EXIT_FAILURE);
    }
    printf("This machine is running %*s\\n", osnamelth, osname);
    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR proc (5)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 1995, Thomas K. Dyas <tdyas@eden.rutgers.edu>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Created   Wed Aug  9 1995     Thomas K. Dyas <tdyas@eden.rutgers.edu>
.\"
.TH SYSFS 2 2010-06-27 "Linux" "Linux Programmer's Manual"
.SH NAME
sysfs \- get filesystem type information
.SH SYNOPSIS
.BI "int sysfs(int " option ", const char *" fsname );

.BI "int sysfs(int " option ", unsigned int " fs_index ", char *" buf );

.BI "int sysfs(int " option );
.SH DESCRIPTION
.BR sysfs ()
returns information about the filesystem types currently present in
the kernel.
The specific form of the
.BR sysfs ()
call and the information returned depends on the
.I option
in effect:
.TP 3
.B 1
Translate the filesystem identifier string
.I fsname
into a filesystem type index.
.TP
.B 2
Translate the filesystem type index
.I fs_index
into a null-terminated filesystem identifier string.
This string will
be written to the buffer pointed to by
.IR buf .
Make sure that
.I buf
has enough space to accept the string.
.TP
.B 3
Return the total number of filesystem types currently present in the
kernel.
.PP
The numbering of the filesystem type indexes begins with zero.
.SH RETURN VALUE
On success,
.BR sysfs ()
returns the filesystem index for option
.BR 1 ,
zero for option
.BR 2 ,
and the number of currently configured filesystems for option
.BR 3 .
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EFAULT
.RI "Either " fsname " or " buf
is outside your accessible address space.
.TP
.B EINVAL
.I fsname
is not a valid filesystem type identifier;
.I fs_index
is out-of-bounds;
.I option
is invalid.
.SH CONFORMING TO
SVr4.
.SH NOTES
This System-V derived system call is obsolete; don't use it.
On systems with
.IR /proc ,
the same information can be obtained via
.IR /proc/filesystems ;
use that interface instead.
.SH BUGS
There is no libc or glibc support.
There is no way to guess how large \fIbuf\fP should be.
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 1993 by Dan Miner (dminer@nyx.cs.du.edu)
.\"
.\" %%%LICENSE_START(FREELY_REDISTRIBUTABLE)
.\"  Permission is granted to freely distribute or modify this file
.\"  for the purpose of improving Linux or its documentation efforts.
.\"  If you modify this file, please put a date stamp and HOW you
.\"  changed this file.  Thanks.   -DM
.\" %%%LICENSE_END
.\"
.\" Modified Sat Jul 24 12:35:12 1993 by Rik Faith <faith@cs.unc.edu>
.\" Modified Tue Oct 22 22:29:51 1996 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified Mon Aug 25 16:06:11 1997 by Nicolás Lichtmaier <nick@debian.org>
.\"
.TH SYSINFO 2 2014-08-19 "Linux" "Linux Programmer's Manual"
.SH NAME
sysinfo \- returns information on overall system statistics
.SH SYNOPSIS
.B #include <sys/sysinfo.h>
.sp
.BI "int sysinfo(struct sysinfo *" info );
.SH DESCRIPTION
Until Linux 2.3.16,
.BR sysinfo ()
used to return information in the following structure:

.nf
.in +4n
struct sysinfo {
    long uptime;             /* Seconds since boot */
    unsigned long loads[3];  /* 1, 5, and 15 minute load averages */
    unsigned long totalram;  /* Total usable main memory size */
    unsigned long freeram;   /* Available memory size */
    unsigned long sharedram; /* Amount of shared memory */
    unsigned long bufferram; /* Memory used by buffers */
    unsigned long totalswap; /* Total swap space size */
    unsigned long freeswap;  /* swap space still available */
    unsigned short procs;    /* Number of current processes */
    char _f[22];             /* Pads structure to 64 bytes */
};
.in
.fi
.PP
and the sizes were given in bytes.

Since Linux 2.3.23 (i386), 2.3.48
(all architectures) the structure is:

.nf
.in +4n
struct sysinfo {
    long uptime;             /* Seconds since boot */
    unsigned long loads[3];  /* 1, 5, and 15 minute load averages */
    unsigned long totalram;  /* Total usable main memory size */
    unsigned long freeram;   /* Available memory size */
    unsigned long sharedram; /* Amount of shared memory */
    unsigned long bufferram; /* Memory used by buffers */
    unsigned long totalswap; /* Total swap space size */
    unsigned long freeswap;  /* swap space still available */
    unsigned short procs;    /* Number of current processes */
    unsigned long totalhigh; /* Total high memory size */
    unsigned long freehigh;  /* Available high memory size */
    unsigned int mem_unit;   /* Memory unit size in bytes */
    char _f[20\-2*sizeof(long)\-sizeof(int)]; /* Padding to 64 bytes */
};
.in
.fi
.PP
and the sizes are given as multiples of \fImem_unit\fP bytes.

.BR sysinfo ()
provides a simple way of getting overall system statistics.
This is more
portable than reading \fI/dev/kmem\fP.
.SH RETURN VALUE
On success, zero is returned.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EFAULT
pointer to \fIstruct\ sysinfo\fP is invalid
.SH VERSIONS
The Linux kernel has a
.BR sysinfo ()
system call since 0.98.pl6.
.SH CONFORMING TO
This function is Linux-specific, and should not be used in programs
intended to be portable.
.SH SEE ALSO
.BR proc (5)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
'\" t
.\" Copyright (C) 1995 Andries Brouwer (aeb@cwi.nl)
.\" and Copyright (C) 2012, 2014 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Written 11 June 1995 by Andries Brouwer <aeb@cwi.nl>
.\" 2008-02-15, Jeremy Kerr <jk@ozlabs.org>
.\"     Add info on command type 10; add details on types 6, 7, 8, & 9.
.\" 2008-02-15, Michael Kerrisk <mtk.manpages@gmail.com>
.\"     Update LOG_BUF_LEN details; update RETURN VALUE section.
.\"
.TH SYSLOG 2  2015-05-07 "Linux" "Linux Programmer's Manual"
.SH NAME
syslog, klogctl \- read and/or clear kernel message ring buffer;
set console_loglevel
.SH SYNOPSIS
.nf
.BI "int syslog(int " type ", char *" bufp ", int " len );
.B  "                /* No wrapper provided in glibc */"
.sp
/* The glibc interface */
.br
.B "#include <sys/klog.h>"
.sp
.BI "int klogctl(int " type ", char *" bufp ", int " len );
.fi
.SH DESCRIPTION
.IR Note :
Probably, you are looking for the C library function
.BR syslog (),
which talks to
.BR syslogd (8);
see
.BR syslog (3)
for details.

This page describes the kernel
.BR syslog ()
system call, which is used to control the kernel
.IR printk ()
buffer; the glibc wrapper function for the system call is called
.BR klogctl ().
.SS The kernel log buffer
The kernel has a cyclic buffer of length
.B LOG_BUF_LEN
in which messages given as arguments to the kernel function
.BR printk ()
are stored (regardless of their log level).
In early kernels,
.B LOG_BUF_LEN
had the value 4096;
from kernel 1.3.54, it was 8192;
from kernel 2.1.113, it was 16384;
since kernel 2.4.23/2.6, the value is a kernel configuration option
.RB ( CONFIG_LOG_BUF_SHIFT ,
default value dependent on the architecture).
.\" Under "General setup" ==> "Kernel log buffer size"
.\" For 2.6, precisely the option seems to have appeared in 2.5.55.
Since Linux 2.6.6, the size can be queried with command type 10 (see below).
.SS Commands
The \fItype\fP argument determines the action taken by this function.
The list below specifies the values for
.IR type .
The symbolic names are defined in the kernel source,
but are not exported to user space;
you will either need to use the numbers, or define the names yourself.
.TP
.BR SYSLOG_ACTION_CLOSE " (0)"
Close the log.
Currently a NOP.
.TP
.BR SYSLOG_ACTION_OPEN " (1)"
Open the log.
Currently a NOP.
.TP
.BR SYSLOG_ACTION_READ " (2)"
Read from the log.
The call
waits until the kernel log buffer is nonempty, and then reads
at most \fIlen\fP bytes into the buffer pointed to by
.IR bufp .
The call returns the number of bytes read.
Bytes read from the log disappear from the log buffer:
the information can be read only once.
This is the function executed by the kernel when a user program reads
.IR /proc/kmsg .
.TP
.BR SYSLOG_ACTION_READ_ALL " (3)"
Read all messages remaining in the ring buffer,
placing them in the buffer pointed to by
.IR bufp .
The call reads the last \fIlen\fP
bytes from the log buffer (nondestructively),
but will not read more than was written into the buffer since the
last "clear ring buffer" command (see command 5 below)).
The call returns the number of bytes read.
.TP
.BR SYSLOG_ACTION_READ_CLEAR " (4)"
Read and clear all messages remaining in the ring buffer.
The call does precisely the same as for a
.I type
of 3, but also executes the "clear ring buffer" command.
.TP
.BR SYSLOG_ACTION_CLEAR " (5)"
The call executes just the "clear ring buffer" command.
The
.I bufp
and
.I len
arguments are ignored.
.IP
This command does not really clear the ring buffer.
Rather, it sets a kernel bookkeeping variable that
determines the results returned by commands 3
.RB ( SYSLOG_ACTION_READ_ALL )
and 4
.RB ( SYSLOG_ACTION_READ_CLEAR ).
This command has no effect on commands 2
.RB ( SYSLOG_ACTION_READ )
and 9
.RB ( SYSLOG_ACTION_SIZE_UNREAD ).
.TP
.BR SYSLOG_ACTION_CONSOLE_OFF " (6)"
The command saves the current value of
.I console_loglevel
and then sets
.I console_loglevel
to
.IR minimum_console_loglevel ,
so that no messages are printed to the console.
Before Linux 2.6.32,
.\" commit 1aaad49e856ce41adc07d8ae0c8ef35fc4483245
the command simply sets
.I console_loglevel
to
.IR minimum_console_loglevel .
See the discussion of
.IR /proc/sys/kernel/printk ,
below.

The
.I bufp
and
.I len
arguments are ignored.
.TP
.BR SYSLOG_ACTION_CONSOLE_ON " (7)"
If a previous
.B SYSLOG_ACTION_CONSOLE_OFF
command has been performed,
this command restores
.I console_loglevel
to the value that was saved by that command.
Before Linux 2.6.32,
.\" commit 1aaad49e856ce41adc07d8ae0c8ef35fc4483245
this command simply sets
.I console_loglevel
to
.IR default_console_loglevel .
See the discussion of
.IR /proc/sys/kernel/printk ,
below.

The
.I bufp
and
.I len
arguments are ignored.
.TP
.BR SYSLOG_ACTION_CONSOLE_LEVEL " (8)"
The call sets
.I console_loglevel
to the value given in
.IR len ,
which must be an integer between 1 and 8 (inclusive).
The kernel silently enforces a minimum value of
.IR minimum_console_loglevel
for
.IR len .
See the
.IR "log level"
section for details.
The
.I bufp
argument is ignored.
.TP
.BR SYSLOG_ACTION_SIZE_UNREAD " (9) (since Linux 2.4.10)"
The call
returns the number of bytes currently available to be read
from the kernel log buffer via command 2
.RB ( SYSLOG_ACTION_READ ).
The
.I bufp
and
.I len
arguments are ignored.
.TP
.BR SYSLOG_ACTION_SIZE_BUFFER " (10) (since Linux 2.6.6)"
This command returns the total size of the kernel log buffer.
The
.I bufp
and
.I len
arguments are ignored.
.PP
All commands except 3 and 10 require privilege.
In Linux kernels before 2.6.37,
command types 3 and 10 are allowed to unprivileged processes;
since Linux 2.6.37,
these commands are allowed to unprivileged processes only if
.IR /proc/sys/kernel/dmesg_restrict
has the value 0.
Before Linux 2.6.37, "privileged" means that the caller has the
.BR CAP_SYS_ADMIN
capability.
Since Linux 2.6.37,
"privileged" means that the caller has either the
.BR CAP_SYS_ADMIN
capability (now deprecated for this purpose) or the (new)
.BR CAP_SYSLOG
capability.
.\"
.\"
.SS /proc/sys/kernel/printk
.I /proc/sys/kernel/printk
is a writable file containing four integer values that influence kernel
.I printk()
behavior when printing or logging error messages.
The four values are:
.TP
.I console_loglevel
Only messages with a log level lower than this value will
be printed to the console.
The default value for this field is
.B DEFAULT_CONSOLE_LOGLEVEL
(7), but it is set to
4 if the kernel command line contains the word "quiet", \" since Linux 2.4
10 if the kernel command line contains the word "debug",
and to 15 in case
of a kernel fault (the 10 and 15 are just silly, and equivalent to 8).
The value of
.IR console_loglevel
can be set (to a value in the range 1-8) by a
.BR syslog ()
call with a
.I type
of 8.
.TP
.I default_message_loglevel
This value will be used as the log level for
.IR printk()
messages that do not have an explicit level.
Up to and including Linux 2.6.38,
the hard-coded default value for this field was 4
.RB ( KERN_WARNING );
since Linux 2.6.39,
.\" commit 5af5bcb8d37f99ba415a1adc6da71051b84f93a5
the default value is a defined by the kernel configuration option
.BR CONFIG_DEFAULT_MESSAGE_LOGLEVEL ,
which defaults to 4.
.TP
.I minimum_console_loglevel
The value in this field is the minimum value to which
.I console_loglevel
can be set.
.TP
.I default_console_loglevel
This is the default value for
.IR console_loglevel .
.\"
.\"
.SS The log level
Every
.IR printk ()
message has its own log level.
If the log level is not explicitly specified as part of the message,
it defaults to
.IR default_message_loglevel .
The conventional meaning of the log level is as follows:

.TS
lB lB lB
lB c l.
Kernel constant	Level value	Meaning
KERN_EMERG	0	System is unusable
KERN_ALERT	1	Action must be taken immediately
KERN_CRIT	2	Critical conditions
KERN_ERR	3	Error conditions
KERN_WARNING	4	Warning conditions
KERN_NOTICE	5	Normal but significant condition
KERN_INFO	6	Informational
KERN_DEBUG	7	Debug-level messages
.TE

The kernel
.IR printk()
routine will print a message on the
console only if it has a log level less than the value of
.IR console_loglevel .
.SH RETURN VALUE
For \fItype\fP equal to 2, 3, or 4, a successful call to
.BR syslog ()
returns the number
of bytes read.
For \fItype\fP 9,
.BR syslog ()
returns the number of bytes currently
available to be read on the kernel log buffer.
For \fItype\fP 10,
.BR syslog ()
returns the total size of the kernel log buffer.
For other values of \fItype\fP, 0 is returned on success.

In case of error, \-1 is returned,
and \fIerrno\fP is set to indicate the error.
.SH ERRORS
.TP
.B EINVAL
Bad arguments (e.g.,
bad
.IR type ;
or for
.I type
2, 3, or 4,
.I buf
is NULL,
or
.I len
is less than zero; or for
.I type
8, the
.I level
is outside the range 1 to 8).
.TP
.B ENOSYS
This
.BR syslog ()
system call is not available, because the kernel was compiled with the
.BR CONFIG_PRINTK
kernel-configuration option disabled.
.TP
.B EPERM
An attempt was made to change
.I console_loglevel
or clear the kernel
message ring buffer by a process without sufficient privilege
(more precisely: without the
.B CAP_SYS_ADMIN
or
.BR CAP_SYSLOG
capability).
.TP
.B ERESTARTSYS
System call was interrupted by a signal; nothing was read.
(This can be seen only during a trace.)
.SH CONFORMING TO
This system call is Linux-specific and should not be used in programs
intended to be portable.
.SH NOTES
From the very start, people noted that it is unfortunate that
a system call and a library routine of the same name are entirely
different animals.
.\" In libc4 and libc5 the number of this call was defined by
.\" .BR SYS_klog .
.\" In glibc 2.0 the syscall is baptized
.\" .BR klogctl ().
.SH SEE ALSO
.BR dmesg (1),
.BR syslog (3),
.BR capabilities (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" This manpage is Copyright (C) 2006 Jens Axboe
.\" and Copyright (C) 2006 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH TEE 2 2014-12-31 "Linux" "Linux Programmer's Manual"
.SH NAME
tee \- duplicating pipe content
.SH SYNOPSIS
.nf
.BR "#define _GNU_SOURCE" "         /* See feature_test_macros(7) */"
.B #include <fcntl.h>

.BI "ssize_t tee(int " fd_in ", int " fd_out ", size_t " len \
", unsigned int " flags );
.fi
.\" Return type was long before glibc 2.7
.SH DESCRIPTION
.\" Example programs http://brick.kernel.dk/snaps
.\"
.\"
.\" add a "tee(in, out1, out2)" system call that duplicates the pages
.\" (again, incrementing their reference count, not copying the data) from
.\" one pipe to two other pipes.
.BR tee ()
duplicates up to
.I len
bytes of data from the pipe referred to by the file descriptor
.I fd_in
to the pipe referred to by the file descriptor
.IR fd_out .
It does not consume the data that is duplicated from
.IR fd_in ;
therefore, that data can be copied by a subsequent
.BR splice (2).

.I flags
is a series of modifier flags, which share the name space with
.BR splice (2)
and
.BR vmsplice (2):
.TP 1.9i
.B SPLICE_F_MOVE
Currently has no effect for
.BR tee ();
see
.BR splice (2).
.TP
.B SPLICE_F_NONBLOCK
Do not block on I/O; see
.BR splice (2)
for further details.
.TP
.B SPLICE_F_MORE
Currently has no effect for
.BR tee (),
but may be implemented in the future; see
.BR splice (2).
.TP
.B SPLICE_F_GIFT
Unused for
.BR tee ();
see
.BR vmsplice (2).
.SH RETURN VALUE
Upon successful completion,
.BR tee ()
returns the number of bytes that were duplicated between the input
and output.
A return value of 0 means that there was no data to transfer,
and it would not make sense to block, because there are no
writers connected to the write end of the pipe referred to by
.IR fd_in .

On error,
.BR tee ()
returns \-1 and
.I errno
is set to indicate the error.
.SH ERRORS
.TP
.B EAGAIN
.B SPLICE_F_NONBLOCK
was specified in
.IR flags ,
and the operation would block.
.TP
.B EINVAL
.I fd_in
or
.I fd_out
does not refer to a pipe; or
.I fd_in
and
.I fd_out
refer to the same pipe.
.TP
.B ENOMEM
Out of memory.
.SH VERSIONS
The
.BR tee ()
system call first appeared in Linux 2.6.17;
library support was added to glibc in version 2.5.
.SH CONFORMING TO
This system call is Linux-specific.
.SH NOTES
Conceptually,
.BR tee ()
copies the data between the two pipes.
In reality no real data copying takes place though:
under the covers,
.BR tee ()
assigns data in the output by merely grabbing
a reference to the input.
.SH EXAMPLE
The example below implements a basic
.BR tee (1)
program using the
.BR tee ()
system call.
Here is an example of its use:

.in +4n
.nf
$ \fBdate |./a.out out.log | cat\fP
Tue Oct 28 10:06:00 CET 2014
$ \fBcat out.log\fP
Tue Oct 28 10:06:00 CET 2014
.fi
.in
.SS Program source
.nf

#define _GNU_SOURCE
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <limits.h>

int
main(int argc, char *argv[])
{
    int fd;
    int len, slen;

    if (argc != 2) {
        fprintf(stderr, "Usage: %s <file>\\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    fd = open(argv[1], O_WRONLY | O_CREAT | O_TRUNC, 0644);
    if (fd == \-1) {
        perror("open");
        exit(EXIT_FAILURE);
    }

    do {
        /*
         * tee stdin to stdout.
         */
        len = tee(STDIN_FILENO, STDOUT_FILENO,
                  INT_MAX, SPLICE_F_NONBLOCK);

        if (len < 0) {
            if (errno == EAGAIN)
                continue;
            perror("tee");
            exit(EXIT_FAILURE);
        } else
            if (len == 0)
                break;

        /*
         * Consume stdin by splicing it to a file.
         */
        while (len > 0) {
            slen = splice(STDIN_FILENO, NULL, fd, NULL,
                          len, SPLICE_F_MOVE);
            if (slen < 0) {
                perror("splice");
                break;
            }
            len \-= slen;
        }
    } while (1);

    close(fd);
    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR splice (2),
.BR vmsplice (2)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1992 Drew Eckhardt (drew@cs.colorado.edu), March 28, 1992
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified by Michael Haardt <michael@moria.de>
.\" Modified Sat Jul 24 14:13:40 1993 by Rik Faith <faith@cs.unc.edu>
.\" Additions by Joseph S. Myers <jsm28@cam.ac.uk>, 970909
.\"
.TH TIME 2 2011-09-09 "Linux" "Linux Programmer's Manual"
.SH NAME
time \- get time in seconds
.SH SYNOPSIS
.B #include <time.h>
.sp
.BI "time_t time(time_t *" t );
.SH DESCRIPTION
.BR time ()
returns the time as the number of seconds since the
Epoch, 1970-01-01 00:00:00 +0000 (UTC).

If
.I t
is non-NULL,
the return value is also stored in the memory pointed to by
.IR t .
.SH RETURN VALUE
On success, the value of time in seconds since the Epoch is returned.
On error, \fI((time_t)\ \-1)\fP is returned, and \fIerrno\fP is set
appropriately.
.SH ERRORS
.TP
.B EFAULT
.I t
points outside your accessible address space.
.SH CONFORMING TO
SVr4, 4.3BSD, C89, C99, POSIX.1-2001.
.\" .br
.\" Under 4.3BSD, this call is obsoleted by
.\" .BR gettimeofday (2).
POSIX does not specify any error conditions.
.SH NOTES
POSIX.1 defines
.I seconds since the Epoch
using a formula that approximates the number of seconds between a
specified time and the Epoch.
This formula takes account of the facts that
all years that are evenly divisible by 4 are leap years,
but years that are evenly divisible by 100 are not leap years
unless they are also evenly divisible by 400,
in which case they are leap years.
This value is not the same as the actual number of seconds between the time
and the Epoch, because of leap seconds and because system clocks are not
required to be synchronized to a standard reference.
The intention is that the interpretation of seconds since the Epoch values be
consistent; see POSIX.1-2008 Rationale A.4.15 for further rationale.
.SH SEE ALSO
.BR date (1),
.BR gettimeofday (2),
.BR ctime (3),
.BR ftime (3),
.BR time (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2009 Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" FIXME Linux 2.6.39 adds CLOCK_BOOTTIME, which needs be documented
.\" Does this also affect timerfd_create()?
.\"
.\" FIXME Linux 3.0 adds CLOCK_BOOTTIME_ALARM and CLOCK_REALTIME_ALARM,
.\" which need be documented
.\" Does this also affect timerfd_create()?
.\"
.TH TIMER_CREATE 2 2015-04-19 Linux "Linux Programmer's Manual"
.SH NAME
timer_create \- create a POSIX per-process timer
.SH SYNOPSIS
.nf
.B  #include <signal.h>
.B  #include <time.h>

.BI "int timer_create(clockid_t " clockid ", struct sigevent *" sevp ,
.BI "                 timer_t *" timerid );
.fi

Link with \fI\-lrt\fP.
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR timer_create ():
_POSIX_C_SOURCE\ >=\ 199309L
.SH DESCRIPTION
.BR timer_create ()
creates a new per-process interval timer.
The ID of the new timer is returned in the buffer pointed to by
.IR timerid ,
which must be a non-null pointer.
This ID is unique within the process, until the timer is deleted.
The new timer is initially disarmed.

The
.I clockid
argument specifies the clock that the new timer uses to measure time.
It can be specified as one of the following values:
.TP
.B CLOCK_REALTIME
A settable system-wide real-time clock.
.TP
.B CLOCK_MONOTONIC
A nonsettable monotonically increasing clock that measures time
from some unspecified point in the past that does not change
after system startup.
.\" Note: the CLOCK_MONOTONIC_RAW clock added for clock_gettime()
.\" in 2.6.28 is not supported for POSIX timers -- mtk, Feb 2009
.TP
.BR CLOCK_PROCESS_CPUTIME_ID " (since Linux 2.6.12)"
A clock that measures (user and system) CPU time consumed by
(all of the threads in) the calling process.
.TP
.BR CLOCK_THREAD_CPUTIME_ID " (since Linux 2.6.12)"
A clock that measures (user and system) CPU time consumed by
the calling thread.
.\" The CLOCK_MONOTONIC_RAW that was added in 2.6.28 can't be used
.\" to create a timer -- mtk, Feb 2009
.PP
As well as the above values,
.I clockid
can be specified as the
.I clockid
returned by a call to
.BR clock_getcpuclockid (3)
or
.BR pthread_getcpuclockid (3).

The
.I sevp
argument points to a
.I sigevent
structure that specifies how the caller
should be notified when the timer expires.
For the definition and general details of this structure, see
.BR sigevent (7).

The
.I sevp.sigev_notify
field can have the following values:
.TP
.BR SIGEV_NONE
Don't asynchronously notify when the timer expires.
Progress of the timer can be monitored using
.BR timer_gettime (2).
.TP
.BR SIGEV_SIGNAL
Upon timer expiration, generate the signal
.I sigev_signo
for the process.
See
.BR sigevent (7)
for general details.
The
.I si_code
field of the
.I siginfo_t
structure will be set to
.BR SI_TIMER .
At any point in time,
at most one signal is queued to the process for a given timer; see
.BR timer_getoverrun (2)
for more details.
.TP
.BR SIGEV_THREAD
Upon timer expiration, invoke
.I sigev_notify_function
as if it were the start function of a new thread.
See
.BR sigevent (7)
for details.
.TP
.BR SIGEV_THREAD_ID " (Linux-specific)"
As for
.BR SIGEV_SIGNAL ,
but the signal is targeted at the thread whose ID is given in
.IR sigev_notify_thread_id ,
which must be a thread in the same process as the caller.
The
.IR sigev_notify_thread_id
field specifies a kernel thread ID, that is, the value returned by
.BR clone (2)
or
.BR gettid (2).
This flag is intended only for use by threading libraries.
.PP
Specifying
.I sevp
as NULL is equivalent to specifying a pointer to a
.I sigevent
structure in which
.I sigev_notify
is
.BR SIGEV_SIGNAL ,
.I sigev_signo
is
.BR SIGALRM ,
and
.I sigev_value.sival_int
is the timer ID.
.SH RETURN VALUE
On success,
.BR timer_create ()
returns 0, and the ID of the new timer is placed in
.IR *timerid .
On failure, \-1 is returned, and
.I errno
is set to indicate the error.
.SH ERRORS
.TP
.B EAGAIN
Temporary error during kernel allocation of timer structures.
.TP
.B EINVAL
Clock ID,
.IR sigev_notify ,
.IR sigev_signo ,
or
.IR sigev_notify_thread_id
is invalid.
.TP
.B ENOMEM
.\" glibc layer: malloc()
Could not allocate memory.
.SH VERSIONS
This system call is available since Linux 2.6.
.SH CONFORMING TO
POSIX.1-2001.
.SH NOTES
A program may create multiple interval timers using
.BR timer_create ().

Timers are not inherited by the child of a
.BR fork (2),
and are disarmed and deleted during an
.BR execve (2).

The kernel preallocates a "queued real-time signal"
for each timer created using
.BR timer_create ().
Consequently, the number of timers is limited by the
.BR RLIMIT_SIGPENDING
resource limit (see
.BR setrlimit (2)).

The timers created by
.BR timer_create ()
are commonly known as "POSIX (interval) timers".
The POSIX timers API consists of the following interfaces:
.IP * 3
.BR timer_create ():
Create a timer.
.IP *
.BR timer_settime (2):
Arm (start) or disarm (stop) a timer.
.IP *
.BR timer_gettime (2):
Fetch the time remaining until the next expiration of a timer,
along with the interval setting of the timer.
.IP *
.BR timer_getoverrun (2):
Return the overrun count for the last timer expiration.
.IP *
.BR timer_delete (2):
Disarm and delete a timer.
.PP
Since Linux 3.10, the
.IR /proc/[pid]/timers
file can be used to list the POSIX timers for the process with PID
.IR pid .
See
.BR proc (5)
for further information.
.\"
.SS C library/kernel ABI differences
Part of the implementation of the POSIX timers API is provided by glibc.
.\" See nptl/sysdeps/unix/sysv/linux/timer_create.c
In particular:
.IP * 3
Much of the functionality for
.BR SIGEV_THREAD
is implemented within glibc, rather than the kernel.
(This is necessarily so,
since the thread involved in handling the notification is one
that must be managed by the C library POSIX threads implementation.)
Although the notification delivered to the process is via a thread,
internally the NPTL implementation uses a
.I sigev_notify
value of
.BR SIGEV_THREAD_ID
along with a real-time signal that is reserved by the implementation (see
.BR nptl (7)).
.IP *
The implementation of the default case where
.I evp
is NULL is handled inside glibc,
which invokes the underlying system call with a suitably populated
.I sigevent
structure.
.IP *
The timer IDs presented at user level are maintained by glibc,
which maps these IDs to the timer IDs employed by the kernel.
.\" See the glibc source file kernel-posix-timers.h for the structure
.\" that glibc uses to map user-space timer IDs to kernel timer IDs
.\" The kernel-level timer ID is exposed via siginfo.si_tid.
.PP
The POSIX timers system calls first appeared in Linux 2.6.
Prior to this,
glibc provided an incomplete user-space implementation
.RB ( CLOCK_REALTIME
timers only) using POSIX threads,
and in glibc versions before 2.17,
.\" glibc commit 93a78ac437ba44f493333d7e2a4b0249839ce460
the implementation falls back to this technique on systems
running pre-2.6 Linux kernels.
.SH EXAMPLE
The program below takes two arguments: a sleep period in seconds,
and a timer frequency in nanoseconds.
The program establishes a handler for the signal it uses for the timer,
blocks that signal,
creates and arms a timer that expires with the given frequency,
sleeps for the specified number of seconds,
and then unblocks the timer signal.
Assuming that the timer expired at least once while the program slept,
the signal handler will be invoked,
and the handler displays some information about the timer notification.
The program terminates after one invocation of the signal handler.

In the following example run, the program sleeps for 1 second,
after creating a timer that has a frequency of 100 nanoseconds.
By the time the signal is unblocked and delivered,
there have been around ten million overruns.
.in +4n
.nf

$ \fB./a.out 1 100\fP
Establishing handler for signal 34
Blocking signal 34
timer ID is 0x804c008
Sleeping for 1 seconds
Unblocking signal 34
Caught signal 34
    sival_ptr = 0xbfb174f4;     *sival_ptr = 0x804c008
    overrun count = 10004886
.fi
.in
.SS Program source
\&
.nf
#include <stdlib.h>
#include <unistd.h>
#include <stdio.h>
#include <signal.h>
#include <time.h>

#define CLOCKID CLOCK_REALTIME
#define SIG SIGRTMIN

#define errExit(msg)    do { perror(msg); exit(EXIT_FAILURE); \\
                        } while (0)

static void
print_siginfo(siginfo_t *si)
{
    timer_t *tidp;
    int or;

    tidp = si\->si_value.sival_ptr;

    printf("    sival_ptr = %p; ", si\->si_value.sival_ptr);
    printf("    *sival_ptr = 0x%lx\\n", (long) *tidp);

    or = timer_getoverrun(*tidp);
    if (or == \-1)
        errExit("timer_getoverrun");
    else
        printf("    overrun count = %d\\n", or);
}

static void
handler(int sig, siginfo_t *si, void *uc)
{
    /* Note: calling printf() from a signal handler is not
       strictly correct, since printf() is not async\-signal\-safe;
       see signal(7) */

    printf("Caught signal %d\\n", sig);
    print_siginfo(si);
    signal(sig, SIG_IGN);
}

int
main(int argc, char *argv[])
{
    timer_t timerid;
    struct sigevent sev;
    struct itimerspec its;
    long long freq_nanosecs;
    sigset_t mask;
    struct sigaction sa;

    if (argc != 3) {
        fprintf(stderr, "Usage: %s <sleep\-secs> <freq\-nanosecs>\\n",
                argv[0]);
        exit(EXIT_FAILURE);
    }

    /* Establish handler for timer signal */

    printf("Establishing handler for signal %d\\n", SIG);
    sa.sa_flags = SA_SIGINFO;
    sa.sa_sigaction = handler;
    sigemptyset(&sa.sa_mask);
    if (sigaction(SIG, &sa, NULL) == \-1)
        errExit("sigaction");

    /* Block timer signal temporarily */

    printf("Blocking signal %d\\n", SIG);
    sigemptyset(&mask);
    sigaddset(&mask, SIG);
    if (sigprocmask(SIG_SETMASK, &mask, NULL) == \-1)
        errExit("sigprocmask");

    /* Create the timer */

    sev.sigev_notify = SIGEV_SIGNAL;
    sev.sigev_signo = SIG;
    sev.sigev_value.sival_ptr = &timerid;
    if (timer_create(CLOCKID, &sev, &timerid) == \-1)
        errExit("timer_create");

    printf("timer ID is 0x%lx\\n", (long) timerid);

    /* Start the timer */

    freq_nanosecs = atoll(argv[2]);
    its.it_value.tv_sec = freq_nanosecs / 1000000000;
    its.it_value.tv_nsec = freq_nanosecs % 1000000000;
    its.it_interval.tv_sec = its.it_value.tv_sec;
    its.it_interval.tv_nsec = its.it_value.tv_nsec;

    if (timer_settime(timerid, 0, &its, NULL) == \-1)
         errExit("timer_settime");

    /* Sleep for a while; meanwhile, the timer may expire
       multiple times */

    printf("Sleeping for %d seconds\\n", atoi(argv[1]));
    sleep(atoi(argv[1]));

    /* Unlock the timer signal, so that timer notification
       can be delivered */

    printf("Unblocking signal %d\\n", SIG);
    if (sigprocmask(SIG_UNBLOCK, &mask, NULL) == \-1)
        errExit("sigprocmask");

    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.ad l
.nh
.BR clock_gettime (2),
.BR setitimer (2),
.BR timer_delete (2),
.BR timer_getoverrun (2),
.BR timer_settime (2),
.BR timerfd_create (2),
.BR clock_getcpuclockid (3),
.BR pthread_getcpuclockid (3),
.BR pthreads (7),
.BR sigevent (7),
.BR signal (7),
.BR time (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2009 Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH TIMER_DELETE 2 2009-02-20 Linux "Linux Programmer's Manual"
.SH NAME
timer_delete \- delete a POSIX per-process timer
.SH SYNOPSIS
.nf
.B  #include <time.h>

.BI "int timer_delete(timer_t " timerid );
.fi

Link with \fI\-lrt\fP.
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR timer_delete ():
_POSIX_C_SOURCE\ >=\ 199309L
.SH DESCRIPTION
.BR timer_delete ()
deletes the timer whose ID is given in
.IR timerid .
If the timer was armed at the time of this call,
it is disarmed before being deleted.
The treatment of any pending signal generated by the deleted timer
is unspecified.
.SH RETURN VALUE
On success,
.BR timer_delete ()
returns 0.
On failure, \-1 is returned, and
.I errno
is set to indicate the error.
.SH ERRORS
.TP
.B EINVAL
.I timerid
is not a valid timer ID.
.SH VERSIONS
This system call is available since Linux 2.6.
.SH CONFORMING TO
POSIX.1-2001.
.SH SEE ALSO
.BR clock_gettime (2),
.BR timer_create (2),
.BR timer_getoverrun (2),
.BR timer_settime (2),
.BR time (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2008 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(GPLv2+_SW_3_PARA)
.\" This program is free software; you can redistribute it and/or modify
.\" it under the terms of the GNU General Public License as published by
.\" the Free Software Foundation; either version 2 of the License, or
.\" (at your option) any later version.
.\"
.\" This program is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.\" FIXME Linux 3.0: timerfd_settime() adds a TFD_TIMER_CANCEL_ON_SET flag;
.\" This flag needs to documented.
.\"
.TH TIMERFD_CREATE 2 2015-04-19 Linux "Linux Programmer's Manual"
.SH NAME
timerfd_create, timerfd_settime, timerfd_gettime \-
timers that notify via file descriptors
.SH SYNOPSIS
.nf
.B #include <sys/timerfd.h>
.sp
.BI "int timerfd_create(int " clockid ", int " flags );
.sp
.BI "int timerfd_settime(int " fd ", int " flags ,
.BI "                    const struct itimerspec *" new_value ,
.BI "                    struct itimerspec *" old_value );
.sp
.BI "int timerfd_gettime(int " fd ", struct itimerspec *" curr_value );
.fi
.SH DESCRIPTION
These system calls create and operate on a timer
that delivers timer expiration notifications via a file descriptor.
They provide an alternative to the use of
.BR setitimer (2)
or
.BR timer_create (2),
with the advantage that the file descriptor may be monitored by
.BR select (2),
.BR poll (2),
and
.BR epoll (7).

The use of these three system calls is analogous to the use of
.BR timer_create (2),
.BR timer_settime (2),
and
.BR timer_gettime (2).
(There is no analog of
.BR timer_getoverrun (2),
since that functionality is provided by
.BR read (2),
as described below.)
.\"
.SS timerfd_create()
.BR timerfd_create ()
creates a new timer object,
and returns a file descriptor that refers to that timer.
The
.I clockid
argument specifies the clock that is used to mark the progress
of the timer, and must be either
.B CLOCK_REALTIME
or
.BR CLOCK_MONOTONIC .
.\" FIXME
.\" Additional clocks are now supported:
.\" CLOCK_REALTIME_ALARM and CLOCK_BOOTTIME_ALARM
.\"    Since Linux 3.11, commit 11ffa9d6065f344a9bd769a2452f26f2f671e5f8
.\" CLOCK_BOOTTIME
.\"    Since Linux 3.15, commit 4a2378a943f09907fb1ae35c15de917f60289c14
.B CLOCK_REALTIME
is a settable system-wide clock.
.B CLOCK_MONOTONIC
is a nonsettable clock that is not affected
by discontinuous changes in the system clock
(e.g., manual changes to system time).
The current value of each of these clocks can be retrieved using
.BR clock_gettime (2).

Starting with Linux 2.6.27, the following values may be bitwise ORed in
.IR flags
to change the behavior of
.BR timerfd_create ():
.TP 14
.B TFD_NONBLOCK
Set the
.BR O_NONBLOCK
file status flag on the new open file description.
Using this flag saves extra calls to
.BR fcntl (2)
to achieve the same result.
.TP
.B TFD_CLOEXEC
Set the close-on-exec
.RB ( FD_CLOEXEC )
flag on the new file descriptor.
See the description of the
.B O_CLOEXEC
flag in
.BR open (2)
for reasons why this may be useful.
.PP
In Linux versions up to and including 2.6.26,
.I flags
must be specified as zero.
.SS timerfd_settime()
.BR timerfd_settime ()
arms (starts) or disarms (stops)
the timer referred to by the file descriptor
.IR fd .

The
.I new_value
argument specifies the initial expiration and interval for the timer.
The
.I itimer
structure used for this argument contains two fields,
each of which is in turn a structure of type
.IR timespec :
.in +4n
.nf

struct timespec {
    time_t tv_sec;                /* Seconds */
    long   tv_nsec;               /* Nanoseconds */
};

struct itimerspec {
    struct timespec it_interval;  /* Interval for periodic timer */
    struct timespec it_value;     /* Initial expiration */
};
.fi
.in
.PP
.I new_value.it_value
specifies the initial expiration of the timer,
in seconds and nanoseconds.
Setting either field of
.I new_value.it_value
to a nonzero value arms the timer.
Setting both fields of
.I new_value.it_value
to zero disarms the timer.

Setting one or both fields of
.I new_value.it_interval
to nonzero values specifies the period, in seconds and nanoseconds,
for repeated timer expirations after the initial expiration.
If both fields of
.I new_value.it_interval
are zero, the timer expires just once, at the time specified by
.IR new_value.it_value .

The
.I flags
argument is either 0, to start a relative timer
.RI ( new_value.it_value
specifies a time relative to the current value of the clock specified by
.IR clockid ),
or
.BR TFD_TIMER_ABSTIME ,
to start an absolute timer
.RI ( new_value.it_value
specifies an absolute time for the clock specified by
.IR clockid ;
that is, the timer will expire when the value of that
clock reaches the value specified in
.IR new_value.it_value ).

If the
.I old_value
argument is not NULL, then the
.I itimerspec
structure that it points to is used to return the setting of the timer
that was current at the time of the call;
see the description of
.BR timerfd_gettime ()
following.
.\"
.SS timerfd_gettime()
.BR timerfd_gettime ()
returns, in
.IR curr_value ,
an
.IR itimerspec
structure that contains the current setting of the timer
referred to by the file descriptor
.IR fd .

The
.I it_value
field returns the amount of time
until the timer will next expire.
If both fields of this structure are zero,
then the timer is currently disarmed.
This field always contains a relative value, regardless of whether the
.BR TFD_TIMER_ABSTIME
flag was specified when setting the timer.

The
.I it_interval
field returns the interval of the timer.
If both fields of this structure are zero,
then the timer is set to expire just once, at the time specified by
.IR curr_value.it_value .
.SS Operating on a timer file descriptor
The file descriptor returned by
.BR timerfd_create ()
supports the following operations:
.TP
.BR read (2)
If the timer has already expired one or more times since
its settings were last modified using
.BR timerfd_settime (),
or since the last successful
.BR read (2),
then the buffer given to
.BR read (2)
returns an unsigned 8-byte integer
.RI ( uint64_t )
containing the number of expirations that have occurred.
(The returned value is in host byte order\(emthat is,
the native byte order for integers on the host machine.)
.IP
If no timer expirations have occurred at the time of the
.BR read (2),
then the call either blocks until the next timer expiration,
or fails with the error
.B EAGAIN
if the file descriptor has been made nonblocking
(via the use of the
.BR fcntl (2)
.B F_SETFL
operation to set the
.B O_NONBLOCK
flag).
.IP
A
.BR read (2)
will fail with the error
.B EINVAL
if the size of the supplied buffer is less than 8 bytes.
.TP
.BR poll "(2), " select "(2) (and similar)"
The file descriptor is readable
(the
.BR select (2)
.I readfds
argument; the
.BR poll (2)
.B POLLIN
flag)
if one or more timer expirations have occurred.
.IP
The file descriptor also supports the other file-descriptor
multiplexing APIs:
.BR pselect (2),
.BR ppoll (2),
and
.BR epoll (7).
.TP
.BR ioctl "(2)"
The following timerfd-specific command is supported:
.RS
.TP
.BR TFD_IOC_SET_TICKS " (since Linux 3.17)"
.\" commit 5442e9fbd7c23172a1c9bc736629cd123a9923f0
Adjust the number of timer expirations that have occurred.
The argument is a pointer to a nonzero 8-byte integer
.RI ( uint64_t *)
containing the new number of expirations.
Once the number is set, any waiter on the timer is woken up.
The only purpose of this command is to restore the expirations
for the purpose of checkpoint/restore.
This operation is available only if the kernel was configured with the
.BR CONFIG_CHECKPOINT_RESTORE
option.
.RE
.TP
.BR close (2)
When the file descriptor is no longer required it should be closed.
When all file descriptors associated with the same timer object
have been closed,
the timer is disarmed and its resources are freed by the kernel.
.\"
.SS fork(2) semantics
After a
.BR fork (2),
the child inherits a copy of the file descriptor created by
.BR timerfd_create ().
The file descriptor refers to the same underlying
timer object as the corresponding file descriptor in the parent,
and
.BR read (2)s
in the child will return information about
expirations of the timer.
.\"
.SS execve(2) semantics
A file descriptor created by
.BR timerfd_create ()
is preserved across
.BR execve (2),
and continues to generate timer expirations if the timer was armed.
.SH RETURN VALUE
On success,
.BR timerfd_create ()
returns a new file descriptor.
On error, \-1 is returned and
.I errno
is set to indicate the error.

.BR timerfd_settime ()
and
.BR timerfd_gettime ()
return 0 on success;
on error they return \-1, and set
.I errno
to indicate the error.
.SH ERRORS
.BR timerfd_create ()
can fail with the following errors:
.TP
.B EINVAL
The
.I clockid
argument is neither
.B CLOCK_MONOTONIC
nor
.BR CLOCK_REALTIME ;
.TP
.B EINVAL
.I flags
is invalid;
or, in Linux 2.6.26 or earlier,
.I flags
is nonzero.
.TP
.B EMFILE
The per-process limit of open file descriptors has been reached.
.TP
.B ENFILE
The system-wide limit on the total number of open files has been
reached.
.TP
.B ENODEV
Could not mount (internal) anonymous inode device.
.TP
.B ENOMEM
There was insufficient kernel memory to create the timer.
.PP
.BR timerfd_settime ()
and
.BR timerfd_gettime ()
can fail with the following errors:
.TP
.B EBADF
.I fd
is not a valid file descriptor.
.TP
.B EFAULT
.IR new_value ,
.IR old_value ,
or
.I curr_value
is not valid a pointer.
.TP
.B EINVAL
.I fd
is not a valid timerfd file descriptor.
.PP
.BR timerfd_settime ()
can also fail with the following errors:
.TP
.B EINVAL
.I new_value
is not properly initialized (one of the
.I tv_nsec
falls outside the range zero to 999,999,999).
.TP
.B EINVAL
.\" This case only checked since 2.6.29, and 2.2.2[78].some-stable-version.
.\" In older kernel versions, no check was made for invalid flags.
.I flags
is invalid.
.SH VERSIONS
These system calls are available on Linux since kernel 2.6.25.
Library support is provided by glibc since version 2.8.
.SH CONFORMING TO
These system calls are Linux-specific.
.SH BUGS
Currently,
.\" 2.6.29
.BR timerfd_create ()
supports fewer types of clock IDs than
.BR timer_create (2).
.SH EXAMPLE
The following program creates a timer and then monitors its progress.
The program accepts up to three command-line arguments.
The first argument specifies the number of seconds for
the initial expiration of the timer.
The second argument specifies the interval for the timer, in seconds.
The third argument specifies the number of times the program should
allow the timer to expire before terminating.
The second and third command-line arguments are optional.

The following shell session demonstrates the use of the program:
.in +4n
.nf

.RB "$" " a.out 3 1 100"
0.000: timer started
3.000: read: 1; total=1
4.000: read: 1; total=2
.BR "^Z " "                 # type control-Z to suspend the program"
[1]+  Stopped                 ./timerfd3_demo 3 1 100
.RB "$ " "fg" "                # Resume execution after a few seconds"
a.out 3 1 100
9.660: read: 5; total=7
10.000: read: 1; total=8
11.000: read: 1; total=9
.BR "^C " "                 # type control-C to suspend the program"
.fi
.in
.SS Program source
\&
.nf
.\" The commented out code here is what we currently need until
.\" the required stuff is in glibc
.\"
.\"
.\"/* Link with -lrt */
.\"#define _GNU_SOURCE
.\"#include <sys/syscall.h>
.\"#include <unistd.h>
.\"#include <time.h>
.\"#if defined(__i386__)
.\"#define __NR_timerfd_create 322
.\"#define __NR_timerfd_settime 325
.\"#define __NR_timerfd_gettime 326
.\"#endif
.\"
.\"static int
.\"timerfd_create(int clockid, int flags)
.\"{
.\"    return syscall(__NR_timerfd_create, clockid, flags);
.\"}
.\"
.\"static int
.\"timerfd_settime(int fd, int flags, struct itimerspec *new_value,
.\"        struct itimerspec *curr_value)
.\"{
.\"    return syscall(__NR_timerfd_settime, fd, flags, new_value,
.\"                   curr_value);
.\"}
.\"
.\"static int
.\"timerfd_gettime(int fd, struct itimerspec *curr_value)
.\"{
.\"    return syscall(__NR_timerfd_gettime, fd, curr_value);
.\"}
.\"
.\"#define TFD_TIMER_ABSTIME (1 << 0)
.\"
.\"////////////////////////////////////////////////////////////
#include <sys/timerfd.h>
#include <time.h>
#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>
#include <stdint.h>        /* Definition of uint64_t */

#define handle_error(msg) \\
        do { perror(msg); exit(EXIT_FAILURE); } while (0)

static void
print_elapsed_time(void)
{
    static struct timespec start;
    struct timespec curr;
    static int first_call = 1;
    int secs, nsecs;

    if (first_call) {
        first_call = 0;
        if (clock_gettime(CLOCK_MONOTONIC, &start) == \-1)
            handle_error("clock_gettime");
    }

    if (clock_gettime(CLOCK_MONOTONIC, &curr) == \-1)
        handle_error("clock_gettime");

    secs = curr.tv_sec \- start.tv_sec;
    nsecs = curr.tv_nsec \- start.tv_nsec;
    if (nsecs < 0) {
        secs\-\-;
        nsecs += 1000000000;
    }
    printf("%d.%03d: ", secs, (nsecs + 500000) / 1000000);
}

int
main(int argc, char *argv[])
{
    struct itimerspec new_value;
    int max_exp, fd;
    struct timespec now;
    uint64_t exp, tot_exp;
    ssize_t s;

    if ((argc != 2) && (argc != 4)) {
        fprintf(stderr, "%s init\-secs [interval\-secs max\-exp]\\n",
                argv[0]);
        exit(EXIT_FAILURE);
    }

    if (clock_gettime(CLOCK_REALTIME, &now) == \-1)
        handle_error("clock_gettime");

    /* Create a CLOCK_REALTIME absolute timer with initial
       expiration and interval as specified in command line */

    new_value.it_value.tv_sec = now.tv_sec + atoi(argv[1]);
    new_value.it_value.tv_nsec = now.tv_nsec;
    if (argc == 2) {
        new_value.it_interval.tv_sec = 0;
        max_exp = 1;
    } else {
        new_value.it_interval.tv_sec = atoi(argv[2]);
        max_exp = atoi(argv[3]);
    }
    new_value.it_interval.tv_nsec = 0;

    fd = timerfd_create(CLOCK_REALTIME, 0);
    if (fd == \-1)
        handle_error("timerfd_create");

    if (timerfd_settime(fd, TFD_TIMER_ABSTIME, &new_value, NULL) == \-1)
        handle_error("timerfd_settime");

    print_elapsed_time();
    printf("timer started\\n");

    for (tot_exp = 0; tot_exp < max_exp;) {
        s = read(fd, &exp, sizeof(uint64_t));
        if (s != sizeof(uint64_t))
            handle_error("read");

        tot_exp += exp;
        print_elapsed_time();
        printf("read: %llu; total=%llu\\n",
                (unsigned long long) exp,
                (unsigned long long) tot_exp);
    }

    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR eventfd (2),
.BR poll (2),
.BR read (2),
.BR select (2),
.BR setitimer (2),
.BR signalfd (2),
.BR timer_create (2),
.BR timer_gettime (2),
.BR timer_settime (2),
.BR epoll (7),
.BR time (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2009 Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH TIMER_GETOVERRUN 2 2009-02-20 Linux "Linux Programmer's Manual"
.SH NAME
timer_getoverrun \- get overrun count for a POSIX per-process timer
.SH SYNOPSIS
.nf
.B  #include <time.h>

.BI "int timer_getoverrun(timer_t " timerid );
.fi

Link with \fI\-lrt\fP.
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR timer_getoverrun ():
_POSIX_C_SOURCE\ >=\ 199309L
.SH DESCRIPTION
.BR timer_getoverrun ()
returns the "overrun count" for the timer referred to by
.IR timerid .
An application can use the overrun count to accurately calculate the number
of timer expirations that would have occurred over a given time interval.
Timer overruns can occur both when receiving expiration notifications
via signals
.RB ( SIGEV_SIGNAL ),
and via threads
.RB ( SIGEV_THREAD ).

When expiration notifications are delivered via a signal,
overruns can occur as follows.
Regardless of whether or not a real-time signal is used for
timer notifications,
the system queues at most one signal per timer.
(This is the behavior specified by POSIX.1-2001.
The alternative, queuing one signal for each timer expiration,
could easily result in overflowing the allowed limits for
queued signals on the system.)
Because of system scheduling delays,
or because the signal may be temporarily blocked,
there can be a delay between the time when the notification
signal is generated and the time when it
is delivered (e.g., caught by a signal handler) or accepted (e.g., using
.BR sigwaitinfo (2)).
In this interval, further timer expirations may occur.
The timer overrun count is the number of additional
timer expirations that occurred between the time when the signal
was generated and when it was delivered or accepted.

Timer overruns can also occur when expiration notifications
are delivered via invocation of a thread,
since there may be an arbitrary delay between an expiration of the timer
and the invocation of the notification thread,
and in that delay interval, additional timer expirations may occur.
.SH RETURN VALUE
On success,
.BR timer_getoverrun ()
returns the overrun count of the specified timer;
this count may be 0 if no overruns have occurred.
On failure, \-1 is returned, and
.I errno
is set to indicate the error.
.SH ERRORS
.TP
.B EINVAL
.I timerid
is not a valid timer ID.
.SH VERSIONS
This system call is available since Linux 2.6.
.SH CONFORMING TO
POSIX.1-2001.
.SH NOTES
When timer notifications are delivered via signals
.RB ( SIGEV_SIGNAL ),
on Linux it is also possible to obtain the overrun count via the
.I si_overrun
field of the
.I siginfo_t
structure (see
.BR sigaction (2)).
This allows an application to avoid the overhead of making
a system call to obtain the overrun count,
but is a nonportable extension to POSIX.1-2001.

POSIX.1-2001 discusses timer overruns only in the context of
timer notifications using signals.
.\" FIXME . Austin bug filed, 11 Feb 09
.SH BUGS
POSIX.1-2001 specifies that if the timer overrun count
is equal to or greater than an implementation-defined maximum,
.BR DELAYTIMER_MAX ,
then
.BR timer_getoverrun ()
should return
.BR DELAYTIMER_MAX .
However, Linux does not implement this feature: instead,
if the timer overrun value exceeds the maximum representable integer,
the counter cycles, starting once more from low values.
.\" Bug filed: http://bugzilla.kernel.org/show_bug.cgi?id=12665
.\" http://thread.gmane.org/gmane.linux.kernel/113276/
.SH EXAMPLE
See
.BR timer_create (2).
.SH SEE ALSO
.BR clock_gettime (2),
.BR sigaction (2),
.BR signalfd (2),
.BR sigwaitinfo (2),
.BR timer_create (2),
.BR timer_delete (2),
.BR timer_settime (2),
.BR signal (7),
.BR time (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2009 Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH TIMER_SETTIME 2 2012-10-15 Linux "Linux Programmer's Manual"
.SH NAME
timer_settime, timer_gettime \- arm/disarm and fetch
state of POSIX per-process timer
.SH SYNOPSIS
.nf
.B  #include <time.h>

.BI "int timer_settime(timer_t " timerid ", int " flags ,
.BI "                  const struct itimerspec *" new_value ,
.BI "                  struct itimerspec *" old_value );
.BI "int timer_gettime(timer_t " timerid ", struct itimerspec *" curr_value );
.fi

Link with \fI\-lrt\fP.
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR timer_settime (),
.BR timer_gettime ():
_POSIX_C_SOURCE\ >=\ 199309L
.SH DESCRIPTION
.BR timer_settime ()
arms or disarms the timer identified by
.IR timerid .
The
.I new_value
argument is pointer to an
.I itimerspec
structure that specifies the new initial value and
the new interval for the timer.
The
.I itimerspec
structure is defined as follows:

.in +4n
.nf
struct timespec {
    time_t tv_sec;                /* Seconds */
    long   tv_nsec;               /* Nanoseconds */
};

struct itimerspec {
    struct timespec it_interval;  /* Timer interval */
    struct timespec it_value;     /* Initial expiration */
};
.fi
.in

Each of the substructures of the
.I itimerspec
structure is a
.I timespec
structure that allows a time value to be specified
in seconds and nanoseconds.
These time values are measured according to the clock
that was specified when the timer was created by
.BR timer_create (2).

If
.I new_value->it_value
specifies a nonzero value (i.e., either subfield is nonzero), then
.BR timer_settime ()
arms (starts) the timer,
setting it to initially expire at the given time.
(If the timer was already armed,
then the previous settings are overwritten.)
If
.I new_value->it_value
specifies a zero value
(i.e., both subfields are zero),
then the timer is disarmed.

The
.I new_value->it_interval
field specifies the period of the timer, in seconds and nanoseconds.
If this field is nonzero, then each time that an armed timer expires,
the timer is reloaded from the value specified in
.IR new_value->it_interval .
If
.I new_value->it_interval
specifies a zero value,
then the timer expires just once, at the time specified by
.IR it_value .

By default, the initial expiration time specified in
.I new_value->it_value
is interpreted relative to the current time on the timer's
clock at the time of the call.
This can be modified by specifying
.B TIMER_ABSTIME
in
.IR flags ,
in which case
.I new_value->it_value
is interpreted as an absolute value as measured on the timer's clock;
that is, the timer will expire when the clock value reaches the
value specified by
.IR new_value->it_value .
If the specified absolute time has already passed,
then the timer expires immediately,
and the overrun count (see
.BR timer_getoverrun (2))
will be set correctly.
.\" By experiment: the overrun count is set correctly, for CLOCK_REALTIME.

If the value of the
.B CLOCK_REALTIME
clock is adjusted while an absolute timer based on that clock is armed,
then the expiration of the timer will be appropriately adjusted.
Adjustments to the
.B CLOCK_REALTIME
clock have no effect on relative timers based on that clock.
.\" Similar remarks might apply with respect to process and thread CPU time
.\" clocks, but these clocks are not currently (2.6.28) settable on Linux.

If
.I old_value
is not NULL, then it points to a buffer
that is used to return the previous interval of the timer (in
.IR old_value->it_interval )
and the amount of time until the timer
would previously have next expired (in
.IR old_value->it_value ).

.BR timer_gettime ()
returns the time until next expiration, and the interval,
for the timer specified by
.IR timerid ,
in the buffer pointed to by
.IR curr_value .
The time remaining until the next timer expiration is returned in
.IR curr_value->it_value ;
this is always a relative value, regardless of whether the
.BR TIMER_ABSTIME
flag was used when arming the timer.
If the value returned in
.IR curr_value->it_value
is zero, then the timer is currently disarmed.
The timer interval is returned in
.IR curr_value->it_interval .
If the value returned in
.IR curr_value->it_interval
is zero, then this is a "one-shot" timer.
.SH RETURN VALUE
On success,
.BR timer_settime ()
and
.BR timer_gettime ()
return 0.
On error, \-1 is returned, and
.I errno
is set to indicate the error.
.SH ERRORS
These functions may fail with the following errors:
.TP
.B EFAULT
.IR new_value ,
.IR old_value ,
or
.I curr_value
is not a valid pointer.
.TP
.B EINVAL
.I timerid
is invalid.
.\" FIXME . eventually: invalid value in flags
.PP
.BR timer_settime ()
may fail with the following errors:
.TP
.B EINVAL
.I new_value.it_value
is negative; or
.I new_value.it_value.tv_nsec
is negative or greater than 999,999,999.
.SH VERSIONS
These system calls are available since Linux 2.6.
.SH CONFORMING TO
POSIX.1-2001.
.SH EXAMPLE
See
.BR timer_create (2).
.SH SEE ALSO
.BR timer_create (2),
.BR timer_getoverrun (2),
.BR time (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1992 Drew Eckhardt (drew@cs.colorado.edu), March 28, 1992
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified by Michael Haardt (michael@moria.de)
.\" Modified Sat Jul 24 14:29:17 1993 by Rik Faith (faith@cs.unc.edu)
.\" Modified 961203 and 001211 and 010326 by aeb@cwi.nl
.\" Modified 001213 by Michael Haardt (michael@moria.de)
.\" Modified 13 Jun 02, Michael Kerrisk <mtk.manpages@gmail.com>
.\"	Added note on nonstandard behavior when SIGCHLD is ignored.
.\" Modified 2004-11-16, mtk, Noted that the nonconformance when
.\"	SIGCHLD is being ignored is fixed in 2.6.9; other minor changes
.\" Modified 2004-12-08, mtk, in 2.6 times() return value changed
.\" 2005-04-13, mtk
.\"	Added notes on nonstandard behavior: Linux allows 'buf' to
.\"	be NULL, but POSIX.1 doesn't specify this and it's nonportable.
.\"
.TH TIMES 2 2012-10-22 "Linux" "Linux Programmer's Manual"
.SH NAME
times \- get process times
.SH SYNOPSIS
.B #include <sys/times.h>
.sp
.BI "clock_t times(struct tms *" buf );
.SH DESCRIPTION
.BR times ()
stores the current process times in the
.I "struct tms"
that
.I buf
points to.
The
.I struct tms
is as defined in
.IR <sys/times.h> :
.sp
.in +4n
.nf
struct tms {
    clock_t tms_utime;  /* user time */
    clock_t tms_stime;  /* system time */
    clock_t tms_cutime; /* user time of children */
    clock_t tms_cstime; /* system time of children */
};
.fi
.in
.LP
The
.I tms_utime
field contains the CPU time spent executing instructions
of the calling process.
The
.I tms_stime
field contains the CPU time spent in the system while
executing tasks on behalf of the calling process.
The
.I tms_cutime
field contains the sum of the
.I tms_utime
and
.I tms_cutime
values for all waited-for terminated children.
The
.I tms_cstime
field contains the sum of the
.I tms_stime
and
.I tms_cstime
values for all waited-for terminated children.
.LP
Times for terminated children (and their descendants)
are added in at the moment
.BR wait (2)
or
.BR waitpid (2)
returns their process ID.
In particular, times of grandchildren
that the children did not wait for are never seen.
.LP
All times reported are in clock ticks.
.SH RETURN VALUE
.BR times ()
returns the number of clock ticks that have elapsed since
an arbitrary point in the past.
The return value may overflow the possible range of type
.IR clock_t .
On error, \fI(clock_t)\ \-1\fP is returned, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EFAULT
.I tms
points outside the process's address space.
.SH CONFORMING TO
SVr4, 4.3BSD, POSIX.1-2001.
.SH NOTES
The number of clock ticks per second can be obtained using:
.in +4n

sysconf(_SC_CLK_TCK);
.in
.PP
In POSIX.1-1996 the symbol \fBCLK_TCK\fP (defined in
.IR <time.h> )
is mentioned as obsolescent.
It is obsolete now.
.PP
In Linux kernel versions before 2.6.9,
if the disposition of
.B SIGCHLD
is set to
.BR SIG_IGN ,
then the times of terminated children
are automatically included in the
.I tms_cstime
and
.I tms_cutime
fields, although POSIX.1-2001 says that this should happen
only if the calling process
.BR wait (2)s
on its children.
This nonconformance is rectified in Linux 2.6.9 and later.
.\" See the description of times() in XSH, which says:
.\"	The times of a terminated child process are included... when wait()
.\"	or waitpid() returns the process ID of this terminated child.

On Linux, the
.I buf
argument can be specified as NULL, with the result that
.BR times ()
just returns a function result.
However, POSIX does not specify this behavior, and most
other UNIX implementations require a non-NULL value for
.IR buf .
.LP
Note that
.BR clock (3)
also returns a value of type
.IR clock_t ,
but this value is measured in units of
.BR CLOCKS_PER_SEC ,
not the clock ticks used by
.BR times ().

On Linux, the "arbitrary point in the past" from which the return value of
.BR times ()
is measured has varied across kernel versions.
On Linux 2.4 and earlier this point is the moment the system was booted.
Since Linux 2.6, this point is \fI(2^32/HZ) \- 300\fP
(i.e., about 429 million) seconds before system boot time.
This variability across kernel versions (and across UNIX implementations),
combined with the fact that the returned value may overflow the range of
.IR clock_t ,
means that a portable application would be wise to avoid using this value.
To measure changes in elapsed time, use
.BR clock_gettime (2)
instead.
.\" .PP
.\" On older systems the number of clock ticks per second is given
.\" by the variable HZ.
.SS Historical
SVr1-3 returns
.I long
and the struct members are of type
.I time_t
although they store clock ticks, not seconds since the Epoch.
V7 used
.I long
for the struct members, because it had no type
.I time_t
yet.
.SH BUGS
A limitation of the Linux system call conventions on some architectures
(notably i386) means that on Linux 2.6 there is a small time window
(41 seconds) soon after boot when
.BR times ()
can return \-1, falsely indicating that an error occurred.
The same problem can occur when the return value wraps past
the maximum value that can be stored in
.BR clock_t .
.\" The problem is that a syscall return of -4095 to -1
.\" is interpreted by glibc as an error, and the wrapper converts
.\" the return value to -1.
.\" http://marc.info/?l=linux-kernel&m=119447727031225&w=2
.\" "compat_sys_times() bogus until jiffies >= 0"
.\" November 2007
.SH SEE ALSO
.BR time (1),
.BR getrusage (2),
.BR wait (2),
.BR clock (3),
.BR sysconf (3),
.BR time (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2008 Michael Kerrisk <tmk.manpages@gmail.com>
.\" and Copyright 2003 Abhijit Menon-Sen <ams@wiw.org>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" 2004-05-31, added tgkill, ahu, aeb
.\" 2008-01-15 mtk -- rewrote DESCRIPTION
.\"
.TH TKILL 2 2014-12-31 "Linux" "Linux Programmer's Manual"
.SH NAME
tkill, tgkill \- send a signal to a thread
.SH SYNOPSIS
.nf
.BI "int tkill(int " tid ", int " sig );
.sp
.BI "int tgkill(int " tgid ", int " tid ", int " sig );
.fi

.IR Note :
There are no glibc wrappers for these system calls; see NOTES.
.SH DESCRIPTION
.BR tgkill ()
sends the signal
.I sig
to the thread with the thread ID
.I tid
in the thread group
.IR tgid .
(By contrast,
.BR kill (2)
can be used to send a signal only to a process (i.e., thread group)
as a whole, and the signal will be delivered to an arbitrary
thread within that process.)

.BR tkill ()
is an obsolete predecessor to
.BR tgkill ().
It allows only the target thread ID to be specified,
which may result in the wrong thread being signaled if a thread
terminates and its thread ID is recycled.
Avoid using this system call.
.\" FIXME Maybe say something about the following:
.\" http://sourceware.org/bugzilla/show_bug.cgi?id=12889
.\"     Rich Felker <bugdal@aerifal.cx>
.\"     There is a race condition in pthread_kill: it is possible that,
.\"     between the time pthread_kill reads the pid/tid from the target
.\"     thread descriptor and the time it makes the tgkill syscall,
.\"     the target thread terminates and the same tid gets assigned
.\"     to a new thread in the same process.
.\"
.\"     (The tgkill syscall was designed to eliminate a similar race
.\"     condition in tkill, but it only succeeded in eliminating races
.\"     where the tid gets reused in a different process, and does not
.\"     help if the same tid gets assigned to a new thread in the
.\"     same process.)
.\"
.\"     The only solution I can see is to introduce a mutex that ensures
.\"     that a thread cannot exit while pthread_kill is being called on it.
.\"
.\"     Note that in most real-world situations, like almost all race
.\"     conditions, this one will be extremely rare. To make it
.\"     measurable, one could exhaust all but 1-2 available pid values,
.\"     possibly by lowering the max pid parameter in /proc, forcing
.\"     the same tid to be reused rapidly.

These are the raw system call interfaces, meant for internal
thread library use.
.SH RETURN VALUE
On success, zero is returned.
On error, \-1 is returned, and \fIerrno\fP
is set appropriately.
.SH ERRORS
.TP
.B EINVAL
An invalid thread ID, thread group ID, or signal was specified.
.TP
.B EPERM
Permission denied.
For the required permissions, see
.BR kill (2).
.TP
.B ESRCH
No process with the specified thread ID (and thread group ID) exists.
.SH VERSIONS
.BR tkill ()
is supported since Linux 2.4.19 / 2.5.4.
.BR tgkill ()
was added in Linux 2.5.75.
.SH CONFORMING TO
.BR tkill ()
and
.BR tgkill ()
are Linux-specific and should not be used
in programs that are intended to be portable.
.SH NOTES
See the description of
.B CLONE_THREAD
in
.BR clone (2)
for an explanation of thread groups.

Glibc does not provide wrappers for these system calls; call them using
.BR syscall (2).
.SH SEE ALSO
.BR clone (2),
.BR gettid (2),
.BR kill (2),
.BR rt_sigqueueinfo (2)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1983, 1991 The Regents of the University of California.
.\" All rights reserved.
.\"
.\" %%%LICENSE_START(BSD_4_CLAUSE_UCB)
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\" %%%LICENSE_END
.\"
.\"     @(#)truncate.2	6.9 (Berkeley) 3/10/91
.\"
.\" Modified 1993-07-24 by Rik Faith <faith@cs.unc.edu>
.\" Modified 1996-10-22 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified 1998-12-21 by Andries Brouwer <aeb@cwi.nl>
.\" Modified 2002-01-07 by Michael Kerrisk <mtk.manpages@gmail.com>
.\" Modified 2002-04-06 by Andries Brouwer <aeb@cwi.nl>
.\" Modified 2004-06-23 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.TH TRUNCATE 2 2015-05-07 "Linux" "Linux Programmer's Manual"
.SH NAME
truncate, ftruncate \- truncate a file to a specified length
.SH SYNOPSIS
.B #include <unistd.h>
.br
.B #include <sys/types.h>
.sp
.BI "int truncate(const char *" path ", off_t " length );
.br
.BI "int ftruncate(int " fd ", off_t " length );
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.ad l
.PD 0
.sp
.BR truncate ():
.RS 4
_BSD_SOURCE || _XOPEN_SOURCE\ >=\ 500 ||
_XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED
.br
|| /* Since glibc 2.12: */ _POSIX_C_SOURCE\ >=\ 200809L
.RE
.sp
.BR ftruncate ():
.RS 4
_BSD_SOURCE || _XOPEN_SOURCE\ >=\ 500 ||
_XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED
.br
|| /* Since glibc 2.3.5: */ _POSIX_C_SOURCE\ >=\ 200112L
.RE
.PD
.ad b
.SH DESCRIPTION
The
.BR truncate ()
and
.BR ftruncate ()
functions cause the regular file named by
.I path
or referenced by
.I fd
to be truncated to a size of precisely
.I length
bytes.
.LP
If the file previously was larger than this size, the extra data is lost.
If the file previously was shorter, it is extended, and
the extended part reads as null bytes (\(aq\\0\(aq).
.LP
The file offset is not changed.
.LP
If the size changed, then the st_ctime and st_mtime fields
(respectively, time of last status change and
time of last modification; see
.BR stat (2))
for the file are updated,
and the set-user-ID and set-group-ID mode bits may be cleared.
.LP
With
.BR ftruncate (),
the file must be open for writing; with
.BR truncate (),
the file must be writable.
.SH RETURN VALUE
On success, zero is returned.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
For
.BR truncate ():
.TP
.B EACCES
Search permission is denied for a component of the path prefix,
or the named file is not writable by the user.
(See also
.BR path_resolution (7).)
.TP
.B EFAULT
The argument
.I path
points outside the process's allocated address space.
.TP
.B EFBIG
The argument
.I length
is larger than the maximum file size. (XSI)
.TP
.B EINTR
While blocked waiting to complete,
the call was interrupted by a signal handler; see
.BR fcntl (2)
and
.BR signal (7).
.TP
.B EINVAL
The argument
.I length
is negative or larger than the maximum file size.
.TP
.B EIO
An I/O error occurred updating the inode.
.TP
.B EISDIR
The named file is a directory.
.TP
.B ELOOP
Too many symbolic links were encountered in translating the pathname.
.TP
.B ENAMETOOLONG
A component of a pathname exceeded 255 characters,
or an entire pathname exceeded 1023 characters.
.TP
.B ENOENT
The named file does not exist.
.TP
.B ENOTDIR
A component of the path prefix is not a directory.
.TP
.B EPERM
.\" This happens for at least MSDOS and VFAT filesystems
.\" on kernel 2.6.13
The underlying filesystem does not support extending
a file beyond its current size.
.TP
.B EPERM
The operation was prevented by a file seal; see
.BR fcntl (2).
.TP
.B EROFS
The named file resides on a read-only filesystem.
.TP
.B ETXTBSY
The file is a pure procedure (shared text) file that is being executed.
.PP
For
.BR ftruncate ()
the same errors apply, but instead of things that can be wrong with
.IR path ,
we now have things that can be wrong with the file descriptor,
.IR fd :
.TP
.B EBADF
.I fd
is not a valid descriptor.
.TP
.BR EBADF " or " EINVAL
.I fd
is not open for writing.
.TP
.B EINVAL
.I fd
does not reference a regular file.
.SH CONFORMING TO
4.4BSD, SVr4, POSIX.1-2001 (these calls first appeared in 4.2BSD).
.\" POSIX.1-1996 has
.\" .BR ftruncate ().
.\" POSIX.1-2001 also has
.\" .BR truncate (),
.\" as an XSI extension.
.\" .LP
.\" SVr4 documents additional
.\" .BR truncate ()
.\" error conditions EMFILE, EMULTIHP, ENFILE, ENOLINK.  SVr4 documents for
.\" .BR ftruncate ()
.\" an additional EAGAIN error condition.
.SH NOTES
The details in DESCRIPTION are for XSI-compliant systems.
For non-XSI-compliant systems, the POSIX standard allows
two behaviors for
.BR ftruncate ()
when
.I length
exceeds the file length
(note that
.BR truncate ()
is not specified at all in such an environment):
either returning an error, or extending the file.
Like most UNIX implementations, Linux follows the XSI requirement
when dealing with native filesystems.
However, some nonnative filesystems do not permit
.BR truncate ()
and
.BR ftruncate ()
to be used to extend a file beyond its current length:
a notable example on Linux is VFAT.
.\" At the very least: OSF/1, Solaris 7, and FreeBSD conform, mtk, Jan 2002

The original Linux
.BR truncate ()
and
.BR ftruncate ()
system calls were not designed to handle large file offsets.
Consequently, Linux 2.4 added
.BR truncate64 ()
and
.BR ftruncate64 ()
system calls that handle large files.
However, these details can be ignored by applications using glibc, whose
wrapper functions transparently employ the more recent system calls
where they are available.

On some 32-bit architectures,
the calling signature for these system calls differ,
for the reasons described in
.BR syscall (2).
.SH BUGS
A header file bug in glibc 2.12 meant that the minimum value of
.\" http://sourceware.org/bugzilla/show_bug.cgi?id=12037
.BR _POSIX_C_SOURCE
required to expose the declaration of
.BR ftruncate ()
was 200809L instead of 200112L.
This has been fixed in later glibc versions.
.SH SEE ALSO
.BR open (2),
.BR stat (2),
.BR path_resolution (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2006, 2008, Michael Kerrisk (mtk.manpages@gmail.com)
.\" (A few fragments remain from an earlier (1992) version written in
.\" 1992 by Drew Eckhardt <drew@cs.colorado.edu>.)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified by Michael Haardt <michael@moria.de>
.\" Modified Sat Jul 24 12:51:53 1993 by Rik Faith <faith@cs.unc.edu>
.\" Modified Tue Oct 22 22:39:04 1996 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified Thu May  1 06:05:54 UTC 1997 by Nicolás Lichtmaier
.\"  <nick@debian.com> with Lars Wirzenius <liw@iki.fi> suggestion
.\" 2006-05-13, mtk, substantial rewrite of description of 'mask'
.\" 2008-01-09, mtk, a few rewrites and additions.
.TH UMASK 2 2015-05-07 "Linux" "Linux Programmer's Manual"
.SH NAME
umask \- set file mode creation mask
.SH SYNOPSIS
.B #include <sys/types.h>
.br
.B #include <sys/stat.h>
.sp
.BI "mode_t umask(mode_t " mask );
.SH DESCRIPTION
.BR umask ()
sets the calling process's file mode creation mask (umask) to
.I mask
& 0777 (i.e., only the file permission bits of
.I mask
are used), and returns the previous value of the mask.

The umask is used by
.BR open (2),
.BR mkdir (2),
and other system calls that create files
.\" e.g., mkfifo(), creat(), mknod(), sem_open(), mq_open(), shm_open()
.\" but NOT the System V IPC *get() calls
to modify the permissions placed on newly created files or directories.
Specifically, permissions in the umask are turned off from
the
.I mode
argument to
.BR open (2)
and
.BR mkdir (2).

Alternatively, if the parent directory has a default ACL (see
.BR acl (5)),
the umask is ignored, the default ACL is inherited,
the permission bits are set based on the inherited ACL,
and permission bits absent in the
.I mode
argument are turned off.
For example, the following default ACL is equivalent to a umask of 022:

    u::rwx,g::r-x,o::r-x

Combining the effect of this default ACL with a
.I mode
argument of 0666 (rw-rw-rw-), the resulting file permissions would be 0644
(rw-r--r--).

The constants that should be used to specify
.I mask
are described under
.BR stat (2).

The typical default value for the process umask is
.I S_IWGRP\ |\ S_IWOTH
(octal 022).
In the usual case where the
.I mode
argument to
.BR open (2)
is specified as:
.nf

    S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH

.fi
(octal 0666) when creating a new file, the permissions on the
resulting file will be:
.nf

    S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH

.fi
(because 0666 & ~022 = 0644; i.e., rw\-r\-\-r\-\-).
.SH RETURN VALUE
This system call always succeeds and the previous value of the mask
is returned.
.SH CONFORMING TO
SVr4, 4.3BSD, POSIX.1-2001.
.SH NOTES
A child process created via
.BR fork (2)
inherits its parent's umask.
The umask is left unchanged by
.BR execve (2).

The umask setting also affects the permissions assigned to POSIX IPC objects
.RB ( mq_open (3),
.BR sem_open (3),
.BR shm_open (3)),
FIFOs
.RB ( mkfifo (3)),
and UNIX domain sockets
.RB ( unix (7))
created by the process.
The umask does not affect the permissions assigned
to System\ V IPC objects created by the process (using
.BR msgget (2),
.BR semget (2),
.BR shmget (2)).
.SH SEE ALSO
.BR chmod (2),
.BR mkdir (2),
.BR open (2),
.BR stat (2),
.BR acl (5)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 1993 Rickard E. Faith <faith@cs.unc.edu>
.\" and Copyright (C) 1994 Andries E. Brouwer <aeb@cwi.nl>
.\" and Copyright (C) 2002, 2005 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" 2008-10-06, mtk: Created this as a new page by splitting
.\"     umount/umount2 material out of mount.2
.\"
.TH UMOUNT 2 2015-03-29 "Linux" "Linux Programmer's Manual"
.SH NAME
umount, umount2 \- unmount filesystem
.SH SYNOPSIS
.nf
.B "#include <sys/mount.h>"
.sp
.BI "int umount(const char *" target );
.sp
.BI "int umount2(const char *" target ", int " flags );
.fi
.SH DESCRIPTION
.BR umount ()
and
.BR umount2 ()
remove the attachment of the (topmost) filesystem mounted on
.IR target .
.\" Note: the kernel naming differs from the glibc naming
.\" umount2 is the glibc name for what the kernel now calls umount
.\" and umount is the glibc name for oldumount

Appropriate privilege (Linux: the
.B CAP_SYS_ADMIN
capability) is required to unmount filesystems.

Linux 2.1.116 added the
.BR umount2 ()
system call, which, like
.BR umount (),
unmounts a target, but allows additional
.I flags
controlling the behavior of the operation:
.TP
.BR MNT_FORCE " (since Linux 2.1.116)"
Force unmount even if busy.
This can cause data loss.
(Only for NFS mounts.)
.TP
.BR MNT_DETACH " (since Linux 2.4.11)"
Perform a lazy unmount: make the mount point unavailable for new
accesses, immediately disconnect the filesystem and all filesystems
mounted below it from each other and from the mount table, and
actually perform the unmount when the mount point ceases to be busy.
.TP
.BR MNT_EXPIRE " (since Linux 2.6.8)"
Mark the mount point as expired.
If a mount point is not currently in use, then an initial call to
.BR umount2 ()
with this flag fails with the error
.BR EAGAIN ,
but marks the mount point as expired.
The mount point remains expired as long as it isn't accessed
by any process.
A second
.BR umount2 ()
call specifying
.B MNT_EXPIRE
unmounts an expired mount point.
This flag cannot be specified with either
.B MNT_FORCE
or
.BR MNT_DETACH .
.TP
.BR UMOUNT_NOFOLLOW " (since Linux 2.6.34)"
.\" Later added to 2.6.33-stable
Don't dereference
.I target
if it is a symbolic link.
This flag allows security problems to be avoided in set-user-ID-\fIroot\fP
programs that allow unprivileged users to unmount filesystems.
.SH RETURN VALUE
On success, zero is returned.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
The error values given below result from filesystem type independent
errors.
Each filesystem type may have its own special errors and its
own special behavior.
See the Linux kernel source code for details.
.TP
.B EAGAIN
A call to
.BR umount2 ()
specifying
.B MNT_EXPIRE
successfully marked an unbusy filesystem as expired.
.TP
.B EBUSY
.I target
could not be unmounted because it is busy.
.TP
.B EFAULT
.I target
points outside the user address space.
.TP
.B EINVAL
.I target
is not a mount point.
.TP
.B EINVAL
.BR umount2 ()
was called with
.B MNT_EXPIRE
and either
.B MNT_DETACH
or
.BR MNT_FORCE .
.TP
.BR EINVAL " (since Linux 2.6.34)"
.BR umount2 ()
was called with an invalid flag value in
.IR flags .
.TP
.B ENAMETOOLONG
A pathname was longer than
.BR MAXPATHLEN .
.TP
.B ENOENT
A pathname was empty or had a nonexistent component.
.TP
.B ENOMEM
The kernel could not allocate a free page to copy filenames or data into.
.TP
.B EPERM
The caller does not have the required privileges.
.SH VERSIONS
.BR MNT_DETACH
and
.BR MNT_EXPIRE
.\" http://sourceware.org/bugzilla/show_bug.cgi?id=10092
are available in glibc since version 2.11.
.SH CONFORMING TO
These functions are Linux-specific and should not be used in
programs intended to be portable.
.SH NOTES
.SS umount() and shared mount points
Shared mount points cause any mount activity on a mount point, including
.BR umount (2)
operations, to be forwarded to every shared mount point in the
peer group and every slave mount of that peer group.
This means that
.BR umount (2)
of any peer in a set of shared mounts will cause all of its
peers to be unmounted and all of their slaves to be unmounted as well.

This propagation of unmount activity can be particularly surprising
on systems where every mount point is shared by default.
On such systems,
recursively bind mounting the root directory of the filesystem
onto a subdirectory and then later unmounting that subdirectory with
.BR MNT_DETACH
will cause every mount in the mount namespace to be lazily unmounted.

To ensure
.BR umount (2)
does not propagate in this fashion,
the mount point may be remounted using a
.BR mount (2)
call with a
.I mount_flags
argument that includes both
.BR MS_REC
and
.BR MS_PRIVATE
prior to
.BR umount (2)
being called.
.SS Historical details
The original
.BR umount ()
function was called as \fIumount(device)\fP and would return
.B ENOTBLK
when called with something other than a block device.
In Linux 0.98p4, a call \fIumount(dir)\fP was added, in order to
support anonymous devices.
In Linux 2.3.99-pre7, the call \fIumount(device)\fP was removed,
leaving only \fIumount(dir)\fP (since now devices can be mounted
in more than one place, so specifying the device does not suffice).
.SH SEE ALSO
.BR mount (2),
.BR path_resolution (7),
.BR mount (8),
.BR umount (8)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2001 Andries Brouwer <aeb@cwi.nl>.
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" 2007-07-05 mtk: Added details on underlying system call interfaces
.\"
.TH UNAME 2 2014-09-21 "Linux" "Linux Programmer's Manual"
.SH NAME
uname \- get name and information about current kernel
.SH SYNOPSIS
.B #include <sys/utsname.h>
.sp
.BI "int uname(struct utsname *" buf );
.SH DESCRIPTION
.BR uname ()
returns system information in the structure pointed to by
.IR buf .
The
.I utsname
struct is defined in
.IR <sys/utsname.h> :
.in +4n
.nf

struct utsname {
    char sysname[];    /* Operating system name (e.g., "Linux") */
    char nodename[];   /* Name within "some implementation-defined
                          network" */
    char release[];    /* Operating system release (e.g., "2.6.28") */
    char version[];    /* Operating system version */
    char machine[];    /* Hardware identifier */
#ifdef _GNU_SOURCE
    char domainname[]; /* NIS or YP domain name */
#endif
};

.fi
.in
The length of the arrays in a
.I struct utsname
is unspecified (see NOTES);
the fields are terminated by a null byte (\(aq\\0\(aq).
.SH RETURN VALUE
On success, zero is returned.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EFAULT
.I buf
is not valid.
.SH CONFORMING TO
SVr4, POSIX.1-2001.
There is no
.BR uname ()
call in 4.3BSD.
.PP
The
.I domainname
member (the NIS or YP domain name) is a GNU extension.
.SH NOTES
This is a system call, and the operating system presumably knows
its name, release and version.
It also knows what hardware it runs on.
So, four of the fields of the struct are meaningful.
On the other hand, the field
.I nodename
is meaningless:
it gives the name of the present machine in some undefined
network, but typically machines are in more than one network
and have several names.
Moreover, the kernel has no way of knowing
about such things, so it has to be told what to answer here.
The same holds for the additional
.I domainname
field.
.LP
To this end, Linux uses the system calls
.BR sethostname (2)
and
.BR setdomainname (2).
Note that there is no standard that says that the hostname set by
.BR sethostname (2)
is the same string as the
.I nodename
field of the struct returned by
.BR uname ()
(indeed, some systems allow a 256-byte hostname and an 8-byte nodename),
but this is true on Linux.
The same holds for
.BR setdomainname (2)
and the
.I domainname
field.
.LP
The length of the fields in the struct varies.
Some operating systems
or libraries use a hardcoded 9 or 33 or 65 or 257.
Other systems use
.B SYS_NMLN
or
.B _SYS_NMLN
or
.B UTSLEN
or
.BR _UTSNAME_LENGTH .
Clearly, it is a bad
idea to use any of these constants; just use sizeof(...).
Often 257 is chosen in order to have room for an internet hostname.
.LP
Part of the utsname information is also accessible via
.IR /proc/sys/kernel/ { ostype ,
.IR hostname ,
.IR osrelease ,
.IR version ,
.IR domainname }.
.SS C library/kernel ABI differences
.LP
Over time, increases in the size of the
.I utsname
structure have led to three successive versions of
.BR uname ():
.IR sys_olduname ()
(slot
.IR __NR_oldolduname ),
.IR sys_uname ()
(slot
.IR __NR_olduname ),
and
.IR sys_newuname ()
(slot
.IR __NR_uname) .
The first one
.\" That was back before Linux 1.0
used length 9 for all fields;
the second
.\" That was also back before Linux 1.0
used 65;
the third also uses 65 but adds the
.I domainname
field.
The glibc
.BR uname ()
wrapper function hides these details from applications,
invoking the most recent version of the system call provided by the kernel.
.SH SEE ALSO
.BR uname (1),
.BR getdomainname (2),
.BR gethostname (2),
.BR namespaces (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1995 Michael Chastain (mec@shell.portal.com), 15 April 1995.
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.\" Updated, aeb, 980612
.\"
.TH UNIMPLEMENTED 2 2013-02-12 "Linux" "Linux Programmer's Manual"
.SH NAME
afs_syscall, break, fattach, fdetach, ftime, getmsg, getpmsg, gtty, isastream,
lock, madvise1, mpx, prof, profil, putmsg, putpmsg, security,
stty, tuxcall, ulimit, vserver \- unimplemented system calls
.SH SYNOPSIS
Unimplemented system calls.
.SH DESCRIPTION
These system calls are not implemented in the Linux kernel.
.SH RETURN VALUE
These system calls always return \-1 and set
.I errno
to
.BR ENOSYS .
.SH NOTES
Note that
.BR ftime (3),
.BR profil (3),
and
.BR ulimit (3)
are implemented as library functions.

Some system calls, like
.BR alloc_hugepages (2),
.BR free_hugepages (2),
.BR ioperm (2),
.BR iopl (2),
and
.BR vm86 (2)
exist only on certain architectures.

Some system calls, like
.BR ipc (2),
.BR create_module (2),
.BR init_module (2),
and
.BR delete_module (2)
exist only when the Linux kernel was built with support for them.
.SH SEE ALSO
.BR syscalls (2)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" This manpage is Copyright (C) 1992 Drew Eckhardt;
.\"             and Copyright (C) 1993 Ian Jackson
.\"             and Copyright (C) 2006, 2014 Michael Kerrisk.
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified 1993-07-24 by Rik Faith <faith@cs.unc.edu>
.\" Modified 1996-09-08 by Arnt Gulbrandsen <agulbra@troll.no>
.\" Modified 1997-01-31 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified 2001-05-17 by aeb
.\" Modified 2004-06-23 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.TH UNLINK 2 2014-08-19 "Linux" "Linux Programmer's Manual"
.SH NAME
unlink, unlinkat \- delete a name and possibly the file it refers to
.SH SYNOPSIS
.nf
.B #include <unistd.h>
.sp
.BI "int unlink(const char *" pathname );
.sp
.BR "#include <fcntl.h>           " "/* Definition of AT_* constants */"
.B #include <unistd.h>
.sp
.BI "int unlinkat(int " dirfd ", const char *" pathname ", int " flags );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR unlinkat ():
.PD 0
.ad l
.RS 4
.TP 4
Since glibc 2.10:
_XOPEN_SOURCE\ >=\ 700 || _POSIX_C_SOURCE\ >=\ 200809L
.TP
Before glibc 2.10:
_ATFILE_SOURCE
.RE
.ad
.PD
.SH DESCRIPTION
.BR unlink ()
deletes a name from the filesystem.
If that name was the
last link to a file and no processes have the file open, the file is
deleted and the space it was using is made available for reuse.

If the name was the last link to a file but any processes still have
the file open, the file will remain in existence until the last file
descriptor referring to it is closed.

If the name referred to a symbolic link, the link is removed.

If the name referred to a socket, FIFO, or device, the name for it is
removed but processes which have the object open may continue to use
it.
.SS unlinkat()
The
.BR unlinkat ()
system call operates in exactly the same way as either
.BR unlink ()
or
.BR rmdir (2)
(depending on whether or not
.I flags
includes the
.B AT_REMOVEDIR
flag)
except for the differences described here.

If the pathname given in
.I pathname
is relative, then it is interpreted relative to the directory
referred to by the file descriptor
.I dirfd
(rather than relative to the current working directory of
the calling process, as is done by
.BR unlink ()
and
.BR rmdir (2)
for a relative pathname).

If the pathname given in
.I pathname
is relative and
.I dirfd
is the special value
.BR AT_FDCWD ,
then
.I pathname
is interpreted relative to the current working
directory of the calling process (like
.BR unlink ()
and
.BR rmdir (2)).

If the pathname given in
.I pathname
is absolute, then
.I dirfd
is ignored.

.I flags
is a bit mask that can either be specified as 0, or by ORing
together flag values that control the operation of
.BR unlinkat ().
Currently only one such flag is defined:
.TP
.B AT_REMOVEDIR
By default,
.BR unlinkat ()
performs the equivalent of
.BR unlink ()
on
.IR pathname .
If the
.B AT_REMOVEDIR
flag is specified, then
performs the equivalent of
.BR rmdir (2)
on
.IR pathname .
.PP
See
.BR openat (2)
for an explanation of the need for
.BR unlinkat ().
.SH RETURN VALUE
On success, zero is returned.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EACCES
Write access to the directory containing
.I pathname
is not allowed for the process's effective UID, or one of the
directories in
.I pathname
did not allow search permission.
(See also
.BR path_resolution (7).)
.TP
.BR EBUSY
The file
.I pathname
cannot be unlinked because it is being used by the system
or another process;
for example, it is a mount point
or the NFS client software created it to represent an
active but otherwise nameless inode ("NFS silly renamed").
.TP
.B EFAULT
.I pathname
points outside your accessible address space.
.TP
.B EIO
An I/O error occurred.
.TP
.B EISDIR
.I pathname
refers to a directory.
(This is the non-POSIX value returned by Linux since 2.1.132.)
.TP
.B ELOOP
Too many symbolic links were encountered in translating
.IR pathname .
.TP
.B ENAMETOOLONG
.IR pathname " was too long."
.TP
.B ENOENT
A component in
.I pathname
does not exist or is a dangling symbolic link, or
.I pathname
is empty.
.TP
.B ENOMEM
Insufficient kernel memory was available.
.TP
.B ENOTDIR
A component used as a directory in
.I pathname
is not, in fact, a directory.
.TP
.B EPERM
The system does not allow unlinking of directories,
or unlinking of directories requires privileges that the
calling process doesn't have.
(This is the POSIX prescribed error return;
as noted above, Linux returns
.B EISDIR
for this case.)
.TP
.BR EPERM " (Linux only)"
The filesystem does not allow unlinking of files.
.TP
.BR EPERM " or " EACCES
The directory containing
.I pathname
has the sticky bit
.RB ( S_ISVTX )
set and the process's effective UID is neither the UID of the file to
be deleted nor that of the directory containing it, and
the process is not privileged (Linux: does not have the
.B CAP_FOWNER
capability).
.TP
.B EROFS
.I pathname
refers to a file on a read-only filesystem.
.PP
The same errors that occur for
.BR unlink ()
and
.BR rmdir (2)
can also occur for
.BR unlinkat ().
The following additional errors can occur for
.BR unlinkat ():
.TP
.B EBADF
.I dirfd
is not a valid file descriptor.
.TP
.B EINVAL
An invalid flag value was specified in
.IR flags .
.TP
.B EISDIR
.I pathname
refers to a directory, and
.B AT_REMOVEDIR
was not specified in
.IR flags .
.TP
.B ENOTDIR
.I pathname
is relative and
.I dirfd
is a file descriptor referring to a file other than a directory.
.SH VERSIONS
.BR unlinkat ()
was added to Linux in kernel 2.6.16;
library support was added to glibc in version 2.4.
.SH CONFORMING TO
.BR unlink ():
SVr4, 4.3BSD, POSIX.1-2001, POSIX.1-2008.
.\" SVr4 documents additional error
.\" conditions EINTR, EMULTIHOP, ETXTBSY, ENOLINK.

.BR unlinkat ():
POSIX.1-2008.
.SH NOTES
.SS Glibc notes
On older kernels where
.BR unlinkat ()
is unavailable, the glibc wrapper function falls back to the use of
.BR unlink (2)
or
.BR rmdir (2).
When
.I pathname
is a relative pathname,
glibc constructs a pathname based on the symbolic link in
.IR /proc/self/fd
that corresponds to the
.IR dirfd
argument.
.SH BUGS
Infelicities in the protocol underlying NFS can cause the unexpected
disappearance of files which are still being used.
.SH SEE ALSO
.BR rm (1),
.BR chmod (2),
.BR link (2),
.BR mknod (2),
.BR open (2),
.BR rename (2),
.BR rmdir (2),
.BR mkfifo (3),
.BR remove (3),
.BR path_resolution (7),
.BR symlink (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2006, Janak Desai <janak@us.ibm.com>
.\" and Copyright (C) 2006, 2012 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(GPL_NOVERSION_ONELINE)
.\" Licensed under the GPL
.\" %%%LICENSE_END
.\"
.\" Patch Justification:
.\" unshare system call is needed to implement, using PAM,
.\" per-security_context and/or per-user namespace to provide
.\" polyinstantiated directories. Using unshare and bind mounts, a
.\" PAM module can create private namespace with appropriate
.\" directories(based on user's security context) bind mounted on
.\" public directories such as /tmp, thus providing an instance of
.\" /tmp that is based on user's security context. Without the
.\" unshare system call, namespace separation can only be achieved
.\" by clone, which would require porting and maintaining all commands
.\" such as login, and su, that establish a user session.
.\"
.TH UNSHARE 2 2015-04-19 "Linux" "Linux Programmer's Manual"
.SH NAME
unshare \- disassociate parts of the process execution context
.SH SYNOPSIS
.nf
.B #include <sched.h>
.sp
.BI "int unshare(int " flags );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR unshare ():
.ad l
.RS 4
.PD 0
.TP 4
Since glibc 2.14:
_GNU_SOURCE
.TP 4
.\" See http://sources.redhat.com/bugzilla/show_bug.cgi?id=4749
Before glibc 2.14:
_BSD_SOURCE || _SVID_SOURCE
    /* _GNU_SOURCE also suffices */
.PD
.RE
.ad b
.SH DESCRIPTION
.BR unshare ()
allows a process (or thread) to disassociate parts of its execution
context that are currently being shared with other processes or threads).
Part of the execution context, such as the mount namespace, is shared
implicitly when a new process is created using
.BR fork (2)
or
.BR vfork (2),
while other parts, such as virtual memory, may be
shared by explicit request when creating a process or thread using
.BR clone (2).

The main use of
.BR unshare ()
is to allow a process to control its
shared execution context without creating a new process.

The
.I flags
argument is a bit mask that specifies which parts of
the execution context should be unshared.
This argument is specified by ORing together zero or more
of the following constants:
.TP
.B CLONE_FILES
Reverse the effect of the
.BR clone (2)
.B CLONE_FILES
flag.
Unshare the file descriptor table, so that the calling process
no longer shares its file descriptors with any other process.
.TP
.B CLONE_FS
Reverse the effect of the
.BR clone (2)
.B CLONE_FS
flag.
Unshare filesystem attributes, so that the calling process
no longer shares its root directory
.RB ( chroot (2)),
current directory
.RB ( chdir (2)),
or umask
.RB ( umask (2))
attributes with any other process.
.TP
.BR CLONE_NEWIPC " (since Linux 2.6.19)
This flag has the same effect as the
.BR clone (2)
.B CLONE_NEWIPC
flag.
Unshare the IPC namespace,
so that the calling process has a private copy of the
IPC namespace which is not shared with any other process.
Specifying this flag automatically implies
.BR CLONE_SYSVSEM
as well.
Use of
.BR CLONE_NEWIPC
requires the
.BR CAP_SYS_ADMIN
capability.
.TP
.BR CLONE_NEWNET " (since Linux 2.6.24)
This flag has the same effect as the
.BR clone (2)
.B CLONE_NEWNET
flag.
Unshare the network namespace,
so that the calling process is moved into a
new network namespace which is not shared
with any previously existing process.
Use of
.BR CLONE_NEWNET
requires the
.BR CAP_SYS_ADMIN
capability.
.TP
.B CLONE_NEWNS
.\" These flag name are inconsistent:
.\" CLONE_NEWNS does the same thing in clone(), but CLONE_VM,
.\" CLONE_FS, and CLONE_FILES reverse the action of the clone()
.\" flags of the same name.
This flag has the same effect as the
.BR clone (2)
.B CLONE_NEWNS
flag.
Unshare the mount namespace,
so that the calling process has a private copy of
its namespace which is not shared with any other process.
Specifying this flag automatically implies
.B CLONE_FS
as well.
Use of
.BR CLONE_NEWNS
requires the
.BR CAP_SYS_ADMIN
capability.
.TP
.BR CLONE_NEWPID " (since Linux 3.8)"
This flag has the same effect as the
.BR clone (2)
.B CLONE_NEWPID
flag.
Unshare the PID namespace,
so that the calling process has a new PID namespace for its children
which is not shared with any previously existing process.
The calling process is
.I not
moved into the new namespace.
The first child created by the calling process will have
the process ID 1 and will assume the role of
.BR init (1)
in the new namespace.
.BR CLONE_NEWPID
automatically implies
.BR CLONE_THREAD
as well.
Use of
.BR CLONE_NEWPID
requires the
.BR CAP_SYS_ADMIN
capability.
For further information, see
.BR pid_namespaces (7).
.TP
.BR CLONE_NEWUSER " (since Linux 3.8)"
This flag has the same effect as the
.BR clone (2)
.B CLONE_NEWUSER
flag.
Unshare the user namespace,
so that the calling process is moved into a new user namespace
which is not shared with any previously existing process.
As with the child process created by
.BR clone (2)
with the
.B CLONE_NEWUSER
flag, the caller obtains a full set of capabilities in the new namespace.
.IP
.BR CLONE_NEWUSER
requires that the calling process is not threaded; specifying
.BR CLONE_NEWUSER
automatically implies
.BR CLONE_THREAD .
Since Linux 3.9,
.\" commit e66eded8309ebf679d3d3c1f5820d1f2ca332c71
.\" https://lwn.net/Articles/543273/
.BR CLONE_NEWUSER
also automatically implies
.BR CLONE_FS .
.BR CLONE_NEWUSER
requires that the user ID and group ID
of the calling process are mapped to user IDs and group IDs in the
user namespace of the calling process at the time of the call.

For further information on user namespaces, see
.BR user_namespaces (7).
.TP
.BR CLONE_NEWUTS " (since Linux 2.6.19)"
This flag has the same effect as the
.BR clone (2)
.B CLONE_NEWUTS
flag.
Unshare the UTS IPC namespace,
so that the calling process has a private copy of the
UTS namespace which is not shared with any other process.
Use of
.BR CLONE_NEWUTS
requires the
.BR CAP_SYS_ADMIN
capability.
.TP
.BR CLONE_SYSVSEM " (since Linux 2.6.26)
.\" commit 9edff4ab1f8d82675277a04e359d0ed8bf14a7b7
This flag reverses the effect of the
.BR clone (2)
.B CLONE_SYSVSEM
flag.
Unshare System\ V semaphore adjustment
.RI ( semadj )
values,
so that the calling process has a new empty
.I semadj
list that is not shared with any other process.
If this is the last process that has a reference to the process's current
.I semadj
list, then the adjustments in that list are applied
to the corresponding semaphores, as described in
.BR semop (2).
.\" CLONE_NEWNS If CLONE_SIGHAND is set and signals are also being shared
.\" (i.e., current->signal->count > 1), force CLONE_THREAD.
.PP
In addition,
.BR CLONE_THREAD ,
.BR CLONE_SIGHAND ,
and
.BR CLONE_VM
can be specified in
.I flags
if the caller is single threaded (i.e., it is not sharing
its address space with another process or thread).
In this case, these flags have no effect.
(Note also that specifying
.BR CLONE_THREAD
automatically implies
.BR CLONE_VM ,
and specifying
.BR CLONE_VM
automatically implies
.BR CLONE_SIGHAND .)
.\" As at 3.9, the following forced implications also apply,
.\" although the relevant flags are not yet implemented.
.\" If CLONE_THREAD is set force CLONE_VM.
.\" If CLONE_VM is set, force CLONE_SIGHAND.
.\"
If the process is multithreaded, then
the use of these flags results in an error.
.\" See kernel/fork.c::check_unshare_flags()
.PP
If
.I flags
is specified as zero, then
.BR unshare ()
is a no-op;
no changes are made to the calling process's execution context.
.SH RETURN VALUE
On success, zero returned.
On failure, \-1 is returned and
.I errno
is set to indicate the error.
.SH ERRORS
.TP
.B EINVAL
An invalid bit was specified in
.IR flags .
.TP
.B EINVAL
.BR CLONE_THREAD ,
.BR CLONE_SIGHAND ,
or
.BR CLONE_VM
was specified in
.IR flags ,
and the caller is multithreaded.
.TP
.B ENOMEM
Cannot allocate sufficient memory to copy parts of caller's
context that need to be unshared.
.TP
.B EPERM
The calling process did not have the required privileges for this operation.
.TP
.B EPERM
.BR CLONE_NEWUSER
was specified in
.IR flags ,
but either the effective user ID or the effective group ID of the caller
does not have a mapping in the parent namespace (see
.BR user_namespaces (7)).
.TP
.BR EPERM " (since Linux 3.9)"
.\" commit 3151527ee007b73a0ebd296010f1c0454a919c7d
.B CLONE_NEWUSER
was specified in
.I flags
and the caller is in a chroot environment
.\" FIXME What is the rationale for this restriction?
(i.e., the caller's root directory does not match the root directory
of the mount namespace in which it resides).
.TP
.BR EUSERS " (since Linux 3.11)"
.B CLONE_NEWUSER
was specified in
.IR flags ,
and the call would cause the limit on the number of
nested user namespaces to be exceeded.
See
.BR user_namespaces (7).
.SH VERSIONS
The
.BR unshare ()
system call was added to Linux in kernel 2.6.16.
.SH CONFORMING TO
The
.BR unshare ()
system call is Linux-specific.
.SH NOTES
Not all of the process attributes that can be shared when
a new process is created using
.BR clone (2)
can be unshared using
.BR unshare ().
In particular, as at kernel 3.8,
.\" FIXME all of the following needs to be reviewed for the current kernel
.BR unshare ()
does not implement flags that reverse the effects of
.BR CLONE_SIGHAND ,
.\" However, we can do unshare(CLONE_SIGHAND) if CLONE_SIGHAND
.\" was not specified when doing clone(); i.e., unsharing
.\" signal handlers is permitted if we are not actually
.\" sharing signal handlers.   mtk
.BR CLONE_THREAD ,
or
.BR CLONE_VM .
.\" However, we can do unshare(CLONE_VM) if CLONE_VM
.\" was not specified when doing clone(); i.e., unsharing
.\" virtual memory is permitted if we are not actually
.\" sharing virtual memory.   mtk
Such functionality may be added in the future, if required.
.\"
.\"9) Future Work
.\"--------------
.\"The current implementation of unshare does not allow unsharing of
.\"signals and signal handlers. Signals are complex to begin with and
.\"to unshare signals and/or signal handlers of a currently running
.\"process is even more complex. If in the future there is a specific
.\"need to allow unsharing of signals and/or signal handlers, it can
.\"be incrementally added to unshare without affecting legacy
.\"applications using unshare.
.\"
.SH EXAMPLE
The program below provides a simple implementation of the
.BR unshare (1)
command, which unshares one or more namespaces and executes the
command supplied in its command-line arguments.
Here's an example of the use of this program,
running a shell in a new mount namespace,
and verifying that the original shell and the
new shell are in separate mount namespaces:
.in +4n
.nf

$ \fBreadlink /proc/$$/ns/mnt\fP
mnt:[4026531840]
$ \fBsudo ./unshare -m /bin/bash\fP
[sudo] password for cecilia:
# \fBreadlink /proc/$$/ns/mnt\fP
mnt:[4026532325]
.fi
.in

The differing output of the two
.BR readlink (1)
commands shows that the two shells are in different mount namespaces.
.SS Program source
\&
.nf
/* unshare.c

   A simple implementation of the unshare(1) command: unshare
   namespaces and execute a command.
*/
#define _GNU_SOURCE
#include <sched.h>
#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>

/* A simple error\-handling function: print an error message based
   on the value in \(aqerrno\(aq and terminate the calling process */

#define errExit(msg)    do { perror(msg); exit(EXIT_FAILURE); \\
                        } while (0)

static void
usage(char *pname)
{
    fprintf(stderr, "Usage: %s [options] program [arg...]\\n", pname);
    fprintf(stderr, "Options can be:\\n");
    fprintf(stderr, "    \-i   unshare IPC namespace\\n");
    fprintf(stderr, "    \-m   unshare mount namespace\\n");
    fprintf(stderr, "    \-n   unshare network namespace\\n");
    fprintf(stderr, "    \-p   unshare PID namespace\\n");
    fprintf(stderr, "    \-u   unshare UTS namespace\\n");
    fprintf(stderr, "    \-U   unshare user namespace\\n");
    exit(EXIT_FAILURE);
}

int
main(int argc, char *argv[])
{
    int flags, opt;

    flags = 0;

    while ((opt = getopt(argc, argv, "imnpuU")) != \-1) {
        switch (opt) {
        case \(aqi\(aq: flags |= CLONE_NEWIPC;        break;
        case \(aqm\(aq: flags |= CLONE_NEWNS;         break;
        case \(aqn\(aq: flags |= CLONE_NEWNET;        break;
        case \(aqp\(aq: flags |= CLONE_NEWPID;        break;
        case \(aqu\(aq: flags |= CLONE_NEWUTS;        break;
        case \(aqU\(aq: flags |= CLONE_NEWUSER;       break;
        default:  usage(argv[0]);
        }
    }

    if (optind >= argc)
        usage(argv[0]);

    if (unshare(flags) == \-1)
        errExit("unshare");

    execvp(argv[optind], &argv[optind]);
    errExit("execvp");
}
.fi
.SH SEE ALSO
.BR unshare (1),
.BR clone (2),
.BR fork (2),
.BR kcmp (2),
.BR setns (2),
.BR vfork (2),
.BR namespaces (7)

.I Documentation/unshare.txt
in the Linux kernel source tree
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1992 Drew Eckhardt (drew@cs.colorado.edu), March 28, 1992
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified by Michael Haardt <michael@moria.de>
.\" Modified 1993-07-24 by Rik Faith <faith@cs.unc.edu>
.\" Modified 1996-10-22 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified 2004-06-23 by Michael Kerrisk <mtk16@ext.canterbury.ac.nz>
.\" Modified 2005-01-09 by aeb
.\"
.TH USELIB 2 2005-01-09 "Linux" "Linux Programmer's Manual"
.SH NAME
uselib \- load shared library
.SH SYNOPSIS
.B #include <unistd.h>
.sp
.BI "int uselib(const char *" library );
.SH DESCRIPTION
The system call
.BR uselib ()
serves to load
a shared library to be used by the calling process.
It is given a pathname.
The address where to load is found
in the library itself.
The library can have any recognized
binary format.
.SH RETURN VALUE
On success, zero is returned.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
In addition to all of the error codes returned by
.BR open (2)
and
.BR mmap (2),
the following may also be returned:
.TP
.B EACCES
The library specified by
.I library
does not have read or execute permission, or the caller does not have
search permission for one of the directories in the path prefix.
(See also
.BR path_resolution (7).)
.TP
.B ENFILE
The system limit on the total number of open files has been reached.
.TP
.B ENOEXEC
The file specified by
.I library
is not an executable of a known type;
for example, it does not have the correct magic numbers.
.SH CONFORMING TO
.BR uselib ()
is Linux-specific, and should not be used in programs
intended to be portable.
.SH NOTES
.BR uselib ()
was used by early libc startup code to load
the shared libraries with names found in an array of names
in the binary.
.LP
.\" libc 4.3.1f - changelog 1993-03-02
Since libc 4.3.2, startup code tries to prefix these names
with "/usr/lib", "/lib" and "" before giving up.
.\" libc 4.3.4 - changelog 1993-04-21
In libc 4.3.4 and later these names are looked for in the directories
found in
.BR LD_LIBRARY_PATH ,
and if not found there,
prefixes "/usr/lib", "/lib" and "/" are tried.
.LP
From libc 4.4.4 on only the library "/lib/ld.so" is loaded,
so that this dynamic library can load the remaining libraries needed
(again using this call).
This is also the state of affairs in libc5.
.LP
glibc2 does not use this call.
.SH SEE ALSO
.BR ar (1),
.BR gcc (1),
.BR ld (1),
.BR ldd (1),
.BR mmap (2),
.BR open (2),
.BR dlopen (3),
.BR capabilities (7),
.BR ld.so (8)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 1995, Thomas K. Dyas <tdyas@eden.rutgers.edu>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Created  1995-08-09 Thomas K. Dyas <tdyas@eden.rutgers.edu>
.\" Modified 1997-01-31 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified 2001-03-22 by aeb
.\" Modified 2003-08-04 by aeb
.\"
.TH USTAT 2 2003-08-04 "Linux" "Linux Programmer's Manual"
.SH NAME
ustat \- get filesystem statistics
.SH SYNOPSIS
.nf
.B #include <sys/types.h>
.br
.BR "#include <unistd.h>" "    /* libc[45] */"
.br
.BR "#include <ustat.h>" "     /* glibc2 */"
.sp
.BI "int ustat(dev_t " dev ", struct ustat *" ubuf );
.fi
.SH DESCRIPTION
.BR ustat ()
returns information about a mounted filesystem.
.I dev
is a device number identifying a device containing
a mounted filesystem.
.I ubuf
is a pointer to a
.I ustat
structure that contains the following
members:
.in +4n
.nf

daddr_t f_tfree;      /* Total free blocks */
ino_t   f_tinode;     /* Number of free inodes */
char    f_fname[6];   /* Filsys name */
char    f_fpack[6];   /* Filsys pack name */
.fi
.in
.PP
The last two fields,
.I f_fname
and
.IR f_fpack ,
are not implemented and will
always be filled with null bytes (\(aq\\0\(aq).
.SH RETURN VALUE
On success, zero is returned and the
.I ustat
structure pointed to by
.I ubuf
will be filled in.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EFAULT
.I ubuf
points outside of your accessible address space.
.TP
.B EINVAL
.I dev
does not refer to a device containing a mounted filesystem.
.TP
.B ENOSYS
The mounted filesystem referenced by
.I dev
does not support this operation, or any version of Linux before
1.3.16.
.SH CONFORMING TO
SVr4.
.\" SVr4 documents additional error conditions ENOLINK, ECOMM, and EINTR
.\" but has no ENOSYS condition.
.SH NOTES
.BR ustat ()
is deprecated and has been provided only for compatibility.
All new programs should use
.BR statfs (2)
instead.
.SS HP-UX notes
The HP-UX version of the
.I ustat
structure has an additional field,
.IR f_blksize ,
that is unknown elsewhere.
HP-UX warns:
For some filesystems, the number of free inodes does not change.
Such filesystems will return \-1 in the field
.IR f_tinode .
.\" Some software tries to use this in order to test whether the
.\" underlying filesystem is NFS.
For some filesystems, inodes are dynamically allocated.
Such filesystems will return the current number of free inodes.
.SH SEE ALSO
.BR stat (2),
.BR statfs (2)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1992 Drew Eckhardt (drew@cs.colorado.edu), March 28, 1992
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified by Michael Haardt <michael@moria.de>
.\" Modified 1993-07-24 by Rik Faith <faith@cs.unc.edu>
.\" Modified 1995-06-10 by Andries Brouwer <aeb@cwi.nl>
.\" Modified 2004-06-23 by Michael Kerrisk <mtk.manpages@gmail.com>
.\" Modified 2004-10-10 by Andries Brouwer <aeb@cwi.nl>
.\"
.TH UTIME 2 2014-08-19 "Linux" "Linux Programmer's Manual"
.SH NAME
utime, utimes \- change file last access and modification times
.SH SYNOPSIS
.nf
.B #include <sys/types.h>
.br
.B #include <utime.h>
.sp
.BI "int utime(const char *" filename ", const struct utimbuf *" times );
.sp
.B #include <sys/time.h>
.sp
.BI "int utimes(const char *" filename ", const struct timeval " times [2]);
.fi
.SH DESCRIPTION
.B Note:
modern applications may prefer to use the interfaces described in
.BR utimensat (2).

The
.BR utime ()
system call
changes the access and modification times of the inode specified by
.I filename
to the
.IR actime " and " modtime
fields of
.I times
respectively.

If
.I times
is NULL, then the access and modification times of the file are set
to the current time.

Changing timestamps is permitted when: either
the process has appropriate privileges,
or the effective user ID equals the user ID
of the file, or
.I times
is NULL and the process has write permission for the file.

The
.I utimbuf
structure is:

.in +4n
.nf
struct utimbuf {
    time_t actime;       /* access time */
    time_t modtime;      /* modification time */
};
.fi
.in

The
.BR utime ()
system call
allows specification of timestamps with a resolution of 1 second.

The
.BR utimes ()
system call
is similar, but the
.I times
argument refers to an array rather than a structure.
The elements of this array are
.I timeval
structures, which allow a precision of 1 microsecond for specifying timestamps.
The
.I timeval
structure is:

.in +4n
.nf
struct timeval {
    long tv_sec;        /* seconds */
    long tv_usec;       /* microseconds */
};
.fi
.in
.PP
.IR times [0]
specifies the new access time, and
.IR times [1]
specifies the new modification time.
If
.I times
is NULL, then analogously to
.BR utime (),
the access and modification times of the file are
set to the current time.
.SH RETURN VALUE
On success, zero is returned.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EACCES
Search permission is denied for one of the directories in
the path prefix of
.I path
(see also
.BR path_resolution (7)).
.TP
.B EACCES
.I times
is NULL,
the caller's effective user ID does not match the owner of the file,
the caller does not have write access to the file,
and the caller is not privileged
(Linux: does not have either the
.B CAP_DAC_OVERRIDE
or the
.B CAP_FOWNER
capability).
.TP
.B ENOENT
.I filename
does not exist.
.TP
.B EPERM
.I times
is not NULL,
the caller's effective UID does not match the owner of the file,
and the caller is not privileged
(Linux: does not have the
.B CAP_FOWNER
capability).
.TP
.B EROFS
.I path
resides on a read-only filesystem.
.SH CONFORMING TO
.BR utime ():
SVr4, POSIX.1-2001.
POSIX.1-2008 marks
.BR utime ()
as obsolete.
.br
.BR utimes ():
4.3BSD, POSIX.1-2001.
.SH NOTES
Linux does not allow changing the timestamps on an immutable file,
or setting the timestamps to something other than the current time
on an append-only file.
.\"
.\" In libc4 and libc5,
.\" .BR utimes ()
.\" is just a wrapper for
.\" .BR utime ()
.\" and hence does not allow a subsecond resolution.
.SH SEE ALSO
.BR chattr (1),
.BR futimesat (2),
.BR stat (2),
.BR utimensat (2),
.BR futimens (3),
.BR futimes (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2008, Linux Foundation, written by Michael Kerrisk
.\" <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH UTIMENSAT 2 2015-01-22 "Linux" "Linux Programmer's Manual"
.SH NAME
utimensat, futimens \- change file timestamps with nanosecond precision
.SH SYNOPSIS
.nf
.B #include <fcntl.h>           /* Definition of AT_* constants */
.B #include <sys/stat.h>
.sp
.BI "int utimensat(int " dirfd ", const char *" pathname ,
.BI "              const struct timespec " times "[2], int " flags );

.BI "int futimens(int " fd ", const struct timespec " times [2]);
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.ad l
.PD 0
.sp
.BR utimensat ():
.RS 4
.TP 4
Since glibc 2.10:
_XOPEN_SOURCE\ >=\ 700 || _POSIX_C_SOURCE\ >=\ 200809L
.TP
Before glibc 2.10:
_ATFILE_SOURCE
.RE
.PP
.BR futimens ():
.RS 4
.TP
Since glibc 2.10:
_XOPEN_SOURCE\ >=\ 700 || _POSIX_C_SOURCE\ >=\ 200809L
.TP
Before glibc 2.10:
_GNU_SOURCE
.RE
.PD
.ad
.SH DESCRIPTION
.BR utimensat ()
and
.BR futimens ()
update the timestamps of a file with nanosecond precision.
This contrasts with the historical
.BR utime (2)
and
.BR utimes (2),
which permit only second and microsecond precision, respectively,
when setting file timestamps.

With
.BR utimensat ()
the file is specified via the pathname given in
.IR pathname .
With
.BR futimens ()
the file whose timestamps are to be updated is specified via
an open file descriptor,
.IR fd .

For both calls, the new file timestamps are specified in the array
.IR times :
.IR times [0]
specifies the new "last access time" (\fIatime\fP);
.IR times [1]
specifies the new "last modification time" (\fImtime\fP).
Each of the elements of
.I times
specifies a time as the number of seconds and nanoseconds
since the Epoch, 1970-01-01 00:00:00 +0000 (UTC).
This information is conveyed in a structure of the following form:
.in +4n
.nf

struct timespec {
    time_t tv_sec;        /* seconds */
    long   tv_nsec;       /* nanoseconds */
};
.fi
.in
.PP
Updated file timestamps are set to the greatest value
supported by the filesystem that is not greater than the specified time.

If the
.I tv_nsec
field of one of the
.I timespec
structures has the special value
.BR UTIME_NOW ,
then the corresponding file timestamp is set to the current time.
If the
.I tv_nsec
field of one of the
.I timespec
structures has the special value
.BR UTIME_OMIT ,
then the corresponding file timestamp is left unchanged.
In both of these cases, the value of the corresponding
.I tv_sec
.\" 2.6.22 was broken: it is not ignored
field is ignored.

If
.I times
is NULL, then both timestamps are set to the current time.
.\"
.SS Permissions requirements
To set both file timestamps to the current time (i.e.,
.I times
is NULL, or both
.I tv_nsec
fields specify
.BR UTIME_NOW ),
either:
.IP 1. 3
the caller must have write access to the file;
.\" 2.6.22 was broken here -- for futimens() the check is
.\" based on whether or not the file descriptor is writable,
.\" not on whether the caller's effective UID has write
.\" permission for the file referred to by the descriptor.
.IP 2.
the caller's effective user ID must match the owner of the file; or
.IP 3.
the caller must have appropriate privileges.
.PP
To make any change other than setting both timestamps to the
current time (i.e.,
.I times
is not NULL, and neither
.I tv_nsec
field is
.B UTIME_NOW
.\" 2.6.22 was broken here:
.\" both must be something other than *either* UTIME_OMIT *or* UTIME_NOW.
and neither
.I tv_nsec
field is
.BR UTIME_OMIT ),
either condition 2 or 3 above must apply.

If both
.I tv_nsec
fields are specified as
.BR UTIME_OMIT ,
then no file ownership or permission checks are performed,
and the file timestamps are not modified,
but other error conditions may still be detected.
.\"
.\"
.SS utimensat() specifics
If
.I pathname
is relative, then by default it is interpreted relative to the
directory referred to by the open file descriptor,
.IR dirfd
(rather than relative to the current working directory of
the calling process, as is done by
.BR utimes (2)
for a relative pathname).
See
.BR openat (2)
for an explanation of why this can be useful.
.\" FIXME . Say something about O_SEARCH?  (But it's not in current
.\" glibc (Mar 08), or kernel 2.6.25.)

If
.I pathname
is relative and
.I dirfd
is the special value
.BR AT_FDCWD ,
then
.I pathname
is interpreted relative to the current working
directory of the calling process (like
.BR utimes (2)).

If
.I pathname
is absolute, then
.I dirfd
is ignored.

The
.I flags
field is a bit mask that may be 0, or include the following constant,
defined in
.IR <fcntl.h> :
.TP
.B AT_SYMLINK_NOFOLLOW
If
.I pathname
specifies a symbolic link, then update the timestamps of the link,
rather than the file to which it refers.
.SH RETURN VALUE
On success,
.BR utimensat ()
and
.BR futimens ()
return 0.
On error, \-1 is returned and
.I errno
is set to indicate the error.
.SH ERRORS
.TP
.B EACCES
.I times
is NULL,
or both
.I tv_nsec
values are
.BR UTIME_NOW ,
and:
.PD 0
.RS
.IP * 2
the effective user ID of the caller does not match
the owner of the file,
the caller does not have write access to the file,
and the caller is not privileged
(Linux: does not have either the
.B CAP_FOWNER
or the
.B CAP_DAC_OVERRIDE
capability); or,
.\" But Linux 2.6.22 was broken here.
.\" Traditionally, utime()/utimes() gives the error EACCES for the case
.\" where the timestamp pointer argument is NULL (i.e., set both timestamps
.\" to the current time), and the file is owned by a user other than the
.\" effective UID of the caller, and the file is not writable by the
.\" effective UID of the program.  utimensat() also gives this error in the
.\" same case.  However, in the same circumstances, when utimensat() is
.\" given a 'times' array in which both tv_nsec fields are UTIME_NOW, which
.\" provides equivalent functionality to specifying 'times' as NULL, the
.\" call succeeds.  It should fail with the error EACCES in this case.
.\"
.\" POSIX.1-2008 has the following:
.\" .TP
.\" .B EACCES
.\" .RB ( utimensat ())
.\" .I fd
.\" was not opened with
.\" .B O_SEARCH
.\" and the permissions of the directory to which
.\" .I fd
.\" refers do not allow searches.
.IP *
the file is marked immutable (see
.BR chattr (1)).
.\" EXT2_IMMUTABLE_FL and similar flags for other filesystems.
.RE
.PD
.TP
.B EBADF
.RB ( futimens ())
.I fd
is not a valid file descriptor.
.TP
.B EBADF
.RB ( utimensat ())
.I pathname
is a relative pathname, but
.I dirfd
is neither
.BR AT_FDCWD
nor a valid file descriptor.
.TP
.B EFAULT
.I times
pointed to an invalid address; or,
.I dirfd
was
.BR AT_FDCWD ,
and
.I pathname
is NULL or an invalid address.
.TP
.B EINVAL
Invalid value in
.IR flags .
.TP
.B EINVAL
Invalid value in one of the
.I tv_nsec
fields (value outside range 0 to 999,999,999, and not
.B UTIME_NOW
or
.BR UTIME_OMIT );
or an invalid value in one of the
.I tv_sec
fields.
.TP
.B EINVAL
.\" SUSv4 does not specify this error.
.I pathname
is NULL,
.I dirfd
is not
.BR AT_FDCWD ,
and
.I flags
contains
.BR AT_SYMLINK_NOFOLLOW .
.TP
.B ELOOP
.RB ( utimensat ())
Too many symbolic links were encountered in resolving
.IR pathname .
.TP
.B ENAMETOOLONG
.RB ( utimensat ())
.I pathname
is too long.
.TP
.B ENOENT
.RB ( utimensat ())
A component of
.I pathname
does not refer to an existing directory or file,
or
.I pathname
is an empty string.
.TP
.B ENOTDIR
.RB ( utimensat ())
.I pathname
is a relative pathname, but
.I dirfd
is neither
.B AT_FDCWD
nor a file descriptor referring to a directory;
or, one of the prefix components of
.I pathname
is not a directory.
.TP
.B EPERM
The caller attempted to change one or both timestamps to a value
other than the current time,
or to change one of the timestamps to the current time while
leaving the other timestamp unchanged,
(i.e.,
.I times
is not NULL, neither
.I tv_nsec
field is
.BR UTIME_NOW ,
and neither
.I tv_nsec
field is
.BR UTIME_OMIT )
and:
.PD 0
.RS
.IP * 2
the caller's effective user ID does not match the owner of file,
and the caller is not privileged
(Linux: does not have the
.BR CAP_FOWNER
capability); or,
.IP *
.\" Linux 2.6.22 was broken here:
.\" it was not consistent with the old utimes() implementation,
.\" since the case when both tv_nsec fields are UTIME_NOW, was not
.\" treated like the (times == NULL) case.
the file is marked append-only or immutable (see
.BR chattr (1)).
.\" EXT2_IMMUTABLE_FL EXT_APPPEND_FL and similar flags for
.\" other filesystems.
.\"
.\" Why the inconsistency (which is described under NOTES) between
.\" EACCES and EPERM, where only EPERM tests for append-only.
.\" (This was also so for the older utimes() implementation.)
.RE
.PD
.TP
.B EROFS
The file is on a read-only filesystem.
.TP
.B ESRCH
.RB ( utimensat ())
Search permission is denied for one of the prefix components of
.IR pathname .
.SH VERSIONS
.BR utimensat ()
was added to Linux in kernel 2.6.22;
glibc support was added with version 2.6.

Support for
.BR futimens ()
first appeared in glibc 2.6.
.SH CONFORMING TO
.BR futimens ()
and
.BR utimensat ()
are specified in POSIX.1-2008.
.SH NOTES
.BR utimensat ()
obsoletes
.BR futimesat (2).

On Linux, timestamps cannot be changed for a file marked immutable,
and the only change permitted for files marked append-only is to
set the timestamps to the current time.
(This is consistent with the historical behavior of
.BR utime (2)
and
.BR utimes (2)
on Linux.)

On Linux,
.BR futimens ()
is a library function implemented on top of the
.BR utimensat ()
system call.
To support this, the Linux
.BR utimensat ()
system call implements a nonstandard feature: if
.I pathname
is NULL, then the call modifies the timestamps of
the file referred to by the file descriptor
.I dirfd
(which may refer to any type of file).
Using this feature, the call
.I "futimens(fd,\ times)"
is implemented as:
.nf

    utimensat(fd, NULL, times, 0);
.fi

If both
.I tv_nsec
fields are specified as
.BR UTIME_OMIT ,
then the Linux implementation of
.BR utimensat ()
succeeds even if the file referred to by
.IR dirfd
and
.I pathname
does not exist.
.SH BUGS
Several bugs afflict
.BR utimensat ()
and
.BR futimens ()
on kernels before 2.6.26.
These bugs are either nonconformances with the POSIX.1 draft specification
or inconsistencies with historical Linux behavior.
.IP * 2
POSIX.1 specifies that if one of the
.I tv_nsec
fields has the value
.B UTIME_NOW
or
.BR UTIME_OMIT ,
then the value of the corresponding
.I tv_sec
field should be ignored.
Instead, the value of the
.I tv_sec
field is required to be 0 (or the error
.B EINVAL
results).
.IP *
Various bugs mean that for the purposes of permission checking,
the case where both
.I tv_nsec
fields are set to
.BR UTIME_NOW
isn't always treated the same as specifying
.I times
as NULL,
and the case where one
.I tv_nsec
value is
.B UTIME_NOW
and the other is
.B UTIME_OMIT
isn't treated the same as specifying
.I times
as a pointer to an array of structures containing arbitrary time values.
As a result, in some cases:
a) file timestamps can be updated by a process that shouldn't have
permission to perform updates;
b) file timestamps can't be updated by a process that should have
permission to perform updates; and
c) the wrong
.I errno
value is returned in case of an error.
.\" Below, the long description of the errors from the previous bullet
.\" point (abridged because it's too much detail for a man page).
.\" .IP *
.\" If one of the
.\" .I tv_nsec
.\" fields is
.\" .BR UTIME_OMIT
.\" and the other is
.\" .BR UTIME_NOW ,
.\" then the error
.\" .B EPERM
.\" should occur if the process's effective user ID does not match
.\" the file owner and the process is not privileged.
.\" Instead, the call successfully changes one of the timestamps.
.\" .IP *
.\" If file is not writable by the effective user ID of the process and
.\" the process's effective user ID does not match the file owner and
.\" the process is not privileged,
.\" and
.\" .I times
.\" is NULL, then the error
.\" .B EACCES
.\" results.
.\" This error should also occur if
.\" .I times
.\" points to an array of structures in which both
.\" .I tv_nsec
.\" fields are
.\" .BR UTIME_NOW .
.\" Instead the call succeeds.
.\" .IP *
.\" If a file is marked as append-only (see
.\" .BR chattr (1)),
.\" then Linux traditionally
.\" (i.e.,
.\" .BR utime (2),
.\" .BR utimes (2)),
.\" permits a NULL
.\" .I times
.\" argument to be used in order to update both timestamps to the current time.
.\" For consistency,
.\" .BR utimensat ()
.\" and
.\" .BR futimens ()
.\" should also produce the same result when given a
.\" .I times
.\" argument that points to an array of structures in which both
.\" .I tv_nsec
.\" fields are
.\" .BR UTIME_NOW .
.\" Instead, the call fails with the error
.\" .BR EPERM .
.\" .IP *
.\" If a file is marked as immutable (see
.\" .BR chattr (1)),
.\" then Linux traditionally
.\" (i.e.,
.\" .BR utime (2),
.\" .BR utimes (2)),
.\" gives an
.\" .B EACCES
.\" error if
.\" .I times
.\" is NULL.
.\" For consistency,
.\" .BR utimensat ()
.\" and
.\" .BR futimens ()
.\" should also produce the same result when given a
.\" .I times
.\" that points to an array of structures in which both
.\" .I tv_nsec
.\" fields are
.\" .BR UTIME_NOW .
.\" Instead, the call fails with the error
.\" .BR EPERM .
.IP *
POSIX.1 says that a process that has \fIwrite access to the file\fP
can make a call with
.I times
as NULL, or with
.I times
pointing to an array of structures in which both
.I tv_nsec
fields are
.BR UTIME_NOW ,
in order to update both timestamps to the current time.
However,
.BR futimens ()
instead checks whether the
.IR "access mode of the file descriptor allows writing" .
.\" This means that a process with a file descriptor that allows
.\" writing could change the timestamps of a file for which it
.\" does not have write permission;
.\" conversely, a process with a read-only file descriptor won't
.\" be able to update the timestamps of a file,
.\" even if it has write permission on the file.
.SH SEE ALSO
.BR chattr (1),
.BR futimesat (2),
.BR openat (2),
.BR stat (2),
.BR utimes (2),
.BR futimes (3),
.BR path_resolution (7),
.BR symlink (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1999 Andries Brouwer (aeb@cwi.nl), 1 Nov 1999
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" 1999-11-10: Merged text taken from the page contributed by
.\" Reed H. Petty (rhp@draper.net)
.\"
.TH VFORK 2 2012-08-05 "Linux" "Linux Programmer's Manual"
.SH NAME
vfork \- create a child process and block parent
.SH SYNOPSIS
.B #include <sys/types.h>
.br
.B #include <unistd.h>
.sp
.B pid_t vfork(void);
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR vfork ():
.ad l
.RS 4
.PD 0
.TP 4
Since glibc 2.12:
.nf
_BSD_SOURCE ||
    (_XOPEN_SOURCE\ >=\ 500 ||
        _XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED) &&
    !(_POSIX_C_SOURCE\ >=\ 200809L || _XOPEN_SOURCE\ >=\ 700)
.TP 4
.fi
Before glibc 2.12:
_BSD_SOURCE || _XOPEN_SOURCE\ >=\ 500 ||
_XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED
.PD
.RE
.ad b
.SH DESCRIPTION
.SS Standard description
(From POSIX.1)
The
.BR vfork ()
function has the same effect as
.BR fork (2),
except that the behavior is undefined if the process created by
.BR vfork ()
either modifies any data other than a variable of type
.I pid_t
used to store the return value from
.BR vfork (),
or returns from the function in which
.BR vfork ()
was called, or calls any other function before successfully calling
.BR _exit (2)
or one of the
.BR exec (3)
family of functions.
.SS Linux description
.BR vfork (),
just like
.BR fork (2),
creates a child process of the calling process.
For details and return value and errors, see
.BR fork (2).
.PP
.BR vfork ()
is a special case of
.BR clone (2).
It is used to create new processes without copying the page tables of
the parent process.
It may be useful in performance-sensitive applications
where a child is created which then immediately issues an
.BR execve (2).
.PP
.BR vfork ()
differs from
.BR fork (2)
in that the calling thread is suspended until the child terminates
(either normally,
by calling
.BR _exit (2),
or abnormally, after delivery of a fatal signal),
or it makes a call to
.BR execve (2).
Until that point, the child shares all memory with its parent,
including the stack.
The child must not return from the current function or call
.BR exit (3),
but may call
.BR _exit (2).

As with
.BR fork (2),
the child process created by
.BR vfork ()
inherits copies of various of the caller's process attributes
(e.g., file descriptors, signal dispositions, and current working directory);
the
.BR vfork ()
call differs only in the treatment of the virtual address space,
as described above.

Signals sent to the parent
arrive after the child releases the parent's memory
(i.e., after the child terminates
or calls
.BR execve (2)).
.SS Historic description
Under Linux,
.BR fork (2)
is implemented using copy-on-write pages, so the only penalty incurred by
.BR fork (2)
is the time and memory required to duplicate the parent's page tables,
and to create a unique task structure for the child.
However, in the bad old days a
.BR fork (2)
would require making a complete copy of the caller's data space,
often needlessly, since usually immediately afterward an
.BR exec (3)
is done.
Thus, for greater efficiency, BSD introduced the
.BR vfork ()
system call, which did not fully copy the address space of
the parent process, but borrowed the parent's memory and thread
of control until a call to
.BR execve (2)
or an exit occurred.
The parent process was suspended while the
child was using its resources.
The use of
.BR vfork ()
was tricky: for example, not modifying data
in the parent process depended on knowing which variables were
held in a register.
.SH CONFORMING TO
4.3BSD; POSIX.1-2001 (but marked OBSOLETE).
POSIX.1-2008 removes the specification of
.BR vfork ().

The requirements put on
.BR vfork ()
by the standards are weaker than those put on
.BR fork (2),
so an implementation where the two are synonymous is compliant.
In particular, the programmer cannot rely on the parent
remaining blocked until the child either terminates or calls
.BR execve (2),
and cannot rely on any specific behavior with respect to shared memory.
.\" In AIXv3.1 vfork is equivalent to fork.
.SH NOTES
.PP
Some consider the semantics of
.BR vfork ()
to be an architectural blemish, and the 4.2BSD man page stated:
"This system call will be eliminated when proper system sharing mechanisms
are implemented.
Users should not depend on the memory sharing semantics of
.BR vfork ()
as it will, in that case, be made synonymous to
.BR fork (2).\c
"
However, even though modern memory management hardware
has decreased the performance difference between
.BR fork (2)
and
.BR vfork (),
there are various reasons why Linux and other systems have retained
.BR vfork ():
.IP * 3
Some performance-critical applications require the small performance
advantage conferred by
.BR vfork ().
.IP *
.BR vfork ()
can be implemented on systems that lack a memory-management unit (MMU), but
.BR fork (2)
can't be implemented on such systems.
(POSIX.1-2008 removed
.BR vfork ()
from the standard; the POSIX rationale for the
.BR posix_spawn (3)
function notes that that function,
which provides functionality equivalent to
.BR fork (2)+ exec (3),
is designed to be implementable on systems that lack an MMU.)
.\" http://stackoverflow.com/questions/4259629/what-is-the-difference-between-fork-and-vfork
.\" http://developers.sun.com/solaris/articles/subprocess/subprocess.html
.\" http://mailman.uclinux.org/pipermail/uclinux-dev/2009-April/000684.html
.SS Linux notes
Fork handlers established using
.BR pthread_atfork (3)
are not called when a multithreaded program employing
the NPTL threading library calls
.BR vfork ().
Fork handlers are called in this case in a program using the
LinuxThreads threading library.
(See
.BR pthreads (7)
for a description of Linux threading libraries.)

A call to
.BR vfork ()
is equivalent to calling
.BR clone (2)
with
.I flags
specified as:

     CLONE_VM | CLONE_VFORK | SIGCHLD
.SS History
The
.BR vfork ()
system call appeared in 3.0BSD.
.\" In the release notes for 4.2BSD Sam Leffler wrote: `vfork: Is still
.\" present, but definitely on its way out'.
In 4.4BSD it was made synonymous to
.BR fork (2)
but NetBSD introduced it again,
cf.
.UR http://www.netbsd.org\:/Documentation\:/kernel\:/vfork.html
.UE .
In Linux, it has been equivalent to
.BR fork (2)
until 2.2.0-pre6 or so.
Since 2.2.0-pre9 (on i386, somewhat later on
other architectures) it is an independent system call.
Support was added in glibc 2.0.112.
.SH BUGS
.PP
Details of the signal handling are obscure and differ between systems.
The BSD man page states:
"To avoid a possible deadlock situation, processes that are children
in the middle of a
.BR vfork ()
are never sent
.B SIGTTOU
or
.B SIGTTIN
signals; rather, output or
.IR ioctl s
are allowed and input attempts result in an end-of-file indication."
.\"
.\" As far as I can tell, the following is not true in 2.6.19:
.\" Currently (Linux 2.3.25),
.\" .BR strace (1)
.\" cannot follow
.\" .BR vfork ()
.\" and requires a kernel patch.
.SH SEE ALSO
.BR clone (2),
.BR execve (2),
.BR fork (2),
.BR unshare (2),
.BR wait (2)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 Rickard E. Faith (faith@cs.unc.edu)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified, 27 May 2004, Michael Kerrisk <mtk.manpages@gmail.com>
.\"     Added notes on capability requirements
.\"
.TH VHANGUP 2 2007-07-26 "Linux" "Linux Programmer's Manual"
.SH NAME
vhangup \- virtually hangup the current terminal
.SH SYNOPSIS
.B #include <unistd.h>
.sp
.B int vhangup(void);
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR vhangup ():
_BSD_SOURCE || (_XOPEN_SOURCE && _XOPEN_SOURCE\ <\ 500)
.ad b
.SH DESCRIPTION
.BR vhangup ()
simulates a hangup on the current terminal.
This call arranges for other
users to have a \*(lqclean\*(rq terminal at login time.
.SH RETURN VALUE
On success, zero is returned.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EPERM
The calling process has insufficient privilege to call
.BR vhangup ();
the
.B CAP_SYS_TTY_CONFIG
capability is required.
.SH CONFORMING TO
This call is Linux-specific, and should not be used in programs
intended to be portable.
.SH SEE ALSO
.BR capabilities (7),
.BR init (1)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 Rickard E. Faith (faith@cs.unc.edu)
.\" Copyright 1997 Andries E. Brouwer (aeb@cwi.nl)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH VM86 2 2009-02-20 "Linux" "Linux Programmer's Manual"
.SH NAME
vm86old, vm86 \- enter virtual 8086 mode
.SH SYNOPSIS
.B #include <sys/vm86.h>
.sp
.BI "int vm86old(struct vm86_struct *" info );
.sp
.BI "int vm86(unsigned long " fn ", struct vm86plus_struct *" v86 );
.SH DESCRIPTION
The system call
.BR vm86 ()
was introduced in Linux 0.97p2.
In Linux 2.1.15 and 2.0.28, it was renamed to
.BR vm86old (),
and a new
.BR vm86 ()
was introduced.
The definition of
.IR "struct vm86_struct"
was changed
in 1.1.8 and 1.1.9.
.LP
These calls cause the process to enter VM86 mode (virtual-8086 in Intel
literature), and are used by
.BR dosemu .
.PP
VM86 mode is an emulation of real mode within a protected mode task.
.SH RETURN VALUE
On success, zero is returned.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EFAULT
This return value is specific to i386 and indicates a problem with getting
user-space data.
.TP
.B ENOSYS
This return value indicates the call is not implemented on the present
architecture.
.TP
.B EPERM
Saved kernel stack exists.
(This is a kernel sanity check; the saved
stack should exist only within vm86 mode itself.)
.SH CONFORMING TO
This call is specific to Linux on 32-bit Intel processors,
and should not be used in programs intended to be portable.
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" This manpage is Copyright (C) 2006 Jens Axboe
.\" and Copyright (C) 2006 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH VMSPLICE 2 2014-10-02 "Linux" "Linux Programmer's Manual"
.SH NAME
vmsplice \- splice user pages into a pipe
.SH SYNOPSIS
.nf
.BR "#define _GNU_SOURCE" "         /* See feature_test_macros(7) */"
.B #include <fcntl.h>
.B #include <sys/uio.h>

.BI "ssize_t vmsplice(int " fd ", const struct iovec *" iov ,
.BI "                 unsigned long " nr_segs ", unsigned int " flags );
.fi
.\" Return type was long before glibc 2.7
.SH DESCRIPTION
.\" Linus: vmsplice() system call to basically do a "write to
.\" the buffer", but using the reference counting and VM traversal
.\" to actually fill the buffer. This means that the user needs to
.\" be careful not to reuse the user-space buffer it spliced into
.\" the kernel-space one (contrast this to "write()", which copies
.\" the actual data, and you can thus reuse the buffer immediately
.\" after a successful write), but that is often easy to do.
The
.BR vmsplice ()
system call maps
.I nr_segs
ranges of user memory described by
.I iov
into a pipe.
The file descriptor
.I fd
must refer to a pipe.

The pointer
.I iov
points to an array of
.I iovec
structures as defined in
.IR <sys/uio.h> :

.in +4n
.nf
struct iovec {
    void  *iov_base;            /* Starting address */
    size_t iov_len;             /* Number of bytes */
};
.in
.fi

The
.I flags
argument is a bit mask that is composed by ORing together
zero or more of the following values:
.TP 1.9i
.B SPLICE_F_MOVE
Unused for
.BR vmsplice ();
see
.BR splice (2).
.TP
.B SPLICE_F_NONBLOCK
.\" Not used for vmsplice
.\" May be in the future -- therefore EAGAIN
Do not block on I/O; see
.BR splice (2)
for further details.
.TP
.B SPLICE_F_MORE
Currently has no effect for
.BR vmsplice (),
but may be implemented in the future; see
.BR splice (2).
.TP
.B SPLICE_F_GIFT
The user pages are a gift to the kernel.
The application may not modify this memory ever,
.\" FIXME . Explain the following line in a little more detail:
or page cache and on-disk data may differ.
Gifting pages to the kernel means that a subsequent
.BR splice (2)
.B SPLICE_F_MOVE
can successfully move the pages;
if this flag is not specified, then a subsequent
.BR splice (2)
.B SPLICE_F_MOVE
must copy the pages.
Data must also be properly page aligned, both in memory and length.
.\" FIXME
.\"	It looks like the page-alignment requirement went away with
.\"	commit bd1a68b59c8e3bce45fb76632c64e1e063c3962d
.\"
.\" .... if we expect to later SPLICE_F_MOVE to the cache.
.SH RETURN VALUE
Upon successful completion,
.BR vmsplice ()
returns the number of bytes transferred to the pipe.
On error,
.BR vmsplice ()
returns \-1 and
.I errno
is set to indicate the error.
.SH ERRORS
.TP
.B EAGAIN
.B SPLICE_F_NONBLOCK
was specified in
.IR flags ,
and the operation would block.
.TP
.B EBADF
.I fd
either not valid, or doesn't refer to a pipe.
.TP
.B EINVAL
.I nr_segs
is greater than
.BR IOV_MAX ;
or memory not aligned if
.B SPLICE_F_GIFT
set.
.TP
.B ENOMEM
Out of memory.
.SH VERSIONS
The
.BR vmsplice ()
system call first appeared in Linux 2.6.17;
library support was added to glibc in version 2.5.
.SH CONFORMING TO
This system call is Linux-specific.
.SH NOTES
.BR vmsplice ()
follows the other vectorized read/write type functions when it comes to
limitations on number of segments being passed in.
This limit is
.B IOV_MAX
as defined in
.IR <limits.h> .
At the time of this writing, that limit is 1024.
.SH SEE ALSO
.BR splice (2),
.BR tee (2)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1993 by Thomas Koenig <ig25@rz.uni-karlsruhe.de>
.\" and Copyright (c) 2004 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified Sat Jul 24 13:30:06 1993 by Rik Faith <faith@cs.unc.edu>
.\" Modified Sun Aug 21 17:42:42 1994 by Rik Faith <faith@cs.unc.edu>
.\"          (Thanks to Koen Holtman <koen@win.tue.nl>)
.\" Modified Wed May 17 15:54:12 1995 by Rik Faith <faith@cs.unc.edu>
.\"           To remove *'s from status in macros (Thanks to Michael Shields).
.\" Modified as suggested by Nick Duffek <nsd@bbc.com>, aeb, 960426
.\" Modified Mon Jun 23 14:09:52 1997 by aeb - add EINTR.
.\" Modified Thu Nov 26 02:12:45 1998 by aeb - add SIGCHLD stuff.
.\" Modified Mon Jul 24 21:37:38 2000 by David A. Wheeler
.\"          <dwheeler@dwheeler.com> - noted thread issues.
.\" Modified 26 Jun 01 by Michael Kerrisk
.\"          Added __WCLONE, __WALL, and __WNOTHREAD descriptions
.\" Modified 2001-09-25, aeb
.\" Modified 26 Jun 01 by Michael Kerrisk, <mtk.manpages@gmail.com>
.\"	Updated notes on setting disposition of SIGCHLD to SIG_IGN
.\" 2004-11-11, mtk
.\"	Added waitid(2); added WCONTINUED and WIFCONTINUED()
.\"	Added text on SA_NOCLDSTOP
.\"	Updated discussion of SA_NOCLDWAIT to reflect 2.6 behavior
.\"	Much other text rewritten
.\" 2005-05-10, mtk, __W* flags can't be used with waitid()
.\" 2008-07-04, mtk, removed erroneous text about SA_NOCLDSTOP
.\"
.TH WAIT 2 2015-02-21 "Linux" "Linux Programmer's Manual"
.SH NAME
wait, waitpid, waitid \- wait for process to change state
.SH SYNOPSIS
.B #include <sys/types.h>
.br
.B #include <sys/wait.h>
.sp
.BI "pid_t wait(int *" "status" );

.BI "pid_t waitpid(pid_t " pid ", int *" status ", int " options );

.BI "int waitid(idtype_t " idtype ", id_t " id \
", siginfo_t *" infop ", int " options );
                /* This is the glibc and POSIX interface; see
                   NOTES for information on the raw system call. */
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.PD 0
.BR waitid ():
.RS 4
_SVID_SOURCE ||
_XOPEN_SOURCE\ >=\ 500 ||
_XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED
.br
|| /* Since glibc 2.12: */ _POSIX_C_SOURCE\ >=\ 200809L
.RE
.PD
.ad
.SH DESCRIPTION
All of these system calls are used to wait for state changes
in a child of the calling process, and obtain information
about the child whose state has changed.
A state change is considered to be: the child terminated;
the child was stopped by a signal; or the child was resumed by a signal.
In the case of a terminated child, performing a wait allows
the system to release the resources associated with the child;
if a wait is not performed, then the terminated child remains in
a "zombie" state (see NOTES below).

If a child has already changed state, then these calls return immediately.
Otherwise, they block until either a child changes state or
a signal handler interrupts the call (assuming that system calls
are not automatically restarted using the
.B SA_RESTART
flag of
.BR sigaction (2)).
In the remainder of this page, a child whose state has changed
and which has not yet been waited upon by one of these system
calls is termed
.IR waitable .
.SS wait() and waitpid()
The
.BR wait ()
system call suspends execution of the calling process until one of its
children terminates.
The call
.I wait(&status)
is equivalent to:
.nf

    waitpid(\-1, &status, 0);
.fi

The
.BR waitpid ()
system call suspends execution of the calling process until a
child specified by
.I pid
argument has changed state.
By default,
.BR waitpid ()
waits only for terminated children, but this behavior is modifiable
via the
.I options
argument, as described below.

The value of
.I pid
can be:
.IP "< \-1"
meaning wait for any child process whose process group ID is
equal to the absolute value of
.IR pid .
.IP \-1
meaning wait for any child process.
.IP 0
meaning wait for any child process whose process group ID is
equal to that of the calling process.
.IP "> 0"
meaning wait for the child whose process ID is equal to the
value of
.IR pid .
.PP
The value of
.I options
is an OR of zero or more of the following constants:
.TP 12
.B WNOHANG
return immediately if no child has exited.
.TP
.B WUNTRACED
also return if a child has stopped
(but not traced via
.BR ptrace (2)).
Status for
.I traced
children which have stopped is provided
even if this option is not specified.
.TP
.BR WCONTINUED " (since Linux 2.6.10)"
also return if a stopped child has been resumed by delivery of
.BR SIGCONT .
.PP
(For Linux-only options, see below.)
.PP
If
.I status
is not NULL,
.BR wait ()
and
.BR waitpid ()
store status information in the \fIint\fP to which it points.
This integer can be inspected with the following macros (which
take the integer itself as an argument, not a pointer to it,
as is done in
.BR wait ()
and
.BR waitpid ()!):
.TP
.BI WIFEXITED( status )
returns true if the child terminated normally, that is,
by calling
.BR exit (3)
or
.BR _exit (2),
or by returning from main().
.TP
.BI WEXITSTATUS( status )
returns the exit status of the child.
This consists of the least significant 8 bits of the
.I status
argument that the child specified in a call to
.BR exit (3)
or
.BR _exit (2)
or as the argument for a return statement in main().
This macro should be employed only if
.B WIFEXITED
returned true.
.TP
.BI WIFSIGNALED( status )
returns true if the child process was terminated by a signal.
.TP
.BI WTERMSIG( status )
returns the number of the signal that caused the child process to
terminate.
This macro should be employed only if
.B WIFSIGNALED
returned true.
.TP
.BI WCOREDUMP( status )
returns true if the child produced a core dump.
This macro should be employed only if
.B WIFSIGNALED
returned true.
This macro is not specified in POSIX.1-2001 and is not available on
some UNIX implementations (e.g., AIX, SunOS).
Only use this enclosed in #ifdef WCOREDUMP ... #endif.
.TP
.BI WIFSTOPPED( status )
returns true if the child process was stopped by delivery of a signal;
this is possible only if the call was done using
.B WUNTRACED
or when the child is being traced (see
.BR ptrace (2)).
.TP
.BI WSTOPSIG( status )
returns the number of the signal which caused the child to stop.
This macro should be employed only if
.B WIFSTOPPED
returned true.
.TP
.BI WIFCONTINUED( status )
(since Linux 2.6.10)
returns true if the child process was resumed by delivery of
.BR SIGCONT .
.SS waitid()
The
.BR waitid ()
system call (available since Linux 2.6.9) provides more precise
control over which child state changes to wait for.

The
.I idtype
and
.I id
arguments select the child(ren) to wait for, as follows:
.IP "\fIidtype\fP == \fBP_PID\fP"
Wait for the child whose process ID matches
.IR id .
.IP "\fIidtype\fP == \fBP_PGID\fP"
Wait for any child whose process group ID matches
.IR id .
.IP "\fIidtype\fP == \fBP_ALL\fP"
Wait for any child;
.I id
is ignored.
.PP
The child state changes to wait for are specified by ORing
one or more of the following flags in
.IR options :
.TP 12
.B WEXITED
Wait for children that have terminated.
.TP
.B WSTOPPED
Wait for children that have been stopped by delivery of a signal.
.TP
.B WCONTINUED
Wait for (previously stopped) children that have been
resumed by delivery of
.BR SIGCONT .
.PP
The following flags may additionally be ORed in
.IR options :
.TP 12
.B WNOHANG
As for
.BR waitpid ().
.TP
.B WNOWAIT
Leave the child in a waitable state; a later wait call
can be used to again retrieve the child status information.
.PP
Upon successful return,
.BR waitid ()
fills in the following fields of the
.I siginfo_t
structure pointed to by
.IR infop :
.TP 12
\fIsi_pid\fP
The process ID of the child.
.TP
\fIsi_uid\fP
The real user ID of the child.
(This field is not set on most other implementations.)
.TP
\fIsi_signo\fP
Always set to
.BR SIGCHLD .
.TP
\fIsi_status\fP
Either the exit status of the child, as given to
.BR _exit (2)
(or
.BR exit (3)),
or the signal that caused the child to terminate, stop, or continue.
The
.I si_code
field can be used to determine how to interpret this field.
.TP
\fIsi_code\fP
Set to one of:
.B CLD_EXITED
(child called
.BR _exit (2));
.B CLD_KILLED
(child killed by signal);
.B CLD_DUMPED
(child killed by signal, and dumped core);
.B CLD_STOPPED
(child stopped by signal);
.B CLD_TRAPPED
(traced child has trapped); or
.B CLD_CONTINUED
(child continued by
.BR SIGCONT ).
.PP
If
.B WNOHANG
was specified in
.I options
and there were no children in a waitable state, then
.BR waitid ()
returns 0 immediately and
the state of the
.I siginfo_t
structure pointed to by
.I infop
is unspecified.
.\" POSIX.1-2001 leaves this possibility unspecified; most
.\" implementations (including Linux) zero out the structure
.\" in this case, but at least one implementation (AIX 5.1)
.\" does not -- MTK Nov 04
To distinguish this case from that where a child was in a
waitable state, zero out the
.I si_pid
field before the call and check for a nonzero value in this field
after the call returns.
.SH RETURN VALUE
.BR wait ():
on success, returns the process ID of the terminated child;
on error, \-1 is returned.

.BR waitpid ():
on success, returns the process ID of the child whose state has changed;
if
.B WNOHANG
was specified and one or more child(ren) specified by
.I pid
exist, but have not yet changed state, then 0 is returned.
On error, \-1 is returned.

.BR waitid ():
returns 0 on success or
if
.B WNOHANG
was specified and no child(ren) specified by
.I id
has yet changed state;
on error, \-1 is returned.
.\" FIXME As reported by Vegard Nossum, if infop is NULL, then waitid()
.\" returns the PID of the child.  Either this is a bug, or it is intended
.\" behavior that needs to be documented.  See my Jan 2009 LKML mail
.\" "waitid() return value strangeness when infop is NULL".
.PP
Each of these calls sets
.I errno
to an appropriate value in the case of an error.
.SH ERRORS
.TP
.B ECHILD
(for
.BR wait ())
The calling process does not have any unwaited-for children.
.TP
.B ECHILD
(for
.BR waitpid ()
or
.BR waitid ())
The process specified by
.I pid
.RB ( waitpid ())
or
.I idtype
and
.I id
.RB ( waitid ())
does not exist or is not a child of the calling process.
(This can happen for one's own child if the action for
.B SIGCHLD
is set to
.BR SIG_IGN .
See also the \fILinux Notes\fP section about threads.)
.TP
.B EINTR
.B WNOHANG
was not set and an unblocked signal or a
.B SIGCHLD
was caught; see
.BR signal (7).
.TP
.B EINVAL
The
.I options
argument was invalid.
.SH CONFORMING TO
SVr4, 4.3BSD, POSIX.1-2001.
.SH NOTES
A child that terminates, but has not been waited for becomes a "zombie".
The kernel maintains a minimal set of information about the zombie
process (PID, termination status, resource usage information)
in order to allow the parent to later perform a wait to obtain
information about the child.
As long as a zombie is not removed from the system via a wait,
it will consume a slot in the kernel process table, and if
this table fills, it will not be possible to create further processes.
If a parent process terminates, then its "zombie" children (if any)
are adopted by
.BR init (1),
which automatically performs a wait to remove the zombies.

POSIX.1-2001 specifies that if the disposition of
.B SIGCHLD
is set to
.B SIG_IGN
or the
.B SA_NOCLDWAIT
flag is set for
.B SIGCHLD
(see
.BR sigaction (2)),
then children that terminate do not become zombies and a call to
.BR wait ()
or
.BR waitpid ()
will block until all children have terminated, and then fail with
.I errno
set to
.BR ECHILD .
(The original POSIX standard left the behavior of setting
.B SIGCHLD
to
.B SIG_IGN
unspecified.
Note that even though the default disposition of
.B SIGCHLD
is "ignore", explicitly setting the disposition to
.B SIG_IGN
results in different treatment of zombie process children.)

Linux 2.6 conforms to the POSIX requirements.
However, Linux 2.4 (and earlier) does not:
if a
.BR wait ()
or
.BR waitpid ()
call is made while
.B SIGCHLD
is being ignored, the call behaves just as though
.B SIGCHLD
were not being ignored, that is, the call blocks until the next child
terminates and then returns the process ID and status of that child.
.SS Linux notes
In the Linux kernel, a kernel-scheduled thread is not a distinct
construct from a process.
Instead, a thread is simply a process
that is created using the Linux-unique
.BR clone (2)
system call; other routines such as the portable
.BR pthread_create (3)
call are implemented using
.BR clone (2).
Before Linux 2.4, a thread was just a special case of a process,
and as a consequence one thread could not wait on the children
of another thread, even when the latter belongs to the same thread group.
However, POSIX prescribes such functionality, and since Linux 2.4
a thread can, and by default will, wait on children of other threads
in the same thread group.
.LP
The following Linux-specific
.I options
are for use with children created using
.BR clone (2);
they cannot be used with
.BR waitid ():
.TP
.B __WCLONE
.\" since 0.99pl10
Wait for "clone" children only.
If omitted, then wait for "non-clone" children only.
(A "clone" child is one which delivers no signal, or a signal other than
.B SIGCHLD
to its parent upon termination.)
This option is ignored if
.B __WALL
is also specified.
.TP
.BR __WALL " (since Linux 2.4)"
.\" since patch-2.3.48
Wait for all children, regardless of
type ("clone" or "non-clone").
.TP
.BR __WNOTHREAD " (since Linux 2.4)"
.\" since patch-2.4.0-test8
Do not wait for children of other threads in
the same thread group.
This was the default before Linux 2.4.
.SS C library/kernel ABI differences
.BR wait ()
is actually a library function that (in glibc) is implemented as a call to
.BR wait4 (2).

Within glibc,
.\" A waitpid() system call remains, with a comment noting that
.\" "waitpid() should be * implemented by calling sys_wait4() from libc.a"
.BR waitpid ()
is a wrapper function that invokes
.BR wait (2).

The raw
.BR waitid ()
system call takes a fifth argument, of type
.IR "struct rusage\ *" .
If this argument is non-NULL,
then it is used to return resource usage information about the child,
in the same manner as
.BR wait4 (2).
See
.BR getrusage (2)
for details.
.SH BUGS
According to POSIX.1-2008, an application calling
.BR waitid ()
must ensure that
.I infop
points to a
.I siginfo_t
structure (i.e., that it is a non-null pointer).
On Linux, if
.I infop
is NULL,
.BR waitid ()
succeeds, and returns the process ID of the waited-for child.
Applications should avoid relying on this inconsistent,
nonstandard, and unnecessary feature.
.SH EXAMPLE
.\" fork.2 refers to this example program.
The following program demonstrates the use of
.BR fork (2)
and
.BR waitpid ().
The program creates a child process.
If no command-line argument is supplied to the program,
then the child suspends its execution using
.BR pause (2),
to allow the user to send signals to the child.
Otherwise, if a command-line argument is supplied,
then the child exits immediately,
using the integer supplied on the command line as the exit status.
The parent process executes a loop that monitors the child using
.BR waitpid (),
and uses the W*() macros described above to analyze the wait status value.

The following shell session demonstrates the use of the program:
.in +4n
.nf

.RB "$" " ./a.out &"
Child PID is 32360
[1] 32359
.RB "$" " kill \-STOP 32360"
stopped by signal 19
.RB "$" " kill \-CONT 32360"
continued
.RB "$" " kill \-TERM 32360"
killed by signal 15
[1]+  Done                    ./a.out
$
.fi
.in
.SS Program source
\&
.nf
#include <sys/wait.h>
#include <stdlib.h>
#include <unistd.h>
#include <stdio.h>

int
main(int argc, char *argv[])
{
    pid_t cpid, w;
    int status;

    cpid = fork();
    if (cpid == \-1) {
        perror("fork");
        exit(EXIT_FAILURE);
    }

    if (cpid == 0) {            /* Code executed by child */
        printf("Child PID is %ld\\n", (long) getpid());
        if (argc == 1)
            pause();                    /* Wait for signals */
        _exit(atoi(argv[1]));

    } else {                    /* Code executed by parent */
        do {
            w = waitpid(cpid, &status, WUNTRACED | WCONTINUED);
            if (w == \-1) {
                perror("waitpid");
                exit(EXIT_FAILURE);
            }

            if (WIFEXITED(status)) {
                printf("exited, status=%d\\n", WEXITSTATUS(status));
            } else if (WIFSIGNALED(status)) {
                printf("killed by signal %d\\n", WTERMSIG(status));
            } else if (WIFSTOPPED(status)) {
                printf("stopped by signal %d\\n", WSTOPSIG(status));
            } else if (WIFCONTINUED(status)) {
                printf("continued\\n");
            }
        } while (!WIFEXITED(status) && !WIFSIGNALED(status));
        exit(EXIT_SUCCESS);
    }
}
.fi
.SH SEE ALSO
.BR _exit (2),
.BR clone (2),
.BR fork (2),
.BR kill (2),
.BR ptrace (2),
.BR sigaction (2),
.BR signal (2),
.BR wait4 (2),
.BR pthread_create (3),
.BR credentials (7),
.BR signal (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1993 by Thomas Koenig (ig25@rz.uni-karlsruhe.de)
.\" and Copyright (c) 2004 by Michael Kerrisk (mtk.manpages@gmail.com)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified Sat Jul 24 13:32:44 1993 by Rik Faith (faith@cs.unc.edu)
.\" Modified Mon Jun 23 14:09:52 1997 by aeb - add EINTR.
.\" Modified Tue Jul  7 12:26:42 1998 by aeb - changed return value wait3
.\" Modified 2004-11-11, Michael Kerrisk <mtk.manpages@gmail.com>
.\"	Rewrote much of this page, and removed much duplicated text,
.\"		replacing with pointers to wait.2
.\"
.TH WAIT4 2  2015-02-21 "Linux" "Linux Programmer's Manual"
.SH NAME
wait3, wait4 \- wait for process to change state, BSD style
.SH SYNOPSIS
.nf
.B #include <sys/types.h>
.B #include <sys/time.h>
.B #include <sys/resource.h>
.B #include <sys/wait.h>
.sp
.BI "pid_t wait3(int *" "status" ", int " options ,
.BI "            struct rusage *" rusage );
.sp
.BI "pid_t wait4(pid_t " pid ", int *" status ", int " options ,
.BI "            struct rusage *" rusage );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR wait3 ():
.RS 4
_BSD_SOURCE || _XOPEN_SOURCE\ >=\ 500 ||
_XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED
.RE
.br
.BR wait4 ():
.RS 4
_BSD_SOURCE
.RE
.ad
.SH DESCRIPTION
These functions are obsolete; use
.BR waitpid (2)
or
.BR waitid (2)
in new programs.

The
.BR wait3 ()
and
.BR wait4 ()
system calls are similar to
.BR waitpid (2),
but additionally return resource usage information about the
child in the structure pointed to by
.IR rusage .
.PP
Other than the use of the
.I rusage
argument, the following
.BR wait3 ()
call:
.nf

    wait3(status, options, rusage);

.fi
is equivalent to:
.nf

    waitpid(\-1, status, options);

.fi
Similarly, the following
.BR wait4 ()
call:
.nf

    wait4(pid, status, options, rusage);

.fi
is equivalent to:
.nf

    waitpid(pid, status, options);

.fi
In other words,
.BR wait3 ()
waits of any child, while
.BR wait4 ()
can be used to select a specific child, or children, on which to wait.
See
.BR wait (2)
for further details.
.PP
If
.I rusage
is not NULL, the
.I struct rusage
to which it points will be filled with accounting information
about the child.
See
.BR getrusage (2)
for details.
.SH RETURN VALUE
As for
.BR waitpid (2).
.SH ERRORS
As for
.BR waitpid (2).
.SH CONFORMING TO
4.3BSD.

SUSv1 included a specification of
.BR wait3 ();
SUSv2 included
.BR wait3 (),
but marked it LEGACY;
SUSv3 removed it.
.SH NOTES
Including
.I <sys/time.h>
is not required these days, but increases portability.
(Indeed,
.I <sys/resource.h>
defines the
.I rusage
structure with fields of type
.I struct timeval
defined in
.IR <sys/time.h> .)
.SS C library/kernel ABI differences
On Linux,
.BR wait3 ()
is a library function implemented on top of the
.BR wait4 ()
system call.
.SH SEE ALSO
.BR fork (2),
.BR getrusage (2),
.BR sigaction (2),
.BR signal (2),
.BR wait (2),
.BR signal (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" This manpage is Copyright (C) 1992 Drew Eckhardt;
.\"             and Copyright (C) 1993 Michael Haardt, Ian Jackson.
.\" and Copyright (C) 2007 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified Sat Jul 24 13:35:59 1993 by Rik Faith <faith@cs.unc.edu>
.\" Modified Sun Nov 28 17:19:01 1993 by Rik Faith <faith@cs.unc.edu>
.\" Modified Sat Jan 13 12:58:08 1996 by Michael Haardt
.\"   <michael@cantor.informatik.rwth-aachen.de>
.\" Modified Sun Jul 21 18:59:33 1996 by Andries Brouwer <aeb@cwi.nl>
.\" 2001-12-13 added remark by Zack Weinberg
.\" 2007-06-18 mtk:
.\"    	Added details about seekable files and file offset.
.\"	Noted that write() may write less than 'count' bytes, and
.\"	gave some examples of why this might occur.
.\"	Noted what happens if write() is interrupted by a signal.
.\"
.TH WRITE 2 2015-01-22 "Linux" "Linux Programmer's Manual"
.SH NAME
write \- write to a file descriptor
.SH SYNOPSIS
.B #include <unistd.h>
.sp
.BI "ssize_t write(int " fd ", const void *" buf ", size_t " count );
.SH DESCRIPTION
.BR write ()
writes up to
.I count
bytes from the buffer pointed
.I buf
to the file referred to by the file descriptor
.IR fd .

The number of bytes written may be less than
.I count
if, for example,
there is insufficient space on the underlying physical medium, or the
.B RLIMIT_FSIZE
resource limit is encountered (see
.BR setrlimit (2)),
or the call was interrupted by a signal
handler after having written less than
.I count
bytes.
(See also
.BR pipe (7).)

For a seekable file (i.e., one to which
.BR lseek (2)
may be applied, for example, a regular file)
writing takes place at the current file offset,
and the file offset is incremented by
the number of bytes actually written.
If the file was
.BR open (2)ed
with
.BR O_APPEND ,
the file offset is first set to the end of the file before writing.
The adjustment of the file offset and the write operation
are performed as an atomic step.

POSIX requires that a
.BR read (2)
which can be proved to occur after a
.BR write ()
has returned returns the new data.
Note that not all filesystems are POSIX conforming.
.SH RETURN VALUE
On success, the number of bytes written is returned (zero indicates
nothing was written).
On error, \-1 is returned, and \fIerrno\fP is set
appropriately.

If \fIcount\fP is zero and
.I fd
refers to a regular file, then
.BR write ()
may return a failure status if one of the errors below is detected.
If no errors are detected,
0 will be returned without causing any other effect.
If
\fIcount\fP is zero and
.I fd
refers to a file other than a regular file,
the results are not specified.
.SH ERRORS
.TP
.B EAGAIN
The file descriptor
.I fd
refers to a file other than a socket and has been marked nonblocking
.RB ( O_NONBLOCK ),
and the write would block.
.TP
.BR EAGAIN " or " EWOULDBLOCK
.\" Actually EAGAIN on Linux
The file descriptor
.I fd
refers to a socket and has been marked nonblocking
.RB ( O_NONBLOCK ),
and the write would block.
POSIX.1-2001 allows either error to be returned for this case,
and does not require these constants to have the same value,
so a portable application should check for both possibilities.
.TP
.B EBADF
.I fd
is not a valid file descriptor or is not open for writing.
.TP
.B EDESTADDRREQ
.I fd
refers to a datagram socket for which a peer address has not been set using
.BR connect (2).
.TP
.B EDQUOT
The user's quota of disk blocks on the filesystem containing the file
referred to by
.I fd
has been exhausted.
.TP
.B EFAULT
.I buf
is outside your accessible address space.
.TP
.B EFBIG
An attempt was made to write a file that exceeds the implementation-defined
maximum file size or the process's file size limit,
or to write at a position past the maximum allowed offset.
.TP
.B EINTR
The call was interrupted by a signal before any data was written; see
.BR signal (7).
.TP
.B EINVAL
.I fd
is attached to an object which is unsuitable for writing;
or the file was opened with the
.B O_DIRECT
flag, and either the address specified in
.IR buf ,
the value specified in
.IR count ,
or the current file offset is not suitably aligned.
.TP
.B EIO
A low-level I/O error occurred while modifying the inode.
.TP
.B ENOSPC
The device containing the file referred to by
.I fd
has no room for the data.
.TP
.B EPERM
The operation was prevented by a file seal; see
.BR fcntl (2).
.TP
.B EPIPE
.I fd
is connected to a pipe or socket whose reading end is closed.
When this happens the writing process will also receive a
.B SIGPIPE
signal.
(Thus, the write return value is seen only if the program
catches, blocks or ignores this signal.)
.PP
Other errors may occur, depending on the object connected to
.IR fd .
.SH CONFORMING TO
SVr4, 4.3BSD, POSIX.1-2001.
.\" SVr4 documents additional error
.\" conditions EDEADLK, ENOLCK, ENOLNK, ENOSR, ENXIO, or ERANGE.

Under SVr4 a write may be interrupted and return
.B EINTR
at any point,
not just before any data is written.
.SH NOTES
A successful return from
.BR write ()
does not make any guarantee that data has been committed to disk.
In fact, on some buggy implementations, it does not even guarantee
that space has successfully been reserved for the data.
The only way to be sure is to call
.BR fsync (2)
after you are done writing all your data.

If a
.BR write ()
is interrupted by a signal handler before any bytes are written,
then the call fails with the error
.BR EINTR ;
if it is interrupted after at least one byte has been written,
the call succeeds, and returns the number of bytes written.
.SH BUGS
According to POSIX.1-2008/SUSv4 Section XSI 2.9.7
("Thread Interactions with Regular File Operations"):

.RS 4
All of the following functions shall be atomic with respect to
each other in the effects specified in POSIX.1-2008 when they
operate on regular files or symbolic links: ...
.RE

Among the APIs subsequently listed are
.BR write ()
and
.BR writev (2).
And among the effects that should be atomic across threads (and processes)
are updates of the file offset.
However, on Linux before version 3.14,
this was not the case: if two processes that share
an open file description (see
.BR open (2))
perform a
.BR write ()
(or
.BR writev (2))
at the same time, then the I/O operations were not atomic
with respect updating the file offset,
with the result that the blocks of data output by the two processes
might (incorrectly) overlap.
This problem was fixed in Linux 3.14.
.\" http://thread.gmane.org/gmane.linux.kernel/1649458
.\"    From: Michael Kerrisk (man-pages <mtk.manpages <at> gmail.com>
.\"    Subject: Update of file offset on write() etc. is non-atomic with I/O
.\"    Date: 2014-02-17 15:41:37 GMT
.\"    Newsgroups: gmane.linux.kernel, gmane.linux.file-systems
.\" commit 9c225f2655e36a470c4f58dbbc99244c5fc7f2d4
.\"    Author: Linus Torvalds <torvalds@linux-foundation.org>
.\"    Date:   Mon Mar 3 09:36:58 2014 -0800
.\"
.\"        vfs: atomic f_pos accesses as per POSIX
.SH SEE ALSO
.BR close (2),
.BR fcntl (2),
.BR fsync (2),
.BR ioctl (2),
.BR lseek (2),
.BR open (2),
.BR pwrite (2),
.BR read (2),
.BR select (2),
.BR writev (2),
.BR fwrite (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
