\t
.\" Copyright 2002 walter harms (walter.harms@informatik.uni-oldenburg.de)
.\"
.\" %%%LICENSE_START(GPL_NOVERSION_ONELINE)
.\" Distributed under GPL
.\" %%%LICENSE_END
.\"
.\" Corrected, aeb, 2002-05-30
.\"
.TH A64L 3 2015-03-02 "" "Linux Programmer's Manual"
.SH NAME
a64l, l64a \- convert between long and base-64
.SH SYNOPSIS
.B #include <stdlib.h>
.sp
.BI "long a64l(const char *" str64 );
.sp
.BI "char *l64a(long " value );
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR a64l (),
.BR l64a ():
.br
.RS 4
.ad l
_SVID_SOURCE || _XOPEN_SOURCE\ >=\ 500 ||
_XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED
.RE
.ad
.SH DESCRIPTION
These functions provide a conversion between 32-bit long integers
and little-endian base-64 ASCII strings (of length zero to six).
If the string used as argument for
.BR a64l ()
has length greater than six, only the first six bytes are used.
If the type
.I long
has more than 32 bits, then
.BR l64a ()
uses only the low order 32 bits of
.IR value ,
and
.BR a64l ()
sign-extends its 32-bit result.
.LP
The 64 digits in the base-64 system are:
.RS
.nf

\&\(aq.\(aq	represents a 0
\&\(aq/\(aq	represents a 1
0-9	represent  2-11
A-Z	represent 12-37
a-z	represent 38-63

.fi
.RE
So 123 = 59*64^0 + 1*64^1 = "v/".
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR l64a ()
T}	Thread safety	MT-Unsafe race:l64a
T{
.BR a64l ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
POSIX.1-2001.
.SH NOTES
The value returned by
.BR l64a ()
may be a pointer to a static buffer, possibly overwritten
by later calls.
.LP
The behavior of
.BR l64a ()
is undefined when
.I value
is negative.
If
.I value
is zero, it returns an empty string.
.LP
These functions are broken in glibc before 2.2.5
(puts most significant digit first).
.LP
This is not the encoding used by
.BR uuencode (1).
.SH SEE ALSO
.BR uuencode (1),
.\" .BR itoa (3),
.BR strtoul (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 2007 (C) Michael Kerrisk <mtk.manpages@gmail.com>
.\" some parts Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified Sat Jul 24 21:46:21 1993 by Rik Faith (faith@cs.unc.edu)
.\" Modified Fri Aug  4 10:51:53 2000 - patch from Joseph S. Myers
.\" 2007-12-15, mtk, Mostly rewritten
.\"
.TH ABORT 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
abort \- cause abnormal process termination
.SH SYNOPSIS
.nf
.B #include <stdlib.h>
.sp
.B void abort(void);
.fi
.SH DESCRIPTION
The
.BR abort ()
first unblocks the
.B SIGABRT
signal, and then raises that signal for the calling process
(as though
.BR raise (3)
was called).
This results in the abnormal termination of the process unless the
.B SIGABRT
signal is caught and the signal handler does not return
(see
.BR longjmp (3)).
.PP
If the
.BR abort ()
function causes process termination,
all open streams are closed and flushed.
.PP
If the
.B SIGABRT
signal is ignored, or caught by a handler that returns, the
.BR abort ()
function will still terminate the process.
It does this by restoring the default disposition for
.B SIGABRT
and then raising the signal for a second time.
.SH RETURN VALUE
The
.BR abort ()
function never returns.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR abort ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
SVr4, POSIX.1-2001, POSIX.1-2008, 4.3BSD, C89, C99.
.SH SEE ALSO
.BR gdb (1),
.BR sigaction (2),
.BR exit (3),
.BR longjmp (3),
.BR raise (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified Mon Mar 29 22:31:13 1993, David Metcalfe
.\" Modified Sun Jun  6 23:27:50 1993, David Metcalfe
.\" Modified Sat Jul 24 21:45:37 1993, Rik Faith (faith@cs.unc.edu)
.\" Modified Sat Dec 16 15:02:59 2000, Joseph S. Myers
.\"
.TH ABS 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
abs, labs, llabs, imaxabs \- compute the absolute value of an integer
.SH SYNOPSIS
.nf
.B #include <stdlib.h>
.sp
.BI "int abs(int " j );
.br
.BI "long int labs(long int " j );
.br
.BI "long long int llabs(long long int " j );
.sp
.B #include <inttypes.h>
.sp
.BI "intmax_t imaxabs(intmax_t " j );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR llabs ():
.RS 4
_XOPEN_SOURCE\ >=\ 600 || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.ad
.SH DESCRIPTION
The
.BR abs ()
function computes the absolute value of the integer
argument \fIj\fP.
The
.BR labs (),
.BR llabs ()
and
.BR imaxabs ()
functions compute the absolute value of the argument \fIj\fP of the
appropriate integer type for the function.
.SH RETURN VALUE
Returns the absolute value of the integer argument, of the appropriate
integer type for the function.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.ad l
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR abs (),
.BR labs (),
.BR llabs (),
.BR imaxabs ()
T}	Thread safety	MT-Safe
.TE
.ad
.SH CONFORMING TO
SVr4, POSIX.1-2001, 4.3BSD, C99.
.\" POSIX.1 (1996 edition) requires only the
.\" .BR abs ()
.\" function.
C89 only
includes the
.BR abs ()
and
.BR labs ()
functions; the functions
.BR llabs ()
and
.BR imaxabs ()
were added in C99.
.SH NOTES
Trying to take the absolute value of the most negative integer
is not defined.
.PP
The
.BR llabs ()
function is included in glibc since version 2.0.
The
.BR imaxabs ()
function is included in
glibc since version 2.1.1.
.PP
For
.BR llabs ()
to be declared, it may be necessary to define
\fB_ISOC99_SOURCE\fP or \fB_ISOC9X_SOURCE\fP (depending on the
version of glibc) before including any standard headers.
.PP
By default,
GCC handles
.BR abs (),
.BR labs (),
and (since GCC 3.0)
.BR llabs ()
and
.BR imaxabs ()
as built-in functions.
.SH SEE ALSO
.BR cabs (3),
.BR ceil (3),
.BR fabs (3),
.BR floor (3),
.BR rint (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\" and Copyright 2008, Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified 1993-07-24 by Rik Faith (faith@cs.unc.edu)
.\" Modified 2002-07-25 by Walter Harms
.\" 	(walter.harms@informatik.uni-oldenburg.de)
.\"
.TH ACOS 3  2015-04-19 "" "Linux Programmer's Manual"
.SH NAME
acos, acosf, acosl \- arc cosine function
.SH SYNOPSIS
.nf
.B #include <math.h>
.sp
.BI "double acos(double " x );
.BI "float acosf(float " x );
.BI "long double acosl(long double " x );
.fi
.sp
Link with \fI\-lm\fP.
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR acosf (),
.BR acosl ():
.RS 4
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE\ >=\ 600 || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.ad b
.SH DESCRIPTION
These functions calculate the arc cosine of
.IR x ;
that is
the value whose cosine is
.IR x .
.SH RETURN VALUE
On success, these functions return the arc cosine of
.IR x
in radians; the return value is in the range [0,\ pi].

If
.I x
is a NaN, a NaN is returned.

If
.I x
is +1,
+0 is returned.

If
.I x
is positive infinity or negative infinity,
a domain error occurs,
and a NaN is returned.

If
.I x
is outside the range [\-1,\ 1],
a domain error occurs,
and a NaN is returned.
.SH ERRORS
See
.BR math_error (7)
for information on how to determine whether an error has occurred
when calling these functions.
.PP
The following errors can occur:
.TP
Domain error: \fIx\fP is outside the range [\-1,\ 1]
.I errno
is set to
.BR EDOM .
An invalid floating-point exception
.RB ( FE_INVALID )
is raised.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw24 lb lb
l l l.
Interface	Attribute	Value
T{
.BR acos (),
.BR acosf (),
.BR acosl ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C99, POSIX.1-2001, POSIX.1-2008.

The variant returning
.I double
also conforms to
SVr4, 4.3BSD, C89.
.SH SEE ALSO
.BR asin (3),
.BR atan (3),
.BR atan2 (3),
.BR cacos (3),
.BR cos (3),
.BR sin (3),
.BR tan (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\" and Copyright 2008, Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified 1993-07-24 by Rik Faith (faith@cs.unc.edu)
.\" Modified 2002-07-25 by Walter Harms
.\" 	(walter.harms@informatik.uni-oldenburg.de)
.\"
.TH ACOSH 3   2015-04-19 "" "Linux Programmer's Manual"
.SH NAME
acosh, acoshf, acoshl \- inverse hyperbolic cosine function
.SH SYNOPSIS
.nf
.B #include <math.h>
.sp
.BI "double acosh(double " x );
.br
.BI "float acoshf(float " x );
.br
.BI "long double acoshl(long double " x );
.sp
.fi
Link with \fI\-lm\fP.
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR acosh ():
.RS 4
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE\ >=\ 500 ||
_XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.br
.BR acoshf (),
.BR acoshl ():
.RS 4
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE\ >=\ 600 || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.ad b
.SH DESCRIPTION
These functions calculate the inverse hyperbolic cosine of
.IR x ;
that is the value whose hyperbolic cosine is
.IR x .
.SH RETURN VALUE
On success, these functions return the inverse hyperbolic cosine of
.IR x .

If
.I x
is a NaN, a NaN is returned.

If
.I x
is +1, +0 is returned.

If
.I x
is positive infinity, positive infinity is returned.

If
.I x
is less than 1,
a domain error occurs,
and the functions return a NaN.
.SH ERRORS
See
.BR math_error (7)
for information on how to determine whether an error has occurred
when calling these functions.
.PP
The following errors can occur:
.TP
Domain error: \fIx\fP is less than 1
.I errno
is set to
.BR EDOM .
An invalid floating-point exception
.RB ( FE_INVALID )
is raised.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw28 lb lb
l l l.
Interface	Attribute	Value
T{
.BR acosh (),
.BR acoshf (),
.BR acoshl ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C99, POSIX.1-2001, POSIX.1-2008.

The variant returning
.I double
also conforms to
SVr4, 4.3BSD, C89.
.SH SEE ALSO
.BR asinh (3),
.BR atanh (3),
.BR cacosh (3),
.BR cosh (3),
.BR sinh (3),
.BR tanh (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\"  Copyright 2002 walter harms (walter.harms@informatik.uni-oldenburg.de)
.\"
.\" %%%LICENSE_START(GPL_NOVERSION_ONELINE)
.\" Distributed under GPL
.\" %%%LICENSE_END
.\"  adapted glibc info page
.\"
.\"  polished a little, aeb
.TH ADDSEVERITY 3 2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
addseverity \- introduce new severity classes
.SH SYNOPSIS
.nf
.sp
.B #include <fmtmsg.h>
.sp
.BI "int addseverity(int " severity ", const char *" s );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR addseverity ():
_SVID_SOURCE
.SH DESCRIPTION
This function allows the introduction of new severity classes
which can be addressed by the
.I severity
argument of the
.BR fmtmsg (3)
function.
By default, that function knows only how to
print messages for severity 0-4 (with strings (none), HALT,
ERROR, WARNING, INFO).
This call attaches the given string
.I s
to the given value
.IR severity .
If
.I s
is NULL, the severity class with the numeric value
.I severity
is removed.
It is not possible to overwrite or remove one of the default
severity classes.
The severity value must be nonnegative.
.SH RETURN VALUE
Upon success, the value
.B MM_OK
is returned.
Upon error, the return value is
.BR MM_NOTOK .
Possible errors include: out of memory, attempt to remove a
nonexistent or default severity class.
.SH VERSIONS
.BR addseverity ()
is provided in glibc since version 2.1.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR addseverity ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
This function is not specified in the X/Open Portability Guide
although the
.BR fmtmsg (3)
function is.
It is available on System V
systems.
.SH NOTES
New severity classes can also be added by setting the environment variable
.BR SEV_LEVEL .
.SH SEE ALSO
.BR fmtmsg (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2006 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH ADJTIME 3 2015-03-02 "Linux" "Linux Programmer's Manual"
.SH NAME
adjtime \- correct the time to synchronize the system clock
.SH SYNOPSIS
.nf
.B #include <sys/time.h>
.sp
.BI "int adjtime(const struct timeval *" delta ", struct timeval *" olddelta );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR adjtime ():
_BSD_SOURCE
.SH DESCRIPTION
The
.BR adjtime ()
function gradually adjusts the system clock (as returned by
.BR gettimeofday (2)).
The amount of time by which the clock is to be adjusted is specified
in the structure pointed to by
.IR delta .
This structure has the following form:
.in +4n
.nf

struct timeval {
    time_t      tv_sec;     /* seconds */
    suseconds_t tv_usec;    /* microseconds */
};
.fi
.in
.PP
If the adjustment in
.I delta
is positive, then the system clock is speeded up by some
small percentage (i.e., by adding a small
amount of time to the clock value in each second) until the adjustment
has been completed.
If the adjustment in
.I delta
is negative, then the clock is slowed down in a similar fashion.

If a clock adjustment from an earlier
.BR adjtime ()
call is already in progress
at the time of a later
.BR adjtime ()
call, and
.I delta
is not NULL for the later call, then the earlier adjustment is stopped,
but any already completed part of that adjustment is not undone.

If
.I olddelta
is not NULL, then the buffer that it points to is used to return
the amount of time remaining from any previous adjustment that
has not yet been completed.
.SH RETURN VALUE
On success,
.BR adjtime ()
returns 0.
On failure, \-1 is returned, and
.I errno
is set to indicate the error.
.SH ERRORS
.TP
.B EINVAL
The adjustment in
.I delta
is outside the permitted range.
.TP
.B EPERM
The caller does not have sufficient privilege to adjust the time.
Under Linux, the
.B CAP_SYS_TIME
capability is required.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR adjtime ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
4.3BSD, System V.
.SH NOTES
The adjustment that
.BR adjtime ()
makes to the clock is carried out in such a manner that the clock
is always monotonically increasing.
Using
.BR adjtime ()
to adjust the time prevents the problems that can be caused for certain
applications (e.g.,
.BR make (1))
by abrupt positive or negative jumps in the system time.

.BR adjtime ()
is intended to be used to make small adjustments to the system time.
Most systems impose a limit on the adjustment that can be specified in
.IR delta .
In the glibc implementation,
.I delta
must be less than or equal to (INT_MAX / 1000000 \- 2)
and greater than or equal to (INT_MIN / 1000000 + 2)
(respectively 2145 and \-2145 seconds on i386).
.SH BUGS
A longstanding bug
.\" http://sourceware.org/bugzilla/show_bug?id=2449
.\" http://bugzilla.kernel.org/show_bug.cgi?id=6761
meant that if
.I delta
was specified as NULL,
no valid information about the outstanding clock adjustment was returned in
.IR olddelta .
(In this circumstance,
.BR adjtime ()
should return the outstanding clock adjustment, without changing it.)
This bug is fixed
.\" Thanks to the new adjtimex() ADJ_OFFSET_SS_READ flag
on systems with glibc 2.8 or later and
Linux kernel 2.6.26 or later.
.SH SEE ALSO
.BR adjtimex (2),
.BR gettimeofday (2),
.BR time (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2003 Andries Brouwer (aeb@cwi.nl)
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.TH AIO_CANCEL 3 2015-03-02  "" "Linux Programmer's Manual"
.SH NAME
aio_cancel \- cancel an outstanding asynchronous I/O request
.SH SYNOPSIS
.B "#include <aio.h>"
.sp
.BI "int aio_cancel(int " fd ", struct aiocb *" aiocbp );
.sp
Link with \fI\-lrt\fP.
.SH DESCRIPTION
The
.BR aio_cancel ()
function attempts to cancel outstanding asynchronous I/O requests
for the file descriptor
.IR fd .
If
.I aiocbp
is NULL, all such requests are canceled.
Otherwise, only the request
described by the control block pointed to by
.I aiocbp
is canceled.
(See
.BR aio (7)
for a description of the
.I aiocb
structure.)
.LP
Normal asynchronous notification occurs for canceled requests (see
.BR aio (7)
and
.BR sigevent (7)).
The request return status
.RB ( aio_return (3))
is set to \-1, and the request error status
.RB ( aio_error (3))
is set to
.BR ECANCELED .
The control block of requests that cannot be canceled is not changed.
.LP
If the request could not be canceled,
then it will terminate in the usual way after performing the I/O operation.
(In this case,
.BR aio_error (3)
will return the status
.BR EINPROGRESSS .)
.LP
If
.I aiocbp
is not NULL, and
.I fd
differs from the file descriptor with which the asynchronous operation
was initiated, unspecified results occur.
.LP
Which operations are cancelable is implementation-defined.
.\" FreeBSD: not those on raw disk devices.
.SH RETURN VALUE
The
.BR aio_cancel ()
function returns one of the following values:
.TP
.B AIO_CANCELED
All requests were successfully canceled.
.TP
.B AIO_NOTCANCELED
At least one of the
requests specified was not canceled because it was in progress.
In this case, one may check the status of individual requests using
.BR aio_error (3).
.TP
.B AIO_ALLDONE
All requests had already been completed before the call.
.TP
\-1
An error occurred.
The cause of the error can be found by inspecting
.IR errno .
.SH ERRORS
.TP
.B EBADF
.I fd
is not a valid file descriptor.
.TP
.B ENOSYS
.BR aio_cancel ()
is not implemented.
.SH VERSIONS
The
.BR aio_cancel ()
function is available since glibc 2.1.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR aio_cancel ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
POSIX.1-2001, POSIX.1-2008.
.SH EXAMPLE
See
.BR aio (7).
.SH SEE ALSO
.BR aio_error (3),
.BR aio_fsync (3),
.BR aio_read (3),
.BR aio_return (3),
.BR aio_suspend (3),
.BR aio_write (3),
.BR lio_listio (3),
.BR aio (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2003 Andries Brouwer (aeb@cwi.nl)
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.TH AIO_ERROR 3 2015-03-02  "" "Linux Programmer's Manual"
.SH NAME
aio_error \- get error status of asynchronous I/O operation
.SH SYNOPSIS
.B "#include <aio.h>"
.sp
.BI "int aio_error(const struct aiocb *" aiocbp );
.sp
Link with \fI\-lrt\fP.
.SH DESCRIPTION
The
.BR aio_error ()
function returns the error status for the asynchronous I/O request
with control block pointed to by
.IR aiocbp .
(See
.BR aio (7)
for a description of the
.I aiocb
structure.)
.SH RETURN VALUE
This function returns one of the following:
.IP * 3
.BR EINPROGRESS ,
if the request has not been
completed yet.
.IP *
.BR ECANCELED ,
if the request was canceled.
.IP *
0, if the request completed successfully.
.IP *
A positive error number, if the asynchronous I/O operation failed.
This is the same value that would have been stored in the
.I errno
variable in the case of a synchronous
.BR read (2),
.BR write (2),
.BR fsync (2),
or
.BR fdatasync (2)
call.
.SH ERRORS
.TP
.B EINVAL
.I aiocbp
does not point at a control block for an asynchronous I/O request
of which the return status (see
.BR aio_return (3))
has not been retrieved yet.
.TP
.B ENOSYS
.BR aio_error ()
is not implemented.
.SH VERSIONS
The
.BR aio_error ()
function is available since glibc 2.1.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR aio_error ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
POSIX.1-2001, POSIX.1-2008.
.SH EXAMPLE
See
.BR aio (7).
.SH SEE ALSO
.BR aio_cancel (3),
.BR aio_fsync (3),
.BR aio_read (3),
.BR aio_return (3),
.BR aio_suspend (3),
.BR aio_write (3),
.BR lio_listio (3),
.BR aio (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2003 Andries Brouwer (aeb@cwi.nl)
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.TH AIO_FSYNC 3 2015-03-02  "" "Linux Programmer's Manual"
.SH NAME
aio_fsync \- asynchronous file synchronization
.SH SYNOPSIS
.B "#include <aio.h>"
.sp
.BI "int aio_fsync(int " op ", struct aiocb *" aiocbp );
.sp
Link with \fI\-lrt\fP.
.SH DESCRIPTION
The
.BR aio_fsync ()
function does a sync on all outstanding asynchronous I/O operations
associated with
.IR aiocbp\->aio_fildes .
(See
.BR aio (7)
for a description of the
.I aiocb
structure.)
.LP
More precisely, if
.I op
is
.BR O_SYNC ,
then all currently queued I/O operations shall be
completed as if by a call of
.BR fsync (2),
and if
.I op
is
.BR O_DSYNC ,
this call is the asynchronous analog of
.BR fdatasync (2).

Note that this is a request only; it does not wait for I/O completion.
.LP
Apart from
.IR aio_fildes ,
the only field in the structure pointed to by
.I aiocbp
that is used by this call is the
.I aio_sigevent
field (a
.I sigevent
structure, described in
.BR sigevent (7)),
which indicates the desired type of asynchronous notification at completion.
All other fields are ignored.
.SH RETURN VALUE
On success (the sync request was successfully queued)
this function returns 0.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EAGAIN
Out of resources.
.TP
.B EBADF
.I aio_fildes
is not a valid file descriptor open for writing.
.TP
.B EINVAL
Synchronized I/O is not supported for this file, or
.I op
is not
.B O_SYNC
or
.BR O_DSYNC .
.TP
.B ENOSYS
.BR aio_fsync ()
is not implemented.
.SH VERSIONS
The
.BR aio_fsync ()
function is available since glibc 2.1.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR aio_fsync ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
POSIX.1-2001, POSIX.1-2008.
.SH SEE ALSO
.BR aio_cancel (3),
.BR aio_error (3),
.BR aio_read (3),
.BR aio_return (3),
.BR aio_suspend (3),
.BR aio_write (3),
.BR lio_listio (3),
.BR aio (7),
.BR sigevent (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
'\" t
.\" Copyright (c) 2010 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH AIO_INIT 3  2012-04-26 "Linux" "Linux Programmer's Manual"
.SH NAME
aio_init \- asynchronous I/O initialization
.SH SYNOPSIS
.nf
.BR "#define _GNU_SOURCE" "         /* See feature_test_macros(7) */"
.B "#include <aio.h>"

.BI "void aio_init(const struct aioinit *" init );
.fi
.sp
Link with \fI\-lrt\fP.
.SH DESCRIPTION
The GNU-specific
.BR aio_init ()
function allows the caller to provide tuning hints to the
glibc POSIX AIO implementation.
Use of this function is optional, but to be effective,
it must be called before employing any other functions in the POSIX AIO API.

The tuning information is provided in the buffer pointed to by the argument
.IR init .
This buffer is a structure of the following form:
.PP
.in +4n
.nf
struct aioinit {
    int aio_threads;    /* Maximum number of threads */
    int aio_num;        /* Number of expected simultaneous
                           requests */
    int aio_locks;      /* Not used */
    int aio_usedba;     /* Not used */
    int aio_debug;      /* Not used */
    int aio_numusers;   /* Not used */
    int aio_idle_time;  /* Number of seconds before idle thread
                           terminates (since glibc 2.2) */
    int aio_reserved;
};
.fi
.in
.PP
The following fields are used in the
.I aioinit
structure:
.TP 15
.I aio_threads
This field specifies the maximum number of worker threads that
may be used by the implementation.
If the number of outstanding I/O operations exceeds this limit,
then excess operations will be queued until a worker thread becomes free.
If this field is specified with a value less than 1, the value 1 is used.
The default value is 20.
.TP
.I aio_num
This field should specify the maximum number of simultaneous I/O requests
that the caller expects to enqueue.
If a value less than 32 is specified for this field,
it is rounded up to 32.
.\" FIXME . But, if aio_num > 32, the behavior looks strange. See
.\" http://sourceware.org/bugzilla/show_bug.cgi?id=12083
The default value is 64.
.TP
.I aio_idle_time
This field specifies the amount of time in seconds that a
worker thread should wait for further requests before terminating,
after having completed a previous request.
The default value is 1.
.SH VERSIONS
The
.BR aio_init ()
function is available since glibc 2.1.
.SH CONFORMING TO
This function is a GNU extension.
.SH SEE ALSO
.BR aio (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2003 Andries Brouwer (aeb@cwi.nl)
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.TH AIO_READ 3 2015-03-02  "" "Linux Programmer's Manual"
.SH NAME
aio_read \- asynchronous read
.SH SYNOPSIS
.B "#include <aio.h>"
.sp
.BI "int aio_read(struct aiocb *" aiocbp );
.sp
Link with \fI\-lrt\fP.
.SH DESCRIPTION
The
.BR aio_read ()
function queues the I/O request described by the buffer pointed to by
.IR aiocbp .
This function is the asynchronous analog of
.BR read (2).
The arguments of the call

    read(fd, buf, count)

correspond (in order) to the fields
.IR aio_fildes ,
.IR aio_buf ,
and
.IR aio_nbytes
of the structure pointed to by
.IR aiocbp .
(See
.BR aio (7)
for a description of the
.I aiocb
structure.)
.LP
The data is read starting at the absolute file offset
.IR aiocbp\->aio_offset ,
regardless of the current file offset.
After the call,
the value of the current file offset is unspecified.
.LP
The "asynchronous" means that this call returns as soon as the
request has been enqueued; the read may or may not have completed
when the call returns.
One tests for completion using
.BR aio_error (3).
The return status of a completed I/O operation can be obtained by
.BR aio_return (3).
Asynchronous notification of I/O completion can be obtained by setting
.IR aiocbp\->aio_sigevent
appropriately; see
.BR sigevent (7)
for details.
.LP
If
.B _POSIX_PRIORITIZED_IO
is defined, and this file supports it,
then the asynchronous operation is submitted at a priority equal
to that of the calling process minus
.IR aiocbp\->aio_reqprio .
.LP
The field
.I aiocbp\->aio_lio_opcode
is ignored.
.LP
No data is read from a regular file beyond its maximum offset.
.SH RETURN VALUE
On success, 0 is returned.
On error, the request is not enqueued, \-1
is returned, and
.I errno
is set appropriately.
If an error is detected only later, it will
be reported via
.BR aio_return (3)
(returns status \-1) and
.BR aio_error (3)
(error status\(emwhatever one would have gotten in
.IR errno ,
such as
.BR EBADF ).
.SH ERRORS
.TP
.B EAGAIN
Out of resources.
.TP
.B EBADF
.I aio_fildes
is not a valid file descriptor open for reading.
.TP
.B EINVAL
One or more of
.IR aio_offset ,
.IR aio_reqprio ,
or
.I aio_nbytes
are invalid.
.TP
.B ENOSYS
.BR aio_read ()
is not implemented.
.TP
.B EOVERFLOW
The file is a regular file, we start reading before end-of-file
and want at least one byte, but the starting position is past
the maximum offset for this file.
.SH VERSIONS
The
.BR aio_read ()
function is available since glibc 2.1.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR aio_read ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
POSIX.1-2001, POSIX.1-2008.
.SH NOTES
It is a good idea to zero out the control block before use.
The control block must not be changed while the read operation
is in progress.
The buffer area being read into
.\" or the control block of the operation
must not be accessed during the operation or undefined results may occur.
The memory areas involved must remain valid.

Simultaneous I/O operations specifying the same
.I aiocb
structure produce undefined results.
.SH EXAMPLE
See
.BR aio (7).
.SH SEE ALSO
.BR aio_cancel (3),
.BR aio_error (3),
.BR aio_fsync (3),
.BR aio_return (3),
.BR aio_suspend (3),
.BR aio_write (3),
.BR lio_listio (3),
.BR aio (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2003 Andries Brouwer (aeb@cwi.nl)
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.TH AIO_RETURN 3 2015-03-02  "" "Linux Programmer's Manual"
.SH NAME
aio_return \- get return status of asynchronous I/O operation
.SH SYNOPSIS
.B "#include <aio.h>"
.sp
.BI "ssize_t aio_return(struct aiocb *" aiocbp );
.sp
Link with \fI\-lrt\fP.
.SH DESCRIPTION
The
.BR aio_return ()
function returns the final return status for the asynchronous I/O request
with control block pointed to by
.IR aiocbp .
(See
.BR aio (7)
for a description of the
.I aiocb
structure.)
.LP
This function should be called only once for any given request, after
.BR aio_error (3)
returns something other than
.BR EINPROGRESS .
.SH RETURN VALUE
If the asynchronous I/O operation has completed, this function returns
the value that would have been returned in case of a synchronous
.BR read (2),
.BR write (2),
.BR fsync (2)
or
.BR fdatasync (2),
call.
On error, \-1 is returned, and \fIerrno\fP is set appropriately.

If the asynchronous I/O operation has not yet completed,
the return value and effect of
.BR aio_return ()
are undefined.
.SH ERRORS
.TP
.B EINVAL
.I aiocbp
does not point at a control block for an asynchronous I/O request
of which the return status has not been retrieved yet.
.TP
.B ENOSYS
.BR aio_return ()
is not implemented.
.SH VERSIONS
The
.BR aio_return ()
function is available since glibc 2.1.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR aio_return ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
POSIX.1-2001, POSIX.1-2008.
.SH EXAMPLE
See
.BR aio (7).
.SH SEE ALSO
.BR aio_cancel (3),
.BR aio_error (3),
.BR aio_fsync (3),
.BR aio_read (3),
.BR aio_suspend (3),
.BR aio_write (3),
.BR lio_listio (3),
.BR aio (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2003 Andries Brouwer (aeb@cwi.nl)
.\" and Copyright (C) 2010 Michael kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.TH AIO_SUSPEND 3 2015-03-02  "" "Linux Programmer's Manual"
.SH NAME
aio_suspend \- wait for asynchronous I/O operation or timeout
.SH SYNOPSIS
.nf
.sp
.B "#include <aio.h>"
.sp
.BI "int aio_suspend(const struct aiocb * const " aiocb_list [],
.br
.BI "                int " nitems ", const struct timespec *" timeout );
.sp
Link with \fI\-lrt\fP.
.fi
.SH DESCRIPTION
The
.BR aio_suspend ()
function suspends the calling thread until one of the following occurs:
.IP * 3
One or more of the asynchronous I/O requests in the list
.I aiocb_list
has completed.
.IP *
A signal is delivered.
.IP *
.I timeout
is not NULL and the specified time interval has passed.
(For details of the
.I timespec
structure, see
.BR nanosleep (2).)
.LP
The
.I nitems
argument specifies the number of items in
.IR aiocb_list .
Each item in the list pointed to by
.I aiocb_list
must be either NULL (and then is ignored),
or a pointer to a control block on which I/O was initiated using
.BR aio_read (3),
.BR aio_write (3),
or
.BR lio_listio (3).
(See
.BR aio (7)
for a description of the
.I aiocb
structure.)
.LP
If
.B CLOCK_MONOTONIC
is supported, this clock is used to measure
the timeout interval (see
.BR clock_gettime (3)).
.SH RETURN VALUE
If this function returns after completion of one of the I/O
requests specified in
.IR aiocb_list ,
0 is returned.
Otherwise, \-1 is returned, and
.I errno
is set to indicate the error.
.SH ERRORS
.TP
.B EAGAIN
The call timed out before any of the indicated operations
had completed.
.TP
.B EINTR
The call was ended by signal
(possibly the completion signal of one of the operations we were
waiting for); see
.BR signal (7).
.TP
.B ENOSYS
.BR aio_suspend ()
is not implemented.
.SH VERSIONS
The
.BR aio_suspend ()
function is available since glibc 2.1.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR aio_suspend ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
POSIX.1-2001, POSIX.1-2008.
.SH NOTES
One can achieve polling by using a non-NULL
.I timeout
that specifies a zero time interval.

If one or more of the asynchronous I/O operations specified in
.IR aiocb_list
has already completed at the time of the call to
.BR aio_suspend (),
then the call returns immediately.

To determine which I/O operations have completed
after a successful return from
.BR aio_suspend (),
use
.BR aio_error (3)
to scan the list of
.I aiocb
structures pointed to by
.IR aiocb_list .
.SH SEE ALSO
.BR aio_cancel (3),
.BR aio_error (3),
.BR aio_fsync (3),
.BR aio_read (3),
.BR aio_return (3),
.BR aio_write (3),
.BR lio_listio (3),
.BR aio (7),
.BR time (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2003 Andries Brouwer (aeb@cwi.nl)
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.TH AIO_WRITE 3 2015-03-02  "" "Linux Programmer's Manual"
.SH NAME
aio_write \- asynchronous write
.SH SYNOPSIS
.B "#include <aio.h>"
.sp
.BI "int aio_write(struct aiocb *" aiocbp );
.sp
Link with \fI\-lrt\fP.
.SH DESCRIPTION
The
.BR aio_write ()
function queues the I/O request described by the buffer pointed to by
.IR aiocbp .
This function is the asynchronous analog of
.BR write (2).
The arguments of the call

    write(fd, buf, count)

correspond (in order) to the fields
.IR aio_fildes ,
.IR aio_buf ,
and
.IR aio_nbytes
of the structure pointed to by
.IR aiocbp .
(See
.BR aio (7)
for a description of the
.I aiocb
structure.)
.LP
If
.B O_APPEND
is not set, the data is written starting at the
absolute file offset
.IR aiocbp\->aio_offset ,
regardless of the current file offset.
If
.B O_APPEND
is set, data is written at the end of the file in the same order as
.BR aio_write ()
calls are made.
After the call, the value of the current file offset is unspecified.
.LP
The "asynchronous" means that this call returns as soon as the
request has been enqueued; the write may or may not have completed
when the call returns.
One tests for completion using
.BR aio_error (3).
The return status of a completed I/O operation can be obtained
.BR aio_return (3).
Asynchronous notification of I/O completion can be obtained by setting
.IR aiocbp\->aio_sigevent
appropriately; see
.BR sigevent (7)
for details.
.LP
If
.B _POSIX_PRIORITIZED_IO
is defined, and this file supports it,
then the asynchronous operation is submitted at a priority equal
to that of the calling process minus
.IR aiocbp\->aio_reqprio .
.LP
The field
.I aiocbp\->aio_lio_opcode
is ignored.
.LP
No data is written to a regular file beyond its maximum offset.
.SH RETURN VALUE
On success, 0 is returned.
On error, the request is not enqueued, \-1
is returned, and
.I errno
is set appropriately.
If an error is detected only later, it will
be reported via
.BR aio_return (3)
(returns status \-1) and
.BR aio_error (3)
(error status\(emwhatever one would have gotten in
.IR errno ,
such as
.BR EBADF ).
.SH ERRORS
.TP
.B EAGAIN
Out of resources.
.TP
.B EBADF
.I aio_fildes
is not a valid file descriptor open for writing.
.TP
.B EFBIG
The file is a regular file, we want to write at least one byte,
but the starting position is at or beyond the maximum offset for this file.
.TP
.B EINVAL
One or more of
.IR aio_offset ,
.IR aio_reqprio ,
.I aio_nbytes
are invalid.
.TP
.B ENOSYS
.BR aio_write ()
is not implemented.
.SH VERSIONS
The
.BR aio_write ()
function is available since glibc 2.1.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR aio_write ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
POSIX.1-2001, POSIX.1-2008.
.SH NOTES
It is a good idea to zero out the control block before use.
The control block must not be changed while the write operation
is in progress.
The buffer area being written out
.\" or the control block of the operation
must not be accessed during the operation or undefined results may occur.
The memory areas involved must remain valid.

Simultaneous I/O operations specifying the same
.I aiocb
structure produce undefined results.
.SH SEE ALSO
.BR aio_cancel (3),
.BR aio_error (3),
.BR aio_fsync (3),
.BR aio_read (3),
.BR aio_return (3),
.BR aio_suspend (3),
.BR lio_listio (3),
.BR aio (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1980, 1991 Regents of the University of California.
.\" All rights reserved.
.\"
.\" %%%LICENSE_START(BSD_4_CLAUSE_UCB)
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\" %%%LICENSE_END
.\"
.\"     @(#)alloca.3	5.1 (Berkeley) 5/2/91
.\"
.\" Converted Mon Nov 29 11:05:55 1993 by Rik Faith <faith@cs.unc.edu>
.\" Modified Tue Oct 22 23:41:56 1996 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified 2002-07-17, aeb
.\" 2008-01-24, mtk:
.\"     Various rewrites and additions (notes on longjmp() and SIGSEGV).
.\"     Weaken warning against use of alloca() (as per Debian bug 461100).
.\"
.TH ALLOCA 3 2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
alloca \- allocate memory that is automatically freed
.SH SYNOPSIS
.B #include <alloca.h>
.sp
.BI "void *alloca(size_t " size );
.SH DESCRIPTION
The
.BR alloca ()
function allocates
.I size
bytes of space in the stack frame of the caller.
This temporary space is
automatically freed when the function that called
.BR alloca ()
returns to its caller.
.SH RETURN VALUE
The
.BR alloca ()
function returns a pointer to the beginning of the allocated space.
If the allocation causes stack overflow, program behavior is undefined.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR alloca ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
This function is not in POSIX.1-2001.

There is evidence that the
.BR alloca ()
function appeared in 32V, PWB, PWB.2, 3BSD, and 4BSD.
There is a man page for it in 4.3BSD.
Linux uses the GNU version.
.SH NOTES
The
.BR alloca ()
function is machine- and compiler-dependent.
For certain applications,
its use can improve efficiency compared to the use of
.BR malloc (3)
plus
.BR free (3).
In certain cases,
it can also simplify memory deallocation in applications that use
.BR longjmp (3)
or
.BR siglongjmp (3).
Otherwise, its use is discouraged.

Because the space allocated by
.BR alloca ()
is allocated within the stack frame,
that space is automatically freed if the function return
is jumped over by a call to
.BR longjmp (3)
or
.BR siglongjmp (3).

Do not attempt to
.BR free (3)
space allocated by
.BR alloca ()!
.SS Notes on the GNU version
Normally,
.BR gcc (1)
translates calls to
.BR alloca ()
with inlined code.
This is not done when either the
.IR "\-ansi" ,
.IR "\-std=c89" ,
.IR "\-std=c99" ,
or the
.IR "\-std=c11"
option is given
.BR and
the header
.I <alloca.h>
is not included.
Otherwise, (without an \-ansi or \-std=c* option) the glibc version of
.I <stdlib.h>
includes
.I <alloca.h>
and that contains the lines:
.nf

    #ifdef  __GNUC__
    #define alloca(size)   __builtin_alloca (size)
    #endif

.fi
with messy consequences if one has a private version of this function.
.LP
The fact that the code is inlined means that it is impossible
to take the address of this function, or to change its behavior
by linking with a different library.
.LP
The inlined code often consists of a single instruction adjusting
the stack pointer, and does not check for stack overflow.
Thus, there is no NULL error return.
.SH BUGS
There is no error indication if the stack frame cannot be extended.
(However, after a failed allocation, the program is likely to receive a
.B SIGSEGV
signal if it attempts to access the unallocated space.)

On many systems
.BR alloca ()
cannot be used inside the list of arguments of a function call, because
the stack space reserved by
.BR alloca ()
would appear on the stack in the middle of the space for the
function arguments.
.SH SEE ALSO
.BR brk (2),
.BR longjmp (3),
.BR malloc (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 2002 walter harms (walter.harms@informatik.uni-oldenburg.de)
.\"
.\" %%%LICENSE_START(GPL_NOVERSION_ONELINE)
.\" Distributed under GPL
.\" %%%LICENSE_END
.\"
.\" based on the description in glibc source and infopages
.\"
.\" Corrections and additions, aeb
.TH ARGZ_ADD 3 2015-03-02  "" "Linux Programmer's Manual"
.SH NAME
argz_add, argz_add_sep, argz_append, argz_count, argz_create,
argz_create_sep, argz_delete, argz_extract, argz_insert,
argz_next, argz_replace, argz_stringify \- functions to handle an argz list
.SH SYNOPSIS
.nf
.B "#include <argz.h>"
.sp
.BI "error_t argz_add(char **" argz ", size_t *" argz_len \
", const char *" str );
.sp
.BI "error_t argz_add_sep(char **" argz ", size_t *" argz_len ,
.BI "                     const char *" str ", int " delim );
.sp
.BI "error_t argz_append(char **" argz ", size_t *" argz_len ,
.BI "                     const char *" buf ", size_t " buf_len );
.sp
.BI "size_t argz_count(const char *" argz ", size_t " argz_len );
.sp
.BI "error_t argz_create(char * const " argv "[], char **" argz ,
.BI "                     size_t *" argz_len );
.sp
.BI "error_t argz_create_sep(const char *" str ", int " sep ", char **" argz ,
.BI "                     size_t *" argz_len );
.sp
.BI "void argz_delete(char **" argz ", size_t *" argz_len ", char *" entry );
.sp
.BI "void argz_extract(const char *" argz ", size_t " argz_len ", char  **" argv );
.sp
.BI "error_t argz_insert(char **" argz ", size_t *" argz_len ", char *" before ,
.BI "                     const char *" entry );
.sp
.BI "char *argz_next(const char *" argz ", size_t " argz_len ", const char *" entry );
.sp
.BI "error_t argz_replace(char **" argz ", size_t *" argz_len \
", const char *" str ,
.BI "                     const char *" with ", unsigned int *" replace_count );
.sp
.BI "void argz_stringify(char *" argz ", size_t " len ", int " sep );
.fi
.SH DESCRIPTION
These functions are glibc-specific.
.LP
An argz vector is a pointer to a character buffer together with a length.
The intended interpretation of the character buffer is an array
of strings, where the strings are separated by null bytes (\(aq\\0\(aq).
If the length is nonzero, the last byte of the buffer must be a null byte.
.LP
These functions are for handling argz vectors.
The pair (NULL,0) is an argz vector, and, conversely,
argz vectors of length 0 must have null pointer.
Allocation of nonempty argz vectors is done using
.BR malloc (3),
so that
.BR free (3)
can be used to dispose of them again.
.LP
.BR argz_add ()
adds the string
.I str
at the end of the array
.IR *argz ,
and updates
.I *argz
and
.IR *argz_len .
.LP
.BR argz_add_sep ()
is similar, but splits the string
.I str
into substrings separated by the delimiter
.IR delim .
For example, one might use this on a UNIX search path with
delimiter \(aq:\(aq.
.LP
.BR argz_append ()
appends the argz vector
.RI ( buf ,\  buf_len )
after
.RI ( *argz ,\  *argz_len )
and updates
.IR *argz
and
.IR *argz_len .
(Thus,
.I *argz_len
will be increased by
.IR buf_len .)
.LP
.BR argz_count ()
counts the number of strings, that is,
the number of null bytes (\(aq\\0\(aq), in
.RI ( argz ,\  argz_len ).
.LP
.BR argz_create ()
converts a UNIX-style argument vector
.IR argv ,
terminated by
.IR "(char\ *)\ 0" ,
into an argz vector
.RI ( *argz ,\  *argz_len ).
.LP
.BR argz_create_sep ()
converts the null-terminated string
.I str
into an argz vector
.RI ( *argz ,\  *argz_len )
by breaking it up at every occurrence of the separator
.IR sep .
.LP
.BR argz_delete ()
removes the substring pointed to by
.I entry
from the argz vector
.RI ( *argz ,\  *argz_len )
and updates
.I *argz
and
.IR *argz_len .
.LP
.BR argz_extract ()
is the opposite of
.BR argz_create ().
It takes the argz vector
.RI ( argz ,\  argz_len )
and fills the array starting at
.I argv
with pointers to the substrings, and a final NULL,
making a UNIX-style argv vector.
The array
.I argv
must have room for
.IR argz_count ( argz ", " argz_len ") + 1"
pointers.
.LP
.BR argz_insert ()
is the opposite of
.BR argz_delete ().
It inserts the argument
.I entry
at position
.I before
into the argz vector
.RI ( *argz ,\  *argz_len )
and updates
.I *argz
and
.IR *argz_len .
If
.I before
is NULL, then
.I entry
will inserted at the end.
.LP
.BR argz_next ()
is a function to step trough the argz vector.
If
.I entry
is NULL, the first entry is returned.
Otherwise, the entry
following is returned.
It returns NULL if there is no following entry.
.LP
.BR argz_replace ()
replaces each occurrence of
.I str
with
.IR with ,
reallocating argz as necessary.
If
.I replace_count
is non-NULL,
.I *replace_count
will be incremented by the number of replacements.
.LP
.BR argz_stringify ()
is the opposite of
.BR argz_create_sep ().
It transforms the argz vector into a normal string by replacing
all null bytes (\(aq\\0\(aq) except the last by
.IR sep .
.SH RETURN VALUE
All argz functions that do memory allocation have a return type of
.IR error_t ,
and return 0 for success, and
.B ENOMEM
if an allocation error occurs.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw33 lb lb
l l l.
Interface	Attribute	Value
T{
.BR argz_add (),
.BR argz_add_sep (),
.br
.BR argz_append (),
.BR argz_count (),
.br
.BR argz_create (),
.BR argz_create_sep (),
.br
.BR argz_delete (),
.BR argz_extract (),
.br
.BR argz_insert (),
.BR argz_next (),
.br
.BR argz_replace (),
.BR argz_stringify ()
T}	Thread safety	MT-Safe
.TE

.SH CONFORMING TO
These functions are a GNU extension.
Handle with care.
.SH BUGS
Argz vectors without a terminating null byte may lead to
Segmentation Faults.
.SH SEE ALSO
.BR envz_add (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\" and Copyright 2008, Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified 1993-07-24 by Rik Faith (faith@cs.unc.edu)
.\" Modified 2002-07-25 by Walter Harms
.\" 	(walter.harms@informatik.uni-oldenburg.de)
.\"
.TH ASIN 3 2015-04-19 "" "Linux Programmer's Manual"
.SH NAME
asin, asinf, asinl \- arc sine function
.SH SYNOPSIS
.nf
.B #include <math.h>
.sp
.BI "double asin(double " x );
.br
.BI "float asinf(float " x );
.br
.BI "long double asinl(long double " x );
.fi
.sp
Link with \fI\-lm\fP.
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR asinf (),
.BR asinl ():
.RS 4
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE\ >=\ 600 || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.ad b
.SH DESCRIPTION
These functions calculate the principal value of the arc sine of
.IR x ;
that is the value whose sine is
.IR x .
.SH RETURN VALUE
On success, these functions return the principal value of the arc sine of
.IR x
in radians; the return value is in the range [\-pi/2,\ pi/2].

If
.I x
is a NaN, a NaN is returned.

If
.I x
is +0 (\-0),
+0 (\-0) is returned.

If
.I x
is outside the range [\-1,\ 1],
a domain error occurs,
and a NaN is returned.
.\"
.\" POSIX.1-2001 documents an optional range error for subnormal x;
.\" glibc 2.8 does not do this.
.SH ERRORS
See
.BR math_error (7)
for information on how to determine whether an error has occurred
when calling these functions.
.PP
The following errors can occur:
.TP
Domain error: \fIx\fP is outside the range [\-1,\ 1]
.I errno
is set to
.BR EDOM .
An invalid floating-point exception
.RB ( FE_INVALID )
is raised.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw24 lb lb
l l l.
Interface	Attribute	Value
T{
.BR asin (),
.BR asinf (),
.BR asinl ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C99, POSIX.1-2001, POSIX.1-2008.

The variant returning
.I double
also conforms to
SVr4, 4.3BSD, C89.
.SH SEE ALSO
.BR acos (3),
.BR atan (3),
.BR atan2 (3),
.BR casin (3),
.BR cos (3),
.BR sin (3),
.BR tan (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\" and Copyright 2008, Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified 1993-07-24 by Rik Faith (faith@cs.unc.edu)
.\" Modified 2002-07-27 by Walter Harms
.\" 	(walter.harms@informatik.uni-oldenburg.de)
.\"
.TH ASINH 3  2015-04-19 "GNU"  "Linux Programmer's Manual"
.SH NAME
asinh, asinhf, asinhl \- inverse hyperbolic sine function
.SH SYNOPSIS
.nf
.B #include <math.h>
.sp
.BI "double asinh(double " x );
.br
.BI "float asinhf(float " x );
.br
.BI "long double asinhl(long double " x );
.fi
.sp
Link with \fI\-lm\fP.
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR asinh ():
.RS 4
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE\ >=\ 500 ||
_XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.br
.BR asinhf (),
.BR asinhl ():
.RS 4
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE\ >=\ 600 || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.ad b
.SH DESCRIPTION
These functions calculate the inverse hyperbolic sine of
.IR x ;
that is the value whose hyperbolic sine is
.IR x .
.SH RETURN VALUE
On success, these functions return the inverse hyperbolic sine of
.IR x .

If
.I x
is a NaN, a NaN is returned.

If
.I x
is +0 (\-0), +0 (\-0) is returned.

If
.I x
is positive infinity (negative infinity),
positive infinity (negative infinity) is returned.
.\"
.\" POSIX.1-2001 documents an optional range error for subnormal x;
.\" glibc 2.8 does not do this.
.SH ERRORS
No errors occur.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw27 lb lb
l l l.
Interface	Attribute	Value
T{
.BR asinh (),
.BR asinhf (),
.BR asinhl ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C99, POSIX.1-2001, POSIX.1-2008.

The variant returning
.I double
also conforms to
SVr4, 4.3BSD, C89.
.SH SEE ALSO
.BR acosh (3),
.BR atanh (3),
.BR casinh (3),
.BR cosh (3),
.BR sinh (3),
.BR tanh (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2001 Andries Brouwer <aeb@cwi.nl>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Text fragments inspired by Martin Schulze <joey@infodrom.org>.
.\"
.TH ASPRINTF 3 2015-04-19 "GNU" "Linux Programmer's Manual"
.SH NAME
asprintf, vasprintf \- print to allocated string
.SH SYNOPSIS
.BR "#define _GNU_SOURCE" "         /* See feature_test_macros(7) */"
.br
.B #include <stdio.h>
.sp
.BI "int asprintf(char **" strp ", const char *" fmt ", ...);"
.sp
.BI "int vasprintf(char **" strp ", const char *" fmt ", va_list " ap );
.SH DESCRIPTION
The functions
.BR asprintf ()
and
.BR vasprintf ()
are analogs of
.BR sprintf (3)
and
.BR vsprintf (3),
except that they allocate a string large enough to hold the output
including the terminating null byte (\(aq\\0\(aq),
and return a pointer to it via the first argument.
This pointer should be passed to
.BR free (3)
to release the allocated storage when it is no longer needed.
.SH RETURN VALUE
When successful, these functions return the number of bytes printed,
just like
.BR sprintf (3).
If memory allocation wasn't possible, or some other error occurs,
these functions will return \-1, and the contents of
.I strp
is undefined.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw23 lb lb
l l l.
Interface	Attribute	Value
T{
.BR asprintf (),
.BR vasprintf ()
T}	Thread safety	MT-Safe locale
.TE

.SH CONFORMING TO
These functions are GNU extensions, not in C or POSIX.
They are also available under *BSD.
The FreeBSD implementation sets
.I strp
to NULL on error.
.SH SEE ALSO
.BR free (3),
.BR malloc (3),
.BR printf (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1993 by Thomas Koenig (ig25@rz.uni-karlsruhe.de)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified Sat Jul 24 21:42:42 1993 by Rik Faith <faith@cs.unc.edu>
.\" Modified Tue Oct 22 23:44:11 1996 by Eric S. Raymond <esr@thyrsus.com>
.TH ASSERT 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
assert \- abort the program if assertion is false
.SH SYNOPSIS
.nf
.B #include <assert.h>
.sp
.BI "void assert(scalar " expression );
.fi
.SH DESCRIPTION
If the macro
.B NDEBUG
was defined at the moment
.I <assert.h>
was last included, the macro
.BR assert ()
generates no code, and hence does nothing at all.
Otherwise, the macro
.BR assert ()
prints an error message to standard error and terminates the program
by calling
.BR abort (3)
if
.I expression
is false (i.e., compares equal to zero).
.LP
The purpose of this macro is to help programmers find bugs in
their programs.
The message "assertion failed in file foo.c, function
do_bar(), line 1287" is of no help at all to a user.
.SH RETURN VALUE
No value is returned.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR assert ()
T}	Thread safety	MT-Safe
.TE

.SH CONFORMING TO
POSIX.1-2001, C89, C99.
In C89,
.I expression
is required to be of type
.I int
and undefined behavior results if it is not, but in C99
it may have any scalar type.
.\" See Defect Report 107 for more details.
.SH BUGS
.BR assert ()
is implemented as a macro; if the expression tested has side-effects,
program behavior will be different depending on whether
.B NDEBUG
is defined.
This may create Heisenbugs which go away when debugging
is turned on.
.SH SEE ALSO
.BR abort (3),
.BR assert_perror (3),
.BR exit (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2002 Andries Brouwer <aeb@cwi.nl>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" This replaces an earlier man page written by Walter Harms
.\" <walter.harms@informatik.uni-oldenburg.de>.
.\"
.TH ASSERT_PERROR 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
assert_perror \- test errnum and abort
.SH SYNOPSIS
.nf
.BR "#define _GNU_SOURCE" "         /* See feature_test_macros(7) */"
.B #include <assert.h>
.sp
.BI "void assert_perror(int " errnum );
.fi
.SH DESCRIPTION
If the macro
.B NDEBUG
was defined at the moment
.I <assert.h>
was last included, the macro
.BR assert_perror ()
generates no code, and hence does nothing at all.
Otherwise, the macro
.BR assert_perror ()
prints an error message to standard error and terminates the program
by calling
.BR abort (3)
if
.I errnum
is nonzero.
The message contains the filename, function name and
line number of the macro call, and the output of
.IR strerror(errnum) .
.SH RETURN VALUE
No value is returned.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR assert_perror ()
T}	Thread safety	MT-Safe
.TE

.SH CONFORMING TO
This is a GNU extension.
.SH BUGS
The purpose of the assert macros is to help programmers find bugs in
their programs, things that cannot happen unless there was a coding mistake.
However, with system or library calls the situation is rather different,
and error returns can happen, and will happen, and should be tested for.
Not by an assert, where the test goes away when
.B NDEBUG
is defined,
but by proper error handling code.
Never use this macro.
.SH SEE ALSO
.BR abort (3),
.BR assert (3),
.BR exit (3),
.BR strerror (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\" and Copyright 2008, Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified 1993-07-24 by Rik Faith (faith@cs.unc.edu)
.\" Modified 2002-07-27 by Walter Harms
.\" 	(walter.harms@informatik.uni-oldenburg.de)
.\"
.TH ATAN2 3  2015-04-19 "" "Linux Programmer's Manual"
.SH NAME
atan2, atan2f, atan2l \- arc tangent function of two variables
.SH SYNOPSIS
.nf
.B #include <math.h>

.BI "double atan2(double " y ", double " x );
.BI "float atan2f(float " y ", float " x );
.BI "long double atan2l(long double " y ", long double " x );

.fi
Link with \fI\-lm\fP.
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR atan2f (),
.BR atan2l ():
.RS
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE\ >=\ 600 || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.ad b
.SH DESCRIPTION
These functions calculate the principal value of the arc tangent of
.IR y/x ,
using the signs of the two arguments to determine
the quadrant of the result.
.SH RETURN VALUE
On success, these functions return the principal value of the arc tangent of
.IR y/x
in radians; the return value is in the range [\-pi,\ pi].

If
.I y
is +0 (\-0) and
.I x
is less than 0, +pi (\-pi) is returned.

If
.I y
is +0 (\-0) and
.I x
is greater than 0, +0 (\-0) is returned.

If
.I y
is less than 0 and
.I x
is +0 or \-0, \-pi/2 is returned.

If
.I y
is greater than 0 and
.I x
is +0 or \-0, pi/2 is returned.

.\" POSIX.1 says:
.\" If
.\" .I x
.\" is 0, a pole error shall not occur.
.\"
If either
.I x
or
.I y
is NaN, a NaN is returned.

.\" POSIX.1 says:
.\" If the result underflows, a range error may occur and
.\" .I y/x
.\" should be returned.
.\"
If
.I y
is +0 (\-0) and
.I x
is \-0, +pi (\-pi) is returned.

If
.I y
is +0 (\-0) and
.I x
is +0, +0 (\-0) is returned.

If
.I y
is a finite value greater (less) than 0, and
.I x
is negative infinity, +pi (\-pi) is returned.

If
.I y
is a finite value greater (less) than 0, and
.I x
is positive infinity, +0 (\-0) is returned.

If
.I y
is positive infinity (negative infinity), and
.I x
is finite,
pi/2 (\-pi/2) is returned.

If
.I y
is positive infinity (negative infinity) and
.I x
is negative infinity, +3*pi/4 (\-3*pi/4) is returned.

If
.I y
is positive infinity (negative infinity) and
.I x
is positive infinity, +pi/4 (\-pi/4) is returned.
.\"
.\" POSIX.1 says:
.\" If both arguments are 0, a domain error shall not occur.
.SH ERRORS
No errors occur.
.\" POSIX.1 documents an optional underflow error
.\" glibc 2.8 does not do this.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw28 lb lb
l l l.
Interface	Attribute	Value
T{
.BR atan2 (),
.BR atan2f (),
.BR atan2l ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C99, POSIX.1-2001, POSIX.1-2008.

The variant returning
.I double
also conforms to
SVr4, 4.3BSD, C89.
.SH SEE ALSO
.BR acos (3),
.BR asin (3),
.BR atan (3),
.BR carg (3),
.BR cos (3),
.BR sin (3),
.BR tan (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\" and Copyright 2008, Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified 1993-07-24 by Rik Faith (faith@cs.unc.edu)
.\" Modified 2002-07-27 by Walter Harms
.\" 	(walter.harms@informatik.uni-oldenburg.de)
.\"
.TH ATAN 3  2015-04-19 "" "Linux Programmer's Manual"
.SH NAME
atan, atanf, atanl \- arc tangent function
.SH SYNOPSIS
.nf
.B #include <math.h>
.sp
.BI "double atan(double " x );
.br
.BI "float atanf(float " x );
.br
.BI "long double atanl( long double " x );
.sp
.fi
Link with \fI\-lm\fP.
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR atanf (),
.BR atanl ():
.RS 4
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE\ >=\ 600 || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.ad b
.SH DESCRIPTION
These functions calculate the principal value of the arc tangent of
.IR x ;
that is the value whose tangent is
.IR x .
.SH RETURN VALUE
On success, these functions return the principal value of the arc tangent of
.IR x
in radians; the return value is in the range [\-pi/2,\ pi/2].

If
.I x
is a NaN, a NaN is returned.

If
.I x
is +0 (\-0),
+0 (\-0) is returned.

If
.I x
is positive infinity (negative infinity), +pi/2 (\-pi/2) is returned.
.\"
.\" POSIX.1-2001 documents an optional range error for subnormal x;
.\" glibc 2.8 does not do this.
.SH ERRORS
No errors occur.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw24 lb lb
l l l.
Interface	Attribute	Value
T{
.BR atan (),
.BR atanf (),
.BR atanl ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C99, POSIX.1-2001, POSIX.1-2008.

The variant returning
.I double
also conforms to
SVr4, 4.3BSD, C89.
.SH SEE ALSO
.BR acos (3),
.BR asin (3),
.BR atan2 (3),
.BR carg (3),
.BR catan (3),
.BR cos (3),
.BR sin (3),
.BR tan (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\" and Copyright 2008, Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified 1993-07-24 by Rik Faith (faith@cs.unc.edu)
.\" Modified 2002-07-27 by Walter Harms
.\" 	(walter.harms@informatik.uni-oldenburg.de)
.\"
.TH ATANH 3  2015-04-19 "" "Linux Programmer's Manual"
.SH NAME
atanh, atanhf, atanhl \- inverse hyperbolic tangent function
.SH SYNOPSIS
.nf
.B #include <math.h>
.sp
.BI "double atanh(double " x );
.br
.BI "float atanhf(float " x );
.br
.BI "long double atanhl(long double " x );
.sp
.fi
Link with \fI\-lm\fP.
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR atanh ():
.RS 4
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE\ >=\ 500 ||
_XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.br
.BR atanhf (),
.BR atanhl ():
.RS 4
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE\ >=\ 600 || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.ad b
.SH DESCRIPTION
These functions calculate the inverse hyperbolic tangent of
.IR x ;
that is the value whose hyperbolic tangent is
.IR x .
.SH RETURN VALUE
On success, these functions return the inverse hyperbolic tangent of
.IR x .

If
.I x
is a NaN, a NaN is returned.

If
.I x
is +0 (\-0), +0 (\-0) is returned.

If
.I x
is +1 or \-1,
a pole error occurs,
and the functions return
.BR HUGE_VAL ,
.BR HUGE_VALF ,
or
.BR HUGE_VALL ,
respectively, with the mathematically correct sign.

If the absolute value of
.I x
is greater than 1,
a domain error occurs,
and a NaN is returned.
.\"
.\" POSIX.1-2001 documents an optional range error for subnormal x;
.\" glibc 2.8 does not do this.
.SH ERRORS
See
.BR math_error (7)
for information on how to determine whether an error has occurred
when calling these functions.
.PP
The following errors can occur:
.TP
Domain error: \fIx\fP less than \-1 or greater than +1
.I errno
is set to
.BR EDOM .
An invalid floating-point exception
.RB ( FE_INVALID )
is raised.
.TP
Pole error: \fIx\fP is +1 or \-1
.I errno
is set to
.BR ERANGE
(but see BUGS).
A divide-by-zero floating-point exception
.RB ( FE_DIVBYZERO )
is raised.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw28 lb lb
l l l.
Interface	Attribute	Value
T{
.BR atanh (),
.BR atanhf (),
.BR atanhl ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C99, POSIX.1-2001, POSIX.1-2008.

The variant returning
.I double
also conforms to
SVr4, 4.3BSD, C89.
.SH BUGS
In glibc 2.9 and earlier,
.\" Bug: http://sources.redhat.com/bugzilla/show_bug.cgi?id=6759
.\" This can be seen in sysdeps/ieee754/k_standard.c
when a pole error occurs,
.I errno
as set to
.BR EDOM
instead of the POSIX-mandated
.BR ERANGE .
Since version 2.10, glibc does the right thing.
.SH SEE ALSO
.BR acosh (3),
.BR asinh (3),
.BR catanh (3),
.BR cosh (3),
.BR sinh (3),
.BR tanh (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified 1993-03-29, David Metcalfe
.\" Modified 1993-07-24, Rik Faith (faith@cs.unc.edu)
.\" Modified 2003-10-25, Walter Harms
.\"
.TH ATEXIT 3  2015-05-07 "Linux" "Linux Programmer's Manual"
.SH NAME
atexit \- register a function to be called at normal process termination
.SH SYNOPSIS
.nf
.B #include <stdlib.h>
.sp
.BI "int atexit(void (*" function )(void));
.fi
.SH DESCRIPTION
The
.BR atexit ()
function registers the given
.I function
to be
called at normal process termination, either via
.BR exit (3)
or via return from the program's
.IR main ().
Functions so registered are called in
the reverse order of their registration; no arguments are passed.

The same function may be registered multiple times:
it is called once for each registration.
.LP
POSIX.1-2001 requires that an implementation allow at least
.B ATEXIT_MAX
(32) such functions to be registered.
The actual limit supported by an implementation can be obtained using
.BR sysconf (3).
.LP
When a child process is created via
.BR fork (2),
it inherits copies of its parent's registrations.
Upon a successful call to one of the
.BR exec (3)
functions,
all registrations are removed.
.SH RETURN VALUE
The
.BR atexit ()
function returns the value 0 if successful; otherwise
it returns a nonzero value.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR atexit ()
T}	Thread safety	MT-Safe
.TE

.SH CONFORMING TO
SVr4, 4.3BSD, C89, C99, POSIX.1-2001.
.SH NOTES
Functions registered using
.BR atexit ()
(and
.BR on_exit (3))
are not called if a process terminates abnormally because
of the delivery of a signal.

If one of the functions registered functions calls
.BR _exit (2),
then any remaining functions are not invoked,
and the other process termination steps performed by
.BR exit (3)
are not performed.

POSIX.1-2001 says that the result of calling
.BR exit (3)
more than once (i.e., calling
.BR exit (3)
within a function registered using
.BR atexit ())
is undefined.
On some systems (but not Linux), this can result in an infinite recursion;
.\" This can happen on OpenBSD 4.2 for example, and is documented
.\" as occurring on FreeBSD as well.
.\" Glibc does "the Right Thing" -- invocation of the remaining
.\" exit handlers carries on as normal.
portable programs should not invoke
.BR exit (3)
inside a function registered using
.BR atexit ().

The
.BR atexit ()
and
.BR on_exit (3)
functions register functions on the same list:
at normal process termination,
the registered functions are invoked in reverse order
of their registration by these two functions.

POSIX.1-2001 says that the result is undefined if
.BR longjmp (3)
is used to terminate execution of one of the functions registered
.BR atexit ().
.\" In glibc, things seem to be handled okay
.SS Linux notes
Since glibc 2.2.3,
.BR atexit ()
(and
.BR on_exit (3))
can be used within a shared library to establish functions
that are called when the shared library is unloaded.
.SH EXAMPLE
.nf
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

void
bye(void)
{
    printf("That was all, folks\en");
}

int
main(void)
{
    long a;
    int i;

    a = sysconf(_SC_ATEXIT_MAX);
    printf("ATEXIT_MAX = %ld\en", a);

    i = atexit(bye);
    if (i != 0) {
        fprintf(stderr, "cannot set exit function\en");
        exit(EXIT_FAILURE);
    }

    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR _exit (2),
.BR exit (3),
.BR on_exit (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified Mon Mar 29 22:39:24 1993, David Metcalfe
.\" Modified Sat Jul 24 21:39:22 1993, Rik Faith (faith@cs.unc.edu)
.TH ATOF 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
atof \- convert a string to a double
.SH SYNOPSIS
.nf
.B #include <stdlib.h>
.sp
.BI "double atof(const char *" nptr );
.fi
.SH DESCRIPTION
The
.BR atof ()
function converts the initial portion of the string
pointed to by \fInptr\fP to
.IR double .
The behavior is the same as
.sp
.in +4n
strtod(nptr, NULL);
.in
.sp
except that
.BR atof ()
does not detect errors.
.SH RETURN VALUE
The converted value.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR atof ()
T}	Thread safety	MT-Safe locale
.TE
.SH CONFORMING TO
SVr4, POSIX.1-2001, 4.3BSD, C89, C99.
.SH SEE ALSO
.BR atoi (3),
.BR atol (3),
.BR strtod (3),
.BR strtol (3),
.BR strtoul (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified Mon Mar 29 22:39:41 1993, David Metcalfe
.\" Modified Sat Jul 24 21:38:42 1993, Rik Faith (faith@cs.unc.edu)
.\" Modified Sun Dec 17 18:35:06 2000, Joseph S. Myers
.\"
.TH ATOI 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
atoi, atol, atoll \- convert a string to an integer
.SH SYNOPSIS
.nf
.B #include <stdlib.h>
.sp
.BI "int atoi(const char *" nptr );
.br
.BI "long atol(const char *" nptr );
.br
.BI "long long atoll(const char *" nptr );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR atoll ():
.RS 4
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE\ >=\ 600 || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.ad
.SH DESCRIPTION
The
.BR atoi ()
function converts the initial portion of the string
pointed to by \fInptr\fP to
.IR int .
The behavior is the same as
.sp
.in +4n
strtol(nptr, NULL, 10);
.in
.sp
except that
.BR atoi ()
does not detect errors.
.PP
The
.BR atol ()
and
.BR atoll ()
functions behave the same as
.BR atoi (),
except that they convert the initial portion of the
string to their return type of \fIlong\fP or \fIlong long\fP.
.SH RETURN VALUE
The converted value.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw23 lb lb
l l l.
Interface	Attribute	Value
T{
.BR atoi (),
.BR atol (),
.BR atoll ()
T}	Thread safety	MT-Safe locale
.TE
.SH CONFORMING TO
SVr4, POSIX.1-2001, 4.3BSD, C99.
C89 and
POSIX.1-1996 include the functions
.BR atoi ()
and
.BR atol ()
only.
.SH NOTES
Linux libc provided
.BR atoq ()
as an obsolete name for
.BR atoll ();
.BR atoq ()
is not provided by glibc.
.\" The
.\" .BR atoll ()
.\" function is present in glibc 2 since version 2.0.2, but
.\" not in libc4 or libc5.
.SH SEE ALSO
.BR atof (3),
.BR strtod (3),
.BR strtol (3),
.BR strtoul (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2007 Michael Kerrisk <mtk.manpages@gmail.com>
.\" drawing on material by Justin Pryzby <pryzbyj@justinpryzby.com>
.\"
.\" %%%LICENSE_START(PERMISSIVE_MISC)
.\" Permission is hereby granted, free of charge, to any person obtaining
.\" a copy of this software and associated documentation files (the
.\" "Software"), to deal in the Software without restriction, including
.\" without limitation the rights to use, copy, modify, merge, publish,
.\" distribute, sublicense, and/or sell copies of the Software, and to
.\" permit persons to whom the Software is furnished to do so, subject to
.\" the following conditions:
.\"
.\" The above copyright notice and this permission notice shall be
.\" included in all copies or substantial portions of the Software.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
.\" EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
.\" MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
.\" IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
.\" CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
.\" TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
.\" SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
.\" %%%LICENSE_END
.\"
.\" References:
.\"   glibc manual and source
.TH BACKTRACE 3 2015-03-02 GNU "Linux Programmer's Manual"
.SH NAME
backtrace, backtrace_symbols, backtrace_symbols_fd \- support
for application self-debugging
.SH SYNOPSIS
.B #include <execinfo.h>

.B int backtrace(void
.BI ** buffer ,
.B int
.IB size );

.B char **backtrace_symbols(void *const
.BI * buffer ,
.B int
.IB size );

.B void backtrace_symbols_fd(void *const
.BI * buffer ,
.B int
.IB size ,
.B int
.IB fd );
.SH DESCRIPTION
.BR backtrace ()
returns a backtrace for the calling program,
in the array pointed to by
.IR buffer .
A backtrace is the series of currently active function calls for
the program.
Each item in the array pointed to by
.I buffer
is of type
.IR "void\ *" ,
and is the return address from
the corresponding stack frame.
The
.I size
argument specifies the maximum number of addresses
that can be stored in
.IR buffer .
If the backtrace is larger than
.IR size ,
then the addresses corresponding to the
.I size
most recent function calls are returned;
to obtain the complete backtrace, make sure that
.I buffer
and
.I size
are large enough.

Given the set of addresses returned by
.BR backtrace ()
in
.IR buffer ,
.BR backtrace_symbols ()
translates the addresses into an array of strings that describe
the addresses symbolically.
The
.I size
argument specifies the number of addresses in
.IR buffer .
The symbolic representation of each address consists of the function name
(if this can be determined), a hexadecimal offset into the function,
and the actual return address (in hexadecimal).
The address of the array of string pointers is returned
as the function result of
.BR backtrace_symbols ().
This array is
.BR malloc (3)ed
by
.BR backtrace_symbols (),
and must be freed by the caller.
(The strings pointed to by the array of pointers
need not and should not be freed.)

.BR backtrace_symbols_fd ()
takes the same
.I buffer
and
.I size
arguments as
.BR backtrace_symbols (),
but instead of returning an array of strings to the caller,
it writes the strings, one per line, to the file descriptor
.IR fd .
.BR backtrace_symbols_fd ()
does not call
.BR malloc (3),
and so can be employed in situations where the latter function might fail.
.SH RETURN VALUE
.BR backtrace ()
returns the number of addresses returned in
.IR buffer ,
which is not greater than
.IR size .
If the return value is less than
.IR size ,
then the full backtrace was stored; if it is equal to
.IR size ,
then it may have been truncated, in which case the addresses of the
oldest stack frames are not returned.

On success,
.BR backtrace_symbols ()
returns a pointer to the array
.BR malloc (3)ed
by the call;
on error, NULL is returned.
.SH VERSIONS
.BR backtrace (),
.BR backtrace_symbols (),
and
.BR backtrace_symbols_fd ()
are provided in glibc since version 2.1.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw22 lb lb
l l l.
Interface	Attribute	Value
T{
.BR backtrace (),
.br
.BR backtrace_symbols (),
.br
.BR backtrace_symbols_fd ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
These functions are GNU extensions.
.SH NOTES
These functions make some assumptions about how a function's return
address is stored on the stack.
Note the following:
.IP * 3
Omission of the frame pointers (as
implied by any of
.BR gcc (1)'s
nonzero optimization levels) may cause these assumptions to be
violated.
.IP *
Inlined functions do not have stack frames.
.IP *
Tail-call optimization causes one stack frame to replace another.
.PP
The symbol names may be unavailable without the use of special linker
options.
For systems using the GNU linker, it is necessary to use the
.I \-rdynamic
linker option.
Note that names of "static" functions are not exposed,
and won't be available in the backtrace.
.SH EXAMPLE
The program below demonstrates the use of
.BR backtrace ()
and
.BR backtrace_symbols ().
The following shell session shows what we might see when running the
program:
.nf
.in +4n

.RB "$" " cc \-rdynamic prog.c \-o prog"
.RB "$" " ./prog 3"
backtrace() returned 8 addresses
\&./prog(myfunc3+0x5c) [0x80487f0]
\&./prog [0x8048871]
\&./prog(myfunc+0x21) [0x8048894]
\&./prog(myfunc+0x1a) [0x804888d]
\&./prog(myfunc+0x1a) [0x804888d]
\&./prog(main+0x65) [0x80488fb]
\&/lib/libc.so.6(__libc_start_main+0xdc) [0xb7e38f9c]
\&./prog [0x8048711]
.in
.fi
.SS Program source
\&
.nf
#include <execinfo.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

void
myfunc3(void)
{
    int j, nptrs;
#define SIZE 100
    void *buffer[100];
    char **strings;

    nptrs = backtrace(buffer, SIZE);
    printf("backtrace() returned %d addresses\\n", nptrs);

    /* The call backtrace_symbols_fd(buffer, nptrs, STDOUT_FILENO)
       would produce similar output to the following: */

    strings = backtrace_symbols(buffer, nptrs);
    if (strings == NULL) {
        perror("backtrace_symbols");
        exit(EXIT_FAILURE);
    }

    for (j = 0; j < nptrs; j++)
        printf("%s\\n", strings[j]);

    free(strings);
}

static void   /* "static" means don\(aqt export the symbol... */
myfunc2(void)
{
    myfunc3();
}

void
myfunc(int ncalls)
{
    if (ncalls > 1)
        myfunc(ncalls \- 1);
    else
        myfunc2();
}

int
main(int argc, char *argv[])
{
    if (argc != 2) {
        fprintf(stderr, "%s num\-calls\\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    myfunc(atoi(argv[1]));
    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR gcc (1),
.BR ld (1),
.BR dlopen (3),
.BR malloc (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2000 by Michael Kerrisk (mtk.manpages@gmail.com)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Created, 14 Dec 2000 by Michael Kerrisk
.\"
.TH BASENAME 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
basename, dirname \- parse pathname components
.SH SYNOPSIS
.nf
.B #include <libgen.h>
.sp
.BI "char *dirname(char *" path );

.BI "char *basename(char *" path );
.fi
.SH DESCRIPTION
Warning: there are two different functions
.BR basename ()
- see below.
.LP
The functions
.BR dirname ()
and
.BR basename ()
break a null-terminated pathname string into directory
and filename components.
In the usual case,
.BR dirname ()
returns the string up to, but not including, the final \(aq/\(aq, and
.BR basename ()
returns the component following the final \(aq/\(aq.
Trailing \(aq/\(aq characters are not counted as part of the pathname.
.PP
If
.I path
does not contain a slash,
.BR dirname ()
returns the string "." while
.BR basename ()
returns a copy of
.IR path .
If
.I path
is the string "/", then both
.BR dirname ()
and
.BR basename ()
return the string "/".
If
.I path
is a null pointer or points to an empty string, then both
.BR dirname ()
and
.BR basename ()
return the string ".".
.PP
Concatenating the string returned by
.BR dirname (),
a "/", and the string returned by
.BR basename ()
yields a complete pathname.
.PP
Both
.BR dirname ()
and
.BR basename ()
may modify the contents of
.IR path ,
so it may be desirable to pass a copy when calling one of
these functions.
.PP
These functions may return pointers to statically allocated memory
which may be overwritten by subsequent calls.
Alternatively, they may return a pointer to some part of
.IR path ,
so that the string referred to by
.I path
should not be modified or freed until the pointer returned by
the function is no longer required.
.PP
The following list of examples (taken from SUSv2)
shows the strings returned by
.BR dirname ()
and
.BR basename ()
for different paths:
.sp
.TS
lb lb lb
l l l l.
path    	dirname	basename
/usr/lib	/usr	lib
/usr/   	/	usr
usr     	.	usr
/       	/	/
\&.       	.	.
\&..      	.	..
.TE
.SH RETURN VALUE
Both
.BR dirname ()
and
.BR basename ()
return pointers to null-terminated strings.
(Do not pass these pointers to
.BR free (3).)
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw21 lb lb
l l l.
Interface	Attribute	Value
T{
.BR basename (),
.BR dirname ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
POSIX.1-2001.
.SH NOTES
There are two different versions of
.BR basename ()
- the POSIX version described above, and the GNU version, which one gets
after
.br
.nf

.BR "    #define _GNU_SOURCE" "         /* See feature_test_macros(7) */"
.br
.B "    #include <string.h>"

.fi
The GNU version never modifies its argument, and returns the
empty string when
.I path
has a trailing slash, and in particular also when it is "/".
There is no GNU version of
.BR dirname ().
.LP
With glibc, one gets the POSIX version of
.BR basename ()
when
.I <libgen.h>
is included, and the GNU version otherwise.
.SH BUGS
In the glibc implementation of the POSIX versions of these functions
they modify their argument, and segfault when called with a static string
like "/usr/".
Before glibc 2.2.1, the glibc version of
.BR dirname ()
did not correctly handle pathnames with trailing \(aq/\(aq characters,
and generated a segfault if given a NULL argument.
.SH EXAMPLE
.in +4n
.nf
char *dirc, *basec, *bname, *dname;
char *path = "/etc/passwd";

dirc = strdup(path);
basec = strdup(path);
dname = dirname(dirc);
bname = basename(basec);
printf("dirname=%s, basename=%s\\n", dname, bname);
.fi
.in
.SH SEE ALSO
.BR basename (1),
.BR dirname (1)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified Sat Jul 24 21:36:50 1993 by Rik Faith <faith@cs.unc.edu>
.\" Modified Tue Oct 22 23:47:36 1996 by Eric S. Raymond <esr@thyrsus.com>
.TH BCMP 3  2015-03-02 "Linux" "Linux Programmer's Manual"
.SH NAME
bcmp \- compare byte sequences
.SH SYNOPSIS
.nf
.B #include <strings.h>
.sp
.BI "int bcmp(const void *" s1 ", const void *" s2 ", size_t " n );
.fi
.SH DESCRIPTION
The
.BR bcmp ()
function compares the two byte sequences
.I s1
and
.I s2
of length
.I n
each.
If they are equal, and in particular if
.I n
is zero,
.BR bcmp ()
returns 0.
Otherwise, it returns a nonzero result.
.SH RETURN VALUE
The
.BR bcmp ()
function returns 0 if the byte sequences are equal,
otherwise a nonzero result is returned.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR bcmp ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
4.3BSD.
This function is deprecated (marked as LEGACY in POSIX.1-2001): use
.BR memcmp (3)
in new programs.
POSIX.1-2008 removes the specification of
.BR bcmp ().
.SH SEE ALSO
.BR memcmp (3),
.BR strcasecmp (3),
.BR strcmp (3),
.BR strcoll (3),
.BR strncasecmp (3),
.BR strncmp (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\"
.\" Modified Sun Feb 26 14:52:00 1995 by Rik Faith <faith@cs.unc.edu>
.\" Modified Tue Oct 22 23:48:10 1996 by Eric S. Raymond <esr@thyrsus.com>
.\" "
.TH BCOPY 3 2015-03-02 "Linux" "Linux Programmer's Manual"
.SH NAME
bcopy \- copy byte sequence
.SH SYNOPSIS
.nf
.B #include <strings.h>
.sp
.BI "void bcopy(const void *" src ", void *" dest ", size_t " n );
.fi
.SH DESCRIPTION
The
.BR bcopy ()
function copies
.I n
bytes from
.I src
to
.IR dest .
The result is correct, even when both areas overlap.
.SH RETURN VALUE
None.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR bcopy ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
4.3BSD.
This function is deprecated (marked as LEGACY in POSIX.1-2001): use
.BR memcpy (3)
or
.BR memmove (3)
in new programs.
Note that the first two arguments
are interchanged for
.BR memcpy (3)
and
.BR memmove (3).
POSIX.1-2008 removes the specification of
.BR bcopy ().
.SH SEE ALSO
.BR memccpy (3),
.BR memcpy (3),
.BR memmove (3),
.BR strcpy (3),
.BR strncpy (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2007, Michael Kerrisk <mtk.manpages@gmail.com>
.\" and Copyright (C) 2008, Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" 2007-05-31, mtk: Rewrite and substantial additional text.
.\" 2008-12-03, mtk: Rewrote some pieces and fixed some errors
.\"
.TH BINDRESVPORT 3  2015-03-02 "" "Linux Programmer's Manual"
.SH NAME
bindresvport \- bind a socket to a privileged IP port
.SH SYNOPSIS
.nf
.B #include <sys/types.h>
.B #include <netinet/in.h>
.LP
.BI "int bindresvport(int " sockfd ", struct sockaddr_in *" sin );
.fi
.SH DESCRIPTION
.LP
.BR bindresvport ()
is used to bind a socket descriptor to a privileged anonymous IP port,
that is, a port number arbitrarily selected from the range 512 to 1023.
.\" Glibc actually starts searching with a port # in the range 600 to 1023

If the
.BR bind (2)
performed by
.BR bindresvport ()
is successful, and
.I sin
is not NULL, then
.I sin\->sin_port
returns the port number actually allocated.

.I sin
can be NULL, in which case
.I sin\->sin_family
is implicitly taken to be
.BR AF_INET .
However, in this case,
.BR bindresvport ()
has no way to return the port number actually allocated.
(This information can later be obtained using
.BR getsockname (2).)
.SH RETURN VALUE
.BR bindresvport ()
returns 0 on success; otherwise \-1 is returned and
.I errno
set to indicate the cause of the error.
.SH ERRORS
.BR bindresvport ()
can fail for any of the same reasons as
.BR bind (2).
In addition, the following errors may occur:
.TP
.BR EACCES
The caller did not have superuser privilege (to be precise: the
.B CAP_NET_BIND_SERVICE
capability is required).
.TP
.B EADDRINUSE
All privileged ports are in use.
.TP
.BR EAFNOSUPPORT " (" EPFNOSUPPORT " in glibc 2.7 and earlier)"
.I sin
is not NULL and
.I sin->sin_family
is not
.BR AF_INET .
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l lw23.
Interface	Attribute	Value
T{
.BR bindresvport ()
T}	Thread safety	T{
glibc >= 2.17: MT-Safe
.\" commit f6da27e53695ad1cc0e2a9490358decbbfdff5e5
.br
glibc < 2.17: MT-Unsafe
T}
.TE
.PP
The
.BR bindresvport ()
function uses a static variable that was not protected by a lock
before glibc 2.17, rendering the function MT-Unsafe.
.SH CONFORMING TO
Not in POSIX.1-2001.
Present on the BSDs, Solaris, and many other systems.
.SH NOTES
Unlike some
.BR bindresvport ()
implementations,
the glibc implementation ignores any value that the caller supplies in
.IR sin\->sin_port .
.SH SEE ALSO
.BR bind (2),
.BR getsockname (2)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2007 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH BSD_SIGNAL 3 2015-03-02 "" "Linux Programmer's Manual"
.SH NAME
bsd_signal \- signal handling with BSD semantics
.SH SYNOPSIS
.BR "#define _XOPEN_SOURCE" "       /* See feature_test_macros(7) */"
.br
.B #include <signal.h>
.sp
.B typedef void (*sighandler_t)(int);
.sp
.BI "sighandler_t bsd_signal(int " signum ", sighandler_t " handler );
.SH DESCRIPTION
The
.BR bsd_signal ()
function takes the same arguments, and performs the same task, as
.BR signal (2).

The difference between the two is that
.BR bsd_signal ()
is guaranteed to provide reliable signal semantics, that is:
a) the disposition of the signal is not reset to the default
when the handler is invoked;
b) delivery of further instances of the signal is blocked while
the signal handler is executing; and
c) if the handler interrupts a blocking system call,
then the system call is automatically restarted.
A portable application cannot rely on
.BR signal (2)
to provide these guarantees.
.SH RETURN VALUE
The
.BR bsd_signal ()
function returns the previous value of the signal handler, or
.B SIG_ERR
on error.
.SH ERRORS
As for
.BR signal (2).
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR bsd_signal ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
4.2BSD, POSIX.1-2001.
POSIX.1-2008 removes the specification of
.BR bsd_signal (),
recommending the use of
.BR sigaction (2)
instead.
.SH NOTES
Use of
.BR bsd_signal ()
should be avoided; use
.BR sigaction (2)
instead.

On modern Linux systems,
.BR bsd_signal ()
and
.BR signal (2)
are equivalent.
But on older systems,
.BR signal (2)
provided unreliable signal semantics; see
.BR signal (2)
for details.

The use of
.I sighandler_t
is a GNU extension;
this type is defined only if the
.B _GNU_SOURCE
feature test macro is defined.
.SH SEE ALSO
.BR sigaction (2),
.BR signal (2),
.BR sysv_signal (3),
.BR signal (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified Mon Mar 29 22:41:16 1993, David Metcalfe
.\" Modified Sat Jul 24 21:35:16 1993, Rik Faith (faith@cs.unc.edu)
.TH BSEARCH 3  2015-05-07 "" "Linux Programmer's Manual"
.SH NAME
bsearch \- binary search of a sorted array
.SH SYNOPSIS
.nf
.B #include <stdlib.h>
.sp
.BI "void *bsearch(const void *" key ", const void *" base ,
.BI "              size_t " nmemb ", size_t " size ,
.BI "              int (*" compar ")(const void *, const void *));"
.fi
.SH DESCRIPTION
The
.BR bsearch ()
function searches an array of
.I nmemb
objects,
the initial member of which is pointed to by
.IR base ,
for a member
that matches the object pointed to by
.IR key .
The size of each member
of the array is specified by
.IR size .
.PP
The contents of the array should be in ascending sorted order according
to the comparison function referenced by
.IR compar .
The
.I compar
routine is expected to have two arguments which point to the
.I key
object and to an array member, in that order, and should return an integer
less than, equal to, or greater than zero if the
.I key
object is found,
respectively, to be less than, to match, or be greater than the array
member.
.SH RETURN VALUE
The
.BR bsearch ()
function returns a pointer to a matching member of the
array, or NULL if no match is found.
If there are multiple elements that
match the key, the element returned is unspecified.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR bsearch ()
T}	Thread safety	MT-Safe
.TE

.SH CONFORMING TO
SVr4, 4.3BSD, POSIX.1-2001, C89, C99.
.SH EXAMPLE
The example below first sorts an array of structures using
.BR qsort (3),
then retrieves desired elements using
.BR bsearch ().
.sp
.nf
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct mi {
    int nr;
    char *name;
} months[] = {
    { 1, "jan" }, { 2, "feb" }, { 3, "mar" }, { 4, "apr" },
    { 5, "may" }, { 6, "jun" }, { 7, "jul" }, { 8, "aug" },
    { 9, "sep" }, {10, "oct" }, {11, "nov" }, {12, "dec" }
};

#define nr_of_months (sizeof(months)/sizeof(months[0]))

static int
compmi(const void *m1, const void *m2)
{
    struct mi *mi1 = (struct mi *) m1;
    struct mi *mi2 = (struct mi *) m2;
    return strcmp(mi1\->name, mi2\->name);
}

int
main(int argc, char **argv)
{
    int i;

    qsort(months, nr_of_months, sizeof(struct mi), compmi);
    for (i = 1; i < argc; i++) {
        struct mi key, *res;
        key.name = argv[i];
        res = bsearch(&key, months, nr_of_months,
                      sizeof(struct mi), compmi);
        if (res == NULL)
            printf("\(aq%s\(aq: unknown month\en", argv[i]);
        else
            printf("%s: month #%d\en", res\->name, res\->nr);
    }
    exit(EXIT_SUCCESS);
}
.fi
.\" this example referred to in qsort.3
.SH SEE ALSO
.BR hsearch (3),
.BR lsearch (3),
.BR qsort (3),
.BR tsearch (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified 1993-04-12, David Metcalfe
.\" Modified 1993-07-24, Rik Faith (faith@cs.unc.edu)
.\" Modified 2002-01-20, Walter Harms
.TH BSTRING 3  2014-05-28 "" "Linux Programmer's Manual"
.SH NAME
bcmp, bcopy, bzero, memccpy, memchr, memcmp, memcpy, memfrob, memmem,
memmove, memset \- byte string operations
.SH SYNOPSIS
.nf
.B #include <string.h>
.sp
.BI "int bcmp(const void *" s1 ", const void *" s2 ", size_t " n );
.sp
.BI "void bcopy(const void *" src ", void *" dest ", size_t " n );
.sp
.BI "void bzero(void *" s ", size_t " n );
.sp
.BI "void *memccpy(void *" dest ", const void *" src ", int " c ", size_t " n );
.sp
.BI "void *memchr(const void *" s ", int " c ", size_t " n );
.sp
.BI "int memcmp(const void *" s1 ", const void *" s2 ", size_t " n );
.sp
.BI "void *memcpy(void *" dest ", const void *" src ", size_t " n );
.sp
.BI "void *memfrob(void *" s ", size_t " n );
.sp
.BI "void *memmem(const void *" needle ", size_t " needlelen ,
.BI "             const void *" haystack ", size_t " haystacklen );
.sp
.BI "void *memmove(void *" dest ", const void *" src ", size_t " n );
.sp
.BI "void *memset(void *" s ", int " c ", size_t " n );
.fi
.SH DESCRIPTION
The byte string functions perform operations on strings (byte arrays)
that are not necessarily null-terminated.
See the individual man pages
for descriptions of each function.
.SH NOTES
The functions
.BR bcmp (),
.BR bcopy ()
and
.BR bzero ()
are obsolete.
Use
.BR memcmp (),
.BR memcpy ()
and
.BR memset ()
instead.
.\" The old functions are not even available on some non-GNU/Linux systems.
.SH SEE ALSO
.BR bcmp (3),
.BR bcopy (3),
.BR bzero (3),
.BR memccpy (3),
.BR memchr (3),
.BR memcmp (3),
.BR memcpy (3),
.BR memfrob (3),
.BR memmem (3),
.BR memmove (3),
.BR memset (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) Bruno Haible <haible@clisp.cons.org>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_ONEPARA)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"   GNU glibc-2 source code and manual
.\"   Dinkumware C library reference http://www.dinkumware.com/
.\"   OpenGroup's Single UNIX specification http://www.UNIX-systems.org/online.html
.\"   ISO/IEC 9899:1999
.\"
.TH BTOWC 3 2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
btowc \- convert single byte to wide character
.SH SYNOPSIS
.nf
.B #include <wchar.h>
.sp
.BI "wint_t btowc(int " c );
.fi
.SH DESCRIPTION
The
.BR btowc ()
function converts \fIc\fP,
interpreted as a multibyte sequence
of length 1, starting in the initial shift state, to a wide character and
returns it.
If \fIc\fP is
.B EOF
or not a valid multibyte sequence of length 1,
the
.BR btowc ()
function returns
.BR WEOF .
.SH RETURN VALUE
The
.BR btowc ()
function returns the wide character
converted from the single byte \fIc\fP.
If \fIc\fP is
.B EOF
or not a valid multibyte sequence of length 1,
it returns
.BR WEOF .
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR btowc ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C99, POSIX.1-2001.
.SH NOTES
The behavior of
.BR btowc ()
depends on the
.B LC_CTYPE
category of the
current locale.
.PP
This function should never be used.
It does not work for encodings which have
state, and unnecessarily treats single bytes differently from multibyte
sequences.
Use either
.BR mbtowc (3)
or the thread-safe
.BR mbrtowc (3)
instead.
.SH SEE ALSO
.BR mbrtowc (3),
.BR mbtowc (3),
.BR wctob (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1990, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" %%%LICENSE_START(BSD_4_CLAUSE_UCB)
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\" %%%LICENSE_END
.\"
.\"	@(#)btree.3	8.4 (Berkeley) 8/18/94
.\"
.TH BTREE 3 2012-04-23 "" "Linux Programmer's Manual"
.\".UC 7
.SH NAME
btree \- btree database access method
.SH SYNOPSIS
.nf
.ft B
#include <sys/types.h>
#include <db.h>
.ft R
.fi
.SH DESCRIPTION
.IR "Note well" :
This page documents interfaces provided in glibc up until version 2.1.
Since version 2.2, glibc no longer provides these interfaces.
Probably, you are looking for the APIs provided by the
.I libdb
library instead.

The routine
.BR dbopen (3)
is the library interface to database files.
One of the supported file formats is btree files.
The general description of the database access methods is in
.BR dbopen (3),
this manual page describes only the btree-specific information.
.PP
The btree data structure is a sorted, balanced tree structure storing
associated key/data pairs.
.PP
The btree access-method-specific data structure provided to
.BR dbopen (3)
is defined in the
.I <db.h>
include file as follows:
.in +4n
.nf

typedef struct {
    unsigned long flags;
    unsigned int  cachesize;
    int           maxkeypage;
    int           minkeypage;
    unsigned int  psize;
    int         (*compare)(const DBT *key1, const DBT *key2);
    size_t      (*prefix)(const DBT *key1, const DBT *key2);
    int           lorder;
} BTREEINFO;
.fi
.in
.PP
The elements of this structure are as follows:
.TP
.I flags
The flag value is specified by ORing any of the following values:
.RS
.TP
.B R_DUP
Permit duplicate keys in the tree, that is,
permit insertion if the key to be
inserted already exists in the tree.
The default behavior, as described in
.BR dbopen (3),
is to overwrite a matching key when inserting a new key or to fail if
the
.B R_NOOVERWRITE
flag is specified.
The
.B R_DUP
flag is overridden by the
.B R_NOOVERWRITE
flag, and if the
.B R_NOOVERWRITE
flag is specified, attempts to insert duplicate keys into
the tree will fail.
.IP
If the database contains duplicate keys, the order of retrieval of
key/data pairs is undefined if the
.I get
routine is used, however,
.I seq
routine calls with the
.B R_CURSOR
flag set will always return the logical
"first" of any group of duplicate keys.
.RE
.TP
.I cachesize
A suggested maximum size (in bytes) of the memory cache.
This value is
.I only
advisory, and the access method will allocate more memory rather than fail.
Since every search examines the root page of the tree, caching the most
recently used pages substantially improves access time.
In addition, physical writes are delayed as long as possible, so a moderate
cache can reduce the number of I/O operations significantly.
Obviously, using a cache increases (but only increases) the likelihood of
corruption or lost data if the system crashes while a tree is being modified.
If
.I cachesize
is 0 (no size is specified), a default cache is used.
.TP
.I maxkeypage
The maximum number of keys which will be stored on any single page.
Not currently implemented.
.\" The maximum number of keys which will be stored on any single page.
.\" Because of the way the btree data structure works,
.\" .I maxkeypage
.\" must always be greater than or equal to 2.
.\" If
.\" .I maxkeypage
.\" is 0 (no maximum number of keys is specified), the page fill factor is
.\" made as large as possible (which is almost invariably what is wanted).
.TP
.I minkeypage
The minimum number of keys which will be stored on any single page.
This value is used to determine which keys will be stored on overflow
pages, that is, if a key or data item is longer than the pagesize divided
by the minkeypage value, it will be stored on overflow pages instead
of in the page itself.
If
.I minkeypage
is 0 (no minimum number of keys is specified), a value of 2 is used.
.TP
.I psize
Page size is the size (in bytes) of the pages used for nodes in the tree.
The minimum page size is 512 bytes and the maximum page size is 64K.
If
.I psize
is 0 (no page size is specified), a page size is chosen based on the
underlying filesystem I/O block size.
.TP
.I compare
Compare is the key comparison function.
It must return an integer less than, equal to, or greater than zero if the
first key argument is considered to be respectively less than, equal to,
or greater than the second key argument.
The same comparison function must be used on a given tree every time it
is opened.
If
.I compare
is NULL (no comparison function is specified), the keys are compared
lexically, with shorter keys considered less than longer keys.
.TP
.I prefix
Prefix is the prefix comparison function.
If specified, this routine must return the number of bytes of the second key
argument which are necessary to determine that it is greater than the first
key argument.
If the keys are equal, the key length should be returned.
Note, the usefulness of this routine is very data-dependent, but, in some
data sets can produce significantly reduced tree sizes and search times.
If
.I prefix
is NULL (no prefix function is specified),
.I and
no comparison function is specified, a default lexical comparison routine
is used.
If
.I prefix
is NULL and a comparison routine is specified, no prefix comparison is
done.
.TP
.I lorder
The byte order for integers in the stored database metadata.
The number should represent the order as an integer; for example,
big endian order would be the number 4,321.
If
.I lorder
is 0 (no order is specified), the current host order is used.
.PP
If the file already exists (and the
.B O_TRUNC
flag is not specified), the
values specified for the arguments
.IR flags ,
.I lorder
and
.I psize
are ignored
in favor of the values used when the tree was created.
.PP
Forward sequential scans of a tree are from the least key to the greatest.
.PP
Space freed up by deleting key/data pairs from the tree is never reclaimed,
although it is normally made available for reuse.
This means that the btree storage structure is grow-only.
The only solutions are to avoid excessive deletions, or to create a fresh
tree periodically from a scan of an existing one.
.PP
Searches, insertions, and deletions in a btree will all complete in
O lg base N where base is the average fill factor.
Often, inserting ordered data into btrees results in a low fill factor.
This implementation has been modified to make ordered insertion the best
case, resulting in a much better than normal page fill factor.
.SH ERRORS
The
.I btree
access method routines may fail and set
.I errno
for any of the errors specified for the library routine
.BR dbopen (3).
.SH BUGS
Only big and little endian byte order is supported.
.SH SEE ALSO
.BR dbopen (3),
.BR hash (3),
.BR mpool (3),
.BR recno (3)

.IR "The Ubiquitous B-tree" ,
Douglas Comer, ACM Comput. Surv. 11, 2 (June 1979), 121-138.

.IR "Prefix B-trees" ,
Bayer and Unterauer, ACM Transactions on Database Systems, Vol. 2, 1
(March 1977), 11-26.

.IR "The Art of Computer Programming Vol. 3: Sorting and Searching" ,
D.E. Knuth, 1968, pp 471-480.
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified Sat Jul 24 21:29:05 1993 by Rik Faith (faith@cs.unc.edu)
.\" Modified Thu Jul 26 14:06:20 2001 by Andries Brouwer (aeb@cwi.nl)
.\"
.TH BYTEORDER 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
htonl, htons, ntohl, ntohs \- convert values between host and network
byte order
.SH SYNOPSIS
.nf
.B #include <arpa/inet.h>
.sp
.BI "uint32_t htonl(uint32_t " hostlong );
.sp
.BI "uint16_t htons(uint16_t " hostshort );
.sp
.BI "uint32_t ntohl(uint32_t " netlong );
.sp
.BI "uint16_t ntohs(uint16_t " netshort );
.fi
.SH DESCRIPTION
The
.BR htonl ()
function converts the unsigned integer
.I hostlong
from host byte order to network byte order.
.PP
The
.BR htons ()
function converts the unsigned short integer
.I hostshort
from host byte order to network byte order.
.PP
The
.BR ntohl ()
function converts the unsigned integer
.I netlong
from network byte order to host byte order.
.PP
The
.BR ntohs ()
function converts the unsigned short integer
.I netshort
from network byte order to host byte order.
.PP
On the i386 the host byte order is Least Significant Byte first,
whereas the network byte order, as used on the Internet, is Most
Significant Byte first.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw34 lb lb
l l l.
Interface	Attribute	Value
T{
.BR htonl (),
.BR htons (),
.BR ntohl (),
.BR ntohs ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
POSIX.1-2001.

Some systems require the inclusion of
.I <netinet/in.h>
instead of
.IR <arpa/inet.h> .
.SH SEE ALSO
.BR endian (3),
.BR gethostbyname (3),
.BR getservent (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified Sat Jul 24 21:28:17 1993 by Rik Faith <faith@cs.unc.edu>
.\" Modified Tue Oct 22 23:49:37 1996 by Eric S. Raymond <esr@thyrsus.com>
.TH BZERO 3  2015-03-02 "Linux" "Linux Programmer's Manual"
.SH NAME
bzero \- write zero-valued bytes
.SH SYNOPSIS
.nf
.B #include <strings.h>
.sp
.BI "void bzero(void *" s ", size_t " n );
.fi
.SH DESCRIPTION
The
.BR bzero ()
function sets the first
.I n
bytes of the area starting at
.I s
to zero (bytes containing \(aq\\0\(aq).
.SH RETURN VALUE
None.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR bzero ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
4.3BSD.
This function is deprecated (marked as LEGACY in POSIX.1-2001): use
.BR memset (3)
in new programs.
POSIX.1-2008 removes the specification of
.BR bzero ().
.SH SEE ALSO
.BR memset (3),
.BR swab (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 2002 Walter Harms (walter.harms@informatik.uni-oldenburg.de)
.\"
.\" %%%LICENSE_START(GPL_NOVERSION_ONELINE)
.\" Distributed under GPL
.\" %%%LICENSE_END
.\"
.TH CABS 3 2015-04-19 "" "Linux Programmer's Manual"
.SH NAME
cabs, cabsf, cabsl \- absolute value of a complex number
.SH SYNOPSIS
.B #include <complex.h>
.sp
.BI "double cabs(double complex " z );
.br
.BI "float cabsf(float complex " z );
.br
.BI "long double cabsl(long double complex " z );
.sp
Link with \fI\-lm\fP.
.SH DESCRIPTION
These functions return the absolute value of the complex number
.IR z .
The result is a real number.
.SH VERSIONS
These functions first appeared in glibc in version 2.1.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw24 lb lb
l l l.
Interface	Attribute	Value
T{
.BR cabs (),
.BR cabsf (),
.BR cabsl ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C99, POSIX.1-2001, POSIX.1-2008.
.SH NOTES
The function is actually an alias for
.I "hypot(a,\ b)"
(or, equivalently,
.IR "sqrt(a*a\ +\ b*b)" ).
.SH SEE ALSO
.BR abs (3),
.BR cimag (3),
.BR hypot (3),
.BR complex (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 2002 Walter Harms (walter.harms@informatik.uni-oldenburg.de)
.\" and Copyright (C) 2011 Michael Kerrisk <mtk.manpages@gamil.com>
.\"
.\" %%%LICENSE_START(GPL_NOVERSION_ONELINE)
.\" Distributed under GPL
.\" %%%LICENSE_END
.\"
.TH CACOS 3 2015-04-19 "" "Linux Programmer's Manual"
.SH NAME
cacos, cacosf, cacosl \- complex arc cosine
.SH SYNOPSIS
.B #include <complex.h>
.sp
.BI "double complex cacos(double complex " z );
.br
.BI "float complex cacosf(float complex " z );
.br
.BI "long double complex cacosl(long double complex " z );
.sp
Link with \fI\-lm\fP.
.SH DESCRIPTION
These functions calculate the complex arc cosine of
.IR z .
If \fIy\ =\ cacos(z)\fP, then \fIz\ =\ ccos(y)\fP.
The real part of
.I y
is chosen in the interval [0,pi].
.LP
One has:
.nf

    cacos(z) = \-i * clog(z + i * csqrt(1 \- z * z))
.fi
.SH VERSIONS
These functions first appeared in glibc in version 2.1.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw28 lb lb
l l l.
Interface	Attribute	Value
T{
.BR cacos (),
.BR cacosf (),
.BR cacosl ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C99, POSIX.1-2001, POSIX.1-2008.
.SH EXAMPLE
.nf
/* Link with "\-lm" */

#include <complex.h>
#include <stdlib.h>
#include <unistd.h>
#include <stdio.h>

int
main(int argc, char *argv[])
{
    double complex z, c, f;
    double complex i = I;

    if (argc != 3) {
        fprintf(stderr, "Usage: %s <real> <imag>\\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    z = atof(argv[1]) + atof(argv[2]) * I;

    c = cacos(z);

    printf("cacos() = %6.3f %6.3f*i\\n", creal(c), cimag(c));

    f = \-i * clog(z + i * csqrt(1 \- z * z));

    printf("formula = %6.3f %6.3f*i\\n", creal(f), cimag(f));

    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR ccos (3),
.BR clog (3),
.BR complex (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 2002 Walter Harms(walter.harms@informatik.uni-oldenburg.de)
.\" and Copyright (C) 2011 Michael Kerrisk <mtk.manpages@gamil.com>
.\"
.\" %%%LICENSE_START(GPL_NOVERSION_ONELINE)
.\" Distributed under GPL
.\" %%%LICENSE_END
.\"
.TH CACOSH 3 2015-04-19 "" "Linux Programmer's Manual"
.SH NAME
cacosh, cacoshf, cacoshl \- complex arc hyperbolic cosine
.SH SYNOPSIS
.B #include <complex.h>
.sp
.BI "double complex cacosh(double complex " z );
.br
.BI "float complex cacoshf(float complex " z );
.br
.BI "long double complex cacoshl(long double complex " z );
.sp
Link with \fI\-lm\fP.
.SH DESCRIPTION
These functions calculate the complex arc hyperbolic cosine of
.IR z .
If \fIy\ =\ cacosh(z)\fP, then \fIz\ =\ ccosh(y)\fP.
The imaginary part of
.I y
is chosen in the interval [\-pi,pi].
The real part of
.I y
is chosen nonnegative.
.LP
One has:
.nf

    cacosh(z) = 2 * clog(csqrt((z + 1) / 2) + csqrt((z \- 1) / 2))
.fi
.SH VERSIONS
These functions first appeared in glibc in version 2.1.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw30 lb lb
l l l.
Interface	Attribute	Value
T{
.BR cacosh (),
.BR cacoshf (),
.BR cacoshl ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C99, POSIX.1-2001, POSIX.1-2008.
.SH EXAMPLE
.nf
/* Link with "\-lm" */

#include <complex.h>
#include <stdlib.h>
#include <unistd.h>
#include <stdio.h>

int
main(int argc, char *argv[])
{
    double complex z, c, f;

    if (argc != 3) {
        fprintf(stderr, "Usage: %s <real> <imag>\\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    z = atof(argv[1]) + atof(argv[2]) * I;

    c = cacosh(z);
    printf("cacosh() = %6.3f %6.3f*i\\n", creal(c), cimag(c));

    f = 2 * clog(csqrt((z + 1)/2) + csqrt((z \- 1)/2));
    printf("formula  = %6.3f %6.3f*i\\n", creal(f2), cimag(f2));

    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR acosh (3),
.BR cabs (3),
.BR ccosh (3),
.BR cimag (3),
.BR complex (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 2013 Michael Kerrisk (mtk.manpages@gmail.com).
.\" (Replaces an earlier page by Walter Harms and Michael Kerrisk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH CANONICALIZE_FILE_NAME 3 2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
canonicalize_file_name \- return the canonicalized absolute pathname
.SH SYNOPSIS
.BR "#define _GNU_SOURCE" "         /* See feature_test_macros(7) */"
.br
.B #include <stdlib.h>
.sp
.BI "char *canonicalize_file_name(const char *" path ");"
.SH DESCRIPTION
The
.BR canonicalize_file_name ()
function returns a null-terminated string containing
the canonicalized absolute pathname corresponding to
.IR path .
In the returned string, symbolic links are resolved, as are
.I .
and
.I ..
pathname components.
Consecutive slash
.RI ( / )
characters are replaced by a single slash.

The returned string is dynamically allocated by
.BR canonicalize_file_name ()
and the caller should deallocate it with
.BR free (3)
when it is no longer required.

The call
.I canonicalize_file_name(path)
is equivalent to the call:

    realpath(path, NULL);
.SH RETURN VALUE
On success,
.BR canonicalize_file_name ()
returns a null-terminated string.
On error (e.g., a pathname component is unreadable or does not exist),
.BR canonicalize_file_name ()
returns NULL and sets
.I errno
to indicate the error.
.SH ERRORS
See
.BR realpath (3).
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw24 lb lb
l l l.
Interface	Attribute	Value
T{
.BR canonicalize_file_name ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
This function is a GNU extension.
.SH SEE ALSO
.BR readlink (2),
.BR realpath (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 2002 Walter Harms (walter.harms@informatik.uni-oldenburg.de)
.\"
.\" %%%LICENSE_START(GPL_NOVERSION_ONELINE)
.\" Distributed under GPL
.\" %%%LICENSE_END
.\"
.TH CARG 3 2015-04-19 "" "Linux Programmer's Manual"
.SH NAME
carg, cargf, cargl \- calculate the complex argument
.SH SYNOPSIS
.B #include <complex.h>
.sp
.BI "double carg(double complex " z ");"
.br
.BI "float cargf(float complex " z ");"
.br
.BI "long double cargl(long double complex " z ");"
.sp
Link with \fI\-lm\fP.
.SH DESCRIPTION
These functions calculate the complex argument (also called phase angle) of
.IR z ,
with a branch cut along the negative real axis.

A complex number can be described by two real coordinates.
One may use rectangular coordinates and gets

.nf
    z = x + I * y
.fi

where
.IR "x\ =\ creal(z)"
and
.IR "y\ =\ cimag(z)" .
.LP
Or one may use polar coordinates and gets
.nf

    z = r * cexp(I * a)

.fi
where
.IR "r\ =\ cabs(z)"
is the "radius", the "modulus", the absolute value of
.IR z ,
and
.IR "a\ =\ carg(z)"
is the "phase angle", the argument of
.IR z .
.LP
One has:
.nf

    tan(carg(z)) = cimag(z) / creal(z)
.fi
.SH RETURN VALUE
The return value is the range of [\-pi,pi].
.SH VERSIONS
These functions first appeared in glibc in version 2.1.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw24 lb lb
l l l.
Interface	Attribute	Value
T{
.BR carg (),
.BR cargf (),
.BR cargl ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C99, POSIX.1-2001, POSIX.1-2008.
.SH SEE ALSO
.BR cabs (3),
.BR complex (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 2002 Walter Harms (walter.harms@informatik.uni-oldenburg.de)
.\"
.\" %%%LICENSE_START(GPL_NOVERSION_ONELINE)
.\" Distributed under GPL
.\" %%%LICENSE_END
.\"
.TH CASIN 3 2015-04-19 "" "Linux Programmer's Manual"
.SH NAME
casin, casinf, casinl \- complex arc sine
.SH SYNOPSIS
.B #include <complex.h>
.sp
.BI "double complex casin(double complex " z );
.br
.BI "float complex casinf(float complex " z );
.br
.BI "long double complex casinl(long double complex " z );
.sp
Link with \fI\-lm\fP.
.SH DESCRIPTION
These functions calculate the complex arc sine of
.IR z .
If \fIy\ =\ casin(z)\fP, then \fIz\ =\ csin(y)\fP.
The real part of
.I y
is chosen in the interval [\-pi/2,pi/2].
.LP
One has:
.nf

    casin(z) = \-i clog(iz + csqrt(1 \- z * z))
.fi
.SH VERSIONS
These functions first appeared in glibc in version 2.1.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw28 lb lb
l l l.
Interface	Attribute	Value
T{
.BR casin (),
.BR casinf (),
.BR casinl ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C99, POSIX.1-2001, POSIX.1-2008.
.SH SEE ALSO
.BR clog (3),
.BR csin (3),
.BR complex (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 2002 Walter Harms (walter.harms@informatik.uni-oldenburg.de)
.\"
.\" %%%LICENSE_START(GPL_NOVERSION_ONELINE)
.\" Distributed under GPL
.\" %%%LICENSE_END
.\"
.TH CASINH 3 2015-04-19 "" "Linux Programmer's Manual"
.SH NAME
casinh, casinhf, casinhl \- complex arc sine hyperbolic
.SH SYNOPSIS
.B #include <complex.h>
.sp
.BI "double complex casinh(double complex " z );
.br
.BI "float complex casinhf(float complex " z );
.br
.BI "long double complex casinhl(long double complex " z );
.sp
Link with \fI\-lm\fP.
.SH DESCRIPTION
These functions calculate the complex arc hyperbolic sine of
.IR z .
If \fIy\ =\ casinh(z)\fP, then \fIz\ =\ csinh(y)\fP.
The imaginary part of
.I y
is chosen in the interval [\-pi/2,pi/2].
.LP
One has:
.nf

    casinh(z) = clog(z + csqrt(z * z + 1))
.fi
.SH VERSIONS
These functions first appeared in glibc in version 2.1.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw30 lb lb
l l l.
Interface	Attribute	Value
T{
.BR casinh (),
.BR casinhf (),
.BR casinhl ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C99, POSIX.1-2001, POSIX.1-2008.
.SH SEE ALSO
.BR asinh (3),
.BR cabs (3),
.BR cimag (3),
.BR csinh (3),
.BR complex (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 2002 Walter Harms (walter.harms@informatik.uni-oldenburg.de)
.\" and Copyright (C) 2011 Michael Kerrisk <mtk.manpages@gamil.com>
.\"
.\" %%%LICENSE_START(GPL_NOVERSION_ONELINE)
.\" Distributed under GPL
.\" %%%LICENSE_END
.\"
.TH CATAN 3 2015-04-19 "" "Linux Programmer's Manual"
.SH NAME
catan, catanf, catanl \- complex arc tangents
.SH SYNOPSIS
.B #include <complex.h>
.sp
.BI "double complex catan(double complex " z );
.br
.BI "float complex catanf(float complex " z );
.br
.BI "long double complex catanl(long double complex " z );
.sp
Link with \fI\-lm\fP.
.SH DESCRIPTION
These functions calculate the complex arc tangent of
.IR z .
If \fIy\ =\ catan(z)\fP, then \fIz\ =\ ctan(y)\fP.
The real part of y is chosen in the interval [\-pi/2,pi/2].
.LP
One has:
.nf

    catan(z) = (clog(1 + i * z) \- clog(1 \- i * z)) / (2 * i)
.fi
.SH VERSIONS
These functions first appeared in glibc in version 2.1.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw27 lb lb
l l l.
Interface	Attribute	Value
T{
.BR catan (),
.BR catanf (),
.BR catanl ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C99, POSIX.1-2001, POSIX.1-2008.
.SH EXAMPLE
.nf
/* Link with "\-lm" */

#include <complex.h>
#include <stdlib.h>
#include <unistd.h>
#include <stdio.h>

int
main(int argc, char *argv[])
{
    double complex z, c, f;
    double complex i = I;

    if (argc != 3) {
        fprintf(stderr, "Usage: %s <real> <imag>\\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    z = atof(argv[1]) + atof(argv[2]) * I;

    c = catan(z);
    printf("catan() = %6.3f %6.3f*i\\n", creal(c), cimag(c));

    f = (clog(1 + i * z) \- clog(1 \- i * z)) / (2 * i);
    printf("formula = %6.3f %6.3f*i\\n", creal(f2), cimag(f2));

    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR ccos (3),
.BR clog (3),
.BR ctan (3),
.BR complex (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 2002 Walter Harms (walter.harms@informatik.uni-oldenburg.de)
.\" and Copyright (C) 2011 Michael Kerrisk <mtk.manpages@gamil.com>
.\"
.\" %%%LICENSE_START(GPL_NOVERSION_ONELINE)
.\" Distributed under GPL
.\" %%%LICENSE_END
.\"
.TH CATANH 3 2015-04-19 "" "Linux Programmer's Manual"
.SH NAME
catanh, catanhf, catanhl \- complex arc tangents hyperbolic
.SH SYNOPSIS
.B #include <complex.h>
.sp
.BI "double complex catanh(double complex " z );
.br
.BI "float complex catanhf(float complex " z );
.br
.BI "long double complex catanhl(long double complex " z );
.sp
Link with \fI\-lm\fP.
.SH DESCRIPTION
These functions calculate the complex arc hyperbolic tangent of
.IR z .
If \fIy\ =\ catanh(z)\fP, then \fIz\ =\ ctanh(y)\fP.
The imaginary part of
.I y
is chosen in the interval [\-pi/2,pi/2].
.LP
One has:
.nf

    catanh(z) = 0.5 * (clog(1 + z) \- clog(1 \- z))
.fi
.SH VERSIONS
These functions first appeared in glibc in version 2.1.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw30 lb lb
l l l.
Interface	Attribute	Value
T{
.BR catanh (),
.BR catanhf (),
.BR catanhl ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C99, POSIX.1-2001, POSIX.1-2008.
.SH EXAMPLE
.nf
/* Link with "\-lm" */

#include <complex.h>
#include <stdlib.h>
#include <unistd.h>
#include <stdio.h>

int
main(int argc, char *argv[])
{
    double complex z, c, f;

    if (argc != 3) {
        fprintf(stderr, "Usage: %s <real> <imag>\\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    z = atof(argv[1]) + atof(argv[2]) * I;

    c = catanh(z);
    printf("catanh() = %6.3f %6.3f*i\\n", creal(c), cimag(c));

    f = 0.5 * (clog(1 + z) \- clog(1 \- z));
    printf("formula  = %6.3f %6.3f*i\\n", creal(f2), cimag(f2));

    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR atanh (3),
.BR cabs (3),
.BR cimag (3),
.BR ctanh (3),
.BR complex (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 Mitchum DSouza <m.dsouza@mrc-applied-psychology.cambridge.ac.uk>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Updated, aeb, 980809
.TH CATGETS 3 2015-03-02 "" "Linux Programmer's Manual"
.SH NAME
catgets \- get message from a message catalog
.SH SYNOPSIS
.nf
.B #include <nl_types.h>

.BI "char *catgets(nl_catd " catalog ", int " set_number \
", int " message_number ,
.BI "              const char *" message );
.fi
.SH DESCRIPTION
.BR catgets ()
reads the message
.IR message_number ,
in set
.IR set_number ,
from the message catalog identified by
.IR catalog ,
where
.I catalog
is a catalog descriptor returned from an earlier call to
.BR catopen (3).
The fourth argument,
.IR message ,
points to a default message string which will be returned by
.BR catgets ()
if the identified message catalog is not currently available.
The
message-text is contained in an internal buffer area and should be copied by
the application if it is to be saved or modified.
The return string is
always terminated with a null byte (\(aq\\0\(aq).
.SH RETURN VALUE
.LP
On success,
.BR catgets ()
returns a pointer to an internal buffer area
containing the null-terminated message string.
On failure,
.BR catgets ()
returns the value
.IR message .
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR catgets ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
POSIX.1-2001.
.SH NOTES
The
.BR catgets ()
function is available only in libc.so.4.4.4c and above.
The Jan 1987 X/Open Portability Guide specifies a more subtle
error return:
.I message
is returned if the message catalog specified by
.I catalog
is not available, while an empty string is returned
when the message catalog is available but does not contain
the specified message.
These two possible error returns seem to be discarded in SUSv2
in favor of always returning
.IR message .
.SH SEE ALSO
.BR catopen (3),
.BR setlocale (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 Mitchum DSouza <m.dsouza@mrc-applied-psychology.cambridge.ac.uk>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified Thu Dec 13 22:51:19 2001 by Martin Schulze <joey@infodrom.org>
.\" Modified 2001-12-14 aeb
.\"
.TH CATOPEN 3 2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
catopen, catclose \- open/close a message catalog
.SH SYNOPSIS
.B #include <nl_types.h>
.sp
.BI "nl_catd catopen(const char *" name ", int " flag );

.BI "int catclose(nl_catd " catalog );
.SH DESCRIPTION
The function
.BR catopen ()
opens a message catalog and returns a catalog descriptor.
The descriptor remains valid until
.BR catclose ()
or
.BR execve (2).
If a file descriptor is used to implement catalog descriptors,
then the
.B FD_CLOEXEC
flag will be set.
.LP
The argument
.I name
specifies the name of the message catalog to be opened.
If
.I name
specifies an absolute path (i.e., contains a \(aq/\(aq),
then
.I name
specifies a pathname for the message catalog.
Otherwise, the environment variable
.B NLSPATH
is used with
.I name
substituted for
.B %N
(see
.BR locale (7)).
It is unspecified whether
.B NLSPATH
will be used when the process has root privileges.
If
.B NLSPATH
does not exist in the environment,
or if a message catalog cannot be opened
in any of the paths specified by it,
then an implementation defined path is used.
This latter default path may depend on the
.B LC_MESSAGES
locale setting when the
.I flag
argument is
.B NL_CAT_LOCALE
and on the
.B LANG
environment variable when the
.I flag
argument is 0.
Changing the
.B LC_MESSAGES
part of the locale may invalidate
open catalog descriptors.
.LP
The
.I flag
argument to
.BR catopen ()
is used to indicate the source for the language to use.
If it is set to
.BR NL_CAT_LOCALE ,
then it will use the current locale setting for
.BR LC_MESSAGES .
Otherwise, it will use the
.B LANG
environment variable.
.LP
The function
.BR catclose ()
closes the message catalog identified by
.IR catalog .
It invalidates any subsequent references to the message catalog
defined by
.IR catalog .
.SH RETURN VALUE
The function
.BR catopen ()
returns a message catalog descriptor of type
.I nl_catd
on success.
On failure, it returns
.IR "(nl_catd)\ \-1"
and sets
.I errno
to indicate the error.
The possible error values include all
possible values for the
.BR open (2)
call.
.LP
The function
.BR catclose ()
returns 0 on success, or \-1 on failure.
.SH ENVIRONMENT
.TP
.B LC_MESSAGES
May be the source of the
.B LC_MESSAGES
locale setting, and thus
determine the language to use if
.I flag
is set to
.BR NL_CAT_LOCALE .
.TP
.B LANG
The language to use if
.I flag
is 0.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR catopen ()
T}	Thread safety	MT-Safe env
T{
.BR catclose ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
POSIX.1-2001.
.\" In XPG 1987, Vol. 3 it says:
.\" .I "The flag argument of catopen is reserved for future use"
.\" .IR "and should be set to 0" .
.\"
.\" It is unclear what the source was for the constants
.\" .B MCLoadBySet
.\" and
.\" .B MCLoadAll
.\" (see below).
.SH NOTES
The above is the POSIX.1-2001 description.
The glibc value for
.B NL_CAT_LOCALE
is 1.
.\" (Compare
.\" .B MCLoadAll
.\" below.)
The default path varies, but usually looks at a number of places below
.IR /usr/share/locale .
.\" .SS Linux notes
.\" These functions are available for Linux since libc 4.4.4c.
.\" In the case of linux libc4 and libc5, the catalog descriptor
.\" .I nl_catd
.\" is a
.\" .BR mmap (2)'ed
.\" area of memory and not a file descriptor.
.\" The
.\" .I flag
.\" argument to
.\" .BR catopen ()
.\" should be either
.\" .B MCLoadBySet
.\" (=0) or
.\" .B MCLoadAll
.\" (=1).
.\" The former value indicates that a set from the catalog is to be
.\" loaded when needed, whereas the latter causes the initial call to
.\" .BR catopen ()
.\" to load the entire catalog into memory.
.\" The default search path varies, but usually looks at a number of places below
.\" .I /etc/locale
.\" and
.\" .IR /usr/lib/locale .
.SH SEE ALSO
.BR catgets (3),
.BR setlocale (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1995 Jim Van Zandt <jrv@vanzandt.mv.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" changed `square root' into `cube root' - aeb, 950919
.\"
.\" Modified 2002-07-27 Walter Harms
.\" (walter.harms@informatik.uni-oldenburg.de)
.\"
.TH CBRT 3  2015-04-19 "GNU"  "Linux Programmer's Manual"
.SH NAME
cbrt, cbrtf, cbrtl \- cube root function
.SH SYNOPSIS
.nf
.B #include <math.h>
.sp
.BI "double cbrt(double " x );
.br
.BI "float cbrtf(float " x );
.br
.BI "long double cbrtl(long double " x );
.fi
.sp
Link with \fI\-lm\fP.
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR cbrt ():
.br
.RS 4
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE\ >=\ 500 ||
_XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.BR cbrtf (),
.BR cbrtl ():
.RS 4
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE\ >=\ 600 || _ISOC99_SOURCE ||
_POSIX_C_SOUCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.ad b
.SH DESCRIPTION
These functions return the (real) cube root of
.IR x .
This function cannot fail; every representable real value has a
representable real cube root.
.SH RETURN VALUE
These functions return the cube root of
.IR x .

If
.I x
is +0, \-0, positive infinity, negative infinity, or NaN,
.I x
is returned.
.SH ERRORS
No errors occur.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw24 lb lb
l l l.
Interface	Attribute	Value
T{
.BR cbrt (),
.BR cbrtf (),
.BR cbrtl ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C99, POSIX.1-2001, POSIX.1-2008.
.\" .BR cbrt ()
.\" was a GNU extension. It is now a C99 requirement.
.SH SEE ALSO
.BR pow (3),
.BR sqrt (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 2002 Walter Harms (walter.harms@informatik.uni-oldenburg.de)
.\"
.\" %%%LICENSE_START(GPL_NOVERSION_ONELINE)
.\" Distributed under GPL
.\" %%%LICENSE_END
.\"
.TH CCOS 3 2015-04-19 "" "Linux Programmer's Manual"
.SH NAME
ccos, ccosf, ccosl \- complex cosine function
.SH SYNOPSIS
.B #include <complex.h>
.sp
.BI "double complex ccos(double complex " z ");"
.br
.BI "float complex ccosf(float complex " z ");"
.br
.BI "long double complex ccosl(long double complex " z ");"
.sp
Link with \fI\-lm\fP.
.SH DESCRIPTION
These functions calculate the complex cosine of
.IR z .

The complex cosine function is defined as:
.nf

    ccos(z) = (exp(i * z) + exp(\-i * z)) / 2
.fi
.SH VERSIONS
These functions first appeared in glibc in version 2.1.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw24 lb lb
l l l.
Interface	Attribute	Value
T{
.BR ccos (),
.BR ccosf (),
.BR ccosl ()
T}	Thread safety	MT-Safe
.TE

.SH CONFORMING TO
C99, POSIX.1-2001, POSIX.1-2008.
.SH SEE ALSO
.BR cabs (3),
.BR cacos (3),
.BR csin (3),
.BR ctan (3),
.BR complex (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 2002 Walter Harms (walter.harms@informatik.uni-oldenburg.de)
.\"
.\" %%%LICENSE_START(GPL_NOVERSION_ONELINE)
.\" Distributed under GPL
.\" %%%LICENSE_END
.\"
.TH CCOSH 3 2015-04-19 "" "Linux Programmer's Manual"
.SH NAME
ccosh, ccoshf, ccoshl \- complex hyperbolic cosine
.SH SYNOPSIS
.B #include <complex.h>
.sp
.BI "double complex ccosh(double complex " z ");"
.br
.BI "float complex ccoshf(float complex " z ");"
.br
.BI "long double complex ccoshl(long double complex " z ");"
.sp
Link with \fI\-lm\fP.
.SH DESCRIPTION
These functions calculate the complex hyperbolic cosine of
.IR z .

The complex hyperbolic cosine function is defined as:
.nf

    ccosh(z) = (exp(z)+exp(\-z))/2
.fi
.SH VERSIONS
These functions first appeared in glibc in version 2.1.
.SH CONFORMING TO
C99, POSIX.1-2001, POSIX.1-2008.
.SH SEE ALSO
.BR cabs (3),
.BR cacosh (3),
.BR csinh (3),
.BR ctanh (3),
.BR complex (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 2001 Andries Brouwer <aeb@cwi.nl>.
.\" and Copyright 2008, Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH CEIL 3  2015-04-19 "" "Linux Programmer's Manual"
.SH NAME
ceil, ceilf, ceill \- ceiling function: smallest integral value not
less than argument
.SH SYNOPSIS
.nf
.B #include <math.h>
.sp
.BI "double ceil(double " x );
.br
.BI "float ceilf(float " x );
.br
.BI "long double ceill(long double " x );
.fi
.sp
Link with \fI\-lm\fP.
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR ceilf (),
.BR ceill ():
.RS 4
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE\ >=\ 600 || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.ad
.SH DESCRIPTION
These functions return the smallest integral value that is not less than
.IR x .

For example,
.IR ceil(0.5)
is 1.0, and
.IR ceil(\-0.5)
is 0.0.
.SH RETURN VALUE
These functions return the ceiling of
.IR x .

If
.I x
is integral, +0, \-0, NaN, or infinite,
.I x
itself is returned.
.SH ERRORS
No errors occur.
POSIX.1-2001 documents a range error for overflows, but see NOTES.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw24 lb lb
l l l.
Interface	Attribute	Value
T{
.BR ceil (),
.BR ceilf (),
.BR ceill ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C99, POSIX.1-2001, POSIX.1-2008.

The variant returning
.I double
also conforms to
SVr4, 4.3BSD, C89.
.SH NOTES
SUSv2 and POSIX.1-2001 contain text about overflow (which might set
.I errno
to
.BR ERANGE ,
or raise an
.B FE_OVERFLOW
exception).
In practice, the result cannot overflow on any current machine,
so this error-handling stuff is just nonsense.
.\" The POSIX.1-2001 APPLICATION USAGE SECTION discusses this point.
(More precisely, overflow can happen only when the maximum value
of the exponent is smaller than the number of mantissa bits.
For the IEEE-754 standard 32-bit and 64-bit floating-point numbers
the maximum value of the exponent is 128 (respectively, 1024),
and the number of mantissa bits is 24 (respectively, 53).)

The integral value returned by these functions may be too large
to store in an integer type
.RI ( int ,
.IR long ,
etc.).
To avoid an overflow, which will produce undefined results,
an application should perform a range check on the returned value
before assigning it to an integer type.
.SH SEE ALSO
.BR floor (3),
.BR lrint (3),
.BR nearbyint (3),
.BR rint (3),
.BR round (3),
.BR trunc (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 2002 Walter Harms (walter.harms@informatik.uni-oldenburg.de)
.\"
.\" %%%LICENSE_START(GPL_NOVERSION_ONELINE)
.\" Distributed under GPL
.\" %%%LICENSE_END
.\"
.TH CEXP2 3 2014-08-19 "" "Linux Programmer's Manual"
.SH NAME
cexp2, cexp2f, cexp2l \- base-2 exponent of a complex number
.SH SYNOPSIS
.B #include <complex.h>
.sp
.BI "double complex cexp2(double complex " z ");"
.br
.BI "float complex cexp2f(float complex " z ");"
.br
.BI "long double complex cexp2l(long double complex " z ");"
.sp
Link with \fI\-lm\fP.
.SH DESCRIPTION
The function returns 2 raised to the power of
.IR z .
.SH CONFORMING TO
These function names are reserved for future use in C99.
.SH AVAILABILITY
Not yet in glibc, as at version 2.19.
.\" But reserved in NAMESPACE.
.SH SEE ALSO
.BR cabs (3),
.BR cexp (3),
.BR clog10 (3),
.BR complex (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 2002 Walter Harms (walter.harms@informatik.uni-oldenburg.de)
.\"
.\" %%%LICENSE_START(GPL_NOVERSION_ONELINE)
.\" Distributed under GPL
.\" %%%LICENSE_END
.\"
.TH CEXP 3 2015-04-19 "" "Linux Programmer's Manual"
.SH NAME
cexp, cexpf, cexpl \- complex exponential function
.SH SYNOPSIS
.B #include <complex.h>
.sp
.BI "double complex cexp(double complex " z ");"
.br
.BI "float complex cexpf(float complex " z ");"
.br
.BI "long double complex cexpl(long double complex " z ");"
.sp
Link with \fI\-lm\fP.
.SH DESCRIPTION
These functions calculate e (2.71828..., the base of natural logarithms)
raised to the power of
.IR z .
.LP
One has:
.nf

    cexp(I * z) = ccos(z) + I * csin(z)
.fi
.SH VERSIONS
These functions first appeared in glibc in version 2.1.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw24 lb lb
l l l.
Interface	Attribute	Value
T{
.BR cexp (),
.BR cexpf (),
.BR cexpl ()
T}	Thread safety	MT-Safe
.TE

.SH CONFORMING TO
C99, POSIX.1-2001, POSIX.1-2008.
.SH SEE ALSO
.BR cabs (3),
.BR cexp2 (3),
.BR clog (3),
.BR cpow (3),
.BR complex (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2003 Andries Brouwer (aeb@cwi.nl)
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.TH CFREE 3 2015-03-02  "" "Linux Programmer's Manual"
.SH NAME
cfree \- free allocated memory
.SH SYNOPSIS
.nf
.sp
.B "#include <stdlib.h>"
.sp
/* In SunOS 4 */
.BI "int cfree(void *" ptr );
.sp
/* In glibc or FreeBSD libcompat */
.BI "void cfree(void *" ptr );
.sp
/* In SCO OpenServer */
.BI "void cfree(char *" ptr ", unsigned " num ", unsigned " size );
.sp
/* In Solaris watchmalloc.so.1 */
.BI "void cfree(void *" ptr ", size_t " nelem ", size_t " elsize );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR cfree ():
_BSD_SOURCE || _SVID_SOURCE
.SH DESCRIPTION
This function should never be used.
Use
.BR free (3)
instead.
.SS 1-arg cfree
In glibc, the function
.BR cfree ()
is a synonym for
.BR free (3),
"added for compatibility with SunOS".
.LP
Other systems have other functions with this name.
The declaration is sometimes in
.I <stdlib.h>
and sometimes in
.IR <malloc.h> .
.SS 3-arg cfree
Some SCO and Solaris versions have malloc libraries with a 3-argument
.BR cfree (),
apparently as an analog to
.BR calloc (3).
.LP
If you need it while porting something, add
.sp
.in +4n
#define cfree(p, n, s) free((p))
.in
.sp
to your file.
.LP
A frequently asked question is "Can I use
.BR free (3)
to free memory allocated with
.BR calloc (3),
or do I need
.BR cfree ()?"
Answer: use
.BR free (3).
.LP
An SCO manual writes: "The cfree routine is provided for compliance
to the iBCSe2 standard and simply calls free.
The num and size
arguments to cfree are not used."
.SH RETURN VALUE
The SunOS version of
.BR cfree ()
(which is a synonym for
.BR free (3))
returns 1 on success and 0 on failure.
In case of error,
.I errno
is set to
.BR EINVAL :
the value of
.I ptr
was not a pointer to a block previously allocated by
one of the routines in the
.BR malloc (3)
family.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR cfree ()
T}	Thread safety	MT-Safe /* In glibc */
.TE
.SH CONFORMING TO
The 3-argument version of
.BR cfree ()
as used by SCO conforms to the iBCSe2 standard:
Intel386 Binary Compatibility Specification, Edition 2.
.SH SEE ALSO
.BR malloc (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 2002 Walter Harms (walter.harms@informatik.uni-oldenburg.de)
.\"
.\" %%%LICENSE_START(GPL_NOVERSION_ONELINE)
.\" Distributed under GPL
.\" %%%LICENSE_END
.\"
.TH CIMAG 3 2015-04-19 "" "Linux Programmer's Manual"
.SH NAME
cimag, cimagf, cimagl \- get imaginary part of a complex number
.SH SYNOPSIS
.B #include <complex.h>
.sp
.BI "double cimag(double complex " z ");"
.br
.BI "float cimagf(float complex " z ");"
.br
.BI "long double cimagl(long double complex " z ");"
.sp
Link with \fI\-lm\fP.
.SH DESCRIPTION
These functions return the imaginary part of the complex number
.IR z .
.LP
One has:
.nf

    z = creal(z) + I * cimag(z)
.fi
.SH VERSIONS
These functions first appeared in glibc in version 2.1.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw27 lb lb
l l l.
Interface	Attribute	Value
T{
.BR cimag (),
.BR cimagf (),
.BR cimagl ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C99, POSIX.1-2001, POSIX.1-2008.
.SH NOTES
gcc also supports __imag__.
That is a GNU extension.
.SH SEE ALSO
.BR cabs (3),
.BR creal (3),
.BR complex (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 2001 John Levon <moz@compsoc.man.ac.uk>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Additions, aeb, 2001-10-17.
.TH CLEARENV 3  2014-08-19 "Linux" "Linux Programmer's Manual"
.SH NAME
clearenv \- clear the environment
.SH SYNOPSIS
.nf
.B #include <stdlib.h>
.sp
.B "int clearenv(void);"
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR clearenv ():
_SVID_SOURCE || _BSD_SOURCE
.SH DESCRIPTION
The
.BR clearenv ()
function clears the environment of all name-value
pairs and sets the value of the external variable
.I environ
to NULL.
.SH RETURN VALUE
The
.BR clearenv ()
function returns zero on success, and a nonzero
value on failure.
.\" Most versions of UNIX return -1 on error, or do not even have errors.
.\" Glibc info and the Watcom C library document "a nonzero value".
.SH VERSIONS
Available since glibc 2.0.
.SH CONFORMING TO
Various UNIX variants (DG/UX, HP-UX, QNX, ...).
POSIX.9 (bindings for FORTRAN77).
POSIX.1-1996 did not accept
.BR clearenv ()
and
.BR putenv (3),
but changed its mind and scheduled these functions for some
later issue of this standard (cf. B.4.6.1).
However, POSIX.1-2001
adds only
.BR putenv (3),
and rejected
.BR clearenv ().
.SH NOTES
Used in security-conscious applications.
If it is unavailable
the assignment
.nf

    environ = NULL;

.fi
will probably do.
.LP
The DG/UX and Tru64 man pages write: If
.I environ
has been modified by anything other than the
.BR putenv (3),
.BR getenv (3),
or
.BR clearenv ()
functions, then
.BR clearenv ()
will return an error and the process environment will remain unchanged.
.\" .LP
.\" HP-UX has a ENOMEM error return.
.SH SEE ALSO
.BR getenv (3),
.BR putenv (3),
.BR setenv (3),
.BR unsetenv (3),
.BR environ (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1993 by Thomas Koenig (ig25@rz.uni-karlsruhe.de)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified Sat Jul 24 21:27:01 1993 by Rik Faith (faith@cs.unc.edu)
.\" Modified 14 Jun 2002, Michael Kerrisk <mtk.manpages@gmail.com>
.\" 	Added notes on differences from other UNIX systems with respect to
.\"	waited-for children.
.TH CLOCK 3  2015-03-29 "GNU" "Linux Programmer's Manual"
.SH NAME
clock \- determine processor time
.SH SYNOPSIS
.nf
.B #include <time.h>
.sp
.B clock_t clock(void);
.fi
.SH DESCRIPTION
The
.BR clock ()
function returns an approximation of processor time used by the program.
.SH RETURN VALUE
The value returned is the CPU time used so far as a
.IR clock_t ;
to get the number of seconds used, divide by
.BR CLOCKS_PER_SEC .
If the processor time used is not available or its value cannot
be represented, the function returns the value
.IR (clock_t)\ \-1 .
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR clock ()
T}	Thread safety	MT-Safe
.TE

.SH CONFORMING TO
C89, C99, POSIX.1-2001.
XSI requires that
.B CLOCKS_PER_SEC
equals 1000000 independent
of the actual resolution.
.SH NOTES
The C standard allows for arbitrary values at the start of the program;
subtract the value returned from a call to
.BR clock ()
at the start of the program to get maximum portability.
.PP
Note that the time can wrap around.
On a 32-bit system where
.B CLOCKS_PER_SEC
equals 1000000 this function will return the same
value approximately every 72 minutes.
.PP
On several other implementations,
the value returned by
.BR clock ()
also includes the times of any children whose status has been
collected via
.BR wait (2)
(or another wait-type call).
Linux does not include the times of waited-for children in the
value returned by
.BR clock ().
.\" I have seen this behavior on Irix 6.3, and the OSF/1, HP/UX, and
.\" Solaris manual pages say that clock() also does this on those systems.
.\" POSIX.1-2001 doesn't explicitly allow this, nor is there an
.\" explicit prohibition. -- MTK
The
.BR times (2)
function, which explicitly returns (separate) information about the
caller and its children, may be preferable.

In glibc 2.17 and earlier,
.BR clock ()
was implemented on top of
.BR times (2).
For improved accuracy,
since glibc 2.18, it is implemented on top of
.BR clock_gettime (2)
(using the
.BR CLOCK_PROCESS_CPUTIME_ID
clock).
.SH SEE ALSO
.BR clock_gettime (2),
.BR getrusage (2),
.BR times (2)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2008, Linux Foundation, written by Michael Kerrisk
.\" <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH CLOCK_GETCPUCLOCKID 3 2015-03-02 "Linux" "Linux Programmer's Manual"
.SH NAME
clock_getcpuclockid \- obtain ID of a process CPU-time clock
.SH SYNOPSIS
.B #include <time.h>
.nf
.sp
.BI "int clock_getcpuclockid(pid_t " pid ", clockid_t *" clock_id );
.fi
.sp
Link with \fI\-lrt\fP (only for glibc versions before 2.17).
.sp
.ad l
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR clock_getcpuclockid ():
.RS 4
_XOPEN_SOURCE\ >=\ 600 || _POSIX_C_SOURCE\ >=\ 200112L
.RE
.ad
.SH DESCRIPTION
The
.BR clock_getcpuclockid ()
function obtains the ID of the CPU-time clock of the process whose ID is
.IR pid ,
and returns it in the location pointed to by
.IR clock_id .
If
.I pid
is zero, then the clock ID of the CPU-time clock
of the calling process is returned.
.SH RETURN VALUE
On success,
.BR clock_getcpuclockid ()
returns 0;
on error, it returns one of the positive error numbers listed in ERRORS.
.SH ERRORS
.TP
.B ENOSYS
The kernel does not support obtaining the per-process
CPU-time clock of another process, and
.I pid
does not specify the calling process.
.TP
.B EPERM
The caller does not have permission to access
the CPU-time clock of the process specified by
.IR pid .
(Specified as an optional error in POSIX.1-2001;
does not occur on Linux unless the kernel does not support
obtaining the per-process CPU-time clock of another process.)
.TP
.B ESRCH
There is no process with the ID
.IR pid .
.SH VERSIONS
The
.BR clock_getcpuclockid ()
function is available in glibc since version 2.2.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw21 lb lb
l l l.
Interface	Attribute	Value
T{
.BR clock_getcpuclockid ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
POSIX.1-2001.
.SH NOTES
Calling
.BR clock_gettime (2)
with the clock ID obtained by a call to
.BR clock_getcpuclockid ()
with a
.I pid
of 0,
is the same as using the clock ID
.BR CLOCK_PROCESS_CPUTIME_ID .
.SH EXAMPLE
The example program below obtains the
CPU-time clock ID of the process whose ID is given on the command line,
and then uses
.BR clock_gettime (2)
to obtain the time on that clock.
An example run is the following:
.in +4n
.nf

.RB "$" " ./a.out 1" "                 # Show CPU clock of init process"
CPU-time clock for PID 1 is 2.213466748 seconds
.fi
.in
.SS Program source
\&
.nf
#define _XOPEN_SOURCE 600
#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <time.h>

int
main(int argc, char *argv[])
{
    clockid_t clockid;
    struct timespec ts;

    if (argc != 2) {
        fprintf(stderr, "%s <process\-ID>\\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    if (clock_getcpuclockid(atoi(argv[1]), &clockid) != 0) {
        perror("clock_getcpuclockid");
        exit(EXIT_FAILURE);
    }

    if (clock_gettime(clockid, &ts) == \-1) {
        perror("clock_gettime");
        exit(EXIT_FAILURE);
    }

    printf("CPU-time clock for PID %s is %ld.%09ld seconds\\n",
            argv[1], (long) ts.tv_sec, (long) ts.tv_nsec);
    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR clock_getres (2),
.BR timer_create (2),
.BR pthread_getcpuclockid (3),
.BR time (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 2002 Walter Harms (walter.harms@informatik.uni-oldenburg.de)
.\"
.\" %%%LICENSE_START(GPL_NOVERSION_ONELINE)
.\" Distributed under GPL
.\" %%%LICENSE_END
.\"
.TH CLOG10 3 2015-03-02 "" "Linux Programmer's Manual"
.SH NAME
clog10, clog10f, clog10l \- base-10 logarithm of a complex number
.SH SYNOPSIS
.BR "#define _GNU_SOURCE" "         /* See feature_test_macros(7) */"
.br
.B #include <complex.h>
.sp
.BI "double complex clog10(double complex " z );
.br
.BI "float complex clog10f(float complex " z );
.br
.BI "long double complex clog10l(long double complex " z );
.sp
Link with \fI\-lm\fP.
.SH DESCRIPTION
The call
.I clog10(z)
is equivalent to
.IR clog(z)/log(10) .
The other functions perform the same task for
.I float
and
.IR "long double" .

Note that
.I z
close to zero will cause an overflow.
.SH VERSIONS
These functions first appeared in glibc in version 2.1.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw30 lb lb
l l l.
Interface	Attribute	Value
T{
.BR clog10 (),
.BR clog10f (),
.BR clog10l ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
These functions are GNU extensions.
It is reserved for future use in C99.
.SH SEE ALSO
.BR cabs (3),
.BR cexp (3),
.BR clog (3),
.BR clog2 (3),
.BR complex (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 2002 Walter Harms (walter.harms@informatik.uni-oldenburg.de)
.\"
.\" %%%LICENSE_START(GPL_NOVERSION_ONELINE)
.\" Distributed under GPL
.\" %%%LICENSE_END
.\"
.TH CLOG2 3 2014-08-19 "" "Linux Programmer's Manual"
.SH NAME
clog2, clog2f, clog2l \- base-2 logarithm of a complex number
.SH SYNOPSIS
.B #include <complex.h>
.sp
.BI "double complex clog2(double complex " z );
.br
.BI "float complex clog2f(float complex " z );
.br
.BI "long double complex clog2l(long double complex " z );
.\" .sp
.\" Link with \fI\-lm\fP.
.SH DESCRIPTION
The call
.I clog2(z)
is equivalent to
.IR clog(z)/log(2) .

The other functions perform the same task for
.I float
and
.IR "long double" .

Note that
.I z
close to zero will cause an overflow.
.SH CONFORMING TO
These function names are reserved for future use in C99.
.SH AVAILABILITY
Not yet in glibc, as at version 2.19.
.\" But reserved in NAMESPACE.
.SH SEE ALSO
.BR cabs (3),
.BR cexp (3),
.BR clog (3),
.BR clog10 (3),
.BR complex (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 2002 Walter Harms (walter.harms@informatik.uni-oldenburg.de)
.\"
.\" %%%LICENSE_START(GPL_NOVERSION_ONELINE)
.\" Distributed under GPL
.\" %%%LICENSE_END
.\"
.TH CLOG 3 2015-04-19 "" "Linux Programmer's Manual"
.SH NAME
clog, clogf, clogl \- natural logarithm of a complex number
.SH SYNOPSIS
.B #include <complex.h>
.sp
.BI "double complex clog(double complex " z );
.br
.BI "float complex clogf(float complex " z );
.br
.BI "long double complex clogl(long double complex " z );
.sp
Link with \fI\-lm\fP.
.SH DESCRIPTION
These functions calcualte the complex natural logarithm of
.IR z ,
with a branch cut along the negative real axis.

The logarithm
.BR clog ()
is the inverse function of the exponential
.BR cexp (3).
Thus, if \fIy\ =\ clog(z)\fP, then \fIz\ =\ cexp(y)\fP.
The imaginary part of
.I y
is chosen in the interval [\-pi,pi].
.LP
One has:
.nf

    clog(z) = log(cabs(z)) + I * carg(z)
.fi
.LP
Note that
.I z
close to zero will cause an overflow.
.SH VERSIONS
These functions first appeared in glibc in version 2.1.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw24 lb lb
l l l.
Interface	Attribute	Value
T{
.BR clog (),
.BR clogf (),
.BR clogl ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C99, POSIX.1-2001, POSIX.1-2008.
.SH SEE ALSO
.BR cabs (3),
.BR cexp (3),
.BR clog10 (3),
.BR clog2 (3),
.BR complex (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified Sat Jul 24 21:25:52 1993 by Rik Faith (faith@cs.unc.edu)
.\" Modified 11 June 1995 by Andries Brouwer (aeb@cwi.nl)
.TH CLOSEDIR 3  2015-03-02 "" "Linux Programmer's Manual"
.SH NAME
closedir \- close a directory
.SH SYNOPSIS
.nf
.B #include <sys/types.h>
.sp
.B #include <dirent.h>
.sp
.BI "int closedir(DIR *" dirp );
.fi
.SH DESCRIPTION
The
.BR closedir ()
function closes the directory stream associated with
.IR dirp .
A successful call to
.BR closedir ()
also closes the underlying file descriptor associated with
.IR dirp .
The directory stream descriptor
.I dirp
is not available
after this call.
.SH RETURN VALUE
The
.BR closedir ()
function returns 0 on success.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EBADF
Invalid directory stream descriptor
.IR dirp .
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR closedir ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
SVr4, POSIX.1-2001, 4.3BSD.
.SH SEE ALSO
.BR close (2),
.BR opendir (3),
.BR readdir (3),
.BR rewinddir (3),
.BR scandir (3),
.BR seekdir (3),
.BR telldir (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" This man page is Copyright (C) 1999 Andi Kleen <ak@muc.de>.
.\"
.\" %%%LICENSE_START(VERBATIM_ONE_PARA)
.\" Permission is granted to distribute possibly modified copies
.\" of this page provided the header is included verbatim,
.\" and in case of nontrivial modification author and date
.\" of the modification is added to the header.
.\" %%%LICENSE_END
.\"
.\" $Id: cmsg.3,v 1.8 2000/12/20 18:10:31 ak Exp $
.TH CMSG 3 2015-05-07 "Linux" "Linux Programmer's Manual"
.SH NAME
CMSG_ALIGN, CMSG_SPACE, CMSG_NXTHDR, CMSG_FIRSTHDR \- access ancillary data
.SH SYNOPSIS
.B #include <sys/socket.h>
.sp
.BI "struct cmsghdr *CMSG_FIRSTHDR(struct msghdr *" msgh );
.br
.BI "struct cmsghdr *CMSG_NXTHDR(struct msghdr *" msgh ", struct cmsghdr *" cmsg );
.br
.BI "size_t CMSG_ALIGN(size_t " length );
.br
.BI "size_t CMSG_SPACE(size_t " length );
.br
.BI "size_t CMSG_LEN(size_t " length );
.br
.BI "unsigned char *CMSG_DATA(struct cmsghdr *" cmsg );
.sp
.nf
struct cmsghdr {
    socklen_t cmsg_len;    /* data byte count, including header */
    int       cmsg_level;  /* originating protocol */
    int       cmsg_type;   /* protocol-specific type */
    /* followed by unsigned char cmsg_data[]; */
};
.fi
.SH DESCRIPTION
These macros are used to create and access control messages (also called
ancillary data) that are not a part of the socket payload.
This control information may
include the interface the packet was received on, various rarely used header
fields, an extended error description, a set of file descriptors or UNIX
credentials.
For instance, control messages can be used to send
additional header fields such as IP options.
Ancillary data is sent by calling
.BR sendmsg (2)
and received by calling
.BR recvmsg (2).
See their manual pages for more information.
.PP
Ancillary data is a sequence of
.I struct cmsghdr
structures with appended data.
This sequence should be accessed
using only the macros described in this manual page and never directly.
See the specific protocol man pages for the available control message types.
The maximum ancillary buffer size allowed per socket can be set using
.IR /proc/sys/net/core/optmem_max ;
see
.BR socket (7).
.PP
.BR CMSG_FIRSTHDR ()
returns a pointer to the first
.I cmsghdr
in the ancillary
data buffer associated with the passed
.IR msghdr .
.PP
.BR CMSG_NXTHDR ()
returns the next valid
.I cmsghdr
after the passed
.IR cmsghdr .
It returns NULL when there isn't enough space left in the buffer.
.PP
.BR CMSG_ALIGN (),
given a length, returns it including the required alignment.
This is a
constant expression.
.PP
.BR CMSG_SPACE ()
returns the number of bytes an ancillary element with payload of the
passed data length occupies.
This is a constant expression.
.PP
.BR CMSG_DATA ()
returns a pointer to the data portion of a
.IR cmsghdr .
.PP
.BR CMSG_LEN ()
returns the value to store in the
.I cmsg_len
member of the
.I cmsghdr
structure, taking into account any necessary
alignment.
It takes the data length as an argument.
This is a constant
expression.
.PP
To create ancillary data, first initialize the
.I msg_controllen
member of the
.I msghdr
with the length of the control message buffer.
Use
.BR CMSG_FIRSTHDR ()
on the
.I msghdr
to get the first control message and
.BR CMSG_NXTHDR ()
to get all subsequent ones.
In each control message, initialize
.I cmsg_len
(with
.BR CMSG_LEN ()),
the other
.I cmsghdr
header fields, and the data portion using
.BR CMSG_DATA ().
Finally, the
.I msg_controllen
field of the
.I msghdr
should be set to the sum of the
.BR CMSG_SPACE ()
of the length of
all control messages in the buffer.
For more information on the
.IR msghdr ,
see
.BR recvmsg (2).
.PP
When the control message buffer is too short to store all messages, the
.B MSG_CTRUNC
flag is set in the
.I msg_flags
member of the
.IR msghdr .
.SH CONFORMING TO
This ancillary data model conforms to the POSIX.1g draft, 4.4BSD-Lite,
the IPv6 advanced API described in RFC\ 2292 and SUSv2.
.BR CMSG_ALIGN ()
is a Linux extension.
.SH NOTES
For portability, ancillary data should be accessed using only the macros
described here.
.BR CMSG_ALIGN ()
is a Linux extension and should not be used in portable programs.
.PP
In Linux,
.BR CMSG_LEN (),
.BR CMSG_DATA (),
and
.BR CMSG_ALIGN ()
are constant expressions (assuming their argument is constant);
this could be used to declare the size of global
variables.
This may not be portable, however.
.SH EXAMPLE
This code looks for the
.B IP_TTL
option in a received ancillary buffer:
.PP
.in +4n
.nf
struct msghdr msgh;
struct cmsghdr *cmsg;
int *ttlptr;
int received_ttl;

/* Receive auxiliary data in msgh */
for (cmsg = CMSG_FIRSTHDR(&msgh); cmsg != NULL;
        cmsg = CMSG_NXTHDR(&msgh,cmsg)) {
    if (cmsg\->cmsg_level == IPPROTO_IP
            && cmsg\->cmsg_type == IP_TTL) {
        ttlptr = (int *) CMSG_DATA(cmsg);
        received_ttl = *ttlptr;
        break;
    }
}
if (cmsg == NULL) {
    /*
     * Error: IP_TTL not enabled or small buffer
     * or I/O error.
     */
}
.fi
.in
.PP
The code below passes an array of file descriptors over a
UNIX domain socket using
.BR SCM_RIGHTS :
.PP
.in +4n
.nf
struct msghdr msg = {0};
struct cmsghdr *cmsg;
int myfds[NUM_FD]; /* Contains the file descriptors to pass. */
union {
    /* ancillary data buffer, wrapped in a union in order to ensure
       it is suitably aligned */
    char buf[CMSG_SPACE(sizeof myfds)];
    struct cmsghdr align;
} u;
int *fdptr;

msg.msg_control = u.buf;
msg.msg_controllen = sizeof u.buf;
cmsg = CMSG_FIRSTHDR(&msg);
cmsg\->cmsg_level = SOL_SOCKET;
cmsg\->cmsg_type = SCM_RIGHTS;
cmsg\->cmsg_len = CMSG_LEN(sizeof(int) * NUM_FD);
/* Initialize the payload: */
fdptr = (int *) CMSG_DATA(cmsg);
memcpy(fdptr, myfds, NUM_FD * sizeof(int));
.fi
.in
.SH SEE ALSO
.BR recvmsg (2),
.BR sendmsg (2)
.PP
RFC\ 2292
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1993 by Thomas Koenig (ig25@rz.uni-karlsruhe.de)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified Sat Jul 24 19:53:02 1993 by Rik Faith (faith@cs.unc.edu)
.\" FIXME Many more values for 'name' are supported, some of which
.\"	are documented under 'info confstr'.
.\"	See <bits/confname.h> for the rest.
.\"	These should all be added to this page.
.\"	See also the POSIX.1-2001 specification of confstr()
.\"
.TH CONFSTR 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
confstr \- get configuration dependent string variables
.SH SYNOPSIS
.nf
.B #include <unistd.h>
.sp
.BI "size_t confstr(int " "name" ", char *" buf ", size_t " len );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR confstr ():
_POSIX_C_SOURCE\ >=\ 2 || _XOPEN_SOURCE
.SH DESCRIPTION
.BR confstr ()
gets the value of configuration-dependent string variables.
.PP
The
.I name
argument is the system variable to be queried.
The following variables are supported:
.TP
.BR _CS_GNU_LIBC_VERSION " (GNU C library only; since glibc 2.3.2)"
A string which identifies the GNU C library version on this system
(e.g, "glibc 2.3.4").
.TP
.BR _CS_GNU_LIBPTHREAD_VERSION " (GNU C library only; since glibc 2.3.2)"
A string which identifies the POSIX implementation supplied by this
C library (e.g, "NPTL 2.3.4" or "linuxthreads-0.10").
.TP
.B _CS_PATH
A value for the
.B PATH
variable which indicates where all the POSIX.2 standard utilities can
be found.
.PP
If
.I buf
is not NULL and
.I len
is not zero,
.BR confstr ()
copies the value of the string to
.I buf
truncated to
.I len \- 1
bytes if necessary, with a null byte (\(aq\\0\(aq) as terminator.
This can be detected by comparing the return value of
.BR confstr ()
against
.IR len .
.PP
If
.I len
is zero and
.I buf
is NULL,
.BR confstr ()
just returns the value as defined below.
.SH RETURN VALUE
If
.I name
is a valid configuration variable,
.BR confstr ()
returns the number of bytes (including the terminating null byte)
that would be required to hold the entire value of that variable.
This value may be greater than
.IR len ,
which means that the value in
.I buf
is truncated.

If
.I name
is a valid configuration variable,
but that variable does not have a value, then
.BR confstr ()
returns 0.
If
.I name
does not correspond to a valid configuration variable,
.BR confstr ()
returns 0, and
.I errno
is set to
.BR EINVAL .
.SH ERRORS
.TP
.B EINVAL
The value of
.I name
is invalid.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR confstr ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
POSIX.1-2001.
.SH EXAMPLE
The following code fragment determines the path where to find
the POSIX.2 system utilities:
.br
.nf
.in +4n

char *pathbuf;
size_t n;

n = confstr(_CS_PATH, NULL, (size_t) 0);
pathbuf = malloc(n);
if (pathbuf == NULL)
    abort();
confstr(_CS_PATH, pathbuf, n);
.in
.fi
.SH SEE ALSO
.BR getconf (1),
.BR sh (1),
.BR exec (3),
.BR fpathconf (3)
.BR sysconf (3)
.BR pathconf (3)
.BR system (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 2002 Walter Harms (walter.harms@informatik.uni-oldenburg.de)
.\"
.\" %%%LICENSE_START(GPL_NOVERSION_ONELINE)
.\" Distributed under GPL
.\" %%%LICENSE_END
.\"
.TH CONJ 3 2015-04-19 "" "Linux Programmer's Manual"
.SH NAME
conj, conjf, conjl \- calculate the complex conjugate
.SH SYNOPSIS
.B #include <complex.h>
.sp
.BI "double complex conj(double complex " z );
.br
.BI "float complex conjf(float complex " z );
.br
.BI "long double complex conjl(long double complex " z );
.sp
Link with \fI\-lm\fP.
.SH DESCRIPTION
These functions return the complex conjugate value of
.IR z .
That is the value obtained by changing the sign of the imaginary part.
.LP
One has:
.nf

    cabs(z) = csqrt(z * conj(z))
.fi
.SH VERSIONS
These functions first appeared in glibc in version 2.1.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw24 lb lb
l l l.
Interface	Attribute	Value
T{
.BR conj (),
.BR conjf (),
.BR conjl ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C99, POSIX.1-2001, POSIX.1-2008.
.SH SEE ALSO
.BR cabs (3),
.BR csqrt (3),
.BR complex (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified 1993-07-24 by Rik Faith (faith@cs.unc.edu)
.\" Modified 2002-08-10 by Walter Harms (walter.harms@informatik.uni-oldenburg.de)
.TH COPYSIGN 3  2015-04-19 "GNU" "Linux Programmer's Manual"
.SH NAME
copysign, copysignf, copysignl \- copy sign of a number
.SH SYNOPSIS
.nf
.B #include <math.h>
.sp
.BI "double copysign(double " x ", double " y );
.br
.BI "float copysignf(float " x ", float " y );
.br
.BI "long double copysignl(long double " x ", long double " y );
.fi
.sp
Link with \fI\-lm\fP.
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR copysign (),
.BR copysignf (),
.BR copysignl ():
.RS 4
_SVID_SOURCE || _BSD_SOURCE || _XOPEN_SOURCE\ >=\ 600 || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.ad b
.SH DESCRIPTION
These functions return a value whose absolute value matches that of
.IR x ,
but whose sign bit matches that of
.IR y .

For example,
.I "copysign(42.0,\ \-1.0)"
and
.I "copysign(\-42.0, \-1.0)"
both return \-42.0.
.SH RETURN VALUE
On success, these functions return a value whose magnitude is taken from
.I x
and whose sign is taken from
.IR y .

If
.I x
is a NaN,
a NaN with the sign bit of
.I y
is returned.
.SH ERRORS
No errors occur.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw36 lb lb
l l l.
Interface	Attribute	Value
T{
.BR copysign (),
.BR copysignf (),
.BR copysignl ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C99, POSIX.1-2001, POSIX.1-2008.
.\" 4.3BSD.
This function is defined in IEC 559 (and the appendix with
recommended functions in IEEE 754/IEEE 854).
.SH NOTES
On architectures where the floating-point formats are not IEEE 754 compliant,
these
functions may treat a negative zero as positive.
.SH SEE ALSO
.BR signbit (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\" and Copyright 2008, Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified 1993-07-24 by Rik Faith (faith@cs.unc.edu)
.\" Modified 2002-07-27 by Walter Harms
.\" 	(walter.harms@informatik.uni-oldenburg.de)
.TH COS 3 2015-04-19 ""   "Linux Programmer's Manual"
.SH NAME
cos, cosf, cosl \- cosine function
.SH SYNOPSIS
.nf
.B #include <math.h>
.sp
.BI "double cos(double " x );
.br
.BI "float cosf(float " x );
.br
.BI "long double cosl(long double " x );
.fi
.sp
Link with \fI\-lm\fP.
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR cosf (),
.BR cosl ():
.RS 4
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE\ >=\ 600 || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.ad
.SH DESCRIPTION
These functions return the cosine of
.IR x ,
where
.I x
is
given in radians.
.SH RETURN VALUE
On success, these functions return the cosine of
.IR x .

If
.I x
is a NaN, a NaN is returned.

If
.I x
is positive infinity or negative infinity,
a domain error occurs,
and a NaN is returned.
.SH ERRORS
See
.BR math_error (7)
for information on how to determine whether an error has occurred
when calling these functions.
.PP
The following errors can occur:
.TP
Domain error: \fIx\fP is an infinity
.I errno
is set to
.BR EDOM
(but see BUGS).
An invalid floating-point exception
.RB ( FE_INVALID )
is raised.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw21 lb lb
l l l.
Interface	Attribute	Value
T{
.BR cos (),
.BR cosf (),
.BR cosl ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C99, POSIX.1-2001, POSIX.1-2008.

The variant returning
.I double
also conforms to
SVr4, 4.3BSD.
.SH BUGS
Before version 2.10, the glibc implementation did not set
.\" http://sources.redhat.com/bugzilla/show_bug.cgi?id=6780
.I errno
to
.B EDOM
when a domain error occurred.
.SH SEE ALSO
.BR acos (3),
.BR asin (3),
.BR atan (3),
.BR atan2 (3),
.BR ccos (3),
.BR sin (3),
.BR sincos (3),
.BR tan (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\" and Copyright 2008, Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified 1993-07-24 by Rik Faith (faith@cs.unc.edu)
.\" Modified 1996-06-08 by aeb
.\" Modified 2002-07-27 by Walter Harms
.\" (walter.harms@informatik.uni-oldenburg.de)
.\"
.TH COSH 3 2015-04-19 ""  "Linux Programmer's Manual"
.SH NAME
cosh, coshf, coshl \- hyperbolic cosine function
.SH SYNOPSIS
.nf
.B #include <math.h>
.sp
.BI "double cosh(double " x );
.br
.BI "float coshf(float " x );
.br
.BI "long double coshl(long double " x );
.fi
.sp
Link with \fI\-lm\fP.
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR coshf (),
.BR coshl ():
.RS 4
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE\ >=\ 600 || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.ad
.SH DESCRIPTION
These functions return the hyperbolic cosine of
.IR x ,
which is defined mathematically as:
.nf

    cosh(x) = (exp(x) + exp(\-x)) / 2
.fi
.SH RETURN VALUE
On success, these functions return the hyperbolic cosine of
.IR x .

If
.I x
is a NaN, a NaN is returned.

If
.I x
is +0 or \-0, 1 is returned.

If
.I x
is positive infinity or negative infinity,
positive infinity is returned.

If the result overflows,
a range error occurs,
and the functions return
.RB + HUGE_VAL ,
.RB + HUGE_VALF ,
or
.RB + HUGE_VALL ,
respectively.
.SH ERRORS
See
.BR math_error (7)
for information on how to determine whether an error has occurred
when calling these functions.
.PP
The following errors can occur:
.TP
Range error: result overflow
.I errno
is set to
.BR ERANGE .
An overflow floating-point exception
.RB ( FE_OVERFLOW )
is raised.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw24 lb lb
l l l.
Interface	Attribute	Value
T{
.BR cosh (),
.BR coshf (),
.BR coshl ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C99, POSIX.1-2001, POSIX.1-2008.

The variant returning
.I double
also conforms to
SVr4, 4.3BSD.
.SH BUGS
In glibc version 2.3.4 and earlier,
an overflow floating-point
.RB ( FE_OVERFLOW  )
exception is not raised when an overflow occurs.
.SH SEE ALSO
.BR acosh (3),
.BR asinh (3),
.BR atanh (3),
.BR ccos (3),
.BR sinh (3),
.BR tanh (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 2002 Walter Harms (walter.harms@informatik.uni-oldenburg.de)
.\"
.\" %%%LICENSE_START(GPL_NOVERSION_ONELINE)
.\" Distributed under GPL
.\" %%%LICENSE_END
.\"
.TH CPOW 3 2015-04-19 "" "Linux Programmer's Manual"
.SH NAME
cpow, cpowf, cpowl \- complex power function
.SH SYNOPSIS
.nf
.B #include <complex.h>
.sp
.BI "double complex cpow(double complex " x ", complex double " z ");"
.br
.BI "float complex cpowf(float complex " x ", complex float " z ");"
.br
.BI "long double complex cpowl(long double complex " x ,
.BI "                          complex long double " z ");"
.sp
Link with \fI\-lm\fP.
.fi
.SH DESCRIPTION
These functions calculate
.I x
raised to the power
.IR z
(with a branch cut for
.I x
along the negative real axis.)
.SH VERSIONS
These functions first appeared in glibc in version 2.1.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw24 lb lb
l l l.
Interface	Attribute	Value
T{
.BR cpow (),
.BR cpowf (),
.BR cpowl ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C99, POSIX.1-2001, POSIX.1-2008.
.SH SEE ALSO
.BR cabs (3),
.BR pow (3),
.BR complex (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 2002 Walter Harms (walter.harms@informatik.uni-oldenburg.de)
.\"
.\" %%%LICENSE_START(GPL_NOVERSION_ONELINE)
.\" Distributed under GPL
.\" %%%LICENSE_END
.\"
.TH CPROJ 3 2015-04-19 "" "Linux Programmer's Manual"
.SH NAME
cproj, cprojf, cprojl \- project into Riemann Sphere
.SH SYNOPSIS
.B #include <complex.h>
.sp
.BI "double complex cproj(double complex " z ");"
.br
.BI "float complex cprojf(float complex " z ");"
.br
.BI "long double complex cprojl(long double complex " z ");"
.sp
Link with \fI\-lm\fP.
.SH DESCRIPTION
These functions project a point in the plane onto the surface of a
Riemann Sphere, the one-point compactification of the complex plane.
Each finite point
.I z
projects to
.I z
itself.
Every complex infinite value is projected to a single infinite value,
namely to positive infinity on the real axis.
.SH VERSIONS
These functions first appeared in glibc in version 2.1.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw27 lb lb
l l l.
Interface	Attribute	Value
T{
.BR cproj (),
.BR cprojf (),
.BR cprojl ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C99, POSIX.1-2001, POSIX.1-2008.
.SH NOTES
In glibc 2.11 and earlier, the implementation does something different
(a
.I stereographic
projection onto a Riemann Sphere).
.\" http://sources.redhat.com/bugzilla/show_bug.cgi?id=10401
.SH SEE ALSO
.BR cabs (3),
.BR complex (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2006 Michael Kerrisk
.\" and Copyright (C) 2008 Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH CPU_SET 3 2015-05-07 "Linux" "Linux Programmer's Manual"
.SH NAME
CPU_SET, CPU_CLR, CPU_ISSET, CPU_ZERO, CPU_COUNT,
CPU_AND, CPU_OR, CPU_XOR, CPU_EQUAL,
CPU_ALLOC, CPU_ALLOC_SIZE, CPU_FREE,
CPU_SET_S, CPU_CLR_S, CPU_ISSET_S, CPU_ZERO_S,
CPU_COUNT_S, CPU_AND_S, CPU_OR_S, CPU_XOR_S, CPU_EQUAL_S \-
macros for manipulating CPU sets
.SH SYNOPSIS
.nf
.BR "#define _GNU_SOURCE" "             /* See feature_test_macros(7) */"
.B #include <sched.h>
.sp
.BI "void CPU_ZERO(cpu_set_t *" set );
.sp
.BI "void CPU_SET(int " cpu ", cpu_set_t *" set );
.BI "void CPU_CLR(int " cpu ", cpu_set_t *" set );
.BI "int  CPU_ISSET(int " cpu ", cpu_set_t *" set );
.sp
.BI "int  CPU_COUNT(cpu_set_t *" set );
.sp
.BI "void CPU_AND(cpu_set_t *" destset ,
.BI "             cpu_set_t *" srcset1 ", cpu_set_t *" srcset2 );
.BI "void CPU_OR(cpu_set_t *" destset ,
.BI "             cpu_set_t *" srcset1 ", cpu_set_t *" srcset2 );
.BI "void CPU_XOR(cpu_set_t *" destset ,
.BI "             cpu_set_t *" srcset1 ", cpu_set_t *" srcset2 );
.sp
.BI "int  CPU_EQUAL(cpu_set_t *" set1 ", cpu_set_t *" set2 );
.sp
.BI "cpu_set_t *CPU_ALLOC(int " num_cpus );
.BI "void CPU_FREE(cpu_set_t *" set );
.BI "size_t CPU_ALLOC_SIZE(int " num_cpus );
.sp
.BI "void CPU_ZERO_S(size_t " setsize ", cpu_set_t *" set );
.sp
.BI "void CPU_SET_S(int " cpu ", size_t " setsize ", cpu_set_t *" set );
.BI "void CPU_CLR_S(int " cpu ", size_t " setsize ", cpu_set_t *" set );
.BI "int  CPU_ISSET_S(int " cpu ", size_t " setsize ", cpu_set_t *" set );
.sp
.BI "int  CPU_COUNT_S(size_t " setsize ", cpu_set_t *" set );
.sp
.BI "void CPU_AND_S(size_t " setsize ", cpu_set_t *" destset ,
.BI "             cpu_set_t *" srcset1 ", cpu_set_t *" srcset2 );
.BI "void CPU_OR_S(size_t " setsize ", cpu_set_t *" destset ,
.BI "             cpu_set_t *" srcset1 ", cpu_set_t *" srcset2 );
.BI "void CPU_XOR_S(size_t " setsize ", cpu_set_t *" destset ,
.BI "             cpu_set_t *" srcset1 ", cpu_set_t *" srcset2 );
.sp
.BI "int  CPU_EQUAL_S(size_t " setsize ", cpu_set_t *" set1 \
", cpu_set_t *" set2 );
.fi
.SH DESCRIPTION
The
.I cpu_set_t
data structure represents a set of CPUs.
CPU sets are used by
.BR sched_setaffinity (2)
and similar interfaces.

The
.I cpu_set_t
data type is implemented as a bit set.
However, the data structure treated as considered opaque:
all manipulation of CPU sets should be done via the macros
described in this page.

The following macros are provided to operate on the CPU set
.IR set :
.TP 17
.BR CPU_ZERO ()
Clears
.IR set ,
so that it contains no CPUs.
.TP
.BR CPU_SET ()
Add CPU
.I cpu
to
.IR set .
.TP
.BR CPU_CLR ()
Remove CPU
.I cpu
from
.IR set .
.TP
.BR CPU_ISSET ()
Test to see if CPU
.I cpu
is a member of
.IR set .
.TP
.BR CPU_COUNT ()
Return the number of CPUs in
.IR set .
.PP
Where a
.I cpu
argument is specified, it should not produce side effects,
since the above macros may evaluate the argument more than once.
.PP
The first CPU on the system corresponds to a
.I cpu
value of 0, the next CPU corresponds to a
.I cpu
value of 1, and so on.
No assumptions should be made about particular CPUs being
available, or the set of CPUs being contiguous, since CPUs can
be taken offline dynamically or be otherwise absent.
The constant
.B CPU_SETSIZE
(currently 1024) specifies a value one greater than the maximum CPU
number that can be stored in
.IR cpu_set_t .

The following macros perform logical operations on CPU sets:
.TP 17
.BR CPU_AND ()
Store the intersection of the sets
.I srcset1
and
.I srcset2
in
.I destset
(which may be one of the source sets).
.TP
.BR CPU_OR ()
Store the union of the sets
.I srcset1
and
.I srcset2
in
.I destset
(which may be one of the source sets).
.TP
.BR CPU_XOR ()
Store the XOR of the sets
.I srcset1
and
.I srcset2
in
.I destset
(which may be one of the source sets).
The XOR means the set of CPUs that are in either
.I srcset1
or
.IR srcset2 ,
but not both.
.TP
.BR CPU_EQUAL ()
Test whether two CPU set contain exactly the same CPUs.
.SS Dynamically sized CPU sets
Because some applications may require the ability to dynamically
size CPU sets (e.g., to allocate sets larger than that
defined by the standard
.I cpu_set_t
data type), glibc nowadays provides a set of macros to support this.

The following macros are used to allocate and deallocate CPU sets:
.TP 17
.BR CPU_ALLOC ()
Allocate a CPU set large enough to hold CPUs
in the range 0 to
.IR num_cpus-1 .
.TP
.BR CPU_ALLOC_SIZE ()
Return the size in bytes of the CPU set that would be needed to
hold CPUs in the range 0 to
.IR num_cpus-1 .
This macro provides the value that can be used for the
.I setsize
argument in the
.BR CPU_*_S ()
macros described below.
.TP
.BR CPU_FREE ()
Free a CPU set previously allocated by
.BR CPU_ALLOC ().
.PP
The macros whose names end with "_S" are the analogs of
the similarly named macros without the suffix.
These macros perform the same tasks as their analogs,
but operate on the dynamically allocated CPU set(s) whose size is
.I setsize
bytes.
.SH RETURN VALUE
.BR CPU_ISSET ()
and
.BR CPU_ISSET_S ()
return nonzero if
.I cpu
is in
.IR set ;
otherwise, it returns 0.

.BR CPU_COUNT ()
and
.BR CPU_COUNT_S ()
return the number of CPUs in
.IR set .

.BR CPU_EQUAL ()
and
.BR CPU_EQUAL_S ()
return nonzero if the two CPU sets are equal; otherwise it returns 0.

.BR CPU_ALLOC ()
returns a pointer on success, or NULL on failure.
(Errors are as for
.BR malloc (3).)

.BR CPU_ALLOC_SIZE ()
returns the number of bytes required to store a
CPU set of the specified cardinality.

The other functions do not return a value.
.SH VERSIONS
The
.BR CPU_ZERO (),
.BR CPU_SET (),
.BR CPU_CLR (),
and
.BR CPU_ISSET ()
macros were added in glibc 2.3.3.

.BR CPU_COUNT ()
first appeared in glibc 2.6.

.BR CPU_AND (),
.BR CPU_OR (),
.BR CPU_XOR (),
.BR CPU_EQUAL (),
.BR CPU_ALLOC (),
.BR CPU_ALLOC_SIZE (),
.BR CPU_FREE (),
.BR CPU_ZERO_S (),
.BR CPU_SET_S (),
.BR CPU_CLR_S (),
.BR CPU_ISSET_S (),
.BR CPU_AND_S (),
.BR CPU_OR_S (),
.BR CPU_XOR_S (),
and
.BR CPU_EQUAL_S ()
first appeared in glibc 2.7.
.SH CONFORMING TO
These interfaces are Linux-specific.
.SH NOTES
To duplicate a CPU set, use
.BR memcpy (3).

Since CPU sets are bit sets allocated in units of long words,
the actual number of CPUs in a dynamically
allocated CPU set will be rounded up to the next multiple of
.IR "sizeof(unsigned long)" .
An application should consider the contents of these extra bits
to be undefined.

Notwithstanding the similarity in the names,
note that the constant
.B CPU_SETSIZE
indicates the number of CPUs in the
.I cpu_set_t
data type (thus, it is effectively a count of bits in the bit set),
while the
.I setsize
argument of the
.BR CPU_*_S ()
macros is a size in bytes.

The data types for arguments and return values shown
in the SYNOPSIS are hints what about is expected in each case.
However, since these interfaces are implemented as macros,
the compiler won't necessarily catch all type errors
if you violate the suggestions.
.SH BUGS
On 32-bit platforms with glibc 2.8 and earlier,
.BR CPU_ALLOC ()
allocates twice as much space as is required, and
.BR CPU_ALLOC_SIZE ()
returns a value twice as large as it should.
This bug should not affect the semantics of a program,
but does result in wasted memory
and less efficient operation of the macros that
operate on dynamically allocated CPU sets.
These bugs are fixed in glibc 2.9.
.\" http://sourceware.org/bugzilla/show_bug.cgi?id=7029
.SH EXAMPLE
The following program demonstrates the use of some of the macros
used for dynamically allocated CPU sets.

.nf
#define _GNU_SOURCE
#include <sched.h>
#include <stdlib.h>
#include <unistd.h>
#include <stdio.h>
#include <assert.h>

int
main(int argc, char *argv[])
{
    cpu_set_t *cpusetp;
    size_t size;
    int num_cpus, cpu;

    if (argc < 2) {
        fprintf(stderr, "Usage: %s <num\-cpus>\\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    num_cpus = atoi(argv[1]);

    cpusetp = CPU_ALLOC(num_cpus);
    if (cpusetp == NULL) {
        perror("CPU_ALLOC");
        exit(EXIT_FAILURE);
    }

    size = CPU_ALLOC_SIZE(num_cpus);

    CPU_ZERO_S(size, cpusetp);
    for (cpu = 0; cpu < num_cpus; cpu += 2)
        CPU_SET_S(cpu, size, cpusetp);

    printf("CPU_COUNT() of set:    %d\\n", CPU_COUNT_S(size, cpusetp));

    CPU_FREE(cpusetp);
    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR sched_setaffinity (2),
.BR pthread_attr_setaffinity_np (3),
.BR pthread_setaffinity_np (3),
.BR cpuset (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 2002 Walter Harms (walter.harms@informatik.uni-oldenburg.de)
.\"
.\" %%%LICENSE_START(GPL_NOVERSION_ONELINE)
.\" Distributed under GPL
.\" %%%LICENSE_END
.\"
.TH CREAL 3 2015-04-19 "" "Linux Programmer's Manual"
.SH NAME
creal, crealf, creall \- get real part of a complex number
.SH SYNOPSIS
.B #include <complex.h>
.sp
.BI "double creal(double complex " z );
.br
.BI "float crealf(float complex " z );
.br
.BI "long double creall(long double complex " z );
.sp
Link with \fI\-lm\fP.
.SH DESCRIPTION
These functions return the real part of the complex number
.IR z .
.LP
One has:
.nf

    z = creal(z) + I * cimag(z)
.fi
.SH VERSIONS
These functions first appeared in glibc in version 2.1.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw27 lb lb
l l l.
Interface	Attribute	Value
T{
.BR creal (),
.BR crealf (),
.BR creall ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C99, POSIX.1-2001, POSIX.1-2008.
.SH NOTES
The gcc supports also __real__.
That is a GNU extension.
.SH SEE ALSO
.BR cabs (3),
.BR cimag (3),
.BR complex (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Michael Haardt (michael@cantor.informatik.rwth.aachen.de)
.\"     Sat Sep  3 22:00:30 MET DST 1994
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.\" Sun Feb 19 21:32:25 1995, faith@cs.unc.edu edited details away
.\"
.\" TO DO: This manual page should go more into detail how DES is perturbed,
.\" which string will be encrypted, and what determines the repetition factor.
.\" Is a simple repetition using ECB used, or something more advanced?  I hope
.\" the presented explanations are at least better than nothing, but by no
.\" means enough.
.\"
.\" added _XOPEN_SOURCE, aeb, 970705
.\" added GNU MD5 stuff, aeb, 011223
.\"
.TH CRYPT 3 2015-03-02 "" "Linux Programmer's Manual"
.SH NAME
crypt, crypt_r \- password and data encryption
.SH SYNOPSIS
.nf
.BR "#define _XOPEN_SOURCE" "       /* See feature_test_macros(7) */"
.br
.B #include <unistd.h>
.sp
.BI "char *crypt(const char *" key ", const char *" salt );
.sp
.BR "#define _GNU_SOURCE" "         /* See feature_test_macros(7) */"
.br
.B #include <crypt.h>
.sp
.BI "char *crypt_r(const char *" key ", const char *" salt ,
.BI "              struct crypt_data *" data );
.fi
.sp
Link with \fI\-lcrypt\fP.
.SH DESCRIPTION
.BR crypt ()
is the password encryption function.
It is based on the Data Encryption
Standard algorithm with variations intended (among other things) to
discourage use of hardware implementations of a key search.
.PP
.I key
is a user's typed password.
.PP
.I salt
is a two-character string chosen from the set
[\fBa\-zA\-Z0\-9./\fP].
This string is used to
perturb the algorithm in one of 4096 different ways.
.PP
By taking the lowest 7 bits of each of the first eight characters of the
.IR key ,
a 56-bit key is obtained.
This 56-bit key is used to encrypt repeatedly a
constant string (usually a string consisting of all zeros).
The returned
value points to the encrypted password, a series of 13 printable ASCII
characters (the first two characters represent the salt itself).
The return value points to static data whose content is
overwritten by each call.
.PP
Warning: The key space consists of
.if t 2\s-2\u56\s0\d
.if n 2**56
equal 7.2e16 possible values.
Exhaustive searches of this key space are
possible using massively parallel computers.
Software, such as
.BR crack (1),
is available which will search the portion of this key space that is
generally used by humans for passwords.
Hence, password selection should,
at minimum, avoid common words and names.
The use of a
.BR passwd (1)
program that checks for crackable passwords during the selection process is
recommended.
.PP
The DES algorithm itself has a few quirks which make the use of the
.BR crypt ()
interface a very poor choice for anything other than password
authentication.
If you are planning on using the
.BR crypt ()
interface for a cryptography project, don't do it: get a good book on
encryption and one of the widely available DES libraries.

.BR crypt_r ()
is a reentrant version of
.BR crypt ().
The structure pointed to by
.I data
is used to store result data and bookkeeping information.
Other than allocating it,
the only thing that the caller should do with this structure is to set
.I data->initialized
to zero before the first call to
.BR crypt_r ().
.SH RETURN VALUE
On success, a pointer to the encrypted password is returned.
On error, NULL is returned.
.SH ERRORS
.TP
.B EINVAL
.I salt
has the wrong format.
.TP
.B
.TP
.B ENOSYS
The
.BR crypt ()
function was not implemented, probably because of U.S.A. export restrictions.
.\" This level of detail is not necessary in this man page. . .
.\" .PP
.\" When encrypting a plain text P using DES with the key K results in the
.\" encrypted text C, then the complementary plain text P' being encrypted
.\" using the complementary key K' will result in the complementary encrypted
.\" text C'.
.\" .PP
.\" Weak keys are keys which stay invariant under the DES key transformation.
.\" The four known weak keys 0101010101010101, fefefefefefefefe,
.\" 1f1f1f1f0e0e0e0e and e0e0e0e0f1f1f1f1 must be avoided.
.\" .PP
.\" There are six known half weak key pairs, which keys lead to the same
.\" encrypted data.  Keys which are part of such key clusters should be
.\" avoided.
.\" Sorry, I could not find out what they are.
.\""
.\" .PP
.\" Heavily redundant data causes trouble with DES encryption, when used in the
.\" .I codebook
.\" mode that
.\" .BR crypt ()
.\" implements.  The
.\" .BR crypt ()
.\" interface should be used only for its intended purpose of password
.\" verification, and should not be used as part of a data encryption tool.
.\" .PP
.\" The first and last three output bits of the fourth S-box can be
.\" represented as function of their input bits.  Empiric studies have
.\" shown that S-boxes partially compute the same output for similar input.
.\" It is suspected that this may contain a back door which could allow the
.\" NSA to decrypt DES encrypted data.
.\" .PP
.\" Making encrypted data computed using crypt() publicly available has
.\" to be considered insecure for the given reasons.
.TP
.B EPERM
.I /proc/sys/crypto/fips_enabled
has a nonzero value,
and an attempt was made to use a weak encryption type, such as DES.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR crypt ()
T}	Thread safety	MT-Unsafe race:crypt
T{
.BR crypt_r ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
.BR crypt ():
SVr4, 4.3BSD, POSIX.1-2001.
.BR crypt_r ()
is a GNU extension.
.SH NOTES
.SS Glibc notes
The glibc2 version of this function supports additional
encryption algorithms.

If
.I salt
is a character string starting with the characters "$\fIid\fP$"
followed by a string terminated by "$":
.RS

$\fIid\fP$\fIsalt\fP$\fIencrypted\fP

.RE
then instead of using the DES machine,
.I id
identifies the encryption method used and this then determines how the rest
of the password string is interpreted.
The following values of
.I id
are supported:
.RS
.TS
l l.
ID  | Method
_
1   | MD5
2a  | Blowfish (not in mainline glibc; added in some
    | Linux distributions)
.\" openSUSE has Blowfish, but AFAICS, this option is not supported
.\" natively by glibc -- mtk, Jul 08
.\"
.\" md5 | Sun MD5
.\" glibc doesn't appear to natively support Sun MD5; I don't know
.\" if any distros add the support.
5   | SHA-256 (since glibc 2.7)
6   | SHA-512 (since glibc 2.7)
.TE
.RE

So $5$\fIsalt\fP$\fIencrypted\fP is an SHA-256 encoded
password and $6$\fIsalt\fP$\fIencrypted\fP is an
SHA-512 encoded one.

"\fIsalt\fP" stands for the up to 16 characters
following "$\fIid\fP$" in the salt.
The encrypted part of the password string is the actual computed password.
The size of this string is fixed:
.TS
l l.
MD5     | 22 characters
SHA-256 | 43 characters
SHA-512 | 86 characters
.TE

The characters in "\fIsalt\fP" and "\fIencrypted\fP" are drawn from the set
[\fBa\-zA\-Z0\-9./\fP].
In the MD5 and SHA implementations the entire
.I key
is significant (instead of only the first
8 bytes in DES).
.SH SEE ALSO
.BR login (1),
.BR passwd (1),
.BR encrypt (3),
.BR getpass (3),
.BR passwd (5)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 2002 Walter Harms (walter.harms@informatik.uni-oldenburg.de)
.\"
.\" %%%LICENSE_START(GPL_NOVERSION_ONELINE)
.\" Distributed under GPL
.\" %%%LICENSE_END
.\"
.TH CSIN 3 2015-04-19 "" "Linux Programmer's Manual"
.SH NAME
csin, csinf, csinl \- complex sine function
.SH SYNOPSIS
.B #include <complex.h>
.sp
.BI "double complex csin(double complex " z ");"
.br
.BI "float complex csinf(float complex " z );
.br
.BI "long double complex csinl(long double complex " z ");"
.sp
Link with \fI\-lm\fP.
.SH DESCRIPTION
These functions calculate the complex sine of
.IR z .

The complex sine function is defined as:
.nf

    csin(z) = (exp(i * z) \- exp(\-i * z)) / (2 * i)
.fi
.SH VERSIONS
These functions first appeared in glibc in version 2.1.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw24 lb lb
l l l.
Interface	Attribute	Value
T{
.BR csin (),
.BR csinf (),
.BR csinl ()
T}	Thread safety	MT-Safe
.TE

.SH CONFORMING TO
C99, POSIX.1-2001, POSIX.1-2008.
.SH SEE ALSO
.BR cabs (3),
.BR casin (3),
.BR ccos (3),
.BR ctan (3),
.BR complex (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 2002 Walter Harms (walter.harms@informatik.uni-oldenburg.de)
.\"
.\" %%%LICENSE_START(GPL_NOVERSION_ONELINE)
.\" Distributed under GPL
.\" %%%LICENSE_END
.\"
.TH CSINH 3 2015-04-19 "" "Linux Programmer's Manual"
.SH NAME
csinh, csinhf, csinhl \- complex hyperbolic sine
.SH SYNOPSIS
.B #include <complex.h>
.sp
.BI "double complex csinh(double complex " z ");"
.br
.BI "float complex csinhf(float complex " z ");"
.br
.BI "long double complex csinhl(long double complex " z ");"
.sp
Link with \fI\-lm\fP.
.SH DESCRIPTION
These functions calculate the complex hyperbolic sine of
.IR z .

The complex hyperbolic sine function is defined as:
.nf

    csinh(z) = (exp(z)\-exp(\-z))/2
.fi
.SH VERSIONS
These functions first appeared in glibc in version 2.1.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw27 lb lb
l l l.
Interface	Attribute	Value
T{
.BR csinh (),
.BR csinhf (),
.BR csinhl ()
T}	Thread safety	MT-Safe
.TE

.SH CONFORMING TO
C99, POSIX.1-2001, POSIX.1-2008.
.SH SEE ALSO
.BR cabs (3),
.BR casinh (3),
.BR ccosh (3),
.BR ctanh (3),
.BR complex (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 2002 Walter Harms (walter.harms@informatik.uni-oldenburg.de)
.\"
.\" %%%LICENSE_START(GPL_NOVERSION_ONELINE)
.\" Distributed under GPL
.\" %%%LICENSE_END
.\"
.TH CSQRT 3 2015-04-19 "" "Linux Programmer's Manual"
.SH NAME
csqrt, csqrtf, csqrtl \- complex square root
.SH SYNOPSIS
.B #include <complex.h>
.sp
.BI "double complex csqrt(double complex " z ");"
.br
.BI "float complex csqrtf(float complex " z ");"
.br
.BI "long double complex csqrtl(long double complex " z ");"
.sp
Link with \fI\-lm\fP.
.SH DESCRIPTION
These functions calculate the complex square root of
.IR z ,
with a branch cut along the negative real axis.
(That means that \fIcsqrt(\-1+eps*I)\fP will be close to I while
\fIcsqrt(\-1\-eps*I)\fP will be close to \-I, \fIif eps\fP is a small positive
real number.)
.SH VERSIONS
These functions first appeared in glibc in version 2.1.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw27 lb lb
l l l.
Interface	Attribute	Value
T{
.BR csqrt (),
.BR csqrtf (),
.BR csqrtl ()
T}	Thread safety	MT-Safe
.TE

.SH CONFORMING TO
C99, POSIX.1-2001, POSIX.1-2008.
.SH SEE ALSO
.BR cabs (3),
.BR cexp (3),
.BR complex (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 2002 Walter Harms (walter.harms@informatik.uni-oldenburg.de)
.\"
.\" %%%LICENSE_START(GPL_NOVERSION_ONELINE)
.\" Distributed under GPL
.\" %%%LICENSE_END
.\"
.TH CTAN 3 2015-04-19 "" "Linux Programmer's Manual"
.SH NAME
ctan, ctanf, ctanl \- complex tangent function
.SH SYNOPSIS
.B #include <complex.h>
.sp
.BI "double complex ctan(double complex " z ");"
.br
.BI "float complex ctanf(float complex " z );
.br
.BI "long double complex ctanl(long double complex " z ");"
.sp
Link with \fI\-lm\fP.
.SH DESCRIPTION
These functions calculate the complex tangent of
.IR z .

The complex tangent function is defined as:
.nf

    ctan(z) = csin(z) / ccos(z)
.fi
.SH VERSIONS
These functions first appeared in glibc in version 2.1.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw24 lb lb
l l l.
Interface	Attribute	Value
T{
.BR ctan (),
.BR ctanf (),
.BR ctanl ()
T}	Thread safety	MT-Safe
.TE

.SH CONFORMING TO
C99, POSIX.1-2001, POSIX.1-2008.
.SH SEE ALSO
.BR cabs (3),
.BR catan (3),
.BR ccos (3),
.BR csin (3),
.BR complex (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 2002 Walter Harms (walter.harms@informatik.uni-oldenburg.de)
.\"
.\" %%%LICENSE_START(GPL_NOVERSION_ONELINE)
.\" Distributed under GPL
.\" %%%LICENSE_END
.\"
.TH CTANH 3 2015-04-19 "" "Linux Programmer's Manual"
.SH NAME
ctanh, ctanhf, ctanhl \- complex hyperbolic tangent
.SH SYNOPSIS
.B #include <complex.h>
.sp
.BI "double complex ctanh(double complex " z ");"
.br
.BI "float complex ctanhf(float complex " z );
.br
.BI "long double complex ctanhl(long double complex " z ");"
.sp
Link with \fI\-lm\fP.
.SH DESCRIPTION
These functions calculate the complex hyperbolic tangent of
.IR z .

The complex hyperbolic tangent function is defined
mathematically as:
.nf

    ctanh(z) = csinh(z) / ccosh(z)
.fi
.SH VERSIONS
These functions first appeared in glibc in version 2.1.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw27 lb lb
l l l.
Interface	Attribute	Value
T{
.BR ctanh (),
.BR ctanhf (),
.BR ctanhl ()
T}	Thread safety	MT-Safe
.TE

.SH CONFORMING TO
C99, POSIX.1-2001, POSIX.1-2008.
.SH SEE ALSO
.BR cabs (3),
.BR catanh (3),
.BR ccosh (3),
.BR csinh (3),
.BR complex (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1993 by Thomas Koenig (ig25@rz.uni-karlsruhe.de)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified Sat Jul 24 19:51:06 1993 by Rik Faith (faith@cs.unc.edu)
.TH CTERMID 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
ctermid \- get controlling terminal name
.SH SYNOPSIS
.nf
.B #include <stdio.h>
.\" POSIX also requires this function to be declared in <unistd.h>,
.\" and glibc does so if suitable feature test macros are defined.
.sp
.BI "char *ctermid(char *" "s" );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR ctermid ():
_POSIX_C_SOURCE\ >=\ 1 || _XOPEN_SOURCE || _POSIX_SOURCE
.\" From <unistd.h>: _XOPEN_SOURCE
.SH DESCRIPTION
.BR ctermid ()
returns a string which is the pathname for the current
controlling terminal for this process.
If
.I s
is NULL,
a static buffer is used, otherwise
.I s
points to a buffer used to hold the terminal pathname.
The symbolic constant
.B L_ctermid
is the maximum number of characters in the returned pathname.
.SH RETURN VALUE
The pointer to the pathname.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR ctermid ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
Svr4, POSIX.1-2001.
.SH BUGS
The path returned may not uniquely identify the controlling
terminal; it may, for example, be
.IR /dev/tty .
.PP
It is not assured that the program can open the terminal.
.\" in glibc 2.3.x, x >= 4, the glibc headers threw an error
.\" if ctermid() was given an argument; fixed in 2.4.
.SH SEE ALSO
.BR ttyname (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified Sat Jul 24 19:49:27 1993 by Rik Faith (faith@cs.unc.edu)
.\" Modified Fri Apr 26 12:38:55 MET DST 1996 by Martin Schulze (joey@linux.de)
.\" Modified 2001-11-13, aeb
.\" Modified 2001-12-13, joey, aeb
.\" Modified 2004-11-16, mtk
.\"
.TH CTIME 3 2015-04-19 "" "Linux Programmer's Manual"
.SH NAME
asctime, ctime, gmtime, localtime, mktime, asctime_r, ctime_r, gmtime_r,
localtime_r \- transform date and time to broken-down time or ASCII
.SH SYNOPSIS
.nf
.B #include <time.h>
.sp
.BI "char *asctime(const struct tm *" tm );
.br
.BI "char *asctime_r(const struct tm *" tm ", char *" buf );
.sp
.BI "char *ctime(const time_t *" timep );
.br
.BI "char *ctime_r(const time_t *" timep ", char *" buf );
.sp
.BI "struct tm *gmtime(const time_t *" timep );
.br
.BI "struct tm *gmtime_r(const time_t *" timep ", struct tm *" result );
.sp
.BI "struct tm *localtime(const time_t *" timep );
.br
.BI "struct tm *localtime_r(const time_t *" timep ", struct tm *" result );
.sp
.BI "time_t mktime(struct tm *" tm );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.ad l
.sp
.BR asctime_r (),
.BR ctime_r (),
.BR gmtime_r (),
.BR localtime_r ():
.RS
_POSIX_C_SOURCE\ >=\ 1 || _XOPEN_SOURCE || _BSD_SOURCE ||
_SVID_SOURCE || _POSIX_SOURCE
.RE
.ad
.SH DESCRIPTION
The
.BR ctime (),
.BR gmtime ()
and
.BR localtime ()
functions all take
an argument of data type \fItime_t\fP, which represents calendar time.
When interpreted as an absolute time value, it represents the number of
seconds elapsed since the Epoch, 1970-01-01 00:00:00 +0000 (UTC).
.PP
The
.BR asctime ()
and
.BR mktime ()
functions both take an argument
representing broken-down time, which is a representation
separated into year, month, day, and so on.
.PP
Broken-down time is stored
in the structure \fItm\fP, which is defined in \fI<time.h>\fP as follows:
.sp
.in +4n
.nf
struct tm {
    int tm_sec;    /* Seconds (0-60) */
    int tm_min;    /* Minutes (0-59) */
    int tm_hour;   /* Hours (0-23) */
    int tm_mday;   /* Day of the month (1-31) */
    int tm_mon;    /* Month (0-11) */
    int tm_year;   /* Year - 1900 */
    int tm_wday;   /* Day of the week (0-6, Sunday = 0) */
    int tm_yday;   /* Day in the year (0-365, 1 Jan = 0) */
    int tm_isdst;  /* Daylight saving time */
};
.fi
.in
.PP
The members of the \fItm\fP structure are:
.TP 10
.I tm_sec
The number of seconds after the minute, normally in the range 0 to 59,
but can be up to 60 to allow for leap seconds.
.TP
.I tm_min
The number of minutes after the hour, in the range 0 to 59.
.TP
.I tm_hour
The number of hours past midnight, in the range 0 to 23.
.TP
.I tm_mday
The day of the month, in the range 1 to 31.
.TP
.I tm_mon
The number of months since January, in the range 0 to 11.
.TP
.I tm_year
The number of years since 1900.
.TP
.I tm_wday
The number of days since Sunday, in the range 0 to 6.
.TP
.I tm_yday
The number of days since January 1, in the range 0 to 365.
.TP
.I tm_isdst
A flag that indicates whether daylight saving time is in effect at the
time described.
The value is positive if daylight saving time is in
effect, zero if it is not, and negative if the information is not
available.
.PP
The call
.BI ctime( t )
is equivalent to
.BI asctime(localtime( t )) \fR.
It converts the calendar time \fIt\fP into a
null-terminated string of the form
.sp
.RS
"Wed Jun 30 21:49:08 1993\\n"
.RE
.sp
The abbreviations for the days of the week are "Sun", "Mon", "Tue", "Wed",
"Thu", "Fri", and "Sat".
The abbreviations for the months are "Jan",
"Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", and
"Dec".
The return value points to a statically allocated string which
might be overwritten by subsequent calls to any of the date and time
functions.
The function also sets the external
variables \fItzname\fP, \fItimezone\fP, and \fIdaylight\fP (see
.BR tzset (3))
with information about the current timezone.
The reentrant version
.BR ctime_r ()
does the same, but stores the
string in a user-supplied buffer
which should have room for at least 26 bytes.
It need not
set \fItzname\fP, \fItimezone\fP, and \fIdaylight\fP.
.PP
The
.BR gmtime ()
function converts the calendar time \fItimep\fP to
broken-down time representation, expressed in Coordinated Universal Time
(UTC).
It may return NULL when the year does not fit into an integer.
The return value points to a statically allocated struct which might be
overwritten by subsequent calls to any of the date and time functions.
The
.BR gmtime_r ()
function does the same, but stores the data in a
user-supplied struct.
.PP
The
.BR localtime ()
function converts the calendar time \fItimep\fP to
broken-down time representation,
expressed relative to the user's specified timezone.
The function acts as if it called
.BR tzset (3)
and sets the external variables \fItzname\fP with
information about the current timezone, \fItimezone\fP with the difference
between Coordinated Universal Time (UTC) and local standard time in
seconds, and \fIdaylight\fP to a nonzero value if daylight savings
time rules apply during some part of the year.
The return value points to a statically allocated struct which might be
overwritten by subsequent calls to any of the date and time functions.
The
.BR localtime_r ()
function does the same, but stores the data in a
user-supplied struct.
It need not set \fItzname\fP, \fItimezone\fP, and \fIdaylight\fP.
.PP
The
.BR asctime ()
function converts the broken-down time value
\fItm\fP into a null-terminated string with the same format as
.BR ctime ().
The return value points to a statically allocated string which might be
overwritten by subsequent calls to any of the date and time functions.
The
.BR asctime_r ()
function does the same, but stores the string in
a user-supplied buffer which should have room for at least 26 bytes.
.PP
The
.BR mktime ()
function converts a broken-down time structure, expressed
as local time, to calendar time representation.
The function ignores
the values supplied by the caller in the
.I tm_wday
and
.I tm_yday
fields.
The value specified in the
.I tm_isdst
field informs
.BR mktime ()
whether or not daylight saving time (DST)
is in effect for the time supplied in the
.I tm
structure:
a positive value means DST is in effect;
zero means that DST is not in effect;
and a negative value means that
.BR mktime ()
should (use timezone information and system databases to)
attempt to determine whether DST is in effect at the specified time.

The
.BR mktime ()
function modifies the fields of the
.IR tm
structure as follows:
.I tm_wday
and
.I tm_yday
are set to values determined from the contents of the other fields;
if structure members are outside their valid interval, they will be
normalized (so that, for example, 40 October is changed into 9 November);
.I tm_isdst
is set (regardless of its initial value)
to a positive value or to 0, respectively,
to indicate whether DST is or is not in effect at the specified time.
Calling
.BR mktime ()
also sets the external variable \fItzname\fP with
information about the current timezone.

If the specified broken-down
time cannot be represented as calendar time (seconds since the Epoch),
.BR mktime ()
returns
.I (time_t)\ \-1
and does not alter the
members of the broken-down time structure.
.SH RETURN VALUE
Each of these functions returns the value described, or NULL
(\-1 in case of
.BR mktime ())
in case an error was detected.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw14 lb lbw31
l l l.
Interface	Attribute	Value
T{
.BR asctime ()
T}	Thread safety	MT-Unsafe race:asctime locale
T{
.BR asctime_r ()
T}	Thread safety	MT-Safe locale
T{
.BR ctime ()
T}	Thread safety	T{
MT-Unsafe race:tmbuf
.br
race:asctime env locale
T}
T{
.BR ctime_r (),
.BR gmtime_r (),
.BR localtime_r (),
.BR mktime ()
T}	Thread safety	MT-Safe env locale
T{
.BR gmtime (),
.BR localtime ()
T}	Thread safety	MT-Unsafe race:tmbuf env locale
.TE

.SH CONFORMING TO
POSIX.1-2001.
C89 and C99 specify
.BR asctime (),
.BR ctime (),
.BR gmtime (),
.BR localtime (),
and
.BR mktime ().
POSIX.1-2008 marks
.BR asctime (),
.BR asctime_r (),
.BR ctime (),
and
.BR ctime_r ()
as obsolete,
recommending the use of
.BR strftime (3)
instead.
.SH NOTES
The four functions
.BR asctime (),
.BR ctime (),
.BR gmtime ()
and
.BR localtime ()
return a pointer to static data and hence are not thread-safe.
The thread-safe versions,
.BR asctime_r (),
.BR ctime_r (),
.BR gmtime_r ()
and
.BR localtime_r (),
are specified by SUSv2.

POSIX.1-2001 says:
"The
.BR asctime (),
.BR ctime (),
.BR gmtime (),
and
.BR localtime ()
functions shall return values in one of two static objects:
a broken-down time structure and an array of type
.IR char .
Execution of any of the functions may overwrite the information returned
in either of these objects by any of the other functions."
This can occur in the glibc implementation.
.LP
In many implementations, including glibc, a 0 in
.I tm_mday
is interpreted as meaning the last day of the preceding month.
.LP
The glibc version of \fIstruct tm\fP has additional fields
.sp
.RS
.nf
long tm_gmtoff;           /* Seconds east of UTC */
const char *tm_zone;      /* Timezone abbreviation */
.fi
.RE
.sp
defined when
.B _BSD_SOURCE
was set before including
.IR <time.h> .
This is a BSD extension, present in 4.3BSD-Reno.

According to POSIX.1-2004,
.BR localtime ()
is required to behave as though
.BR tzset (3)
was called, while
.BR localtime_r ()
does not have this requirement.
.\" See http://thread.gmane.org/gmane.comp.time.tz/2034/
For portable code,
.BR tzset (3)
should be called before
.BR localtime_r ().
.SH SEE ALSO
.BR date (1),
.BR gettimeofday (2),
.BR time (2),
.BR utime (2),
.BR clock (3),
.BR difftime (3),
.BR strftime (3),
.BR strptime (3),
.BR timegm (3),
.BR tzset (3),
.BR time (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" %%%LICENSE_START(BSD_4_CLAUSE_UCB)
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\" %%%LICENSE_END
.\"
.\"	@(#)daemon.3	8.1 (Berkeley) 6/9/93
.\" Added mentioning of glibc weirdness wrt unistd.h. 5/11/98, Al Viro
.TH DAEMON 3 2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
daemon \- run in the background
.SH SYNOPSIS
.B #include <unistd.h>
.sp
.BI "int daemon(int " nochdir ", int " noclose );
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR daemon ():
_BSD_SOURCE || (_XOPEN_SOURCE && _XOPEN_SOURCE\ <\ 500)
.SH DESCRIPTION
The
.BR daemon ()
function is for programs wishing to detach themselves from the
controlling terminal and run in the background as system daemons.
.PP
If
.I nochdir
is zero,
.BR daemon ()
changes the calling process's current working directory
to the root directory ("/");
otherwise, the current working directory is left unchanged.
.PP
If
.I noclose
is zero,
.BR daemon ()
redirects standard input, standard output and standard error
to
.IR /dev/null ;
otherwise, no changes are made to these file descriptors.
.SH RETURN VALUE
(This function forks, and if the
.BR fork (2)
succeeds, the parent calls
.\" not .IR in order not to underline _
.BR _exit (2),
so that further errors are seen by the child only.)
On success
.BR daemon ()
returns zero.
If an error occurs,
.BR daemon ()
returns \-1 and sets
.I errno
to any of the errors specified for the
.BR fork (2)
and
.BR setsid (2).
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR daemon ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
Not in POSIX.1-2001.
A similar function appears on the BSDs.
The
.BR daemon ()
function first appeared in 4.4BSD.
.SH NOTES
The glibc implementation can also return \-1 when
.I /dev/null
exists but is not a character device with the expected
major and minor numbers.
In this case,
.I errno
need not be set.
.SH SEE ALSO
.BR fork (2),
.BR setsid (2)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1990, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" %%%LICENSE_START(BSD_4_CLAUSE_UCB)
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\" %%%LICENSE_END
.\"
.\"	@(#)dbopen.3	8.5 (Berkeley) 1/2/94
.\"
.TH DBOPEN 3 2012-05-04 "" "Linux Programmer's Manual"
.UC 7
.SH NAME
dbopen \- database access methods
.SH SYNOPSIS
.nf
.B #include <sys/types.h>
.B #include <limits.h>
.B #include <db.h>
.B #include <fcntl.h>

.BI "DB *dbopen(const char *" file ", int " flags ", int " mode \
", DBTYPE " type ,
.BI "           const void *" openinfo );
.fi
.SH DESCRIPTION
.IR "Note well" :
This page documents interfaces provided in glibc up until version 2.1.
Since version 2.2, glibc no longer provides these interfaces.
Probably, you are looking for the APIs provided by the
.I libdb
library instead.

.BR dbopen ()
is the library interface to database files.
The supported file formats are btree, hashed and UNIX file oriented.
The btree format is a representation of a sorted, balanced tree structure.
The hashed format is an extensible, dynamic hashing scheme.
The flat-file format is a byte stream file with fixed or variable length
records.
The formats and file-format-specific information are described in detail
in their respective manual pages
.BR btree (3),
.BR hash (3),
and
.BR recno (3).
.PP
.BR dbopen ()
opens
.I file
for reading and/or writing.
Files never intended to be preserved on disk may be created by setting
the
.I file
argument to NULL.
.PP
The
.I flags
and
.I mode
arguments are as specified to the
.BR open (2)
routine, however, only the
.BR O_CREAT ,
.BR O_EXCL ,
.BR O_EXLOCK ,
.BR O_NONBLOCK ,
.BR O_RDONLY ,
.BR O_RDWR ,
.BR O_SHLOCK ,
and
.B O_TRUNC
flags are meaningful.
(Note, opening a database file
.B O_WRONLY
is not possible.)
.\"Three additional options may be specified by ORing
.\"them into the
.\".I flags
.\"argument.
.\".TP
.\"DB_LOCK
.\"Do the necessary locking in the database to support concurrent access.
.\"If concurrent access isn't needed or the database is read-only this
.\"flag should not be set, as it tends to have an associated performance
.\"penalty.
.\".TP
.\"DB_SHMEM
.\"Place the underlying memory pool used by the database in shared
.\"memory.
.\"Necessary for concurrent access.
.\".TP
.\"DB_TXN
.\"Support transactions in the database.
.\"The DB_LOCK and DB_SHMEM flags must be set as well.
.PP
The
.I type
argument is of type
.I DBTYPE
(as defined in the
.I <db.h>
include file) and
may be set to
.BR DB_BTREE ,
.BR DB_HASH ,
or
.BR DB_RECNO .
.PP
The
.I openinfo
argument is a pointer to an access-method-specific structure described
in the access method's manual page.
If
.I openinfo
is NULL, each access method will use defaults appropriate for the system
and the access method.
.PP
.BR dbopen ()
returns a pointer to a
.I DB
structure on success and NULL on error.
The
.I DB
structure is defined in the
.I <db.h>
include file, and contains at
least the following fields:
.sp
.in +4n
.nf
typedef struct {
    DBTYPE type;
    int (*close)(const DB *db);
    int (*del)(const DB *db, const DBT *key, unsigned int flags);
    int (*fd)(const DB *db);
    int (*get)(const DB *db, DBT *key, DBT *data,
               unsigned int flags);
    int (*put)(const DB *db, DBT *key, const DBT *data,
               unsigned int flags);
    int (*sync)(const DB *db, unsigned int flags);
    int (*seq)(const DB *db, DBT *key, DBT *data,
               unsigned int flags);
} DB;
.fi
.in
.PP
These elements describe a database type and a set of functions performing
various actions.
These functions take a pointer to a structure as returned by
.BR dbopen (),
and sometimes one or more pointers to key/data structures and a flag value.
.TP
.I type
The type of the underlying access method (and file format).
.TP
.I close
A pointer to a routine to flush any cached information to disk, free any
allocated resources, and close the underlying file(s).
Since key/data pairs may be cached in memory, failing to sync the file
with a
.I close
or
.I sync
function may result in inconsistent or lost information.
.I close
routines return \-1 on error (setting
.IR errno )
and 0 on success.
.TP
.I del
A pointer to a routine to remove key/data pairs from the database.
.IP
The argument
.I flag
may be set to the following value:
.RS
.TP
.B R_CURSOR
Delete the record referenced by the cursor.
The cursor must have previously been initialized.
.RE
.IP
.I delete
routines return \-1 on error (setting
.IR errno ),
0 on success, and 1 if the specified
.I key
was not in the file.
.TP
.I fd
A pointer to a routine which returns a file descriptor representative
of the underlying database.
A file descriptor referencing the same file will be returned to all
processes which call
.BR dbopen ()
with the same
.I file
name.
This file descriptor may be safely used as an argument to the
.BR fcntl (2)
and
.BR flock (2)
locking functions.
The file descriptor is not necessarily associated with any of the
underlying files used by the access method.
No file descriptor is available for in memory databases.
.I fd
routines return \-1 on error (setting
.IR errno ),
and the file descriptor on success.
.TP
.I get
A pointer to a routine which is the interface for keyed retrieval from
the database.
The address and length of the data associated with the specified
.I key
are returned in the structure referenced by
.IR data .
.I get
routines return \-1 on error (setting
.IR errno ),
0 on success, and 1 if the
.I key
was not in the file.
.TP
.I put
A pointer to a routine to store key/data pairs in the database.
.IP
The argument
.I flag
may be set to one of the following values:
.RS
.TP
.B R_CURSOR
Replace the key/data pair referenced by the cursor.
The cursor must have previously been initialized.
.TP
.B R_IAFTER
Append the data immediately after the data referenced by
.IR key ,
creating a new key/data pair.
The record number of the appended key/data pair is returned in the
.I key
structure.
(Applicable only to the
.B DB_RECNO
access method.)
.TP
.B R_IBEFORE
Insert the data immediately before the data referenced by
.IR key ,
creating a new key/data pair.
The record number of the inserted key/data pair is returned in the
.I key
structure.
(Applicable only to the
.B DB_RECNO
access method.)
.TP
.B R_NOOVERWRITE
Enter the new key/data pair only if the key does not previously exist.
.TP
.B R_SETCURSOR
Store the key/data pair, setting or initializing the position of the
cursor to reference it.
(Applicable only to the
.B DB_BTREE
and
.B DB_RECNO
access methods.)
.RE
.IP
.B R_SETCURSOR
is available only for the
.B DB_BTREE
and
.B DB_RECNO
access
methods because it implies that the keys have an inherent order
which does not change.
.IP
.B R_IAFTER
and
.B R_IBEFORE
are available only for the
.B DB_RECNO
access method because they each imply that the access method is able to
create new keys.
This is true only if the keys are ordered and independent, record numbers
for example.
.IP
The default behavior of the
.I put
routines is to enter the new key/data pair, replacing any previously
existing key.
.IP
.I put
routines return \-1 on error (setting
.IR errno ),
0 on success, and 1 if the
.B R_NOOVERWRITE
.I flag
was set and the key already exists in the file.
.TP
.I seq
A pointer to a routine which is the interface for sequential
retrieval from the database.
The address and length of the key are returned in the structure
referenced by
.IR key ,
and the address and length of the data are returned in the
structure referenced
by
.IR data .
.IP
Sequential key/data pair retrieval may begin at any time, and the
position of the "cursor" is not affected by calls to the
.IR del ,
.IR get ,
.IR put ,
or
.I sync
routines.
Modifications to the database during a sequential scan will be reflected
in the scan, that is,
records inserted behind the cursor will not be returned
while records inserted in front of the cursor will be returned.
.IP
The flag value
.B must
be set to one of the following values:
.RS
.TP
.B R_CURSOR
The data associated with the specified key is returned.
This differs from the
.I get
routines in that it sets or initializes the cursor to the location of
the key as well.
(Note, for the
.B DB_BTREE
access method, the returned key is not necessarily an
exact match for the specified key.
The returned key is the smallest key greater than or equal to the specified
key, permitting partial key matches and range searches.)
.TP
.B R_FIRST
The first key/data pair of the database is returned, and the cursor
is set or initialized to reference it.
.TP
.B R_LAST
The last key/data pair of the database is returned, and the cursor
is set or initialized to reference it.
(Applicable only to the
.B DB_BTREE
and
.B DB_RECNO
access methods.)
.TP
.B R_NEXT
Retrieve the key/data pair immediately after the cursor.
If the cursor is not yet set, this is the same as the
.B R_FIRST
flag.
.TP
.B R_PREV
Retrieve the key/data pair immediately before the cursor.
If the cursor is not yet set, this is the same as the
.B R_LAST
flag.
(Applicable only to the
.B DB_BTREE
and
.B DB_RECNO
access methods.)
.RE
.IP
.B R_LAST
and
.B R_PREV
are available only for the
.B DB_BTREE
and
.B DB_RECNO
access methods because they each imply that the keys have an inherent
order which does not change.
.IP
.I seq
routines return \-1 on error (setting
.IR errno ),
0 on success and 1 if there are no key/data pairs less than or greater
than the specified or current key.
If the
.B DB_RECNO
access method is being used, and if the database file
is a character special file and no complete key/data pairs are currently
available, the
.I seq
routines return 2.
.TP
.I sync
A pointer to a routine to flush any cached information to disk.
If the database is in memory only, the
.I sync
routine has no effect and will always succeed.
.IP
The flag value may be set to the following value:
.RS
.TP
.B R_RECNOSYNC
If the
.B DB_RECNO
access method is being used, this flag causes
the sync routine to apply to the btree file which underlies the
recno file, not the recno file itself.
(See the
.I bfname
field of the
.BR recno (3)
manual page for more information.)
.RE
.IP
.I sync
routines return \-1 on error (setting
.IR errno )
and 0 on success.
.SS Key/data pairs
Access to all file types is based on key/data pairs.
Both keys and data are represented by the following data structure:
.in +4n
.nf

typedef struct {
    void  *data;
    size_t size;
} DBT;
.fi
.in
.PP
The elements of the
.I DBT
structure are defined as follows:
.TP
.I data
A pointer to a byte string.
.TP
.I size
The length of the byte string.
.PP
Key and data byte strings may reference strings of essentially unlimited
length although any two of them must fit into available memory at the same
time.
It should be noted that the access methods provide no guarantees about
byte string alignment.
.SH ERRORS
The
.BR dbopen ()
routine may fail and set
.I errno
for any of the errors specified for the library routines
.BR open (2)
and
.BR malloc (3)
or the following:
.TP
.B EFTYPE
A file is incorrectly formatted.
.TP
.B EINVAL
A parameter has been specified (hash function, pad byte, etc.) that is
incompatible with the current file specification or which is not
meaningful for the function (for example, use of the cursor without
prior initialization) or there is a mismatch between the version
number of file and the software.
.PP
The
.I close
routines may fail and set
.I errno
for any of the errors specified for the library routines
.BR close (2),
.BR read (2),
.BR write (2),
.BR free (3),
or
.BR fsync (2).
.PP
The
.IR del ,
.IR get ,
.IR put ,
and
.I seq
routines may fail and set
.I errno
for any of the errors specified for the library routines
.BR read (2),
.BR write (2),
.BR free (3)
or
.BR malloc (3).
.PP
The
.I fd
routines will fail and set
.I errno
to
.B ENOENT
for in memory databases.
.PP
The
.I sync
routines may fail and set
.I errno
for any of the errors specified for the library routine
.BR fsync (2).
.SH BUGS
The typedef
.I DBT
is a mnemonic for "data base thang", and was used
because no-one could think of a reasonable name that wasn't already used.
.PP
The file descriptor interface is a kludge and will be deleted in a
future version of the interface.
.PP
None of the access methods provide any form of concurrent access,
locking, or transactions.
.SH SEE ALSO
.BR btree (3),
.BR hash (3),
.BR mpool (3),
.BR recno (3)

.IR "LIBTP: Portable, Modular Transactions for UNIX" ,
Margo Seltzer, Michael Olson, USENIX proceedings, Winter 1992.
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" @(#)des_crypt.3	2.1 88/08/11 4.0 RPCSRC; from 1.16 88/03/02 SMI;
.\"
.\" Taken from libc4 sources, which say:
.\" Copyright (C) 1993 Eric Young - can be distributed under GPL.
.\"
.\" However, the above header line suggests that this file in fact is
.\" Copyright Sun Microsystems, Inc (and is provided for unrestricted use,
.\" see other Sun RPC sources).
.\"
.\" %%%LICENSE_START(GPL_NOVERSION_ONELINE)
.\" can be distributed under GPL.
.\" %%%LICENSE_END
.\"
.TH DES_CRYPT 3  2015-03-02 "" "Linux Programmer's Manual"
.SH NAME
des_crypt, ecb_crypt, cbc_crypt, des_setparity, DES_FAILED \- fast
DES encryption
.SH SYNOPSIS
.nf
.\" Sun version
.\" .B #include <des_crypt.h>
.B #include <rpc/des_crypt.h>
.LP
.BI "int ecb_crypt(char *" key ", char *" data ", unsigned " datalen ,
.BI "              unsigned " mode );
.LP
.BI "int cbc_crypt(char *" key ", char *" data ", unsigned " datalen ,
.BI "              unsigned " mode ", char *" ivec );
.LP
.BI "void des_setparity(char *" key );
.LP
.BI "int DES_FAILED(int " status );
.fi
.SH DESCRIPTION
.BR ecb_crypt ()
and
.BR cbc_crypt ()
implement the
NBS
DES
(Data Encryption Standard).
These routines are faster and more general purpose than
.BR crypt (3).
They also are able to utilize
DES
hardware if it is available.
.BR ecb_crypt ()
encrypts in
ECB
(Electronic Code Book)
mode, which encrypts blocks of data independently.
.BR cbc_crypt ()
encrypts in
CBC
(Cipher Block Chaining)
mode, which chains together
successive blocks.
CBC
mode protects against insertions, deletions and
substitutions of blocks.
Also, regularities in the clear text will
not appear in the cipher text.
.LP
Here is how to use these routines.
The first argument,
.IR key ,
is the 8-byte encryption key with parity.
To set the key's parity, which for
DES
is in the low bit of each byte, use
.BR des_setparity ().
The second argument,
.IR data ,
contains the data to be encrypted or decrypted.
The
third argument,
.IR datalen ,
is the length in bytes of
.IR data ,
which must be a multiple of 8.
The fourth argument,
.IR mode ,
is formed by ORing together some things.
For the encryption direction OR in either
.BR DES_ENCRYPT
or
.BR DES_DECRYPT .
For software versus hardware
encryption, OR in either
.BR DES_HW
or
.BR DES_SW .
If
.BR DES_HW
is specified, and there is no hardware, then the encryption is performed
in software and the routine returns
.BR DESERR_NOHWDEVICE .
For
.BR cbc_crypt (),
the argument
.I ivec
is the 8-byte initialization
vector for the chaining.
It is updated to the next initialization
vector upon return.
.SH RETURN VALUE
.PD 0
.TP 20
.BR DESERR_NONE
No error.
.TP
.BR DESERR_NOHWDEVICE
Encryption succeeded, but done in software instead of the requested hardware.
.TP
.BR DESERR_HWERROR
An error occurred in the hardware or driver.
.TP
.BR DESERR_BADPARAM
Bad argument to routine.
.PD
.LP
Given a result status
.IR stat ,
the macro
.\" .BR DES_FAILED\c
.\" .BR ( stat )
.BI DES_FAILED( stat )
is false only for the first two statuses.
.\" So far the Sun page
.\" Some additions - aeb
.SH VERSIONS
These functions are present in
glibc 2.1 and later.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw25 lb lb
l l l.
Interface	Attribute	Value
T{
.BR ecb_crypt (),
.BR cbc_crypt (),
.BR des_setparity ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
4.3BSD.
Not in POSIX.1-2001.
.SH SEE ALSO
.BR des (1),
.BR crypt (3),
.BR xcrypt (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified Sat Jul 24 19:48:17 1993 by Rik Faith (faith@cs.unc.edu)
.TH DIFFTIME 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
difftime \- calculate time difference
.SH SYNOPSIS
.nf
.B #include <time.h>
.sp
.BI "double difftime(time_t " time1 ", time_t " time0 );
.fi
.SH DESCRIPTION
The
.BR difftime ()
function returns the number of seconds elapsed
between time \fItime1\fP and time \fItime0\fP, represented as a
.IR double .
Each of the times is specified in calendar time, which means its
value is a measurement (in seconds) relative to the
Epoch, 1970-01-01 00:00:00 +0000 (UTC).
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR difftime ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
SVr4, 4.3BSD, C89, C99.
.SH NOTES
On a POSIX system,
.I time_t
is an arithmetic type, and one could just
define
.RS
.nf

#define difftime(t1,t0) (double)(t1 \- t0)

.fi
.RE
when the possible overflow in the subtraction is not a concern.
.SH SEE ALSO
.BR date (1),
.BR gettimeofday (2),
.BR time (2),
.BR ctime (3),
.BR gmtime (3),
.BR localtime (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2002 Andries Brouwer (aeb@cwi.nl)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH DIRFD 3 2015-03-02 "Linux" "Linux Programmer's Manual"
.SH NAME
dirfd \- get directory stream file descriptor
.SH SYNOPSIS
.B #include <sys/types.h>
.br
.B #include <dirent.h>
.sp
.BI "int dirfd(DIR *" dirp );
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR dirfd ():
.br
.RS 4
.PD 0
.ad l
_BSD_SOURCE || _SVID_SOURCE
.br
|| /* Since glibc 2.10: */
.RS 4
(_POSIX_C_SOURCE\ >=\ 200809L || _XOPEN_SOURCE\ >=\ 700)
.RE
.PD
.RE
.ad
.SH DESCRIPTION
The function
.BR dirfd ()
returns the file descriptor associated with the directory stream
.IR dirp .
.LP
This descriptor is the one used internally by the directory stream.
As a result, it is useful only for functions which do not depend on
or alter the file position, such as
.BR fstat (2)
and
.BR fchdir (2).
It will be automatically closed when
.BR closedir (3)
is called.
.SH RETURN VALUE
On success, a nonnegative file descriptor is returned.
On error, \-1 is returned, and
.I errno
is set to indicate the cause of the error.
.SH ERRORS
POSIX.1-2008 specifies two errors,
neither of which is returned by the current
.\" glibc 2.8
implementation.
.TP
.B EINVAL
.I dirp
does not refer to a valid directory stream.
.TP
.B ENOTSUP
The implementation does not support the association of a file
descriptor with a directory.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR dirfd ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
POSIX.1-2008.
This function was a BSD extension, present in 4.3BSD-Reno, not in 4.2BSD.
.\" It is present in libc5 (since 5.1.2) and in glibc2.
.SH NOTES
The prototype for
.BR dirfd ()
is available only if
.B _BSD_SOURCE
or
.B _SVID_SOURCE
is defined.
.SH SEE ALSO
.BR open (2),
.BR closedir (3),
.BR opendir (3),
.BR readdir (3),
.BR rewinddir (3),
.BR scandir (3),
.BR seekdir (3),
.BR telldir (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\"
.\" Modified 1993-03-29, David Metcalfe
.\" Modified 1993-07-24, Rik Faith (faith@cs.unc.edu)
.\" Modified 2002-08-10, 2003-11-01 Walter Harms, aeb
.\"
.TH DIV 3 2015-03-02 "" "Linux Programmer's Manual"
.SH NAME
div, ldiv, lldiv, imaxdiv \- compute quotient and remainder of
an integer division
.SH SYNOPSIS
.nf
.B #include <stdlib.h>
.sp
.BI "div_t div(int " numerator ", int " denominator );
.br
.BI "ldiv_t ldiv(long " numerator ", long " denominator );
.br
.BI "lldiv_t lldiv(long long " numerator ", long long " denominator );
.sp
.B #include <inttypes.h>
.sp
.BI "imaxdiv_t imaxdiv(intmax_t " numerator ", intmax_t " denominator );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.ad l
.sp
.BR lldiv ():
.RS 4
_XOPEN_SOURCE\ >=\ 600 || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.ad
.SH DESCRIPTION
The
.BR div ()
function computes the value
\fInumerator\fP/\fIdenominator\fP and
returns the quotient and remainder in a structure
named \fIdiv_t\fP that contains
two integer members (in unspecified order) named \fIquot\fP and \fIrem\fP.
The quotient is rounded toward zero.
The result satisfies \fIquot\fP*\fIdenominator\fP+\fIrem\fP = \fInumerator\fP.
.LP
The
.BR ldiv (),
.BR lldiv (),
and
.BR imaxdiv ()
functions do the same,
dividing numbers of the indicated type and
returning the result in a structure
of the indicated name, in all cases with fields \fIquot\fP and \fIrem\fP
of the same type as the function arguments.
.SH RETURN VALUE
The \fIdiv_t\fP (etc.) structure.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw33 lb lb
l l l.
Interface	Attribute	Value
T{
.BR div (),
.BR ldiv (),
.BR lldiv (),
.BR imaxdiv ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
SVr4, 4.3BSD, C89. C99.
The functions
.BR lldiv ()
and
.BR imaxdiv ()
were added in C99.
.SH EXAMPLE
After
.nf

        div_t q = div(\-5, 3);

.fi
the values \fIq.quot\fP and \fIq.rem\fP are \-1 and \-2, respectively.
.SH SEE ALSO
.BR abs (3),
.BR remainder (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2003 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH DL_ITERATE_PHDR 3 2007-05-18 "GNU" "Linux Programmer's Manual"
.SH NAME
dl_iterate_phdr \- walk through list of shared objects
.SH SYNOPSIS
.nf
.BR "#define _GNU_SOURCE" "         /* See feature_test_macros(7) */"
.B #include <link.h>

.BI "int dl_iterate_phdr("
.BI "          int (*" callback ") (struct dl_phdr_info *" info ,
.BI "                           size_t " size ", void *" data "),"
.BI "          void *" data ");"
.fi
.SH DESCRIPTION
The
.BR dl_iterate_phdr ()
function allows an application to inquire at run time to find
out which shared objects it has loaded.

The
.BR dl_iterate_phdr ()
function walks through the list of an
application's shared objects and calls the function
.I callback
once for each object,
until either all shared objects have been processed or
.I callback
returns a nonzero value.

Each call to
.I callback
receives three arguments:
.IR info ,
which is a pointer to a structure containing information
about the shared object;
.IR size ,
which is the size of the structure pointed to by
.IR info ;
and
.IR data ,
which is a copy of whatever value was passed by the calling
program as the second argument (also named
.IR data )
in the call to
.BR dl_iterate_phdr ().

The
.I info
argument is a structure of the following type:

.in +4n
.nf
struct dl_phdr_info {
    ElfW(Addr)        dlpi_addr;  /* Base address of object */
    const char       *dlpi_name;  /* (Null-terminated) name of
                                     object */
    const ElfW(Phdr) *dlpi_phdr;  /* Pointer to array of
                                     ELF program headers
                                     for this object */
    ElfW(Half)        dlpi_phnum; /* # of items in \fIdlpi_phdr\fP */
};
.fi
.in

(The
.IR ElfW ()
macro definition turns its argument into the name of an ELF data
type suitable for the hardware architecture.
For example, on a 32-bit platform,
ElfW(Addr) yields the data type name Elf32_Addr.
Further information on these types can be found in the
.IR <elf.h> " and " <link.h>
header files.)

The
.I dlpi_addr
field indicates the base address of the shared object
(i.e., the difference between the virtual memory address of
the shared object and the offset of that object in the file
from which it was loaded).
The
.I dlpi_name
field is a null-terminated string giving the pathname
from which the shared object was loaded.

To understand the meaning of the
.I dlpi_phdr
and
.I dlpi_phnum
fields, we need to be aware that an ELF shared object consists
of a number of segments, each of which has a corresponding
program header describing the segment.
The
.I dlpi_phdr
field is a pointer to an array of the program headers for this
shared object.
The
.I dlpi_phnum
field indicates the size of this array.

These program headers are structures of the following form:
.in +4n
.nf

typedef struct {
    Elf32_Word  p_type;    /* Segment type */
    Elf32_Off   p_offset;  /* Segment file offset */
    Elf32_Addr  p_vaddr;   /* Segment virtual address */
    Elf32_Addr  p_paddr;   /* Segment physical address */
    Elf32_Word  p_filesz;  /* Segment size in file */
    Elf32_Word  p_memsz;   /* Segment size in memory */
    Elf32_Word  p_flags;   /* Segment flags */
    Elf32_Word  p_align;   /* Segment alignment */
} Elf32_Phdr;
.fi
.in

Note that we can calculate the location of a particular program header,
.IR x ,
in virtual memory using the formula:

.nf
  addr == info\->dlpi_addr + info\->dlpi_phdr[x].p_vaddr;
.fi
.SH RETURN VALUE
The
.BR dl_iterate_phdr ()
function returns whatever value was returned by the last call to
.IR callback .
.SH VERSIONS
.BR dl_iterate_phdr ()
has been supported in glibc since version 2.2.4.
.SH CONFORMING TO
The
.BR dl_iterate_phdr ()
function is Linux-specific and should be avoided in portable applications.
.SH EXAMPLE
The following program displays a list of pathnames of the
shared objects it has loaded.
For each shared object, the program lists the virtual addresses
at which the object's ELF segments are loaded.

.nf
#define _GNU_SOURCE
#include <link.h>
#include <stdlib.h>
#include <stdio.h>

static int
callback(struct dl_phdr_info *info, size_t size, void *data)
{
    int j;

    printf("name=%s (%d segments)\\n", info\->dlpi_name,
        info\->dlpi_phnum);

    for (j = 0; j < info\->dlpi_phnum; j++)
         printf("\\t\\t header %2d: address=%10p\\n", j,
             (void *) (info\->dlpi_addr + info\->dlpi_phdr[j].p_vaddr));
    return 0;
}

int
main(int argc, char *argv[])
{
    dl_iterate_phdr(callback, NULL);

    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR ldd (1),
.BR objdump (1),
.BR readelf (1),
.BR dlopen (3),
.BR elf (5),
.BR ld.so (8)

.IR "Executable and Linking Format Specification" ,
available at various locations online.
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1995 Yggdrasil Computing, Incorporated.
.\" written by Adam J. Richter (adam@yggdrasil.com),
.\" with typesetting help from Daniel Quinlan (quinlan@yggdrasil.com).
.\" and Copyright 2003 Michael Kerrisk (mtk.manpages@gmail.com).
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.\" Modified by David A. Wheeler <dwheeler@dwheeler.com> 2000-11-28.
.\" Applied patch by Terran Melconian, aeb, 2001-12-14.
.\" Modified by Hacksaw <hacksaw@hacksaw.org> 2003-03-13.
.\" Modified by Matt Domsch, 2003-04-09: _init and _fini obsolete
.\" Modified by Michael Kerrisk <mtk.manpages@gmail.com> 2003-05-16.
.\" Modified by Walter Harms: dladdr, dlvsym
.\" Modified by Petr Baudis <pasky@suse.cz>, 2008-12-04: dladdr caveat
.\"
.TH DLOPEN 3 2015-03-29 "Linux" "Linux Programmer's Manual"
.SH NAME
dladdr, dlclose, dlerror, dlopen, dlsym, dlvsym \- programming interface to
dynamic linking loader
.SH SYNOPSIS
.B #include <dlfcn.h>
.sp
.BI "void *dlopen(const char *" filename ", int " flags );
.sp
.B "char *dlerror(void);"
.sp
.BI "void *dlsym(void *" handle ", const char *" symbol );
.sp
.BI "int dlclose(void *" handle );
.sp
Link with \fI\-ldl\fP.
.SH DESCRIPTION
The four functions
.BR dlopen (),
.BR dlsym (),
.BR dlclose (),
.BR dlerror ()
implement the interface to the dynamic linking loader.
.SS dlerror()
The function
.BR dlerror ()
returns a human-readable string describing the most recent error
that occurred from
.BR dlopen (),
.BR dlsym ()
or
.BR dlclose ()
since the last call to
.BR dlerror ().
It returns NULL if no errors have occurred since initialization or since
it was last called.
.SS dlopen()
The function
.BR dlopen ()
loads the dynamic library file named by the null-terminated
string
.I filename
and returns an opaque "handle" for the dynamic library.
If
.I filename
is NULL, then the returned handle is for the main program.
If
.I filename
contains a slash ("/"), then it is interpreted as a (relative
or absolute) pathname.
Otherwise, the dynamic linker searches for the library as follows
(see
.BR ld.so (8)
for further details):
.IP o 4
(ELF only) If the executable file for the calling program
contains a DT_RPATH tag, and does not contain a DT_RUNPATH tag,
then the directories listed in the DT_RPATH tag are searched.
.IP o
If, at the time that the program was started, the environment variable
.B LD_LIBRARY_PATH
was defined to contain a colon-separated list of directories,
then these are searched.
(As a security measure this variable is ignored for set-user-ID and
set-group-ID programs.)
.IP o
(ELF only) If the executable file for the calling program
contains a DT_RUNPATH tag, then the directories listed in that tag
are searched.
.IP o
The cache file
.I /etc/ld.so.cache
(maintained by
.BR ldconfig (8))
is checked to see whether it contains an entry for
.IR filename .
.IP o
The directories
.I /lib
and
.I /usr/lib
are searched (in that order).
.PP
If the library has dependencies on other shared libraries,
then these are also automatically loaded by the dynamic linker
using the same rules.
(This process may occur recursively,
if those libraries in turn have dependencies, and so on.)
.PP
One of the following two values must be included in
.IR flags :
.TP
.B RTLD_LAZY
Perform lazy binding.
Only resolve symbols as the code that references them is executed.
If the symbol is never referenced, then it is never resolved.
(Lazy binding is performed only for function references;
references to variables are always immediately bound when
the library is loaded.)
.TP
.B RTLD_NOW
If this value is specified, or the environment variable
.B LD_BIND_NOW
is set to a nonempty string,
all undefined symbols in the library are resolved before
.BR dlopen ()
returns.
If this cannot be done, an error is returned.
.PP
Zero or more of the following values may also be ORed in
.IR flags :
.TP
.B RTLD_GLOBAL
The symbols defined by this library will be
made available for symbol resolution of subsequently loaded libraries.
.TP
.B RTLD_LOCAL
This is the converse of
.BR RTLD_GLOBAL ,
and the default if neither flag is specified.
Symbols defined in this library are not made available to resolve
references in subsequently loaded libraries.
.TP
.BR RTLD_NODELETE " (since glibc 2.2)"
Do not unload the library during
.BR dlclose ().
Consequently, the library's static variables are not reinitialized
if the library is reloaded with
.BR dlopen ()
at a later time.
This flag is not specified in POSIX.1-2001.
.\" (But it is present on Solaris.)
.TP
.BR RTLD_NOLOAD " (since glibc 2.2)"
Don't load the library.
This can be used to test if the library is already resident
.RB ( dlopen ()
returns NULL if it is not, or the library's handle if it is resident).
This flag can also be used to promote the flags on a library
that is already loaded.
For example, a library that was previously loaded with
.B RTLD_LOCAL
can be reopened with
.BR RTLD_NOLOAD\ |\ RTLD_GLOBAL .
This flag is not specified in POSIX.1-2001.
.\" (But it is present on Solaris.)
.\"
.TP
.BR RTLD_DEEPBIND " (since glibc 2.3.4)"
.\" Inimitably described by UD in
.\" http://sources.redhat.com/ml/libc-hacker/2004-09/msg00083.html.
Place the lookup scope of the symbols in this
library ahead of the global scope.
This means that a self-contained library will use
its own symbols in preference to global symbols with the same name
contained in libraries that have already been loaded.
This flag is not specified in POSIX.1-2001.
.PP
If
.I filename
is NULL, then the returned handle is for the main program.
When given to
.BR dlsym (),
this handle causes a search for a symbol in the main program,
followed by all shared libraries loaded at program startup,
and then all shared libraries loaded by
.BR dlopen ()
with the flag
.BR RTLD_GLOBAL .
.PP
External references in the library are resolved using the libraries
in that library's dependency list and any other libraries previously
opened with the
.B RTLD_GLOBAL
flag.
If the executable was linked with the flag "\-rdynamic"
(or, synonymously, "\-\-export\-dynamic"),
then the global symbols in the executable will also be used
to resolve references in a dynamically loaded library.
.PP
If the same library is loaded again with
.BR dlopen (),
the same library handle is returned.
The dl library maintains reference
counts for library handles, so a dynamic library is not
deallocated until
.BR dlclose ()
has been called on it as many times as
.BR dlopen ()
has succeeded on it.
The
.BR _init ()
routine, if present, is called only once.
But a subsequent call with
.B RTLD_NOW
may force symbol resolution for a library earlier loaded with
.BR RTLD_LAZY .
.PP
If
.BR dlopen ()
fails for any reason, it returns NULL.
.SS dlsym()
The function
.BR dlsym ()
takes a "handle" of a dynamic library returned by
.BR dlopen ()
and the
null-terminated symbol name, returning the address where that symbol is
loaded into memory.
If the symbol is not found, in the specified
library or any of the libraries that were automatically loaded by
.BR dlopen ()
when that library was loaded,
.BR dlsym ()
returns NULL.
(The search performed by
.BR dlsym ()
is breadth first through the dependency tree of these libraries.)
Since the value of the symbol could actually be NULL (so that a
NULL return from
.BR dlsym ()
need not indicate an error), the correct way to test for an error
is to call
.BR dlerror ()
to clear any old error conditions, then call
.BR dlsym (),
and then call
.BR dlerror ()
again, saving its return value into a variable, and check whether
this saved value is not NULL.
.PP
There are two special pseudo-handles:
.TP
.B RTLD_DEFAULT
Find the first occurrence of the desired symbol
using the default library search order.
The search will include global symbols in the executable
and its dependencies,
as well as symbols in libraries that were dynamically loaded with the
.BR RTLD_GLOBAL
flag.
.TP
.BR RTLD_NEXT
Find the next occurrence of the desired symbol in the search order
after the current library.
This allows one to provide a wrapper
around a function in another shared library, so that, for example,
the definition of a function in a preloaded library
(see
.B LD_PRELOAD
in
.BR ld.so (8))
can find and invoke the "real" function provided in another library
(or for that matter, the "next" definition of the function in cases
where there are multiple layers of preloading).
.SS dlclose()
The function
.BR dlclose ()
decrements the reference count on the dynamic library handle
.IR handle .
If the reference count drops to zero,
then the dynamic library is unloaded.
All shared objects that were automatically loaded when
.BR dlopen ()
was invoked on the object referred to by
.I handle
are recursively closed in the same manner.
.LP
The function
.BR dlclose ()
returns 0 on success, and nonzero on error.
.SS The obsolete symbols _init() and _fini()
The linker recognizes special symbols
.B _init
and
.BR _fini .
If a dynamic library exports a routine named
.BR _init (),
then that code is executed after the loading, before
.BR dlopen ()
returns.
If the dynamic library exports a routine named
.BR _fini (),
then that routine is called just before the library is unloaded.
In case you need to avoid linking against the system startup files,
this can be done by using the
.BR gcc (1)
.I \-nostartfiles
command-line option.
.LP
Using these routines, or the gcc
.B \-nostartfiles
or
.B \-nostdlib
options, is not recommended.
Their use may result in undesired behavior,
since the constructor/destructor routines will not be executed
(unless special measures are taken).
.\" void _init(void) __attribute__((constructor));
.\" void _fini(void) __attribute__((destructor));
.LP
Instead, libraries should export routines using the
.B __attribute__((constructor))
and
.B __attribute__((destructor))
function attributes.
See the gcc info pages for information on these.
Constructor routines are executed before
.BR dlopen ()
returns, and destructor routines are executed before
.BR dlclose ()
returns.
.SS Glibc extensions: dladdr() and dlvsym()
Glibc adds two functions not described by POSIX, with prototypes
.sp
.nf
.BR "#define _GNU_SOURCE" "         /* See feature_test_macros(7) */"
.B #include <dlfcn.h>
.sp
.BI "int dladdr(void *" addr ", Dl_info *" info );
.sp
.BI "void *dlvsym(void *" handle ", char *" symbol ", char *" version );
.fi
.PP
The function
.BR dladdr ()
takes a function pointer and tries to resolve name
and file where it is located.
Information is stored in the
.I Dl_info
structure:
.sp
.in +4n
.nf
typedef struct {
    const char *dli_fname;  /* Pathname of shared object that
                               contains address */
    void       *dli_fbase;  /* Address at which shared object
                               is loaded */
    const char *dli_sname;  /* Name of symbol whose definition
                               overlaps \fIaddr\fP */
    void       *dli_saddr;  /* Exact address of symbol named
                               in \fIdli_sname\fP */
} Dl_info;
.fi
.in
.PP
If no symbol matching
.I addr
could be found, then
.I dli_sname
and
.I dli_saddr
are set to NULL.
.PP
.BR dladdr ()
returns 0 on error, and nonzero on success.
.PP
The function
.BR dlvsym (),
provided by glibc since version 2.1,
does the same as
.BR dlsym ()
but takes a version string as an additional argument.
.SH CONFORMING TO
POSIX.1-2001 describes
.BR dlclose (),
.BR dlerror (),
.BR dlopen (),
and
.BR dlsym ().
.SH NOTES
The symbols
.B RTLD_DEFAULT
and
.B RTLD_NEXT
are defined by
.I <dlfcn.h>
only when
.B _GNU_SOURCE
was defined before including it.
.\" .LP
.\" The string returned by
.\" .BR dlerror ()
.\" should not be modified.
.\" Some systems give the prototype as
.\" .sp
.\" .in +5
.\" .B "const char *dlerror(void);"
.\" .in

Since glibc 2.2.3,
.BR atexit (3)
can be used to register an exit handler that is automatically
called when a library is unloaded.
.SS History
The dlopen interface standard comes from SunOS.
That system also has
.BR dladdr (),
but not
.BR dlvsym ().
.SH BUGS
Sometimes, the function pointers you pass to
.BR dladdr ()
may surprise you.
On some architectures (notably i386 and x86_64),
.I dli_fname
and
.I dli_fbase
may end up pointing back at the object from which you called
.BR dladdr (),
even if the function used as an argument should come from
a dynamically linked library.
.PP
The problem is that the function pointer will still be resolved
at compile time, but merely point to the
.I plt
(Procedure Linkage Table)
section of the original object (which dispatches the call after
asking the dynamic linker to resolve the symbol).
To work around this,
you can try to compile the code to be position-independent:
then, the compiler cannot prepare the pointer
at compile time anymore and today's
.BR gcc (1)
will generate code that just loads the final symbol address from the
.I got
(Global Offset Table) at run time before passing it to
.BR dladdr ().
.SH EXAMPLE
Load the math library, and print the cosine of 2.0:
.nf

#include <stdio.h>
#include <stdlib.h>
#include <dlfcn.h>

int
main(int argc, char **argv)
{
    void *handle;
    double (*cosine)(double);
    char *error;

    handle = dlopen("libm.so", RTLD_LAZY);
    if (!handle) {
        fprintf(stderr, "%s\en", dlerror());
        exit(EXIT_FAILURE);
    }

    dlerror();    /* Clear any existing error */

    cosine = (double (*)(double)) dlsym(handle, "cos");

    /* According to the ISO C standard, casting between function
       pointers and 'void *', as done above, produces undefined results.
       POSIX.1-2003 and POSIX.1-2008 accepted this state of affairs and
       proposed the following workaround:

           *(void **) (&cosine) = dlsym(handle, "cos");

       This (clumsy) cast conforms with the ISO C standard and will
       avoid any compiler warnings.

       The 2013 Technical Corrigendum to POSIX.1-2008 (a.k.a.
       POSIX.1-2013) improved matters by requiring that conforming
       implementations support casting 'void *' to a function pointer.
       Nevertheless, some compilers (e.g., gcc with the '-pedantic'
       option) may complain about the cast used in this program. */
.\" http://pubs.opengroup.org/onlinepubs/009695399/functions/dlsym.html#tag_03_112_08
.\" http://pubs.opengroup.org/onlinepubs/9699919799/functions/dlsym.html#tag_16_96_07
.\" http://austingroupbugs.net/view.php?id=74

    error = dlerror();
    if (error != NULL) {
        fprintf(stderr, "%s\en", error);
        exit(EXIT_FAILURE);
    }

    printf("%f\en", (*cosine)(2.0));
    dlclose(handle);
    exit(EXIT_SUCCESS);
}
.fi
.PP
If this program were in a file named "foo.c", you would build the program
with the following command:
.in +4n
.LP
    gcc \-rdynamic \-o foo foo.c \-ldl
.in
.PP
Libraries exporting
.BR _init ()
and
.BR _fini ()
will want to be compiled as
follows, using
.I bar.c
as the example name:
.in +4n
.LP
    gcc \-shared \-nostartfiles \-o bar bar.c
.in
.SH SEE ALSO
.BR ld (1),
.BR ldd (1),
.BR pldd (1),
.BR dl_iterate_phdr (3),
.BR rtld-audit (7),
.BR ld.so (8),
.BR ldconfig (8)

ld.so info pages, gcc info pages, ld info pages
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified Sat Jul 24 19:46:03 1993 by Rik Faith (faith@cs.unc.edu)
.TH DRAND48 3  2015-03-02 "" "Linux Programmer's Manual"
.SH NAME
drand48, erand48, lrand48, nrand48, mrand48, jrand48, srand48, seed48,
lcong48 \- generate uniformly distributed pseudo-random numbers
.SH SYNOPSIS
.nf
.B #include <stdlib.h>
.sp
.B double drand48(void);
.sp
.BI "double erand48(unsigned short " xsubi [3]);
.sp
.B long int lrand48(void);
.sp
.BI "long int nrand48(unsigned short " xsubi [3]);
.sp
.B long int mrand48(void);
.sp
.BI "long int jrand48(unsigned short " xsubi [3]);
.sp
.BI "void srand48(long int " seedval );
.sp
.BI "unsigned short *seed48(unsigned short " seed16v [3]);
.sp
.BI "void lcong48(unsigned short " param [7]);
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
All functions shown above:
.\" .BR drand48 (),
.\" .BR erand48 (),
.\" .BR lrand48 (),
.\" .BR nrand48 (),
.\" .BR mrand48 (),
.\" .BR jrand48 (),
.\" .BR srand48 (),
.\" .BR seed48 (),
.\" .BR lcong48 ():
_SVID_SOURCE || _XOPEN_SOURCE
.ad b
.SH DESCRIPTION
These functions generate pseudo-random numbers using the linear congruential
algorithm and 48-bit integer arithmetic.
.PP
The
.BR drand48 ()
and
.BR erand48 ()
functions return nonnegative
double-precision floating-point values uniformly distributed between
[0.0, 1.0).
.PP
The
.BR lrand48 ()
and
.BR nrand48 ()
functions return nonnegative
long integers uniformly distributed between 0 and 2^31.
.PP
The
.BR mrand48 ()
and
.BR jrand48 ()
functions return signed long
integers uniformly distributed between \-2^31 and 2^31.
.PP
The
.BR srand48 (),
.BR seed48 ()
and
.BR lcong48 ()
functions are
initialization functions, one of which should be called before using
.BR drand48 (),
.BR lrand48 ()
or
.BR mrand48 ().
The functions
.BR erand48 (),
.BR nrand48 ()
and
.BR jrand48 ()
do not require
an initialization function to be called first.
.PP
All the functions work by generating a sequence of 48-bit integers,
.IR Xi ,
according to the linear congruential formula:
.sp
.nf
.RS
.B Xn+1 = (aXn + c) mod m,   where n >= 0
.RE
.fi
.sp
The parameter
.I m
= 2^48, hence 48-bit integer arithmetic is performed.
Unless
.BR lcong48 ()
is called,
.IR a
and
.I c
are given by:
.sp
.nf
.RS
.B a = 0x5DEECE66D
.B c = 0xB
.RE
.fi
.sp
The value returned by any of the functions
.BR drand48 (),
.BR erand48 (),
.BR lrand48 (),
.BR nrand48 (),
.BR mrand48 ()
or
.BR jrand48 ()
is
computed by first generating the next 48-bit
.I Xi
in the sequence.
Then the appropriate number of bits, according to the type of data item to
be returned, is copied from the high-order bits of
.I Xi
and transformed
into the returned value.
.PP
The functions
.BR drand48 (),
.BR lrand48 ()
and
.BR mrand48 ()
store
the last 48-bit
.I Xi
generated in an internal buffer.
The functions
.BR erand48 (),
.BR nrand48 ()
and
.BR jrand48 ()
require the calling
program to provide storage for the successive
.I Xi
values in the array
argument
.IR xsubi .
The functions are initialized by placing the initial
value of
.I Xi
into the array before calling the function for the first
time.
.PP
The initializer function
.BR srand48 ()
sets the high order 32-bits of
.I Xi
to the argument
.IR seedval .
The low order 16-bits are set
to the arbitrary value 0x330E.
.PP
The initializer function
.BR seed48 ()
sets the value of
.I Xi
to
the 48-bit value specified in the array argument
.IR seed16v .
The
previous value of
.I Xi
is copied into an internal buffer and a
pointer to this buffer is returned by
.BR seed48 ().
.PP
The initialization function
.BR lcong48 ()
allows the user to specify
initial values for
.IR Xi ,
.I a
and
.IR c .
Array argument
elements
.I param[0-2]
specify
.IR Xi ,
.I param[3-5]
specify
.IR a ,
and
.I param[6]
specifies
.IR c .
After
.BR lcong48 ()
has been called, a subsequent call to either
.BR srand48 ()
or
.BR seed48 ()
will restore the standard values of
.I a
and
.IR c .
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.ad l
.TS
allbox;
lb lb lb
lw21 l lw22.
Interface	Attribute	Value
T{
.BR drand48 (),
.BR erand48 (),
.BR lrand48 (),
.BR nrand48 (),
.BR mrand48 (),
.BR jrand48 (),
.BR srand48 (),
.BR seed48 (),
.BR lcong48 ()
T}	Thread safety	T{
MT-Unsafe race:drand48
T}
.TE
.ad
.PP
The above
functions record global state information for the random number generator,
so they are not thread-safe.
.SH CONFORMING TO
SVr4, POSIX.1-2001.
.SH SEE ALSO
.BR rand (3),
.BR random (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 2003 Walter Harms, 2004 Andries Brouwer <aeb@cwi.nl>.
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Created 2004-10-31. Text taken from a page by Walter Harms, 2003-09-08
.\"
.TH DRAND48_R 3 2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
drand48_r, erand48_r, lrand48_r, nrand48_r, mrand48_r, jrand48_r,
srand48_r, seed48_r, lcong48_r
\- generate uniformly distributed pseudo-random numbers reentrantly
.SH SYNOPSIS
.nf
.B #include <stdlib.h>
.sp
.BI "int drand48_r(struct drand48_data *" buffer ", double *" result );
.sp
.BI "int erand48_r(unsigned short " xsubi [3] ","
.br
.BI "              struct drand48_data *"buffer ", double *" result ");"
.sp
.BI "int lrand48_r(struct drand48_data *" buffer ", long int *" result );
.sp
.BI "int nrand48_r(unsigned short int " xsubi[3] ","
.br
.BI "              struct drand48_data *"buffer ", long int *" result ");"
.sp
.BI "int mrand48_r(struct drand48_data *" buffer ",long int *" result ");"
.sp
.BI "int jrand48_r(unsigned short int " xsubi[3] ","
.br
.BI "              struct drand48_data *" buffer ", long int *" result ");"
.sp
.BI "int srand48_r(long int " seedval ", struct drand48_data *" buffer ");"
.sp
.BI "int seed48_r(unsigned short int " seed16v[3] ","
.br
.BI "             struct drand48_data *" buffer ");"
.sp
.BI "int lcong48_r(unsigned short int " param[7] ","
.br
.BI "              struct drand48_data *" buffer ");"
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
All functions shown above:
.\" .BR drand48_r (),
.\" .BR erand48_r (),
.\" .BR lrand48_r (),
.\" .BR nrand48_r (),
.\" .BR mrand48_r (),
.\" .BR jrand48_r (),
.\" .BR srand48_r (),
.\" .BR seed48_r (),
.\" .BR lcong48_r ():
_SVID_SOURCE || _BSD_SOURCE || _XOPEN_SOURCE
.ad b
.SH DESCRIPTION
These functions are the reentrant analogs of the functions described in
.BR drand48 (3).
Instead of modifying the global random generator state, they use
the supplied data
.IR buffer .

Before the first use, this struct must be initialized, for example,
by filling it with zeros, or by calling one of the functions
.BR srand48_r (),
.BR seed48_r (),
or
.BR lcong48_r ().
.SH RETURN VALUE
The return value is 0.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.ad l
.TS
allbox;
lbw25 lb lb
l l l.
Interface	Attribute	Value
T{
.BR drand48_r (),
.BR erand48_r (),
.BR lrand48_r (),
.BR nrand48_r (),
.BR mrand48_r (),
.BR jrand48_r (),
.BR srand48_r (),
.BR seed48_r (),
.BR lcong48_r ()
T}	Thread safety	MT-Safe race:buffer
.TE
.ad
.SH CONFORMING TO
These functions are GNU extensions and are not portable.
.SH SEE ALSO
.BR drand48 (3),
.BR rand (3),
.BR random (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
'\" t
.\" Copyright (C) 2014 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH DUPLOCALE 3 2014-03-12 "Linux" "Linux Programmer's Manual"
.SH NAME
duplocale \- duplicate a locale object
.SH SYNOPSIS
.nf
.B #include <locale.h>

.BI "locale_t duplocale(locale_t " locobj );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR duplocale ():
.PD 0
.RS 4
.TP
Since glibc 2.10:
_XOPEN_SOURCE\ >=\ 700
.TP
Before glibc 2.10:
_GNU_SOURCE
.RE
.PD
.SH DESCRIPTION
The
.BR duplocale ()
function creates a duplicate of the locale object referred to by
.IR locobj .

If
.I locobj
is
.BR LC_GLOBAL_LOCALE ,
.BR duplocale ()
creates a locale object containing a copy of the global locale
determined by
.BR setlocale (3).
.SH RETURN VALUE
On success,
.BR duplocale ()
returns a handle for the new locale object.
On error, it returns
.IR "(locale_t)\ 0",
and sets
.I errno
to indicate the cause of the error.
.SH ERRORS
.TP
.B ENOMEM
Insufficient memory to create the duplicate locale object.
.SH VERSIONS
The
.BR duplocale ()
function first appeared in version 2.3 of the GNU C library.
.SH CONFORMING TO
POSIX.1-2008.
.SH NOTES
Duplicating a locale can serve the following purposes:
.IP * 3
To create a copy of a locale object in which one of more categories
are to be modified (using
.BR newlocale (3)).
.IP *
To obtain a handle for the current locale which can used in
other functions that employ a locale handle, such as
.BR toupper_l (3).
This is done by applying
.BR duplocale ()
to the value returned by the following call:

    loc = uselocale((locale_t) 0);

.IP
This technique is necessary, because the above
.BR uselocale (3)
call may return the value
.BR LC_GLOBAL_LOCALE ,
which results in undefined behavior if passed to functions such as
.BR toupper_l (3).
Calling
.BR duplocale ()
can be used to ensure that the
.BR LC_GLOBAL_LOCALE
value is converted into a usable locale object.
See EXAMPLE, below.
.PP
Each locale object created by
.BR duplocale ()
should be deallocated using
.BR  freelocale (3).
.SH EXAMPLE
The program below uses
.BR uselocale (3)
and
.BR duplocale ()
to obtain a handle for the current locale which is then passed to
.BR toupper_l (3).
The program takes one command-line argument,
a string of characters that is converted to uppercase and
displayed on standard output.
An example of its use is the following:
.in +4n
.nf

$ \fB./a.out abc\fP
ABC
.fi
.in
.SS Program source
.nf
#define _XOPEN_SOURCE 700
#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>
#include <locale.h>

#define errExit(msg)    do { perror(msg); exit(EXIT_FAILURE); \\
                        } while (0)

int
main(int argc, char *argv[])
{
    locale_t loc, nloc;
    char *p;

    if (argc != 2) {
        fprintf(stderr, "Usage: %s string\\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    /* This sequence is necessary, because uselocale() might return
       the value LC_GLOBAL_LOCALE, which can\(aqt be passed as an
       argument to toupper_l() */

    loc = uselocale((locale_t) 0);
    if (loc == (locale_t) 0)
        errExit("uselocale");

    nloc = duplocale(loc);
    if (nloc == (locale_t) 0)
        errExit("duplocale");

    for (p = argv[1]; *p; p++)
        putchar(toupper_l(*p, nloc));

    printf("\\n");

    freelocale(nloc);

    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR freelocale (3),
.BR newlocale (3),
.BR setlocale (3),
.BR uselocale (3),
.BR locale (5),
.BR locale (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\"  Copyright 2001 Walter Harms (walter.harms@informatik.uni-oldenburg.de)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" aeb: some corrections
.TH DYSIZE 3 2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
dysize \- get number of days for a given year
.SH SYNOPSIS
.B "#include <time.h>"
.sp
.BI "int dysize(int " year );
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR dysize ():
_BSD_SOURCE || _SVID_SOURCE
.SH DESCRIPTION
The function returns 365 for a normal year and 366 for a leap year.
The calculation for leap year is based on:
.sp
(year) %4 == 0 && ((year) %100 != 0 || (year) %400 == 0)
.sp
The formula is defined in the macro
.I __isleap(year)
also found in
.IR <time.h> .
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR dysize ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
This function occurs in SunOS 4.x.
.SH NOTES
This is a compatibility function only.
Don't use it in new programs.
.\" The SCO version of this function had a year-2000 problem.
.SH SEE ALSO
.BR strftime (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified Sat Jul 24 19:40:39 1993 by Rik Faith (faith@cs.unc.edu)
.\" Modified Fri Jun 25 12:10:47 1999 by Andries Brouwer (aeb@cwi.nl)
.\"
.TH ECVT 3 2015-03-02 "" "Linux Programmer's Manual"
.SH NAME
ecvt, fcvt \- convert a floating-point number to a string
.SH SYNOPSIS
.B #include <stdlib.h>
.sp
.BI "char *ecvt(double " number ", int " ndigits ", int *" decpt ,
.BI "int *" sign );
.sp
.BI "char *fcvt(double " number ", int " ndigits ", int *" decpt ,
.BI "int *" sign );
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR ecvt (),
.BR fcvt ():
.ad l
.RS 4
.PD 0
.TP 4
Since glibc 2.12:
.nf
_SVID_SOURCE ||
    (_XOPEN_SOURCE\ >=\ 500 ||
        _XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED) &&
    !(_POSIX_C_SOURCE\ >=\ 200112L || _XOPEN_SOURCE\ >=\ 600)
.fi
.TP 4
Before glibc 2.12:
_SVID_SOURCE || _XOPEN_SOURCE\ >=\ 500 ||
_XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED
.PD
.RE
.ad b
.SH DESCRIPTION
The
.BR ecvt ()
function converts \fInumber\fP to a null-terminated
string of \fIndigits\fP digits (where \fIndigits\fP is reduced to a
system-specific limit determined by the precision of a
.IR double ),
and returns a pointer to the string.
The high-order digit is nonzero, unless
.I number
is zero.
The low order digit is rounded.
The string itself does not contain a decimal point; however,
the position of the decimal point relative to the start of the string
is stored in \fI*decpt\fP.
A negative value for \fI*decpt\fP means that
the decimal point is to the left of the start of the string.
If the sign of
\fInumber\fP is negative, \fI*sign\fP is set to a nonzero value,
otherwise it is set to 0.
If
.I number
is zero, it is unspecified whether \fI*decpt\fP is 0 or 1.
.PP
The
.BR fcvt ()
function is identical to
.BR ecvt (),
except that
\fIndigits\fP specifies the number of digits after the decimal point.
.SH RETURN VALUE
Both the
.BR ecvt ()
and
.BR fcvt ()
functions return a pointer to a
static string containing the ASCII representation of \fInumber\fP.
The static string is overwritten by each call to
.BR ecvt ()
or
.BR fcvt ().
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR ecvt ()
T}	Thread safety	MT-Unsafe race:ecvt
T{
.BR fcvt ()
T}	Thread safety	MT-Unsafe race:fcvt
.TE
.SH CONFORMING TO
SVr2;
marked as LEGACY in POSIX.1-2001.
POSIX.1-2008 removes the specifications of
.BR ecvt ()
and
.BR fcvt (),
recommending the use of
.BR sprintf (3)
instead (though
.BR snprintf (3)
may be preferable).
.SH NOTES
.\" Linux libc4 and libc5 specified the type of
.\" .I ndigits
.\" as
.\" .IR size_t .
Not all locales use a point as the radix character ("decimal point").
.SH SEE ALSO
.BR ecvt_r (3),
.BR gcvt (3),
.BR qecvt (3),
.BR setlocale (3),
.BR sprintf (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2002 Andries Brouwer <aeb@cwi.nl>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" This replaces an earlier man page written by Walter Harms
.\" <walter.harms@informatik.uni-oldenburg.de>.
.\"
.\" Corrected return types; from Fabian; 2004-10-05
.\"
.TH ECVT_R 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
ecvt_r, fcvt_r, qecvt_r, qfcvt_r \- convert a floating-point number to a string
.SH SYNOPSIS
.nf
.B #include <stdlib.h>
.sp
.BI "int ecvt_r(double " number ", int " ndigits ", int *" decpt ,
.BI "           int *" sign ", char *" buf ", size_t " len );
.sp
.BI "int fcvt_r(double " number ", int " ndigits ", int *" decpt ,
.BI "           int *" sign ", char *" buf ", size_t " len );
.sp
.BI "int qecvt_r(long double " number ", int " ndigits ", int *" decpt ,
.BI "           int *" sign ", char *" buf ", size_t " len );
.sp
.BI "int qfcvt_r(long double " number ", int " ndigits ", int *" decpt ,
.BI "           int *" sign ", char *" buf ", size_t " len );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR ecvt_r (),
.BR fcvt_r (),
.BR qecvt_r (),
.BR qfcvt_r ():
.RS 4
_SVID_SOURCE || _BSD_SOURCE || _XOPEN_SOURCE\ >=\ 500
.RE
.ad b
.SH DESCRIPTION
The functions
.BR ecvt_r (),
.BR fcvt_r (),
.BR qecvt_r (),
and
.BR qfcvt_r ()
are identical to
.BR ecvt (3),
.BR fcvt (3),
.BR qecvt (3),
and
.BR qfcvt (3),
respectively, except that they do not return their result in a static
buffer, but instead use the supplied
.I buf
of size
.IR len .
See
.BR ecvt (3)
and
.BR qecvt (3).
.SH RETURN VALUE
These functions return 0 on success, and \-1 otherwise.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw20 lb lb
l l l.
Interface	Attribute	Value
T{
.BR ecvt_r (),
.BR fcvt_r (),
.br
.BR qecvt_r (),
.BR qfcvt_r ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
These functions are GNU extensions.
.SH NOTES
These functions are obsolete.
Instead,
.BR sprintf (3)
is recommended.
.SH SEE ALSO
.BR ecvt (3),
.BR qecvt (3),
.BR sprintf (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 2000 Nicolás Lichtmaier <nick@debian.org>
.\" Created 2000-07-22 00:52-0300
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.\" Modified 2002-07-23 19:21:35 CEST 2002 Walter Harms
.\" <walter.harms@informatik.uni-oldenburg.de>
.\"
.\" Modified 2003-04-04, aeb
.\"
.TH ENCRYPT 3 2015-02-21 "" "Linux Programmer's Manual"
.SH NAME
encrypt, setkey, encrypt_r, setkey_r \- encrypt 64-bit messages
.SH SYNOPSIS
.BR "#define _XOPEN_SOURCE" "       /* See feature_test_macros(7) */"
.br
.B #include <unistd.h>
.sp
.BI "void encrypt(char " block "[64], int " edflag );
.sp
.BR "#define _XOPEN_SOURCE" "       /* See feature_test_macros(7) */"
.br
.B #include <stdlib.h>
.sp
.BI "void setkey(const char *" key );
.sp
.BR "#define _GNU_SOURCE" "         /* See feature_test_macros(7) */"
.br
.B "#include <crypt.h>"
.sp
.BI "void setkey_r(const char *" key ", struct crypt_data *" data );
.br
.BI "void encrypt_r(char *" block ", int " edflag \
", struct crypt_data *" data );
.sp
Each of these requires linking with \fI\-lcrypt\fP.
.SH DESCRIPTION
These functions encrypt and decrypt 64-bit messages.
The
.BR setkey ()
function sets the key used by
.BR encrypt ().
The
.I key
argument used here is an array of 64 bytes, each of which has
numerical value 1 or 0.
The bytes key[n] where n=8*i-1 are ignored,
so that the effective key length is 56 bits.
.PP
The
.BR encrypt ()
function modifies the passed buffer, encoding if
.I edflag
is 0, and decoding if 1 is being passed.
Like the
.I key
argument, also
.I block
is a bit vector representation of the actual value that is encoded.
The result is returned in that same vector.
.PP
These two functions are not reentrant, that is, the key data is
kept in static storage.
The functions
.BR setkey_r ()
and
.BR encrypt_r ()
are the reentrant versions.
They use the following
structure to hold the key data:
.in +4n
.nf

struct crypt_data {
    char     keysched[16 * 8];
    char     sb0[32768];
    char     sb1[32768];
    char     sb2[32768];
    char     sb3[32768];
    char     crypt_3_buf[14];
    char     current_salt[2];
    long int current_saltbits;
    int      direction;
    int      initialized;
};
.fi
.in
.PP
Before calling
.BR setkey_r ()
set
.I data\->initialized
to zero.
.SH RETURN VALUE
These functions do not return any value.
.SH ERRORS
Set
.I errno
to zero before calling the above functions.
On success, it is unchanged.
.TP
.B ENOSYS
The function is not provided.
(For example because of former USA export restrictions.)
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw23 lb lb
l l l.
Interface	Attribute	Value
T{
.BR encrypt (),
.BR setkey ()
T}	Thread safety	MT-Unsafe race:crypt
T{
.BR encrypt_r (),
.BR setkey_r ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
The functions
.BR encrypt ()
and
.BR setkey ()
conform to SVr4, SUSv2, and POSIX.1-2001.
The functions
.BR encrypt_r ()
and
.BR setkey_r ()
are GNU extensions.
.SH NOTES
In glibc 2.2, these functions use the DES algorithm.
.SH EXAMPLE
.nf
#define _XOPEN_SOURCE
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <crypt.h>

int
main(void)
{
    char key[64];
    char orig[9] = "eggplant";
    char buf[64];
    char txt[9];
    int i, j;

    for (i = 0; i < 64; i++) {
        key[i] = rand() & 1;
    }

    for (i = 0; i < 8; i++) {
        for (j = 0; j < 8; j++) {
            buf[i * 8 + j] = orig[i] >> j & 1;
        }
        setkey(key);
    }
    printf("Before encrypting: %s\\n", orig);

    encrypt(buf, 0);
    for (i = 0; i < 8; i++) {
        for (j = 0, txt[i] = \(aq\\0\(aq; j < 8; j++) {
            txt[i] |= buf[i * 8 + j] << j;
        }
        txt[8] = \(aq\\0\(aq;
    }
    printf("After encrypting:  %s\\n", txt);

    encrypt(buf, 1);
    for (i = 0; i < 8; i++) {
        for (j = 0, txt[i] = \(aq\\0\(aq; j < 8; j++) {
            txt[i] |= buf[i * 8 + j] << j;
        }
        txt[8] = \(aq\\0\(aq;
    }
    printf("After decrypting:  %s\\n", txt);
    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR cbc_crypt (3),
.BR crypt (3),
.BR ecb_crypt (3),
.\" .BR fcrypt (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2008, Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH END 3 2008-07-17 "GNU" "Linux Programmer's Manual"
.SH NAME
etext, edata, end \- end of program segments
.SH SYNOPSIS
.nf
.BI extern " etext" ;
.BI extern " edata" ;
.BI extern " end" ;
.fi
.SH DESCRIPTION
The addresses of these symbols indicate the end of various program
segments:
.TP
.I etext
This is the first address past the end of the text segment
(the program code).
.TP
.I edata
This is the first address past the end of the
initialized data segment.
.TP
.I end
This is the first address past the end of the
uninitialized data segment (also known as the BSS segment).
.SH CONFORMING TO
Although these symbols have long been provided on most UNIX systems,
they are not standardized; use with caution.
.SH NOTES
The program must explicitly declare these symbols;
they are not defined in any header file.

On some systems the names of these symbols are preceded by underscores,
thus:
.IR _etext ,
.IR _edata ,
and
.IR _end .
These symbols are also defined for programs compiled on Linux.

At the start of program execution,
the program break will be somewhere near
.IR &end
(perhaps at the start of the following page).
However, the break will change as memory is allocated via
.BR brk (2)
or
.BR malloc (3).
Use
.BR sbrk (2)
with an argument of zero to find the current value of the program break.
.SH EXAMPLE
When run, the program below produces output such as the following:
.in +4n
.nf

.RB "$" " ./a.out"
First address past:
    program text (etext)       0x8048568
    initialized data (edata)   0x804a01c
    uninitialized data (end)   0x804a024
.fi
.in
.SS Program source
\&
.nf
#include <stdio.h>
#include <stdlib.h>

extern char etext, edata, end; /* The symbols must have some type,
                                   or "gcc \-Wall" complains */

int
main(int argc, char *argv[])
{
    printf("First address past:\\n");
    printf("    program text (etext)      %10p\\n", &etext);
    printf("    initialized data (edata)  %10p\\n", &edata);
    printf("    uninitialized data (end)  %10p\\n", &end);

    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR objdump (1),
.BR readelf (1),
.BR sbrk (2),
.BR elf (5)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2009, Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\" a few pieces remain from an earlier version
.\" Copyright (C) 2008, Nanno Langstraat <nal@ii.nl>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH ENDIAN 3  2010-09-10 "GNU" "Linux Programmer's Manual"
.SH NAME
htobe16, htole16, be16toh, le16toh, htobe32, htole32, be32toh, le32toh,
htobe64, htole64, be64toh, le64toh \-
convert values between host and big-/little-endian byte order
.SH SYNOPSIS
.nf
.BR "#define _BSD_SOURCE" "             /* See feature_test_macros(7) */"
.B #include <endian.h>

.BI "uint16_t htobe16(uint16_t " host_16bits );
.BI "uint16_t htole16(uint16_t " host_16bits );
.BI "uint16_t be16toh(uint16_t " big_endian_16bits );
.BI "uint16_t le16toh(uint16_t " little_endian_16bits );

.BI "uint32_t htobe32(uint32_t " host_32bits );
.BI "uint32_t htole32(uint32_t " host_32bits );
.BI "uint32_t be32toh(uint32_t " big_endian_32bits );
.BI "uint32_t le32toh(uint32_t " little_endian_32bits );

.BI "uint64_t htobe64(uint64_t " host_64bits );
.BI "uint64_t htole64(uint64_t " host_64bits );
.BI "uint64_t be64toh(uint64_t " big_endian_64bits );
.BI "uint64_t le64toh(uint64_t " little_endian_64bits );
.fi
.SH DESCRIPTION
These functions convert the byte encoding of integer values from
the byte order that the current CPU (the "host") uses,
to and from little-endian and big-endian byte order.

The number,
.IR nn ,
in the name of each function indicates the size of
integer handled by the function, either 16, 32, or 64 bits.

The functions with names of the form "htobe\fInn\fP" convert
from host byte order to big-endian order.

The functions with names of the form "htole\fInn\fP" convert
from host byte order to little-endian order.

The functions with names of the form "be\fInn\fPtoh" convert
from big-endian order to host byte order.

The functions with names of the form "le\fInn\fPtoh" convert
from little-endian order to host byte order.
.SH VERSIONS
These functions were added to glibc in version 2.9.
.SH CONFORMING TO
These functions are nonstandard.
Similar functions are present on the BSDs,
where the required header file is
.I <sys/endian.h>
instead of
.IR <endian.h> .
Unfortunately,
NetBSD, FreeBSD, and glibc haven't followed the original
OpenBSD naming convention for these functions,
whereby the
.I nn
component always appears at the end of the function name
(thus, for example, in NetBSD, FreeBSD, and glibc,
the equivalent of OpenBSDs "betoh32" is "be32toh").
.SH NOTES
These functions are similar to the older
.BR byteorder (3)
family of functions.
For example,
.BR be32toh ()
is identical to
.BR ntohl ().

The advantage of the
.BR byteorder (3)
functions is that they are standard functions available
on all UNIX systems.
On the other hand, the fact that they were designed
for use in the context of TCP/IP means that
they lack the 64-bit and little-endian variants described in this page.
.SH EXAMPLE
The program below display the results of converting an integer
from host byte order to both little-endian and big-endian byte order.
Since host byte order is either little-endian or big-endian,
only one of these conversions will have an effect.
When we run this program on a little-endian system such as x86-32,
we see the following:
.in +4n
.nf

$ \fB./a.out\fP
x.u32 = 0x44332211
htole32(x.u32) = 0x44332211
htobe32(x.u32) = 0x11223344
.fi
.in
.SS Program source
\&
.nf
#include <endian.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>

int
main(int argc, char *argv[])
{
    union {
        uint32_t u32;
        uint8_t arr[4];
    } x;

    x.arr[0] = 0x11;	/* Lowest-address byte */
    x.arr[1] = 0x22;
    x.arr[2] = 0x33;
    x.arr[3] = 0x44;	/* Highest-address byte */

    printf("x.u32 = 0x%x\\n", x.u32);
    printf("htole32(x.u32) = 0x%x\\n", htole32(x.u32));
    printf("htobe32(x.u32) = 0x%x\\n", htobe32(x.u32));

    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR byteorder (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 2002 walter harms (walter.harms@informatik.uni-oldenburg.de)
.\"
.\" %%%LICENSE_START(GPL_NOVERSION_ONELINE)
.\" Distributed under GPL
.\" %%%LICENSE_END
.\"
.\" based on the description in glibc source and infopages
.\"
.\" Corrections and additions, aeb
.TH ENVZ_ADD 3 2015-03-02 "" "Linux Programmer's Manual"
.SH NAME
envz_add, envz_entry, envz_get, envz_merge,
envz_remove, envz_strip \- environment string support
.SH SYNOPSIS
.nf
.B "#include <envz.h>"

.BI "error_t envz_add(char **" envz ", size_t *" envz_len ,
.BI "                 const char *" name ", const char *" value );

.BI "char *envz_entry(const char *" envz ", size_t " envz_len \
", const char *" name );

.BI "char *envz_get(const char *" envz ", size_t " envz_len \
", const char *" name );

.BI "error_t envz_merge(char **" envz ", size_t *" envz_len ,
.BI "                   const char *" envz2 ", size_t " envz2_len \
", int " override );

.BI "void envz_remove(char **" envz ", size_t *" envz_len \
", const char *" name );

.BI "void envz_strip(char **" envz ", size_t *" envz_len );
.fi
.SH DESCRIPTION
These functions are glibc-specific.
.LP
An argz vector is a pointer to a character buffer together with a length,
see
.BR argz_add (3).
An envz vector is a special argz vector, namely one where the strings
have the form "name=value".
Everything after the first \(aq=\(aq is considered
to be the value.
If there is no \(aq=\(aq, the value is taken to be NULL.
(While the value in case of a trailing \(aq=\(aq is the empty string "".)
.LP
These functions are for handling envz vectors.
.LP
.BR envz_add ()
adds the string
.RI \&" name = value \&"
(in case
.I value
is non-NULL) or
.RI \&" name \&"
(in case
.I value
is NULL) to the envz vector
.RI ( *envz ,\  *envz_len )
and updates
.I *envz
and
.IR *envz_len .
If an entry with the same
.I name
existed, it is removed.
.LP
.BR envz_entry ()
looks for
.I name
in the envz vector
.RI ( envz ,\  envz_len )
and returns the entry if found, or NULL if not.
.LP
.BR envz_get ()
looks for
.I name
in the envz vector
.RI ( envz ,\  envz_len )
and returns the value if found, or NULL if not.
(Note that the value can also be NULL, namely when there is
an entry for
.I name
without \(aq=\(aq sign.)
.LP
.BR envz_merge ()
adds each entry in
.I envz2
to
.IR *envz ,
as if with
.BR envz_add ().
If
.I override
is true, then values in
.I envz2
will supersede those with the same name in
.IR *envz ,
otherwise not.
.LP
.BR envz_remove ()
removes the entry for
.I name
from
.RI ( *envz ,\  *envz_len )
if there was one.
.LP
.BR envz_strip ()
removes all entries with value NULL.
.SH RETURN VALUE
All envz functions that do memory allocation have a return type of
.IR error_t ,
and return 0 for success, and
.B ENOMEM
if an allocation error occurs.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw27 lb lb
l l l.
Interface	Attribute	Value
T{
.BR envz_add (),
.BR envz_entry (),
.br
.BR envz_get (),
.BR envz_merge (),
.br
.BR envz_remove (),
.BR envz_strip ()
T}	Thread safety	MT-Safe
.TE

.SH CONFORMING TO
These functions are a GNU extension.
Handle with care.
.SH EXAMPLE
.nf
#include <stdio.h>
#include <stdlib.h>
#include <envz.h>

int
main(int argc, char *argv[], char *envp[])
{
    int i, e_len = 0;
    char *str;

    for (i = 0; envp[i] != NULL; i++)
        e_len += strlen(envp[i]) + 1;

    str = envz_entry(*envp, e_len, "HOME");
    printf("%s\en", str);
    str = envz_get(*envp, e_len, "HOME");
    printf("%s\en", str);
    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR argz_add (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\" and Copyright 2008, Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified 1993-07-24 by Rik Faith (faith@cs.unc.edu)
.\" Modified 2002-07-27 by Walter Harms
.\" 	(walter.harms@informatik.uni-oldenburg.de)
.\"
.TH ERF 3  2015-04-19 "GNU" "Linux Programmer's Manual"
.SH NAME
erf, erff, erfl, \- error function
.SH SYNOPSIS
.nf
.B #include <math.h>

.BI "double erf(double " x );
.BI "float erff(float " x );
.BI "long double erfl(long double " x );

.fi
Link with \fI\-lm\fP.
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR erf ():
.RS 4
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.br
.BR erff (),
.BR erfl ():
.RS 4
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE\ >=\ 600 || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.ad b
.SH DESCRIPTION
These functions return the error function of
.IR x ,
defined as
.TP
    erf(x) = 2/sqrt(pi)* integral from 0 to x of exp(\-t*t) dt
.SH RETURN VALUE
On success, these functions return the error function of
.IR x ,
a value in the range [\-1,\ 1].

If
.I x
is a NaN, a NaN is returned.

If
.I x
is +0 (\-0), +0 (\-0) is returned.

If
.I x
is positive infinity (negative infinity),
+1 (\-1) is returned.

If
.I x
is subnormal,
a range error occurs,
and the return value is 2*x/sqrt(pi).
.SH ERRORS
See
.BR math_error (7)
for information on how to determine whether an error has occurred
when calling these functions.
.PP
The following errors can occur:
.TP
Range error: result underflow (\fIx\fP is subnormal)
.\" .I errno
.\" is set to
.\" .BR ERANGE .
An underflow floating-point exception
.RB ( FE_UNDERFLOW )
is raised.
.PP
These functions do not set
.IR errno .
.\" FIXME . Is it intentional that these functions do not set errno?
.\" Bug raised: http://sources.redhat.com/bugzilla/show_bug.cgi?id=6785
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw21 lb lb
l l l.
Interface	Attribute	Value
T{
.BR erf (),
.BR erff (),
.BR erfl ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C99, POSIX.1-2001, POSIX.1-2008.

The variant returning
.I double
also conforms to
SVr4, 4.3BSD.
.SH SEE ALSO
.BR cerf (3),
.BR erfc (3),
.BR exp (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 2008, Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH ERFC 3  2015-04-19 "GNU" "Linux Programmer's Manual"
.SH NAME
erfc, erfcf, erfcl \- complementary error function
.SH SYNOPSIS
.nf
.B #include <math.h>

.BI "double erfc(double " x );
.BI "float erfcf(float " x );
.BI "long double erfcl(long double " x );

.fi
Link with \fI\-lm\fP.
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR erfc ():
.RS 4
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.br
.BR erfcf (),
.BR erfcl ():
.RS 4
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE\ >=\ 600|| _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.ad b
.SH DESCRIPTION
These functions return the complementary error function of
.IR x ,
that is, 1.0 \- erf(x).
.SH RETURN VALUE
On success, these functions return the complementary error function of
.IR x ,
a value in the range [0,2].

If
.I x
is a NaN, a NaN is returned.

If
.I x
is +0 or \-0, 1 is returned.

If
.I x
is positive infinity,
+0 is returned.

If
.I x
is negative infinity,
+2 is returned.

If the function result underflows and produces an unrepresentable value,
the return value is 0.0.

If the function result underflows but produces a representable
(i.e., subnormal) value,
.\" e.g., erfc(27) on x86-32
that value is returned, and
a range error occurs.
.SH ERRORS
See
.BR math_error (7)
for information on how to determine whether an error has occurred
when calling these functions.
.PP
The following errors can occur:
.TP
Range error: result underflow (result is subnormal)
.\" .I errno
.\" is set to
.\" .BR ERANGE .
An underflow floating-point exception
.RB ( FE_UNDERFLOW )
is raised.
.PP
These functions do not set
.IR errno .
.\" FIXME . Is it intentional that these functions do not set errno?
.\" Bug raised: http://sources.redhat.com/bugzilla/show_bug.cgi?id=6785
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw24 lb lb
l l l.
Interface	Attribute	Value
T{
.BR erfc (),
.BR erfcf (),
.BR erfcl ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C99, POSIX.1-2001, POSIX.1-2008.

The variant returning
.I double
also conforms to
SVr4, 4.3BSD.
.SH NOTES
The
.BR erfc (),
.BR erfcf (),
and
.BR erfcl ()
functions are provided to avoid the loss accuracy that
would occur for the calculation 1-erf(x) for large values of
.IR x
(for which the value of erf(x) approaches 1).
.SH SEE ALSO
.BR cerf (3),
.BR erf (3),
.BR exp (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" %%%LICENSE_START(BSD_4_CLAUSE_UCB)
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\" %%%LICENSE_END
.\"
.\"	From: @(#)err.3	8.1 (Berkeley) 6/9/93
.\" $FreeBSD: src/lib/libc/gen/err.3,v 1.11.2.5 2001/08/17 15:42:32 ru Exp $
.\"
.\" 2011-09-10, mtk, Converted from mdoc to man macros
.\"
.TH ERR 3 2015-05-07 "Linux" "Linux Programmer's Manual"
.SH NAME
err, verr, errx, verrx, warn, vwarn, warnx, vwarnx \- formatted error messages
.SH SYNOPSIS
.nf
.B #include <err.h>
.sp
.BI "void err(int " eval ", const char *" fmt ", ...);"
.sp
.BI "void errx(int " eval ", const char *" fmt ", ...);"
.sp
.BI "void warn(const char *" fmt ", ...);"
.sp
.BI "void warnx(const char *" fmt ", ...);"
.sp
.B #include <stdarg.h>
.sp
.BI "void verr(int " eval ", const char *" fmt ", va_list " args );
.sp
.BI "void verrx(int " eval ", const char *" fmt ", va_list " args );
.sp
.BI "void vwarn(const char *" fmt ", va_list " args );
.sp
.BI "void vwarnx(const char *" fmt ", va_list " args );
.fi
.SH DESCRIPTION
The
.BR err ()
and
.BR warn ()
family of functions display a formatted error message on the standard
error output.
In all cases, the last component of the program name, a colon character,
and a space are output.
If the
.I fmt
argument is not NULL, the
.BR printf (3)-like
formatted error message is output.
The output is terminated by a newline character.
.PP
The
.BR err (),
.BR verr (),
.BR warn (),
and
.BR vwarn ()
functions append an error message obtained from
.BR strerror (3)
based on the global variable
.IR errno ,
preceded by another colon and space unless the
.I fmt
argument is
NULL.
.PP
The
.BR errx ()
and
.BR warnx ()
functions do not append an error message.
.PP
The
.BR err (),
.BR verr (),
.BR errx (),
and
.BR verrx ()
functions do not return, but exit with the value of the argument
.IR eval .
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw17 lb lb
l l l.
Interface	Attribute	Value
T{
.BR err (),
.BR errx (),
.br
.BR warn (),
.BR warnx (),
.br
.BR verr (),
.BR verrx (),
.br
.BR vwarn (),
.BR vwarnx ()
T}	Thread safety	MT-Safe locale
.TE

.SH CONFORMING TO
These functions are nonstandard BSD extensions.
.\" .SH HISTORY
.\" The
.\" .BR err ()
.\" and
.\" .BR warn ()
.\" functions first appeared in
.\" 4.4BSD.
.SH EXAMPLE
Display the current
.I errno
information string and exit:
.in +4n
.nf

p = malloc(size);
if (p == NULL)
    err(1, NULL);
fd = open(file_name, O_RDONLY, 0);
if (fd == \-1)
    err(1, "%s", file_name);
.fi
.in
.PP
Display an error message and exit:
.in +4n
.nf

if (tm.tm_hour < START_TIME)
    errx(1, "too early, wait until %s", start_time_string);
.fi
.in
.PP
Warn of an error:
.in +4n
.nf

fd = open(raw_device, O_RDONLY, 0);
if (fd == \-1)
    warnx("%s: %s: trying the block device",
            raw_device, strerror(errno));
fd = open(block_device, O_RDONLY, 0);
if (fd == \-1)
    err(1, "%s", block_device);
.fi
.in
.SH SEE ALSO
.BR error (3),
.BR exit (3),
.BR perror (3),
.BR printf (3),
.BR strerror (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1996 Andries Brouwer (aeb@cwi.nl)
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.\" 5 Oct 2002, Modified by Michael Kerrisk <mtk.manpages@gmail.com>
.\" 	Updated for POSIX.1 2001
.\" 2004-12-17 Martin Schulze <joey@infodrom.org>, mtk
.\"	Removed errno declaration prototype, added notes
.\" 2006-02-09 Kurt Wall, mtk
.\"     Added non-POSIX errors
.\"
.TH ERRNO 3 2015-01-22 "" "Linux Programmer's Manual"
.SH NAME
errno \- number of last error
.SH SYNOPSIS
.B #include <errno.h>
.\".sp
.\".BI "extern int " errno ;
.SH DESCRIPTION
The
.I <errno.h>
header file defines the integer variable
.IR errno ,
which is set by system calls and some library functions in the event
of an error to indicate what went wrong.
Its value is significant only when the return value of
the call indicated an error
(i.e., \-1 from most system calls;
\-1 or NULL from most library functions);
a function that succeeds
.I is
allowed to change
.IR errno .

Valid error numbers are all nonzero;
.I errno
is never set to zero
by any system call or library function.

For some system calls and library functions (e.g.,
.BR getpriority (2)),
\-1 is a valid return on success.
In such cases, a successful return can be distinguished from an error
return by setting
.I errno
to zero before the call, and then,
if the call returns a status that indicates that an error
may have occurred, checking to see if
.I errno
has a nonzero value.

.I errno
is defined by the ISO C standard to be a modifiable lvalue
of type
.IR int ,
and must not be explicitly declared;
.I errno
may be a macro.
.I errno
is thread-local; setting it in one thread
does not affect its value in any other thread.

All the error names specified by POSIX.1
must have distinct values, with the exception of
.B EAGAIN
and
.BR EWOULDBLOCK ,
which may be the same.

.\" The following is now
.\" POSIX.1 (2001 edition) lists the following symbolic error names.  Of
.\" these, \fBEDOM\fP and \fBERANGE\fP are in the ISO C standard.  ISO C
.\" Amendment 1 defines the additional error number \fBEILSEQ\fP for
.\" coding errors in multibyte or wide characters.
.\"
Below is a list of the symbolic error names that are defined on Linux.
Some of these are marked
.IR POSIX.1 ,
indicating that the name is defined by POSIX.1-2001, or
.IR C99 ,
indicating that the name is defined by C99.
.TP 16
.B E2BIG
Argument list too long (POSIX.1)
.TP
.B EACCES
Permission denied (POSIX.1)
.TP
.B EADDRINUSE
Address already in use (POSIX.1)
.TP
.B EADDRNOTAVAIL
Address not available (POSIX.1)
.\" EADV is only an error on HURD(?)
.TP
.B EAFNOSUPPORT
Address family not supported (POSIX.1)
.TP
.B EAGAIN
Resource temporarily unavailable (may be the same value as
.BR EWOULDBLOCK )
(POSIX.1)
.TP
.B EALREADY
Connection already in progress (POSIX.1)
.TP
.B EBADE
Invalid exchange
.TP
.B EBADF
Bad file descriptor (POSIX.1)
.TP
.B EBADFD
File descriptor in bad state
.TP
.B EBADMSG
Bad message (POSIX.1)
.TP
.B EBADR
Invalid request descriptor
.TP
.B EBADRQC
Invalid request code
.TP
.B EBADSLT
Invalid slot
.\" EBFONT is defined but appears not to be used by kernel or glibc.
.TP
.B EBUSY
Device or resource busy (POSIX.1)
.TP
.B ECANCELED
Operation canceled (POSIX.1)
.TP
.B ECHILD
No child processes (POSIX.1)
.TP
.B ECHRNG
Channel number out of range
.TP
.B ECOMM
Communication error on send
.TP
.B ECONNABORTED
Connection aborted (POSIX.1)
.TP
.B ECONNREFUSED
Connection refused (POSIX.1)
.TP
.B ECONNRESET
Connection reset (POSIX.1)
.TP
.B EDEADLK
Resource deadlock avoided (POSIX.1)
.TP
.B EDEADLOCK
Synonym for
.B EDEADLK
.TP
.B EDESTADDRREQ
Destination address required (POSIX.1)
.TP
.B EDOM
Mathematics argument out of domain of function (POSIX.1, C99)
.\" EDOTDOT is defined but appears to be unused
.TP
.B EDQUOT
.\" POSIX just says "Reserved"
Disk quota exceeded (POSIX.1)
.TP
.B EEXIST
File exists (POSIX.1)
.TP
.B EFAULT
Bad address (POSIX.1)
.TP
.B EFBIG
File too large (POSIX.1)
.TP
.B EHOSTDOWN
Host is down
.TP
.B EHOSTUNREACH
Host is unreachable (POSIX.1)
.TP
.B EIDRM
Identifier removed (POSIX.1)
.TP
.B EILSEQ
Illegal byte sequence (POSIX.1, C99)
.TP
.B EINPROGRESS
Operation in progress (POSIX.1)
.TP
.B EINTR
Interrupted function call (POSIX.1); see
.BR signal (7).
.TP
.B EINVAL
Invalid argument (POSIX.1)
.TP
.B EIO
Input/output error (POSIX.1)
.TP
.B EISCONN
Socket is connected (POSIX.1)
.TP
.B EISDIR
Is a directory (POSIX.1)
.TP
.B EISNAM
Is a named type file
.TP
.B EKEYEXPIRED
Key has expired
.TP
.B EKEYREJECTED
Key was rejected by service
.TP
.B EKEYREVOKED
Key has been revoked
.TP
.B EL2HLT
Level 2 halted
.TP
.B EL2NSYNC
Level 2 not synchronized
.TP
.B EL3HLT
Level 3 halted
.TP
.B EL3RST
Level 3 halted
.TP
.B ELIBACC
Cannot access a needed shared library
.TP
.B ELIBBAD
Accessing a corrupted shared library
.TP
.B ELIBMAX
Attempting to link in too many shared libraries
.TP
.B ELIBSCN
lib section in a.out corrupted
.TP
.B ELIBEXEC
Cannot exec a shared library directly
.TP
.B ELOOP
Too many levels of symbolic links (POSIX.1)
.\" ELNRNG is defined but appears to be unused
.TP
.B EMEDIUMTYPE
Wrong medium type
.TP
.B EMFILE
Too many open files (POSIX.1);
commonly caused by exceeding the
.BR RLIMIT_NOFILE
resource limit described in
.BR getrlimit (2)
.TP
.B EMLINK
Too many links (POSIX.1)
.TP
.B EMSGSIZE
Message too long (POSIX.1)
.TP
.B EMULTIHOP
.\" POSIX says "Reserved"
Multihop attempted (POSIX.1)
.TP
.B ENAMETOOLONG
Filename too long (POSIX.1)
.\" ENAVAIL is defined, but appears not to be used
.TP
.B ENETDOWN
Network is down (POSIX.1)
.TP
.B ENETRESET
Connection aborted by network (POSIX.1)
.TP
.B ENETUNREACH
Network unreachable (POSIX.1)
.TP
.B ENFILE
Too many open files in system (POSIX.1)
.\" ENOANO is defined but appears to be unused.
.TP
.B ENOBUFS
No buffer space available (POSIX.1 (XSI STREAMS option))
.\" ENOCSI is defined but appears to be unused.
.TP
.B ENODATA
No message is available on the STREAM head read queue (POSIX.1)
.TP
.B ENODEV
No such device (POSIX.1)
.TP
.B ENOENT
No such file or directory (POSIX.1)
.TP
.B ENOEXEC
Exec format error (POSIX.1)
.TP
.B ENOKEY
Required key not available
.TP
.B ENOLCK
No locks available (POSIX.1)
.TP
.B ENOLINK
.\" POSIX says "Reserved"
Link has been severed (POSIX.1)
.TP
.B ENOMEDIUM
No medium found
.TP
.B ENOMEM
Not enough space (POSIX.1)
.TP
.B ENOMSG
No message of the desired type (POSIX.1)
.TP
.B ENONET
Machine is not on the network
.TP
.B ENOPKG
Package not installed
.TP
.B ENOPROTOOPT
Protocol not available (POSIX.1)
.TP
.B ENOSPC
No space left on device (POSIX.1)
.TP
.B ENOSR
No STREAM resources (POSIX.1 (XSI STREAMS option))
.TP
.B ENOSTR
Not a STREAM (POSIX.1 (XSI STREAMS option))
.TP
.B ENOSYS
Function not implemented (POSIX.1)
.TP
.B ENOTBLK
Block device required
.TP
.B ENOTCONN
The socket is not connected (POSIX.1)
.TP
.B ENOTDIR
Not a directory (POSIX.1)
.TP
.B ENOTEMPTY
Directory not empty (POSIX.1)
.\" ENOTNAM is defined but appears to be unused.
.TP
.B ENOTSOCK
Not a socket (POSIX.1)
.TP
.B ENOTSUP
Operation not supported (POSIX.1)
.TP
.B ENOTTY
Inappropriate I/O control operation (POSIX.1)
.TP
.B ENOTUNIQ
Name not unique on network
.TP
.B ENXIO
No such device or address (POSIX.1)
.TP
.B EOPNOTSUPP
Operation not supported on socket (POSIX.1)
.sp
.RB ( ENOTSUP
and
.B EOPNOTSUPP
have the same value on Linux, but
according to POSIX.1 these error values should be distinct.)
.TP
.B EOVERFLOW
Value too large to be stored in data type (POSIX.1)
.TP
.B EPERM
Operation not permitted (POSIX.1)
.TP
.B EPFNOSUPPORT
Protocol family not supported
.TP
.B EPIPE
Broken pipe (POSIX.1)
.TP
.B EPROTO
Protocol error (POSIX.1)
.TP
.B EPROTONOSUPPORT
Protocol not supported (POSIX.1)
.TP
.B EPROTOTYPE
Protocol wrong type for socket (POSIX.1)
.TP
.B ERANGE
Result too large (POSIX.1, C99)
.TP
.B EREMCHG
Remote address changed
.TP
.B EREMOTE
Object is remote
.TP
.B EREMOTEIO
Remote I/O error
.TP
.B ERESTART
Interrupted system call should be restarted
.TP
.B EROFS
Read-only filesystem (POSIX.1)
.TP
.B ESHUTDOWN
Cannot send after transport endpoint shutdown
.TP
.B ESPIPE
Invalid seek (POSIX.1)
.TP
.B ESOCKTNOSUPPORT
Socket type not supported
.TP
.B ESRCH
No such process (POSIX.1)
.\" ESRMNT is defined but appears not to be used
.TP
.B ESTALE
Stale file handle (POSIX.1)
.sp
This error can occur for NFS and for other filesystems
.TP
.B ESTRPIPE
Streams pipe error
.TP
.B ETIME
Timer expired
(POSIX.1 (XSI STREAMS option))
.sp
(POSIX.1 says "STREAM
.BR ioctl (2)
timeout")
.TP
.B ETIMEDOUT
Connection timed out (POSIX.1)
.\" ETOOMANYREFS is defined, but appears not to be used.
.TP
.B ETXTBSY
Text file busy (POSIX.1)
.TP
.B EUCLEAN
Structure needs cleaning
.TP
.B EUNATCH
Protocol driver not attached
.TP
.B EUSERS
Too many users
.TP
.B EWOULDBLOCK
Operation would block (may be same value as
.BR EAGAIN )
(POSIX.1)
.TP
.B EXDEV
Improper link (POSIX.1)
.TP
.B EXFULL
Exchange full
.SH NOTES
A common mistake is to do
.in +4n
.nf

if (somecall() == \-1) {
    printf("somecall() failed\en");
    if (errno == ...) { ... }
}

.fi
.in
where
.I errno
no longer needs to have the value it had upon return from
.IR somecall ()
(i.e., it may have been changed by the
.BR printf (3)).
If the value of
.I errno
should be preserved across a library call, it must be saved:
.in +4n
.nf

if (somecall() == \-1) {
    int errsv = errno;
    printf("somecall() failed\en");
    if (errsv == ...) { ... }
}
.fi
.in
.PP
It was common in traditional C to declare
.I errno
manually
(i.e.,
.IR "extern int errno" )
instead of including
.IR <errno.h> .
.BR "Do not do this" .
It will not work with modern versions of the C library.
However, on (very) old UNIX systems, there may be no
.I <errno.h>
and the declaration is needed.
.SH SEE ALSO
.BR errno (1),  \" In the moreutils package
.BR err (3),
.BR error (3),
.BR perror (3),
.BR strerror (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2006 Justin Pryzby <pryzbyj@justinpryzby.com>
.\" and Copyright (C) 2006 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(PERMISSIVE_MISC)
.\" Permission is hereby granted, free of charge, to any person obtaining
.\" a copy of this software and associated documentation files (the
.\" "Software"), to deal in the Software without restriction, including
.\" without limitation the rights to use, copy, modify, merge, publish,
.\" distribute, sublicense, and/or sell copies of the Software, and to
.\" permit persons to whom the Software is furnished to do so, subject to
.\" the following conditions:
.\"
.\" The above copyright notice and this permission notice shall be
.\" included in all copies or substantial portions of the Software.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
.\" EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
.\" MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
.\" IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
.\" CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
.\" TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
.\" SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
.\" %%%LICENSE_END
.\"
.\" References:
.\"   glibc manual and source
.TH ERROR 3 2010-08-29 "GNU" "Linux Programmer's Manual"
.SH NAME
error, error_at_line, error_message_count, error_one_per_line,
error_print_progname \- glibc error reporting functions
.SH SYNOPSIS
.nf
.B #include <error.h>

.BI "void error(int " status ", int " errnum ", const char *" format ", ...);"

.BI "void error_at_line(int " status ", int " errnum ", const char *" filename ,
.BI "                   unsigned int " linenum ", const char *" format ", ...);"

.BI "extern unsigned int " error_message_count ;

.BI "extern int " error_one_per_line ;

.BI "extern void (*" error_print_progname ") (void);"
.fi
.SH DESCRIPTION
.BR error ()
is a general error-reporting function.
It flushes
.IR stdout ,
and then outputs to
.I stderr
the program name, a colon and a space, the message specified by the
.BR printf (3)-style
format string \fIformat\fP, and, if \fIerrnum\fP is
nonzero, a second colon and a space followed by the string given by
.IR strerror(errnum) .
Any arguments required for
.I format
should follow
.I format
in the argument list.
The output is terminated by a newline character.

The program name printed by
.BR error ()
is the value of the global variable
.BR program_invocation_name (3).
.I program_invocation_name
initially has the same value as
.IR main ()'s
.IR argv[0] .
The value of this variable can be modified to change the output of
.BR error ().

If \fIstatus\fP has a nonzero value, then
.BR error ()
calls
.BR exit (3)
to terminate the program using the given value as the exit status.

The
.BR error_at_line ()
function is exactly the same as
.BR error (),
except for the addition of the arguments
.I filename
and
.IR linenum .
The output produced is as for
.BR error (),
except that after the program name are written: a colon, the value of
.IR filename ,
a colon, and the value of
.IR linenum .
The preprocessor values \fB__LINE__\fP and
\fB__FILE__\fP may be useful when calling
.BR error_at_line (),
but other values can also be used.
For example, these arguments could refer to a location in an input file.

If the global variable \fIerror_one_per_line\fP is set nonzero,
a sequence of
.BR error_at_line ()
calls with the
same value of \fIfilename\fP and \fIlinenum\fP will result in only
one message (the first) being output.

The global variable \fIerror_message_count\fP counts the number of
messages that have been output by
.BR error ()
and
.BR error_at_line ().

If the global variable \fIerror_print_progname\fP
is assigned the address of a function
(i.e., is not NULL), then that function is called
instead of prefixing the message with the program name and colon.
The function should print a suitable string to
.IR stderr .
.SH CONFORMING TO
These functions and variables are GNU extensions, and should not be
used in programs intended to be portable.
.SH SEE ALSO
.BR err (3),
.BR errno (3),
.BR exit (3),
.BR perror (3),
.BR program_invocation_name (3),
.BR strerror (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 2002 Ian Redfern (redferni@logica.com)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     FreeBSD 4.4 man pages
.\"
.\" Minor additions, aeb, 2013-06-21
.\"
.TH ETHER_ATON 3  2014-07-08 "GNU" "Linux Programmer's Manual"
.SH NAME
ether_aton, ether_ntoa, ether_ntohost, ether_hostton, ether_line,
ether_ntoa_r, ether_aton_r \- Ethernet address manipulation routines
.SH SYNOPSIS
.nf
.B #include <netinet/ether.h>
.sp
.BI "char *ether_ntoa(const struct ether_addr *" addr );
.sp
.BI "struct ether_addr *ether_aton(const char *" asc );
.sp
.BI "int ether_ntohost(char *" hostname ", const struct ether_addr *" addr );
.sp
.BI "int ether_hostton(const char *" hostname ", struct ether_addr *" addr );
.sp
.BI "int ether_line(const char *" line ", struct ether_addr *" addr ,
.BI "               char *" hostname );
.sp
/* GNU extensions */
.br
.BI "char *ether_ntoa_r(const struct ether_addr *" addr ", char *" buf );
.sp
.BI "struct ether_addr *ether_aton_r(const char *" asc ,
.BI "                                struct ether_addr *" addr );
.fi
.SH DESCRIPTION
.BR ether_aton ()
converts the 48-bit Ethernet host address
.I asc
from the standard hex-digits-and-colons notation into binary data in
network byte order and returns a pointer to it in a statically
allocated buffer, which subsequent calls will
overwrite.
.BR ether_aton ()
returns NULL if the address is invalid.
.PP
The
.BR ether_ntoa ()
function converts the Ethernet host address
.I addr
given in network byte order to a string in standard
hex-digits-and-colons notation, omitting leading zeros.
The string is returned in a statically allocated buffer,
which subsequent calls will overwrite.
.PP
The
.BR ether_ntohost ()
function maps an Ethernet address to the
corresponding hostname in
.I /etc/ethers
and returns nonzero if it cannot be found.
.PP
The
.BR ether_hostton ()
function maps a hostname to the
corresponding Ethernet address in
.I /etc/ethers
and returns nonzero if it cannot be found.
.PP
The
.BR ether_line ()
function parses a line in
.I /etc/ethers
format (ethernet address followed by whitespace followed by
hostname; \(aq#\(aq introduces a comment) and returns an address
and hostname pair, or nonzero if it cannot be parsed.
The buffer pointed to by
.I hostname
must be sufficiently long, for example, have the same length as
.IR line .
.PP
The functions
.BR ether_ntoa_r ()
and
.BR ether_aton_r ()
are reentrant
thread-safe versions of
.BR ether_ntoa ()
and
.BR ether_aton ()
respectively, and do not use static buffers.
.PP
The structure
.I ether_addr
is defined in
.I <net/ethernet.h>
as:
.sp
.in +4n
.nf
struct ether_addr {
    uint8_t ether_addr_octet[6];
}
.fi
.in
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.ad l
.TS
allbox;
lbw33 lb lb
l l l.
Interface	Attribute	Value
T{
.BR ether_aton (),
.BR ether_ntoa ()
T}	Thread safety	MT-Unsafe
T{
.BR ether_ntohost (),
.BR ether_hostton (),
.BR ether_line (),
.BR ether_ntoa_r (),
.BR ether_aton_r ()
T}	Thread safety	MT-Safe
.TE
.ad
.SH CONFORMING TO
4.3BSD, SunOS.
.SH BUGS
In glibc 2.2.5 and earlier, the implementation of
.BR ether_line ()
.\" The fix was presumably commit c0a0f9a32c8baa6ab93d00eb42d92c02e9e146d7
.\" which was in glibc 2.3
is broken.
.SH SEE ALSO
.BR ethers (5)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2007 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH EUIDACCESS 3 2015-03-02 "" "Linux Programmer's Manual"
.SH NAME
euidaccess, eaccess \- check effective user's permissions for a file
.SH SYNOPSIS
.nf
.BR "#define _GNU_SOURCE" "             /* See feature_test_macros(7) */"
.B #include <unistd.h>
.sp
.BI "int euidaccess(const char *" pathname ", int " mode );
.BI "int eaccess(const char *" pathname ", int " mode );
.fi
.SH DESCRIPTION
Like
.BR access (2),
.BR euidaccess ()
checks permissions and existence of the file identified by its argument
.IR pathname .
However, whereas
.BR access (2)
performs checks using the real user and group identifiers of the process,
.BR euidaccess ()
uses the effective identifiers.

.I mode
is a mask consisting of one or more of
.BR R_OK ", " W_OK ", " X_OK ", and " F_OK ,
with the same meanings as for
.BR access (2).

.BR eaccess ()
is a synonym for
.BR euidaccess (),
provided for compatibility with some other systems.
.SH RETURN VALUE
On success (all requested permissions granted), zero is returned.
On error (at least one bit in
.I mode
asked for a permission that is denied, or some other error occurred),
\-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
As for
.BR access (2).
.SH VERSIONS
The
.BR eaccess ()
function was added to glibc in version 2.4.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw23 lb lb
l l l.
Interface	Attribute	Value
T{
.BR euidaccess (),
.BR eaccess ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
These functions are nonstandard.
Some other systems have an
.\" e.g., FreeBSD 6.1.
.BR eaccess ()
function.
.SH NOTES
.IR Warning :
Using this function to check a process's permissions on a file before
performing some operation based on that information leads to race conditions:
the file permissions may change between the two steps.
Generally, it is safer just to attempt the desired operation and handle
any permission error that occurs.

This function always dereferences symbolic links.
If you need to check the permissions on a symbolic link, use
.BR faccessat (2)
with the flags
.BR AT_EACCESS
and
.BR AT_SYMLINK_NOFOLLOW .
.SH SEE ALSO
.BR access (2),
.BR chmod (2),
.BR chown (2),
.BR faccessat (2),
.BR open (2),
.BR setgid (2),
.BR setuid (2),
.BR stat (2),
.BR credentials (7),
.BR path_resolution (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1991 The Regents of the University of California.
.\" All rights reserved.
.\"
.\" %%%LICENSE_START(BSD_4_CLAUSE_UCB)
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\" %%%LICENSE_END
.\"
.\"     @(#)exec.3	6.4 (Berkeley) 4/19/91
.\"
.\" Converted for Linux, Mon Nov 29 11:12:48 1993, faith@cs.unc.edu
.\" Updated more for Linux, Tue Jul 15 11:54:18 1997, pacman@cqc.com
.\" Modified, 24 Jun 2004, Michael Kerrisk <mtk.manpages@gmail.com>
.\"     Added note on casting NULL
.\"
.TH EXEC 3  2015-04-19 "GNU" "Linux Programmer's Manual"
.SH NAME
execl, execlp, execle, execv, execvp, execvpe \- execute a file
.SH SYNOPSIS
.B #include <unistd.h>
.sp
.B extern char **environ;
.sp
.BI "int execl(const char *" path ", const char *" arg ", ..."
.br
.B  "                /* (char  *) NULL */);"
.br
.BI "int execlp(const char *" file ", const char *" arg ", ..."
.br
.B  "                /* (char  *) NULL */);"
.br
.BI "int execle(const char *" path ", const char *" arg ", ..."
.br
.BI "                /*, (char *) NULL, char * const " envp "[] */);"
.br
.BI "int execv(const char *" path ", char *const " argv "[]);"
.br
.BI "int execvp(const char *" file ", char *const " argv "[]);"
.br
.BI "int execvpe(const char *" file ", char *const " argv "[],"
.br
.BI "                char *const " envp "[]);"
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR execvpe ():
_GNU_SOURCE
.SH DESCRIPTION
The
.BR exec ()
family of functions replaces the current process image with a new process
image.
The functions described in this manual page are front-ends for
.BR execve (2).
(See the manual page for
.BR execve (2)
for further details about the replacement of the current process image.)
.PP
The initial argument for these functions is the name of a file that is
to be executed.
.PP
The
.I "const char\ *arg"
and subsequent ellipses in the
.BR execl (),
.BR execlp (),
and
.BR execle ()
functions can be thought of as
.IR arg0 ,
.IR arg1 ,
\&...,
.IR argn .
Together they describe a list of one or more pointers to null-terminated
strings that represent the argument list available to the executed program.
The first argument, by convention, should point to the filename associated
with the file being executed.
The list of arguments
.I must
be terminated by a null pointer,
and, since these are variadic functions, this pointer must be cast
.IR "(char\ *) NULL" .
.PP
The
.BR execv (),
.BR execvp (),
and
.BR execvpe ()
functions provide an array of pointers to null-terminated strings that
represent the argument list available to the new program.
The first argument, by convention, should point to the filename
associated with the file being executed.
The array of pointers
.I must
be terminated by a null pointer.
.PP
The
.BR execle ()
and
.BR execvpe ()
functions allow the caller to specify the environment of the
executed program via the argument
.IR envp .
The
.I envp
argument is an array of pointers to null-terminated strings and
.I must
be terminated by a null pointer.
The other functions take the environment for the new process
image from the external variable
.I environ
in the calling process.
.SS Special semantics for execlp() and execvp()
.PP
The
.BR execlp (),
.BR execvp (),
and
.BR execvpe ()
functions duplicate the actions of the shell in
searching for an executable file
if the specified filename does not contain a slash (/) character.
The file is sought in the colon-separated list of directory pathnames
specified in the
.B PATH
environment variable.
If this variable isn't defined, the path list defaults to
the current directory followed by the list of directories returned by
.IR confstr(_CS_PATH) .
(This
.BR confstr (3)
call typically returns the value "/bin:/usr/bin".)

If the specified filename includes a slash character, then
.B PATH
is ignored, and the file at the specified pathname is executed.

In addition, certain errors are treated specially.

If permission is denied for a file (the attempted
.BR execve (2)
failed with the error
.BR EACCES ),
these functions will continue searching the rest of the search path.
If no other file is found, however,
they will return with
.I errno
set to
.BR EACCES .

If the header of a file isn't recognized (the attempted
.BR execve (2)
failed with the error
.BR ENOEXEC ),
these functions will execute the shell
.RI ( /bin/sh )
with the path of the file as its first argument.
(If this attempt fails, no further searching is done.)
.SH RETURN VALUE
The
.BR exec ()
functions return only if an error has occurred.
The return value is \-1, and
.I errno
is set to indicate the error.
.SH ERRORS
All of these functions may fail and set
.I errno
for any of the errors specified for
.BR execve (2).
.SH VERSIONS
The
.BR execvpe ()
function first appeared in glibc 2.11.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw29 lb lb
l l l.
Interface	Attribute	Value
T{
.BR execl (),
.BR execle (),
.BR execv ()
T}	Thread safety	MT-Safe
T{
.BR execlp (),
.BR execvp (),
.BR execvpe ()
T}	Thread safety	MT-Safe env
.TE
.SH CONFORMING TO
POSIX.1-2001, POSIX.1-2008.

The
.BR execvpe ()
function is a GNU extension.
.SH NOTES
On some other systems, the default path (used when the environment
does not contain the variable \fBPATH\fR) has the current working
directory listed after
.I /bin
and
.IR /usr/bin ,
as an anti-Trojan-horse measure.
Linux uses here the
traditional "current directory first" default path.
.PP
The behavior of
.BR execlp ()
and
.BR execvp ()
when errors occur while attempting to execute the file is historic
practice, but has not traditionally been documented and is not specified by
the POSIX standard.
BSD (and possibly other systems) do an automatic
sleep and retry if
.B ETXTBSY
is encountered.
Linux treats it as a hard
error and returns immediately.
.PP
Traditionally, the functions
.BR execlp ()
and
.BR execvp ()
ignored all errors except for the ones described above and
.B ENOMEM
and
.BR E2BIG ,
upon which they returned.
They now return if any error other than the ones
described above occurs.
.SH SEE ALSO
.BR sh (1),
.BR execve (2),
.BR execveat (2),
.BR fork (2),
.BR ptrace (2),
.BR fexecve (3),
.BR environ (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2001 Andries Brouwer <aeb@cwi.nl>.
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" FIXME . There are a lot of other process termination actions that
.\" could be listed on this page. See, for example, the list in the
.\" POSIX exit(3p) page.
.\"
.TH EXIT 3  2015-03-02 "Linux" "Linux Programmer's Manual"
.SH NAME
exit \- cause normal process termination
.SH SYNOPSIS
.nf
.B #include <stdlib.h>
.sp
.BI "void exit(int " status );
.fi
.SH DESCRIPTION
The
.BR exit ()
function causes normal process termination and the
value of \fIstatus & 0377\fP is returned to the parent
(see
.BR wait (2)).
.LP
All functions registered with
.BR atexit (3)
and
.BR on_exit (3)
are called, in the reverse order of their registration.
(It is possible for one of these functions to use
.BR atexit (3)
or
.BR on_exit (3)
to register an additional
function to be executed during exit processing;
the new registration is added to the front of the list of functions
that remain to be called.)
If one of these functions does not return
(e.g., it calls
.BR _exit (2),
or kills itself with a signal),
then none of the remaining functions is called,
and further exit processing (in particular, flushing of
.BR stdio (3)
streams) is abandoned.
If a function has been registered multiple times using
.BR atexit (3)
or
.BR on_exit (3),
then it is called as many times as it was registered.
.LP
All open
.BR stdio (3)
streams are flushed and closed.
Files created by
.BR tmpfile (3)
are removed.
.LP
The C standard specifies two constants,
\fBEXIT_SUCCESS\fP and \fBEXIT_FAILURE\fP,
that may be passed to
.BR exit ()
to indicate successful or unsuccessful
termination, respectively.
.SH RETURN VALUE
The
.BR exit ()
function does not return.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR exit ()
T}	Thread safety	MT-Unsafe race:exit
.TE
.PP
The
.BR exit ()
function uses a global variable that is not protected,
so it is not thread-safe.
.SH CONFORMING TO
SVr4, 4.3BSD, POSIX.1-2001, C89, C99.
.SH NOTES
.LP
It is undefined what happens if one of the
functions registered using
.BR atexit (3)
and
.BR on_exit (3)
calls either
.BR exit ()
or
.BR longjmp (3).
Note that a call to
.BR execve (2)
removes registrations created using
.BR atexit (3)
and
.BR on_exit (3).
.LP
The use of
.B EXIT_SUCCESS
and
.B EXIT_FAILURE
is slightly more portable
(to non-UNIX environments) than the use of 0 and some nonzero value
like 1 or \-1.
In particular, VMS uses a different convention.
.LP
BSD has attempted to standardize exit codes; see the file
.IR <sysexits.h> .
.LP
After
.BR exit (),
the exit status must be transmitted to the
parent process.
There are three cases.
If the parent has set
.BR SA_NOCLDWAIT ,
or has set the
.B SIGCHLD
handler to
.BR SIG_IGN ,
the status is discarded.
If the parent was waiting on the child,
it is notified of the exit status.
In both cases the exiting
process dies immediately.
If the parent has not indicated that
it is not interested in the exit status, but is not waiting,
the exiting process turns into a "zombie" process
(which is nothing but a container for the single byte representing
the exit status) so that the parent can learn the exit status when
it later calls one of the
.BR wait (2)
functions.
.LP
If the implementation supports the
.B SIGCHLD
signal, this signal
is sent to the parent.
If the parent has set
.BR SA_NOCLDWAIT ,
it is undefined whether a
.B SIGCHLD
signal is sent.
.LP
If the process is a session leader and its controlling terminal
is the controlling terminal of the session, then each process in
the foreground process group of this controlling terminal
is sent a
.B SIGHUP
signal, and the terminal is disassociated
from this session, allowing it to be acquired by a new controlling
process.
.LP
If the exit of the process causes a process group to become orphaned,
and if any member of the newly orphaned process group is stopped,
then a
.B SIGHUP
signal followed by a
.B SIGCONT
signal will be
sent to each process in this process group.
See
.BR setpgid (2)
for an explanation of orphaned process groups.
.SH SEE ALSO
.BR _exit (2),
.BR setpgid (2),
.BR wait (2),
.BR atexit (3),
.BR on_exit (3),
.BR tmpfile (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\" and Copyright 2008, Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified 1993-07-24 by Rik Faith (faith@cs.unc.edu)
.\" Modified 1995-08-14 by Arnt Gulbrandsen <agulbra@troll.no>
.\" Modified 2002-07-27 by Walter Harms
.\" 	(walter.harms@informatik.uni-oldenburg.de)
.TH EXP10 3  2015-03-02  "GNU" "Linux Programmer's Manual"
.SH NAME
exp10, exp10f, exp10l \- base-10 exponential function
.SH SYNOPSIS
.nf
.BR "#define _GNU_SOURCE" "         /* See feature_test_macros(7) */"
.br
.B #include <math.h>
.sp
.BI "double exp10(double " x );
.br
.BI "float exp10f(float " x );
.br
.BI "long double exp10l(long double " x );
.fi
.sp
Link with \fI\-lm\fP.
.SH DESCRIPTION
These functions return the value of 10
raised to the power of
.IR x .
.SH RETURN VALUE
On success, these functions return the base-10 exponential value of
.IR x .

For various special cases, including the handling of infinity and NaN,
as well as overflows and underflows, see
.BR exp (3).
.SH ERRORS
See
.BR math_error (7)
for information on how to determine whether an error has occurred
when calling these functions.

For a discussion of the errors that can occur for these functions, see
.BR exp (3).
.SH VERSIONS
These functions first appeared in glibc in version 2.1.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw28 lb lb
l l l.
Interface	Attribute	Value
T{
.BR exp10 (),
.BR exp10f (),
.BR exp10l ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
These functions are GNU extensions.
.SH BUGS
Prior to version 2.19, the glibc implementation of these functions did not set
.I errno
to
.B ERANGE
when an underflow error occurred.
.\" http://sources.redhat.com/bugzilla/show_bug.cgi?id=6787
.SH SEE ALSO
.BR cbrt (3),
.BR exp (3),
.BR exp2 (3),
.BR log10 (3),
.BR sqrt (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\" and Copyright 2008, Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified 1993-07-24 by Rik Faith (faith@cs.unc.edu)
.\" Modified 1995-08-14 by Arnt Gulbrandsen <agulbra@troll.no>
.\" Modified 2002-07-27 by Walter Harms
.\" 	(walter.harms@informatik.uni-oldenburg.de)
.\"
.TH EXP2 3  2015-04-19  "" "Linux Programmer's Manual"
.SH NAME
exp2, exp2f, exp2l \- base-2 exponential function
.SH SYNOPSIS
.nf
.B #include <math.h>
.sp
.BI "double exp2(double " x );
.br
.BI "float exp2f(float " x );
.br
.BI "long double exp2l(long double " x );
.fi
.sp
Link with \fI\-lm\fP.
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR exp2 (),
.BR exp2f (),
.BR exp2l ():
.RS 4
_XOPEN_SOURCE\ >=\ 600 || _ISOC99_SOURCE || _POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.ad b
.SH DESCRIPTION
These functions return the value of 2 raised to the power of
.IR x .
.SH RETURN VALUE
On success, these functions return the base-2 exponential value of
.IR x .

For various special cases, including the handling of infinity and NaN,
as well as overflows and underflows, see
.BR exp (3).
.SH ERRORS
See
.BR math_error (7)
for information on how to determine whether an error has occurred
when calling these functions.

For a discussion of the errors that can occur for these functions, see
.BR exp (3).
.SH VERSIONS
These functions first appeared in glibc in version 2.1.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw24 lb lb
l l l.
Interface	Attribute	Value
T{
.BR exp2 (),
.BR exp2f (),
.BR exp2l ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C99, POSIX.1-2001, POSIX.1-2008.

The variant returning
.I double
also conforms to
SVr4, 4.3BSD, C89.
.SH SEE ALSO
.BR cbrt (3),
.BR cexp2 (3),
.BR exp (3),
.BR exp10 (3),
.BR sqrt (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\" and Copyright 2008, Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified 1993-07-24 by Rik Faith (faith@cs.unc.edu)
.\" Modified 1995-08-14 by Arnt Gulbrandsen <agulbra@troll.no>
.\" Modified 2002-07-27 by Walter Harms
.\" 	(walter.harms@informatik.uni-oldenburg.de)
.\"
.TH EXP 3  2015-04-19  "" "Linux Programmer's Manual"
.SH NAME
exp, expf, expl \- base-e exponential function
.SH SYNOPSIS
.nf
.B #include <math.h>
.sp
.BI "double exp(double " x );
.br
.BI "float expf(float " x );
.br
.BI "long double expl(long double " x );
.fi
.sp
Link with \fI\-lm\fP.
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR expf (),
.BR expl ():
.RS 4
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE\ >=\ 600 || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.ad b
.SH DESCRIPTION
These functions return the value of e (the base of natural
logarithms) raised to the power of
.IR x .
.SH RETURN VALUE
On success, these functions return the exponential value of
.IR x .

If
.I x
is a NaN,
a NaN is returned.

If
.I x
is positive infinity,
positive infinity is returned.

If
.I x
is negative infinity,
+0 is returned.

If the result underflows,
a range error occurs,
and zero is returned.

If the result overflows,
a range error occurs,
and the functions return
.RB + HUGE_VAL ,
.RB + HUGE_VALF ,
or
.RB + HUGE_VALL ,
respectively.
.SH ERRORS
See
.BR math_error (7)
for information on how to determine whether an error has occurred
when calling these functions.

The following errors can occur:
.TP
Range error, overflow
.I errno
is set to
.BR ERANGE .
An overflow floating-point exception
.RB ( FE_OVERFLOW )
is raised.
.TP
Range error, underflow
.I errno
is set to
.BR ERANGE .
An underflow floating-point exception
.RB ( FE_UNDERFLOW )
is raised.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw21 lb lb
l l l.
Interface	Attribute	Value
T{
.BR exp (),
.BR expf (),
.BR expl ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C99, POSIX.1-2001, POSIX.1-2008.

The variant returning
.I double
also conforms to
SVr4, 4.3BSD, C89.
.SH SEE ALSO
.BR cbrt (3),
.BR cexp (3),
.BR exp10 (3),
.BR exp2 (3),
.BR sqrt (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1995 Jim Van Zandt <jrv@vanzandt.mv.com>
.\" and Copyright 2008, Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified 2002-07-27 Walter Harms
.\" 	(walter.harms@informatik.uni-oldenburg.de)
.\"
.TH EXPM1 3  2015-04-19 "" "Linux Programmer's Manual"
.SH NAME
expm1, expm1f, expm1l \- exponential minus 1
.SH SYNOPSIS
.nf
.B #include <math.h>
.sp
.BI "double expm1(double " x );
.br
.BI "float expm1f(float " x );
.br
.BI "long double expm1l(long double " x );
.sp
.fi
Link with \fI\-lm\fP.
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR expm1 ():
.RS 4
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE\ >=\ 500 ||
_XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.br
.BR expm1f (),
.BR expm1l ():
.RS 4
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE\ >=\ 600 || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.ad b
.SH DESCRIPTION
These functions return a value equivalent to
.nf

    exp(x) \- 1

.fi
The result is computed in a way that is accurate even if the value of
.I x
is near
zero\(ema case where
.I "exp(x) \- 1"
would be inaccurate due to
subtraction of two numbers that are nearly equal.
.SH RETURN VALUE
On success, these functions return
.IR "exp(x)\ \-\ 1" .

If
.I x
is a NaN,
a NaN is returned.

If
.I x
is +0 (\-0),
+0 (\-0) is returned.

If
.I x
is positive infinity, positive infinity is returned.

If
.I x
is negative infinity, \-1 is returned.

If the result overflows, a range error occurs,
and the functions return
.RB - HUGE_VAL ,
.RB - HUGE_VALF ,
or
.RB - HUGE_VALL ,
respectively.
.SH ERRORS
See
.BR math_error (7)
for information on how to determine whether an error has occurred
when calling these functions.
.PP
The following errors can occur:
.TP
Range error, overflow
.I errno
is set to
.BR ERANGE
(but see BUGS).
An overflow floating-point exception
.RB ( FE_OVERFLOW )
is raised.
.\"
.\" POSIX.1 specifies an optional range error (underflow) if
.\" x is subnormal.  Glibc does not implement this.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw27 lb lb
l l l.
Interface	Attribute	Value
T{
.BR expm1 (),
.BR expm1f (),
.BR expm1l ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C99, POSIX.1-2001, POSIX.1-2008.
.\" BSD.
.SH BUGS
For some large negative
.I x
values (where the function result approaches \-1),
.BR expm1 ()
raises a bogus underflow floating-point exception.
.\" FIXME .
.\" Bug raised: http://sources.redhat.com/bugzilla/show_bug.cgi?id=6778

For some large positive
.I x
values,
.BR expm1 ()
raises a bogus invalid floating-point exception in addition to the expected
overflow exception, and returns a NaN instead of positive infinity.
.\" FIXME .
.\" Bug raised: http://sources.redhat.com/bugzilla/show_bug.cgi?id=6814
.\" e.g., expm1(1e5) through expm1(1.00199970127e5),
.\" but not expm1(1.00199970128e5) and beyond.

Before version 2.11,
.\" It looks like the fix was in 2.11, or possibly 2.12.
.\" I have no test system for 2.11, but 2.12 passes.
.\" From the source (sysdeps/i386/fpu/s_expm1.S) it looks
.\" like the changes were in 2.11.
the glibc implementation did not set
.\" http://sources.redhat.com/bugzilla/show_bug.cgi?id=6788
.I errno
to
.B ERANGE
when a range error occurred.
.SH SEE ALSO
.BR exp (3),
.BR log (3),
.BR log1p (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified Sat Jul 24 19:42:04 1993 by Rik Faith (faith@cs.unc.edu)
.\" Added fabsl, fabsf, aeb, 2001-06-07
.\"
.TH FABS 3  2015-04-19 "" "Linux Programmer's Manual"
.SH NAME
fabs, fabsf, fabsl \- absolute value of floating-point number
.SH SYNOPSIS
.nf
.B #include <math.h>
.sp
.BI "double fabs(double " x );
.br
.BI "float fabsf(float " x );
.br
.BI "long double fabsl(long double " x );
.fi
.sp
Link with \fI\-lm\fP.
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR fabsf (),
.BR fabsl ():
.RS 4
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE\ >=\ 600 || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.ad b
.SH DESCRIPTION
These functions return the absolute value of the floating-point
number
.IR x .
.SH RETURN VALUE
These functions return the absolute value of
.IR x .

If
.I x
is a NaN, a NaN is returned.

If
.I x
is \-0, +0 is returned.

If
.I x
is negative infinity or positive infinity, positive infinity is returned.
.SH ERRORS
No errors occur.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw24 lb lb
l l l.
Interface	Attribute	Value
T{
.BR fabs (),
.BR fabsf (),
.BR fabsl ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C99, POSIX.1-2001, POSIX.1-2008.

The variant returning
.I double
also conforms to
SVr4, 4.3BSD, C89.
.SH SEE ALSO
.BR abs (3),
.BR cabs (3),
.BR ceil (3),
.BR floor (3),
.BR labs (3),
.BR rint (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1990, 1991 The Regents of the University of California.
.\" All rights reserved.
.\"
.\" This code is derived from software contributed to Berkeley by
.\" Chris Torek and the American National Standards Committee X3,
.\" on Information Processing Systems.
.\"
.\" %%%LICENSE_START(BSD_4_CLAUSE_UCB)
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\" %%%LICENSE_END
.\"
.\"     @(#)fclose.3	6.7 (Berkeley) 6/29/91
.\"
.\" Converted for Linux, Mon Nov 29 15:19:14 1993, faith@cs.unc.edu
.\"
.\" Modified 2000-07-22 by Nicolás Lichtmaier <nick@debian.org>
.\"
.TH FCLOSE 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
fclose \- close a stream
.SH SYNOPSIS
.B #include <stdio.h>
.sp
.BI "int fclose(FILE *" stream );
.SH DESCRIPTION
The
.BR fclose ()
function flushes the stream pointed to by
.I stream
(writing any buffered output data using
.BR fflush (3))
and closes the underlying file descriptor.
.SH RETURN VALUE
Upon successful completion 0 is returned.
Otherwise,
.B EOF
is returned and
.I errno
is set to indicate the error.
In either case any further access
(including another call to
.BR fclose ())
to the stream results in undefined behavior.
.SH ERRORS
.TP
.B EBADF
The file descriptor underlying
.I stream
is not valid.
.\"  This error cannot occur unless you are mixing ANSI C stdio operations and
.\"  low-level file operations on the same stream. If you do get this error,
.\"  you must have closed the stream's low-level file descriptor using
.\"  something like close(fileno(stream)).
.PP
The
.BR fclose ()
function may also fail and set
.I errno
for any of the errors specified for the routines
.BR close (2),
.BR write (2)
or
.BR fflush (3).
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR fclose ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C89, C99.
.SH NOTES
Note that
.BR fclose ()
flushes only the user-space buffers provided by the
C library.
To ensure that the data is physically stored
on disk the kernel buffers must be flushed too, for example, with
.BR sync (2)
or
.BR fsync (2).
.SH SEE ALSO
.BR close (2),
.BR fcloseall (3),
.BR fflush (3),
.BR fopen (3),
.BR setbuf (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2006 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH FCLOSEALL 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
fcloseall \- close all open streams
.SH SYNOPSIS
.nf
.BR "#define _GNU_SOURCE" "         /* See feature_test_macros(7) */"
.B #include <stdio.h>
.sp
.B int fcloseall(void);
.fi
.SH DESCRIPTION
The
.BR fcloseall ()
function closes all of the calling process's open streams.
Buffered output for each stream is written before it is closed
(as for
.BR fflush (3));
buffered input is discarded.

The standard streams,
.IR stdin ,
.IR stdout ,
and
.I stderr
are also closed.
.SH RETURN VALUE
This function returns 0 if all files were successfully closed;
on error,
.B EOF
is returned.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR fcloseall ()
T}	Thread safety	MT-Unsafe race:streams
.TE
.PP
The
.BR fcloseall ()
function does not lock the streams, so it is not thread-safe.
.SH CONFORMING TO
This function is a GNU extension.
.SH SEE ALSO
.BR close (2),
.BR fclose (3),
.BR fflush (3),
.BR fopen (3),
.BR setbuf (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 2003 Walter Harms, Andries Brouwer
.\" and Copyright 2008, Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(GPL_NOVERSION_ONELINE)
.\" Distributed under GPL
.\" %%%LICENSE_END
.\"
.TH FDIM 3 2015-04-19 "" "Linux Programmer's Manual"
.SH NAME
fdim, fdimf, fdiml \- positive difference
.SH SYNOPSIS
.B #include <math.h>
.sp
.BI "double fdim(double " x ", double " y );
.br
.BI "float fdimf(float " x ", float " y );
.br
.BI "long double fdiml(long double " x ", long double " y );
.sp
Link with \fI\-lm\fP.
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR fdimf (),
.BR fdiml ():
.RS 4
_XOPEN_SOURCE\ >=\ 600 || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.ad
.SH DESCRIPTION
These functions return the positive difference, max(\fIx\fP-\fIy\fP,0),
between their arguments.
.SH RETURN VALUE
On success, these functions return the positive difference.

If
.I x
or
.I y
is a NaN, a NaN is returned.

If the result overflows,
a range error occurs,
and the functions return
.BR HUGE_VAL ,
.BR HUGE_VALF ,
or
.BR HUGE_VALL ,
respectively.
.SH ERRORS
See
.BR math_error (7)
for information on how to determine whether an error has occurred
when calling these functions.
.PP
The following errors can occur:
.TP
Range error: result overflow
.\" .I errno
.\" is set to
.\" .BR ERANGE .
An overflow floating-point exception
.RB ( FE_OVERFLOW )
is raised.
.PP
These functions do not set
.IR errno .
.\" FIXME . Is it intentional that these functions do not set errno?
.\" Bug raised: http://sources.redhat.com/bugzilla/show_bug.cgi?id=6796
.SH VERSIONS
These functions first appeared in glibc in version 2.1.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw24 lb lb
l l l.
Interface	Attribute	Value
T{
.BR fdim (),
.BR fdimf (),
.BR fdiml ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C99, POSIX.1-2001, POSIX.1-2008.
.SH SEE ALSO
.BR fmax (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2000 Andries Brouwer (aeb@cwi.nl)
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.\" 2000-08-14 added GNU additions from Andreas Jaeger
.\" 2000-12-05 some changes inspired by acahalan's remarks
.\"
.TH FENV 3  2015-03-02 "Linux" "Linux Programmer's Manual"
.SH NAME
feclearexcept, fegetexceptflag, feraiseexcept, fesetexceptflag,
fetestexcept, fegetenv, fegetround, feholdexcept, fesetround,
fesetenv, feupdateenv, feenableexcept, fedisableexcept,
fegetexcept \- floating-point rounding and exception handling
.SH SYNOPSIS
.nf
.B #include <fenv.h>
.sp
.BI "int feclearexcept(int " excepts );
.br
.BI "int fegetexceptflag(fexcept_t *" flagp ", int " excepts );
.br
.BI "int feraiseexcept(int " excepts );
.br
.BI "int fesetexceptflag(const fexcept_t *" flagp ", int " excepts );
.br
.BI "int fetestexcept(int " excepts );
.sp
.B "int fegetround(void);"
.br
.BI "int fesetround(int " rounding_mode );
.sp
.BI "int fegetenv(fenv_t *" envp );
.br
.BI "int feholdexcept(fenv_t *" envp );
.br
.BI "int fesetenv(const fenv_t *" envp );
.br
.BI "int feupdateenv(const fenv_t *" envp );
.fi
.sp
Link with \fI\-lm\fP.
.SH DESCRIPTION
These eleven functions were defined in C99, and describe the handling
of floating-point rounding and exceptions (overflow, zero-divide, etc.).
.SS Exceptions
The
.I divide-by-zero
exception occurs when an operation on finite numbers
produces infinity as exact answer.
.LP
The
.I overflow
exception occurs when a result has to be represented as a
floating-point number, but has (much) larger absolute value than the
largest (finite) floating-point number that is representable.
.LP
The
.I underflow
exception occurs when a result has to be represented as a
floating-point number, but has smaller absolute value than the smallest
positive normalized floating-point number (and would lose much accuracy
when represented as a denormalized number).
.LP
The
.I inexact
exception occurs when the rounded result of an operation
is not equal to the infinite precision result.
It may occur whenever
.I overflow
or
.I underflow
occurs.
.LP
The
.I invalid
exception occurs when there is no well-defined result
for an operation, as for 0/0 or infinity \- infinity or sqrt(\-1).
.SS Exception handling
Exceptions are represented in two ways: as a single bit
(exception present/absent), and these bits correspond in some
implementation-defined way with bit positions in an integer,
and also as an opaque structure that may contain more information
about the exception (perhaps the code address where it occurred).
.LP
Each of the macros
.BR FE_DIVBYZERO ,
.BR FE_INEXACT ,
.BR FE_INVALID ,
.BR FE_OVERFLOW ,
.B FE_UNDERFLOW
is defined when the implementation supports handling
of the corresponding exception, and if so then
defines the corresponding bit(s), so that one can call
exception handling functions, for example, using the integer argument
.BR FE_OVERFLOW | FE_UNDERFLOW .
Other exceptions may be supported.
The macro
.B FE_ALL_EXCEPT
is the bitwise OR of all bits corresponding to supported exceptions.
.PP
The
.BR feclearexcept ()
function clears the supported exceptions represented by the bits
in its argument.
.LP
The
.BR fegetexceptflag ()
function stores a representation of the state of the exception flags
represented by the argument
.I excepts
in the opaque object
.IR *flagp .
.LP
The
.BR feraiseexcept ()
function raises the supported exceptions represented by the bits in
.IR excepts .
.LP
The
.BR fesetexceptflag ()
function sets the complete status for the exceptions represented by
.I excepts
to the value
.IR *flagp .
This value must have been obtained by an earlier call of
.BR fegetexceptflag ()
with a last argument that contained all bits in
.IR excepts .
.LP
The
.BR fetestexcept ()
function returns a word in which the bits are set that were
set in the argument
.I excepts
and for which the corresponding exception is currently set.
.SS Rounding mode
The rounding mode determines how the result of floating-point operations
is treated when the result cannot be exactly represented in the significand.
Various rounding modes may be provided:
round to nearest (the default),
round up (toward positive infinity),
round down (toward negative infinity), and
round toward zero.

Each of the macros
.BR FE_TONEAREST ,
.BR FE_UPWARD ,
.BR FE_DOWNWARD ,
and
.BR FE_TOWARDZERO
is defined when the implementation supports getting and setting
the corresponding rounding direction.
.LP
The
.BR fegetround ()
function returns the macro corresponding to the current
rounding mode.
.LP
The
.BR fesetround ()
function sets the rounding mode as specified by its argument
and returns zero when it was successful.

C99 and POSIX.1-2008 specify an identifier,
.BR FLT_ROUNDS ,
defined in
.IR <float.h> ,
which indicates the implementation-defined rounding
behavior for floating-point addition.
This identifier has one of the following values:
.IP \-1
The rounding mode is not determinable.
.IP 0
Rounding is toward 0.
.IP 1
Rounding is toward nearest number.
.IP 2
Rounding is toward positive infinity.
.IP 3
Rounding is toward negative infinity.
.PP
Other values represent machine-dependent, nonstandard rounding modes.
.PP
The value of
.BR FLT_ROUNDS
should reflect the current rounding mode as set by
.BR fesetround ()
(but see BUGS).
.SS Floating-point environment
The entire floating-point environment, including
control modes and status flags, can be handled
as one opaque object, of type
.IR fenv_t .
The default environment is denoted by
.B FE_DFL_ENV
(of type
.IR "const fenv_t\ *" ).
This is the environment setup at program start and it is defined by
ISO C to have round to nearest, all exceptions cleared and a nonstop
(continue on exceptions) mode.
.LP
The
.BR fegetenv ()
function saves the current floating-point environment in the object
.IR *envp .
.LP
The
.BR feholdexcept ()
function does the same, then clears all exception flags,
and sets a nonstop (continue on exceptions) mode,
if available.
It returns zero when successful.
.LP
The
.BR fesetenv ()
function restores the floating-point environment from
the object
.IR *envp .
This object must be known to be valid, for example, the result of a call to
.BR fegetenv ()
or
.BR feholdexcept ()
or equal to
.BR FE_DFL_ENV .
This call does not raise exceptions.
.LP
The
.BR feupdateenv ()
function installs the floating-point environment represented by
the object
.IR *envp ,
except that currently raised exceptions are not cleared.
After calling this function, the raised exceptions will be a bitwise OR
of those previously set with those in
.IR *envp .
As before, the object
.I *envp
must be known to be valid.
.SH RETURN VALUE
These functions return zero on success and nonzero if an error occurred.
.\" Earlier seven of these functions were listed as returning void.
.\" This was corrected in Corrigendum 1 (ISO/IEC 9899:1999/Cor.1:2001(E))
.\" of the C99 Standard.
.SH VERSIONS
These functions first appeared in glibc in version 2.1.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.nh
.ad l
.TS
allbox;
lb lb lb
lw35 l l.
Interface	Attribute	Value
T{
.BR feclearexcept (),
.BR fegetexceptflag (),
.BR feraiseexcept (),
.BR fesetexceptflag (),
.BR fetestexcept (),
.BR fegetround (),
.BR fesetround (),
.BR fegetenv (),
.BR feholdexcept (),
.BR fesetenv (),
.BR feupdateenv (),
.BR feenableexcept (),
.BR fedisableexcept (),
.BR fegetexcept ()
T}	Thread safety	T{
MT-Safe
T}
.TE
.ad
.hy
.SH CONFORMING TO
IEC 60559 (IEC 559:1989), ANSI/IEEE 854, C99, POSIX.1-2001.
.SH NOTES
.SS Glibc notes
If possible, the GNU C Library defines a macro
.B FE_NOMASK_ENV
which represents an environment where every exception raised causes a
trap to occur.
You can test for this macro using
.BR #ifdef .
It is defined only if
.B _GNU_SOURCE
is defined.
The C99 standard does not define a way to set individual bits in the
floating-point mask, for example, to trap on specific flags.
Since version 2.2, glibc supports the functions
.BR feenableexcept ()
and
.BR fedisableexcept ()
to set individual floating-point traps, and
.BR fegetexcept ()
to query the state.
.sp
.nf
.BR "#define _GNU_SOURCE" "         /* See feature_test_macros(7) */"
.br
.B "#include <fenv.h>"
.sp
.BI "int feenableexcept(int " excepts );
.br
.BI "int fedisableexcept(int " excepts );
.br
.B "int fegetexcept(void);"
.br
.fi
.LP
The
.BR feenableexcept ()
and
.BR fedisableexcept ()
functions enable (disable) traps for each of the exceptions represented by
.I excepts
and return the previous set of enabled exceptions when successful,
and \-1 otherwise.
The
.BR fegetexcept ()
function returns the set of all currently enabled exceptions.
.SH BUGS
C99 specifies that the value of
.B FLT_ROUNDS
should reflect changes to the current rounding mode, as set by
.BR fesetround ().
Currently,
.\" Aug 08, glibc 2.8
this does not occur:
.B FLT_ROUNDS
always has the value 1.
.\" See http://gcc.gnu.org/ml/gcc/2002-02/msg01535.html
.SH SEE ALSO
.BR math_error (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1990, 1991 The Regents of the University of California.
.\" All rights reserved.
.\"
.\" This code is derived from software contributed to Berkeley by
.\" Chris Torek and the American National Standards Committee X3,
.\" on Information Processing Systems.
.\"
.\" %%%LICENSE_START(BSD_4_CLAUSE_UCB)
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\" %%%LICENSE_END
.\"
.\"     @(#)ferror.3	6.8 (Berkeley) 6/29/91
.\"
.\"
.\" Converted for Linux, Mon Nov 29 14:24:40 1993, faith@cs.unc.edu
.\" Added remark on EBADF for fileno, aeb, 2001-03-22
.\"
.TH FERROR 3  2015-03-02 "" "Linux Programmer's Manual"
.SH NAME
clearerr, feof, ferror, fileno \- check and reset stream status
.SH SYNOPSIS
.B #include <stdio.h>
.sp
.BI "void clearerr(FILE *" stream );

.BI "int feof(FILE *" stream );

.BI "int ferror(FILE *" stream );

.BI "int fileno(FILE *" stream );
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR fileno ():
_POSIX_C_SOURCE\ >=\ 1 || _XOPEN_SOURCE || _POSIX_SOURCE
.SH DESCRIPTION
The function
.BR clearerr ()
clears the end-of-file and error indicators for the stream pointed to by
.IR stream .
.PP
The function
.BR feof ()
tests the end-of-file indicator for the stream pointed to by
.IR stream ,
returning nonzero if it is set.
The end-of-file indicator can be cleared only by the function
.BR clearerr ().
.PP
The function
.BR ferror ()
tests the error indicator for the stream pointed to by
.IR stream ,
returning nonzero if it is set.
The error indicator can be reset only by the
.BR clearerr ()
function.
.PP
The function
.BR fileno ()
examines the argument
.I stream
and returns its integer descriptor.
.PP
For nonlocking counterparts, see
.BR unlocked_stdio (3).
.SH ERRORS
These functions should not fail and do not set the external variable
.IR errno .
(However, in case
.BR fileno ()
detects that its argument is not a valid stream, it must
return \-1 and set
.I errno
to
.BR EBADF .)
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw19 lb lb
l l l.
Interface	Attribute	Value
T{
.BR clearerr (),
.BR feof (),
.br
.BR ferror (),
.BR fileno ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
The functions
.BR clearerr (),
.BR feof (),
and
.BR ferror ()
conform to C89, C99, POSIX.1-2001, and POSIX.1-2008.

The function
.BR fileno ()
conforms to POSIX.1-2001 and POSIX.1-2008.
.SH SEE ALSO
.BR open (2),
.BR fdopen (3),
.BR stdio (3),
.BR unlocked_stdio (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2006, 2014, Michael Kerrisk
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH FEXECVE 3 2015-01-22 "Linux" "Linux Programmer's Manual"
.SH NAME
fexecve \- execute program specified via file descriptor
.SH SYNOPSIS
.nf
.B #include <unistd.h>
.sp
.BI "int fexecve(int " fd ", char *const " argv "[], char *const " envp []);
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR fexecve ():
.PD 0
.ad l
.RS 4
.TP 4
Since glibc 2.10:
_XOPEN_SOURCE\ >=\ 700 || _POSIX_C_SOURCE\ >=\ 200809L
.TP
Before glibc 2.10:
_GNU_SOURCE
.RE
.ad
.PD
.SH DESCRIPTION
.BR fexecve ()
performs the same task as
.BR execve (2),
with the difference that the file to be executed
is specified via a file descriptor,
.IR fd ,
rather than via a pathname.
The file descriptor
.I fd
must be opened read-only,
and the caller must have permission to execute the file that it refers to.
.\" POSIX.1-2008 specifies the O_EXEC flag for open as an alternative,
.\" but Linux doesn't support this flag yet.
.SH RETURN VALUE
A successful call to
.BR fexecve ()
never returns.
On error, the function does return, with a result value of \-1, and
.I errno
is set appropriately.
.SH ERRORS
Errors are as for
.BR execve (2),
with the following additions:
.TP
.B EINVAL
.I fd
is not a valid file descriptor, or
.I argv
is NULL, or
.I envp
is NULL.
.TP
.B ENOSYS
The
.I /proc
filesystem could not be accessed.
.SH VERSIONS
.BR fexecve ()
is implemented since glibc 2.3.2.
.SH CONFORMING TO
POSIX.1-2008.
This function is not specified in POSIX.1-2001,
and is not widely available on other systems.
It is specified in POSIX.1-2008.
.SH NOTES
On Linux,
.BR fexecve ()
is implemented using the
.BR proc (5)
filesystem, so
.I /proc
needs to be mounted and available at the time of the call.
.\" FIXME .
.\" With the addition of the execveat(2), fexecve() can be implemented
.\" even where /proc is unavailable. Review future glibc releases to
.\" see if the implementation is changed to use execveat(2).

The idea behind
.BR fexecve ()
is to allow the caller to verify (checksum) the contents of
an executable before executing it.
Simply opening the file, checksumming the contents, and then doing an
.BR execve (2)
would not suffice, since, between the two steps, the filename,
or a directory prefix of the pathname, could have been exchanged
(by, for example, modifying the target of a symbolic link).
.BR fexecve ()
does not mitigate the problem that the
.I contents
of a file could be changed between the checksumming and the call to
.BR fexecve ();
for that, the solution is to ensure that the permissions on the file
prevent it from being modified by malicious users.

The natural idiom when using
.BR fexecve ()
is to set the close-on-exec flag on
.IR fd ,
so that the file descriptor does not leak through to the program
that is executed.
This approach is natural for two reasons.
First, it prevents file descriptors being consumed unnecessarily.
(The executed program normally has no need of a file descriptor
that refers to the program itself.)
Second, if
.BR fexecve ()
is used recursively,
employing the close-on-exec flag prevents the file descriptor exhaustion
that would result from the fact that each step in the recursion would
cause one more file descriptor to be passed to the new program.
(But see BUGS.)
.SH BUGS
If
.I fd
refers to a script (i.e., it is an executable text file that names
a script interpreter with a first line that begins with the characters
.IR #! )
and the close-on-exec flag has been set for
.IR fd ,
then
.BR fexecve ()
fails with the error
.BR ENOENT .
This error occurs because,
by the time the script interpreter is executed,
.I fd
has already been closed because of the close-on-exec flag.
Thus, the close-on-exec flag can't be set on
.I fd
if it refers to a script, leading to the problems described in NOTES.
.SH SEE ALSO
.BR execve (2),
.BR execveat (2)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1990, 1991 The Regents of the University of California.
.\" All rights reserved.
.\"
.\" This code is derived from software contributed to Berkeley by
.\" Chris Torek and the American National Standards Committee X3,
.\" on Information Processing Systems.
.\"
.\" %%%LICENSE_START(BSD_4_CLAUSE_UCB)
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\" %%%LICENSE_END
.\"
.\"     @(#)fflush.3	5.4 (Berkeley) 6/29/91
.\"
.\" Converted for Linux, Mon Nov 29 15:22:01 1993, faith@cs.unc.edu
.\"
.\" Modified 2000-07-22 by Nicolás Lichtmaier <nick@debian.org>
.\" Modified 2001-10-16 by John Levon <moz@compsoc.man.ac.uk>
.\"
.TH FFLUSH 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
fflush \- flush a stream
.SH SYNOPSIS
.B #include <stdio.h>
.sp
.BI "int fflush(FILE *" stream );
.SH DESCRIPTION
For output streams,
.BR fflush ()
forces a write of all user-space buffered data for the given output or update
.I stream
via the stream's underlying write function.

For input streams associated with seekable files
(e.g., disk files, but not pipes or terminals),
.BR fflush ()
discards any buffered data that has been fetched from the underlying file,
but has not been consumed by the application.

The open status of the stream is unaffected.
.PP
If the
.I stream
argument is NULL,
.BR fflush ()
flushes
.I all
open output streams.
.\" mtk: POSIX specifies that only output streams are flushed for this case.
.\" Also verified for glibc by experiment.
.PP
For a nonlocking counterpart, see
.BR unlocked_stdio (3).
.SH RETURN VALUE
Upon successful completion 0 is returned.
Otherwise,
.B EOF
is returned and
.I errno
is set to indicate the error.
.SH ERRORS
.TP
.B EBADF
.I stream
is not an open stream, or is not open for writing.
.PP
The function
.BR fflush ()
may also fail and set
.I errno
for any of the errors specified for
.BR write (2).
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR fflush ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C89, C99, POSIX.1-2001, POSIX.1-2008.

POSIX.1-2001 did not specify the behavior for flushing of input streams,
but the behavior is specified in POSIX.1-2008.
.SH NOTES
Note that
.BR fflush ()
flushes only the user-space buffers provided by the C library.
To ensure that the data is physically stored on disk
the kernel buffers must be flushed too, for example, with
.BR sync (2)
or
.BR fsync (2).
.SH SEE ALSO
.BR fsync (2),
.BR sync (2),
.BR write (2),
.BR fclose (3),
.BR fopen (3),
.BR setbuf (3),
.BR unlocked_stdio (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified Sat Jul 24 19:39:35 1993 by Rik Faith (faith@cs.unc.edu)
.\"
.\" Modified 2003 Walter Harms (walter.harms@informatik.uni-oldenburg.de)
.\"
.TH FFS 3 2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
ffs, ffsl, ffsll \- find first bit set in a word
.SH SYNOPSIS
.nf
.B #include <strings.h>
.sp
.BI "int ffs(int " i );
.sp
.B #include <string.h>
.sp
.BI "int ffsl(long int " i );
.sp
.BI "int ffsll(long long int " i );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.PD 0
.ad l
.sp
.BR ffs ():
.RS 4
.TP 4
Since glibc 2.12:
_SVID_SOURCE || _BSD_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200809L || _XOPEN_SOURCE\ >=\ 700 ||
.TP
Before glibc 2.12:
none
.RE
.PP
.BR ffsl (),
.BR ffsll ():
.RS 4
_GNU_SOURCE
.RE
.ad
.PD
.SH DESCRIPTION
The
.BR ffs ()
function returns the position of the first
(least significant) bit set in the word \fIi\fP.
The least significant bit is position 1 and the
most significant position is, for example, 32 or 64.
The functions
.BR ffsll ()
and
.BR ffsl ()
do the same but take
arguments of possibly different size.
.SH RETURN VALUE
These functions return the position of the first bit set,
or 0 if no bits are set in
.IR i .
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw22 lb lb
l l l.
Interface	Attribute	Value
T{
.BR ffs (),
.BR ffsl (),
.BR ffsll ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
.BR ffs ():
4.3BSD, POSIX.1-2001.

The
.BR ffsl ()
and
.BR ffsll ()
functions are glibc extensions.
.SH NOTES
BSD systems have a prototype in
.IR <string.h> .
.SH SEE ALSO
.BR memchr (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1993 by Thomas Koenig (ig25@rz.uni-karlsruhe.de)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified Wed Jul 28 11:12:07 1993 by Rik Faith (faith@cs.unc.edu)
.\" Modified Fri Sep  8 15:48:13 1995 by Andries Brouwer (aeb@cwi.nl)
.TH FGETC 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
fgetc, fgets, getc, getchar, ungetc \- input of characters and strings
.SH SYNOPSIS
.nf
.B #include <stdio.h>
.sp
.BI "int fgetc(FILE *" stream );

.BI "char *fgets(char *" "s" ", int " "size" ", FILE *" "stream" );

.BI "int getc(FILE *" stream );

.B "int getchar(void);"

.BI "int ungetc(int " c ", FILE *" stream );
.fi
.SH DESCRIPTION
.BR fgetc ()
reads the next character from
.I stream
and returns it as an
.I unsigned char
cast to an
.IR int ,
or
.B EOF
on end of file or error.
.PP
.BR getc ()
is equivalent to
.BR fgetc ()
except that it may be implemented as a macro which evaluates
.I stream
more than once.
.PP
.BR getchar ()
is equivalent to
.BI "getc(" stdin ) \fR.
.PP
.BR fgets ()
reads in at most one less than
.I size
characters from
.I stream
and stores them into the buffer pointed to by
.IR s .
Reading stops after an
.B EOF
or a newline.
If a newline is read, it is stored into the buffer.
A terminating null byte (\(aq\e0\(aq)
is stored after the last character in the buffer.
.PP
.BR ungetc ()
pushes
.I c
back to
.IR stream ,
cast to
.IR "unsigned char" ,
where it is available for subsequent read operations.
Pushed-back characters
will be returned in reverse order; only one pushback is guaranteed.
.PP
Calls to the functions described here can be mixed with each other and with
calls to other input functions from the
.I stdio
library for the same input stream.
.PP
For nonlocking counterparts, see
.BR unlocked_stdio (3).
.SH RETURN VALUE
.BR fgetc (),
.BR getc ()
and
.BR getchar ()
return the character read as an
.I unsigned char
cast to an
.I int
or
.B EOF
on end of file or error.
.PP
.BR fgets ()
returns
.I s
on success, and NULL
on error or when end of file occurs while no characters have been read.
.PP
.BR ungetc ()
returns
.I c
on success, or
.B EOF
on error.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw25 lb lb
l l l.
Interface	Attribute	Value
T{
.BR fgetc (),
.BR fgets (),
.BR getc (),
.br
.BR getchar (),
.BR ungetc ()
T}	Thread safety	MT-Safe
.TE

.SH CONFORMING TO
C89, C99, POSIX.1-2001.

It is not advisable to mix calls to input functions from the
.I stdio
library with low-level calls to
.BR read (2)
for the file descriptor associated with the input stream; the results
will be undefined and very probably not what you want.
.SH SEE ALSO
.BR read (2),
.BR write (2),
.BR ferror (3),
.BR fgetwc (3),
.BR fgetws (3),
.BR fopen (3),
.BR fread (3),
.BR fseek (3),
.BR getline (3),
.BR gets (3),
.BR getwchar (3),
.BR puts (3),
.BR scanf (3),
.BR ungetwc (3),
.BR unlocked_stdio (3),
.BR feature_test_macros (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified Sat Jul 24 19:38:44 1993 by Rik Faith (faith@cs.unc.edu)
.TH FGETGRENT 3  2014-08-19 "GNU" "Linux Programmer's Manual"
.SH NAME
fgetgrent \- get group file entry
.SH SYNOPSIS
.nf
.B #include <stdio.h>
.B #include <sys/types.h>
.B #include <grp.h>
.sp
.BI "struct group *fgetgrent(FILE *" stream );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR fgetgrent ():
_SVID_SOURCE
.SH DESCRIPTION
The
.BR fgetgrent ()
function returns a pointer to a structure containing
the group information from the file referred to by
.IR stream .
The first time it is called
it returns the first entry; thereafter, it returns successive entries.
The file referred to by
.I stream
must have the same format as
.I /etc/group
(see
.BR group (5)).
.PP
The \fIgroup\fP structure is defined in \fI<grp.h>\fP as follows:
.sp
.in +4n
.nf
struct group {
    char   *gr_name;        /* group name */
    char   *gr_passwd;      /* group password */
    gid_t   gr_gid;         /* group ID */
    char  **gr_mem;         /* NULL-terminated array of pointers
                               to names of group members */
};
.fi
.in
.SH RETURN VALUE
The
.BR fgetgrent ()
function returns a pointer to a
.I group
structure,
or NULL if there are no more entries or an error occurs.
In the event of an error,
.I errno
is set to indicate the cause.
.SH ERRORS
.TP
.B ENOMEM
Insufficient memory to allocate
.I group
structure.
.SH CONFORMING TO
SVr4.
.SH SEE ALSO
.BR endgrent (3),
.BR fgetgrent_r (3),
.BR fopen (3),
.BR getgrent (3),
.BR getgrgid (3),
.BR getgrnam (3),
.BR putgrent (3),
.BR setgrent (3),
.BR group (5)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\"
.\" Modified Sat Jul 24 19:37:37 1993 by Rik Faith (faith@cs.unc.edu)
.\" Modified Mon May 27 22:40:48 1996 by Martin Schulze (joey@linux.de)
.\"
.TH FGETPWENT 3  2013-04-19 "GNU" "Linux Programmer's Manual"
.SH NAME
fgetpwent \- get password file entry
.SH SYNOPSIS
.nf
.B #include <stdio.h>
.B #include <sys/types.h>
.B #include <pwd.h>
.sp
.BI "struct passwd *fgetpwent(FILE *" stream );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR fgetpwent ():
_SVID_SOURCE
.SH DESCRIPTION
The
.BR fgetpwent ()
function returns a pointer to a structure containing
the broken out fields of a line in the file \fIstream\fP.
The first time it is called it returns the first entry;
thereafter, it returns successive entries.
The file referred to by
.I stream
must have the same format as
.I /etc/passwd
(see
.BR passwd (5)).
.PP
The \fIpasswd\fP structure is defined in \fI<pwd.h>\fP as follows:
.sp
.in +4n
.nf
struct passwd {
    char   *pw_name;       /* username */
    char   *pw_passwd;     /* user password */
    uid_t   pw_uid;        /* user ID */
    gid_t   pw_gid;        /* group ID */
    char   *pw_gecos;      /* real name */
    char   *pw_dir;        /* home directory */
    char   *pw_shell;      /* shell program */
};
.fi
.in
.SH RETURN VALUE
The
.BR fgetpwent ()
function returns a pointer to a
.I passwd
structure, or NULL if
there are no more entries or an error occurs.
In the event of an error,
.I errno
is set to indicate the cause.
.SH ERRORS
.TP
.B ENOMEM
Insufficient memory to allocate
.I passwd
structure.
.SH FILES
.TP
.I /etc/passwd
password database file
.SH CONFORMING TO
SVr4.
.SH SEE ALSO
.BR endpwent (3),
.BR fgetpwent_r (3),
.BR fopen (3),
.BR getpw (3),
.BR getpwent (3),
.BR getpwnam (3),
.BR getpwuid (3),
.BR putpwent (3),
.BR setpwent (3),
.BR passwd (5)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) Bruno Haible <haible@clisp.cons.org>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_ONEPARA)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"   GNU glibc-2 source code and manual
.\"   Dinkumware C library reference http://www.dinkumware.com/
.\"   OpenGroup's Single UNIX specification
.\"      http://www.UNIX-systems.org/online.html
.\"   ISO/IEC 9899:1999
.\"
.\" Modified Tue Oct 16 23:18:40 BST 2001 by John Levon <moz@compsoc.man.ac.uk>
.TH FGETWC 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
fgetwc, getwc \- read a wide character from a FILE stream
.SH SYNOPSIS
.nf
.B #include <stdio.h>
.br
.B #include <wchar.h>
.sp
.BI "wint_t fgetwc(FILE *" stream );
.BI "wint_t getwc(FILE *" stream );
.fi
.SH DESCRIPTION
The
.BR fgetwc ()
function is the wide-character equivalent
of the
.BR fgetc (3)
function.
It reads a wide character from \fIstream\fP and returns it.
If the end of stream is reached, or if \fIferror(stream)\fP becomes true,
it returns
.BR WEOF .
If a wide-character conversion error occurs, it sets
\fIerrno\fP to \fBEILSEQ\fP and returns
.BR WEOF .
.PP
The
.BR getwc ()
function or macro functions identically to
.BR fgetwc ().
It may be implemented as a macro, and may evaluate its argument
more than once.
There is no reason ever to use it.
.PP
For nonlocking counterparts, see
.BR unlocked_stdio (3).
.SH RETURN VALUE
The
.BR fgetwc ()
function returns the next wide-character
from the stream, or
.BR WEOF .
In the event of an error,
.I errno
is set to indicate the cause.
.SH ERRORS
Apart from the usual ones, there is
.TP
.B EILSEQ
The data obtained from the input stream does not
form a valid character.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw17 lb lb
l l l.
Interface	Attribute	Value
T{
.BR fgetwc (),
.BR getwc ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C99, POSIX.1-2001.
.SH NOTES
The behavior of
.BR fgetwc ()
depends on the
.B LC_CTYPE
category of the
current locale.
.PP
In the absence of additional information passed to the
.BR fopen (3)
call, it is
reasonable to expect that
.BR fgetwc ()
will actually read a multibyte sequence
from the stream and then convert it to a wide character.
.SH SEE ALSO
.BR fgetws (3),
.BR fputwc (3),
.BR ungetwc (3),
.BR unlocked_stdio (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) Bruno Haible <haible@clisp.cons.org>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_ONEPARA)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"   GNU glibc-2 source code and manual
.\"   Dinkumware C library reference http://www.dinkumware.com/
.\"   OpenGroup's Single UNIX specification
.\"     http://www.UNIX-systems.org/online.html
.\"   ISO/IEC 9899:1999
.\"
.\" Modified Tue Oct 16 23:18:40 BST 2001 by John Levon <moz@compsoc.man.ac.uk>
.TH FGETWS 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
fgetws \- read a wide-character string from a FILE stream
.SH SYNOPSIS
.nf
.B #include <wchar.h>
.sp
.BI "wchar_t *fgetws(wchar_t *" ws ", int " n ", FILE *" stream );
.fi
.SH DESCRIPTION
The
.BR fgetws ()
function is the wide-character equivalent
of the
.BR fgets (3)
function.
It reads a string of at most \fIn\-1\fP wide characters into the
wide-character array pointed to by \fIws\fP,
and adds a terminating null wide character (L\(aq\\0\(aq).
It stops reading wide characters after it has encountered and
stored a newline wide character.
It also stops when end of stream is reached.
.PP
The programmer must ensure that there is room for at least \fIn\fP wide
characters at \fIws\fP.
.PP
For a nonlocking counterpart, see
.BR unlocked_stdio (3).
.SH RETURN VALUE
The
.BR fgetws ()
function, if successful, returns \fIws\fP.
If end of stream
was already reached or if an error occurred, it returns NULL.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR fgetws ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C99, POSIX.1-2001.
.SH NOTES
The behavior of
.BR fgetws ()
depends on the
.B LC_CTYPE
category of the
current locale.
.PP
In the absence of additional information passed to the
.BR fopen (3)
call, it is
reasonable to expect that
.BR fgetws ()
will actually read a multibyte string
from the stream and then convert it to a wide-character string.
.PP
This function is unreliable,
because it does not permit to deal properly with
null wide characters that may be present in the input.
.SH SEE ALSO
.BR fgetwc (3),
.BR unlocked_stdio (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 2004 Andries Brouwer <aeb@cwi.nl>.
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH FINITE 3  2015-03-02 "" "Linux Programmer's Manual"
.SH NAME
finite, finitef, finitel, isinf, isinff, isinfl, isnan, isnanf, isnanl \-
BSD floating-point classification functions
.SH SYNOPSIS
.nf
.B #include <math.h>
.sp
.BI "int finite(double " x );
.br
.BI "int finitef(float " x );
.br
.BI "int finitel(long double " x );
.sp
.BI "int isinf(double " x );
.br
.BI "int isinff(float " x );
.br
.BI "int isinfl(long double " x );
.sp
.BI "int isnan(double " x );
.br
.BI "int isnanf(float " x );
.br
.BI "int isnanl(long double " x );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR finite (),
.BR finitef (),
.BR finitel ():
.RS 4
_BSD_SOURCE || _SVID_SOURCE
.RE
.BR isinf ():
.RS 4
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE\ >=\ 600 || _ISOC99_SOURCE;
.br
or
.I cc\ -std=c99
.RE
.br
.BR isinff (),
.BR isinfl ():
.RS 4
_BSD_SOURCE || _SVID_SOURCE
.RE
.BR isnan ():
.RS 4
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE || _ISOC99_SOURCE;
.br
or
.I cc\ -std=c99
.RE
.BR isnanf (),
.BR isnanl ():
.RS 4
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE\ >=\ 600
.RE
.ad b
.SH DESCRIPTION
The
.BR finite (),
.BR finitef (),
and
.BR finitel ()
functions return a nonzero value if
.I x
is neither infinite
nor a "not-a-number" (NaN) value, and 0 otherwise.

The
.BR isnan (),
.BR isnanf (),
and
.BR isnanl ()
functions return a nonzero value if
.I x
is a NaN value,
and 0 otherwise.

The
.BR isinf (),
.BR isinff (),
and
.BR isinfl ()
functions return 1 if
.I x
is positive infinity, \-1 if
.I x
is negative infinity, and 0 otherwise.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw31 lb lb
l l l.
Interface	Attribute	Value
T{
.BR finite (),
.BR finitef (),
.BR finitel (),
.br
.BR isinf (),
.BR isinff (),
.BR isinfl (),
.br
.BR isnan (),
.BR isnanf (),
.BR isnanl ()
T}	Thread safety	MT-Safe
.TE
.SH NOTES
Note that these functions are obsolete.
C99 defines macros
.BR isfinite (),
.BR isinf (),
and
.BR isnan ()
(for all types) replacing them.
Further note that the C99
.BR isinf ()
has weaker guarantees on the return value.
See
.BR fpclassify (3).
.\"
.\" finite* not on HP-UX; they exist on Tru64.
.\" .SH HISTORY
.\" The
.\" .BR finite ()
.\" function occurs in 4.3BSD.
.\" see IEEE.3 in the 4.3BSD manual
.SH SEE ALSO
.BR fpclassify (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2001 Andries Brouwer <aeb@cwi.nl>.
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH FLOCKFILE 3  2015-03-02 "" "Linux Programmer's Manual"
.SH NAME
flockfile, ftrylockfile, funlockfile \- lock FILE for stdio
.SH SYNOPSIS
.nf
.B #include <stdio.h>
.sp
.BI "void flockfile(FILE *" filehandle );
.br
.BI "int ftrylockfile(FILE *" filehandle );
.br
.BI "void funlockfile(FILE *" filehandle );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.ad l
.sp
All functions shown above:
.RS 4
_POSIX_C_SOURCE\ >=\ 1 || _XOPEN_SOURCE || _BSD_SOURCE ||
_SVID_SOURCE || _POSIX_SOURCE
.RE
.ad b
.SH DESCRIPTION
The stdio functions are thread-safe.
This is achieved by assigning
to each
.I FILE
object a lockcount and (if the lockcount is nonzero)
an owning thread.
For each library call, these functions wait until the
.I FILE
object
is no longer locked by a different thread, then lock it, do the
requested I/O, and unlock the object again.
.LP
(Note: this locking has nothing to do with the file locking done
by functions like
.BR flock (2)
and
.BR lockf (3).)
.LP
All this is invisible to the C-programmer, but there may be two
reasons to wish for more detailed control.
On the one hand, maybe
a series of I/O actions by one thread belongs together, and should
not be interrupted by the I/O of some other thread.
On the other hand, maybe the locking overhead should be avoided
for greater efficiency.
.LP
To this end, a thread can explicitly lock the
.I FILE
object,
then do its series of I/O actions, then unlock.
This prevents
other threads from coming in between.
If the reason for doing
this was to achieve greater efficiency, one does the I/O with
the nonlocking versions of the stdio functions: with
.BR getc_unlocked (3)
and
.BR putc_unlocked (3)
instead of
.BR getc (3)
and
.BR putc (3).
.LP
The
.BR flockfile ()
function waits for
.I *filehandle
to be
no longer locked by a different thread, then makes the
current thread owner of
.IR *filehandle ,
and increments
the lockcount.
.LP
The
.BR funlockfile ()
function decrements the lock count.
.LP
The
.BR ftrylockfile ()
function is a nonblocking version
of
.BR flockfile ().
It does nothing in case some other thread
owns
.IR *filehandle ,
and it obtains ownership and increments
the lockcount otherwise.
.SH RETURN VALUE
The
.BR ftrylockfile ()
function returns zero for success
(the lock was obtained), and nonzero for failure.
.SH ERRORS
None.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw29 lb lb
l l l.
Interface	Attribute	Value
T{
.BR flockfile (),
.BR ftrylockfile (),
.BR funlockfile ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
POSIX.1-2001.
.SH AVAILABILITY
These functions are available when
.B _POSIX_THREAD_SAFE_FUNCTIONS
is defined.
.SH SEE ALSO
.BR unlocked_stdio (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 2001 Andries Brouwer <aeb@cwi.nl>.
.\" and Copyright 2008, Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH FLOOR 3  2015-04-19 "" "Linux Programmer's Manual"
.SH NAME
floor, floorf, floorl \- largest integral value not greater than argument
.SH SYNOPSIS
.nf
.B #include <math.h>
.sp
.BI "double floor(double " x );
.br
.BI "float floorf(float " x );
.br
.BI "long double floorl(long double " x );
.fi
.sp
Link with \fI\-lm\fP.
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR floorf (),
.BR floorl ():
.RS 4
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE\ >=\ 600 || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.ad
.SH DESCRIPTION
These functions return the largest integral value that is not greater than
.IR x .

For example,
.IR floor(0.5)
is 0.0, and
.IR floor(\-0.5)
is \-1.0.
.SH RETURN VALUE
These functions return the floor of
.IR x .

If
.I x
is integral, +0, \-0, NaN, or an infinity,
.I x
itself is returned.
.SH ERRORS
No errors occur.
POSIX.1-2001 documents a range error for overflows, but see NOTES.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw27 lb lb
l l l.
Interface	Attribute	Value
T{
.BR floor (),
.BR floorf (),
.BR floorl ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C99, POSIX.1-2001, POSIX.1-2008.

The variant returning
.I double
also conforms to
SVr4, 4.3BSD, C89.
.SH NOTES
SUSv2 and POSIX.1-2001 contain text about overflow (which might set
.I errno
to
.BR ERANGE ,
or raise an
.B FE_OVERFLOW
exception).
In practice, the result cannot overflow on any current machine,
so this error-handling stuff is just nonsense.
.\" The POSIX.1-2001 APPLICATION USAGE SECTION discusses this point.
(More precisely, overflow can happen only when the maximum value
of the exponent is smaller than the number of mantissa bits.
For the IEEE-754 standard 32-bit and 64-bit floating-point numbers
the maximum value of the exponent is 128 (respectively, 1024),
and the number of mantissa bits is 24 (respectively, 53).)
.SH SEE ALSO
.BR ceil (3),
.BR lrint (3),
.BR nearbyint (3),
.BR rint (3),
.BR round (3),
.BR trunc (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 2002 Walter Harms (walter.harms@informatik.uni-oldenburg.de)
.\" and Copyright 2008, Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(GPL_NOVERSION_ONELINE)
.\" Distributed under GPL
.\" %%%LICENSE_END
.\"
.\" Modified 2004-11-15, Added further text on FLT_ROUNDS
.\" 	as suggested by AEB and Fabian Kreutz
.\"
.TH FMA 3  2015-04-19 "" "Linux Programmer's Manual"
.SH NAME
fma, fmaf, fmal \- floating-point multiply and add
.SH SYNOPSIS
.nf
.B #include <math.h>
.sp
.BI "double fma(double " x ", double " y ", double " z );
.br
.BI "float fmaf(float " x ", float " y ", float " z );
.br
.BI "long double fmal(long double " x ", long double " y ", long double " z );
.fi
.sp
Link with \fI\-lm\fP.
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR fma (),
.BR fmaf (),
.BR fmal ():
.RS 4
_XOPEN_SOURCE\ >=\ 600 || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.ad
.SH DESCRIPTION
These functions compute
.IR x " * " y " + " z .
The result is rounded as one ternary operation according to the
current rounding mode (see
.BR fenv (3)).
.SH RETURN VALUE
These functions return the value of
.IR x " * " y " + " z ,
rounded as one ternary operation.

If
.I x
or
.I y
is a NaN, a NaN is returned.

If
.I x
times
.I y
is an exact infinity, and
.I z
is an infinity with the opposite sign,
a domain error occurs,
and a NaN is returned.

.\" POSIX.1-2008 allows some possible differences for the following two
.\" domain error cases, but on Linux they are treated the same (AFAICS).
.\" Nevertheless, we'll mirror POSIX.1 and describe the two cases
.\" separately.
If one of
.I x
or
.I y
is an infinity, the other is 0, and
.I z
is not a NaN,
a domain error occurs, and
a NaN is returned.
.\" POSIX.1 says that a NaN or an implementation-defined value shall
.\" be returned for this case.

If one of
.I x
or
.I y
is an infinity, and the other is 0, and
.I z
is a NaN,
.\" POSIX.1 makes the domain error optional for this case.
a domain error occurs, and
a NaN is returned.

If
.I x
times
.I y
is not an infinity times zero (or vice versa), and
.I z
is a NaN,
a NaN is returned.

If the result overflows,
a range error occurs, and
an infinity with the correct sign is returned.

If the result underflows,
a range error occurs, and
a signed 0 is returned.
.SH ERRORS
See
.BR math_error (7)
for information on how to determine whether an error has occurred
when calling these functions.
.PP
The following errors can occur:
.TP
Domain error: \fIx\fP * \fIy\fP + \fIz\fP, \
or \fIx\fP * \fIy\fP is invalid and \fIz\fP is not a NaN
.\" .I errno
.\" is set to
.\" .BR EDOM .
An invalid floating-point exception
.RB ( FE_INVALID )
is raised.
.TP
Range error: result overflow
.\" .I errno
.\" is set to
.\" .BR ERANGE .
An overflow floating-point exception
.RB ( FE_OVERFLOW )
is raised.
.TP
Range error: result underflow
.\" .I errno
.\" is set to
.\" .BR ERANGE .
An underflow floating-point exception
.RB ( FE_UNDERFLOW )
is raised.
.PP
These functions do not set
.IR errno .
.\" FIXME . Is it intentional that these functions do not set errno?
.\" Bug raised: http://sources.redhat.com/bugzilla/show_bug.cgi?id=6801
.SH VERSIONS
These functions first appeared in glibc in version 2.1.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw21 lb lb
l l l.
Interface	Attribute	Value
T{
.BR fma (),
.BR fmaf (),
.BR fmal ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C99, POSIX.1-2001, POSIX.1-2008.
.SH SEE ALSO
.BR remainder (3),
.BR remquo (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 2002 Walter Harms (walter.harms@informatik.uni-oldenburg.de)
.\" and Copyright 2008, Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(GPL_NOVERSION_ONELINE)
.\" Distributed under GPL
.\" %%%LICENSE_END
.\"
.TH FMAX 3 2015-04-19 "" "Linux Programmer's Manual"
.SH NAME
fmax, fmaxf, fmaxl \- determine maximum of two floating-point numbers
.SH SYNOPSIS
.B #include <math.h>
.sp
.BI "double fmax(double " x ", double " y );
.br
.BI "float fmaxf(float " x ", float " y );
.br
.BI "long double fmaxl(long double " x ", long double " y );
.sp
Link with \fI\-lm\fP.
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR fmax (),
.BR fmaxf (),
.BR fmaxl ():
.RS 4
_XOPEN_SOURCE\ >=\ 600 || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.ad
.SH DESCRIPTION
These functions return the larger value of
.I x
and
.IR y .
.SH RETURN VALUE
These functions return the maximum of
.I x
and
.IR y .

If one argument is a NaN, the other argument is returned.

If both arguments are NaN, a NaN is returned.
.SH ERRORS
No errors occur.
.SH VERSIONS
These functions first appeared in glibc in version 2.1.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw24 lb lb
l l l.
Interface	Attribute	Value
T{
.BR fmax (),
.BR fmaxf (),
.BR fmaxl ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C99, POSIX.1-2001, POSIX.1-2008.
.SH SEE ALSO
.BR fmin (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 2005 walter harms (walter.harms@informatik.uni-oldenburg.de),
.\" and Copyright 2005, 2012 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(GPL_NOVERSION_ONELINE)
.\" Distributed under the GPL.
.\" %%%LICENSE_END
.\"
.\" 2008-12-04, Petr Baudis <pasky@suse.cz>: Document open_wmemstream()
.\"
.TH FMEMOPEN 3 2015-03-29 "GNU" "Linux Programmer's Manual"
.SH NAME
fmemopen, open_memstream, open_wmemstream \-  open memory as stream
.SH SYNOPSIS
.nf
.B #include <stdio.h>

.BI "FILE *fmemopen(void *"buf ", size_t "size ", const char *" mode ");"

.BI "FILE *open_memstream(char **" ptr ", size_t *" sizeloc );

.B #include <wchar.h>

.BI "FILE *open_wmemstream(wchar_t **" ptr ", size_t *" sizeloc );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR fmemopen (),
.BR open_memstream (),
.BR open_wmemstream ():
.PD 0
.ad l
.RS 4
.TP 4
Since glibc 2.10:
_XOPEN_SOURCE\ >=\ 700 || _POSIX_C_SOURCE\ >=\ 200809L
.TP
Before glibc 2.10:
_GNU_SOURCE
.RE
.ad
.PD
.SH DESCRIPTION
The
.BR fmemopen ()
function opens a stream that permits the access specified by
.IR mode .
The stream allows I/O to be performed on the string or memory buffer
pointed to by
.IR buf .
This buffer must be at least
.I size
bytes long.
.PP
The argument
.I mode
is the same as for
.BR fopen (3).
If
.I mode
specifies an append mode, then the initial file position is set to
the location of the first null byte (\(aq\\0\(aq) in the buffer;
otherwise the initial file position is set to the start of the buffer.
Since glibc 2.9,
the letter \(aqb\(aq may be specified as the second character in
.IR mode .
This provides "binary" mode:
writes don't implicitly add a terminating null byte, and
.BR fseek (3)
.B SEEK_END
is relative to the end of the buffer (i.e., the value specified by the
.I size
argument), rather than the current string length.
.PP
When a stream that has been opened for writing is flushed
.RB ( fflush (3))
or closed
.RB ( fclose (3)),
a null byte is written at the end of the buffer if there is space.
The caller should ensure that an extra byte is available in the
buffer
(and that
.I size
counts that byte)
to allow for this.

Attempts to write more than
.I size
bytes to the buffer result in an error.
(By default, such errors will be visible only when the
.I stdio
buffer is flushed.
Disabling buffering with the following call
may be useful to detect errors at the time of an output operation:

    setbuf(stdream, NULL);

Alternatively, the caller can explicitly set
.I buf
as the stdio stream buffer, at the same time informing stdio
of the buffer's size, using:

    setbuffer(stream, buf, size);

.\" See http://sourceware.org/bugzilla/show_bug.cgi?id=1995
.\" and
.\" http://sources.redhat.com/ml/libc-alpha/2006-04/msg00064.html
.PP
In a stream opened for reading,
null bytes (\(aq\\0\(aq) in the buffer do not cause read
operations to return an end-of-file indication.
A read from the buffer will indicate end-of-file
only when the file pointer advances
.I size
bytes past the start of the buffer.
.PP
If
.I buf
is specified as NULL, then
.BR fmemopen ()
dynamically allocates a buffer
.I size
bytes long.
This is useful for an application that wants to write data to
a temporary buffer and then read it back again.
The buffer is automatically freed when the stream is closed.
Note that the caller has no way to obtain a pointer to the
temporary buffer allocated by this call (but see
.BR open_memstream ()
below).

The
.BR open_memstream ()
function opens a stream for writing to a buffer.
The buffer
is dynamically allocated (as with
.BR malloc (3)),
and automatically grows as required.
After closing the stream, the caller should
.BR free (3)
this buffer.

When the stream is closed
.RB ( fclose (3))
or flushed
.RB ( fflush (3)),
the locations pointed to by
.I ptr
and
.I sizeloc
are updated to contain, respectively, a pointer to the buffer and the
current size of the buffer.
These values remain valid only as long as the caller
performs no further output on the stream.
If further output is performed, then the stream
must again be flushed before trying to access these variables.

A null byte is maintained at the end of the buffer.
This byte is
.I not
included in the size value stored at
.IR sizeloc .

The stream's file position can be changed with
.BR fseek (3)
or
.BR fseeko (3).
Moving the file position past the end
of the data already written fills the intervening space with
zeros.

The
.BR open_wmemstream ()
is similar to
.BR open_memstream (),
but operates on wide characters instead of bytes.
.SH RETURN VALUE
Upon successful completion
.BR fmemopen (),
.BR open_memstream ()
and
.BR open_wmemstream ()
return a
.I FILE
pointer.
Otherwise, NULL is returned and
.I errno
is set to indicate the error.
.SH VERSIONS
.BR fmemopen ()
and
.BR open_memstream ()
were already available in glibc 1.0.x.
.BR open_wmemstream ()
is available since glibc 2.4.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR fopenmem (),
.br
.BR open_memstream (),
.br
.BR open_wmemstream
T}	Thread safety	MT-Safe
.TE

.SH CONFORMING TO
POSIX.1-2008.
These functions are not specified in POSIX.1-2001,
and are not widely available on other systems.

POSIX.1-2008 specifies that \(aqb\(aq in
.IR mode
shall be ignored.
However, Technical Corrigendum 1
.\" http://austingroupbugs.net/view.php?id=396
adjusts the standard to allow implementation-specific treatment for this case,
thus permitting the glibc treatment of \(aqb\(aq.
.SH NOTES
There is no file descriptor associated with the file stream
returned by these functions
(i.e.,
.BR fileno (3)
will return an error if called on the returned stream).
.SH BUGS
In glibc before version 2.7, seeking past the end of a stream created by
.BR open_memstream ()
does not enlarge the buffer; instead the
.BR fseek (3)
call fails, returning \-1.
.\" http://sourceware.org/bugzilla/show_bug.cgi?id=1996

If
.I size
is specified as zero,
.BR fmemopen ()
fails with the error
.BR EINVAL .
.\" FIXME . http://sourceware.org/bugzilla/show_bug.cgi?id=11216
It would be more consistent if this case successfully created
a stream that then returned end of file on the first attempt at reading.
Furthermore, POSIX.1-2008 does not specify a failure for this case.

Specifying append mode ("a" or "a+") for
.BR fmemopen ()
sets the initial file position to the first null byte, but
.\" FIXME . http://sourceware.org/bugzilla/show_bug.cgi?id=13152
(if the file offset is reset to a location other than
the end of the stream)
does not force subsequent writes to append at the end of the stream.

If the
.I mode
argument to
.BR fmemopen ()
specifies append ("a" or "a+"), and the
.I size
argument does not cover a null byte in
.IR buf ,
then, according to POSIX.1-2008,
the initial file position should be set to
the next byte after the end of the buffer.
However, in this case the glibc
.\" FIXME . http://sourceware.org/bugzilla/show_bug.cgi?id=13151
.BR fmemopen ()
sets the file position to \-1.

To specify binary mode for
.BR fmemopen ()
the \(aqb\(aq must be the
.I second
character in
.IR mode .
Thus, for example, "wb+" has the desired effect, but "w+b" does not.
This is inconsistent with the treatment of
.\" FIXME . http://sourceware.org/bugzilla/show_bug.cgi?id=12836
.IR mode
by
.BR fopen (3).

The glibc 2.9 addition of "binary" mode for
.BR fmemopen ()
.\" http://sourceware.org/bugzilla/show_bug.cgi?id=6544
silently changed the ABI: previously,
.BR fmemopen ()
ignored \(aqb\(aq in
.IR mode .
.SH EXAMPLE
The program below uses
.BR fmemopen ()
to open an input buffer, and
.BR open_memstream ()
to open a dynamically sized output buffer.
The program scans its input string (taken from the program's
first command-line argument) reading integers,
and writes the squares of these integers to the output buffer.
An example of the output produced by this program is the following:
.in +4n
.nf

.RB "$" " ./a.out \(aq1 23 43\(aq"
size=11; ptr=1 529 1849
.fi
.in
.SS Program source
\&
.nf
#define _GNU_SOURCE
#include <string.h>
#include <stdio.h>
#include <stdlib.h>

#define handle_error(msg) \\
    do { perror(msg); exit(EXIT_FAILURE); } while (0)

int
main(int argc, char *argv[])
{
    FILE *out, *in;
    int v, s;
    size_t size;
    char *ptr;

    if (argc != 2) {
        fprintf(stderr, "Usage: %s <file>\\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    in = fmemopen(argv[1], strlen(argv[1]), "r");
    if (in == NULL)
        handle_error("fmemopen");

    out = open_memstream(&ptr, &size);
    if (out == NULL)
        handle_error("open_memstream");

    for (;;) {
        s = fscanf(in, "%d", &v);
        if (s <= 0)
            break;

        s = fprintf(out, "%d ", v * v);
        if (s == \-1)
            handle_error("fprintf");
    }
    fclose(in);
    fclose(out);
    printf("size=%zu; ptr=%s\\n", size, ptr);
    free(ptr);
    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR fopen (3),
.BR fopencookie (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 2002 Walter Harms (walter.harms@informatik.uni-oldenburg.de)
.\" and Copyright 2008, Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(GPL_NOVERSION_ONELINE)
.\" Distributed under GPL
.\" %%%LICENSE_END
.\"
.TH FMIN 3 2015-04-19 "" "Linux Programmer's Manual"
.SH NAME
fmin, fminf, fminl \- determine minimum of two floating-point numbers
.SH SYNOPSIS
.B #include <math.h>
.sp
.BI "double fmin(double " x ", double " y );
.br
.BI "float fminf(float " x ", float " y );
.br
.BI "long double fminl(long double " x ", long double " y );
.sp
Link with \fI\-lm\fP.
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR fmin (),
.BR fminf (),
.BR fminl ():
.RS 4
_XOPEN_SOURCE\ >=\ 600 || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.ad
.SH DESCRIPTION
These functions return the lesser value of
.I x
and
.IR y .
.SH RETURN VALUE
These functions return the minimum of
.I x
and
.IR y .

If one argument is a NaN, the other argument is returned.

If both arguments are NaN, a NaN is returned.
.SH ERRORS
No errors occur.
.SH VERSIONS
These functions first appeared in glibc in version 2.1.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw24 lb lb
l l l.
Interface	Attribute	Value
T{
.BR fmin (),
.BR fminf (),
.BR fminl ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C99, POSIX.1-2001, POSIX.1-2008.
.SH SEE ALSO
.BR fmax (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\" and Copyright 2008, Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified 1993-07-24 by Rik Faith (faith@cs.unc.edu)
.\" Modified 2002-07-27 by Walter Harms
.\" 	(walter.harms@informatik.uni-oldenburg.de)
.\"
.TH FMOD 3  2015-04-19 "" "Linux Programmer's Manual"
.SH NAME
fmod, fmodf, fmodl \- floating-point remainder function
.SH SYNOPSIS
.nf
.B #include <math.h>
.sp
.BI "double fmod(double " x ", double " y );
.br
.BI "float fmodf(float " x ", float " y );
.br
.BI "long double fmodl(long double " x ", long double " y );
.fi
.sp
Link with \fI\-lm\fP.
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR fmodf (),
.BR fmodl ():
.RS 4
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE\ >=\ 600 || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.ad
.SH DESCRIPTION
These functions compute the floating-point remainder of dividing
.I x
by
.IR y .
The return value is
.IR x
\-
.I n
*
.IR y ,
where
.I n
is the quotient of
.I x
/
.IR y ,
rounded toward zero to an integer.
.SH RETURN VALUE
On success, these
functions return the value \fIx\fP\ \-\ \fIn\fP*\fIy\fP,
for some integer
.IR n ,
such that the returned value has the same sign as
.I x
and a magnitude less than the magnitude of
.IR y .

If
.I x
or
.I y
is a NaN, a NaN is returned.

If
.I x
is an infinity,
a domain error occurs, and
a NaN is returned.

If
.I y
is zero,
a domain error occurs, and
a NaN is returned.

If
.I x
is +0 (\-0), and
.I y
is not zero, +0 (\-0) is returned.
.SH ERRORS
See
.BR math_error (7)
for information on how to determine whether an error has occurred
when calling these functions.
.PP
The following errors can occur:
.TP
Domain error: \fIx\fP is an infinity
.I errno
is set to
.BR EDOM
(but see BUGS).
An invalid floating-point exception
.RB ( FE_INVALID )
is raised.
.TP
Domain error: \fIy\fP is zero
.I errno
is set to
.BR EDOM .
An invalid floating-point exception
.RB ( FE_INVALID )
is raised.
.\" POSIX.1 documents an optional underflow error, but AFAICT it doesn't
.\" (can't?) occur -- mtk, Jul 2008
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw24 lb lb
l l l.
Interface	Attribute	Value
T{
.BR fmod (),
.BR fmodf (),
.BR fmodl ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C99, POSIX.1-2001, POSIX.1-2008.

The variant returning
.I double
also conforms to
SVr4, 4.3BSD, C89.
.SH BUGS
Before version 2.10, the glibc implementation did not set
.\" http://sources.redhat.com/bugzilla/show_bug.cgi?id=6784
.I errno
to
.B EDOM
when a domain error occurred for an infinite
.IR x .
.SH SEE ALSO
.BR remainder (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\"  Copyright 2002 walter harms (walter.harms@informatik.uni-oldenburg.de)
.\"
.\" %%%LICENSE_START(GPL_NOVERSION_ONELINE)
.\" Distributed under GPL
.\" %%%LICENSE_END
.\"
.\"  adapted glibc info page
.\"
.\"  This should run as 'Guru Meditation' (amiga joke :)
.\"  The function is quite complex and deserves an example
.\"
.\"  Polished, aeb, 2003-11-01
.TH FMTMSG 3 2015-03-02 "" "Linux Programmer's Manual"
.SH NAME
fmtmsg \- print formatted error messages
.SH SYNOPSIS
.nf
.B #include <fmtmsg.h>
.sp
.BI "int fmtmsg(long " classification ", const char *" label ,
.br
.BI "           int " severity ", const char *" text ,
.br
.BI "           const char *" action ", const char *" tag );
.fi
.SH DESCRIPTION
This function displays a message described by its arguments on the device(s)
specified in the
.I classification
argument.
For messages written to
.IR stderr ,
the format depends on the
.B MSGVERB
environment variable.
.LP
The
.I label
argument identifies the source of the message.
The string must consist
of two colon separated parts where the first part has not more
than 10 and the second part not more than 14 characters.
.LP
The
.I text
argument describes the condition of the error.
.LP
The
.I action
argument describes possible steps to recover from the error.
If it is printed, it is prefixed by "TO FIX: ".
.LP
The
.I tag
argument is a reference to the online documentation where more
information can be found.
It should contain the
.I label
value and a unique identification number.
.SS Dummy arguments
Each of the arguments can have a dummy value.
The dummy classification value
.B MM_NULLMC
(0L) does not specify any output, so nothing is printed.
The dummy severity value
.B NO_SEV
(0) says that no severity is supplied.
The values
.BR MM_NULLLBL ,
.BR MM_NULLTXT ,
.BR MM_NULLACT ,
.B MM_NULLTAG
are synonyms for
.IR "((char\ *)\ 0)" ,
the empty string, and
.B MM_NULLSEV
is a synonym for
.BR NO_SEV .
.SS The classification argument
The
.I classification
argument is the sum of values describing 4 types of information.
.br
.sp
The first value defines the output channel.
.TP 12n
.B MM_PRINT
Output to
.IR stderr .
.TP
.B MM_CONSOLE
Output to the system console.
.TP
.B "MM_PRINT | MM_CONSOLE"
Output to both.
.PP
The second value is the source of the error:
.TP 12n
.B MM_HARD
A hardware error occurred.
.TP
.B MM_FIRM
A firmware error occurred.
.TP
.B MM_SOFT
A software error occurred.
.PP
The third value encodes the detector of the problem:
.TP 12n
.B MM_APPL
It is detected by an application.
.TP
.B MM_UTIL
It is detected by a utility.
.TP
.B MM_OPSYS
It is detected by the operating system.
.PP
The fourth value shows the severity of the incident:
.TP 12n
.B MM_RECOVER
It is a recoverable error.
.TP
.B MM_NRECOV
It is a nonrecoverable error.
.SS The severity argument
The
.I severity
argument can take one of the following values:
.TP 12n
.B MM_NOSEV
No severity is printed.
.TP
.B MM_HALT
This value is printed as HALT.
.TP
.B MM_ERROR
This value is printed as ERROR.
.TP
.B MM_WARNING
This value is printed as WARNING.
.TP
.B MM_INFO
This value is printed as INFO.
.PP
The numeric values are between 0 and 4.
Using
.BR addseverity (3)
or the environment variable
.B SEV_LEVEL
you can add more levels and strings to print.
.SH RETURN VALUE
The function can return 4 values:
.TP 12n
.B MM_OK
Everything went smooth.
.TP
.B MM_NOTOK
Complete failure.
.TP
.B MM_NOMSG
Error writing to
.IR stderr .
.TP
.B MM_NOCON
Error writing to the console.
.SH ENVIRONMENT
The environment variable
.B MSGVERB
("message verbosity") can be used to suppress parts of
the output to
.IR stderr .
(It does not influence output to the console.)
When this variable is defined, is non-NULL, and is a colon-separated
list of valid keywords, then only the parts of the message corresponding
to these keywords is printed.
Valid keywords are "label", "severity", "text", "action" and "tag".
.PP
The environment variable
.B SEV_LEVEL
can be used to introduce new severity levels.
By default, only the five severity levels described
above are available.
Any other numeric value would make
.BR fmtmsg ()
print nothing.
If the user puts
.B SEV_LEVEL
with a format like
.sp
.RS
SEV_LEVEL=[description[:description[:...]]]
.RE
.sp
in the environment of the process before the first call to
.BR fmtmsg (),
where each description is of the form
.sp
.RS
severity-keyword,level,printstring
.RE
.sp
then
.BR fmtmsg ()
will also accept the indicated values for the level (in addition to
the standard levels 0-4), and use the indicated printstring when
such a level occurs.
.LP
The severity-keyword part is not used by
.BR fmtmsg ()
but it has to be present.
The level part is a string representation of a number.
The numeric value must be a number greater than 4.
This value must be used in the severity argument of
.BR fmtmsg ()
to select this class.
It is not possible to overwrite
any of the predefined classes.
The printstring
is the string printed when a message of this class is processed by
.BR fmtmsg ().
.SH VERSIONS
.BR fmtmsg ()
is provided in glibc since version 2.1.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lbw23
l l l.
Interface	Attribute	Value
T{
.BR fmtmsg ()
T}	Thread safety	T{
glibc >= 2.16: MT-Safe
.br
glibc < 2.16: MT-Unsafe
T}
.TE
.PP
Before glibc 2.16, the
.BR fmtmsg ()
function uses a static variable that is not protected,
so it is not thread-safe.

Since glibc 2.16,
.\" Modified in commit 7724defcf8873116fe4efab256596861eef21a94
the
.BR fmtmsg ()
function uses a lock to protect the static variable, so it is thread-safe.
.SH CONFORMING TO
The functions
.BR fmtmsg ()
and
.BR addseverity (3),
and environment variables
.B MSGVERB
and
.B SEV_LEVEL
come from System V.
The function
.BR fmtmsg ()
and the environment variable
.B MSGVERB
are described in POSIX.1-2001.
.SH NOTES
System V and UnixWare man pages tell us that these functions
have been replaced by "pfmt() and addsev()" or by "pfmt(),
vpfmt(), lfmt(), and vlfmt()", and will be removed later.
.SH EXAMPLE
.nf
#include <stdio.h>
#include <stdlib.h>
#include <fmtmsg.h>

int
main(void)
{
    long class = MM_PRINT | MM_SOFT | MM_OPSYS | MM_RECOVER;
    int err;

    err = fmtmsg(class, "util\-linux:mount", MM_ERROR,
                "unknown mount option", "See mount(8).",
                "util\-linux:mount:017");
    switch (err) {
    case MM_OK:
        break;
    case MM_NOTOK:
        printf("Nothing printed\en");
        break;
    case MM_NOMSG:
        printf("Nothing printed to stderr\en");
        break;
    case MM_NOCON:
        printf("No console output\en");
        break;
    default:
        printf("Unknown error from fmtmsg()\en");
    }
    exit(EXIT_SUCCESS);
}
.fi
.PP
The output should be:
.nf

    util\-linux:mount: ERROR: unknown mount option
    TO FIX: See mount(8).  util\-linux:mount:017

.fi
and after
.nf

    MSGVERB=text:action; export MSGVERB

.fi
the output becomes:
.nf

    unknown mount option
    TO FIX: See mount(8).
.fi
.SH SEE ALSO
.BR addseverity (3),
.BR perror (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1993 by Thomas Koenig (ig25@rz.uni-karlsruhe.de)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified Sat Jul 24 19:35:54 1993 by Rik Faith (faith@cs.unc.edu)
.\" Modified Mon Oct 16 00:16:29 2000 following Joseph S. Myers
.\"
.TH FNMATCH 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
fnmatch \- match filename or pathname
.SH SYNOPSIS
.nf
.B #include <fnmatch.h>
.sp
.BI "int fnmatch(const char *" "pattern" ", const char *" string ", int " flags );
.fi
.SH DESCRIPTION
The
.BR fnmatch ()
function checks whether the
.I string
argument matches the
.I pattern
argument, which is a shell wildcard pattern.
.PP
The
.I flags
argument modifies the behavior; it is the bitwise OR of zero or more
of the following flags:
.TP
.B FNM_NOESCAPE
If this flag is set, treat backslash as an ordinary character,
instead of an escape character.
.TP
.B FNM_PATHNAME
If this flag is set, match a slash in
.I string
only with a slash in
.I pattern
and not by an asterisk (*) or a question mark (?) metacharacter,
nor by a bracket expression ([]) containing a slash.
.TP
.B FNM_PERIOD
If this flag is set, a leading period in
.I string
has to be matched exactly by a period in
.IR pattern .
A period is considered to be leading if it is the first character in
.IR string ,
or if both
.B FNM_PATHNAME
is set and the period immediately follows a slash.
.TP
.B FNM_FILE_NAME
This is a GNU synonym for
.BR FNM_PATHNAME .
.TP
.B FNM_LEADING_DIR
If this flag (a GNU extension) is set, the pattern is considered to be
matched if it matches an initial segment of
.I string
which is followed by a slash.
This flag is mainly for the internal
use of glibc and is implemented only in certain cases.
.TP
.B FNM_CASEFOLD
If this flag (a GNU extension) is set, the pattern is matched
case-insensitively.
.SH RETURN VALUE
Zero if
.I string
matches
.IR pattern ,
.B FNM_NOMATCH
if there is no match or another nonzero value if there is an error.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR fnmatch ()
T}	Thread safety	MT-Safe env locale
.TE
.SH CONFORMING TO
POSIX.2.
The
.BR FNM_FILE_NAME ", " FNM_LEADING_DIR ", and " FNM_CASEFOLD
flags are GNU extensions.
.SH SEE ALSO
.BR sh (1),
.BR glob (3),
.BR scandir (3),
.BR wordexp (3),
.BR glob (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1990, 1991 The Regents of the University of California.
.\" All rights reserved.
.\"
.\" This code is derived from software contributed to Berkeley by
.\" Chris Torek and the American National Standards Committee X3,
.\" on Information Processing Systems.
.\"
.\" %%%LICENSE_START(BSD_4_CLAUSE_UCB)
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\" %%%LICENSE_END
.\"
.\"     @(#)fopen.3	6.8 (Berkeley) 6/29/91
.\"
.\" Converted for Linux, Mon Nov 29 15:22:01 1993, faith@cs.unc.edu
.\" Modified, aeb, 960421, 970806
.\" Modified, joey, aeb, 2002-01-03
.\"
.TH FOPEN 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
fopen, fdopen, freopen \- stream open functions
.SH SYNOPSIS
.nf
.B #include <stdio.h>
.sp
.BI "FILE *fopen(const char *" path ", const char *" mode );

.BI "FILE *fdopen(int " fd ", const char *" mode );

.BI "FILE *freopen(const char *" path ", const char *" mode ", FILE *" stream );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR fdopen ():
_POSIX_C_SOURCE\ >=\ 1 || _XOPEN_SOURCE || _POSIX_SOURCE
.SH DESCRIPTION
The
.BR fopen ()
function opens the file whose name is the string pointed to by
.I path
and associates a stream with it.
.PP
The argument
.I mode
points to a string beginning with one of the following sequences
(possibly followed by additional characters, as described below):
.TP
.B r
Open text file for reading.
The stream is positioned at the beginning of the file.
.TP
.B r+
Open for reading and writing.
The stream is positioned at the beginning of the file.
.TP
.B w
Truncate file to zero length or create text file for writing.
The stream is positioned at the beginning of the file.
.TP
.B w+
Open for reading and writing.
The file is created if it does not exist, otherwise it is truncated.
The stream is positioned at the beginning of
the file.
.TP
.B a
Open for appending (writing at end of file).
The file is created if it does not exist.
The stream is positioned at the end of the file.
.TP
.B a+
Open for reading and appending (writing at end of file).
The file is created if it does not exist.
The initial file position for reading is at the beginning of the file,
but output is always appended to the end of the file.
.PP
The
.I mode
string can also include the letter \(aqb\(aq either as a last character or as
a character between the characters in any of the two-character strings
described above.
This is strictly for compatibility with C89
and has no effect; the \(aqb\(aq is ignored on all POSIX
conforming systems, including Linux.
(Other systems may treat text files and binary files differently,
and adding the \(aqb\(aq may be a good idea if you do I/O to a binary
file and expect that your program may be ported to non-UNIX
environments.)
.PP
See NOTES below for details of glibc extensions for
.IR mode .
.PP
Any created files will have mode
.BR S_IRUSR " | " S_IWUSR " | "  S_IRGRP " | "  S_IWGRP " | " S_IROTH " | " S_IWOTH
(0666), as modified by the process's umask value (see
.BR umask (2)).
.PP
Reads and writes may be intermixed on read/write streams in any order.
Note that ANSI C requires that a file positioning function intervene
between output and input, unless an input operation encounters end-of-file.
(If this condition is not met, then a read is allowed to return the
result of writes other than the most recent.)
Therefore it is good practice (and indeed sometimes necessary
under Linux) to put an
.BR fseek (3)
or
.BR fgetpos (3)
operation between write and read operations on such a stream.
This operation may be an apparent no-op
(as in \fIfseek(..., 0L, SEEK_CUR)\fP
called for its synchronizing side effect).
.PP
Opening a file in append mode (\fBa\fP as the first character of
.IR mode )
causes all subsequent write operations to this stream to occur
at end-of-file, as if preceded the call:
.nf

    fseek(stream, 0, SEEK_END);
.fi
.PP
The
.BR fdopen ()
function associates a stream with the existing file descriptor,
.IR fd .
The
.I mode
of the stream (one of the values "r", "r+", "w", "w+", "a", "a+")
must be compatible with the mode of the file descriptor.
The file position indicator of the new stream is set to that
belonging to
.IR fd ,
and the error and end-of-file indicators are cleared.
Modes "w" or "w+" do not cause truncation of the file.
The file descriptor is not dup'ed, and will be closed when
the stream created by
.BR fdopen ()
is closed.
The result of applying
.BR fdopen ()
to a shared memory object is undefined.
.PP
The
.BR freopen ()
function opens the file whose name is the string pointed to by
.I path
and associates the stream pointed to by
.I stream
with it.
The original stream (if it exists) is closed.
The
.I mode
argument is used just as in the
.BR fopen ()
function.
The primary use of the
.BR freopen ()
function is to change the file associated with a standard text stream
.RI ( stderr ", " stdin ", or " stdout ).
.SH RETURN VALUE
Upon successful completion
.BR fopen (),
.BR fdopen ()
and
.BR freopen ()
return a
.I FILE
pointer.
Otherwise, NULL is returned and
.I errno
is set to indicate the error.
.SH ERRORS
.TP
.B EINVAL
The
.I mode
provided to
.BR fopen (),
.BR fdopen (),
or
.BR freopen ()
was invalid.
.PP
The
.BR fopen (),
.BR fdopen ()
and
.BR freopen ()
functions may also fail and set
.I errno
for any of the errors specified for the routine
.BR malloc (3).
.PP
The
.BR fopen ()
function may also fail and set
.I errno
for any of the errors specified for the routine
.BR open (2).
.PP
The
.BR fdopen ()
function may also fail and set
.I errno
for any of the errors specified for the routine
.BR fcntl (2).
.PP
The
.BR freopen ()
function may also fail and set
.I errno
for any of the errors specified for the routines
.BR open (2),
.BR fclose (3),
and
.BR fflush (3).
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw28 lb lb
l l l.
Interface	Attribute	Value
T{
.BR fopen (),
.BR fdopen (),
.BR freopen ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
The
.BR fopen ()
and
.BR freopen ()
functions conform to C89.
The
.BR fdopen ()
function conforms to POSIX.1-1990.
.SH NOTES
.SS Glibc notes
The GNU C library allows the following extensions for the string specified in
.IR mode :
.TP
.BR c " (since glibc 2.3.3)"
Do not make the open operation,
or subsequent read and write operations,
thread cancellation points.
This flag is ignored for
.BR fdopen ().
.TP
.BR e " (since glibc 2.7)"
Open the file with the
.B O_CLOEXEC
flag.
See
.BR open (2)
for more information.
This flag is ignored for
.BR fdopen ().
.TP
.BR m " (since glibc 2.3)"
Attempt to access the file using
.BR mmap (2),
rather than I/O system calls
.RB ( read (2),
.BR write (2)).
Currently,
.\" As at glibc 2.4:
use of
.BR mmap (2)
is attempted only for a file opened for reading.
.TP
.B x
.\" Since glibc 2.0?
.\" FIXME . C11 specifies this flag
Open the file exclusively
(like the
.B O_EXCL
flag of
.BR open (2)).
If the file already exists,
.BR fopen ()
fails, and sets
.I errno
to
.BR EEXIST .
This flag is ignored for
.BR fdopen ().
.PP
In addition to the above characters,
.BR fopen ()
and
.BR freopen ()
support the following syntax
in
.IR mode :

.BI "    ,ccs=" string

The given
.I string
is taken as the name of a coded character set and
the stream is marked as wide-oriented.
Thereafter, internal conversion functions convert I/O
to and from the character set
.IR string .
If the
.BI ,ccs= string
syntax is not specified,
then the wide-orientation of the stream is
determined by the first file operation.
If that operation is a wide-character operation,
the stream is marked wide-oriented,
and functions to convert to the coded character set are loaded.
.SH BUGS
When parsing for individual flag characters in
.IR mode
(i.e., the characters preceding the "ccs" specification),
the glibc implementation of
.\" FIXME . http://sourceware.org/bugzilla/show_bug.cgi?id=12685
.BR fopen ()
and
.BR freopen ()
limits the number of characters examined in
.I mode
to 7 (or, in glibc versions before 2.14, to 6,
which was not enough to include possible specifications such as "rb+cmxe").
The current implementation of
.BR fdopen ()
parses at most 5 characters in
.IR mode .
.SH SEE ALSO
.BR open (2),
.BR fclose (3),
.BR fileno (3),
.BR fmemopen (3),
.BR fopencookie (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2008, Linux Foundation, written by Michael Kerrisk
.\"      <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH FOPENCOOKIE 3 2015-03-02 "Linux" "Linux Programmer's Manual"
.SH NAME
fopencookie \- opening a custom stream
.SH SYNOPSIS
.nf
.BR "#define _GNU_SOURCE" "         /* See feature_test_macros(7) */"
.B #include <stdio.h>

.BI "FILE *fopencookie(void *" cookie ", const char *" mode ,
.BI "                  cookie_io_functions_t " io_funcs );
.fi
.SH DESCRIPTION
The
.BR fopencookie ()
function allows the programmer to create a custom implementation
for a standard I/O stream.
This implementation can store the stream's data at a location of
its own choosing; for example,
.BR fopencookie ()
is used to implement
.BR fmemopen (3),
which provides a stream interface to data that is stored in a
buffer in memory.

In order to create a custom stream the programmer must:
.IP * 3
Implement four "hook" functions that are used internally by the
standard I/O library when performing I/O on the stream.
.IP *
Define a "cookie" data type,
a structure that provides bookkeeping information
(e.g., where to store data) used by the aforementioned hook functions.
The standard I/O package knows nothing about the contents of this cookie
(thus it is typed as
.IR "void\ *"
when passed to
.BR fopencookie ()),
but automatically supplies the cookie
as the first argument when calling the hook functions.
.IP *
Call
.BR fopencookie ()
to open a new stream and associate the cookie and hook functions
with that stream.
.PP
The
.BR fopencookie ()
function serves a purpose similar to
.BR fopen (3):
it opens a new stream and returns a pointer to a
.I FILE
object that is used to operate on that stream.

The
.I cookie
argument is a pointer to the caller's cookie structure
that is to be associated with the new stream.
This pointer is supplied as the first argument when the standard I/O
library invokes any of the hook functions described below.

The
.I mode
argument serves the same purpose as for
.BR fopen (3).
The following modes are supported:
.IR r ,
.IR w ,
.IR a ,
.IR r+ ,
.IR w+ ,
and
.IR a+ .
See
.BR fopen (3)
for details.

The
.I io_funcs
argument is a structure that contains four fields pointing to the
programmer-defined hook functions that are used to implement this stream.
The structure is defined as follows
.in +4n
.nf

typedef struct {
    cookie_read_function_t  *read;
    cookie_write_function_t *write;
    cookie_seek_function_t  *seek;
    cookie_close_function_t *close;
} cookie_io_functions_t;

.fi
.in
The four fields are as follows:
.TP
.I cookie_read_function_t *read
This function implements read operations for the stream.
When called, it receives three arguments:

    ssize_t read(void *cookie, char *buf, size_t size);

The
.I buf
and
.I size
arguments are, respectively,
a buffer into which input data can be placed and the size of that buffer.
As its function result, the
.I read
function should return the number of bytes copied into
.IR buf ,
0 on end of file, or \-1 on error.
The
.I read
function should update the stream offset appropriately.

If
.I *read
is a null pointer,
then reads from the custom stream always return end of file.
.TP
.I cookie_write_function_t *write
This function implements write operations for the stream.
When called, it receives three arguments:

    ssize_t write(void *cookie, const char *buf, size_t size);

The
.I buf
and
.I size
arguments are, respectively,
a buffer of data to be output to the stream and the size of that buffer.
As its function result, the
.I write
function should return the number of bytes copied from
.IR buf ,
or 0 on error.
(The function must not return a negative value.)
The
.I write
function should update the stream offset appropriately.

If
.I *write
is a null pointer,
then output to the stream is discarded.
.TP
.I cookie_seek_function_t *seek
This function implements seek operations on the stream.
When called, it receives three arguments:

    int seek(void *cookie, off64_t *offset, int whence);

The
.I *offset
argument specifies the new file offset depending on which
of the following three values is supplied in
.IR whence :
.RS
.TP 10
.B SEEK_SET
The stream offset should be set
.I *offset
bytes from the start of the stream.
.TP
.B SEEK_CUR
.I *offset
should be added to the current stream offset.
.TP
.B SEEK_END
The stream offset should be set to the size of the stream plus
.IR *offset .
.RE
.IP
Before returning, the
.I seek
function should update
.I *offset
to indicate the new stream offset.

As its function result, the
.I seek
function should return 0 on success, and \-1 on error.

If
.I *seek
is a null pointer,
then it is not possible to perform seek operations on the stream.
.TP
.I cookie_close_function_t *close
This function closes the stream.
The hook function can do things such as freeing buffers allocated
for the stream.
When called, it receives one argument:

    int close(void *cookie);

The
.I cookie
argument is the cookie that the programmer supplied when calling
.BR fopencookie ().

As its function result, the
.I close
function should return 0 on success, and
.B EOF
on error.

If
.I *close
is NULL, then no special action is performed when the stream is closed.
.SH RETURN VALUE
On success
.BR fopencookie ()
returns a pointer to the new stream.
On error, NULL is returned.
.\" .SH ERRORS
.\" It's not clear if errno ever gets set...
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR fopencookie ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
This function is a nonstandard GNU extension.
.SH EXAMPLE
The program below implements a custom stream whose functionality
is similar (but not identical) to that available via
.BR fmemopen (3).
It implements a stream whose data is stored in a memory buffer.
The program writes its command-line arguments to the stream,
and then seeks through the stream reading two out of every
five characters and writing them to standard output.
The following shell session demonstrates the use of the program:
.in +4n
.nf

.RB "$" " ./a.out \(aqhello world\(aq"
/he/
/ w/
/d/
Reached end of file

.fi
.in
Note that a more general version of the program below
could be improved to more robustly handle various error situations
(e.g., opening a stream with a cookie that already has an open stream;
closing a stream that has already been closed).
.SS Program source
\&
.nf
#define _GNU_SOURCE
#include <sys/types.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>

#define INIT_BUF_SIZE 4

struct memfile_cookie {
    char   *buf;        /* Dynamically sized buffer for data */
    size_t  allocated;  /* Size of buf */
    size_t  endpos;     /* Number of characters in buf */
    off_t   offset;     /* Current file offset in buf */
};

ssize_t
memfile_write(void *c, const char *buf, size_t size)
{
    char *new_buff;
    struct memfile_cookie *cookie = c;

    /* Buffer too small? Keep doubling size until big enough */

    while (size + cookie\->offset > cookie\->allocated) {
        new_buff = realloc(cookie\->buf, cookie\->allocated * 2);
        if (new_buff == NULL) {
            return \-1;
        } else {
            cookie\->allocated *= 2;
            cookie\->buf = new_buff;
        }
    }

    memcpy(cookie\->buf + cookie\->offset, buf, size);

    cookie\->offset += size;
    if (cookie\->offset > cookie\->endpos)
        cookie\->endpos = cookie\->offset;

    return size;
}

ssize_t
memfile_read(void *c, char *buf, size_t size)
{
    ssize_t xbytes;
    struct memfile_cookie *cookie = c;

    /* Fetch minimum of bytes requested and bytes available */

    xbytes = size;
    if (cookie\->offset + size > cookie\->endpos)
        xbytes = cookie\->endpos \- cookie\->offset;
    if (xbytes < 0)     /* offset may be past endpos */
       xbytes = 0;

    memcpy(buf, cookie\->buf + cookie\->offset, xbytes);

    cookie\->offset += xbytes;
    return xbytes;
}

int
memfile_seek(void *c, off64_t *offset, int whence)
{
    off64_t new_offset;
    struct memfile_cookie *cookie = c;

    if (whence == SEEK_SET)
        new_offset = *offset;
    else if (whence == SEEK_END)
        new_offset = cookie\->endpos + *offset;
    else if (whence == SEEK_CUR)
        new_offset = cookie\->offset + *offset;
    else
        return \-1;

    if (new_offset < 0)
        return \-1;

    cookie\->offset = new_offset;
    *offset = new_offset;
    return 0;
}

int
memfile_close(void *c)
{
    struct memfile_cookie *cookie = c;

    free(cookie\->buf);
    cookie\->allocated = 0;
    cookie\->buf = NULL;

    return 0;
}

int
main(int argc, char *argv[])
{
    cookie_io_functions_t  memfile_func = {
        .read  = memfile_read,
        .write = memfile_write,
        .seek  = memfile_seek,
        .close = memfile_close
    };
    FILE *stream;
    struct memfile_cookie mycookie;
    ssize_t nread;
    long p;
    int j;
    char buf[1000];

    /* Set up the cookie before calling fopencookie() */

    mycookie.buf = malloc(INIT_BUF_SIZE);
    if (mycookie.buf == NULL) {
        perror("malloc");
        exit(EXIT_FAILURE);
    }

    mycookie.allocated = INIT_BUF_SIZE;
    mycookie.offset = 0;
    mycookie.endpos = 0;

    stream = fopencookie(&mycookie,"w+", memfile_func);
    if (stream == NULL) {
        perror("fopencookie");
        exit(EXIT_FAILURE);
    }

    /* Write command\-line arguments to our file */

    for (j = 1; j < argc; j++)
        if (fputs(argv[j], stream) == EOF) {
            perror("fputs");
            exit(EXIT_FAILURE);
        }

    /* Read two bytes out of every five, until EOF */

    for (p = 0; ; p += 5) {
        if (fseek(stream, p, SEEK_SET) == \-1) {
            perror("fseek");
            exit(EXIT_FAILURE);
        }
        nread = fread(buf, 1, 2, stream);
        if (nread == \-1) {
            perror("fread");
            exit(EXIT_FAILURE);
        }
        if (nread == 0) {
            printf("Reached end of file\\n");
            break;
        }

        printf("/%.*s/\\n", nread, buf);
    }

    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR fclose (3),
.BR fmemopen (3),
.BR fopen (3),
.BR fseek (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1993 by Thomas Koenig (ig25@rz.uni-karlsruhe.de)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified Wed Jul 28 11:12:26 1993 by Rik Faith (faith@cs.unc.edu)
.\"
.\" FIXME Probably all of the following should be documented:
.\"     _PC_SYNC_IO,
.\"     _PC_ASYNC_IO,
.\"     _PC_PRIO_IO,
.\"     _PC_SOCK_MAXBUF,
.\"     _PC_FILESIZEBITS,
.\"     _PC_REC_INCR_XFER_SIZE,
.\"     _PC_REC_MAX_XFER_SIZE,
.\"     _PC_REC_MIN_XFER_SIZE,
.\"     _PC_REC_XFER_ALIGN,
.\"     _PC_ALLOC_SIZE_MIN,
.\"     _PC_SYMLINK_MAX,
.\"     _PC_2_SYMLINKS
.\"
.TH FPATHCONF 3  2015-03-29 "GNU" "Linux Programmer's Manual"
.SH NAME
fpathconf, pathconf \- get configuration values for files
.SH SYNOPSIS
.nf
.B #include <unistd.h>
.sp
.BI "long fpathconf(int " fd ", int " name );
.br
.BI "long pathconf(const char *" path ", int " name );
.fi
.SH DESCRIPTION
.BR fpathconf ()
gets a value for the configuration option
.I name
for the open file descriptor
.IR fd .
.PP
.BR pathconf ()
gets a value for configuration option
.I name
for the filename
.IR path .
.PP
The corresponding macros defined in
.I <unistd.h>
are minimum values; if an application wants to take advantage of values
which may change, a call to
.BR fpathconf ()
or
.BR pathconf ()
can be made, which may yield more liberal results.
.PP
Setting
.I name
equal to one of the following constants returns the following
configuration options:
.TP
.B _PC_LINK_MAX
returns the maximum number of links to the file.
If
.I fd
or
.I path
refer to a directory, then the value applies to the whole directory.
The corresponding macro is
.BR _POSIX_LINK_MAX .
.TP
.B _PC_MAX_CANON
returns the maximum length of a formatted input line, where
.I fd
or
.I path
must refer to a terminal.
The corresponding macro is
.BR _POSIX_MAX_CANON .
.TP
.B _PC_MAX_INPUT
returns the maximum length of an input line, where
.I fd
or
.I path
must refer to a terminal.
The corresponding macro is
.BR _POSIX_MAX_INPUT .
.TP
.B _PC_NAME_MAX
returns the maximum length of a filename in the directory
.I path
or
.IR fd
that the process is allowed to create.
The corresponding macro is
.BR _POSIX_NAME_MAX .
.TP
.B _PC_PATH_MAX
returns the maximum length of a relative pathname when
.I path
or
.I fd
is the current working directory.
The corresponding macro is
.BR _POSIX_PATH_MAX .
.TP
.B _PC_PIPE_BUF
returns the size of the pipe buffer, where
.I fd
must refer to a pipe or FIFO and
.I path
must refer to a FIFO.
The corresponding macro is
.BR _POSIX_PIPE_BUF .
.TP
.B _PC_CHOWN_RESTRICTED
returns nonzero if the
.BR chown (2)
call may not be used on this file.
If
.I fd
or
.I path
refer to a directory, then this applies to all files in that
directory.
The corresponding macro is
.BR _POSIX_CHOWN_RESTRICTED .
.TP
.B _PC_NO_TRUNC
returns nonzero if accessing filenames longer than
.B _POSIX_NAME_MAX
generates an error.
The corresponding macro is
.BR _POSIX_NO_TRUNC .
.TP
.B _PC_VDISABLE
returns nonzero if special character processing can be disabled, where
.I fd
or
.I path
must refer to a terminal.
.SH RETURN VALUE
The limit is returned, if one exists.
If the system does not have a
limit for the requested resource, \-1 is returned, and
.I errno
is unchanged.
If there is an error, \-1 is returned, and
.I errno
is set to reflect the nature of the error.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw23 lb lb
l l l.
Interface	Attribute	Value
T{
.BR fpathconf (),
.BR pathconf ()
T}	Thread safety	MT-Safe
.TE

.SH CONFORMING TO
POSIX.1-2001.
.SH NOTES
Files with name lengths longer than the value returned for
.I name
equal to
.B _PC_NAME_MAX
may exist in the given directory.
.PP
Some returned values may be huge; they are not suitable for allocating
memory.
.SH SEE ALSO
.BR getconf (1),
.BR open (2),
.BR statfs (2),
.BR confstr (3),
.BR sysconf (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 2002 Walter Harms (walter.harms@informatik.uni-oldenburg.de)
.\"
.\" %%%LICENSE_START(GPL_NOVERSION_ONELINE)
.\" Distributed under GPL
.\" %%%LICENSE_END
.\"
.\" This was done with the help of the glibc manual.
.\"
.\" 2004-10-31, aeb, corrected
.TH FPCLASSIFY 3  2015-03-02 "" "Linux Programmer's Manual"
.SH NAME
fpclassify, isfinite, isnormal, isnan, isinf \- floating-point
classification macros
.SH SYNOPSIS
.nf
.B #include <math.h>
.sp
.BI "int fpclassify(" x );
.sp
.BI "int isfinite(" x );
.sp
.BI "int isnormal(" x );
.sp
.BI "int isnan(" x );
.sp
.BI "int isinf(" x );
.fi
.sp
Link with \fI\-lm\fP.
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.\" I haven't fully grokked the source to determine the FTM requirements;
.\" in part, the following has been tested by experiment.
.ad l
.BR fpclassify (),
.BR isfinite (),
.BR isnormal ():
.RS 4
_XOPEN_SOURCE\ >=\ 600 || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.BR isnan ():
.RS 4
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.BR isinf ():
.RS 4
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE\ >=\ 600 || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.ad
.SH DESCRIPTION
Floating point numbers can have special values, such as
infinite or NaN.
With the macro
.BI fpclassify( x )
you can find out what type
.I x
is.
The macro takes any floating-point expression as argument.
The result is one of the following values:
.TP 14
.B FP_NAN
.I x
is "Not a Number".
.TP
.B FP_INFINITE
.I x
is either positive infinity or negative infinity.
.TP
.B FP_ZERO
.I x
is zero.
.TP
.B FP_SUBNORMAL
.I x
is too small to be represented in normalized format.
.TP
.B FP_NORMAL
if nothing of the above is correct then it must be a
normal floating-point number.
.LP
The other macros provide a short answer to some standard questions.
.TP 14
.BI isfinite( x )
returns a nonzero value if
.br
(fpclassify(x) != FP_NAN && fpclassify(x) != FP_INFINITE)
.TP
.BI isnormal( x )
returns a nonzero value if
(fpclassify(x) == FP_NORMAL)
.TP
.BI isnan( x )
returns a nonzero value if
(fpclassify(x) == FP_NAN)
.TP
.BI isinf( x )
returns 1 if
.I x
is positive infinity, and \-1 if
.I x
is negative infinity.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.ad l
.TS
allbox;
lbw28 lb lb
l l l.
Interface	Attribute	Value
T{
.BR fpclassify (),
.BR isfinite (),
.BR isnormal (),
.BR isnan (),
.BR isinf ()
T}	Thread safety	MT-Safe
.TE
.ad
.SH CONFORMING TO
C99, POSIX.1.

For
.BR isinf (),
the standards merely say that the return value is nonzero
if and only if the argument has an infinite value.
.SH NOTES
In glibc 2.01 and earlier,
.BR isinf ()
returns a nonzero value (actually: 1) if
.I x
is positive infinity or negative infinity.
(This is all that C99 requires.)
.SH SEE ALSO
.BR finite (3),
.BR INFINITY (3),
.BR isgreater (3),
.BR signbit (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2001 Andries Brouwer <aeb@cwi.nl>.
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH FPURGE 3  2001-12-15 "" "Linux Programmer's Manual"
.SH NAME
fpurge, __fpurge \- purge a stream
.SH SYNOPSIS
.nf
/* unsupported */
.B #include <stdio.h>
.sp
.BI "int fpurge(FILE *" stream );
.sp
/* supported */
.B #include <stdio.h>
.br
.B #include <stdio_ext.h>
.sp
.BI "void  __fpurge(FILE *" stream );
.fi
.SH DESCRIPTION
The function
.BR fpurge ()
clears the buffers of the given stream.
For output streams this discards any unwritten output.
For input streams this discards any input read from the underlying object
but not yet obtained via
.BR getc (3);
this includes any text pushed back via
.BR ungetc (3).
See also
.BR fflush (3).
.LP
The function
.BR __fpurge ()
does precisely the same, but without returning a value.
.SH RETURN VALUE
Upon successful completion
.BR fpurge ()
returns 0.
On error, it returns \-1 and sets
.I errno
appropriately.
.SH ERRORS
.TP
.B EBADF
.I stream
is not an open stream.
.SH CONFORMING TO
These functions are nonstandard and not portable.
The function
.BR fpurge ()
was introduced in 4.4BSD and is not available under Linux.
The function
.BR __fpurge ()
was introduced in Solaris, and is present in glibc 2.1.95 and later.
.SH NOTES
Usually it is a mistake to want to discard input buffers.
.SH SEE ALSO
.\" .BR fclean (3),
.BR fflush (3),
.BR setbuf (3),
.BR stdio_ext (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) Bruno Haible <haible@clisp.cons.org>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_ONEPARA)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"   GNU glibc-2 source code and manual
.\"   Dinkumware C library reference http://www.dinkumware.com/
.\"   OpenGroup's Single UNIX specification http://www.UNIX-systems.org/online.html
.\"   ISO/IEC 9899:1999
.\"
.TH FPUTWC 3  2015-03-29 "GNU" "Linux Programmer's Manual"
.SH NAME
fputwc, putwc \- write a wide character to a FILE stream
.SH SYNOPSIS
.nf
.B #include <stdio.h>
.br
.B #include <wchar.h>
.sp
.BI "wint_t fputwc(wchar_t " wc ", FILE *" stream );
.BI "wint_t putwc(wchar_t " wc ", FILE *" stream );
.fi
.SH DESCRIPTION
The
.BR fputwc ()
function is the wide-character
equivalent of the
.BR fputc (3)
function.
It writes the wide character \fIwc\fP to \fIstream\fP.
If
\fIferror(stream)\fP becomes true, it returns
.BR WEOF .
If a wide-character conversion error occurs,
it sets \fIerrno\fP to \fBEILSEQ\fP and returns
.BR WEOF .
Otherwise, it returns \fIwc\fP.
.PP
The
.BR putwc ()
function or macro functions identically to
.BR fputwc ().
It may be implemented as a macro, and may evaluate its argument
more than once.
There is no reason ever to use it.
.PP
For nonlocking counterparts, see
.BR unlocked_stdio (3).
.SH RETURN VALUE
The
.BR fputwc ()
function returns \fIwc\fP if no error occurred, or
.B WEOF
to indicate an error.
In the event of an error,
.I errno
is set to indicate the cause.
.SH ERRORS
Apart from the usual ones, there is
.TP
.B EILSEQ
Conversion of \fIwc\fP to the stream's encoding fails.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw17 lb lb
l l l.
Interface	Attribute	Value
T{
.BR fputwc (),
.BR putwc ()
T}	Thread safety	MT-Safe
.TE

.SH CONFORMING TO
C99, POSIX.1-2001.
.SH NOTES
The behavior of
.BR fputwc ()
depends on the
.B LC_CTYPE
category of the
current locale.
.PP
In the absence of additional information passed to the
.BR fopen (3)
call, it is
reasonable to expect that
.BR fputwc ()
will actually write the multibyte
sequence corresponding to the wide character \fIwc\fP.
.SH SEE ALSO
.BR fgetwc (3),
.BR fputws (3),
.BR unlocked_stdio (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) Bruno Haible <haible@clisp.cons.org>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_ONEPARA)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"   GNU glibc-2 source code and manual
.\"   Dinkumware C library reference http://www.dinkumware.com/
.\"   OpenGroup's Single UNIX specification http://www.UNIX-systems.org/online.html
.\"   ISO/IEC 9899:1999
.\"
.TH FPUTWS 3  2015-03-29 "GNU" "Linux Programmer's Manual"
.SH NAME
fputws \- write a wide-character string to a FILE stream
.SH SYNOPSIS
.nf
.B #include <wchar.h>
.sp
.BI "int fputws(const wchar_t *" ws ", FILE *" stream );
.fi
.SH DESCRIPTION
The
.BR fputws ()
function is the wide-character equivalent of
the
.BR fputs (3)
function.
It writes the wide-character string starting at \fIws\fP, up to but
not including the terminating null wide character (L\(aq\\0\(aq), to \fIstream\fP.
.PP
For a nonlocking counterpart, see
.BR unlocked_stdio (3).
.SH RETURN VALUE
The
.BR fputws ()
function returns a
nonnegative integer if the operation was
successful, or \-1 to indicate an error.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR fputws ()
T}	Thread safety	MT-Safe
.TE

.SH CONFORMING TO
C99, POSIX.1-2001.
.SH NOTES
The behavior of
.BR fputws ()
depends on the
.B LC_CTYPE
category of the
current locale.
.PP
In the absence of additional information passed to the
.BR fopen (3)
call, it is
reasonable to expect that
.BR fputws ()
will actually write the multibyte
string corresponding to the wide-character string \fIws\fP.
.SH SEE ALSO
.BR fputwc (3),
.BR unlocked_stdio (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1990, 1991 The Regents of the University of California.
.\" All rights reserved.
.\"
.\" This code is derived from software contributed to Berkeley by
.\" Chris Torek and the American National Standards Committee X3,
.\" on Information Processing Systems.
.\"
.\" %%%LICENSE_START(BSD_4_CLAUSE_UCB)
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\" %%%LICENSE_END
.\"
.\"     @(#)fread.3	6.6 (Berkeley) 6/29/91
.\"
.\" Converted for Linux, Mon Nov 29 15:37:33 1993, faith@cs.unc.edu
.\" Sun Feb 19 21:26:54 1995 by faith, return values
.\" Modified Thu Apr 20 20:43:53 1995 by Jim Van Zandt <jrv@vanzandt.mv.com>
.\" Modified Fri May 17 10:21:51 1996 by Martin Schulze <joey@infodrom.north.de>
.\"
.TH FREAD 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
fread, fwrite \- binary stream input/output
.SH SYNOPSIS
.nf
.B #include <stdio.h>
.sp
.BI "size_t fread(void *" ptr ", size_t " size ", size_t " nmemb \
", FILE *" stream );
.sp
.BI "size_t fwrite(const void *" ptr ", size_t " size ", size_t " nmemb ,
.BI "              FILE *" stream );
.fi
.SH DESCRIPTION
The function
.BR fread ()
reads
.I nmemb
elements of data, each
.I size
bytes long, from the stream pointed to by
.IR stream ,
storing them at the location given by
.IR ptr .
.PP
The function
.BR fwrite ()
writes
.I nmemb
elements of data, each
.I size
bytes long, to the stream pointed to by
.IR stream ,
obtaining them from the location given by
.IR ptr .
.PP
For nonlocking counterparts, see
.BR unlocked_stdio (3).
.SH RETURN VALUE
On success,
.BR fread ()
and
.BR fwrite ()
return the number of
.I items
read or written.
This number equals the number of bytes transferred only when
.I size
is 1.
If an error occurs, or the end of the file is reached,
the return value is a short item count (or zero).
.PP
.BR fread ()
does not distinguish between end-of-file and error, and callers must use
.BR feof (3)
and
.BR ferror (3)
to determine which occurred.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw17 lb lb
l l l.
Interface	Attribute	Value
T{
.BR fread (),
.BR fwrite ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C89, POSIX.1-2001.
.SH SEE ALSO
.BR read (2),
.BR write (2),
.BR feof (3),
.BR ferror (3),
.BR unlocked_stdio (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified 1993-07-24 by Rik Faith (faith@cs.unc.edu)
.\" Modified 2002-07-27 by Walter Harms
.\" 	(walter.harms@informatik.uni-oldenburg.de)
.\"
.TH FREXP 3 2015-04-19 "" "Linux Programmer's Manual"
.SH NAME
frexp, frexpf, frexpl \- convert floating-point number to fractional
and integral components
.SH SYNOPSIS
.nf
.B #include <math.h>
.sp
.BI "double frexp(double " x ", int *" exp );
.br
.BI "float frexpf(float " x ", int *" exp );
.br
.BI "long double frexpl(long double " x ", int *" exp );
.fi
.sp
Link with \fI\-lm\fP.
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR frexpf (),
.BR frexpl ():
.RS 4
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE\ >=\ 600 || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.ad
.SH DESCRIPTION
These functions are used to split the number
.I x
into a
normalized fraction and an exponent which is stored in
.IR exp .
.SH RETURN VALUE
These functions return the normalized fraction.
If the argument
.I x
is not zero,
the normalized fraction is
.I x
times a power of two,
and its absolute value is always in the range 1/2 (inclusive) to
1 (exclusive), that is, [0.5,1).

If
.I x
is zero, then the normalized fraction is
zero and zero is stored in
.IR exp .

If
.I x
is a NaN,
a NaN is returned, and the value of
.I *exp
is unspecified.

If
.I x
is positive infinity (negative infinity),
positive infinity (negative infinity) is returned, and the value of
.I *exp
is unspecified.
.SH ERRORS
No errors occur.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw27 lb lb
l l l.
Interface	Attribute	Value
T{
.BR frexp (),
.BR frexpf (),
.BR frexpl ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C99, POSIX.1-2001, POSIX.1-2008.

The variant returning
.I double
also conforms to
SVr4, 4.3BSD, C89.
.SH EXAMPLE
The program below produces results such as the following:
.sp
.nf
.in +4n
.RB "$" " ./a.out 2560"
frexp(2560, &e) = 0.625: 0.625 * 2^12 = 2560
.RB "$" " ./a.out \-4"
frexp(\-4, &e) = \-0.5: \-0.5 * 2^3 = \-4
.in
.fi
.SS Program source
\&
.nf
#include <math.h>
#include <float.h>
#include <stdio.h>
#include <stdlib.h>

int
main(int argc, char *argv[])
{
    double x, r;
    int exp;

    x = strtod(argv[1], NULL);
    r = frexp(x, &exp);

    printf("frexp(%g, &e) = %g: %g * %d^%d = %g\\n",
           x, r, r, FLT_RADIX, exp, x);
    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR ldexp (3),
.BR modf (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1990, 1991 The Regents of the University of California.
.\" All rights reserved.
.\"
.\" This code is derived from software contributed to Berkeley by
.\" Chris Torek and the American National Standards Committee X3,
.\" on Information Processing Systems.
.\"
.\" %%%LICENSE_START(BSD_4_CLAUSE_UCB)
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\" %%%LICENSE_END
.\"
.\"     @(#)fseek.3	6.11 (Berkeley) 6/29/91
.\"
.\" Converted for Linux, Mon Nov 29 15:22:01 1993, faith@cs.unc.edu
.\"
.TH FSEEK 3  2015-03-29 "GNU" "Linux Programmer's Manual"
.SH NAME
fgetpos, fseek, fsetpos, ftell, rewind \- reposition a stream
.SH SYNOPSIS
.B #include <stdio.h>
.sp
.BI "int fseek(FILE *" stream ", long " offset ", int " whence );

.BI "long ftell(FILE *" stream );

.BI "void rewind(FILE *" stream );

.BI "int fgetpos(FILE *" stream ", fpos_t *" pos );
.br
.BI "int fsetpos(FILE *" stream ", const fpos_t *" pos );
.SH DESCRIPTION
The
.BR fseek ()
function sets the file position indicator for the stream pointed to by
.IR stream .
The new position, measured in bytes, is obtained by adding
.I offset
bytes to the position specified by
.IR whence .
If
.I whence
is set to
.BR SEEK_SET ,
.BR SEEK_CUR ,
or
.BR SEEK_END ,
the offset is relative to the start of the file, the current position
indicator, or end-of-file, respectively.
A successful call to the
.BR fseek ()
function clears the end-of-file indicator for the stream and undoes
any effects of the
.BR ungetc (3)
function on the same stream.
.PP
The
.BR ftell ()
function obtains the current value of the file position indicator for the
stream pointed to by
.IR stream .
.PP
The
.BR rewind ()
function sets the file position indicator for the stream pointed to by
.I stream
to the beginning of the file.
It is equivalent to:
.PP
.RS
(void) fseek(stream, 0L, SEEK_SET)
.RE
.PP
except that the error indicator for the stream is also cleared (see
.BR clearerr (3)).
.PP
The
.BR fgetpos ()
and
.BR fsetpos ()
functions are alternate interfaces equivalent to
.BR ftell ()
and
.BR fseek ()
(with
.I whence
set to
.BR SEEK_SET ),
setting and storing the current value of the file offset into or from the
object referenced by
.IR pos .
On some non-UNIX systems, an
.I fpos_t
object may be a complex object and these routines may be the only way to
portably reposition a text stream.
.SH RETURN VALUE
The
.BR rewind ()
function returns no value.
Upon successful completion,
.BR fgetpos (),
.BR fseek (),
.BR fsetpos ()
return 0,
and
.BR ftell ()
returns the current offset.
Otherwise, \-1 is returned and
.I errno
is set to indicate the error.
.SH ERRORS
.TP
.B EBADF
The
.I stream
specified is not a seekable stream.
.TP
.B EINVAL
The
.I whence
argument to
.BR fseek ()
was not
.BR SEEK_SET ,
.BR SEEK_END ,
or
.BR SEEK_CUR .
Or: the resulting file offset would be negative.
.PP
The functions
.BR fgetpos (),
.BR fseek (),
.BR fsetpos (),
and
.BR ftell ()
may also fail and set
.I errno
for any of the errors specified for the routines
.BR fflush (3),
.BR fstat (2),
.BR lseek (2),
and
.BR malloc (3).
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw27 lb lb
l l l.
Interface	Attribute	Value
T{
.BR fseek (),
.BR ftell (),
.BR rewind (),
.br
.BR fgetpos (),
.BR fsetpos ()
T}	Thread safety	MT-Safe
.TE

.SH CONFORMING TO
C89, C99.
.SH SEE ALSO
.BR lseek (2),
.BR fseeko (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 2001 Andries Brouwer <aeb@cwi.nl>.
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH FSEEKO 3  2015-03-29 "" "Linux Programmer's Manual"
.SH NAME
fseeko, ftello \- seek to or report file position
.SH SYNOPSIS
.nf
.B #include <stdio.h>
.sp
.BI "int fseeko(FILE *" stream ", off_t " offset ", int " whence );
.sp
.BI "off_t ftello(FILE *" stream );
.BI
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR fseeko (),
.BR ftello ():
.br
.RS 4
.ad l
_FILE_OFFSET_BITS\ ==\ 64 ||
_POSIX_C_SOURCE\ >=\ 200112L || _XOPEN_SOURCE\ >=\ 600
.br
(defining the obsolete _LARGEFILE_SOURCE macro also works)
.RE
.ad
.SH DESCRIPTION
The
.BR fseeko ()
and
.BR ftello ()
functions are identical to
.BR fseek (3)
and
.BR ftell (3)
(see
.BR fseek (3)),
respectively, except that the
.I offset
argument of
.BR fseeko ()
and the return value of
.BR ftello ()
is of type
.I off_t
instead of
.IR long .
.LP
On some architectures, both
.IR off_t
and
.I long
are 32-bit types, but defining
.BR _FILE_OFFSET_BITS
with the value 64 (before including
.I any
header files)
will turn
.I off_t
into a 64-bit type.
.SH RETURN VALUE
On successful completion,
.BR fseeko ()
returns 0, while
.BR ftello ()
returns the current offset.
Otherwise, \-1 is returned and
.I errno
is set to indicate the error.
.SH ERRORS
See the ERRORS in
.BR fseek (3).
.SH VERSIONS
These functions are available under glibc since version 2.1.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw18 lb lb
l l l.
Interface	Attribute	Value
T{
.BR fseeko (),
.BR ftello ()
T}	Thread safety	MT-Safe
.TE

.SH CONFORMING TO
SUSv2, POSIX.1-2001.
.SH NOTES
These functions are found on System V-like systems.
.SH SEE ALSO
.BR fseek (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1993 Michael Haardt
.\" (michael@moria.de)
.\" Fri Apr  2 11:32:09 MET DST 1993
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.\" Modified Sat Jul 24 14:23:14 1993 by Rik Faith (faith@cs.unc.edu)
.\" Modified Sun Oct 18 17:31:43 1998 by Andries Brouwer (aeb@cwi.nl)
.\" 2008-06-23, mtk, minor rewrites, added some details
.\"
.TH FTIME 3 2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
ftime \- return date and time
.SH SYNOPSIS
.B "#include <sys/timeb.h>"
.sp
.BI "int ftime(struct timeb *" tp );
.SH DESCRIPTION
This function returns the current time as seconds and milliseconds
since the Epoch, 1970-01-01 00:00:00 +0000 (UTC).
The time is returned in
.IR tp ,
which is declared as follows:
.sp
.in +4n
.nf
struct timeb {
    time_t         time;
    unsigned short millitm;
    short          timezone;
    short          dstflag;
};
.fi
.in
.LP
Here \fItime\fP is the number of seconds since the Epoch,
and \fImillitm\fP is the number of milliseconds since \fItime\fP
seconds since the Epoch.
The \fItimezone\fP field is the local timezone measured in minutes
of time west of Greenwich (with a negative value indicating minutes
east of Greenwich).
The \fIdstflag\fP field
is a flag that, if nonzero, indicates that Daylight Saving time
applies locally during the appropriate part of the year.
.LP
POSIX.1-2001 says that the contents of the \fItimezone\fP and \fIdstflag\fP
fields are unspecified; avoid relying on them.
.SH RETURN VALUE
This function always returns 0.
(POSIX.1-2001 specifies, and some systems document, a \-1 error return.)
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR ftime ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
4.2BSD, POSIX.1-2001.
POSIX.1-2008 removes the specification of
.BR ftime ().

This function is obsolete.
Don't use it.
If the time in seconds
suffices,
.BR time (2)
can be used;
.BR gettimeofday (2)
gives microseconds;
.BR clock_gettime (2)
gives nanoseconds but is not as widely available.
.SH BUGS
.LP
Early glibc2 is buggy and returns 0 in the
.I millitm
field;
glibc 2.1.1 is correct again.
.\" .SH HISTORY
.\" The
.\" .BR ftime ()
.\" function appeared in 4.2BSD.
.SH SEE ALSO
.BR gettimeofday (2),
.BR time (2)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 Giorgio Ciucci (giorgio@crcc.it)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified 2001-11-28, by Michael Kerrisk, <mtk.manpages@gmail.com>
.\"	Changed data type of proj_id; minor fixes
.\"	aeb: further fixes; added notes.
.\"
.TH FTOK 3 2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
ftok \- convert a pathname and a project identifier to a System V IPC key
.SH SYNOPSIS
.nf
.B #include <sys/types.h>
.B #include <sys/ipc.h>
.fi
.sp
.BI "key_t ftok(const char *" pathname ", int " proj_id );
.SH DESCRIPTION
The
.BR ftok ()
function uses the identity of the file named by the given
.I pathname
(which must refer to an existing, accessible file)
and the least significant 8 bits of
.I proj_id
(which must be nonzero) to generate a
.I key_t
type System V IPC key, suitable for use with
.BR msgget (2),
.BR semget (2),
or
.BR shmget (2).
.LP
The resulting value is the same for all pathnames that
name the same file, when the same value of
.I proj_id
is used.
The value returned should be different when the
(simultaneously existing) files or the project IDs differ.
.SH RETURN VALUE
On success, the generated
.I key_t
value is returned.
On failure \-1 is returned, with
.I errno
indicating the error as for the
.BR stat (2)
system call.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR ftok ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
POSIX.1-2001.
.SH NOTES
On some ancient systems, the prototype was:
.sp
.RS
.BI "key_t ftok(char *" pathname ", char " proj_id );
.RE
.PP
Today,
.I proj_id
is an
.IR int ,
but still only 8 bits are used.
Typical usage has an ASCII character
.IR proj_id ,
that is why the behavior is said to be undefined when
.I proj_id
is zero.
.LP
Of course, no guarantee can be given that the resulting
.I key_t
is unique.
Typically, a best-effort attempt combines the given
.I proj_id
byte, the lower 16 bits of the inode number, and the
lower 8 bits of the device number into a 32-bit result.
Collisions may easily happen, for example between files on
.I /dev/hda1
and files on
.IR /dev/sda1 .
.SH SEE ALSO
.BR msgget (2),
.BR semget (2),
.BR shmget (2),
.BR stat (2),
.BR svipc (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\"	$NetBSD: fts.3,v 1.13.2.1 1997/11/14 02:09:32 mrg Exp $
.\"
.\" Copyright (c) 1989, 1991, 1993, 1994
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" %%%LICENSE_START(BSD_4_CLAUSE_UCB)
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\" %%%LICENSE_END
.\"
.\"     @(#)fts.3	8.5 (Berkeley) 4/16/94
.\"
.\" 2007-12-08, mtk, Converted from mdoc to man macros
.\"
.TH FTS 3 2014-03-18 "Linux" "Linux Programmer's Manual"
.SH NAME
fts, fts_open, fts_read, fts_children, fts_set, fts_close \- \
traverse a file hierarchy
.SH SYNOPSIS
.nf
.B #include <sys/types.h>
.B #include <sys/stat.h>
.B #include <fts.h>
.sp
.BI "FTS *fts_open(char * const *" path_argv ", int " options ", "
.BI "              int (*" compar ")(const FTSENT **, const FTSENT **));"
.sp
.BI "FTSENT *fts_read(FTS *" ftsp );
.sp
.BI "FTSENT *fts_children(FTS *" ftsp ", int " options );
.sp
.BI "int fts_set(FTS *" ftsp ", FTSENT *" f ", int " options );
.sp
.BI "int fts_close(FTS *" ftsp );
.fi
.SH DESCRIPTION
The
fts functions are provided for traversing
file hierarchies.
A simple overview is that the
.BR fts_open ()
function returns a "handle" on a file hierarchy, which is then supplied to
the other
fts functions.
The function
.BR fts_read ()
returns a pointer to a structure describing one of the files in the file
hierarchy.
The function
.BR fts_children ()
returns a pointer to a linked list of structures, each of which describes
one of the files contained in a directory in the hierarchy.
In general, directories are visited two distinguishable times; in preorder
(before any of their descendants are visited) and in postorder (after all
of their descendants have been visited).
Files are visited once.
It is possible to walk the hierarchy "logically" (visiting the files that
symbolic links point to)
or physically (visiting the symbolic links themselves),
order the walk of the hierarchy or
prune and/or revisit portions of the hierarchy.
.PP
Two structures are defined (and typedef'd) in the include file
.IR <fts.h> .
The first is
.IR FTS ,
the structure that represents the file hierarchy itself.
The second is
.IR FTSENT ,
the structure that represents a file in the file
hierarchy.
Normally, an
.I FTSENT
structure is returned for every file in the file
hierarchy.
In this manual page, "file" and
"FTSENT structure"
are generally interchangeable.
The
.I FTSENT
structure contains at least the following fields, which are
described in greater detail below:
.in +4n
.nf

typedef struct _ftsent {
    unsigned short fts_info;     /* flags for FTSENT structure */
    char          *fts_accpath;  /* access path */
    char          *fts_path;     /* root path */
    short          fts_pathlen;  /* strlen(fts_path) */
    char          *fts_name;     /* filename */
    short          fts_namelen;  /* strlen(fts_name) */
    short          fts_level;    /* depth (\-1 to N) */
    int            fts_errno;    /* file errno */
    long           fts_number;   /* local numeric value */
    void          *fts_pointer;  /* local address value */
    struct ftsent *fts_parent;   /* parent directory */
    struct ftsent *fts_link;     /* next file structure */
    struct ftsent *fts_cycle;    /* cycle structure */
    struct stat   *fts_statp;    /* stat(2) information */
} FTSENT;
.fi
.in
.PP
These fields are defined as follows:
.\" .Bl -tag -width "fts_namelen"
.TP 12
.IR fts_info
One of the following flags describing the returned
.I FTSENT
structure and
the file it represents.
With the exception of directories without errors
.RB ( FTS_D ),
all of these
entries are terminal, that is, they will not be revisited, nor will any
of their descendants be visited.
.\" .Bl  -tag -width FTS_DEFAULT
.RS 12
.TP 12
.BR FTS_D
A directory being visited in preorder.
.TP
.BR FTS_DC
A directory that causes a cycle in the tree.
(The
.I fts_cycle
field of the
.I FTSENT
structure will be filled in as well.)
.TP
.BR FTS_DEFAULT
Any
.I FTSENT
structure that represents a file type not explicitly described
by one of the other
.I fts_info
values.
.TP
.BR FTS_DNR
A directory which cannot be read.
This is an error return, and the
.I fts_errno
field will be set to indicate what caused the error.
.TP
.BR FTS_DOT
A file named
"."
or
".."
which was not specified as a filename to
.BR fts_open ()
(see
.BR FTS_SEEDOT ).
.TP
.BR FTS_DP
A directory being visited in postorder.
The contents of the
.I FTSENT
structure will be unchanged from when
it was returned in preorder, that is, with the
.I fts_info
field set to
.BR FTS_D .
.TP
.BR FTS_ERR
This is an error return, and the
.I fts_errno
field will be set to indicate what caused the error.
.TP
.BR FTS_F
A regular file.
.TP
.BR FTS_NS
A file for which no
.BR stat (2)
information was available.
The contents of the
.I fts_statp
field are undefined.
This is an error return, and the
.I fts_errno
field will be set to indicate what caused the error.
.TP
.BR FTS_NSOK
A file for which no
.BR stat (2)
information was requested.
The contents of the
.I fts_statp
field are undefined.
.TP
.BR FTS_SL
A symbolic link.
.TP
.BR FTS_SLNONE
A symbolic link with a nonexistent target.
The contents of the
.I fts_statp
field reference the file characteristic information for the symbolic link
itself.
.\" .El
.RE
.TP
.IR fts_accpath
A path for accessing the file from the current directory.
.TP
.IR fts_path
The path for the file relative to the root of the traversal.
This path contains the path specified to
.BR fts_open ()
as a prefix.
.TP
.IR fts_pathlen
The length of the string referenced by
.IR fts_path .
.TP
.IR fts_name
The name of the file.
.TP
.IR fts_namelen
The length of the string referenced by
.IR fts_name .
.TP
.IR fts_level
The depth of the traversal, numbered from \-1 to N, where this file
was found.
The
.I FTSENT
structure representing the parent of the starting point (or root)
of the traversal is numbered \-1, and the
.I FTSENT
structure for the root
itself is numbered 0.
.TP
.IR fts_errno
Upon return of a
.I FTSENT
structure from the
.BR fts_children ()
or
.BR fts_read ()
functions, with its
.I fts_info
field set to
.BR FTS_DNR ,
.BR FTS_ERR
or
.BR FTS_NS ,
the
.I fts_errno
field contains the value of the external variable
.I errno
specifying the cause of the error.
Otherwise, the contents of the
.I fts_errno
field are undefined.
.TP
.IR fts_number
This field is provided for the use of the application program and is
not modified by the
fts functions.
It is initialized to 0.
.TP
.IR fts_pointer
This field is provided for the use of the application program and is
not modified by the
fts functions.
It is initialized to
NULL.
.TP
.IR fts_parent
A pointer to the
.I FTSENT
structure referencing the file in the hierarchy
immediately above the current file, that is, the directory of which this
file is a member.
A parent structure for the initial entry point is provided as well,
however, only the
.IR fts_level ,
.I fts_number
and
.I fts_pointer
fields are guaranteed to be initialized.
.TP
.IR fts_link
Upon return from the
.BR fts_children ()
function, the
.I fts_link
field points to the next structure in the NULL-terminated linked list of
directory members.
Otherwise, the contents of the
.I fts_link
field are undefined.
.TP
.IR fts_cycle
If a directory causes a cycle in the hierarchy (see
.BR FTS_DC ),
either because
of a hard link between two directories, or a symbolic link pointing to a
directory, the
.I fts_cycle
field of the structure will point to the
.I FTSENT
structure in the hierarchy that references the same file as the current
.I FTSENT
structure.
Otherwise, the contents of the
.I fts_cycle
field are undefined.
.TP
.IR fts_statp
A pointer to
.BR stat (2)
information for the file.
.\" .El
.PP
A single buffer is used for all of the paths of all of the files in the
file hierarchy.
Therefore, the
.I fts_path
and
.I fts_accpath
fields are guaranteed to be
null-terminated
.I only
for the file most recently returned by
.BR fts_read ().
To use these fields to reference any files represented by other
.I FTSENT
structures will require that the path buffer be modified using the
information contained in that
.I FTSENT
structure's
.I fts_pathlen
field.
Any such modifications should be undone before further calls to
.BR fts_read ()
are attempted.
The
.I fts_name
field is always
null-terminated.
.SS fts_open()
The
.BR fts_open ()
function takes a pointer to an array of character pointers naming one
or more paths which make up a logical file hierarchy to be traversed.
The array must be terminated by a
null pointer.
.PP
There are
a number of options, at least one of which (either
.BR FTS_LOGICAL
or
.BR FTS_PHYSICAL )
must be specified.
The options are selected by ORing
the following values:
.\" .Bl -tag -width "FTS_PHYSICAL"
.TP 13
.BR FTS_COMFOLLOW
This option causes any symbolic link specified as a root path to be
followed immediately whether or not
.BR FTS_LOGICAL
is also specified.
.TP
.BR FTS_LOGICAL
This option causes the
fts routines to return
.I FTSENT
structures for the targets of symbolic links
instead of the symbolic links themselves.
If this option is set, the only symbolic links for which
.I FTSENT
structures
are returned to the application are those referencing nonexistent files.
Either
.BR FTS_LOGICAL
or
.BR FTS_PHYSICAL
.I must
be provided to the
.BR fts_open ()
function.
.TP
.BR FTS_NOCHDIR
As a performance optimization, the
fts functions change directories as they walk the file hierarchy.
This has the side-effect that an application cannot rely on being
in any particular directory during the traversal.
The
.BR FTS_NOCHDIR
option turns off this optimization, and the
fts functions will not change the current directory.
Note that applications should not themselves change their current directory
and try to access files unless
.BR FTS_NOCHDIR
is specified and absolute
pathnames were provided as arguments to
.BR fts_open ().
.TP
.BR FTS_NOSTAT
By default, returned
.I FTSENT
structures reference file characteristic information (the
.I statp
field) for each file visited.
This option relaxes that requirement as a performance optimization,
allowing the
fts functions to set the
.I fts_info
field to
.BR FTS_NSOK
and leave the contents of the
.I statp
field undefined.
.TP
.BR FTS_PHYSICAL
This option causes the
fts routines to return
.I FTSENT
structures for symbolic links themselves instead
of the target files they point to.
If this option is set,
.I FTSENT
structures for all symbolic links in the
hierarchy are returned to the application.
Either
.BR FTS_LOGICAL
or
.BR FTS_PHYSICAL
.I must
be provided to the
.BR fts_open ()
function.
.TP
.BR FTS_SEEDOT
By default, unless they are specified as path arguments to
.BR fts_open (),
any files named
"."
or
".."
encountered in the file hierarchy are ignored.
This option causes the
fts routines to return
.I FTSENT
structures for them.
.TP
.BR FTS_XDEV
This option prevents
fts from descending into directories that have a different device number
than the file from which the descent began.
.\" .El
.PP
The argument
.BR compar ()
specifies a user-defined function which may be used to order the traversal
of the hierarchy.
It
takes two pointers to pointers to
.I FTSENT
structures as arguments and
should return a negative value, zero, or a positive value to indicate
if the file referenced by its first argument comes before, in any order
with respect to, or after, the file referenced by its second argument.
The
.IR fts_accpath ,
.I fts_path
and
.I fts_pathlen
fields of the
.I FTSENT
structures may
.I never
be used in this comparison.
If the
.I fts_info
field is set to
.BR FTS_NS
or
.BR FTS_NSOK ,
the
.I fts_statp
field may not either.
If the
.BR compar ()
argument is
NULL,
the directory traversal order is in the order listed in
.I path_argv
for the root paths, and in the order listed in the directory for
everything else.
.SS fts_read()
The
.BR fts_read ()
function returns a pointer to an
.I FTSENT
structure describing a file in
the hierarchy.
Directories (that are readable and do not cause cycles) are visited at
least twice, once in preorder and once in postorder.
All other files are visited at least once.
(Hard links between directories that do not cause cycles or symbolic
links to symbolic links may cause files to be visited more than once,
or directories more than twice.)
.PP
If all the members of the hierarchy have been returned,
.BR fts_read ()
returns
NULL
and sets the external variable
.I errno
to 0.
If an error unrelated to a file in the hierarchy occurs,
.BR fts_read ()
returns
NULL
and sets
.I errno
appropriately.
If an error related to a returned file occurs, a pointer to an
.I FTSENT
structure is returned, and
.I errno
may or may not have been set (see
.IR fts_info ).
.PP
The
.I FTSENT
structures returned by
.BR fts_read ()
may be overwritten after a call to
.BR fts_close ()
on the same file hierarchy stream, or, after a call to
.BR fts_read ()
on the same file hierarchy stream unless they represent a file of type
directory, in which case they will not be overwritten until after a call to
.BR fts_read ()
after the
.I FTSENT
structure has been returned by the function
.BR fts_read ()
in postorder.
.SS fts_children()
The
.BR fts_children ()
function returns a pointer to an
.I FTSENT
structure describing the first entry in a NULL-terminated linked list of
the files in the directory represented by the
.I FTSENT
structure most recently returned by
.BR fts_read ().
The list is linked through the
.I fts_link
field of the
.I FTSENT
structure, and is ordered by the user-specified comparison function, if any.
Repeated calls to
.BR fts_children ()
will re-create this linked list.
.PP
As a special case, if
.BR fts_read ()
has not yet been called for a hierarchy,
.BR fts_children ()
will return a pointer to the files in the logical directory specified to
.BR fts_open (),
that is, the arguments specified to
.BR fts_open ().
Otherwise, if the
.I FTSENT
structure most recently returned by
.BR fts_read ()
is not a directory being visited in preorder,
or the directory does not contain any files,
.BR fts_children ()
returns
NULL
and sets
.I errno
to zero.
If an error occurs,
.BR fts_children ()
returns
NULL
and sets
.I errno
appropriately.
.PP
The
.I FTSENT
structures returned by
.BR fts_children ()
may be overwritten after a call to
.BR fts_children (),
.BR fts_close ()
or
.BR fts_read ()
on the same file hierarchy stream.
.PP
.I Option
may be set to the following value:
.\" .Bl -tag -width FTS_NAMEONLY
.TP 13
.BR FTS_NAMEONLY
Only the names of the files are needed.
The contents of all the fields in the returned linked list of structures
are undefined with the exception of the
.I fts_name
and
.I fts_namelen
fields.
.\" .El
.SS fts_set()
The function
.BR fts_set ()
allows the user application to determine further processing for the
file
.I f
of the stream
.IR ftsp .
The
.BR fts_set ()
function
returns 0 on success, and \-1 if an error occurs.
.I Option
must be set to one of the following values:
.\" .Bl -tag -width FTS_PHYSICAL
.TP 13
.BR FTS_AGAIN
Revisit the file; any file type may be revisited.
The next call to
.BR fts_read ()
will return the referenced file.
The
.I fts_stat
and
.I fts_info
fields of the structure will be reinitialized at that time,
but no other fields will have been changed.
This option is meaningful only for the most recently returned
file from
.BR fts_read ().
Normal use is for postorder directory visits, where it causes the
directory to be revisited (in both preorder and postorder) as well as all
of its descendants.
.TP
.BR FTS_FOLLOW
The referenced file must be a symbolic link.
If the referenced file is the one most recently returned by
.BR fts_read (),
the next call to
.BR fts_read ()
returns the file with the
.I fts_info
and
.I fts_statp
fields reinitialized to reflect the target of the symbolic link instead
of the symbolic link itself.
If the file is one of those most recently returned by
.BR fts_children (),
the
.I fts_info
and
.I fts_statp
fields of the structure, when returned by
.BR fts_read (),
will reflect the target of the symbolic link instead of the symbolic link
itself.
In either case, if the target of the symbolic link does not exist, the
fields of the returned structure will be unchanged and the
.I fts_info
field will be set to
.BR FTS_SLNONE .
.IP
If the target of the link is a directory, the preorder return, followed
by the return of all of its descendants, followed by a postorder return,
is done.
.TP
.BR FTS_SKIP
No descendants of this file are visited.
The file may be one of those most recently returned by either
.BR fts_children ()
or
.BR fts_read ().
.\" .El
.SS fts_close()
The
.BR fts_close ()
function closes a file hierarchy stream
.I ftsp
and restores the current directory to the directory from which
.BR fts_open ()
was called to open
.IR ftsp .
The
.BR fts_close ()
function
returns 0 on success, and \-1 if an error occurs.
.SH ERRORS
The function
.BR fts_open ()
may fail and set
.I errno
for any of the errors specified for
.BR open (2)
and
.BR malloc (3).
.PP
The function
.BR fts_close ()
may fail and set
.I errno
for any of the errors specified for
.BR chdir (2)
and
.BR close (2).
.PP
The functions
.BR fts_read ()
and
.BR fts_children ()
may fail and set
.I errno
for any of the errors specified for
.BR chdir (2),
.BR malloc (3),
.BR opendir (3),
.BR readdir (3),
and
.BR stat (2).
.PP
In addition,
.BR fts_children (),
.BR fts_open (),
and
.BR fts_set ()
may fail and set
.I errno
as follows:
.TP
.B EINVAL
The options were invalid.
.SH VERSIONS
These functions are available in Linux since glibc2.
.SH CONFORMING TO
4.4BSD.
.SH BUGS
All of the APIs described in this man page are not safe when compiling
a program using the LFS APIs (e.g., when compiling with
.IR -D_FILE_OFFSET_BITS=64 ).
.\" https://sourceware.org/bugzilla/show_bug.cgi?id=15838
.\" https://sourceware.org/bugzilla/show_bug.cgi?id=11460
.\" The following statement is years old, and seems no closer to
.\" being true -- mtk
.\" The
.\" .I fts
.\" utility is expected to be included in a future
.\" POSIX.1
.\" revision.
.SH SEE ALSO
.BR find (1),
.BR chdir (2),
.BR stat (2),
.BR ftw (3),
.BR qsort (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1993 Michael Haardt (michael@moria.de)
.\" and copyright (c) 1999 Andries Brouwer (aeb@cwi.nl)
.\" and copyright (c) 2006 Justin Pryzby <justinpryzby@users.sf.net>
.\" and copyright (c) 2006 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.\" Modified Sun Jul 25 11:02:22 1993 by Rik Faith (faith@cs.unc.edu)
.\" 2006-05-24, Justin Pryzby <justinpryzby@users.sf.net>
.\"  	document FTW_ACTIONRETVAL; include .SH RETURN VALUE;
.\" 2006-05-24, Justin Pryzby <justinpryzby@users.sf.net> and
.\"	Michael Kerrisk <mtk.manpages@gmail.com>
.\" 	reorganized and rewrote much of the page
.\" 2006-05-24, Michael Kerrisk <mtk.manpages@gmail.com>
.\"	Added an example program.
.\"
.TH FTW 3 2015-04-19 "Linux" "Linux Programmer's Manual"
.SH NAME
ftw, nftw \- file tree walk
.SH SYNOPSIS
.nf
.B #include <ftw.h>

.BI "int nftw(const char *" dirpath ,
.BI "        int (*" fn ") (const char *" fpath ", const struct stat *" sb ,
.BI "                   int " typeflag ", struct FTW *" ftwbuf ),
.BI "        int " nopenfd ", int " flags );

.B #include <ftw.h>

.BI "int ftw(const char *" dirpath ,
.BI "        int (*" fn ") (const char *" fpath ", const struct stat *" sb ,
.BI "                   int " typeflag ),
.BI "        int " nopenfd );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR nftw ():
_XOPEN_SOURCE >= 500
.SH DESCRIPTION
.BR nftw ()
walks through the directory tree that is
located under the directory \fIdirpath\fP,
and calls \fIfn\fP() once for each entry in the tree.
By default, directories are handled before the files and
subdirectories they contain (preorder traversal).

To avoid using up all of the calling process's file descriptors,
\fInopenfd\fP specifies the maximum number of directories that
.BR nftw ()
will hold open simultaneously.
When
the search depth exceeds this,
.BR nftw ()
will become slower because
directories have to be closed and reopened.
.BR nftw ()
uses at most
one file descriptor for each level in the directory tree.

For each entry found in the tree,
.BR nftw ()
calls
\fIfn\fP() with four arguments:
.IR fpath ,
.IR sb ,
.IR typeflag ,
and
.IR ftwbuf .
.I fpath
is the pathname of the entry,
and is expressed either as a pathname relative to the calling process's
current working directory at the time of the call to
.BR nftw (),
if
.IR dirpath
was expressed as a relative pathname,
or as an absolute pathname, if
.I dirpath
was expressed as an absolute pathname.
.I sb
is a pointer to the
.I stat
structure returned by a call to
.BR stat (2)
for
.IR fpath .
.I typeflag
is an integer that has one of the following values:
.TP
.B FTW_F
.I fpath
is a regular file.
.TP
.B FTW_D
.I fpath
is a directory.
.TP
.B FTW_DNR
.I fpath
is a directory which can't be read.
.TP
.B FTW_DP
.I fpath
is a directory, and \fBFTW_DEPTH\fP was specified in \fIflags\fP.
(If
.B FTW_DEPTH
was not specified in
.IR flags ,
then directories will always be visited with
.I typeflag
set to
.BR FTW_D .)
All of the files
and subdirectories within \fIfpath\fP have been processed.
.TP
.B FTW_NS
The
.BR stat (2)
call failed on
.IR fpath ,
which is not a symbolic link.
The probable cause for this is that the caller had read permission
on the parent directory, so that the filename
.I fpath
could be seen,
but did not have execute permission,
so that the file could not be reached for
.BR stat (2).
.TP
.B FTW_SL
.I fpath
is a symbolic link, and \fBFTW_PHYS\fP was set in \fIflags\fP.
.\" To obtain the definition of this constant from
.\" .IR <ftw.h> ,
.\" either
.\" .B _BSD_SOURCE
.\" must be defined, or
.\" .BR _XOPEN_SOURCE
.\" must be defined with a value of 500 or more.
.TP
.B FTW_SLN
.I fpath
is a symbolic link pointing to a nonexistent file.
(This occurs only if \fBFTW_PHYS\fP is not set.)
.PP
The fourth argument that
.BR nftw ()
supplies when calling
\fIfn\fP()
is a structure of type \fIFTW\fP:
.in +4n
.nf

struct FTW {
    int base;
    int level;
};

.fi
.in
.I base
is the offset of the filename (i.e., basename component)
in the pathname given in
.IR fpath .
.I level
is the depth of
.I fpath
in the directory tree, relative to the root of the tree
.RI ( dirpath ,
which has depth 0).
.PP
To stop the tree walk, \fIfn\fP() returns a nonzero value; this
value will become the return value of
.BR nftw ().
As long as \fIfn\fP() returns 0,
.BR nftw ()
will continue either until it has traversed the entire tree,
in which case it will return zero,
or until it encounters an error (such as a
.BR malloc (3)
failure), in which case it will return \-1.
.PP
Because
.BR nftw ()
uses dynamic data structures, the only safe way to
exit out of a tree walk is to return a nonzero value from \fIfn\fP().
To allow a signal to terminate the walk without causing a memory leak,
have the handler set a global flag that is checked by \fIfn\fP().
\fIDon't\fP use
.BR longjmp (3)
unless the program is going to terminate.

The \fIflags\fP argument of
.BR nftw ()
is formed by ORing zero or more of the
following flags:
.TP
.BR FTW_ACTIONRETVAL " (since glibc 2.3.3)"
If this glibc-specific flag is set, then
.BR nftw ()
handles the return value from
.IR fn ()
differently.
.IR fn ()
should return one of the following values:
.RS
.TP
.B FTW_CONTINUE
Instructs
.BR nftw ()
to continue normally.
.TP
.B FTW_SKIP_SIBLINGS
If \fIfn\fP() returns this value, then
siblings of the current entry will be skipped,
and processing continues in the parent.
.\" If \fBFTW_DEPTH\fP
.\" is set, the entry's parent directory is processed next (with
.\" \fIflag\fP set to \fBFTW_DP\fP).
.TP
.B FTW_SKIP_SUBTREE
If \fIfn\fP() is called with an entry that is a directory
(\fItypeflag\fP is \fBFTW_D\fP), this return
value will prevent objects within that directory from being passed as
arguments to \fIfn\fP().
.BR nftw ()
continues processing with the next sibling of the directory.
.TP
.B FTW_STOP
Causes
.BR nftw ()
to return immediately with the return value
\fBFTW_STOP\fP.
.PP
Other return values could be associated with new actions in the future;
\fIfn\fP() should not return values other than those listed above.

The feature test macro
.B _GNU_SOURCE
must be defined
(before including
.I any
header files)
in order to
obtain the definition of \fBFTW_ACTIONRETVAL\fP from \fI<ftw.h>\fP.
.RE
.TP
.B FTW_CHDIR
If set, do a
.BR chdir (2)
to each directory before handling its contents.
This is useful if the program needs to perform some action
in the directory in which \fIfpath\fP resides.
(Specifying this flag has no effect on the pathname that is passed in the
.I fpath
argument of
.IR fn .)
.TP
.B FTW_DEPTH
If set, do a post-order traversal, that is, call \fIfn\fP() for
the directory itself \fIafter\fP handling the contents of the directory
and its subdirectories.
(By default, each directory is handled \fIbefore\fP its contents.)
.TP
.B FTW_MOUNT
If set, stay within the same filesystem
(i.e., do not cross mount points).
.TP
.B FTW_PHYS
If set, do not follow symbolic links.
(This is what you want.)
If not set, symbolic links are followed, but no file is reported twice.
.sp
If \fBFTW_PHYS\fP is not set, but \fBFTW_DEPTH\fP is set,
then the function
.IR fn ()
is never called for a directory that would be a descendant of itself.
.SS ftw()
.BR ftw ()
is an older function that offers a subset of the functionality of
.BR nftw ().
The notable differences are as follows:
.IP * 3
.BR ftw ()
has no
.IR flags
argument.
It behaves the same as when
.BR nftw ()
is called with
.I flags
specified as zero.
.IP *
The callback function,
.IR fn (),
is not supplied with a fourth argument.
.IP *
The range of values that is passed via the
.I typeflag
argument supplied to
.IR fn ()
is smaller: just
.BR FTW_F ,
.BR FTW_D ,
.BR FTW_DNR ,
.BR FTW_NS ,
and (possibly)
.BR FTW_SL .
.SH RETURN VALUE
These functions return 0 on success, and \-1 if an error occurs.

If \fIfn\fP() returns nonzero,
then the tree walk is terminated and the value returned by \fIfn\fP()
is returned as the result of
.BR ftw ()
or
.BR nftw ().

If
.BR nftw ()
is called with the \fBFTW_ACTIONRETVAL\fP flag,
then the only nonzero value that should be used by \fIfn\fP()
to terminate the tree walk is \fBFTW_STOP\fP,
and that value is returned as the result of
.BR nftw ().
.SH VERSIONS
.BR nftw ()
is available under glibc since version 2.1.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR nftw ()
T}	Thread safety	MT-Safe cwd
T{
.BR ftw ()
T}	Thread safety	MT-Safe
.TE

.SH CONFORMING TO
POSIX.1-2001, POSIX.1-2008, SVr4, SUSv1.
POSIX.1-2008 marks
.BR ftw ()
as obsolete.
.SH NOTES
POSIX.1-2008 notes that the results are unspecified if
.I fn
does not preserve the current working directory.
.PP
The function
.BR nftw ()
and the use of \fBFTW_SL\fP with
.BR ftw ()
were introduced in SUSv1.
.LP
In some implementations (e.g., glibc),
.BR ftw ()
will never use \fBFTW_SL\fP, on other systems \fBFTW_SL\fP occurs only
for symbolic links that do not point to an existing file,
and again on other systems
.BR ftw ()
will use \fBFTW_SL\fP for each symbolic link.
If
.I fpath
is a symbolic link and
.BR stat (2)
failed, POSIX.1-2008 states
that it is undefined whether \fBFTW_NS\fP or \fBFTW_SL\fP
is passed in
.IR typeflag .
For predictable results, use
.BR nftw ().
.SH EXAMPLE
The following program traverses the directory tree under the path named
in its first command-line argument, or under the current directory
if no argument is supplied.
It displays various information about each file.
The second command-line argument can be used to specify characters that
control the value assigned to the \fIflags\fP
argument when calling
.BR nftw ().
.SS Program source
.nf
#define _XOPEN_SOURCE 500
#include <ftw.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdint.h>

static int
display_info(const char *fpath, const struct stat *sb,
             int tflag, struct FTW *ftwbuf)
{
    printf("%\-3s %2d %7jd   %\-40s %d %s\\n",
        (tflag == FTW_D) ?   "d"   : (tflag == FTW_DNR) ? "dnr" :
        (tflag == FTW_DP) ?  "dp"  : (tflag == FTW_F) ?   "f" :
        (tflag == FTW_NS) ?  "ns"  : (tflag == FTW_SL) ?  "sl" :
        (tflag == FTW_SLN) ? "sln" : "???",
        ftwbuf\->level, (intmax_t) sb\->st_size,
        fpath, ftwbuf\->base, fpath + ftwbuf\->base);
    return 0;           /* To tell nftw() to continue */
}

int
main(int argc, char *argv[])
{
    int flags = 0;

    if (argc > 2 && strchr(argv[2], \(aqd\(aq) != NULL)
        flags |= FTW_DEPTH;
    if (argc > 2 && strchr(argv[2], \(aqp\(aq) != NULL)
        flags |= FTW_PHYS;

    if (nftw((argc < 2) ? "." : argv[1], display_info, 20, flags)
            == \-1) {
        perror("nftw");
        exit(EXIT_FAILURE);
    }
    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR stat (2),
.BR fts (3),
.BR readdir (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2006, 2008, Michael Kerrisk
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH FUTIMES 3 2015-03-02 "Linux" "Linux Programmer's Manual"
.SH NAME
futimes, lutimes \- change file timestamps
.SH SYNOPSIS
.nf
.B #include <sys/time.h>

.BI "int futimes(int " fd ", const struct timeval " tv [2]);

.BI "int lutimes(const char *" filename ", const struct timeval " tv [2]);
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR futimes (),
.BR lutimes ():
_BSD_SOURCE
.SH DESCRIPTION
.BR futimes ()
changes the access and modification times of a file in the same way as
.BR utimes (2),
with the difference that the file whose timestamps are to be changed
is specified via a file descriptor,
.IR fd ,
rather than via a pathname.

.BR lutimes ()
changes the access and modification times of a file in the same way as
.BR utimes (2),
with the difference that if
.I filename
refers to a symbolic link, then the link is not dereferenced:
instead, the timestamps of the symbolic link are changed.
.SH RETURN VALUE
On success, zero is returned.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
Errors are as for
.BR utimes (2),
with the following additions for
.BR futimes ():
.TP
.B EBADF
.I fd
is not a valid file descriptor.
.TP
.B ENOSYS
The
.I /proc
filesystem could not be accessed.
.PP
The following additional error may occur for
.BR lutimes ():
.TP
.B ENOSYS
The kernel does not support this call; Linux 2.6.22 or later is required.
.SH VERSIONS
.BR futimes ()
is available since glibc 2.3.
.BR lutimes ()
is available since glibc 2.6, and is implemented using the
.BR utimensat (2)
system call, which is supported since kernel 2.6.22.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw20 lb lb
l l l.
Interface	Attribute	Value
T{
.BR futimes (),
.BR lutimes ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
These functions are not specified in any standard.
Other than Linux, they are available only on the BSDs.
.SH SEE ALSO
.BR utime (2),
.BR utimensat (2),
.BR symlink (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) Bruno Haible <haible@clisp.cons.org>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_ONEPARA)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"   GNU glibc-2 source code and manual
.\"   Dinkumware C library reference http://www.dinkumware.com/
.\"   OpenGroup's Single UNIX specification http://www.UNIX-systems.org/online.html
.\"   ISO/IEC 9899:1999
.\"
.TH FWIDE 3  2014-03-19 "GNU" "Linux Programmer's Manual"
.SH NAME
fwide \- set and determine the orientation of a FILE stream
.SH SYNOPSIS
.nf
.B #include <wchar.h>
.sp
.BI "int fwide(FILE *" stream ", int " mode );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.ad l
.sp
.BR fwide ():
.RS 4
_XOPEN_SOURCE\ >=\ 500 || _ISOC99_SOURCE ||
.br
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.ad
.SH DESCRIPTION
When \fImode\fP is zero, the
.BR fwide ()
function determines the current
orientation of \fIstream\fP.
It returns a positive value if \fIstream\fP is
wide-character oriented, that is, if wide-character I/O is permitted but char
I/O is disallowed.
It returns a negative value if \fIstream\fP is byte oriented\(emthat is,
if char I/O is permitted but wide-character I/O is disallowed.
It
returns zero if \fIstream\fP has no orientation yet; in this case the next
I/O operation might change the orientation (to byte oriented if it is a char
I/O operation, or to wide-character oriented if it is a wide-character I/O
operation).
.PP
Once a stream has an orientation, it cannot be changed and persists until
the stream is closed.
.PP
When \fImode\fP is nonzero, the
.BR fwide ()
function first attempts to set
\fIstream\fP's orientation (to wide-character oriented
if \fImode\fP is greater than 0, or
to byte oriented if \fImode\fP is less than 0).
It then returns a value denoting the
current orientation, as above.
.SH RETURN VALUE
The
.BR fwide ()
function returns the stream's orientation, after possibly
changing it.
A positive return value means wide-character oriented.
A negative return value means byte oriented.
A return value of zero means undecided.
.SH CONFORMING TO
C99, POSIX.1-2001.
.SH NOTES
Wide-character output to a byte oriented stream can be performed through the
.BR fprintf (3)
function with the
.B %lc
and
.B %ls
directives.
.PP
Char oriented output to a wide-character oriented stream can be performed
through the
.BR fwprintf (3)
function with the
.B %c
and
.B %s
directives.
.SH SEE ALSO
.BR fprintf (3),
.BR fwprintf (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 2002 Walter Harms (walter.harms@informatik.uni-oldenburg.de)
.\"
.\" %%%LICENSE_START(GPL_NOVERSION_ONELINE)
.\" Distributed under GPL
.\" %%%LICENSE_END
.\"
.\" Modified 2003-11-18, aeb: historical remarks
.\"
.TH GAMMA 3 2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
gamma, gammaf, gammal \- (logarithm of the) gamma function
.SH SYNOPSIS
.B #include <math.h>
.sp
.BI "double gamma(double " x ");"
.br
.BI "float gammaf(float " x ");"
.br
.BI "long double gammal(long double " x ");"
.sp
Link with \fI\-lm\fP.
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR gamma ():
.RS 4
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE
.RE
.BR gammaf (),
.BR gammal ():
.RS 4
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE\ >=\ 600
.\" Also seems to work: -std=c99 -D_XOPEN_SOURCE
.RE
.ad b
.SH DESCRIPTION
These functions are deprecated: instead, use either the
.BR tgamma (3)
or the
.BR lgamma (3)
functions, as appropriate.

For the definition of the Gamma function, see
.BR tgamma (3).
.SS *BSD version
The libm in 4.4BSD and some versions of FreeBSD had a
.BR gamma ()
function that computes the Gamma function, as one would expect.
.SS glibc version
Glibc has a
.BR gamma ()
function that is equivalent to
.BR lgamma (3)
and computes the natural logarithm of the Gamma function.
.SH RETURN VALUE
See
.BR lgamma (3).
.SH ERRORS
See
.BR lgamma (3).
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw27 lb lb
l l l.
Interface	Attribute	Value
T{
.BR gamma (),
.BR gammaf (),
.BR gammal ()
T}	Thread safety	MT-Unsafe race:signgam
.TE
.SH CONFORMING TO
Because of historical variations in behavior across systems,
this function is not specified in any standard.
.SH NOTES
.SS History
4.2BSD had a
.BR gamma ()
that computed
.RI ln(|Gamma(| x |)|),
leaving the sign of
.RI Gamma(| x |)
in the external integer
.IR signgam .
In 4.3BSD the name was changed to
.BR lgamma (3),
and the man page promises
.sp
.in +4n
"At some time in the future the name gamma will be rehabilitated
and used for the Gamma function"
.in
.sp
This did indeed happen in 4.4BSD, where
.BR gamma ()
computes the Gamma function (with no effect on
.IR signgam ).
However, this came too late, and we now have
.BR tgamma (3),
the "true gamma" function.
.\" The FreeBSD man page says about gamma() that it is like lgamma()
.\" except that is does not set signgam.
.\" Also, that 4.4BSD has a gamma() that computes the true gamma function.
.SH SEE ALSO
.BR lgamma (3),
.BR signgam (3),
.BR tgamma (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified Sat Jul 24 19:32:25 1993 by Rik Faith (faith@cs.unc.edu)
.TH GCVT 3 2015-03-29 "" "Linux Programmer's Manual"
.SH NAME
gcvt \- convert a floating-point number to a string
.SH SYNOPSIS
.nf
.B #include <stdlib.h>
.sp
.BI "char *gcvt(double " number ", int " ndigit ", char *" buf );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR gcvt ():
.ad l
.PD 0
.RS 4
.TP 4
Since glibc 2.12:
.nf
_SVID_SOURCE ||
    (_XOPEN_SOURCE\ >=\ 500 ||
        _XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED) &&
    !(_POSIX_C_SOURCE\ >=\ 200112L || _XOPEN_SOURCE\ >=\ 600)
.fi
.TP 4
Before glibc 2.12:
_SVID_SOURCE || _XOPEN_SOURCE\ >=\ 500 ||
_XOPEN_SOURCE && _XOPEN_SOURCE_EXTENDED
.RE
.PD
.ad b
.SH DESCRIPTION
The
.BR gcvt ()
function converts \fInumber\fP to a minimal length null-terminated
ASCII string and stores the result in \fIbuf\fP.
It produces \fIndigit\fP significant digits in either
.BR printf (3)
F format or E format.
.SH RETURN VALUE
The
.BR gcvt ()
function returns the address of the string pointed to
by \fIbuf\fP.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR gcvt ()
T}	Thread safety	MT-Safe
.TE

.SH CONFORMING TO
Marked as LEGACY in POSIX.1-2001.
POSIX.1-2008 removes the specification of
.BR gcvt (),
recommending the use of
.BR sprintf (3)
instead (though
.BR snprintf (3)
may be preferable).
.SH SEE ALSO
.BR ecvt (3),
.BR fcvt (3),
.BR sprintf (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2007, 2008 Michael Kerrisk <mtk.manpages@gmail.com>
.\" and Copyright (c) 2006 Ulrich Drepper <drepper@redhat.com>
.\" A few pieces of an earlier version remain:
.\" Copyright 2000, Sam Varshavchik <mrsam@courier-mta.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References: RFC 2553
.\"
.\" 2005-08-09, mtk, added AI_ALL, AI_ADDRCONFIG, AI_V4MAPPED,
.\"			and AI_NUMERICSERV.
.\" 2006-11-25, Ulrich Drepper <drepper@redhat.com>
.\"     Add text describing Internationalized Domain Name extensions.
.\" 2007-06-08, mtk: added example programs
.\" 2008-02-26, mtk; clarify discussion of NULL 'hints' argument; other
.\"     minor rewrites.
.\" 2008-06-18, mtk: many parts rewritten
.\" 2008-12-04, Petr Baudis <pasky@suse.cz>
.\"	Describe results ordering and reference /etc/gai.conf.
.\"
.\" FIXME . glibc's 2.9 NEWS file documents DCCP and UDP-lite support
.\"           and is SCTP support now also there?
.\"
.TH GETADDRINFO 3 2014-04-06 "GNU" "Linux Programmer's Manual"
.SH NAME
getaddrinfo, freeaddrinfo, gai_strerror \- network address and
service translation
.SH SYNOPSIS
.nf
.B #include <sys/types.h>
.B #include <sys/socket.h>
.B #include <netdb.h>
.sp
.BI "int getaddrinfo(const char *" "node" ", const char *" "service" ,
.BI "                const struct addrinfo *" "hints" ,
.BI "                struct addrinfo **" "res" );
.sp
.BI "void freeaddrinfo(struct addrinfo *" "res" );
.sp
.BI "const char *gai_strerror(int " "errcode" );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.ad l
.in
.sp
.BR getaddrinfo (),
.BR freeaddrinfo (),
.BR gai_strerror ():
.RS 4
_POSIX_C_SOURCE\ >=\ 1 || _XOPEN_SOURCE || _POSIX_SOURCE
.RE
.ad b
.SH DESCRIPTION
Given
.I node
and
.IR service ,
which identify an Internet host and a service,
.BR getaddrinfo ()
returns one or more
.I addrinfo
structures, each of which contains an Internet address
that can be specified in a call to
.BR bind (2)
or
.BR connect (2).
The
.BR getaddrinfo ()
function combines the functionality provided by the
.\" .BR getipnodebyname (3),
.\" .BR getipnodebyaddr (3),
.BR gethostbyname (3)
and
.BR getservbyname (3)
functions into a single interface, but unlike the latter functions,
.BR getaddrinfo ()
is reentrant and allows programs to eliminate IPv4-versus-IPv6 dependencies.
.PP
The
.I addrinfo
structure used by
.BR getaddrinfo ()
contains the following fields:
.sp
.in +4n
.nf
struct addrinfo {
    int              ai_flags;
    int              ai_family;
    int              ai_socktype;
    int              ai_protocol;
    socklen_t        ai_addrlen;
    struct sockaddr *ai_addr;
    char            *ai_canonname;
    struct addrinfo *ai_next;
};
.fi
.in
.PP
The
.I hints
argument points to an
.I addrinfo
structure that specifies criteria for selecting the socket address
structures returned in the list pointed to by
.IR res .
If
.I hints
is not NULL it points to an
.I addrinfo
structure whose
.IR ai_family ,
.IR ai_socktype ,
and
.I ai_protocol
specify criteria that limit the set of socket addresses returned by
.BR getaddrinfo (),
as follows:
.TP 12
.I ai_family
This field specifies the desired address family for the returned addresses.
Valid values for this field include
.BR AF_INET
and
.BR AF_INET6 .
The value
.B AF_UNSPEC
indicates that
.BR getaddrinfo ()
should return socket addresses for any address family
(either IPv4 or IPv6, for example) that can be used with
.I node
and
.IR service .
.TP
.I ai_socktype
This field specifies the preferred socket type, for example
.BR SOCK_STREAM
or
.BR SOCK_DGRAM .
Specifying 0 in this field indicates that socket addresses of any type
can be returned by
.BR getaddrinfo ().
.TP
.I ai_protocol
This field specifies the protocol for the returned socket addresses.
Specifying 0 in this field indicates that socket addresses with
any protocol can be returned by
.BR getaddrinfo ().
.TP
.I ai_flags
This field specifies additional options, described below.
Multiple flags are specified by bitwise OR-ing them together.
.PP
All the other fields in the structure pointed to by
.I hints
must contain either 0 or a null pointer, as appropriate.
.PP
Specifying
.I hints
as NULL is equivalent to setting
.I ai_socktype
and
.I ai_protocol
to 0;
.I ai_family
to
.BR AF_UNSPEC ;
and
.I ai_flags
to
.BR "(AI_V4MAPPED\ |\ AI_ADDRCONFIG)" .
(POSIX specifies different defaults for
.IR ai_flags ;
see NOTES.)
.I node
specifies either a numerical network address
(for IPv4, numbers-and-dots notation as supported by
.BR inet_aton (3);
for IPv6, hexadecimal string format as supported by
.BR inet_pton (3)),
or a network hostname, whose network addresses are looked up and resolved.
If
.I hints.ai_flags
contains the
.B AI_NUMERICHOST
flag, then
.I node
must be a numerical network address.
The
.B AI_NUMERICHOST
flag suppresses any potentially lengthy network host address lookups.
.PP
If the
.B AI_PASSIVE
flag is specified in
.IR hints.ai_flags ,
and
.I node
is NULL,
then the returned socket addresses will be suitable for
.BR bind (2)ing
a socket that will
.BR accept (2)
connections.
The returned socket address will contain the "wildcard address"
.RB ( INADDR_ANY
for IPv4 addresses,
.BR IN6ADDR_ANY_INIT
for IPv6 address).
The wildcard address is used by applications (typically servers)
that intend to accept connections on any of the hosts's network addresses.
If
.I node
is not NULL, then the
.B AI_PASSIVE
flag is ignored.
.PP
If the
.B AI_PASSIVE
flag is not set in
.IR hints.ai_flags ,
then the returned socket addresses will be suitable for use with
.BR connect (2),
.BR sendto (2),
or
.BR sendmsg (2).
If
.I node
is NULL,
then the network address will be set to the loopback interface address
.RB ( INADDR_LOOPBACK
for IPv4 addresses,
.BR IN6ADDR_LOOPBACK_INIT
for IPv6 address);
this is used by applications that intend to communicate
with peers running on the same host.
.PP
.I service
sets the port in each returned address structure.
If this argument is a service name (see
.BR services (5)),
it is translated to the corresponding port number.
This argument can also be specified as a decimal number,
which is simply converted to binary.
If
.I service
is NULL, then the port number of the returned socket addresses
will be left uninitialized.
If
.B AI_NUMERICSERV
is specified in
.I hints.ai_flags
and
.I service
is not NULL, then
.I service
must point to a string containing a numeric port number.
This flag is used to inhibit the invocation of a name resolution service
in cases where it is known not to be required.
.PP
Either
.I node
or
.IR service ,
but not both, may be NULL.
.PP
The
.BR getaddrinfo ()
function allocates and initializes a linked list of
.I addrinfo
structures, one for each network address that matches
.I node
and
.IR service ,
subject to any restrictions imposed by
.IR hints ,
and returns a pointer to the start of the list in
.IR res .
The items in the linked list are linked by the
.I ai_next
field.

There are several reasons why
the linked list may have more than one
.I addrinfo
structure, including: the network host is multihomed, accessible
over multiple protocols (e.g., both
.BR AF_INET
and
.BR AF_INET6 );
or the same service is available from multiple socket types (one
.B SOCK_STREAM
address and another
.B SOCK_DGRAM
address, for example).
Normally, the application should try
using the addresses in the order in which they are returned.
The sorting function used within
.BR getaddrinfo ()
is defined in RFC\ 3484; the order can be tweaked for a particular
system by editing
.IR /etc/gai.conf
(available since glibc 2.5).
.PP
If
.I hints.ai_flags
includes the
.B AI_CANONNAME
flag, then the
.I ai_canonname
field of the first of the
.I addrinfo
structures in the returned list is set to point to the
official name of the host.
.\" In glibc prior to 2.3.4, the ai_canonname of each addrinfo
.\" structure was set pointing to the canonical name; that was
.\" more than POSIX.1-2001 specified, or other implementations provided.
.\" MTK, Aug 05

The remaining fields of each returned
.I addrinfo
structure are initialized as follows:
.IP * 2
The
.IR ai_family ,
.IR ai_socktype ,
and
.I ai_protocol
fields return the socket creation parameters (i.e., these fields have
the same meaning as the corresponding arguments of
.BR socket (2)).
For example,
.I ai_family
might return
.B AF_INET
or
.BR AF_INET6 ;
.I ai_socktype
might return
.B SOCK_DGRAM
or
.BR SOCK_STREAM ;
and
.I ai_protocol
returns the protocol for the socket.
.IP *
A pointer to the socket address is placed in the
.I ai_addr
field, and the length of the socket address, in bytes,
is placed in the
.I ai_addrlen
field.
.PP
If
.I hints.ai_flags
includes the
.B AI_ADDRCONFIG
flag, then IPv4 addresses are returned in the list pointed to by
.I res
only if the local system has at least one
IPv4 address configured, and IPv6 addresses are returned
only if the local system has at least one IPv6 address configured.
The loopback address is not considered for this case as valid
as a configured address.
This flag is useful on, for example,
IPv4-only systems, to ensure that
.BR getaddrinfo ()
does not return IPv6 socket addresses that would always fail in
.BR connect (2)
or
.BR bind (2).
.PP
If
.I hints.ai_flags
specifies the
.B AI_V4MAPPED
flag, and
.I hints.ai_family
was specified as
.BR AF_INET6 ,
and no matching IPv6 addresses could be found,
then return IPv4-mapped IPv6 addresses in the list pointed to by
.IR res .
If both
.B AI_V4MAPPED
and
.B AI_ALL
are specified in
.IR hints.ai_flags ,
then return both IPv6 and IPv4-mapped IPv6 addresses
in the list pointed to by
.IR res .
.B AI_ALL
is ignored if
.B AI_V4MAPPED
is not also specified.
.PP
The
.BR freeaddrinfo ()
function frees the memory that was allocated
for the dynamically allocated linked list
.IR res .
.SS Extensions to getaddrinfo() for Internationalized Domain Names
.PP
Starting with glibc 2.3.4,
.BR getaddrinfo ()
has been extended to selectively allow the incoming and outgoing
hostnames to be transparently converted to and from the
Internationalized Domain Name (IDN) format (see RFC 3490,
.IR "Internationalizing Domain Names in Applications (IDNA)" ).
Four new flags are defined:
.TP
.B AI_IDN
If this flag is specified, then the node name given in
.I node
is converted to IDN format if necessary.
The source encoding is that of the current locale.

If the input name contains non-ASCII characters, then the IDN encoding
is used.
Those parts of the node name (delimited by dots) that contain
non-ASCII characters are encoded using ASCII Compatible Encoding (ACE)
before being passed to the name resolution functions.
.\" Implementation Detail:
.\" To minimize effects on system performance the implementation might
.\" want to check whether the input string contains any non-ASCII
.\" characters.  If there are none the IDN step can be skipped completely.
.\" On systems which allow not-ASCII safe encodings for a locale this
.\" might be a problem.
.TP
.B AI_CANONIDN
After a successful name lookup, and if the
.B AI_CANONNAME
flag was specified,
.BR getaddrinfo ()
will return the canonical name of the
node corresponding to the
.I addrinfo
structure value passed back.
The return value is an exact copy of the value returned by the name
resolution function.

If the name is encoded using ACE, then it will contain the
.I xn\-\-
prefix for one or more components of the name.
To convert these components into a readable form the
.B AI_CANONIDN
flag can be passed in addition to
.BR AI_CANONNAME .
The resulting string is encoded using the current locale's encoding.
.\"
.\"Implementation Detail:
.\"If no component of the returned name starts with xn\-\- the IDN
.\"step can be skipped, therefore avoiding unnecessary slowdowns.
.TP
.BR AI_IDN_ALLOW_UNASSIGNED ", " AI_IDN_USE_STD3_ASCII_RULES
Setting these flags will enable the
IDNA_ALLOW_UNASSIGNED (allow unassigned Unicode code points) and
IDNA_USE_STD3_ASCII_RULES (check output to make sure it is a STD3
conforming hostname)
flags respectively to be used in the IDNA handling.
.SH RETURN VALUE
.\" FIXME glibc defines the following additional errors, some which
.\" can probably be returned by getaddrinfo(); they need to
.\" be documented.
.\" #ifdef __USE_GNU
.\" #define EAI_INPROGRESS  -100  /* Processing request in progress.  */
.\" #define EAI_CANCELED    -101  /* Request canceled.  */
.\" #define EAI_NOTCANCELED -102  /* Request not canceled.  */
.\" #define EAI_ALLDONE     -103  /* All requests done.  */
.\" #define EAI_INTR        -104  /* Interrupted by a signal.  */
.\" #define EAI_IDN_ENCODE  -105  /* IDN encoding failed.  */
.\" #endif
.BR getaddrinfo ()
returns 0 if it succeeds, or one of the following nonzero error codes:
.TP
.B EAI_ADDRFAMILY
.\" Not in SUSv3
The specified network host does not have any network addresses in the
requested address family.
.TP
.B EAI_AGAIN
The name server returned a temporary failure indication.
Try again later.
.TP
.B EAI_BADFLAGS
.I hints.ai_flags
contains invalid flags; or,
.I hints.ai_flags
included
.B AI_CANONNAME
and
.I name
was NULL.
.TP
.B EAI_FAIL
The name server returned a permanent failure indication.
.TP
.B EAI_FAMILY
The requested address family is not supported.
.TP
.B EAI_MEMORY
Out of memory.
.TP
.B EAI_NODATA
.\" Not in SUSv3
The specified network host exists, but does not have any
network addresses defined.
.TP
.B EAI_NONAME
The
.I node
or
.I service
is not known; or both
.I node
and
.I service
are NULL; or
.B AI_NUMERICSERV
was specified in
.I hints.ai_flags
and
.I service
was not a numeric port-number string.
.TP
.B EAI_SERVICE
The requested service is not available for the requested socket type.
It may be available through another socket type.
For example, this error could occur if
.I service
was "shell" (a service available only on stream sockets), and either
.I hints.ai_protocol
was
.BR IPPROTO_UDP ,
or
.I hints.ai_socktype
was
.BR SOCK_DGRAM ;
or the error could occur if
.I service
was not NULL, and
.I hints.ai_socktype
was
.BR SOCK_RAW
(a socket type that does not support the concept of services).
.TP
.B EAI_SOCKTYPE
The requested socket type is not supported.
This could occur, for example, if
.I hints.ai_socktype
and
.I hints.ai_protocol
are inconsistent (e.g.,
.BR SOCK_DGRAM
and
.BR IPPROTO_TCP ,
respectively).
.TP
.B EAI_SYSTEM
Other system error, check
.I errno
for details.
.PP
The
.BR gai_strerror ()
function translates these error codes to a human readable string,
suitable for error reporting.
.SH FILES
.I /etc/gai.conf
.SH CONFORMING TO
POSIX.1-2001.
The
.BR getaddrinfo ()
function is documented in RFC\ 2553.
.SH NOTES
.BR getaddrinfo ()
supports the
.IB address % scope-id
notation for specifying the IPv6 scope-ID.

.BR AI_ADDRCONFIG ,
.BR AI_ALL ,
and
.B AI_V4MAPPED
are available since glibc 2.3.3.
.B AI_NUMERICSERV
is available since glibc 2.3.4.

According to POSIX.1-2001, specifying
.I hints
as NULL should cause
.I ai_flags
to be assumed as 0.
The GNU C library instead assumes a value of
.BR "(AI_V4MAPPED\ |\ AI_ADDRCONFIG)"
for this case,
since this value is considered an improvement on the specification.
.SH EXAMPLE
.\" getnameinfo.3 refers to this example
.\" socket.2 refers to this example
.\" bind.2 refers to this example
.\" connect.2 refers to this example
.\" recvfrom.2 refers to this example
.\" sendto.2 refers to this example
The following programs demonstrate the use of
.BR getaddrinfo (),
.BR gai_strerror (),
.BR freeaddrinfo (),
and
.BR getnameinfo (3).
The programs are an echo server and client for UDP datagrams.
.SS Server program
\&
.nf
#include <sys/types.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/socket.h>
#include <netdb.h>

#define BUF_SIZE 500

int
main(int argc, char *argv[])
{
    struct addrinfo hints;
    struct addrinfo *result, *rp;
    int sfd, s;
    struct sockaddr_storage peer_addr;
    socklen_t peer_addr_len;
    ssize_t nread;
    char buf[BUF_SIZE];

    if (argc != 2) {
        fprintf(stderr, "Usage: %s port\\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    memset(&hints, 0, sizeof(struct addrinfo));
    hints.ai_family = AF_UNSPEC;    /* Allow IPv4 or IPv6 */
    hints.ai_socktype = SOCK_DGRAM; /* Datagram socket */
    hints.ai_flags = AI_PASSIVE;    /* For wildcard IP address */
    hints.ai_protocol = 0;          /* Any protocol */
    hints.ai_canonname = NULL;
    hints.ai_addr = NULL;
    hints.ai_next = NULL;

    s = getaddrinfo(NULL, argv[1], &hints, &result);
    if (s != 0) {
        fprintf(stderr, "getaddrinfo: %s\\n", gai_strerror(s));
        exit(EXIT_FAILURE);
    }

    /* getaddrinfo() returns a list of address structures.
       Try each address until we successfully bind(2).
       If socket(2) (or bind(2)) fails, we (close the socket
       and) try the next address. */

    for (rp = result; rp != NULL; rp = rp\->ai_next) {
        sfd = socket(rp\->ai_family, rp\->ai_socktype,
                rp\->ai_protocol);
        if (sfd == \-1)
            continue;

        if (bind(sfd, rp\->ai_addr, rp\->ai_addrlen) == 0)
            break;                  /* Success */

        close(sfd);
    }

    if (rp == NULL) {               /* No address succeeded */
        fprintf(stderr, "Could not bind\\n");
        exit(EXIT_FAILURE);
    }

    freeaddrinfo(result);           /* No longer needed */

    /* Read datagrams and echo them back to sender */

    for (;;) {
        peer_addr_len = sizeof(struct sockaddr_storage);
        nread = recvfrom(sfd, buf, BUF_SIZE, 0,
                (struct sockaddr *) &peer_addr, &peer_addr_len);
        if (nread == \-1)
            continue;               /* Ignore failed request */

        char host[NI_MAXHOST], service[NI_MAXSERV];

        s = getnameinfo((struct sockaddr *) &peer_addr,
                        peer_addr_len, host, NI_MAXHOST,
                        service, NI_MAXSERV, NI_NUMERICSERV);
       if (s == 0)
            printf("Received %zd bytes from %s:%s\\n",
                    nread, host, service);
        else
            fprintf(stderr, "getnameinfo: %s\\n", gai_strerror(s));

        if (sendto(sfd, buf, nread, 0,
                    (struct sockaddr *) &peer_addr,
                    peer_addr_len) != nread)
            fprintf(stderr, "Error sending response\\n");
    }
}
.fi
.SS Client program
\&
.nf
#include <sys/types.h>
#include <sys/socket.h>
#include <netdb.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>

#define BUF_SIZE 500

int
main(int argc, char *argv[])
{
    struct addrinfo hints;
    struct addrinfo *result, *rp;
    int sfd, s, j;
    size_t len;
    ssize_t nread;
    char buf[BUF_SIZE];

    if (argc < 3) {
        fprintf(stderr, "Usage: %s host port msg...\\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    /* Obtain address(es) matching host/port */

    memset(&hints, 0, sizeof(struct addrinfo));
    hints.ai_family = AF_UNSPEC;    /* Allow IPv4 or IPv6 */
    hints.ai_socktype = SOCK_DGRAM; /* Datagram socket */
    hints.ai_flags = 0;
    hints.ai_protocol = 0;          /* Any protocol */

    s = getaddrinfo(argv[1], argv[2], &hints, &result);
    if (s != 0) {
        fprintf(stderr, "getaddrinfo: %s\\n", gai_strerror(s));
        exit(EXIT_FAILURE);
    }

    /* getaddrinfo() returns a list of address structures.
       Try each address until we successfully connect(2).
       If socket(2) (or connect(2)) fails, we (close the socket
       and) try the next address. */

    for (rp = result; rp != NULL; rp = rp\->ai_next) {
        sfd = socket(rp\->ai_family, rp\->ai_socktype,
                     rp\->ai_protocol);
        if (sfd == \-1)
            continue;

        if (connect(sfd, rp\->ai_addr, rp\->ai_addrlen) != \-1)
            break;                  /* Success */

        close(sfd);
    }

    if (rp == NULL) {               /* No address succeeded */
        fprintf(stderr, "Could not connect\\n");
        exit(EXIT_FAILURE);
    }

    freeaddrinfo(result);           /* No longer needed */

    /* Send remaining command\-line arguments as separate
       datagrams, and read responses from server */

    for (j = 3; j < argc; j++) {
        len = strlen(argv[j]) + 1;
                /* +1 for terminating null byte */

        if (len + 1 > BUF_SIZE) {
            fprintf(stderr,
                    "Ignoring long message in argument %d\\n", j);
            continue;
        }

        if (write(sfd, argv[j], len) != len) {
            fprintf(stderr, "partial/failed write\\n");
            exit(EXIT_FAILURE);
        }

        nread = read(sfd, buf, BUF_SIZE);
        if (nread == \-1) {
            perror("read");
            exit(EXIT_FAILURE);
        }

        printf("Received %zd bytes: %s\\n", nread, buf);
    }

    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.\" .BR getipnodebyaddr (3),
.\" .BR getipnodebyname (3),
.BR getaddrinfo_a (3),
.BR gethostbyname (3),
.BR getnameinfo (3),
.BR inet (3),
.BR gai.conf (5),
.BR hostname (7),
.BR ip (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2009 Petr Baudis <pasky@suse.cz>
.\" and clean-ups and additions (C) 2010 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References: http://people.redhat.com/drepper/asynchnl.pdf,
.\"     http://www.imperialviolet.org/2005/06/01/asynchronous-dns-lookups-with-glibc.html
.\"
.TH GETADDRINFO_A 3 2014-05-28 "GNU" "Linux Programmer's Manual"
.SH NAME
getaddrinfo_a, gai_suspend, gai_error, gai_cancel \- asynchronous
network address and service translation
.SH SYNOPSIS
.nf
.BR "#define _GNU_SOURCE" "         /* See feature_test_macros(7) */"
.B #include <netdb.h>
.sp
.BI "int getaddrinfo_a(int " "mode" ", struct gaicb *" "list[]" ,
.BI "                int " "nitems" ", struct sigevent *" "sevp" );
.sp
.BI "int gai_suspend(const struct gaicb * const " "list[]" ", int " "nitems" ,
.BI "                const struct timespec *" "timeout" );
.sp
.BI "int gai_error(struct gaicb *" "req" );
.sp
.BI "int gai_cancel(struct gaicb *" "req" );
.sp
Link with \fI\-lanl\fP.
.fi
.SH DESCRIPTION
The
.BR getaddrinfo_a ()
function performs the same task as
.BR getaddrinfo (3),
but allows multiple name look-ups to be performed asynchronously,
with optional notification on completion of look-up operations.

The
.I mode
argument has one of the following values:
.TP
.B GAI_WAIT
Perform the look-ups synchronously.
The call blocks until the look-ups have completed.
.TP
.B GAI_NOWAIT
Perform the look-ups asynchronously.
The call returns immediately,
and the requests are resolved in the background.
See the discussion of the
.I sevp
argument below.
.PP
The array
.I list
specifies the look-up requests to process.
The
.I nitems
argument specifies the number of elements in
.IR list .
The requested look-up operations are started in parallel.
NULL elements in
.I list
are ignored.
Each request is described by a
.I gaicb
structure, defined as follows:
.sp
.in +4n
.nf
struct gaicb {
    const char            *ar_name;
    const char            *ar_service;
    const struct addrinfo *ar_request;
    struct addrinfo       *ar_result;
};
.fi
.in

The elements of this structure correspond to the arguments of
.BR getaddrinfo (3).
Thus,
.I ar_name
corresponds to the
.I node
argument and
.I ar_service
to the
.I service
argument, identifying an Internet host and a service.
The
.I ar_request
element corresponds to the
.I hints
argument, specifying the criteria for selecting
the returned socket address structures.
Finally,
.I ar_result
corresponds to the
.I res
argument; you do not need to initialize this element,
it will be automatically set when the request
is resolved.
The
.I addrinfo
structure referenced by the last two elements is described in
.BR getaddrinfo (3).

When
.I mode
is specified as
.BR GAI_NOWAIT ,
notifications about resolved requests
can be obtained by employing the
.I sigevent
structure pointed to by the
.I sevp
argument.
For the definition and general details of this structure, see
.BR sigevent (7).
The
.I sevp\->sigev_notify
field can have the following values:
.TP
.BR SIGEV_NONE
Don't provide any notification.
.TP
.BR SIGEV_SIGNAL
When a look-up completes, generate the signal
.I sigev_signo
for the process.
See
.BR sigevent (7)
for general details.
The
.I si_code
field of the
.I siginfo_t
structure will be set to
.BR SI_ASYNCNL .
.\" si_pid and si_uid are also set, to the values of the calling process,
.\" which doesn't provide useful information, so we'll skip mentioning it.
.TP
.BR SIGEV_THREAD
When a look-up completes, invoke
.I sigev_notify_function
as if it were the start function of a new thread.
See
.BR sigevent (7)
for details.
.PP
For
.BR SIGEV_SIGNAL
and
.BR SIGEV_THREAD ,
it may be useful to point
.IR sevp\->sigev_value.sival_ptr
to
.IR list .

The
.BR gai_suspend ()
function suspends execution of the calling thread,
waiting for the completion of one or more requests in the array
.IR list .
The
.I nitems
argument specifies the size of the array
.IR list .
The call blocks until one of the following occurs:
.IP * 3
One or more of the operations in
.I list
completes.
.IP *
The call is interrupted by a signal that is caught.
.IP *
The time interval specified in
.I timeout
elapses.
This argument specifies a timeout in seconds plus nanoseconds (see
.BR nanosleep (2)
for details of the
.I timespec
structure).
If
.I timeout
is NULL, then the call blocks indefinitely
(until one of the events above occurs).
.PP
No explicit indication of which request was completed is given;
you must determine which request(s) have completed by iterating with
.BR gai_error ()
over the list of requests.

The
.BR gai_error ()
function returns the status of the request
.IR req :
either
.B EAI_INPROGRESS
if the request was not completed yet,
0 if it was handled successfully,
or an error code if the request could not be resolved.

The
.BR gai_cancel ()
function cancels the request
.IR req .
If the request has been canceled successfully,
the error status of the request will be set to
.B EAI_CANCELLED
and normal asynchronous notification will be performed.
The request cannot be canceled if it is currently being processed;
in that case, it will be handled as if
.BR gai_cancel ()
has never been called.
If
.I req
is NULL, an attempt is made to cancel all outstanding requests
that the process has made.
.SH RETURN VALUE
The
.BR getaddrinfo_a ()
function returns 0 if all of the requests have been enqueued successfully,
or one of the following nonzero error codes:
.TP
.B EAI_AGAIN
The resources necessary to enqueue the look-up requests were not available.
The application may check the error status of each
request to determine which ones failed.
.TP
.B EAI_MEMORY
Out of memory.
.TP
.B EAI_SYSTEM
.I mode
is invalid.
.PP
The
.BR gai_suspend ()
function returns 0 if at least one of the listed requests has been completed.
Otherwise, it returns one of the following nonzero error codes:
.TP
.B EAI_AGAIN
The given timeout expired before any of the requests could be completed.
.TP
.B EAI_ALLDONE
There were no actual requests given to the function.
.TP
.B EAI_INTR
A signal has interrupted the function.
Note that this interruption might have been
caused by signal notification of some completed look-up request.
.PP
The
.BR gai_error ()
function can return
.B EAI_INPROGRESS
for an unfinished look-up request,
0 for a successfully completed look-up
(as described above), one of the error codes that could be returned by
.BR getaddrinfo (3),
or the error code
.B EAI_CANCELLED
if the request has been canceled explicitly before it could be finished.

The
.BR gai_cancel ()
function can return one of these values:
.TP
.B EAI_CANCELLED
The request has been canceled successfully.
.TP
.B EAI_NOTCANCELLED
The request has not been canceled.
.TP
.B EAI_ALLDONE
The request has already completed.
.PP
The
.BR gai_strerror (3)
function translates these error codes to a human readable string,
suitable for error reporting.
.SH CONFORMING TO
These functions are GNU extensions;
they first appeared in glibc in version 2.2.3.
.SH NOTES
The interface of
.BR getaddrinfo_a ()
was modeled after the
.BR lio_listio (3)
interface.
.SH EXAMPLE
Two examples are provided: a simple example that resolves
several requests in parallel synchronously, and a complex example
showing some of the asynchronous capabilities.
.SS Synchronous example
The program below simply resolves several hostnames in parallel,
giving a speed-up compared to resolving the hostnames sequentially using
.BR getaddrinfo (3).
The program might be used like this:
.in +4n
.nf

$ \fB./a.out ftp.us.kernel.org enoent.linuxfoundation.org gnu.cz\fP
ftp.us.kernel.org: 128.30.2.36
enoent.linuxfoundation.org: Name or service not known
gnu.cz: 87.236.197.13
.fi
.in
.PP
Here is the program source code
.nf

#define _GNU_SOURCE
#include <netdb.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int
main(int argc, char *argv[])
{
    int i, ret;
    struct gaicb *reqs[argc \- 1];
    char host[NI_MAXHOST];
    struct addrinfo *res;

    if (argc < 2) {
        fprintf(stderr, "Usage: %s HOST...\\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    for (i = 0; i < argc \- 1; i++) {
        reqs[i] = malloc(sizeof(*reqs[0]));
        if (reqs[i] == NULL) {
            perror("malloc");
            exit(EXIT_FAILURE);
        }
        memset(reqs[i], 0, sizeof(*reqs[0]));
        reqs[i]\->ar_name = argv[i + 1];
    }

    ret = getaddrinfo_a(GAI_WAIT, reqs, argc \- 1, NULL);
    if (ret != 0) {
        fprintf(stderr, "getaddrinfo_a() failed: %s\\n",
                gai_strerror(ret));
        exit(EXIT_FAILURE);
    }

    for (i = 0; i < argc \- 1; i++) {
        printf("%s: ", reqs[i]\->ar_name);
        ret = gai_error(reqs[i]);
        if (ret == 0) {
            res = reqs[i]\->ar_result;

            ret = getnameinfo(res\->ai_addr, res\->ai_addrlen,
                    host, sizeof(host),
                    NULL, 0, NI_NUMERICHOST);
            if (ret != 0) {
                fprintf(stderr, "getnameinfo() failed: %s\\n",
                        gai_strerror(ret));
                exit(EXIT_FAILURE);
            }
            puts(host);

        } else {
            puts(gai_strerror(ret));
        }
    }
    exit(EXIT_SUCCESS);
}
.fi
.SS Asynchronous example
This example shows a simple interactive
.BR getaddrinfo_a ()
front-end.
The notification facility is not demonstrated.
.PP
An example session might look like this:
.in +4n
.nf

$ \fB./a.out\fP
> a ftp.us.kernel.org enoent.linuxfoundation.org gnu.cz
> c 2
[2] gnu.cz: Request not canceled
> w 0 1
[00] ftp.us.kernel.org: Finished
> l
[00] ftp.us.kernel.org: 216.165.129.139
[01] enoent.linuxfoundation.org: Processing request in progress
[02] gnu.cz: 87.236.197.13
> l
[00] ftp.us.kernel.org: 216.165.129.139
[01] enoent.linuxfoundation.org: Name or service not known
[02] gnu.cz: 87.236.197.13
.fi
.in
.PP
The program source is as follows:

.nf
#define _GNU_SOURCE
#include <netdb.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

static struct gaicb **reqs = NULL;
static int nreqs = 0;

static char *
getcmd(void)
{
    static char buf[256];

    fputs("> ", stdout); fflush(stdout);
    if (fgets(buf, sizeof(buf), stdin) == NULL)
        return NULL;

    if (buf[strlen(buf) \- 1] == \(aq\\n\(aq)
        buf[strlen(buf) \- 1] = 0;

    return buf;
}

/* Add requests for specified hostnames */
static void
add_requests(void)
{
    int nreqs_base = nreqs;
    char *host;
    int ret;

    while ((host = strtok(NULL, " "))) {
        nreqs++;
        reqs = realloc(reqs, nreqs * sizeof(reqs[0]));

        reqs[nreqs \- 1] = calloc(1, sizeof(*reqs[0]));
        reqs[nreqs \- 1]\->ar_name = strdup(host);
    }

    /* Queue nreqs_base..nreqs requests. */

    ret = getaddrinfo_a(GAI_NOWAIT, &reqs[nreqs_base],
                        nreqs \- nreqs_base, NULL);
    if (ret) {
        fprintf(stderr, "getaddrinfo_a() failed: %s\\n",
                gai_strerror(ret));
        exit(EXIT_FAILURE);
    }
}

/* Wait until at least one of specified requests completes */
static void
wait_requests(void)
{
    char *id;
    int i, ret, n;
    struct gaicb const **wait_reqs = calloc(nreqs, sizeof(*wait_reqs));
                /* NULL elements are ignored by gai_suspend(). */

    while ((id = strtok(NULL, " ")) != NULL) {
        n = atoi(id);

        if (n >= nreqs) {
            printf("Bad request number: %s\\n", id);
            return;
        }

        wait_reqs[n] = reqs[n];
    }

    ret = gai_suspend(wait_reqs, nreqs, NULL);
    if (ret) {
        printf("gai_suspend(): %s\\n", gai_strerror(ret));
        return;
    }

    for (i = 0; i < nreqs; i++) {
        if (wait_reqs[i] == NULL)
            continue;

        ret = gai_error(reqs[i]);
        if (ret == EAI_INPROGRESS)
            continue;

        printf("[%02d] %s: %s\\n", i, reqs[i]\->ar_name,
               ret == 0 ? "Finished" : gai_strerror(ret));
    }
}

/* Cancel specified requests */
static void
cancel_requests(void)
{
    char *id;
    int ret, n;

    while ((id = strtok(NULL, " ")) != NULL) {
        n = atoi(id);

        if (n >= nreqs) {
            printf("Bad request number: %s\\n", id);
            return;
        }

        ret = gai_cancel(reqs[n]);
        printf("[%s] %s: %s\\n", id, reqs[atoi(id)]\->ar_name,
               gai_strerror(ret));
    }
}

/* List all requests */
static void
list_requests(void)
{
    int i, ret;
    char host[NI_MAXHOST];
    struct addrinfo *res;

    for (i = 0; i < nreqs; i++) {
        printf("[%02d] %s: ", i, reqs[i]\->ar_name);
        ret = gai_error(reqs[i]);

        if (!ret) {
            res = reqs[i]\->ar_result;

            ret = getnameinfo(res\->ai_addr, res\->ai_addrlen,
                              host, sizeof(host),
                              NULL, 0, NI_NUMERICHOST);
            if (ret) {
                fprintf(stderr, "getnameinfo() failed: %s\\n",
                        gai_strerror(ret));
                exit(EXIT_FAILURE);
            }
            puts(host);
        } else {
            puts(gai_strerror(ret));
        }
    }
}

int
main(int argc, char *argv[])
{
    char *cmdline;
    char *cmd;

    while ((cmdline = getcmd()) != NULL) {
        cmd = strtok(cmdline, " ");

        if (cmd == NULL) {
            list_requests();
        } else {
            switch (cmd[0]) {
            case \(aqa\(aq:
                add_requests();
                break;
            case \(aqw\(aq:
                wait_requests();
                break;
            case \(aqc\(aq:
                cancel_requests();
                break;
            case \(aql\(aq:
                list_requests();
                break;
            default:
                fprintf(stderr, "Bad command: %c\\n", cmd[0]);
                break;
            }
        }
    }
    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR getaddrinfo (3),
.BR inet (3),
.BR lio_listio (3),
.BR hostname (7),
.BR ip (7),
.BR sigevent (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 2012 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" See also https://lwn.net/Articles/519085/
.\"
.\" FIXME glibc 2.18 added AT_HWCAP2, which needs to e documented
.\"
.TH GETAUXVAL 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
getauxval \- retrieve a value from the auxiliary vector
.SH SYNOPSIS
.nf
.B #include <sys/auxv.h>
.sp
.BI "unsigned long getauxval(unsigned long " type );
.fi
.SH DESCRIPTION
The
.BR getauxval ()
function retrieves values from the auxiliary vector,
a mechanism that the kernel's ELF binary loader
uses to pass certain information to
user space when a program is executed.

Each entry in the auxiliary vector consists of a pair of values:
a type that identifies what this entry represents,
and a value for that type.
Given the argument
.IR type ,
.BR getauxval ()
returns the corresponding value.

The value returned for each
.I type
is given in the following list.
Not all
.I type
values are present on all architectures.
.TP
.BR AT_BASE
The base address of the program interpreter (usually, the dynamic linker).
.TP
.BR AT_BASE_PLATFORM
A string identifying the real platform; may differ from
.BR AT_PLATFORM
(PowerPC only).
.TP
.BR AT_CLKTCK
The frequency with which
.BR times (2)
counts.
This value can also be obtained via
.IR sysconf(_SC_CLK_TCK) .
.TP
.BR AT_DCACHEBSIZE
The data cache block size.
.TP
.BR AT_EGID
The effective group ID of the thread.
.TP
.BR AT_ENTRY
The entry address of the executable.
.TP
.BR AT_EUID
The effective user ID of the thread.
.TP
.BR AT_EXECFD
File descriptor of program.
.TP
.BR AT_EXECFN
Pathname used to execute program.
.TP
.BR AT_FLAGS
Flags (unused).
.TP
.BR AT_FPUCW
Used FPU control word (SuperH architecture only).
This gives some information about the FPU initialization
performed by the kernel.
.TP
.BR AT_GID
The real group ID of the thread.
.TP
.BR AT_HWCAP
A pointer to a multibyte mask of bits whose settings
indicate detailed processor capabilities.
The contents of the bit mask are hardware dependent
(for example, see the kernel source file
.IR arch/x86/include/asm/cpufeature.h
for details relating to the Intel x86 architecture).
A human-readable version of the same information is available via
.IR /proc/cpuinfo .
.TP
.BR AT_ICACHEBSIZE
The instruction cache block size.
.\" .TP
.\" .BR AT_IGNORE
.\" .TP
.\" .BR AT_IGNOREPPC
.\" .TP
.\" .BR AT_NOTELF
.TP
.BR AT_PAGESZ
The system page size (the same value returned by
.IR sysconf(_SC_PAGESIZE) ).
.TP
.BR AT_PHDR
The address of the program headers of the executable.
.TP
.BR AT_PHENT
The size of program header entry.
.TP
.BR AT_PHNUM
The number of program headers.
.TP
.BR AT_PLATFORM
A pointer to a string that identifies the hardware platform
that the program is running on.
The dynamic linker uses this in the interpretation of
.IR rpath
values.
.TP
.BR AT_RANDOM
The address of sixteen bytes containing a random value.
.TP
.BR AT_SECURE
Has a nonzero value if this executable should be treated securely.
Most commonly, a nonzero value indicates that the process is
executing a set-user-ID or set-group-ID program; alternatively,
a nonzero value may be triggered by a Linux Security Module.
When this value is nonzero,
the dynamic linker disables the use of certain environment variables (see
.BR ld-linux.so (8))
and glibc changes other aspects of its behavior.
(See also
.BR secure_getenv (3).)
.TP
.BR AT_SYSINFO
The entry point to the system call function in the vDSO.
Not present/needed on all architectures (e.g., absent on x86-64).
.TP
.BR AT_SYSINFO_EHDR
The address of a page containing the virtual Dynamic Shared Object (vDSO)
that the kernel creates in order to provide fast implementations of
certain system calls.
.TP
.BR AT_UCACHEBSIZE
The unified cache block size.
.TP
.BR AT_UID
The real user ID of the thread.
.SH RETURN VALUE
On success,
.BR getauxval ()
returns the value corresponding to
.IR type .
If
.I type
is not found, 0 is returned.
.SH ERRORS
.TP
.BR ENOENT " (since glibc 2.19)"
.\" commit b9ab448f980e296eac21ac65f53783967cc6037b
No entry corresponding to
.IR type
could be found in the auxiliary vector.
.SH VERSIONS
The
.BR getauxval ()
function was added to glibc in version 2.16.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR getauxval ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
This function is a nonstandard glibc extension.
.SH NOTES
The primary consumer of the information in the auxiliary vector
is the dynamic linker
.BR ld-linux.so (8).
The auxiliary vector is a convenient and efficient shortcut
that allows the kernel to communicate a certain set of standard
information that the dynamic linker usually or always needs.
In some cases, the same information could be obtained by system calls,
but using the auxiliary vector is cheaper.

The auxiliary vector resides just above the argument list and
environment in the process address space.
The auxiliary vector supplied to a program can be viewed by setting the
.B LD_SHOW_AUXV
environment variable when running a program:

    $ LD_SHOW_AUXV=1 sleep 1

The auxiliary vector of any process can (subject to file permissions)
be obtained via
.IR /proc/PID/auxv ;
see
.BR proc (5)
for more information.
.SH BUGS
Before the addition of the
.B ENOENT
error in glibc 2.19,
there was no way to unambiguously distinguish the case where
.I type
could not be found from the case where the value corresponding to
.I type
was zer0.
.SH SEE ALSO
.BR secure_getenv (3),
.BR vdso (7),
.BR ld-linux.so (8)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2001 Andries Brouwer (aeb@cwi.nl)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH GETCONTEXT 3 2015-03-02 "Linux" "Linux Programmer's Manual"
.SH NAME
getcontext, setcontext \- get or set the user context
.SH SYNOPSIS
.B #include <ucontext.h>
.sp
.BI "int getcontext(ucontext_t *" ucp );
.br
.BI "int setcontext(const ucontext_t *" ucp );
.SH DESCRIPTION
In a System V-like environment, one has the two types
.I mcontext_t
and
.I ucontext_t
defined in
.I <ucontext.h>
and the four functions
.BR getcontext (),
.BR setcontext (),
.BR makecontext (3),
and
.BR swapcontext (3)
that allow user-level context switching between multiple
threads of control within a process.
.LP
The
.I mcontext_t
type is machine-dependent and opaque.
The
.I ucontext_t
type is a structure that has at least
the following fields:
.in +4
.nf

typedef struct ucontext {
    struct ucontext *uc_link;
    sigset_t         uc_sigmask;
    stack_t          uc_stack;
    mcontext_t       uc_mcontext;
    ...
} ucontext_t;

.fi
.in
with
.IR sigset_t
and
.I stack_t
defined in
.IR <signal.h> .
Here
.I uc_link
points to the context that will be resumed
when the current context terminates (in case the current context
was created using
.BR makecontext (3)),
.I uc_sigmask
is the
set of signals blocked in this context (see
.BR sigprocmask (2)),
.I uc_stack
is the stack used by this context (see
.BR sigaltstack (2)),
and
.I uc_mcontext
is the
machine-specific representation of the saved context,
that includes the calling thread's machine registers.
.LP
The function
.BR getcontext ()
initializes the structure
pointed at by
.I ucp
to the currently active context.
.LP
The function
.BR setcontext ()
restores the user context
pointed at by
.IR ucp .
A successful call does not return.
The context should have been obtained by a call of
.BR getcontext (),
or
.BR makecontext (3),
or passed as third argument to a signal
handler.
.LP
If the context was obtained by a call of
.BR getcontext (),
program execution continues as if this call just returned.
.LP
If the context was obtained by a call of
.BR makecontext (3),
program execution continues by a call to the function
.I func
specified as the second argument of that call to
.BR makecontext (3).
When the function
.I func
returns, we continue with the
.I uc_link
member of the structure
.I ucp
specified as the
first argument of that call to
.BR makecontext (3).
When this member is NULL, the thread exits.
.LP
If the context was obtained by a call to a signal handler,
then old standard text says that "program execution continues with the
program instruction following the instruction interrupted
by the signal".
However, this sentence was removed in SUSv2,
and the present verdict is "the result is unspecified".
.SH RETURN VALUE
When successful,
.BR getcontext ()
returns 0 and
.BR setcontext ()
does not return.
On error, both return \-1 and set
.I errno
appropriately.
.SH ERRORS
None defined.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw26 lb lb
l l l.
Interface	Attribute	Value
T{
.BR getcontext (),
.BR setcontext ()
T}	Thread safety	MT-Safe race:ucp
.TE
.SH CONFORMING TO
SUSv2, POSIX.1-2001.
POSIX.1-2008 removes the specification of
.BR getcontext (),
citing portability issues, and
recommending that applications be rewritten to use POSIX threads instead.
.SH NOTES
The earliest incarnation of this mechanism was the
.BR setjmp (3)/ longjmp (3)
mechanism.
Since that does not define
the handling of the signal context, the next stage was the
.BR sigsetjmp (3)/ siglongjmp (3)
pair.
The present mechanism gives much more control.
On the other hand,
there is no easy way to detect whether a return from
.BR getcontext ()
is from the first call, or via a
.BR setcontext ()
call.
The user has to invent her own bookkeeping device, and a register
variable won't do since registers are restored.
.LP
When a signal occurs, the current user context is saved and
a new context is created by the kernel for the signal handler.
Do not leave the handler using
.BR longjmp (3):
it is undefined what would happen with contexts.
Use
.BR siglongjmp (3)
or
.BR setcontext ()
instead.
.SH SEE ALSO
.BR sigaction (2),
.BR sigaltstack (2),
.BR sigprocmask (2),
.BR longjmp (3),
.BR makecontext (3),
.BR sigsetjmp (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1993 by Thomas Koenig (ig25@rz.uni-karlsruhe.de)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified Wed Jul 21 22:35:42 1993 by Rik Faith (faith@cs.unc.edu)
.\" Modified 18 Mar 1996 by Martin Schulze (joey@infodrom.north.de):
.\"   Corrected description of getwd().
.\" Modified Sat Aug 21 12:32:12 MET 1999 by aeb - applied fix by aj
.\" Modified Mon Dec 11 13:32:51 MET 2000 by aeb
.\" Modified Thu Apr 22 03:49:15 CEST 2002 by Roger Luethi <rl@hellgate.ch>
.\"
.TH GETCWD 3 2015-04-19 "GNU" "Linux Programmer's Manual"
.SH NAME
getcwd, getwd, get_current_dir_name \- get current working directory
.SH SYNOPSIS
.nf
.B #include <unistd.h>
.sp
.BI "char *getcwd(char *" buf ", size_t " size );
.sp
.BI "char *getwd(char *" buf );
.sp
.B "char *get_current_dir_name(void);"
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.sp
.in
.BR get_current_dir_name ():
.RS
_GNU_SOURCE
.RE
.sp
.BR getwd ():
.ad l
.RS 4
.PD 0
.TP 4
Since glibc 2.12:
.nf
_BSD_SOURCE ||
    (_XOPEN_SOURCE\ >=\ 500 ||
        _XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED) &&
    !(_POSIX_C_SOURCE\ >=\ 200809L || _XOPEN_SOURCE\ >=\ 700)
.TP 4
.fi
Before glibc 2.12:
_BSD_SOURCE || _XOPEN_SOURCE\ >=\ 500 ||
_XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED
.PD
.RE
.ad b
.SH DESCRIPTION
These functions return a null-terminated string containing an
absolute pathname that is the current working directory of
the calling process.
The pathname is returned as the function result and via the argument
.IR buf ,
if present.

If the current directory is not below the root directory of the current
process (e.g., because the process set a new filesystem root using
.BR chroot (2)
without changing its current directory into the new root),
then, since Linux 2.6.36,
.\" commit 8df9d1a4142311c084ffeeacb67cd34d190eff74
the returned path will be prefixed with the string "(unreachable)".
Such behavior can also be caused by an unprivileged user by changing
the current directory into another mount namespace.
When dealing with paths from untrusted sources, callers of these
functions should consider checking whether the returned path starts
with '/' or '(' to avoid misinterpreting an unreachable path
as a relative path.

The
.BR getcwd ()
function copies an absolute pathname of the current working directory
to the array pointed to by
.IR buf ,
which is of length
.IR size .
.PP
If the length of the absolute pathname of the current working directory,
including the terminating null byte, exceeds
.I size
bytes, NULL is returned, and
.I errno
is set to
.BR ERANGE ;
an application should check for this error, and allocate a larger
buffer if necessary.
.PP
As an extension to the POSIX.1-2001 standard, glibc's
.BR getcwd ()
allocates the buffer dynamically using
.BR malloc (3)
if
.I buf
is NULL.
In this case, the allocated buffer has the length
.I size
unless
.I size
is zero, when
.I buf
is allocated as big as necessary.
The caller should
.BR free (3)
the returned buffer.

.BR get_current_dir_name ()
will
.BR malloc (3)
an array big enough to hold the absolute pathname of
the current working directory.
If the environment
variable
.B PWD
is set, and its value is correct, then that value will be returned.
The caller should
.BR free (3)
the returned buffer.

.BR getwd ()
does not
.BR malloc (3)
any memory.
The
.I buf
argument should be a pointer to an array at least
.B PATH_MAX
bytes long.
If the length of the absolute pathname of the current working directory,
including the terminating null byte, exceeds
.B PATH_MAX
bytes, NULL is returned, and
.I errno
is set to
.BR ENAMETOOLONG .
(Note that on some systems,
.B PATH_MAX
may not be a compile-time constant;
furthermore, its value may depend on the filesystem, see
.BR pathconf (3).)
For portability and security reasons, use of
.BR getwd ()
is deprecated.
.SH RETURN VALUE
On success, these functions return a pointer to a string containing
the pathname of the current working directory.
In the case
.BR getcwd ()
and
.BR getwd ()
this is the same value as
.IR buf .

On failure, these functions return NULL, and
.I errno
is set to indicate the error.
The contents of the array pointed to by
.I buf
are undefined on error.
.SH ERRORS
.TP
.B EACCES
Permission to read or search a component of the filename was denied.
.TP
.B EFAULT
.I buf
points to a bad address.
.TP
.B EINVAL
The
.I size
argument is zero and
.I buf
is not a null pointer.
.TP
.B EINVAL
.BR getwd ():
.I buf
is NULL.
.TP
.B ENAMETOOLONG
.BR getwd ():
The size of the null-terminated absolute pathname string exceeds
.B PATH_MAX
bytes.
.TP
.B ENOMEM
Out of memory.
.TP
.B ENOENT
The current working directory has been unlinked.
.TP
.B ERANGE
The
.I size
argument is less than the length of the absolute pathname of the
working directory, including the terminating null byte.
You need to allocate a bigger array and try again.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw22 lb lb
l l l.
Interface	Attribute	Value
T{
.BR getcwd (),
.BR getwd ()
T}	Thread safety	MT-Safe
T{
.BR get_current_dir_name ()
T}	Thread safety	MT-Safe env
.TE
.SH CONFORMING TO
.BR getcwd ()
conforms to POSIX.1-2001.
Note however that POSIX.1-2001 leaves the behavior of
.BR getcwd ()
unspecified if
.I buf
is NULL.

.BR getwd ()
is present in POSIX.1-2001, but marked LEGACY.
POSIX.1-2008 removes the specification of
.BR getwd ().
Use
.BR getcwd ()
instead.
POSIX.1-2001
does not define any errors for
.BR getwd ().

.BR get_current_dir_name ()
is a GNU extension.
.SH NOTES
Under Linux, the function
.BR getcwd ()
is a system call (since 2.1.92).
On older systems it would query
.IR /proc/self/cwd .
If both system call and proc filesystem are missing, a
generic implementation is called.
Only in that case can
these calls fail under Linux with
.BR EACCES .
.LP
These functions are often used to save the location of the current working
directory for the purpose of returning to it later.
Opening the current
directory (".") and calling
.BR fchdir (2)
to return is usually a faster and more reliable alternative when sufficiently
many file descriptors are available, especially on platforms other than Linux.
.SH SEE ALSO
.BR chdir (2),
.BR fchdir (2),
.BR open (2),
.BR unlink (2),
.BR free (3),
.BR malloc (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 2001 walter harms (walter.harms@informatik.uni-oldenburg.de)
.\" and Copyright 2008, Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified, 2001-12-26, aeb
.\" 2008-09-07, mtk, Various rewrites; added an example program.
.\"
.TH GETDATE 3 2015-03-02 "" "Linux Programmer's Manual"
.SH NAME
getdate, getdate_r \- convert a date-plus-time string to broken-down time
.SH SYNOPSIS
.B "#include <time.h>"
.sp
.BI "struct tm *getdate(const char *" string );
.sp
.B "extern int getdate_err;"
.sp
.B "#include <time.h>"
.sp
.BI "int getdate_r(const char *" string ", struct tm *" res );
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR getdate ():
.ad l
.RS 4
_XOPEN_SOURCE\ >=\ 500 ||
_XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED
.RE
.br
.BR getdate_r ():
.ad l
.RS 4
_GNU_SOURCE
.RE
.ad
.SH DESCRIPTION
The function
.BR getdate ()
converts a string representation of a date and time,
contained in the buffer pointed to by
.IR string ,
into a broken-down time.
The broken-down time is stored in a
.I tm
structure, and a pointer to this
structure is returned as the function result.
This
.I tm
structure is allocated in static storage,
and consequently it will be overwritten by further calls to
.BR getdate ().

In contrast to
.BR strptime (3),
(which has a
.I format
argument),
.BR getdate ()
uses the formats found in the file
whose full pathname is given in the environment variable
.BR DATEMSK .
The first line in the file that matches the given input string
is used for the conversion.

The matching is done case insensitively.
Superfluous whitespace, either in the pattern or in the string to
be converted, is ignored.

The conversion specifications that a pattern can contain are those given for
.BR strptime (3).
One more conversion specification is specified in POSIX.1-2001:
.TP
.B %Z
Timezone name.
This is not implemented in glibc.
.LP
When
.B %Z
is given, the structure containing the broken-down time
is initialized with values corresponding to the current
time in the given timezone.
Otherwise, the structure is initialized to the broken-down time
corresponding to the current local time (as by a call to
.BR localtime (3)).
.LP
When only the day of the week is given,
the day is taken to be the first such day
on or after today.
.LP
When only the month is given (and no year), the month is taken to
be the first such month equal to or after the current month.
If no day is given, it is the first day of the month.
.LP
When no hour, minute and second are given, the current
hour, minute and second are taken.
.LP
If no date is given, but we know the hour, then that hour is taken
to be the first such hour equal to or after the current hour.

.BR getdate_r ()
is a GNU extension that provides a reentrant version of
.BR getdate ().
Rather than using a global variable to report errors and a static buffer
to return the broken down time,
it returns errors via the function result value,
and returns the resulting broken-down time in the
caller-allocated buffer pointed to by the argument
.IR res .
.SH RETURN VALUE
When successful,
.BR getdate ()
returns a pointer to a
.IR "struct tm" .
Otherwise, it returns NULL and sets the global variable
.IR getdate_err
to one of the error numbers shown below.
Changes to
.I errno
are unspecified.

On success
.BR getdate_r ()
returns 0;
on error it returns one of the error numbers shown below.
.SH ERRORS
The following errors are returned via
.IR getdate_err
(for
.BR getdate ())
or as the function result (for
.BR getdate_r ()):
.TP 4n
.B 1
The
.B DATEMSK
environment variable is not defined, or its value is an empty string.
.TP
.B 2
The template file specified by
.B DATEMSK
cannot be opened for reading.
.TP
.B 3
Failed to get file status information.
.\" stat()
.TP
.B 4
The template file is not a regular file.
.TP
.B 5
An error was encountered while reading the template file.
.TP
.B 6
Memory allocation failed (not enough memory available).
.\" Error 6 doesn't seem to occur in glibc
.TP
.B 7
There is no line in the file that matches the input.
.TP
.B 8
Invalid input specification.
.SH ENVIRONMENT
.TP
.B DATEMSK
File containing format patterns.
.TP
.BR TZ ", " LC_TIME
Variables used by
.BR strptime (3).
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR getdate ()
T}	Thread safety	MT-Unsafe race:getdate env locale
T{
.BR getdate_r ()
T}	Thread safety	MT-Safe env locale
.TE
.SH CONFORMING TO
POSIX.1-2001.
.SH NOTES
The POSIX.1-2001 specification for
.BR strptime (3)
contains conversion specifications using the
.B %E
or
.B %O
modifier, while such specifications are not given for
.BR getdate ().
In glibc,
.BR getdate ()
is implemented using
.BR strptime (3),
so that precisely the same conversions are supported by both.
.SH EXAMPLE
The program below calls
.BR getdate ()
for each of its command-line arguments,
and for each call displays the values in the fields of the returned
.I tm
structure.
The following shell session demonstrates the operation of the program:

.in +4n
.nf
.RB "$" " TFILE=$PWD/tfile"
.RB "$" " echo \(aq%A\(aq > $TFILE " "      # Full name of the day of the week"
.RB "$" " echo \(aq%T\(aq >> $TFILE" "      # ISO date (YYYY-MM-DD)"
.RB "$" " echo \(aq%F\(aq >> $TFILE" "      # Time (HH:MM:SS)"
.RB "$" " date"
.RB "$" " export DATEMSK=$TFILE"
.RB "$" " ./a.out Tuesday \(aq2009-12-28\(aq \(aq12:22:33\(aq"
Sun Sep  7 06:03:36 CEST 2008
Call 1 ("Tuesday") succeeded:
    tm_sec   = 36
    tm_min   = 3
    tm_hour  = 6
    tm_mday  = 9
    tm_mon   = 8
    tm_year  = 108
    tm_wday  = 2
    tm_yday  = 252
    tm_isdst = 1
Call 2 ("2009-12-28") succeeded:
    tm_sec   = 36
    tm_min   = 3
    tm_hour  = 6
    tm_mday  = 28
    tm_mon   = 11
    tm_year  = 109
    tm_wday  = 1
    tm_yday  = 361
    tm_isdst = 0
Call 3 ("12:22:33") succeeded:
    tm_sec   = 33
    tm_min   = 22
    tm_hour  = 12
    tm_mday  = 7
    tm_mon   = 8
    tm_year  = 108
    tm_wday  = 0
    tm_yday  = 250
    tm_isdst = 1
.fi
.in
.SS Program source
\&
.nf
#define _GNU_SOURCE
#include <time.h>
#include <stdio.h>
#include <stdlib.h>

int
main(int argc, char *argv[])
{
    struct tm *tmp;
    int j;

    for (j = 1; j < argc; j++) {
        tmp = getdate(argv[j]);

        if (tmp == NULL) {
            printf("Call %d failed; getdate_err = %d\\n",
                   j, getdate_err);
            continue;
        }

        printf("Call %d (\\"%s\\") succeeded:\\n", j, argv[j]);
        printf("    tm_sec   = %d\\n", tmp\->tm_sec);
        printf("    tm_min   = %d\\n", tmp\->tm_min);
        printf("    tm_hour  = %d\\n", tmp\->tm_hour);
        printf("    tm_mday  = %d\\n", tmp\->tm_mday);
        printf("    tm_mon   = %d\\n", tmp\->tm_mon);
        printf("    tm_year  = %d\\n", tmp\->tm_year);
        printf("    tm_wday  = %d\\n", tmp\->tm_wday);
        printf("    tm_yday  = %d\\n", tmp\->tm_yday);
        printf("    tm_isdst = %d\\n", tmp\->tm_isdst);
    }

    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR time (2),
.BR localtime (3),
.BR setlocale (3),
.BR strftime (3),
.BR strptime (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 Rickard E. Faith (faith@cs.unc.edu)
.\" Portions extracted from /usr/include/dirent.h are:
.\"                    Copyright 1991, 1992 Free Software Foundation
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH GETDIRENTRIES 3 2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
getdirentries \- get directory entries in a filesystem-independent format
.SH SYNOPSIS
.B #include <dirent.h>
.sp
.BI "ssize_t getdirentries(int " fd ", char *" buf ", size_t " nbytes
.BI ", off_t *" basep );
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR getdirentries ():
_BSD_SOURCE || _SVID_SOURCE
.SH DESCRIPTION
Read directory entries from the directory specified by
.I fd
into
.IR buf .
At most
.I nbytes
are read.
Reading starts at offset
.IR *basep ,
and
.I *basep
is updated with the new position after reading.
.SH RETURN VALUE
.BR getdirentries ()
returns the number of bytes read or zero when at the end of the directory.
If an error occurs, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
See the Linux library source code for details.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR getdirentries ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
Not in POSIX.1-2001.
Present on the BSDs, and a few other systems.
Use
.BR opendir (3)
and
.BR readdir (3)
instead.
.SH SEE ALSO
.BR lseek (2),
.BR open (2)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 Rickard E. Faith (faith@cs.unc.edu)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified 2002-04-15 by Roger Luethi <rl@hellgate.ch> and aeb
.\"
.TH GETDTABLESIZE 3 2015-03-02 "Linux" "Linux Programmer's Manual"
.SH NAME
getdtablesize \- get descriptor table size
.SH SYNOPSIS
.B #include <unistd.h>
.sp
.B int getdtablesize(void);
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR getdtablesize ():
.ad l
.RS 4
.PD 0
.TP 4
Since glibc 2.12:
.nf
_BSD_SOURCE ||
    !(_POSIX_C_SOURCE\ >=\ 200112L || _XOPEN_SOURCE\ >=\ 600)
.TP 4
.fi
Before glibc 2.12:
_BSD_SOURCE || _XOPEN_SOURCE\ >=\ 500 ||
_XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED
.PD
.RE
.ad b
.SH DESCRIPTION
.BR getdtablesize ()
returns the maximum number of files a process can have open,
one more than the largest possible value for a file descriptor.
.SH RETURN VALUE
The current limit on the number of open files per process.
.SH ERRORS
On Linux,
.BR getdtablesize ()
can return any of the errors described for
.BR getrlimit (2);
see NOTES below.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR getdtablesize ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
SVr4, 4.4BSD (the
.BR getdtablesize ()
function first appeared in 4.2BSD).
It is not specified in POSIX.1-2001;
portable applications should employ
.I sysconf(_SC_OPEN_MAX)
instead of this call.
.SH NOTES
.BR getdtablesize ()
is implemented as a libc library function.
The glibc version calls
.BR getrlimit (2)
and returns the current
.B RLIMIT_NOFILE
limit, or
.B OPEN_MAX
when that fails.
.\" The libc4 and libc5 versions return
.\" .B OPEN_MAX
.\" (set to 256 since Linux 0.98.4).
.SH SEE ALSO
.BR close (2),
.BR dup (2),
.BR getrlimit (2),
.BR open (2)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\" and Copyright (C) 2007, 2012 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's "POSIX Programmer's Guide" (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified Sat Jul 24 19:30:29 1993 by Rik Faith (faith@cs.unc.edu)
.\" Modified Fri Feb 14 21:47:50 1997 by Andries Brouwer (aeb@cwi.nl)
.\"
.TH GETENV 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
getenv, secure_getenv \- get an environment variable
.SH SYNOPSIS
.nf
.B #include <stdlib.h>
.sp
.BI "char *getenv(const char *" name );

.BI "char *secure_getenv(const char *" name );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR secure_getenv ():
_GNU_SOURCE
.SH DESCRIPTION
The
.BR getenv ()
function searches the environment list to find the
environment variable
.IR name ,
and returns a pointer to the corresponding
.I value
string.

The GNU-specific
.BR secure_getenv ()
function is just like
.BR getenv ()
except that it returns NULL in cases where "secure execution" is required.
Secure execution is required if one of the following conditions
was true when the program run by the calling process was loaded:
.IP * 3
the process's effective user ID did not match its real user ID or
the process's effective group ID did not match its real group ID
(typically this is the result of executing a set-user-ID or
set-group-ID program);
.IP *
the effective capability bit was set on the executable file; or
.IP *
the process has a nonempty permitted capability set.
.PP
Secure execution may also required if triggered
by some Linux security modules.

The
.BR secure_getenv ()
function is intended for use in general-purpose libraries
to avoid vulnerabilities that could occur if
set-user-ID or set-group-ID programs accidentally
trusted the environment.
.SH RETURN VALUE
The
.BR getenv ()
function returns a pointer to the value in the
environment, or NULL if there is no match.
.SH VERSIONS
.BR secure_getenv ()
first appeared in glibc 2.17.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw25 lb lb
l l l.
Interface	Attribute	Value
T{
.BR getenv (),
.BR secure_getenv ()
T}	Thread safety	MT-Safe env
.TE
.SH CONFORMING TO
.BR getenv ():
SVr4, POSIX.1-2001, 4.3BSD, C89, C99.

.BR secure_getenv ()
is a GNU extension.
.SH NOTES
The strings in the environment list are of the form \fIname=value\fP.

As typically implemented,
.BR getenv ()
returns a pointer to a string within the environment list.
The caller must take care not to modify this string,
since that would change the environment of the process.

The implementation of
.BR getenv ()
is not required to be reentrant.
The string pointed to by the return value of
.BR getenv ()
may be statically allocated,
and can be modified by a subsequent call to
.BR getenv (),
.BR putenv (3),
.BR setenv (3),
or
.BR unsetenv (3).

The "secure execution" mode of
.BR secure_getenv ()
is controlled by the
.B AT_SECURE
flag contained in the auxiliary vector passed from the kernel to user space.
.SH SEE ALSO
.BR clearenv (3),
.BR getauxval (3),
.BR putenv (3),
.BR setenv (3),
.BR unsetenv (3),
.BR capabilities (7),
.BR environ (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2002 Andries Brouwer (aeb@cwi.nl)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Inspired by a page written by Walter Harms.
.\"
.TH GETFSENT 3 2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
getfsent, getfsspec, getfsfile, setfsent, endfsent \- handle fstab entries
.SH SYNOPSIS
.B #include <fstab.h>
.sp
.B "void endfsent(void);"
.sp
.B "struct fstab *getfsent(void);"
.sp
.BI "struct fstab *getfsfile(const char *" mount_point );
.sp
.BI "struct fstab *getfsspec(const char *" special_file );
.sp
.B "int setfsent(void);"
.SH DESCRIPTION
These functions read from the file
.IR /etc/fstab .
The
.IR "struct fstab"
is defined by:
.LP
.in +4n
.nf
struct fstab {
    char       *fs_spec;       /* block device name */
    char       *fs_file;       /* mount point */
    char       *fs_vfstype;    /* file-system type */
    char       *fs_mntops;     /* mount options */
    const char *fs_type;       /* rw/rq/ro/sw/xx option */
    int         fs_freq;       /* dump frequency, in days */
    int         fs_passno;     /* pass number on parallel dump */
};
.fi
.in
.PP
Here the field
.I fs_type
contains (on a *BSD system)
one of the five strings "rw", "rq", "ro", "sw", "xx"
(read-write, read-write with quota, read-only, swap, ignore).

The function
.BR setfsent ()
opens the file when required and positions it at the first line.
.LP
The function
.BR getfsent ()
parses the next line from the file.
(After opening it when required.)
.LP
The function
.BR endfsent ()
closes the file when required.
.LP
The function
.BR getfsspec ()
searches the file from the start and returns the first entry found
for which the
.I fs_spec
field matches the
.I special_file
argument.
.LP
The function
.BR getfsfile ()
searches the file from the start and returns the first entry found
for which the
.I fs_file
field matches the
.I mount_point
argument.
.SH RETURN VALUE
Upon success, the functions
.BR getfsent (),
.BR getfsfile (),
and
.BR getfsspec ()
return a pointer to a
.IR "struct fstab" ,
while
.BR setfsent ()
returns 1.
Upon failure or end-of-file, these functions return NULL and 0, respectively.
.\" .SH HISTORY
.\" The
.\" .BR getfsent ()
.\" function appeared in 4.0BSD; the other four functions appeared in 4.3BSD.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lbw24
l l l.
Interface	Attribute	Value
T{
.BR endfsent (),
.br
.BR setfsent ()
T}	Thread safety	MT-Unsafe race:fsent
T{
.BR getfsent (),
.br
.BR getfsspec (),
.br
.BR getfsfile ()
T}	Thread safety	MT-Unsafe race:fsent locale
.TE
.SH CONFORMING TO
These functions are not in POSIX.1-2001.
Several operating systems have them, for example,
*BSD, SunOS, Digital UNIX, AIX (which also has a
.BR getfstype ()).
HP-UX has functions of the same names,
that however use a
.IR "struct checklist"
instead of a
.IR "struct fstab" ,
and calls these functions obsolete, superseded by
.BR getmntent (3).
.SH NOTES
These functions are not thread-safe.
.LP
Since Linux allows mounting a block special device in several places,
and since several devices can have the same mount point, where the
last device with a given mount point is the interesting one,
while
.BR getfsfile ()
and
.BR getfsspec ()
only return the first occurrence, these two functions are not suitable
for use under Linux.
.SH SEE ALSO
.BR getmntent (3),
.BR fstab (5)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified Sat Jul 24 19:29:54 1993 by Rik Faith (faith@cs.unc.edu)
.TH GETGRENT 3  2015-03-02 "" "Linux Programmer's Manual"
.SH NAME
getgrent, setgrent, endgrent \- get group file entry
.SH SYNOPSIS
.nf
.B #include <sys/types.h>
.B #include <grp.h>
.sp
.B struct group *getgrent(void);
.sp
.B void setgrent(void);
.sp
.B void endgrent(void);
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.PD 0
.ad l
.BR setgrent ():
.RS 4
_SVID_SOURCE || _BSD_SOURCE || _XOPEN_SOURCE\ >=\ 500 ||
_XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED ||
.br
/* Since glibc 2.12: */ _POSIX_C_SOURCE\ >=\ 200809L
.RE
.sp
.BR getgrent (),
.BR endgrent ():
.RS 4
_SVID_SOURCE || _BSD_SOURCE || _XOPEN_SOURCE\ >=\ 500 ||
_XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED
.RE
.PD
.ad b
.SH DESCRIPTION
The
.BR getgrent ()
function returns a pointer to a structure containing
the broken-out fields of a record in the group database
(e.g., the local group file
.IR /etc/group ,
NIS, and LDAP).
The first time
.BR getgrent ()
is called,
it returns the first entry; thereafter, it returns successive entries.
.PP
The
.BR setgrent ()
function rewinds to the beginning
of the group database, to allow repeated scans.
.PP
The
.BR endgrent ()
function is used to close the group database
after all processing has been performed.
.PP
The \fIgroup\fP structure is defined in \fI<grp.h>\fP as follows:
.sp
.in +4n
.nf
struct group {
    char   *gr_name;        /* group name */
    char   *gr_passwd;      /* group password */
    gid_t   gr_gid;         /* group ID */
    char  **gr_mem;         /* NULL-terminated array of pointers
                               to names of group members */
};
.fi
.in
.PP
For more information about the fields of this structure, see
.BR group (5).
.SH RETURN VALUE
The
.BR getgrent ()
function returns a pointer to a
.I group
structure,
or NULL if there are no more entries or an error occurs.
.LP
Upon error,
.I errno
may be set.
If one wants to check
.I errno
after the call, it should be set to zero before the call.

The return value may point to a static area, and may be overwritten
by subsequent calls to
.BR getgrent (),
.BR getgrgid (3),
or
.BR getgrnam (3).
(Do not pass the returned pointer to
.BR free (3).)
.SH ERRORS
.TP
.B EAGAIN
The service was temporarily unavailable; try again later.
For NSS backends in glibc this indicates a temporary error talking to the backend.
The error may correct itself, retrying later is suggested.
.TP
.B EINTR
A signal was caught.
.TP
.B EIO
I/O error.
.TP
.B EMFILE
The calling process already has too many open files.
.TP
.B ENFILE
Too many open files in the system.
.TP
.\" not in POSIX
.B ENOENT
A necessary input file cannot be found.
For NSS backends in glibc this indicates the backend is not correctly configured.
.TP
.B ENOMEM
.\" not in POSIX
Insufficient memory to allocate
.I group
structure.
.TP
.B ERANGE
Insufficient buffer space supplied.
.SH FILES
.TP
.I /etc/group
local group database file
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw11 lb lb
l l l.
Interface	Attribute	Value
T{
.BR getgrent ()
T}	Thread safety	T{
MT-Unsafe race:grent
.br
race:grentbuf locale
T}
T{
.BR setgrent (),
.BR endgrent ()
T}	Thread safety	MT-Unsafe race:grent locale
.TE

In the above table,
.I grent
in
.I race:grent
signifies that if any of the functions
.BR setgrent (),
.BR getgrent (),
or
.BR endgrent ()
are used in parallel in different threads of a program,
then data races could occur.
.SH CONFORMING TO
SVr4, 4.3BSD, POSIX.1-2001.
.SH SEE ALSO
.BR fgetgrent (3),
.BR getgrent_r (3),
.BR getgrgid (3),
.BR getgrnam (3),
.BR getgrouplist (3),
.BR putgrent (3),
.BR group (5)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2003 Andries Brouwer (aeb@cwi.nl)
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.TH GETGRENT_R 3 2015-01-22 "GNU" "Linux Programmer's Manual"
.SH NAME
getgrent_r, fgetgrent_r \- get group file entry reentrantly
.SH SYNOPSIS
.nf
.B #include <grp.h>
.sp
.BI "int getgrent_r(struct group *" gbuf ", char *" buf ,
.br
.BI "               size_t " buflen ", struct group **" gbufp );
.sp
.BI "int fgetgrent_r(FILE *" stream ", struct group *" gbuf ", char *" buf ,
.br
.BI "                size_t " buflen ", struct group **" gbufp );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR getgrent_r ():
_GNU_SOURCE
.\" FIXME . The FTM requirements seem inconsistent here.  File a glibc bug?
.br
.BR fgetgrent_r ():
_SVID_SOURCE
.SH DESCRIPTION
The functions
.BR getgrent_r ()
and
.BR fgetgrent_r ()
are the reentrant versions of
.BR getgrent (3)
and
.BR fgetgrent (3).
The former reads the next group entry from the stream initialized by
.BR setgrent (3).
The latter reads the next group entry from
.IR stream .
.PP
The \fIgroup\fP structure is defined in
.I <grp.h>
as follows:
.sp
.in +4n
.nf
struct group {
    char   *gr_name;        /* group name */
    char   *gr_passwd;      /* group password */
    gid_t   gr_gid;         /* group ID */
    char  **gr_mem;         /* NULL-terminated array of pointers
                               to names of group members */
};
.fi
.in
.PP
For more information about the fields of this structure, see
.BR group (5).
.PP
The nonreentrant functions return a pointer to static storage,
where this static storage contains further pointers to group
name, password and members.
The reentrant functions described here return all of that in
caller-provided buffers.
First of all there is the buffer
.I gbuf
that can hold a \fIstruct group\fP.
And next the buffer
.I buf
of size
.I buflen
that can hold additional strings.
The result of these functions, the \fIstruct group\fP read from the stream,
is stored in the provided buffer
.IR *gbuf ,
and a pointer to this \fIstruct group\fP is returned in
.IR *gbufp .
.SH RETURN VALUE
On success, these functions return 0 and
.I *gbufp
is a pointer to the \fIstruct group\fP.
On error, these functions return an error value and
.I *gbufp
is NULL.
.SH ERRORS
.TP
.B ENOENT
No more entries.
.TP
.B ERANGE
Insufficient buffer space supplied.
Try again with larger buffer.
.SH CONFORMING TO
These functions are GNU extensions, done in a style resembling
the POSIX version of functions like
.BR getpwnam_r (3).
Other systems use the prototype
.sp
.nf
.in +4n
struct group *getgrent_r(struct group *grp, char *buf,
                         int buflen);
.in
.fi
.sp
or, better,
.sp
.nf
.in +4n
int getgrent_r(struct group *grp, char *buf, int buflen,
               FILE **gr_fp);
.in
.fi
.SH NOTES
The function
.BR getgrent_r ()
is not really reentrant since it shares the reading position
in the stream with all other threads.
.SH EXAMPLE
.nf
#define _GNU_SOURCE
#include <grp.h>
#include <stdio.h>
#include <stdlib.h>
#define BUFLEN 4096

int
main(void)
{
    struct group grp, *grpp;
    char buf[BUFLEN];
    int i;

    setgrent();
    while (1) {
        i = getgrent_r(&grp, buf, BUFLEN, &grpp);
        if (i)
            break;
        printf("%s (%d):", grpp\->gr_name, grpp\->gr_gid);
        for (i = 0; ; i++) {
            if (grpp\->gr_mem[i] == NULL)
                break;
            printf(" %s", grpp\->gr_mem[i]);
        }
        printf("\en");
    }
    endgrent();
    exit(EXIT_SUCCESS);
}
.fi
.\" perhaps add error checking - should use strerror_r
.\" #include <errno.h>
.\" #include <stdlib.h>
.\"         if (i) {
.\"               if (i == ENOENT)
.\"                     break;
.\"               printf("getgrent_r: %s", strerror(i));
.\"               exit(EXIT_FAILURE);
.\"         }
.SH SEE ALSO
.BR fgetgrent (3),
.BR getgrent (3),
.BR getgrgid (3),
.BR getgrnam (3),
.BR putgrent (3),
.BR group (5)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\"
.\" Modified 1993-07-24 by Rik Faith (faith@cs.unc.edu)
.\" Modified 2003-11-15 by aeb
.\"
.TH GETGRNAM 3 2015-03-02 "" "Linux Programmer's Manual"
.SH NAME
getgrnam, getgrnam_r, getgrgid, getgrgid_r \- get group file entry
.SH SYNOPSIS
.nf
.B #include <sys/types.h>
.B #include <grp.h>
.sp
.BI "struct group *getgrnam(const char *" name );
.sp
.BI "struct group *getgrgid(gid_t " gid );
.sp
.BI "int getgrnam_r(const char *" name ", struct group *" grp ,
.br
.BI "          char *" buf ", size_t " buflen ", struct group **" result );
.sp
.BI "int getgrgid_r(gid_t " gid ", struct group *" grp ,
.br
.BI "          char *" buf ", size_t " buflen ", struct group **" result );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.ad l
.in
.sp
.BR getgrnam_r (),
.BR getgrgid_r ():
.RS 4
_POSIX_C_SOURCE\ >=\ 1 || _XOPEN_SOURCE || _BSD_SOURCE ||
_SVID_SOURCE || _POSIX_SOURCE
.RE
.ad b
.SH DESCRIPTION
The
.BR getgrnam ()
function returns a pointer to a structure containing
the broken-out fields of the record in the group database
(e.g., the local group file
.IR /etc/group ,
NIS, and LDAP)
that matches the group name
.IR name .
.PP
The
.BR getgrgid ()
function returns a pointer to a structure containing
the broken-out fields of the record in the group database
that matches the group ID
.IR gid .
.PP
The \fIgroup\fP structure is defined in \fI<grp.h>\fP as follows:
.sp
.in +4n
.nf
struct group {
    char   *gr_name;        /* group name */
    char   *gr_passwd;      /* group password */
    gid_t   gr_gid;         /* group ID */
    char  **gr_mem;         /* NULL-terminated array of pointers
                               to names of group members */
};
.fi
.in
.PP
For more information about the fields of this structure, see
.BR group (5).
.PP
The
.BR getgrnam_r ()
and
.BR getgrgid_r ()
functions obtain the same information as
.BR getgrnam ()
and
.BR getgrgid (),
but store the retrieved
.I group
structure
in the space pointed to by
.IR grp .
The string fields pointed to by the members of the
.I group
structure are stored in the buffer
.I buf
of size
.IR buflen .
A pointer to the result (in case of success) or NULL (in case no entry
was found or an error occurred) is stored in
.IR *result .
.PP
The call

    sysconf(_SC_GETGR_R_SIZE_MAX)

returns either \-1, without changing
.IR errno ,
or an initial suggested size for
.IR buf .
(If this size is too small,
the call fails with
.BR ERANGE ,
in which case the caller can retry with a larger buffer.)
.SH RETURN VALUE
The
.BR getgrnam ()
and
.BR getgrgid ()
functions return a pointer to a
.I group
structure, or NULL if the matching entry
is not found or an error occurs.
If an error occurs,
.I errno
is set appropriately.
If one wants to check
.I errno
after the call, it should be set to zero before the call.
.LP
The return value may point to a static area, and may be overwritten
by subsequent calls to
.BR getgrent (3),
.BR getgrgid (),
or
.BR getgrnam ().
(Do not pass the returned pointer to
.BR free (3).)
.LP
On success,
.BR getgrnam_r ()
and
.BR getgrgid_r ()
return zero, and set
.IR *result
to
.IR grp .
If no matching group record was found,
these functions return 0 and store NULL in
.IR *result .
In case of error, an error number is returned, and NULL is stored in
.IR *result .
.SH ERRORS
.TP
.BR 0 " or " ENOENT " or " ESRCH " or " EBADF " or " EPERM " or ... "
The given
.I name
or
.I gid
was not found.
.TP
.B EINTR
A signal was caught.
.TP
.B EIO
I/O error.
.TP
.B EMFILE
The maximum number
.RB ( OPEN_MAX )
of files was open already in the calling process.
.TP
.B ENFILE
The maximum number of files was open already in the system.
.TP
.B ENOMEM
.\" not in POSIX
Insufficient memory to allocate
.I group
structure.
.\" to allocate the group structure, or to allocate buffers
.TP
.B ERANGE
Insufficient buffer space supplied.
.SH FILES
.TP
.I /etc/group
local group database file
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR getgrnam ()
T}	Thread safety	MT-Unsafe race:grnam locale
T{
.BR getgrgid ()
T}	Thread safety	MT-Unsafe race:grgid locale
T{
.BR getgrnam_r (),
.br
.BR getgrgid_r ()
T}	Thread safety	MT-Safe locale
.TE
.SH CONFORMING TO
SVr4, 4.3BSD, POSIX.1-2001.
.SH NOTES
The formulation given above under "RETURN VALUE" is from POSIX.1-2001.
It does not call "not found" an error, hence does not specify what value
.I errno
might have in this situation.
But that makes it impossible to recognize
errors.
One might argue that according to POSIX
.I errno
should be left unchanged if an entry is not found.
Experiments on various
UNIX-like systems shows that lots of different values occur in this
situation: 0, ENOENT, EBADF, ESRCH, EWOULDBLOCK, EPERM, and probably others.
.\" more precisely:
.\" AIX 5.1 - gives ESRCH
.\" OSF1 4.0g - gives EWOULDBLOCK
.\" libc, glibc up to version 2.6, Irix 6.5 - give ENOENT
.\" glibc since version 2.7 - give 0
.\" FreeBSD 4.8, OpenBSD 3.2, NetBSD 1.6 - give EPERM
.\" SunOS 5.8 - gives EBADF
.\" Tru64 5.1b, HP-UX-11i, SunOS 5.7 - give 0
.SH SEE ALSO
.BR endgrent (3),
.BR fgetgrent (3),
.BR getgrent (3),
.BR getpwnam (3),
.BR setgrent (3),
.BR group (5)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2008, Linux Foundation, written by Michael Kerrisk
.\" <mtk.manpages@gmail.com>
.\"
.\" A few pieces remain from an earlier version written in
.\" 2002 by Walter Harms (walter.harms@informatik.uni-oldenburg.de)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH GETGROUPLIST 3 2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
getgrouplist \- get list of groups to which a user belongs
.SH SYNOPSIS
.B #include <grp.h>
.sp
.BI "int getgrouplist(const char *" user ", gid_t " group ,
.br
.BI "                 gid_t *" groups ", int *" ngroups );
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR getgrouplist ():
_BSD_SOURCE
.SH DESCRIPTION
The
.BR getgrouplist ()
function scans the group database (see
.BR group (5))
to obtain the list of groups that
.I user
belongs to.
Up to
.I *ngroups
of these groups are returned in the array
.IR groups .

If it was not among the groups defined for
.I user
in the group database, then
.I group
is included in the list of groups returned by
.BR getgrouplist ();
typically this argument is specified as the group ID from
the password record for
.IR user .

The
.I ngroups
argument is a value-result argument:
on return it always contains the number of groups found for
.IR user ,
including
.IR group ;
this value may be greater than the number of groups stored in
.IR groups .
.SH RETURN VALUE
If the number of groups of which
.I user
is a member is less than or equal to
.IR *ngroups ,
then the value
.I *ngroups
is returned.

If the user is a member of more than
.I *ngroups
groups, then
.BR getgrouplist ()
returns \-1.
In this case, the value returned in
.IR *ngroups
can be used to resize the buffer passed to a further call
.BR getgrouplist ().
.SH VERSIONS
This function is present since glibc 2.2.4.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR getgrouplist ()
T}	Thread safety	MT-Safe locale
.TE
.SH CONFORMING TO
This function is nonstandard; it appears on most BSDs.
.SH BUGS
In glibc versions before 2.3.3,
the implementation of this function contains a buffer-overrun bug:
it returns the complete list of groups for
.IR user
in the array
.IR groups ,
even when the number of groups exceeds
.IR *ngroups .
.SH EXAMPLE
.PP
The program below displays the group list for the user named in its
first command-line argument.
The second command-line argument specifies the
.I ngroups
value to be supplied to
.BR getgrouplist ().
The following shell session shows examples of the use of this program:
.in +4n
.nf

.RB "$" " ./a.out cecilia 0"
getgrouplist() returned \-1; ngroups = 3
.RB "$" " ./a.out cecilia 3"
ngroups = 3
16 (dialout)
33 (video)
100 (users)
.fi
.in
.SS Program source
\&
.nf
#include <stdio.h>
#include <stdlib.h>
#include <grp.h>
#include <pwd.h>

int
main(int argc, char *argv[])
{
    int j, ngroups;
    gid_t *groups;
    struct passwd *pw;
    struct group *gr;

    if (argc != 3) {
        fprintf(stderr, "Usage: %s <user> <ngroups>\\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    ngroups = atoi(argv[2]);

    groups = malloc(ngroups * sizeof (gid_t));
    if (groups == NULL) {
        perror("malloc");
        exit(EXIT_FAILURE);
    }

    /* Fetch passwd structure (contains first group ID for user) */

    pw = getpwnam(argv[1]);
    if (pw == NULL) {
        perror("getpwnam");
        exit(EXIT_SUCCESS);
    }

    /* Retrieve group list */

    if (getgrouplist(argv[1], pw\->pw_gid, groups, &ngroups) == \-1) {
        fprintf(stderr, "getgrouplist() returned \-1; ngroups = %d\\n",
                ngroups);
        exit(EXIT_FAILURE);
    }

    /* Display list of retrieved groups, along with group names */

    fprintf(stderr, "ngroups = %d\\n", ngroups);
    for (j = 0; j < ngroups; j++) {
        printf("%d", groups[j]);
        gr = getgrgid(groups[j]);
        if (gr != NULL)
            printf(" (%s)", gr\->gr_name);
        printf("\\n");
    }

    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR getgroups (2),
.BR setgroups (2),
.BR getgrent (3),
.BR group_member (3),
.BR group (5),
.BR passwd (5)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified 1993-05-22, David Metcalfe
.\" Modified 1993-07-25, Rik Faith (faith@cs.unc.edu)
.\" Modified 1997-02-16, Andries Brouwer (aeb@cwi.nl)
.\" Modified 1998-12-21, Andries Brouwer (aeb@cwi.nl)
.\" Modified 2000-08-12, Andries Brouwer (aeb@cwi.nl)
.\" Modified 2001-05-19, Andries Brouwer (aeb@cwi.nl)
.\" Modified 2002-08-05, Michael Kerrisk
.\" Modified 2004-10-31, Andries Brouwer
.\"
.TH GETHOSTBYNAME 3 2015-04-19 "" "Linux Programmer's Manual"
.SH NAME
gethostbyname, gethostbyaddr, sethostent, gethostent, endhostent,
h_errno,
herror, hstrerror,
gethostbyaddr_r,
gethostbyname2, gethostbyname2_r, gethostbyname_r,
gethostent_r \- get network host entry
.SH SYNOPSIS
.nf
.B #include <netdb.h>
.B extern int h_errno;
.sp
.BI "struct hostent *gethostbyname(const char *" name );
.sp
.BR "#include <sys/socket.h>" "       /* for AF_INET */"
.BI "struct hostent *gethostbyaddr(const void *" addr ,
.BI "                              socklen_t " len ", int " type );
.sp
.BI "void sethostent(int " stayopen );
.sp
.B void endhostent(void);
.sp
.BI "void herror(const char *" s );
.sp
.BI "const char *hstrerror(int " err );
.sp
/* System V/POSIX extension */
.br
.B struct hostent *gethostent(void);
.sp
/* GNU extensions */
.br
.BI "struct hostent *gethostbyname2(const char *" name ", int " af );
.sp
.B "int gethostent_r("
.BI "        struct hostent *" ret ", char *" buf ", size_t " buflen ,
.BI "        struct hostent **" result ", int *" h_errnop );
.sp
.BI "int gethostbyaddr_r(const void *" addr ", socklen_t " len ", int " type ,
.BI "        struct hostent *" ret ", char *" buf ", size_t " buflen ,
.BI "        struct hostent **" result ", int *" h_errnop );
.sp
.BI "int gethostbyname_r(const char *" name ,
.BI "        struct hostent *" ret ", char *" buf ", size_t " buflen ,
.BI "        struct hostent **" result ", int *" h_errnop );
.sp
.BI "int gethostbyname2_r(const char *" name ", int " af,
.BI "        struct hostent *" ret ", char *" buf ", size_t " buflen ,
.BI "        struct hostent **" result ", int *" h_errnop );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.PD 0
.ad l
.BR gethostbyname2 (),
.BR gethostent_r (),
.BR gethostbyaddr_r (),
.BR gethostbyname_r (),
.BR gethostbyname2_r ():
.RS 4
_BSD_SOURCE || _SVID_SOURCE
.RE

.BR herror (),
.BR hstrerror ():
.RS 4
.TP 4
Since glibc 2.8:
_BSD_SOURCE || _SVID_SOURCE
.TP
Before glibc 2.8:
none
.RE

.BR h_errno :
.RS 4
.TP 4
Since glibc 2.12:
_BSD_SOURCE || _SVID_SOURCE ||
    (_POSIX_C_SOURCE < 200809L && _XOPEN_SOURCE < 700)
.TP
Before glibc 2.12:
none
.RE
.ad b
.PD
.SH DESCRIPTION
The
.BR gethostbyname* (),
.BR gethostbyaddr* (),
.BR herror (),
and
.BR hstrerror ()
functions are obsolete.
Applications should use
.BR getaddrinfo (3),
.BR getnameinfo (3),
and
.BR gai_strerror (3)
instead.

The
.BR gethostbyname ()
function returns a structure of type
.I hostent
for the given host
.IR name .
Here
.I name
is either a hostname, or an IPv4 address in standard dot notation (as for
.BR inet_addr (3)),
or an IPv6 address in colon (and possibly dot) notation.
(See RFC\ 1884 for the description of IPv6 addresses.)
If
.I name
is an IPv4 or IPv6 address, no lookup is performed and
.BR gethostbyname ()
simply copies
.I name
into the
.I h_name
field and its
.I struct in_addr
equivalent into the
.I h_addr_list[0]
field of the returned
.I hostent
structure.
If
.I name
doesn't end in a dot and the environment variable
.B HOSTALIASES
is set, the alias file pointed to by
.B HOSTALIASES
will first be searched for
.I name
(see
.BR hostname (7)
for the file format).
The current domain and its parents are searched unless \fIname\fP
ends in a dot.
.PP
The
.BR gethostbyaddr ()
function returns a structure of type \fIhostent\fP
for the given host address \fIaddr\fP of length \fIlen\fP and address type
\fItype\fP.
Valid address types are
.B AF_INET
and
.BR AF_INET6 .
The host address argument is a pointer to a struct of a type depending
on the address type, for example a \fIstruct in_addr *\fP (probably
obtained via a call to
.BR inet_addr (3))
for address type
.BR AF_INET .
.PP
The
.BR sethostent ()
function specifies, if \fIstayopen\fP is true (1),
that a connected TCP socket should be used for the name server queries and
that the connection should remain open during successive queries.
Otherwise, name server queries will use UDP datagrams.
.PP
The
.BR endhostent ()
function ends the use of a TCP connection for name
server queries.
.PP
The (obsolete)
.BR herror ()
function prints the error message associated
with the current value of \fIh_errno\fP on \fIstderr\fP.
.PP
The (obsolete)
.BR hstrerror ()
function takes an error number
(typically \fIh_errno\fP) and returns the corresponding message string.
.PP
The domain name queries carried out by
.BR gethostbyname ()
and
.BR gethostbyaddr ()
rely on the Name Service Switch
.RB ( nsswitch.conf (5))
configured sources or a local name server
.RB ( named (8)).
The default action is to query the Name Service Switch
.RB ( nsswitch.conf(5))
configured sources, failing that, a local name server
.RB ( named (8)).

.SS Historical
The
.BR nsswitch.conf (5)
file is the modern way of controlling the order of host lookups.
.PP
In glibc 2.4 and earlier, the
.I order
keyword was used to control the order of host lookups as defined in
.IR /etc/host.conf
.RB ( host.conf (5)).

.PP
The \fIhostent\fP structure is defined in \fI<netdb.h>\fP as follows:
.sp
.in +4n
.nf
.ne 7
struct hostent {
    char  *h_name;            /* official name of host */
    char **h_aliases;         /* alias list */
    int    h_addrtype;        /* host address type */
    int    h_length;          /* length of address */
    char **h_addr_list;       /* list of addresses */
}
#define h_addr h_addr_list[0] /* for backward compatibility */
.fi
.in
.PP
The members of the \fIhostent\fP structure are:
.TP
.I h_name
The official name of the host.
.TP
.I h_aliases
An array of alternative names for the host, terminated by a null pointer.
.TP
.I h_addrtype
The type of address; always
.B AF_INET
or
.B AF_INET6
at present.
.TP
.I h_length
The length of the address in bytes.
.TP
.I h_addr_list
An array of pointers to network addresses for the host (in network byte
order), terminated by a null pointer.
.TP
.I h_addr
The first address in \fIh_addr_list\fP for backward compatibility.
.SH RETURN VALUE
The
.BR gethostbyname ()
and
.BR gethostbyaddr ()
functions return the
.I hostent
structure or a null pointer if an error occurs.
On error, the
.I h_errno
variable holds an error number.
When non-NULL, the return value may point at static data, see the notes below.
.SH ERRORS
The variable \fIh_errno\fP can have the following values:
.TP
.B HOST_NOT_FOUND
The specified host is unknown.
.TP
.BR NO_DATA
The requested name is valid but does not have an IP address.
Another type of request to the name server for this domain
may return an answer.
The constant
.BR NO_ADDRESS
is a synonym for
.BR NO_DATA .
.TP
.B NO_RECOVERY
A nonrecoverable name server error occurred.
.TP
.B TRY_AGAIN
A temporary error occurred on an authoritative name server.
Try again later.
.SH FILES
.TP
.I /etc/host.conf
resolver configuration file
.TP
.I /etc/hosts
host database file
.TP
.I /etc/nsswitch.conf
name service switch configuration
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw18 lb lbw29
l l l.
Interface	Attribute	Value
T{
.BR gethostbyname ()
T}	Thread safety	T{
MT-Unsafe race:hostbyname env
.br
locale
T}
T{
.BR gethostbyaddr ()
T}	Thread safety	T{
MT-Unsafe race:hostbyaddr env
.br
locale
T}
T{
.BR sethostent (),
.br
.BR endhostent (),
.br
.BR gethostent_r ()
T}	Thread safety	T{
MT-Unsafe race:hostent env
.br
locale
T}
T{
.BR herror (),
.br
.BR hstrerror ()
T}	Thread safety	MT-Safe
T{
.BR gethostent ()
T}	Thread safety	T{
MT-Unsafe race:hostent
.br
race:hostentbuf env locale
T}
T{
.BR gethostbyname2 ()
T}	Thread safety	T{
MT-Unsafe race:hostbyname2
.br
env locale
T}
T{
.BR gethostbyaddr_r (),
.BR gethostbyname_r (),
.BR gethostbyname2_r ()
T}	Thread safety	MT-Safe env locale
.TE

In the above table,
.I hostent
in
.I race:hostent
signifies that if any of the functions
.BR sethostent (3),
.BR gethostent (3),
.BR gethostent_r (3),
or
.BR endhostent (3)
are used in parallel in different threads of a program,
then data races could occur.
.SH CONFORMING TO
POSIX.1-2001 specifies
.BR gethostbyname (),
.BR gethostbyaddr (),
.BR sethostent (),
.BR endhostent (),
.BR gethostent (),
and
.IR h_errno ;
.BR gethostbyname (),
.BR gethostbyaddr (),
and
.IR h_errno
are marked obsolescent in that standard.
POSIX.1-2008 removes the specifications of
.BR gethostbyname (),
.BR gethostbyaddr (),
and
.IR h_errno ,
recommending the use of
.BR getaddrinfo (3)
and
.BR getnameinfo (3)
instead.
.SH NOTES
The functions
.BR gethostbyname ()
and
.BR gethostbyaddr ()
may return pointers to static data, which may be overwritten by
later calls.
Copying the
.I struct hostent
does not suffice, since it contains pointers; a deep copy is required.
.LP
In the original BSD implementation the
.I len
argument
of
.BR gethostbyname ()
was an
.IR int .
The SUSv2 standard is buggy and declares the
.I len
argument of
.BR gethostbyaddr ()
to be of type
.IR size_t .
(That is wrong, because it has to be
.IR int ,
and
.I size_t
is not.
POSIX.1-2001 makes it
.IR socklen_t ,
which is OK.)
See also
.BR accept (2).
.LP
The BSD prototype for
.BR gethostbyaddr ()
uses
.I "const char\ *"
for the first argument.
.SS System V/POSIX extension
POSIX requires the
.BR gethostent ()
call, that should return the next entry in the host data base.
When using DNS/BIND this does not make much sense, but it may
be reasonable if the host data base is a file that can be read
line by line.
On many systems a routine of this name reads
from the file
.IR /etc/hosts .
.\" e.g., Linux, FreeBSD, UnixWare, HP-UX
It may be available only when the library was built without DNS support.
.\" e.g., FreeBSD, AIX
The glibc version will ignore ipv6 entries.
This function is not reentrant,
and glibc adds a reentrant version
.BR gethostent_r ().
.SS GNU extensions
Glibc2 also has a
.BR gethostbyname2 ()
that works like
.BR gethostbyname (),
but permits to specify the address family to which the address must belong.
.LP
Glibc2 also has reentrant versions
.BR gethostent_r (),
.BR gethostbyaddr_r (),
.BR gethostbyname_r ()
and
.BR gethostbyname2_r ().
The caller supplies a
.I hostent
structure
.I ret
which will be filled in on success, and a temporary work buffer
.I buf
of size
.IR buflen .
After the call,
.I result
will point to the result on success.
In case of an error
or if no entry is found
.I result
will be NULL.
The functions return 0 on success and a nonzero error number on failure.
In addition to the errors returned by the nonreentrant
versions of these functions, if
.I buf
is too small, the functions will return
.BR ERANGE ,
and the call should be retried with a larger buffer.
The global variable
.I h_errno
is not modified, but the address of a variable in which to store error numbers
is passed in
.IR h_errnop .
.SH BUGS
.BR gethostbyname ()
does not recognize components of a dotted IPv4 address string
that are expressed in hexadecimal.
.\" http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=482973
.SH SEE ALSO
.BR getaddrinfo (3),
.\" .BR getipnodebyaddr (3),
.\" .BR getipnodebyname (3),
.BR getnameinfo (3),
.BR inet (3),
.BR inet_ntop (3),
.BR inet_pton (3),
.BR resolver (3),
.BR hosts (5),
.BR nsswitch.conf (5),
.BR hostname (7),
.BR named (8)
.\" .BR resolv+ (8)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 Rickard E. Faith (faith@cs.unc.edu)
.\"
.\" Updated with additions from Mitchum DSouza <m.dsouza@mrc-apu.cam.ac.uk>
.\" Portions Copyright 1993 Mitchum DSouza <m.dsouza@mrc-apu.cam.ac.uk>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified Tue Oct 22 00:22:35 EDT 1996 by Eric S. Raymond <esr@thyrsus.com>
.TH GETHOSTID 3 2015-05-07 "Linux" "Linux Programmer's Manual"
.SH NAME
gethostid, sethostid \- get or set the unique identifier of the current host
.SH SYNOPSIS
.B #include <unistd.h>
.sp
.B long gethostid(void);
.br
.BI "int sethostid(long " hostid );
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.br
.BR gethostid ():
.RS 4
_BSD_SOURCE || _XOPEN_SOURCE\ >=\ 500 ||
_XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED
.RE
.BR sethostid ():
.RS 4
_BSD_SOURCE || (_XOPEN_SOURCE && _XOPEN_SOURCE\ <\ 500)
.RE
.ad b
.SH DESCRIPTION
.BR gethostid ()
and
.BR sethostid ()
respectively get or set a unique 32-bit identifier for the current machine.
The 32-bit identifier is intended to be unique among all UNIX systems in
existence.
This normally resembles the Internet address for the local
machine, as returned by
.BR gethostbyname (3),
and thus usually never needs to be set.

The
.BR sethostid ()
call is restricted to the superuser.
.SH RETURN VALUE
.BR gethostid ()
returns the 32-bit identifier for the current host as set by
.BR sethostid ().

On success,
.BR sethostid ()
returns 0; on error, \-1 is returned, and
.I errno
is set to indicate the error.
.SH ERRORS
.BR sethostid ()
can fail with the following errors:
.TP
.B EACCES
The caller did not have permission to write to the file used
to store the host ID.
.TP
.B EPERM
The calling process's effective user or group ID is not the same
as its corresponding real ID.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lbw25
l l l.
Interface	Attribute	Value
T{
.BR gethostid ()
T}	Thread safety	MT-Safe hostid env locale
T{
.BR sethostid ()
T}	Thread safety	MT-Unsafe const:hostid
.TE

.SH CONFORMING TO
4.2BSD; these functions were dropped in 4.4BSD.
SVr4 includes
.BR gethostid ()
but not
.BR sethostid ().
POSIX.1-2001 specifies
.BR gethostid ()
but not
.BR sethostid ().
.SH NOTES
In the glibc implementation, the
.I hostid
is stored in the file
.IR /etc/hostid .
(In glibc versions before 2.2, the file
.I /var/adm/hostid
was used.)
.\" libc5 used /etc/hostid; libc4 didn't have these functions

In the glibc implementation, if
.BR gethostid ()
cannot open the file containing the host ID,
then it obtains the hostname using
.BR gethostname (2),
passes that hostname to
.BR gethostbyname_r (3)
in order to obtain the host's IPv4 address,
and returns a value obtained by bit-twiddling the IPv4 address.
(This value may not be unique.)
.SH BUGS
It is impossible to ensure that the identifier is globally unique.
.SH SEE ALSO
.BR hostid (1),
.BR gethostbyname (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2008 Petr Baudis <pasky@suse.cz>
.\" and copyright (c) 2009, Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\"
.\" 2008-12-08 Petr Baudis <pasky@suse.cz>
.\"    Rewrite the BSD manpage in the Linux man pages style and account
.\"    for glibc specificities, provide an example.
.\" 2009-01-14 mtk, many edits and changes, rewrote example program.
.\"
.TH GETIFADDRS 3 2014-02-26 "GNU" "Linux Programmer's Manual"
.SH NAME
getifaddrs, freeifaddrs \- get interface addresses
.SH SYNOPSIS
.nf
.B #include <sys/types.h>
.B #include <ifaddrs.h>
.sp
.BI "int getifaddrs(struct ifaddrs **" "ifap" );
.sp
.BI "void freeifaddrs(struct ifaddrs *" "ifa" );
.fi
.SH DESCRIPTION
The
.BR getifaddrs ()
function creates a linked list of structures describing
the network interfaces of the local system,
and stores the address of the first item of the list in
.IR *ifap .
The list consists of
.I ifaddrs
structures, defined as follows:
.sp
.in +4n
.nf
struct ifaddrs {
    struct ifaddrs  *ifa_next;    /* Next item in list */
    char            *ifa_name;    /* Name of interface */
    unsigned int     ifa_flags;   /* Flags from SIOCGIFFLAGS */
    struct sockaddr *ifa_addr;    /* Address of interface */
    struct sockaddr *ifa_netmask; /* Netmask of interface */
    union {
        struct sockaddr *ifu_broadaddr;
                         /* Broadcast address of interface */
        struct sockaddr *ifu_dstaddr;
                         /* Point-to-point destination address */
    } ifa_ifu;
#define              ifa_broadaddr ifa_ifu.ifu_broadaddr
#define              ifa_dstaddr   ifa_ifu.ifu_dstaddr
    void            *ifa_data;    /* Address-specific data */
};
.fi
.in
.PP
The
.I ifa_next
field contains a pointer to the next structure on the list,
or NULL if this is the last item of the list.
.PP
The
.I ifa_name
points to the null-terminated interface name.
.\" The constant
.\" .B IF NAMESIZE
.\" indicates the maximum length of this field.
.PP
The
.I ifa_flags
field contains the interface flags, as returned by the
.B SIOCGIFFLAGS
.BR ioctl (2)
operation (see
.BR netdevice (7)
for a list of these flags).
.PP
The
.I ifa_addr
field points to a structure containing the interface address.
(The
.I sa_family
subfield should be consulted to determine the format of the
address structure.)
This field may contain a null pointer.
.PP
The
.I ifa_netmask
field points to a structure containing the netmask associated with
.IR ifa_addr ,
if applicable for the address family.
This field may contain a null pointer.
.PP
Depending on whether the bit
.B IFF_BROADCAST
or
.B IFF_POINTOPOINT
is set in
.I ifa_flags
(only one can be set at a time),
either
.I ifa_broadaddr
will contain the broadcast address associated with
.I ifa_addr
(if applicable for the address family) or
.I ifa_dstaddr
will contain the destination address of the point-to-point interface.
.PP
The
.I ifa_data
field points to a buffer containing address-family-specific data;
this field may be NULL if there is no such data for this interface.
.PP
The data returned by
.BR getifaddrs ()
is dynamically allocated and should be freed using
.BR freeifaddrs ()
when no longer needed.
.SH RETURN VALUE
On success,
.BR getifaddrs ()
returns zero;
on error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.BR getifaddrs ()
may fail and set
.I errno
for any of the errors specified for
.BR socket (2),
.BR bind (2),
.BR getsockname (2),
.BR recvmsg (2),
.BR sendto (2),
.BR malloc (3),
or
.BR realloc (3).
.SH VERSIONS
The
.BR getifaddrs ()
function first appeared in glibc 2.3, but before glibc 2.3.3,
the implementation supported only IPv4 addresses;
IPv6 support was added in glibc 2.3.3.
Support of address families other than IPv4 is available only
on kernels that support netlink.
.SH CONFORMING TO
Not in POSIX.1-2001.
This function first appeared in BSDi and is
present on the BSD systems, but with slightly different
semantics documented\(emreturning one entry per interface,
not per address.
This means
.I ifa_addr
and other fields can actually be NULL if the interface has no address,
and no link-level address is returned if the interface has an IP address
assigned.
Also, the way of choosing either
.I ifa_broadaddr
or
.I ifa_dstaddr
differs on various systems.
.\" , but the BSD-derived documentation generally
.\" appears to be confused and obsolete on this point.
.\" i.e., commonly it still says one of them will be NULL, even if
.\" the ifa_ifu union is already present
.SH NOTES
The addresses returned on Linux will usually be the IPv4 and IPv6 addresses
assigned to the interface, but also one
.B AF_PACKET
address per interface containing lower-level details about the interface
and its physical layer.
In this case, the
.I ifa_data
field may contain a pointer to a
.IR "struct rtnl_link_stats" ,
defined in
.IR <linux/if_link.h>
(in Linux 2.4 and earlier,
.IR "struct net_device_stats" ,
defined in
.IR <linux/netdevice.h> ),
which contains various interface attributes and statistics.
.SH EXAMPLE
The program below demonstrates the use of
.BR getifaddrs (),
.BR freeifaddrs (),
and
.BR getnameinfo (3).
Here is what we see when running this program on one system:
.in +4n
.nf

$ \fB./a.out\fP
lo       AF_PACKET (17)
                tx_packets =        524; rx_packets =        524
                tx_bytes   =      38788; rx_bytes   =      38788
wlp3s0   AF_PACKET (17)
                tx_packets =     108391; rx_packets =     130245
                tx_bytes   =   30420659; rx_bytes   =   94230014
em1      AF_PACKET (17)
                tx_packets =          0; rx_packets =          0
                tx_bytes   =          0; rx_bytes   =          0
lo       AF_INET (2)
                address: <127.0.0.1>
wlp3s0   AF_INET (2)
                address: <192.168.235.137>
lo       AF_INET6 (10)
                address: <::1>
wlp3s0   AF_INET6 (10)
                address: <fe80::7ee9:d3ff:fef5:1a91%wlp3s0>
.fi
.in
.SS Program source
\&
.nf
#define _GNU_SOURCE     /* To get defns of NI_MAXSERV and NI_MAXHOST */
#include <arpa/inet.h>
#include <sys/socket.h>
#include <netdb.h>
#include <ifaddrs.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <linux/if_link.h>

int main(int argc, char *argv[])
{
    struct ifaddrs *ifaddr, *ifa;
    int family, s, n;
    char host[NI_MAXHOST];

    if (getifaddrs(&ifaddr) == \-1) {
        perror("getifaddrs");
        exit(EXIT_FAILURE);
    }

    /* Walk through linked list, maintaining head pointer so we
       can free list later */

    for (ifa = ifaddr, n = 0; ifa != NULL; ifa = ifa\->ifa_next, n++) {
        if (ifa\->ifa_addr == NULL)
            continue;

        family = ifa\->ifa_addr\->sa_family;

        /* Display interface name and family (including symbolic
           form of the latter for the common families) */

        printf("%\-8s %s (%d)\\n",
               ifa\->ifa_name,
               (family == AF_PACKET) ? "AF_PACKET" :
               (family == AF_INET) ? "AF_INET" :
               (family == AF_INET6) ? "AF_INET6" : "???",
               family);

        /* For an AF_INET* interface address, display the address */

        if (family == AF_INET || family == AF_INET6) {
            s = getnameinfo(ifa\->ifa_addr,
                    (family == AF_INET) ? sizeof(struct sockaddr_in) :
                                          sizeof(struct sockaddr_in6),
                    host, NI_MAXHOST,
                    NULL, 0, NI_NUMERICHOST);
            if (s != 0) {
                printf("getnameinfo() failed: %s\\n", gai_strerror(s));
                exit(EXIT_FAILURE);
            }

            printf("\\t\\taddress: <%s>\\n", host);

        } else if (family == AF_PACKET && ifa\->ifa_data != NULL) {
            struct rtnl_link_stats *stats = ifa\->ifa_data;

            printf("\\t\\ttx_packets = %10u; rx_packets = %10u\\n"
                   "\\t\\ttx_bytes   = %10u; rx_bytes   = %10u\\n",
                   stats\->tx_packets, stats\->rx_packets,
                   stats\->tx_bytes, stats\->rx_bytes);
        }
    }

    freeifaddrs(ifaddr);
    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR bind (2),
.BR getsockname (2),
.BR socket (2),
.BR packet (7),
.BR ifconfig (8)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 2000 Sam Varshavchik <mrsam@courier-mta.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References: RFC 2553
.TH GETIPNODEBYNAME 3 2010-09-04 "Linux" "Linux Programmer's Manual"
.SH NAME
getipnodebyname, getipnodebyaddr, freehostent \- get network
hostnames and addresses
.SH SYNOPSIS
.nf
.B #include <sys/types.h>
.B #include <sys/socket.h>
.B #include <netdb.h>
.sp
.BI "struct hostent *getipnodebyname(const char *" name ", int " af ,
.BI "                                int " flags ", int *" error_num );
.sp
.BI "struct hostent *getipnodebyaddr(const void *" addr ", size_t " len ,
.BI "                                int " af ", int *" "error_num" );
.sp
.BI "void freehostent(struct hostent *" "ip" );
.fi
.SH DESCRIPTION
These functions are deprecated (and unavailable in glibc).
Use
.BR getaddrinfo (3)
and
.BR getnameinfo (3)
instead.
.LP
The
.BR getipnodebyname ()
and
.BR getipnodebyaddr ()
functions return the names and addresses of a network host.
These functions return a pointer to the
following structure:
.sp
.in +4n
.nf
struct hostent {
    char  *h_name;
    char **h_aliases;
    int    h_addrtype;
    int    h_length;
    char **h_addr_list;
};
.in
.fi
.PP
These functions replace the
.BR gethostbyname (3)
and
.BR gethostbyaddr (3)
functions, which could access only the IPv4 network address family.
The
.BR getipnodebyname ()
and
.BR getipnodebyaddr ()
functions can access multiple network address families.
.PP
Unlike the
.B gethostby
functions,
these functions return pointers to dynamically allocated memory.
The
.BR freehostent ()
function is used to release the dynamically allocated memory
after the caller no longer needs the
.I hostent
structure.
.SS getipnodebyname() arguments
The
.BR getipnodebyname ()
function
looks up network addresses for the host
specified by the
.I name
argument.
The
.I af
argument specifies one of the following values:
.TP
.B AF_INET
The
.I name
argument points to a dotted-quad IPv4 address or a name
of an IPv4 network host.
.TP
.B AF_INET6
The
.I name
argument points to a hexadecimal IPv6 address or a name
of an IPv6 network host.
.PP
The
.I flags
argument specifies additional options.
More than one option can be specified by bitwise OR-ing
them together.
.I flags
should be set to 0
if no options are desired.
.TP
.B AI_V4MAPPED
This flag is used with
.B AF_INET6
to request a query for IPv4 addresses instead of
IPv6 addresses; the IPv4 addresses will
be mapped to IPv6 addresses.
.TP
.B AI_ALL
This flag is used with
.B AI_V4MAPPED
to request a query for both IPv4 and IPv6 addresses.
Any IPv4 address found will be mapped to an IPv6 address.
.TP
.B AI_ADDRCONFIG
This flag is used with
.B AF_INET6
to
further request that queries for IPv6 addresses should not be made unless
the system has at least one IPv6 address assigned to a network interface,
and that queries for IPv4 addresses should not be made unless the
system has at least one IPv4 address assigned to a network interface.
This flag may be used by itself or with the
.B AI_V4MAPPED
flag.
.TP
.B AI_DEFAULT
This flag is equivalent to
.BR "(AI_ADDRCONFIG | AI_V4MAPPED)" .
.SS getipnodebyaddr() arguments
The
.BR getipnodebyaddr ()
function
looks up the name of the host whose
network address is
specified by the
.I addr
argument.
The
.I af
argument specifies one of the following values:
.TP
.B AF_INET
The
.I addr
argument points to a
.I struct in_addr
and
.I len
must be set to
.IR "sizeof(struct in_addr)" .
.TP
.B AF_INET6
The
.I addr
argument points to a
.I struct in6_addr
and
.I len
must be set to
.IR "sizeof(struct in6_addr)" .
.SH RETURN VALUE
NULL is returned if an error occurred, and
.I error_num
will contain an error code from the following list:
.TP
.B HOST_NOT_FOUND
The hostname or network address was not found.
.TP
.B NO_ADDRESS
The domain name server recognized the network address or name,
but no answer was returned.
This can happen if the network host has only IPv4 addresses and
a request has been made for IPv6 information only, or vice versa.
.TP
.B NO_RECOVERY
The domain name server returned a permanent failure response.
.TP
.B TRY_AGAIN
The domain name server returned a temporary failure response.
You might have better luck next time.
.PP
A successful query returns a pointer to a
.I hostent
structure that contains the following fields:
.TP
.I h_name
This is the official name of this network host.
.TP
.I h_aliases
This is an array of pointers to unofficial aliases for the same host.
The array is terminated by a null pointer.
.TP
.I h_addrtype
This is a copy of the
.I af
argument to
.BR getipnodebyname ()
or
.BR getipnodebyaddr ().
.I h_addrtype
will always be
.B AF_INET
if the
.I af
argument was
.BR AF_INET .
.I h_addrtype
will always be
.B AF_INET6
if the
.I af
argument was
.BR AF_INET6 .
.TP
.I h_length
This field will be set to
.I sizeof(struct in_addr)
if
.I h_addrtype
is
.BR AF_INET ,
and to
.I sizeof(struct in6_addr)
if
.I h_addrtype
is
.BR AF_INET6 .
.TP
.I h_addr_list
This is an array of one or more pointers to network address structures for the
network host.
The array is terminated by a null pointer.
.SH CONFORMING TO
RFC\ 2553.
.\" Not in POSIX.1-2001.
.SH NOTES
These functions were present in glibc 2.1.91-95, but were
removed again.
Several UNIX-like systems support them, but all
call them deprecated.
.SH SEE ALSO
.BR getaddrinfo (3),
.BR getnameinfo (3),
.BR inet_ntop (3),
.BR inet_pton (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2001 John Levon <moz@compsoc.man.ac.uk>
.\" Based in part on GNU libc documentation
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH GETLINE 3  2015-03-29 "GNU" "Linux Programmer's Manual"
.SH NAME
getline, getdelim \- delimited string input
.SH SYNOPSIS
.nf
.B #include <stdio.h>
.sp
.BI "ssize_t getline(char **" lineptr ", size_t *" n ", FILE *" stream );

.BI "ssize_t getdelim(char **" lineptr ", size_t *" n ", int " delim \
", FILE *" stream );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR getline (),
.BR getdelim ():
.PD 0
.RS 4
.TP 4
Since glibc 2.10:
_POSIX_C_SOURCE\ >=\ 200809L || _XOPEN_SOURCE\ >=\ 700
.TP
Before glibc 2.10:
_GNU_SOURCE
.RE
.PD
.ad
.SH DESCRIPTION
.BR getline ()
reads an entire line from \fIstream\fP,
storing the address of the buffer containing the text into
.IR "*lineptr" .
The buffer is null-terminated and includes the newline character, if
one was found.

If
.I "*lineptr"
is set to NULL and
.I *n
is set 0 before the call, then
.BR getline ()
will allocate a buffer for storing the line.
This buffer should be freed by the user program
even if
.BR getline ()
failed.

Alternatively, before calling
.BR getline (),
.I "*lineptr"
can contain a pointer to a
.BR malloc (3)\-allocated
buffer
.I "*n"
bytes in size.
If the buffer is not large enough to hold the line,
.BR getline ()
resizes it with
.BR realloc (3),
updating
.I "*lineptr"
and
.I "*n"
as necessary.

In either case, on a successful call,
.I "*lineptr"
and
.I "*n"
will be updated to reflect the buffer address and allocated size respectively.

.BR getdelim ()
works like
.BR getline (),
except that a line delimiter other than newline can be specified as the
.I delimiter
argument.
As with
.BR getline (),
a delimiter character is not added if one was not present
in the input before end of file was reached.
.SH RETURN VALUE
On success,
.BR getline ()
and
.BR getdelim ()
return the number of characters read, including the delimiter character,
but not including the terminating null byte (\(aq\\0\(aq).
This value can be used
to handle embedded null bytes in the line read.

Both functions return \-1 on failure to read a line (including end-of-file
condition).
In the event of an error,
.I errno
is set to indicate the cause.
.SH ERRORS
.TP
.B EINVAL
Bad arguments
.RI ( n
or
.I lineptr
is NULL, or
.I stream
is not valid).
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw21 lb lb
l l l.
Interface	Attribute	Value
T{
.BR getline (),
.BR getdelim ()
T}	Thread safety	MT-Safe
.TE

.SH CONFORMING TO
Both
.BR getline ()
and
.BR getdelim ()
were originally GNU extensions.
They were standardized in POSIX.1-2008.
.SH EXAMPLE
.nf
#define _GNU_SOURCE
#include <stdio.h>
#include <stdlib.h>

int
main(void)
{
    FILE *stream;
    char *line = NULL;
    size_t len = 0;
    ssize_t read;

    stream = fopen("/etc/motd", "r");
    if (stream == NULL)
        exit(EXIT_FAILURE);

    while ((read = getline(&line, &len, stream)) != \-1) {
        printf("Retrieved line of length %zu :\en", read);
        printf("%s", line);
    }

    free(line);
    fclose(stream);
    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR read (2),
.BR fgets (3),
.BR fopen (3),
.BR fread (3),
.BR scanf (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1989, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" %%%LICENSE_START(BSD_3_CLAUSE_UCB)
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\" %%%LICENSE_END
.\"
.\"     @(#)getloadavg.3	8.1 (Berkeley) 6/4/93
.\"
.\" 2007-12-08, mtk, Converted from mdoc to man macros
.\"
.TH GETLOADAVG 3 2015-03-02 "Linux" "Linux Programmer's Manual"
.SH NAME
getloadavg \- get system load averages
.SH SYNOPSIS
.nf
.BR "#define _BSD_SOURCE" "         /* See feature_test_macros(7) */"
.B #include <stdlib.h>
.sp
.BI "int getloadavg(double " loadavg[] ", int " nelem );
.fi
.SH DESCRIPTION
The
.BR getloadavg ()
function returns the number of processes in the system run queue
averaged over various periods of time.
Up to
.I nelem
samples are retrieved and assigned to successive elements of
.IR loadavg [].
The system imposes a maximum of 3 samples, representing averages
over the last 1, 5, and 15 minutes, respectively.
.SH RETURN VALUE
If the load average was unobtainable, \-1 is returned; otherwise,
the number of samples actually retrieved is returned.
.\" .SH HISTORY
.\" The
.\" BR getloadavg ()
.\" function appeared in
.\" 4.3BSD Reno .
.SH VERSIONS
This function is available in glibc since version 2.2.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR getloadavg ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
Not in POSIX.1-2001.
Present on the BSDs and Solaris.
.\" mdoc seems to have a bug - there must be no newline here
.SH SEE ALSO
.BR uptime (1),
.BR proc (5)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1995  James R. Van Zandt <jrv@vanzandt.mv.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Changed Tue Sep 19 01:49:29 1995, aeb: moved from man2 to man3
.\"  added ref to /etc/utmp, added BUGS section, etc.
.\" modified 2003 Walter Harms, aeb - added getlogin_r, note on stdin use
.TH GETLOGIN 3 2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
getlogin, getlogin_r, cuserid \- get username
.SH SYNOPSIS
.B #include <unistd.h>
.sp
.B "char *getlogin(void);"
.br
.BI "int getlogin_r(char *" buf ", size_t " bufsize );
.sp
.B #include <stdio.h>
.sp
.BI "char *cuserid(char *" string );
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR getlogin_r ():
_REENTRANT || _POSIX_C_SOURCE\ >=\ 199506L
.br
.BR cuserid ():
_XOPEN_SOURCE
.SH DESCRIPTION
.BR getlogin ()
returns a pointer to a string containing the name of
the user logged in on the controlling terminal of the process, or a
null pointer if this information cannot be determined.
The string is
statically allocated and might be overwritten on subsequent calls to
this function or to
.BR cuserid ().
.PP
.BR getlogin_r ()
returns this same username in the array
.I buf
of size
.IR bufsize .
.PP
.BR cuserid ()
returns a pointer to a string containing a username
associated with the effective user ID of the process.
If \fIstring\fP
is not a null pointer, it should be an array that can hold at least
\fBL_cuserid\fP characters; the string is returned in this array.
Otherwise, a pointer to a string in a static area is returned.
This
string is statically allocated and might be overwritten on subsequent
calls to this function or to
.BR getlogin ().
.PP
The macro \fBL_cuserid\fP is an integer constant that indicates how
long an array you might need to store a username.
\fBL_cuserid\fP is declared in \fI<stdio.h>\fP.
.PP
These functions let your program identify positively the user who is
running
.RB ( cuserid ())
or the user who logged in this session
.RB ( getlogin ()).
(These can differ when set-user-ID programs are involved.)
.PP
For most purposes, it is more useful to use the environment variable
\fBLOGNAME\fP to find out who the user is.
This is more flexible
precisely because the user can set \fBLOGNAME\fP arbitrarily.
.SH RETURN VALUE
.BR getlogin ()
returns a pointer to the username when successful,
and NULL on failure, with
.I errno
set to indicate the cause of the error.
.BR getlogin_r ()
returns 0 when successful, and nonzero on failure.
.SH ERRORS
POSIX specifies
.TP
.B EMFILE
The calling process already has the maximum allowed number of open files.
.TP
.B ENFILE
The system already has the maximum allowed number of open files.
.TP
.B ENXIO
The calling process has no controlling terminal.
.TP
.B ERANGE
(getlogin_r)
The length of the username, including the terminating null byte (\(aq\\0\(aq),
is larger than
.IR bufsize .
.LP
Linux/glibc also has
.TP
.B ENOENT
There was no corresponding entry in the utmp-file.
.TP
.B ENOMEM
Insufficient memory to allocate passwd structure.
.TP
.B ENOTTY
Standard input didn't refer to a terminal.
(See BUGS.)
.SH FILES
.TP
\fI/etc/passwd\fP
password database file
.TP
\fI/var/run/utmp\fP
(traditionally \fI/etc/utmp\fP;
some libc versions used \fI/var/adm/utmp\fP)
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR getlogin ()
T}	Thread safety	T{
MT-Unsafe race:getlogin race:utent
.br
sig:ALRM timer locale
T}
T{
.BR getlogin_r ()
T}	Thread safety	T{
MT-Unsafe race:utent sig:ALRM timer
.br
locale
T}
T{
.BR cuserid ()
T}	Thread safety	MT-Unsafe race:cuserid/!string locale
.TE

In the above table,
.I utent
in
.I race:utent
signifies that if any of the functions
.BR setutent (3),
.BR getutent (3),
or
.BR endutent (3)
are used in parallel in different threads of a program,
then data races could occur.
.BR getlogin ()
and
.BR getlogin_r ()
call those functions,
so we use race:utent to remind users.
.SH CONFORMING TO
.BR getlogin ()
and
.BR getlogin_r ()
specified in POSIX.1-2001.

System V has a
.BR cuserid ()
function which uses the real
user ID rather than the effective user ID.
The
.BR cuserid ()
function
was included in the 1988 version of POSIX,
but removed from the 1990 version.
It was present in SUSv2, but removed in POSIX.1-2001.
.LP
OpenBSD has
.BR getlogin ()
and
.BR setlogin (),
and a username
associated with a session, even if it has no controlling terminal.
.SH BUGS
Unfortunately, it is often rather easy to fool
.BR getlogin ().
Sometimes it does not work at all, because some program messed up
the utmp file.
Often, it gives only the first 8 characters of
the login name.
The user currently logged in on the controlling terminal
of our program need not be the user who started it.
Avoid
.BR getlogin ()
for security-related purposes.
.LP
Note that glibc does not follow the POSIX specification and uses
.I stdin
instead of
.IR /dev/tty .
A bug.
(Other recent systems, like SunOS 5.8 and HP-UX 11.11 and FreeBSD 4.8
all return the login name also when
.I stdin
is redirected.)
.LP
Nobody knows precisely what
.BR cuserid ()
does; avoid it in portable programs.
Or avoid it altogether: use
.I getpwuid(geteuid())
instead, if that is
what you meant.
.B Do not use
.BR cuserid ().
.SH SEE ALSO
.BR geteuid (2),
.BR getuid (2),
.BR utmp (5)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified Sat Jul 24 21:46:57 1993 by Rik Faith (faith@cs.unc.edu)
.\" Modified 961109, 031115, aeb
.\"
.TH GETMNTENT 3  2015-05-07 "" "Linux Programmer's Manual"
.SH NAME
getmntent, setmntent, addmntent, endmntent, hasmntopt,
getmntent_r \- get filesystem descriptor file entry
.SH SYNOPSIS
.nf
.B #include <stdio.h>
.B #include <mntent.h>
.sp
.BI "FILE *setmntent(const char *" filename ", const char *" type );
.sp
.BI "struct mntent *getmntent(FILE *" stream );
.sp
.BI "int addmntent(FILE *" stream ", const struct mntent *" mnt );
.sp
.BI "int endmntent(FILE *" streamp );
.sp
.BI "char *hasmntopt(const struct mntent *" mnt ", const char *" opt );
.sp
/* GNU extension */
.B #include <mntent.h>
.sp
.BI "struct mntent *getmntent_r(FILE *" streamp ", struct mntent *" mntbuf ,
.BI "                           char *" buf ", int " buflen );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR getmntent_r ():
_BSD_SOURCE || _SVID_SOURCE
.SH DESCRIPTION
These routines are used to access the filesystem description file
.I /etc/fstab
and the mounted filesystem description file
.IR /etc/mtab .
.PP
The
.BR setmntent ()
function opens the filesystem description file
.I filename
and returns a file pointer which can be used by
.BR getmntent ().
The argument
.I type
is the type of access
required and can take the same values as the
.I mode
argument of
.BR fopen (3).
.PP
The
.BR getmntent ()
function reads the next line of the filesystem
description file from
.I stream
and returns a pointer to a structure
containing the broken out fields from a line in the file.
The pointer
points to a static area of memory which is overwritten by subsequent
calls to
.BR getmntent ().
.PP
The
.BR addmntent ()
function adds the
.I mntent
structure
.I mnt
to
the end of the open
.IR stream .
.PP
The
.BR endmntent ()
function closes the
.IR stream
associated with the filesystem description file.
.PP
The
.BR hasmntopt ()
function scans the
.I mnt_opts
field (see below)
of the
.I mntent
structure
.I mnt
for a substring that matches
.IR opt .
See
.I <mntent.h>
and
.BR mount (8)
for valid mount options.
.PP
The reentrant
.BR getmntent_r ()
function is similar to
.BR getmntent (),
but stores the
.IR "struct mount"
in the provided
.I *mntbuf
and stores the strings pointed to by the entries in that struct
in the provided array
.I buf
of size
.IR buflen .
.PP
The
.I mntent
structure is defined in
.I <mntent.h>
as follows:
.sp
.in +4n
.nf
struct mntent {
    char *mnt_fsname;   /* name of mounted filesystem */
    char *mnt_dir;      /* filesystem path prefix */
    char *mnt_type;     /* mount type (see mntent.h) */
    char *mnt_opts;     /* mount options (see mntent.h) */
    int   mnt_freq;     /* dump frequency in days */
    int   mnt_passno;   /* pass number on parallel fsck */
};
.fi
.in

Since fields in the mtab and fstab files are separated by whitespace,
octal escapes are used to represent the four characters space (\e040),
tab (\e011), newline (\e012) and backslash (\e134) in those files
when they occur in one of the four strings in a
.I mntent
structure.
The routines
.BR addmntent ()
and
.BR getmntent ()
will convert
from string representation to escaped representation and back.
.SH RETURN VALUE
The
.BR getmntent ()
and
.BR getmntent_r ()
functions return
a pointer to the
.I mntent
structure or NULL on failure.
.PP
The
.BR addmntent ()
function returns 0 on success and 1 on failure.
.PP
The
.BR endmntent ()
function always returns 1.
.PP
The
.BR hasmntopt ()
function returns the address of the substring if
a match is found and NULL otherwise.
.SH FILES
.nf
/etc/fstab          filesystem description file
/etc/mtab           mounted filesystem description file
.fi
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw13 lb lbw31
l l l.
Interface	Attribute	Value
T{
.BR setmntent (),
.BR endmntent (),
.BR hasmntopt ()
T}	Thread safety	MT-Safe
T{
.BR getmntent ()
T}	Thread safety	MT-Unsafe race:mntentbuf locale
T{
.BR addmntent ()
T}	Thread safety	MT-Safe race:stream locale
T{
.BR getmntent_r ()
T}	Thread safety	MT-Safe locale
.TE

.SH CONFORMING TO
The nonreentrant functions are from SunOS 4.1.3.
A routine
.BR getmntent_r ()
was introduced in HP-UX 10, but it returns an int.
The prototype shown above is glibc-only.
.SH NOTES
System V also has a
.BR getmntent ()
function but the calling sequence
differs, and the returned structure is different.
Under System V
.I /etc/mnttab
is used.
4.4BSD and Digital UNIX have a routine
.BR getmntinfo (),
a wrapper around the system call
.BR getfsstat ().
.SH SEE ALSO
.BR fopen (3),
.BR fstab (5),
.BR mount (8)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" %%%LICENSE_START(PUBLIC_DOMAIN)
.\" This page is in the public domain.
.\" %%%LICENSE_END
.\"
.\" Almost all details are from RFC 2553.
.\"
.\" 2004-12-14, mtk, Added EAI_OVERFLOW error
.\" 2004-12-14 Fixed description of error return
.\"
.TH GETNAMEINFO 3 2014-05-28 "GNU" "Linux Programmer's Manual"
.SH NAME
getnameinfo \- address-to-name translation in protocol-independent manner
.SH SYNOPSIS
.nf
.B #include <sys/socket.h>
.B #include <netdb.h>
.sp
.BI "int getnameinfo(const struct sockaddr *" "sa" ", socklen_t " "salen" ,
.BI "                char *" "host" ", socklen_t " "hostlen" ,
.BI "                char *" "serv" ", socklen_t " "servlen" ", int " "flags" );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.ad l
.in
.sp
.BR getnameinfo ():
_POSIX_C_SOURCE\ >=\ 1 || _XOPEN_SOURCE || _POSIX_SOURCE
.ad b
.SH DESCRIPTION
The
.BR getnameinfo ()
function is the inverse of
.BR getaddrinfo (3):
it converts a socket address to a corresponding host and service,
in a protocol-independent manner.
It combines the functionality of
.BR gethostbyaddr (3)
and
.BR getservbyport (3),
but unlike those functions,
.BR getnameinfo ()
is reentrant and allows programs to eliminate
IPv4-versus-IPv6 dependencies.

The
.I sa
argument is a pointer to a generic socket address structure
(of type
.I sockaddr_in
or
.IR sockaddr_in6 )
of size
.I salen
that holds the input IP address and port number.
The arguments
.I host
and
.I serv
are pointers to caller-allocated buffers (of size
.I hostlen
and
.I servlen
respectively) into which
.BR getnameinfo ()
places null-terminated strings containing the host and
service names respectively.

The caller can specify that no hostname (or no service name)
is required by providing a NULL
.I host
(or
.IR serv )
argument or a zero
.I hostlen
(or
.IR servlen )
argument.
However, at least one of hostname or service name
must be requested.

The
.I flags
argument modifies the behavior of
.BR getnameinfo ()
as follows:
.TP
.B NI_NAMEREQD
If set, then an error is returned if the hostname cannot be determined.
.TP
.B NI_DGRAM
If set, then the service is datagram (UDP) based rather than
stream (TCP) based.
This is required for the few ports (512-514)
that have different services for UDP and TCP.
.TP
.B NI_NOFQDN
If set, return only the hostname part of the fully qualified domain name
for local hosts.
.TP
.B NI_NUMERICHOST
If set, then the numeric form of the hostname is returned.
.\" For example, by calling
.\" .BR inet_ntop ()
.\" instead of
.\" .BR gethostbyaddr ().
(When not set, this will still happen in case the node's name
cannot be determined.)
.\" POSIX.1-2003 has NI_NUMERICSCOPE, but glibc doesn't have it.
.TP
.B NI_NUMERICSERV
If set, then the numeric form of the service address is returned.
(When not set, this will still happen in case the service's name
cannot be determined.)
.SS Extensions to getnameinfo() for Internationalized Domain Names
.PP
Starting with glibc 2.3.4,
.BR getnameinfo ()
has been extended to selectively allow
hostnames to be transparently converted to and from the
Internationalized Domain Name (IDN) format (see RFC 3490,
.IR "Internationalizing Domain Names in Applications (IDNA)" ).
Three new flags are defined:
.TP
.B NI_IDN
If this flag is used, then the name found in the lookup process is
converted from IDN format to the locale's encoding if necessary.
ASCII-only names are not affected by the conversion, which
makes this flag usable in existing programs and environments.
.TP
.BR NI_IDN_ALLOW_UNASSIGNED ", " NI_IDN_USE_STD3_ASCII_RULES
Setting these flags will enable the
IDNA_ALLOW_UNASSIGNED (allow unassigned Unicode code points) and
IDNA_USE_STD3_ASCII_RULES (check output to make sure it is a STD3
conforming hostname)
flags respectively to be used in the IDNA handling.
.SH RETURN VALUE
.\" FIXME glibc defines the following additional errors, some which
.\" can probably be returned by getnameinfo(); they need to
.\" be documented.
.\" #ifdef __USE_GNU
.\" #define EAI_INPROGRESS  -100  /* Processing request in progress.  */
.\" #define EAI_CANCELED    -101  /* Request canceled.  */
.\" #define EAI_NOTCANCELED -102  /* Request not canceled.  */
.\" #define EAI_ALLDONE     -103  /* All requests done.  */
.\" #define EAI_INTR        -104  /* Interrupted by a signal.  */
.\" #define EAI_IDN_ENCODE  -105  /* IDN encoding failed.  */
.\" #endif
On success, 0 is returned, and node and service names, if requested,
are filled with null-terminated strings, possibly truncated to fit
the specified buffer lengths.
On error, one of the following nonzero error codes is returned:
.TP
.B EAI_AGAIN
The name could not be resolved at this time.
Try again later.
.TP
.B EAI_BADFLAGS
The
.I flags
argument has an invalid value.
.TP
.B EAI_FAIL
A nonrecoverable error occurred.
.TP
.B EAI_FAMILY
The address family was not recognized,
or the address length was invalid for the specified family.
.TP
.B EAI_MEMORY
Out of memory.
.TP
.B EAI_NONAME
The name does not resolve for the supplied arguments.
.B NI_NAMEREQD
is set and the host's name cannot be located,
or neither hostname nor service name were requested.
.TP
.B EAI_OVERFLOW
The buffer pointed to by
.I host
or
.I serv
was too small.
.TP
.B EAI_SYSTEM
A system error occurred.
The error code can be found in
.IR errno .
.PP
The
.BR gai_strerror (3)
function translates these error codes to a human readable string,
suitable for error reporting.
.SH FILES
/etc/hosts
.br
/etc/nsswitch.conf
.br
/etc/resolv.conf
.SH VERSIONS
.BR getnameinfo ()
is provided in glibc since version 2.1.
.SH CONFORMING TO
RFC\ 2553, POSIX.1-2001.
.SH NOTES
In order to assist the programmer in choosing reasonable sizes
for the supplied buffers,
.I <netdb.h>
defines the constants
.in +4n
.nf

#define NI_MAXHOST      1025
#define NI_MAXSERV      32
.fi
.in

Since glibc 2.8,
these definitions are exposed only if one of the feature test macros
.BR _BSD_SOURCE ,
.BR _SVID_SOURCE ,
or
.BR _GNU_SOURCE
is defined.
.PP
The former is the constant
.B MAXDNAME
in recent versions of BIND's
.I <arpa/nameser.h>
header file.
The latter is a guess based on the services listed
in the current Assigned Numbers RFC.

Before glibc version 2.2, the
.I hostlen
and
.I servlen
arguments were typed as
.IR size_t .
.SH EXAMPLE
The following code tries to get the numeric hostname and service name,
for a given socket address.
Note that there is no hardcoded reference to
a particular address family.

.in +4n
.nf
struct sockaddr *sa;    /* input */
socklen_t len;         /* input */
char hbuf[NI_MAXHOST], sbuf[NI_MAXSERV];

if (getnameinfo(sa, len, hbuf, sizeof(hbuf), sbuf,
            sizeof(sbuf), NI_NUMERICHOST | NI_NUMERICSERV) == 0)
    printf("host=%s, serv=%s\en", hbuf, sbuf);
.fi
.in

The following version checks if the socket address has a
reverse address mapping.

.in +4n
.nf
struct sockaddr *sa;    /* input */
socklen_t len;         /* input */
char hbuf[NI_MAXHOST];

if (getnameinfo(sa, len, hbuf, sizeof(hbuf),
            NULL, 0, NI_NAMEREQD))
    printf("could not resolve hostname");
else
    printf("host=%s\en", hbuf);
.fi
.in
.PP
An example program using
.BR getnameinfo ()
can be found in
.BR getaddrinfo (3).
.SH SEE ALSO
.BR accept (2),
.BR getpeername (2),
.BR getsockname (2),
.BR recvfrom (2),
.BR socket (2),
.BR getaddrinfo (3),
.BR gethostbyaddr (3),
.BR getservbyname (3),
.BR getservbyport (3),
.BR inet_ntop (3),
.BR hosts (5),
.BR services (5),
.BR hostname (7),
.BR named (8)

R. Gilligan, S. Thomson, J. Bound and W. Stevens,
.IR "Basic Socket Interface Extensions for IPv6" ,
RFC\ 2553, March 1999.

Tatsuya Jinmei and Atsushi Onoe,
.IR "An Extension of Format for IPv6 Scoped Addresses" ,
internet draft, work in progress
.UR ftp://ftp.ietf.org\:/internet\-drafts\:/draft\-ietf\-ipngwg\-scopedaddr\-format\-02.txt
.UE .

Craig Metz,
.IR "Protocol Independence Using the Sockets API" ,
Proceedings of the freenix track:
2000 USENIX annual technical conference, June 2000
.ad l
.UR http://www.usenix.org\:/publications\:/library\:/proceedings\:/usenix2000\:/freenix\:/metzprotocol.html
.UE .
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified Sat Jul 24 21:48:06 1993 by Rik Faith (faith@cs.unc.edu)
.TH GETNETENT 3  2015-04-19 "GNU" "Linux Programmer's Manual"
.SH NAME
getnetent, getnetbyname, getnetbyaddr, setnetent, endnetent \-
get network entry
.SH SYNOPSIS
.nf
.B #include <netdb.h>
.sp
.B struct netent *getnetent(void);
.sp
.BI "struct netent *getnetbyname(const char *" name );
.sp
.BI "struct netent *getnetbyaddr(uint32_t " net ", int " type );
.sp
.BI "void setnetent(int " stayopen );
.sp
.B void endnetent(void);
.fi
.SH DESCRIPTION
The
.BR getnetent ()
function reads the next entry from the networks database
and returns a
.I netent
structure containing
the broken-out fields from the entry.
A connection is opened to the database if necessary.
.PP
The
.BR getnetbyname ()
function returns a
.I netent
structure
for the entry from the database
that matches the network
.IR name .
.PP
The
.BR getnetbyaddr ()
function returns a
.I netent
structure
for the entry from the database
that matches the network number
.I net
of type
.IR type .
The
.I net
argument must be in host byte order.
.PP
The
.BR setnetent ()
function opens a connection to the database,
and sets the next entry to the first entry.
If
.I stayopen
is nonzero,
then the connection to the database
will not be closed between calls to one of the
.BR getnet* ()
functions.
.PP
The
.BR endnetent ()
function closes the connection to the database.
.PP
The
.I netent
structure is defined in
.I <netdb.h>
as follows:
.sp
.in +4n
.nf
struct netent {
    char      *n_name;     /* official network name */
    char     **n_aliases;  /* alias list */
    int        n_addrtype; /* net address type */
    uint32_t   n_net;      /* network number */
}
.fi
.in
.PP
The members of the
.I netent
structure are:
.TP
.I n_name
The official name of the network.
.TP
.I n_aliases
A NULL-terminated list of alternative names for the network.
.TP
.I n_addrtype
The type of the network number; always
.BR AF_INET .
.TP
.I n_net
The network number in host byte order.
.SH RETURN VALUE
The
.BR getnetent (),
.BR getnetbyname ()
and
.BR getnetbyaddr ()
functions return a pointer to a
statically allocated
.I netent
structure, or a null pointer if an
error occurs or the end of the file is reached.
.SH FILES
.TP
.I /etc/networks
networks database file
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw14 lb lbw25
l l l.
Interface	Attribute	Value
T{
.BR getnetent ()
T}	Thread safety	T{
MT-Unsafe race:netent
.br
race:netentbuf env locale
T}
T{
.BR getnetbyname ()
T}	Thread safety	T{
MT-Unsafe race:netbyname
.br
env locale
T}
T{
.BR getnetbyaddr ()
T}	Thread safety	T{
MT-Unsafe race:netbyaddr
.br
locale
T}
T{
.BR setnetent (),
.br
.BR endnetent ()
T}	Thread safety	T{
MT-Unsafe race:netent env
.br
locale
T}
.TE

In the above table,
.I netent
in
.I race:netent
signifies that if any of the functions
.BR setnetent (3),
.BR getnetent (3),
or
.BR endnetent (3)
are used in parallel in different threads of a program,
then data races could occur.
.SH CONFORMING TO
4.3BSD, POSIX.1-2001.
.SH NOTES
In glibc versions before 2.2, the
.I net
argument of
.BR getnetbyaddr ()
was of type
.IR long .
.SH SEE ALSO
.BR getnetent_r (3),
.BR getprotoent (3),
.BR getservent (3)
.\" .BR networks (5)
.br
RFC\ 1101
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 2008, Linux Foundation, written by Michael Kerrisk
.\"	<mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH GETNETENT_R 3  2010-09-10 "GNU" "Linux Programmer's Manual"
.SH NAME
getnetent_r, getnetbyname_r, getnetbyaddr_r \- get
network entry (reentrant)
.SH SYNOPSIS
.nf
.B #include <netdb.h>
.sp
.BI "int getnetent_r(struct netent *" result_buf ", char *" buf ,
.BI "                size_t " buflen ", struct netent **" result ,
.BI "                int *" h_errnop );
.sp
.BI "int getnetbyname_r(const char *" name ,
.BI "                struct netent *" result_buf ", char *" buf ,
.BI "                size_t " buflen ", struct netent **" result ,
.BI "                int *" h_errnop );
.sp
.BI "int getnetbyaddr_r(uint32_t " net ", int " type ,
.BI "                struct netent *" result_buf ", char *" buf ,
.BI "                size_t " buflen ", struct netent **" result ,
.BI "                int *" h_errnop );
.sp
.fi
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.ad l
.in
.sp
.BR getnetent_r (),
.BR getnetbyname_r (),
.BR getnetbyaddr_r ():
.RS 4
_BSD_SOURCE || _SVID_SOURCE
.RE
.ad b
.SH DESCRIPTION
The
.BR getnetent_r (),
.BR getnetbyname_r (),
and
.BR getnetbyaddr_r ()
functions are the reentrant equivalents of, respectively,
.BR getnetent (3),
.BR getnetbyname (3),
and
.BR getnetbynumber (3).
They differ in the way that the
.I netent
structure is returned,
and in the function calling signature and return value.
This manual page describes just the differences from
the nonreentrant functions.

Instead of returning a pointer to a statically allocated
.I netent
structure as the function result,
these functions copy the structure into the location pointed to by
.IR result_buf .

The
.I buf
array is used to store the string fields pointed to by the returned
.I netent
structure.
(The nonreentrant functions allocate these strings in static storage.)
The size of this array is specified in
.IR buflen .
If
.I buf
is too small, the call fails with the error
.BR ERANGE ,
and the caller must try again with a larger buffer.
(A buffer of length 1024 bytes should be sufficient for most applications.)
.\" I can find no information on the required/recommended buffer size;
.\" the nonreentrant functions use a 1024 byte buffer -- mtk.

If the function call successfully obtains a network record, then
.I *result
is set pointing to
.IR result_buf ;
otherwise,
.I *result
is set to NULL.

The buffer pointed to by
.I h_errnop
is used to return the value that would be stored in the global variable
.I h_errno
by the nonreentrant versions of these functions.
.\" getnetent.3 doesn't document any use of h_errno, but nevertheless
.\" the nonreentrant functions no seem to set h_errno.
.SH RETURN VALUE
On success, these functions return 0.
On error, they return one of the positive error numbers listed in ERRORS.

On error, record not found
.RB ( getnetbyname_r (),
.BR getnetbyaddr_r ()),
or end of input
.RB ( getnetent_r ())
.I result
is set to NULL.
.SH ERRORS
.TP
.B ENOENT
.RB ( getnetent_r ())
No more records in database.
.TP
.B ERANGE
.I buf
is too small.
Try again with a larger buffer
(and increased
.IR buflen ).
.SH CONFORMING TO
These functions are GNU extensions.
Functions with similar names exist on some other systems,
though typically with different calling signatures.
.SH SEE ALSO
.BR getnetent (3),
.BR networks (5)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2012, Petr Benas
.\" and Copyright (c) 2012, Michael Kerrisk <mtk.man-pages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of
.\" this manual under the conditions for verbatim copying, provided that
.\" the entire resulting derived work is distributed under the terms of
.\" a permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume
.\" no responsibility for errors or omissions, or for damages resulting
.\" from the use of the information contained herein.  The author(s) may
.\" not have taken the same level of care in the production of this
.\" manual, which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH GET_NPROCS 3   2015-04-19 "GNU" "Linux Programmer's Manual"
.SH NAME
get_nprocs, get_nprocs_conf \- get number of processors
.SH SYNOPSIS
.B #include <sys/sysinfo.h>
.sp
.BI "int get_nprocs(void);"
.br
.BI "int get_nprocs_conf(void);"
.SH DESCRIPTION
The function
.BR get_nprocs_conf ()
returns the number of processors configured by the operating system.

The function
.BR get_nprocs ()
returns the number of processors currently available in the system.
This may be less than the number returned by
.BR get_nprocs_conf ()
because processors may be offline (e.g., on hotpluggable systems).
.SH RETURN VALUE
As given in DESCRIPTION.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR get_nprocs (),
.br
.BR get_nprocs_conf ()
T}	Thread safety	MT-Safe
.TE

.SH CONFORMING TO
These functions are GNU extensions.
.SH NOTES
The current
.\" glibc 2.15
implementation of these functions is rather expensive,
since they open and parse files in the
.I /sys
filesystem each time they are called.

The following
.BR sysconf (3)
calls make use of the functions documented on this page
to return the same information.
.nf

    np = sysconf(_SC_NPROCESSORS_CONF);     /* processors configured */
    np = sysconf(_SC_NPROCESSORS_ONLN);     /* processors available */
.fi
.SH EXAMPLE
The following example shows how
.BR get_nprocs ()
and
.BR get_nprocs_conf ()
can be used.

.nf
#include <stdlib.h>
#include <stdio.h>
#include <sys/sysinfo.h>

int
main(int argc, char *argv[])
{
    printf("This system has %d processors configured and "
            "%d processors available.\\n",
            get_nprocs_conf(), get_nprocs());
    exit(EXIT_SUCCESS);
}
.fi

.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1993 by Thomas Koenig (ig25@rz.uni-karlsruhe.de)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified Sat Jul 24 19:27:50 1993 by Rik Faith (faith@cs.unc.edu)
.\" Modified Mon Aug 30 22:02:34 1995 by Jim Van Zandt <jrv@vanzandt.mv.com>
.\"  longindex is a pointer, has_arg can take 3 values, using consistent
.\"  names for optstring and longindex, "\n" in formats fixed.  Documenting
.\"  opterr and getopt_long_only.  Clarified explanations (borrowing heavily
.\"  from the source code).
.\" Modified 8 May 1998 by Joseph S. Myers (jsm28@cam.ac.uk)
.\" Modified 990715, aeb: changed `EOF' into `-1' since that is what POSIX
.\"  says; moreover, EOF is not defined in <unistd.h>.
.\" Modified 2002-02-16, joey: added information about nonexistent
.\"  option character and colon as first option character
.\" Modified 2004-07-28, Michael Kerrisk <mtk.manpages@gmail.com>
.\"	Added text to explain how to order both '[-+]' and ':' at
.\"		the start of optstring
.\" Modified 2006-12-15, mtk, Added getopt() example program.
.\"
.TH GETOPT 3  2015-05-07 "GNU" "Linux Programmer's Manual"
.SH NAME
getopt, getopt_long, getopt_long_only,
optarg, optind, opterr, optopt \- Parse command-line options
.SH SYNOPSIS
.nf
.B #include <unistd.h>
.sp
.BI "int getopt(int " argc ", char * const " argv[] ,
.BI "           const char *" optstring );
.sp
.BI "extern char *" optarg ;
.BI "extern int " optind ", " opterr ", " optopt ;
.sp
.B #include <getopt.h>
.sp
.BI "int getopt_long(int " argc ", char * const " argv[] ,
.BI "           const char *" optstring ,
.BI "           const struct option *" longopts ", int *" longindex );
.sp
.BI "int getopt_long_only(int " argc ", char * const " argv[] ,
.BI "           const char *" optstring ,
.BI "           const struct option *" longopts ", int *" longindex );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.ad l
.in
.sp
.BR getopt ():
_POSIX_C_SOURCE\ >=\ 2 || _XOPEN_SOURCE
.br
.BR getopt_long (),
.BR getopt_long_only ():
_GNU_SOURCE
.ad b
.SH DESCRIPTION
The
.BR getopt ()
function parses the command-line arguments.
Its arguments
.I argc
and
.I argv
are the argument count and array as passed to the
.IR main ()
function on program invocation.
An element of \fIargv\fP that starts with \(aq\-\(aq
(and is not exactly "\-" or "\-\-")
is an option element.
The characters of this element
(aside from the initial \(aq\-\(aq) are option characters.
If
.BR getopt ()
is called repeatedly, it returns successively each of the option characters
from each of the option elements.
.PP
The variable
.I optind
is the index of the next element to be processed in
.IR argv .
The system initializes this value to 1.
The caller can reset it to 1 to restart scanning of the same
.IR argv ,
or when scanning a new argument vector.
.PP
If
.BR getopt ()
finds another option character, it returns that
character, updating the external variable \fIoptind\fP and a static
variable \fInextchar\fP so that the next call to
.BR getopt ()
can
resume the scan with the following option character or
\fIargv\fP-element.
.PP
If there are no more option characters,
.BR getopt ()
returns \-1.
Then \fIoptind\fP is the index in \fIargv\fP of the first
\fIargv\fP-element that is not an option.
.PP
.I optstring
is a string containing the legitimate option characters.
If such a
character is followed by a colon, the option requires an argument, so
.BR getopt ()
places a pointer to the following text in the same
\fIargv\fP-element, or the text of the following \fIargv\fP-element, in
.IR optarg .
Two colons mean an option takes
an optional arg; if there is text in the current \fIargv\fP-element
(i.e., in the same word as the option name itself, for example, "\-oarg"),
then it is returned in \fIoptarg\fP, otherwise \fIoptarg\fP is set to zero.
This is a GNU extension.
If
.I optstring
contains
.B W
followed by a semicolon, then
.B \-W foo
is treated as the long option
.BR \-\-foo .
(The
.B \-W
option is reserved by POSIX.2 for implementation extensions.)
This behavior is a GNU extension, not available with libraries before
glibc 2.
.PP
By default,
.BR getopt ()
permutes the contents of \fIargv\fP as it
scans, so that eventually all the nonoptions are at the end.
Two other modes are also implemented.
If the first character of
\fIoptstring\fP is \(aq+\(aq or the environment variable
.B POSIXLY_CORRECT
is set, then option processing stops as soon as a nonoption argument is
encountered.
If the first character of \fIoptstring\fP is \(aq\-\(aq, then
each nonoption \fIargv\fP-element is handled as if it were the argument of
an option with character code 1.  (This is used by programs that were
written to expect options and other \fIargv\fP-elements in any order
and that care about the ordering of the two.)
The special argument "\-\-" forces an end of option-scanning regardless
of the scanning mode.
.PP
If
.BR getopt ()
does not recognize an option character, it prints an
error message to \fIstderr\fP, stores the character in \fIoptopt\fP, and
returns \(aq?\(aq.
The calling program may prevent the error message by
setting \fIopterr\fP to 0.
.PP
If
.BR getopt ()
finds an option character in \fIargv\fP that was not
included in \fIoptstring\fP, or if it detects a missing option argument,
it returns \(aq?\(aq and sets the external variable \fIoptopt\fP to the
actual option character.
If the first character
(following any optional \(aq+\(aq or \(aq\-\(aq described above)
of \fIoptstring\fP
is a colon (\(aq:\(aq), then
.BR getopt ()
returns \(aq:\(aq instead of \(aq?\(aq to
indicate a missing option argument.
If an error was detected, and
the first character of \fIoptstring\fP is not a colon, and
the external variable \fIopterr\fP is nonzero (which is the default),
.BR getopt ()
prints an error message.
.SS getopt_long() and getopt_long_only()
The
.BR getopt_long ()
function works like
.BR getopt ()
except that it also accepts long options, started with two dashes.
(If the program accepts only long options, then
.I optstring
should be specified as an empty string (""), not NULL.)
Long option names may be abbreviated if the abbreviation is
unique or is an exact match for some defined option.
A long option
may take a parameter, of the form
.B \-\-arg=param
or
.BR "\-\-arg param" .
.PP
.I longopts
is a pointer to the first element of an array of
.I struct option
declared in
.I <getopt.h>
as
.in +4n
.nf
.sp
struct option {
    const char *name;
    int         has_arg;
    int        *flag;
    int         val;
};
.fi
.in
.PP
The meanings of the different fields are:
.TP
.I name
is the name of the long option.
.TP
.I has_arg
is:
\fBno_argument\fP (or 0) if the option does not take an argument;
\fBrequired_argument\fP (or 1) if the option requires an argument; or
\fBoptional_argument\fP (or 2) if the option takes an optional argument.
.TP
.I flag
specifies how results are returned for a long option.
If \fIflag\fP
is NULL, then
.BR getopt_long ()
returns \fIval\fP.
(For example, the calling program may set \fIval\fP to the equivalent short
option character.)
Otherwise,
.BR getopt_long ()
returns 0, and
\fIflag\fP points to a variable which is set to \fIval\fP if the
option is found, but left unchanged if the option is not found.
.TP
\fIval\fP
is the value to return, or to load into the variable pointed
to by \fIflag\fP.
.PP
The last element of the array has to be filled with zeros.
.PP
If \fIlongindex\fP is not NULL, it
points to a variable which is set to the index of the long option relative to
.IR longopts .
.PP
.BR getopt_long_only ()
is like
.BR getopt_long (),
but \(aq\-\(aq as well
as "\-\-" can indicate a long option.
If an option that starts with \(aq\-\(aq
(not "\-\-") doesn't match a long option, but does match a short option,
it is parsed as a short option instead.
.SH RETURN VALUE
If an option was successfully found, then
.BR getopt ()
returns the option character.
If all command-line options have been parsed, then
.BR getopt ()
returns \-1.
If
.BR getopt ()
encounters an option character that was not in
.IR optstring ,
then \(aq?\(aq is returned.
If
.BR getopt ()
encounters an option with a missing argument,
then the return value depends on the first character in
.IR optstring :
if it is \(aq:\(aq, then \(aq:\(aq is returned; otherwise \(aq?\(aq is returned.
.PP
.BR getopt_long ()
and
.BR getopt_long_only ()
also return the option
character when a short option is recognized.
For a long option, they
return \fIval\fP if \fIflag\fP is NULL, and 0 otherwise.
Error and \-1 returns are the same as for
.BR getopt (),
plus \(aq?\(aq for an
ambiguous match or an extraneous parameter.
.SH ENVIRONMENT
.TP
.B POSIXLY_CORRECT
If this is set, then option processing stops as soon as a nonoption
argument is encountered.
.TP
.B _<PID>_GNU_nonoption_argv_flags_
This variable was used by
.BR bash (1)
2.0 to communicate to glibc which arguments are the results of
wildcard expansion and so should not be considered as options.
This behavior was removed in
.BR bash (1)
version 2.01, but the support remains in glibc.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw24 lb lb
l l l.
Interface	Attribute	Value
T{
.BR getopt (),
.BR getopt_long (),
.BR getopt_long_only ()
T}	Thread safety	MT-Unsafe race:getopt env
.TE
.SH CONFORMING TO
.TP
.BR getopt ():
POSIX.2 and POSIX.1-2001,
provided the environment variable
.B POSIXLY_CORRECT
is set.
Otherwise, the elements of \fIargv\fP aren't really const, because we
permute them.
We pretend they're const in the prototype to be
compatible with other systems.

The use of \(aq+\(aq and \(aq\-\(aq in
.I optstring
is a GNU extension.

On some older implementations,
.BR getopt ()
was declared in
.IR <stdio.h> .
SUSv1 permitted the declaration to appear in either
.I <unistd.h>
or
.IR <stdio.h> .
POSIX.1-2001 marked the use of
.I <stdio.h>
for this purpose as LEGACY.
POSIX.1-2001 does not allow the declaration to appear in
.IR <stdio.h> .
.TP
.BR getopt_long "() and " getopt_long_only ():
These functions are GNU extensions.
.SH NOTES
A program that scans multiple argument vectors,
or rescans the same vector more than once,
and wants to make use of GNU extensions such as \(aq+\(aq
and \(aq\-\(aq at the start of
.IR optstring ,
or changes the value of
.B POSIXLY_CORRECT
between scans,
must reinitialize
.BR getopt ()
by resetting
.I optind
to 0, rather than the traditional value of 1.
(Resetting to 0 forces the invocation of an internal initialization
routine that rechecks
.B POSIXLY_CORRECT
and checks for GNU extensions in
.IR optstring .)
.SH EXAMPLE
.SS getopt()
The following trivial example program uses
.BR getopt ()
to handle two program options:
.IR \-n ,
with no associated value; and
.IR "\-t val" ,
which expects an associated value.
.nf
.sp
#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>

int
main(int argc, char *argv[])
{
    int flags, opt;
    int nsecs, tfnd;

    nsecs = 0;
    tfnd = 0;
    flags = 0;
    while ((opt = getopt(argc, argv, "nt:")) != \-1) {
        switch (opt) {
        case \(aqn\(aq:
            flags = 1;
            break;
        case \(aqt\(aq:
            nsecs = atoi(optarg);
            tfnd = 1;
            break;
        default: /* \(aq?\(aq */
            fprintf(stderr, "Usage: %s [\-t nsecs] [\-n] name\\n",
                    argv[0]);
            exit(EXIT_FAILURE);
        }
    }

    printf("flags=%d; tfnd=%d; nsecs=%d; optind=%d\\n",
            flags, tfnd, nsecs, optind);

    if (optind >= argc) {
        fprintf(stderr, "Expected argument after options\\n");
        exit(EXIT_FAILURE);
    }

    printf("name argument = %s\\n", argv[optind]);

    /* Other code omitted */

    exit(EXIT_SUCCESS);
}
.fi
.SS getopt_long()
The following example program illustrates the use of
.BR getopt_long ()
with most of its features.
.nf
.sp
#include <stdio.h>     /* for printf */
#include <stdlib.h>    /* for exit */
#include <getopt.h>

int
main(int argc, char **argv)
{
    int c;
    int digit_optind = 0;

    while (1) {
        int this_option_optind = optind ? optind : 1;
        int option_index = 0;
        static struct option long_options[] = {
            {"add",     required_argument, 0,  0 },
            {"append",  no_argument,       0,  0 },
            {"delete",  required_argument, 0,  0 },
            {"verbose", no_argument,       0,  0 },
            {"create",  required_argument, 0, \(aqc\(aq},
            {"file",    required_argument, 0,  0 },
            {0,         0,                 0,  0 }
        };

        c = getopt_long(argc, argv, "abc:d:012",
                 long_options, &option_index);
        if (c == \-1)
            break;

        switch (c) {
        case 0:
            printf("option %s", long_options[option_index].name);
            if (optarg)
                printf(" with arg %s", optarg);
            printf("\\n");
            break;

        case \(aq0\(aq:
        case \(aq1\(aq:
        case \(aq2\(aq:
            if (digit_optind != 0 && digit_optind != this_option_optind)
              printf("digits occur in two different argv\-elements.\\n");
            digit_optind = this_option_optind;
            printf("option %c\\n", c);
            break;

        case \(aqa\(aq:
            printf("option a\\n");
            break;

        case \(aqb\(aq:
            printf("option b\\n");
            break;

        case \(aqc\(aq:
            printf("option c with value \(aq%s\(aq\\n", optarg);
            break;

        case \(aqd\(aq:
            printf("option d with value \(aq%s\(aq\\n", optarg);
            break;

        case \(aq?\(aq:
            break;

        default:
            printf("?? getopt returned character code 0%o ??\\n", c);
        }
    }

    if (optind < argc) {
        printf("non\-option ARGV\-elements: ");
        while (optind < argc)
            printf("%s ", argv[optind++]);
        printf("\\n");
    }

    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR getopt (1),
.BR getsubopt (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2000 Andries Brouwer (aeb@cwi.nl)
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.TH GETPASS 3  2015-03-02 "Linux" "Linux Programmer's Manual"
.SH NAME
getpass \- get a password
.SH SYNOPSIS
.B #include <unistd.h>
.sp
.BI "char *getpass(const char *" prompt );
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR getpass ():
.ad l
.RS 4
.PD 0
.TP 4
Since glibc 2.2.2:
.nf
_BSD_SOURCE ||
    (_XOPEN_SOURCE\ >=\ 500 ||
        _XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED) &&
    !(_POSIX_C_SOURCE\ >=\ 200112L || _XOPEN_SOURCE\ >=\ 600)
.fi
.TP 4
Before glibc 2.2.2:
none
.PD
.RE
.ad b
.SH DESCRIPTION
This function is obsolete.
Do not use it.
If you want to read input without terminal echoing enabled,
see the description of the
.I ECHO
flag in
.BR termios (3).
.PP
The
.BR getpass ()
function opens
.I /dev/tty
(the controlling terminal of the process), outputs the string
.IR prompt ,
turns off echoing, reads one line (the "password"),
restores the terminal state and closes
.I /dev/tty
again.
.SH RETURN VALUE
The function
.BR getpass ()
returns a pointer to a static buffer containing (the first
.B PASS_MAX
bytes of) the password without the trailing
newline, terminated by a null byte (\(aq\\0\(aq).
This buffer may be overwritten by a following call.
On error, the terminal state is restored,
.I errno
is set appropriately, and NULL is returned.
.SH ERRORS
The function may fail if
.TP
.B ENXIO
The process does not have a controlling terminal.
.SH FILES
.I /dev/tty
.\" .SH HISTORY
.\" A
.\" .BR getpass ()
.\" function appeared in Version 7 AT&T UNIX.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR getpass ()
T}	Thread safety	MT-Unsafe term
.TE
.SH CONFORMING TO
Present in SUSv2, but marked LEGACY.
Removed in POSIX.1-2001.
.SH NOTES
.\" For libc4 and libc5, the prompt is not written to
.\" .I /dev/tty
.\" but to
.\" .IR stderr .
.\" Moreover, if
.\" .I /dev/tty
.\" cannot be opened, the password is read from
.\" .IR stdin .
.\" The static buffer has length 128 so that only the first 127
.\" bytes of the password are returned.
.\" While reading the password, signal generation
.\" .RB ( SIGINT ,
.\" .BR SIGQUIT ,
.\" .BR SIGSTOP ,
.\" .BR SIGTSTP )
.\" is disabled and the corresponding characters
.\" (usually control-C, control-\e, control-Z and control-Y)
.\" are transmitted as part of the password.
.\" Since libc 5.4.19 also line editing is disabled, so that also
.\" backspace and the like will be seen as part of the password.
.PP
In the GNU C library implementation, if
.I /dev/tty
cannot be opened, the prompt is written to
.I stderr
and the password is read from
.IR stdin .
There is no limit on the length of the password.
Line editing is not disabled.
.PP
According to SUSv2, the value of
.B PASS_MAX
must be defined in
.I <limits.h>
in case it is smaller than 8, and can in any case be obtained using
.IR sysconf(_SC_PASS_MAX) .
However, POSIX.2 withdraws the constants
.B PASS_MAX
and
.BR _SC_PASS_MAX ,
and the function
.BR getpass ().
.\" Libc4 and libc5 have never supported
.\" .B PASS_MAX
.\" or
.\" .BR _SC_PASS_MAX .
The glibc version accepts
.B _SC_PASS_MAX
and returns
.B BUFSIZ
(e.g., 8192).
.SH BUGS
The calling process should zero the password as soon as possible to avoid
leaving the cleartext password visible in the process's address space.
.SH SEE ALSO
.BR crypt (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2015 William Woodruff (william@tuffbizz.com)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH GET_PHYS_PAGES 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
get_phys_pages, get_avphys_pages \- get total and available physical
page counts
.SH SYNOPSIS
.nf
.B "#include <sys/sysinfo.h>"
.sp
.B long int get_phys_pages(void);
.B long int get_avphys_pages(void);
.SH DESCRIPTION
The function
.BR get_phys_pages ()
returns the total number of physical pages of memory available on the system.

The function
.BR get_avphys_pages ()
returns the number of currently available physical pages of memory on the
system.
.SH RETURN VALUE
On success,
these functions return a nonnegative value as given in DESCRIPTION.
On failure, they return \-1 and set
.I errno
to indicate the cause of the error.
.SH ERRORS
.TP
.B ENOSYS
The system could not provide the required information
(possibly because the
.I /proc
filesystem was not mounted).
.SH CONFORMING TO
These functions are GNU extensions.
.SH NOTES
These functions obtain the required information by scanning the
.I MemTotal
and
.I MemFree
fields of
.IR /proc/meminfo .

The following
.BR sysconf (3)
calls provide a portable means of obtaining the same information as the
functions described on this page.

.nf
    total_pages = sysconf(_SC_PHYS_PAGES);    /* total pages */
    avl_pages = sysconf(_SC_AVPHYS_PAGES);    /* available pages */
.fi
.SH EXAMPLE
The following example shows how
.BR get_phys_pages ()
and
.BR get_avphys_pages ()
can be used.

.nf
#include <stdio.h>
#include <stdlib.h>
#include <sys/sysinfo.h>

int
main(int argc, char *argv[])
{
    printf("This system has %ld pages of physical memory and "
            "%ld pages of physical memory available.\\n",
            get_phys_pages(), get_avphys_pages());
    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR sysconf (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified Sat Jul 24 19:26:03 1993 by Rik Faith (faith@cs.unc.edu)
.TH GETPROTOENT 3  2008-08-19 "GNU" "Linux Programmer's Manual"
.SH NAME
getprotoent, getprotobyname, getprotobynumber, setprotoent,
endprotoent \- get protocol entry
.SH SYNOPSIS
.nf
.B #include <netdb.h>
.sp
.B struct protoent *getprotoent(void);
.sp
.BI "struct protoent *getprotobyname(const char *" name );
.sp
.BI "struct protoent *getprotobynumber(int " proto );
.sp
.BI "void setprotoent(int " stayopen );
.sp
.B void endprotoent(void);
.fi
.SH DESCRIPTION
The
.BR getprotoent ()
function reads the next entry from the protocols database (see
.BR protocols (5))
and returns a
.I protoent
structure
containing the broken-out fields from the entry.
A connection is opened to the database if necessary.
.PP
The
.BR getprotobyname ()
function returns a
.I protoent
structure
for the entry from the database
that matches the protocol name
.IR name .
A connection is opened to the database if necessary.
.PP
The
.BR getprotobynumber ()
function returns a
.I protoent
structure
for the entry from the database
that matches the protocol number
.IR number .
A connection is opened to the database if necessary.
.PP
The
.BR setprotoent ()
function opens a connection to the database,
and sets the next entry to the first entry.
If
.I stayopen
is nonzero,
then the connection to the database
will not be closed between calls to one of the
.BR getproto* ()
functions.
.PP
The
.BR endprotoent ()
function closes the connection to the database.
.PP
The
.I protoent
structure is defined in
.I <netdb.h>
as follows:
.sp
.in +4n
.nf
struct protoent {
    char  *p_name;       /* official protocol name */
    char **p_aliases;    /* alias list */
    int    p_proto;      /* protocol number */
}
.fi
.in
.PP
The members of the
.I protoent
structure are:
.TP
.I p_name
The official name of the protocol.
.TP
.I p_aliases
A NULL-terminated list of alternative names for the protocol.
.TP
.I p_proto
The protocol number.
.SH RETURN VALUE
The
.BR getprotoent (),
.BR getprotobyname ()
and
.BR getprotobynumber ()
functions return a pointer to a
statically allocated
.I protoent
structure, or a null pointer if an
error occurs or the end of the file is reached.
.SH FILES
.PD 0
.TP
.I /etc/protocols
protocol database file
.PD
.SH CONFORMING TO
4.3BSD, POSIX.1-2001.
.SH SEE ALSO
.BR getnetent (3),
.BR getprotoent_r (3),
.BR getservent (3),
.BR protocols (5)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 2008, Linux Foundation, written by Michael Kerrisk
.\"	<mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH GETPROTOENT_R 3  2010-09-10 "GNU" "Linux Programmer's Manual"
.SH NAME
getprotoent_r, getprotobyname_r, getprotobynumber_r \- get
protocol entry (reentrant)
.SH SYNOPSIS
.nf
.B #include <netdb.h>
.sp
.BI "int getprotoent_r(struct protoent *" result_buf ", char *" buf ,
.BI "                size_t " buflen ", struct protoent **" result );
.sp
.BI "int getprotobyname_r(const char *" name ,
.BI "                struct protoent *" result_buf ", char *" buf ,
.BI "                size_t " buflen ", struct protoent **" result );
.sp
.BI "int getprotobynumber_r(int " proto ,
.BI "                struct protoent *" result_buf ", char *" buf ,
.BI "                size_t " buflen ", struct protoent **" result );
.sp
.fi
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.ad l
.in
.sp
.BR getprotoent_r (),
.BR getprotobyname_r (),
.BR getprotobynumber_r ():
.RS 4
_BSD_SOURCE || _SVID_SOURCE
.RE
.ad b
.SH DESCRIPTION
The
.BR getprotoent_r (),
.BR getprotobyname_r (),
and
.BR getprotobynumber_r ()
functions are the reentrant equivalents of, respectively,
.BR getprotoent (3),
.BR getprotobyname (3),
and
.BR getprotobynumber (3).
They differ in the way that the
.I protoent
structure is returned,
and in the function calling signature and return value.
This manual page describes just the differences from
the nonreentrant functions.

Instead of returning a pointer to a statically allocated
.I protoent
structure as the function result,
these functions copy the structure into the location pointed to by
.IR result_buf .

The
.I buf
array is used to store the string fields pointed to by the returned
.I protoent
structure.
(The nonreentrant functions allocate these strings in static storage.)
The size of this array is specified in
.IR buflen .
If
.I buf
is too small, the call fails with the error
.BR ERANGE ,
and the caller must try again with a larger buffer.
(A buffer of length 1024 bytes should be sufficient for most applications.)
.\" I can find no information on the required/recommended buffer size;
.\" the nonreentrant functions use a 1024 byte buffer.
.\" The 1024 byte value is also what the Solaris man page suggests. -- mtk

If the function call successfully obtains a protocol record, then
.I *result
is set pointing to
.IR result_buf ;
otherwise,
.I *result
is set to NULL.
.SH RETURN VALUE
On success, these functions return 0.
On error, they return one of the positive error numbers listed in ERRORS.

On error, record not found
.RB ( getprotobyname_r (),
.BR getprotobynumber_r ()),
or end of input
.RB ( getprotoent_r ())
.I result
is set to NULL.
.SH ERRORS
.TP
.B ENOENT
.RB ( getprotoent_r ())
No more records in database.
.TP
.B ERANGE
.I buf
is too small.
Try again with a larger buffer
(and increased
.IR buflen ).
.SH CONFORMING TO
These functions are GNU extensions.
Functions with similar names exist on some other systems,
though typically with different calling signatures.
.SH EXAMPLE
The program below uses
.BR getprotobyname_r ()
to retrieve the protocol record for the protocol named
in its first command-line argument.
If a second (integer) command-line argument is supplied,
it is used as the initial value for
.IR buflen ;
if
.BR getprotobyname_r ()
fails with the error
.BR ERANGE ,
the program retries with larger buffer sizes.
The following shell session shows a couple of sample runs:
.in +4n
.nf

.RB "$" " ./a.out tcp 1"
ERANGE! Retrying with larger buffer
getprotobyname_r() returned: 0 (success)  (buflen=78)
p_name=tcp; p_proto=6; aliases=TCP
.RB "$" " ./a.out xxx 1"
ERANGE! Retrying with larger buffer
getprotobyname_r() returned: 0 (success)  (buflen=100)
Call failed/record not found
.fi
.in
.SS Program source
\&
.nf
#define _GNU_SOURCE
#include <ctype.h>
#include <netdb.h>
#include <stdlib.h>
#include <stdio.h>
#include <errno.h>
#include <string.h>

#define MAX_BUF 10000

int
main(int argc, char *argv[])
{
    int buflen, erange_cnt, s;
    struct protoent result_buf;
    struct protoent *result;
    char buf[MAX_BUF];
    char **p;

    if (argc < 2) {
        printf("Usage: %s proto\-name [buflen]\\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    buflen = 1024;
    if (argc > 2)
        buflen = atoi(argv[2]);

    if (buflen > MAX_BUF) {
        printf("Exceeded buffer limit (%d)\\n", MAX_BUF);
        exit(EXIT_FAILURE);
    }

    erange_cnt = 0;
    do {
        s = getprotobyname_r(argv[1], &result_buf,
                     buf, buflen, &result);
        if (s == ERANGE) {
            if (erange_cnt == 0)
                printf("ERANGE! Retrying with larger buffer\\n");
            erange_cnt++;

            /* Increment a byte at a time so we can see exactly
               what size buffer was required */

            buflen++;

            if (buflen > MAX_BUF) {
                printf("Exceeded buffer limit (%d)\\n", MAX_BUF);
                exit(EXIT_FAILURE);
            }
        }
    } while (s == ERANGE);

    printf("getprotobyname_r() returned: %s  (buflen=%d)\\n",
            (s == 0) ? "0 (success)" : (s == ENOENT) ? "ENOENT" :
            strerror(s), buflen);

    if (s != 0 || result == NULL) {
        printf("Call failed/record not found\\n");
        exit(EXIT_FAILURE);
    }

    printf("p_name=%s; p_proto=%d; aliases=",
                result_buf.p_name, result_buf.p_proto);
    for (p = result_buf.p_aliases; *p != NULL; p++)
        printf("%s ", *p);
    printf("\\n");

    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR getprotoent (3),
.BR protocols (5)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" This man page was written by Jeremy Phelps <jphelps@notreached.net>.
.\"
.\" %%%LICENSE_START(FREELY_REDISTRIBUTABLE)
.\" Redistribute and modify at will.
.\" %%%LICENSE_END
.\"
.TH GETPT 3 2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
getpt \- open the pseudoterminal master (PTM)
.SH SYNOPSIS
.nf
.BR "#define _GNU_SOURCE" "             /* See feature_test_macros(7) */"
.B #include <stdlib.h>
.sp
.B "int getpt(void);"
.fi
.SH DESCRIPTION
.BR getpt ()
opens a pseudoterminal master and returns its file descriptor.
It is equivalent to
.nf

    open(/dev/ptmx, O_RDWR | O_NOCTTY);

.fi
on Linux systems, though the pseudoterminal master is located
elsewhere on some systems that use GNU Libc.
.SH RETURN VALUE
.BR getpt ()
returns an open file descriptor upon successful completion.
Otherwise, it
returns \-1 and sets
.I errno
to indicate the error.
.SH ERRORS
.BR getpt ()
can fail with various errors described in
.BR open (2).
.SH VERSIONS
.BR getpt ()
is provided in glibc since version 2.1.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR getpt ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
.BR getpt ()
is glibc-specific;
use
.BR posix_openpt (3)
instead.
.SH SEE ALSO
.BR grantpt (3),
.BR posix_openpt (3),
.BR ptsname (3),
.BR unlockpt (3),
.BR ptmx (4),
.BR pty (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified Sat Jul 24 19:23:25 1993 by Rik Faith (faith@cs.unc.edu)
.\" Modified Mon May 27 21:37:47 1996 by Martin Schulze (joey@linux.de)
.\"
.TH GETPW 3 2015-01-22 "GNU" "Linux Programmer's Manual"
.SH NAME
getpw \- reconstruct password line entry
.SH SYNOPSIS
.nf
.BR "#define _GNU_SOURCE" "             /* See feature_test_macros(7) */"
.B #include <sys/types.h>
.B #include <pwd.h>
.sp
.BI "int getpw(uid_t " uid ", char *" buf );
.fi
.SH DESCRIPTION
The
.BR getpw ()
function reconstructs the password line entry for
the given user ID \fIuid\fP in the buffer \fIbuf\fP.
The returned buffer contains a line of format
.sp
.RS
.B name:passwd:uid:gid:gecos:dir:shell
.RE
.PP
The \fIpasswd\fP structure is defined in \fI<pwd.h>\fP as follows:
.sp
.in +4n
.nf
struct passwd {
    char   *pw_name;       /* username */
    char   *pw_passwd;     /* user password */
    uid_t   pw_uid;        /* user ID */
    gid_t   pw_gid;        /* group ID */
    char   *pw_gecos;      /* user information */
    char   *pw_dir;        /* home directory */
    char   *pw_shell;      /* shell program */
};
.fi
.in
.PP
For more information about the fields of this structure, see
.BR passwd (5).
.SH RETURN VALUE
The
.BR getpw ()
function returns 0 on success; on error, it returns \-1, and
.I errno
is set to indicate the error.

If
.I uid
is not found in the password database,
.BR getpw ()
returns \-1, sets
.I errno
to 0, and leaves
.I buf
unchanged.
.SH ERRORS
.TP
.BR 0 " or " ENOENT
No user corresponding to
.IR uid .
.TP
.B EINVAL
.I buf
is NULL.
.TP
.B ENOMEM
Insufficient memory to allocate
.I passwd
structure.
.SH FILES
.TP
.I /etc/passwd
password database file
.SH CONFORMING TO
SVr2.
.SH BUGS
The
.BR getpw ()
function is dangerous as it may overflow the provided buffer
.IR buf .
It is obsoleted by
.BR getpwuid (3).
.SH SEE ALSO
.BR endpwent (3),
.BR fgetpwent (3),
.BR getpwent (3),
.BR getpwnam (3),
.BR getpwuid (3),
.BR putpwent (3),
.BR setpwent (3),
.BR passwd (5)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\"
.\" Modified Sat Jul 24 19:22:14 1993 by Rik Faith (faith@cs.unc.edu)
.\" Modified Mon May 27 21:37:47 1996 by Martin Schulze (joey@linux.de)
.\"
.TH GETPWENT 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
getpwent, setpwent, endpwent \- get password file entry
.SH SYNOPSIS
.nf
.B #include <sys/types.h>
.B #include <pwd.h>
.sp
.B struct passwd *getpwent(void);
.sp
.B void setpwent(void);
.sp
.B void endpwent(void);
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR getpwent (),
.BR setpwent (),
.BR endpwent ():
.RS 4
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE\ >=\ 500 ||
_XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED
.RE
.ad b
.SH DESCRIPTION
The
.BR getpwent ()
function returns a pointer to a structure containing
the broken-out fields of a record from the password database
(e.g., the local password file
.IR /etc/passwd ,
NIS, and LDAP).
The first time
.BR getpwent ()
is called, it returns the first entry; thereafter, it returns successive
entries.
.PP
The
.BR setpwent ()
function rewinds to the beginning
of the password database.
.PP
The
.BR endpwent ()
function is used to close the password database
after all processing has been performed.
.PP
The \fIpasswd\fP structure is defined in \fI<pwd.h>\fP as follows:
.sp
.in +4n
.nf
struct passwd {
    char   *pw_name;       /* username */
    char   *pw_passwd;     /* user password */
    uid_t   pw_uid;        /* user ID */
    gid_t   pw_gid;        /* group ID */
    char   *pw_gecos;      /* user information */
    char   *pw_dir;        /* home directory */
    char   *pw_shell;      /* shell program */
};
.fi
.in
.PP
For more information about the fields of this structure, see
.BR passwd (5).
.SH RETURN VALUE
The
.BR getpwent ()
function returns a pointer to a
.I passwd
structure, or NULL if
there are no more entries or an error occurred.
If an error occurs,
.I errno
is set appropriately.
If one wants to check
.I errno
after the call, it should be set to zero before the call.

The return value may point to a static area, and may be overwritten
by subsequent calls to
.BR getpwent (),
.BR getpwnam (3),
or
.BR getpwuid (3).
(Do not pass the returned pointer to
.BR free (3).)
.SH ERRORS
.TP
.B EINTR
A signal was caught.
.TP
.B EIO
I/O error.
.TP
.B EMFILE
The maximum number
.RB ( OPEN_MAX )
of files was open already in the calling process.
.TP
.B ENFILE
The maximum number of files was open already in the system.
.TP
.B ENOMEM
.\" not in POSIX
Insufficient memory to allocate
.I passwd
structure.
.\" to allocate the passwd structure, or to allocate buffers
.TP
.B ERANGE
Insufficient buffer space supplied.
.SH FILES
.TP
.I /etc/passwd
local password database file
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw11 lb lb
l l l.
Interface	Attribute	Value
T{
.BR getpwent ()
T}	Thread safety	T{
MT-Unsafe race:pwent
.br
race:pwentbuf locale
T}
T{
.BR setpwent (),
.br
.BR endpwent ()
T}	Thread safety	MT-Unsafe race:pwent locale
.TE

In the above table,
.I pwent
in
.I race:pwent
signifies that if any of the functions
.BR setpwent (),
.BR getpwent (),
or
.BR endpwent ()
are used in parallel in different threads of a program,
then data races could occur.
.SH CONFORMING TO
SVr4, 4.3BSD, POSIX.1-2001.
The
.I pw_gecos
field is not specified in POSIX, but is present on most implementations.
.SH SEE ALSO
.BR fgetpwent (3),
.BR getpw (3),
.BR getpwent_r (3),
.BR getpwnam (3),
.BR getpwuid (3),
.BR putpwent (3),
.BR passwd (5)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2003 Andries Brouwer (aeb@cwi.nl)
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.TH GETPWENT_R 3 2015-01-22 "GNU" "Linux Programmer's Manual"
.SH NAME
getpwent_r, fgetpwent_r \- get passwd file entry reentrantly
.SH SYNOPSIS
.nf
.B #include <pwd.h>
.sp
.BI "int getpwent_r(struct passwd *" pwbuf ", char *" buf ,
.br
.BI "               size_t " buflen ", struct passwd **" pwbufp );
.sp
.BI "int fgetpwent_r(FILE *" stream ", struct passwd *" pwbuf ", char *" buf ,
.br
.BI "                size_t " buflen ", struct passwd **" pwbufp );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR getpwent_r (),
_BSD_SOURCE || _SVID_SOURCE
.br
.BR fgetpwent_r ():
_SVID_SOURCE
.SH DESCRIPTION
The functions
.BR getpwent_r ()
and
.BR fgetpwent_r ()
are the reentrant versions of
.BR getpwent (3)
and
.BR fgetpwent (3).
The former reads the next passwd entry from the stream initialized by
.BR setpwent (3).
The latter reads the next passwd entry from
.IR stream .
.PP
The \fIpasswd\fP structure is defined in
.I <pwd.h>
as follows:
.sp
.in +4n
.nf
struct passwd {
    char    *pw_name;      /* username */
    char    *pw_passwd;    /* user password */
    uid_t    pw_uid;       /* user ID */
    gid_t    pw_gid;       /* group ID */
    char    *pw_gecos;     /* user information */
    char    *pw_dir;       /* home directory */
    char    *pw_shell;     /* shell program */
};
.fi
.in
.PP
For more information about the fields of this structure, see
.BR passwd (5).

The nonreentrant functions return a pointer to static storage,
where this static storage contains further pointers to user
name, password, gecos field, home directory and shell.
The reentrant functions described here return all of that in
caller-provided buffers.
First of all there is the buffer
.I pwbuf
that can hold a \fIstruct passwd\fP.
And next the buffer
.I buf
of size
.I buflen
that can hold additional strings.
The result of these functions, the \fIstruct passwd\fP read from the stream,
is stored in the provided buffer
.IR *pwbuf ,
and a pointer to this \fIstruct passwd\fP is returned in
.IR *pwbufp .
.SH RETURN VALUE
On success, these functions return 0 and
.I *pwbufp
is a pointer to the \fIstruct passwd\fP.
On error, these functions return an error value and
.I *pwbufp
is NULL.
.SH ERRORS
.TP
.B ENOENT
No more entries.
.TP
.B ERANGE
Insufficient buffer space supplied.
Try again with larger buffer.
.SH CONFORMING TO
These functions are GNU extensions, done in a style resembling
the POSIX version of functions like
.BR getpwnam_r (3).
Other systems use the prototype
.sp
.nf
.in +4n
struct passwd *
getpwent_r(struct passwd *pwd, char *buf, int buflen);
.in
.fi
.sp
or, better,
.sp
.nf
.in +4n
int
getpwent_r(struct passwd *pwd, char *buf, int buflen,
           FILE **pw_fp);
.in
.fi
.SH NOTES
The function
.BR getpwent_r ()
is not really reentrant since it shares the reading position
in the stream with all other threads.
.SH EXAMPLE
.nf
#define _GNU_SOURCE
#include <pwd.h>
#include <stdio.h>
#define BUFLEN 4096

int
main(void)
{
    struct passwd pw, *pwp;
    char buf[BUFLEN];
    int i;

    setpwent();
    while (1) {
        i = getpwent_r(&pw, buf, BUFLEN, &pwp);
        if (i)
            break;
        printf("%s (%d)\etHOME %s\etSHELL %s\en", pwp\->pw_name,
               pwp\->pw_uid, pwp\->pw_dir, pwp\->pw_shell);
    }
    endpwent();
    exit(EXIT_SUCCESS);
}
.fi
.\" perhaps add error checking - should use strerror_r
.\" #include <errno.h>
.\" #include <stdlib.h>
.\"         if (i) {
.\"               if (i == ENOENT)
.\"                     break;
.\"               printf("getpwent_r: %s", strerror(i));
.\"               exit(EXIT_SUCCESS);
.\"         }
.SH SEE ALSO
.BR fgetpwent (3),
.BR getpw (3),
.BR getpwent (3),
.BR getpwnam (3),
.BR getpwuid (3),
.BR putpwent (3),
.BR passwd (5)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\" and Copyright 2008, Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's "POSIX Programmer's Guide" (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\"
.\" Modified 1993-07-24 by Rik Faith (faith@cs.unc.edu)
.\" Modified 1996-05-27 by Martin Schulze (joey@linux.de)
.\" Modified 2003-11-15 by aeb
.\" 2008-11-07, mtk, Added an example program for getpwnam_r().
.\"
.TH GETPWNAM 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
getpwnam, getpwnam_r, getpwuid, getpwuid_r \- get password file entry
.SH SYNOPSIS
.nf
.B #include <sys/types.h>
.B #include <pwd.h>
.sp
.BI "struct passwd *getpwnam(const char *" name );
.sp
.BI "struct passwd *getpwuid(uid_t " uid );
.sp
.BI "int getpwnam_r(const char *" name ", struct passwd *" pwd ,
.br
.BI "               char *" buf ", size_t " buflen ", struct passwd **" result );
.sp
.BI "int getpwuid_r(uid_t " uid ", struct passwd *" pwd ,
.br
.BI "               char *" buf ", size_t " buflen ", struct passwd **" result );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR getpwnam_r (),
.BR getpwuid_r ():
.RS 4
_POSIX_C_SOURCE\ >=\ 1 || _XOPEN_SOURCE || _BSD_SOURCE ||
_SVID_SOURCE || _POSIX_SOURCE
.RE
.ad b
.SH DESCRIPTION
The
.BR getpwnam ()
function returns a pointer to a structure containing
the broken-out fields of the record in the password database
(e.g., the local password file
.IR /etc/passwd ,
NIS, and LDAP)
that matches the username
.IR name .
.PP
The
.BR getpwuid ()
function returns a pointer to a structure containing
the broken-out fields of the record in the password database
that matches the user ID
.IR uid .
.PP
The \fIpasswd\fP structure is defined in \fI<pwd.h>\fP as follows:
.sp
.in +4n
.nf
struct passwd {
    char   *pw_name;       /* username */
    char   *pw_passwd;     /* user password */
    uid_t   pw_uid;        /* user ID */
    gid_t   pw_gid;        /* group ID */
    char   *pw_gecos;      /* user information */
    char   *pw_dir;        /* home directory */
    char   *pw_shell;      /* shell program */
};
.fi
.in
.PP
See
.BR passwd (5)
for more information about these fields.
.PP
The
.BR getpwnam_r ()
and
.BR getpwuid_r ()
functions obtain the same information as
.BR getpwnam ()
and
.BR getpwuid (),
but store the retrieved
.I passwd
structure in the space pointed to by
.IR pwd .
The string fields pointed to by the members of the
.I passwd
structure are stored in the buffer
.I buf
of size
.IR buflen .
A pointer to the result (in case of success) or NULL (in case no entry
was found or an error occurred) is stored in
.IR *result .
.PP
The call

    sysconf(_SC_GETPW_R_SIZE_MAX)

returns either \-1, without changing
.IR errno ,
or an initial suggested size for
.IR buf .
(If this size is too small,
the call fails with
.BR ERANGE ,
in which case the caller can retry with a larger buffer.)
.SH RETURN VALUE
The
.BR getpwnam ()
and
.BR getpwuid ()
functions return a pointer to a
.I passwd
structure, or NULL if the matching entry is not found or
an error occurs.
If an error occurs,
.I errno
is set appropriately.
If one wants to check
.I errno
after the call, it should be set to zero before the call.
.LP
The return value may point to a static area, and may be overwritten
by subsequent calls to
.BR getpwent (3),
.BR getpwnam (),
or
.BR getpwuid ().
(Do not pass the returned pointer to
.BR free (3).)
.LP
On success,
.BR getpwnam_r ()
and
.BR getpwuid_r ()
return zero, and set
.IR *result
to
.IR pwd .
If no matching password record was found,
these functions return 0 and store NULL in
.IR *result .
In case of error, an error number is returned, and NULL is stored in
.IR *result .
.SH ERRORS
.TP
.BR 0 " or " ENOENT " or " ESRCH " or " EBADF " or " EPERM " or ... "
The given
.I name
or
.I uid
was not found.
.TP
.B EINTR
A signal was caught.
.TP
.B EIO
I/O error.
.TP
.B EMFILE
The maximum number
.RB ( OPEN_MAX )
of files was open already in the calling process.
.TP
.B ENFILE
The maximum number of files was open already in the system.
.TP
.B ENOMEM
.\" not in POSIX
Insufficient memory to allocate
.I passwd
structure.
.\" This structure is static, allocated 0 or 1 times. No memory leak. (libc45)
.TP
.B ERANGE
Insufficient buffer space supplied.
.SH FILES
.TP
.I /etc/passwd
local password database file
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR getpwnam ()
T}	Thread safety	MT-Unsafe race:pwnam locale
T{
.BR getpwuid ()
T}	Thread safety	MT-Unsafe race:pwuid locale
T{
.BR getpwnam_r (),
.br
.BR getpwuid_r ()
T}	Thread safety	MT-Safe locale
.TE
.SH CONFORMING TO
SVr4, 4.3BSD, POSIX.1-2001.
The
.I pw_gecos
field is not specified in POSIX, but is present on most implementations.
.SH NOTES
The formulation given above under "RETURN VALUE" is from POSIX.1-2001.
It does not call "not found" an error, and hence does not specify what value
.I errno
might have in this situation.
But that makes it impossible to recognize
errors.
One might argue that according to POSIX
.I errno
should be left unchanged if an entry is not found.
Experiments on various
UNIX-like systems show that lots of different values occur in this
situation: 0, ENOENT, EBADF, ESRCH, EWOULDBLOCK, EPERM, and probably others.
.\" more precisely:
.\" AIX 5.1 - gives ESRCH
.\" OSF1 4.0g - gives EWOULDBLOCK
.\" libc, glibc up to version 2.6, Irix 6.5 - give ENOENT
.\" glibc since version 2.7 - give 0
.\" FreeBSD 4.8, OpenBSD 3.2, NetBSD 1.6 - give EPERM
.\" SunOS 5.8 - gives EBADF
.\" Tru64 5.1b, HP-UX-11i, SunOS 5.7 - give 0

The
.I pw_dir
field contains the name of the initial working directory of the user.
Login programs use the value of this field to initialize the
.B HOME
environment variable for the login shell.
An application that wants to determine its user's home directory
should inspect the value of
.B HOME
(rather than the value
.IR getpwuid(getuid())\->pw_dir )
since this allows the user to modify their notion of
"the home directory" during a login session.
To determine the (initial) home directory of another user,
it is necessary to use
.I getpwnam("username")\->pw_dir
or similar.
.SH EXAMPLE
The program below demonstrates the use of
.BR getpwnam_r ()
to find the full username and user ID for the username
supplied as a command-line argument.

.nf
#include <pwd.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>

int
main(int argc, char *argv[])
{
    struct passwd pwd;
    struct passwd *result;
    char *buf;
    size_t bufsize;
    int s;

    if (argc != 2) {
        fprintf(stderr, "Usage: %s username\\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    bufsize = sysconf(_SC_GETPW_R_SIZE_MAX);
    if (bufsize == \-1)          /* Value was indeterminate */
        bufsize = 16384;        /* Should be more than enough */

    buf = malloc(bufsize);
    if (buf == NULL) {
        perror("malloc");
        exit(EXIT_FAILURE);
    }

    s = getpwnam_r(argv[1], &pwd, buf, bufsize, &result);
    if (result == NULL) {
        if (s == 0)
            printf("Not found\\n");
        else {
            errno = s;
            perror("getpwnam_r");
        }
        exit(EXIT_FAILURE);
    }

    printf("Name: %s; UID: %ld\\n", pwd.pw_gecos, (long) pwd.pw_uid);
    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR endpwent (3),
.BR fgetpwent (3),
.BR getgrnam (3),
.BR getpw (3),
.BR getpwent (3),
.BR getspnam (3),
.BR putpwent (3),
.BR setpwent (3),
.BR passwd (5)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" This page was taken from the 4.4BSD-Lite CDROM (BSD license)
.\"
.\" %%%LICENSE_START(BSD_ONELINE_CDROM)
.\" This page was taken from the 4.4BSD-Lite CDROM (BSD license)
.\" %%%LICENSE_END
.\"
.\" @(#)getrpcent.3n	2.2 88/08/02 4.0 RPCSRC; from 1.11 88/03/14 SMI
.TH GETRPCENT 3 2014-05-28 "" "Linux Programmer's Manual"
.SH NAME
getrpcent, getrpcbyname, getrpcbynumber, setrpcent, endrpcent \- get
RPC entry
.SH SYNOPSIS
.nf
.B #include <netdb.h>

.BI "struct rpcent *getrpcent(void);"

.BI "struct rpcent *getrpcbyname(const char *" name );

.BI "struct rpcent *getrpcbynumber(int " number );

.BI "void setrpcent(int " stayopen );

.BI "void endrpcent(void);"
.fi
.SH DESCRIPTION
.LP
The
.BR getrpcent (),
.BR getrpcbyname (),
and
.BR getrpcbynumber ()
functions each return a pointer to an object with the
following structure containing the broken-out
fields of an entry in the RPC program number data base.
.in +4n
.nf

struct rpcent {
    char  *r_name;     /* name of server for this RPC program */
    char **r_aliases;  /* alias list */
    long   r_number;   /* RPC program number */
};
.fi
.in
.LP
The members of this structure are:
.RS 4
.TP 12
.I r_name
The name of the server for this RPC program.
.TP
.I r_aliases
A NULL-terminated list of alternate names for the RPC program.
.TP
.I r_number
The RPC program number for this service.
.RE
.LP
The
.BR getrpcent ()
function reads the next entry from the database.
A connection is opened to the database if necessary.
.LP
The
.BR setrpcent ()
function opens a connection to the database,
and sets the next entry to the first entry.
If
.I stayopen
is nonzero,
then the connection to the database
will not be closed between calls to one of the
.BR getrpc* ()
functions.
.LP
The
.BR endrpcent ()
function closes the connection to the database.
.LP
The
.BR getrpcbyname ()
and
.BR getrpcbynumber ()
functions sequentially search from the beginning
of the file until a matching RPC program name or
program number is found, or until end-of-file is encountered.
.SH RETURN VALUE
On success,
.BR getrpcent (),
.BR getrpcbyname (),
and
.BR getrpcbynumber ()
return a pointer to a statically allocated
.I rpcent
structure.
NULL is returned on EOF or error.
.SH FILES
.TP
.I /etc/rpc
RPC program number database.
.SH CONFORMING TO
Not in POSIX.1-2001.
Present on the BSDs, Solaris, and many other systems.
.SH BUGS
All information
is contained in a static area
so it must be copied if it is
to be saved.
.SH SEE ALSO
.BR getrpcent_r (3),
.BR rpc (5),
.BR rpcinfo (8),
.BR ypserv (8)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 2008, Linux Foundation, written by Michael Kerrisk
.\"	<mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH GETRPCENT_R 3  2010-09-10 "GNU" "Linux Programmer's Manual"
.SH NAME
getrpcent_r, getrpcbyname_r, getrpcbynumber_r \- get
RPC entry (reentrant)
.SH SYNOPSIS
.nf
.B #include <netdb.h>
.sp
.BI "int getrpcent_r(struct rpcent *" result_buf ", char *" buf ,
.BI "                size_t " buflen ", struct rpcent **" result );
.sp
.BI "int getrpcbyname_r(const char *" name ,
.BI "                struct rpcent *" result_buf ", char *" buf ,
.BI "                size_t " buflen ", struct rpcent **" result );
.sp
.BI "int getrpcbynumber_r(int " number ,
.BI "                struct rpcent *" result_buf ", char *" buf ,
.BI "                size_t " buflen ", struct rpcent **" result );
.sp
.fi
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.ad l
.in
.sp
.BR getrpcent_r (),
.BR getrpcbyname_r (),
.BR getrpcbynumber_r ():
.RS 4
_BSD_SOURCE || _SVID_SOURCE
.RE
.ad b
.SH DESCRIPTION
The
.BR getrpcent_r (),
.BR getrpcbyname_r (),
and
.BR getrpcbynumber_r ()
functions are the reentrant equivalents of, respectively,
.BR getrpcent (3),
.BR getrpcbyname (3),
and
.BR getrpcbynumber (3).
They differ in the way that the
.I rpcent
structure is returned,
and in the function calling signature and return value.
This manual page describes just the differences from
the nonreentrant functions.

Instead of returning a pointer to a statically allocated
.I rpcent
structure as the function result,
these functions copy the structure into the location pointed to by
.IR result_buf .

The
.I buf
array is used to store the string fields pointed to by the returned
.I rpcent
structure.
(The nonreentrant functions allocate these strings in static storage.)
The size of this array is specified in
.IR buflen .
If
.I buf
is too small, the call fails with the error
.BR ERANGE ,
and the caller must try again with a larger buffer.
(A buffer of length 1024 bytes should be sufficient for most applications.)
.\" I can find no information on the required/recommended buffer size;
.\" the nonreentrant functions use a 1024 byte buffer -- mtk.

If the function call successfully obtains an RPC record, then
.I *result
is set pointing to
.IR result_buf ;
otherwise,
.I *result
is set to NULL.
.SH RETURN VALUE
On success, these functions return 0.
On error, they return one of the positive error numbers listed in ERRORS.

On error, record not found
.RB ( getrpcbyname_r (),
.BR getrpcbynumber_r ()),
or end of input
.RB ( getrpcent_r ())
.I result
is set to NULL.
.SH ERRORS
.TP
.B ENOENT
.RB ( getrpcent_r ())
No more records in database.
.TP
.B ERANGE
.I buf
is too small.
Try again with a larger buffer
(and increased
.IR buflen ).
.SH CONFORMING TO
These functions are GNU extensions.
Functions with similar names exist on some other systems,
though typically with different calling signatures.
.SH SEE ALSO
.BR getrpcent (3),
.BR rpc (5)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" This page was taken from the 4.4BSD-Lite CDROM (BSD license)
.\"
.\" %%%LICENSE_START(BSD_ONELINE_CDROM)
.\" This page was taken from the 4.4BSD-Lite CDROM (BSD license)
.\" %%%LICENSE_END
.\"
.\" @(#)getrpcport.3r	2.2 88/08/02 4.0 RPCSRC; from 1.12 88/02/26 SMI
.TH GETRPCPORT 3 2014-05-28 "" "Linux Programmer's Manual"
.SH NAME
getrpcport \- get RPC port number
.SH SYNOPSIS
.nf
.B "#include <rpc/rpc.h>"
.sp
.BI "int getrpcport(const char *" host ", unsigned long " prognum \
", unsigned long " versnum ", unsigned " proto );
.fi
.SH DESCRIPTION
.BR getrpcport ()
returns the port number for version
.I versnum
of the RPC program
.I prognum
running on
.I host
and using protocol
.IR proto .
It returns 0 if it cannot contact the portmapper, or if
.I prognum
is not registered.
If
.I prognum
is registered but not with version
.IR versnum ,
it will still return a port number (for some version of the program)
indicating that the program is indeed registered.
The version mismatch will be detected upon the first call to the service.
.SH CONFORMING TO
Not in POSIX.1-2001.
Present on the BSDs, Solaris, and many other systems.
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1993 by Thomas Koenig (ig25@rz.uni-karlsruhe.de)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified Wed Jul 28 11:12:07 1993 by Rik Faith (faith@cs.unc.edu)
.\" Modified Fri Sep  8 15:48:13 1995 by Andries Brouwer (aeb@cwi.nl)
.\" Modified 2013-12-31, David Malcolm <dmalcolm@redhat.com>
.\"     Split gets(3) into its own page; fgetc() et al. move to fgetc(3)
.TH GETS 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
gets \- get a string from standard input (DEPRECATED)
.SH SYNOPSIS
.nf
.B #include <stdio.h>
.sp
.BI "char *gets(char *" "s" );
.fi
.SH DESCRIPTION
.IR "Never use this function" .

.BR gets ()
reads a line from
.I stdin
into the buffer pointed to by
.I s
until either a terminating newline or
.BR EOF ,
which it replaces with a null byte (\(aq\e0\(aq).
No check for buffer overrun is performed (see BUGS below).
.SH RETURN VALUE
.BR gets ()
returns
.I s
on success, and NULL
on error or when end of file occurs while no characters have been read.
However, given the lack of buffer overrun checking, there can be no
guarantees that the function will even return.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR gets ()
T}	Thread safety	MT-Safe
.TE

.SH CONFORMING TO
C89, C99, POSIX.1-2001.

LSB deprecates
.BR gets ().
POSIX.1-2008 marks
.BR gets ()
obsolescent.
ISO C11 removes the specification of
.BR gets ()
from the C language, and since version 2.16,
glibc header files don't expose the function declaration if the
.B _ISOC11_SOURCE
feature test macro is defined.
.SH BUGS
Never use
.BR gets ().
Because it is impossible to tell without knowing the data in advance how many
characters
.BR gets ()
will read, and because
.BR gets ()
will continue to store characters past the end of the buffer,
it is extremely dangerous to use.
It has been used to break computer security.
Use
.BR fgets ()
instead.

For more information, see CWE-242 (aka "Use of Inherently Dangerous
Function") at
http://cwe.mitre.org/data/definitions/242.html
.SH SEE ALSO
.BR read (2),
.BR write (2),
.BR ferror (3),
.BR fgetc (3),
.BR fgets (3),
.BR fgetwc (3),
.BR fgetws (3),
.BR fopen (3),
.BR fread (3),
.BR fseek (3),
.BR getline (3),
.BR getwchar (3),
.BR puts (3),
.BR scanf (3),
.BR ungetwc (3),
.BR unlocked_stdio (3),
.BR feature_test_macros (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified Sat Jul 24 19:19:11 1993 by Rik Faith (faith@cs.unc.edu)
.\" Modified Wed Oct 18 20:23:54 1995 by Martin Schulze <joey@infodrom.north.de>
.\" Modified Mon Apr 22 01:50:54 1996 by Martin Schulze <joey@infodrom.north.de>
.\" 2001-07-25 added a clause about NULL proto (Martin Michlmayr or David N. Welton)
.\"
.TH GETSERVENT 3  2008-08-19 "GNU" "Linux Programmer's Manual"
.SH NAME
getservent, getservbyname, getservbyport, setservent, endservent \-
get service entry
.SH SYNOPSIS
.nf
.B #include <netdb.h>
.sp
.B struct servent *getservent(void);
.sp
.BI "struct servent *getservbyname(const char *" name ", const char *" proto );
.sp
.BI "struct servent *getservbyport(int " port ", const char *" proto );
.sp
.BI "void setservent(int " stayopen );
.sp
.B void endservent(void);
.fi
.SH DESCRIPTION
The
.BR getservent ()
function reads the next entry from the services database (see
.BR services (5))
and returns a
.I servent
structure containing
the broken-out fields from the entry.
A connection is opened to the database if necessary.
.PP
The
.BR getservbyname ()
function returns a
.I servent
structure
for the entry from the database
that matches the service
.I name
using protocol
.IR proto .
If
.I proto
is NULL, any protocol will be matched.
A connection is opened to the database if necessary.
.PP
The
.BR getservbyport ()
function returns a
.I servent
structure
for the entry from the database
that matches the port
.I port
(given in network byte order)
using protocol
.IR proto .
If
.I proto
is NULL, any protocol will be matched.
A connection is opened to the database if necessary.
.PP
The
.BR setservent ()
function opens a connection to the database,
and sets the next entry to the first entry.
If
.I stayopen
is nonzero,
then the connection to the database
will not be closed between calls to one of the
.BR getserv* ()
functions.
.PP
The
.BR endservent ()
function closes the connection to the database.
.PP
The
.I servent
structure is defined in
.I <netdb.h>
as follows:
.sp
.in +4n
.nf
struct servent {
    char  *s_name;       /* official service name */
    char **s_aliases;    /* alias list */
    int    s_port;       /* port number */
    char  *s_proto;      /* protocol to use */
}
.fi
.in
.PP
The members of the
.I servent
structure are:
.TP
.I s_name
The official name of the service.
.TP
.I s_aliases
A NULL-terminated list of alternative names for the service.
.TP
.I s_port
The port number for the service given in network byte order.
.TP
.I s_proto
The name of the protocol to use with this service.
.SH RETURN VALUE
The
.BR getservent (),
.BR getservbyname ()
and
.BR getservbyport ()
functions return a pointer to a
statically allocated
.I servent
structure, or NULL if an
error occurs or the end of the file is reached.
.SH FILES
.TP
.I /etc/services
services database file
.SH CONFORMING TO
4.3BSD, POSIX.1-2001.
.SH SEE ALSO
.BR getnetent (3),
.BR getprotoent (3),
.BR getservent_r (3),
.BR services (5)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 2008, Linux Foundation, written by Michael Kerrisk
.\"	<mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH GETSERVENT_R 3  2010-09-10 "GNU" "Linux Programmer's Manual"
.SH NAME
getservent_r, getservbyname_r, getservbyport_r \- get
service entry (reentrant)
.SH SYNOPSIS
.nf
.B #include <netdb.h>
.sp
.BI "int getservent_r(struct servent *" result_buf ", char *" buf ,
.BI "                size_t " buflen ", struct servent **" result );
.sp
.BI "int getservbyname_r(const char *" name ", const char *" proto ,
.BI "                struct servent *" result_buf ", char *" buf ,
.BI "                size_t " buflen ", struct servent **" result );
.sp
.BI "int getservbyport_r(int " port ", const char *" proto ,
.BI "                struct servent *" result_buf ", char *" buf ,
.BI "                size_t " buflen ", struct servent **" result );
.sp
.fi
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.ad l
.in
.sp
.BR getservent_r (),
.BR getservbyname_r (),
.BR getservbyport_r ():
.RS 4
_BSD_SOURCE || _SVID_SOURCE
.RE
.ad b
.SH DESCRIPTION
The
.BR getservent_r (),
.BR getservbyname_r (),
and
.BR getservbyport_r ()
functions are the reentrant equivalents of, respectively,
.BR getservent (3),
.BR getservbyname (3),
and
.BR getservbyport (3).
They differ in the way that the
.I servent
structure is returned,
and in the function calling signature and return value.
This manual page describes just the differences from
the nonreentrant functions.

Instead of returning a pointer to a statically allocated
.I servent
structure as the function result,
these functions copy the structure into the location pointed to by
.IR result_buf .

The
.I buf
array is used to store the string fields pointed to by the returned
.I servent
structure.
(The nonreentrant functions allocate these strings in static storage.)
The size of this array is specified in
.IR buflen .
If
.I buf
is too small, the call fails with the error
.BR ERANGE ,
and the caller must try again with a larger buffer.
(A buffer of length 1024 bytes should be sufficient for most applications.)
.\" I can find no information on the required/recommended buffer size;
.\" the nonreentrant functions use a 1024 byte buffer -- mtk.

If the function call successfully obtains a service record, then
.I *result
is set pointing to
.IR result_buf ;
otherwise,
.I *result
is set to NULL.
.SH RETURN VALUE
On success, these functions return 0.
On error, they return one of the positive error numbers listed in errors.

On error, record not found
.RB ( getservbyname_r (),
.BR getservbyport_r ()),
or end of input
.RB ( getservent_r ())
.I result
is set to NULL.
.SH ERRORS
.TP
.B ENOENT
.RB ( getservent_r ())
No more records in database.
.TP
.B ERANGE
.I buf
is too small.
Try again with a larger buffer
(and increased
.IR buflen ).
.SH CONFORMING TO
These functions are GNU extensions.
Functions with similar names exist on some other systems,
though typically with different calling signatures.
.SH EXAMPLE
The program below uses
.BR getservbyport_r ()
to retrieve the service record for the port and protocol named
in its first command-line argument.
If a third (integer) command-line argument is supplied,
it is used as the initial value for
.IR buflen ;
if
.BR getservbyport_r ()
fails with the error
.BR ERANGE ,
the program retries with larger buffer sizes.
The following shell session shows a couple of sample runs:
.in +4n
.nf

.RB "$" " ./a.out 7 tcp 1"
ERANGE! Retrying with larger buffer
getservbyport_r() returned: 0 (success)  (buflen=87)
s_name=echo; s_proto=tcp; s_port=7; aliases=
.RB "$" " ./a.out 77777 tcp"
getservbyport_r() returned: 0 (success)  (buflen=1024)
Call failed/record not found
.fi
.in
.SS Program source
\&
.nf
#define _GNU_SOURCE
#include <ctype.h>
#include <netdb.h>
#include <stdlib.h>
#include <stdio.h>
#include <errno.h>
#include <string.h>

#define MAX_BUF 10000

int
main(int argc, char *argv[])
{
    int buflen, erange_cnt, port, s;
    struct servent result_buf;
    struct servent *result;
    char buf[MAX_BUF];
    char *protop;
    char **p;

    if (argc < 3) {
        printf("Usage: %s port\-num proto\-name [buflen]\\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    port = htons(atoi(argv[1]));
    protop = (strcmp(argv[2], "null") == 0 ||
              strcmp(argv[2], "NULL") == 0) ?  NULL : argv[2];

    buflen = 1024;
    if (argc > 3)
        buflen = atoi(argv[3]);

    if (buflen > MAX_BUF) {
        printf("Exceeded buffer limit (%d)\\n", MAX_BUF);
        exit(EXIT_FAILURE);
    }

    erange_cnt = 0;
    do {
        s = getservbyport_r(port, protop, &result_buf,
                     buf, buflen, &result);
        if (s == ERANGE) {
            if (erange_cnt == 0)
                printf("ERANGE! Retrying with larger buffer\\n");
            erange_cnt++;

            /* Increment a byte at a time so we can see exactly
               what size buffer was required */

            buflen++;

            if (buflen > MAX_BUF) {
                printf("Exceeded buffer limit (%d)\\n", MAX_BUF);
                exit(EXIT_FAILURE);
            }
        }
    } while (s == ERANGE);

    printf("getservbyport_r() returned: %s  (buflen=%d)\\n",
            (s == 0) ? "0 (success)" : (s == ENOENT) ? "ENOENT" :
            strerror(s), buflen);

    if (s != 0 || result == NULL) {
        printf("Call failed/record not found\\n");
        exit(EXIT_FAILURE);
    }

    printf("s_name=%s; s_proto=%s; s_port=%d; aliases=",
                result_buf.s_name, result_buf.s_proto,
                ntohs(result_buf.s_port));
    for (p = result_buf.s_aliases; *p != NULL; p++)
        printf("%s ", *p);
    printf("\\n");

    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR getservent (3),
.BR services (5)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2003 Andries Brouwer (aeb@cwi.nl) and
.\" Walter Harms (walter.harms@informatik.uni-oldenburg.de)
.\"
.\" %%%LICENSE_START(GPL_NOVERSION_ONELINE)
.\" Distributed under GPL
.\" %%%LICENSE_END
.\"
.TH GETSPNAM 3  2015-01-22 "GNU" "Linux Programmer's Manual"
.SH NAME
getspnam, getspnam_r, getspent, getspent_r, setspent, endspent,
fgetspent, fgetspent_r, sgetspent, sgetspent_r, putspent,
lckpwdf, ulckpwdf \- get shadow password file entry
.SH SYNOPSIS
.nf
/* General shadow password file API */
.br
.B #include <shadow.h>
.sp
.BI "struct spwd *getspnam(const char *" name );
.sp
.B struct spwd *getspent(void);
.sp
.B void setspent(void);
.sp
.B void endspent(void);
.sp
.BI "struct spwd *fgetspent(FILE *" stream );
.sp
.BI "struct spwd *sgetspent(const char *" s );
.sp
.BI "int putspent(const struct spwd *" p ", FILE *" stream );
.sp
.B int lckpwdf(void);
.sp
.B int ulckpwdf(void);
.sp
/* GNU extension */
.br
.B #include <shadow.h>
.sp
.BI "int getspent_r(struct spwd *" spbuf ,
.br
.BI "        char *" buf ", size_t " buflen ", struct spwd **" spbufp );
.sp
.BI "int getspnam_r(const char *" name ", struct spwd *" spbuf ,
.br
.BI "        char *" buf ", size_t " buflen ", struct spwd **" spbufp );
.sp
.BI "int fgetspent_r(FILE *" stream ", struct spwd *" spbuf ,
.br
.BI "        char *" buf ", size_t " buflen ", struct spwd **" spbufp );
.sp
.BI "int sgetspent_r(const char *" s ", struct spwd *" spbuf ,
.br
.BI "        char *" buf ", size_t " buflen ", struct spwd **" spbufp );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR getspent_r (),
.BR getspnam_r (),
.BR fgetspent_r (),
.BR sgetspent_r ():
.RS 4
_BSD_SOURCE || _SVID_SOURCE
.RE
.ad b
.SH DESCRIPTION
Long ago it was considered safe to have encrypted passwords openly
visible in the password file.
When computers got faster and people
got more security-conscious, this was no longer acceptable.
Julianne Frances Haugh implemented the shadow password suite
that keeps the encrypted passwords in
the shadow password database
(e.g., the local shadow password file
.IR /etc/shadow ,
NIS, and LDAP),
readable only by root.
.LP
The functions described below resemble those for
the traditional password database
(e.g., see
.BR getpwnam (3)
and
.BR getpwent (3)).
.\" FIXME . I've commented out the following for the
.\" moment.  The relationship between PAM and nsswitch.conf needs
.\" to be clearly documented in one place, which is pointed to by
.\" the pages for the user, group, and shadow password functions.
.\" (Jul 2005, mtk)
.\"
.\" This shadow password setup has been superseded by PAM
.\" (pluggable authentication modules), and the file
.\" .I /etc/nsswitch.conf
.\" now describes the sources to be used.
.LP
The
.BR getspnam ()
function returns a pointer to a structure containing
the broken-out fields of the record in the shadow password database
that matches the username
.IR name .
.LP
The
.BR getspent ()
function returns a pointer to the next entry in the shadow password
database.
The position in the input stream is initialized by
.BR setspent ().
When done reading, the program may call
.BR endspent ()
so that resources can be deallocated.
.\" some systems require a call of setspent() before the first getspent()
.\" glibc does not
.LP
The
.BR fgetspent ()
function is similar to
.BR getspent ()
but uses the supplied stream instead of the one implicitly opened by
.BR setspent ().
.LP
The
.BR sgetspent ()
function parses the supplied string
.I s
into a struct
.IR spwd .
.LP
The
.BR putspent ()
function writes the contents of the supplied struct
.I spwd
.I *p
as a text line in the shadow password file format to
.IR stream .
String entries with value NULL and numerical entries with value \-1
are written as an empty string.
.LP
The
.BR lckpwdf ()
function is intended to protect against multiple simultaneous accesses
of the shadow password database.
It tries to acquire a lock, and returns 0 on success,
or \-1 on failure (lock not obtained within 15 seconds).
The
.BR ulckpwdf ()
function releases the lock again.
Note that there is no protection against direct access of the shadow
password file.
Only programs that use
.BR lckpwdf ()
will notice the lock.
.LP
These were the functions that formed the original shadow API.
They are widely available.
.\" Also in libc5
.\" SUN doesn't have sgetspent()
.SS Reentrant versions
Analogous to the reentrant functions for the password database, glibc
also has reentrant functions for the shadow password database.
The
.BR getspnam_r ()
function is like
.BR getspnam ()
but stores the retrieved shadow password structure in the space pointed to by
.IR spbuf .
This shadow password structure contains pointers to strings, and these strings
are stored in the buffer
.I buf
of size
.IR buflen .
A pointer to the result (in case of success) or NULL (in case no entry
was found or an error occurred) is stored in
.IR *spbufp .
.LP
The functions
.BR getspent_r (),
.BR fgetspent_r (),
and
.BR sgetspent_r ()
are similarly analogous to their nonreentrant counterparts.
.LP
Some non-glibc systems also have functions with these names,
often with different prototypes.
.\" SUN doesn't have sgetspent_r()
.SS Structure
The shadow password structure is defined in \fI<shadow.h>\fP as follows:
.sp
.in +4n
.nf
struct spwd {
    char *sp_namp;     /* Login name */
    char *sp_pwdp;     /* Encrypted password */
    long  sp_lstchg;   /* Date of last change
                          (measured in days since
                          1970-01-01 00:00:00 +0000 (UTC)) */
    long  sp_min;      /* Min # of days between changes */
    long  sp_max;      /* Max # of days between changes */
    long  sp_warn;     /* # of days before password expires
                          to warn user to change it */
    long  sp_inact;    /* # of days after password expires
                          until account is disabled */
    long  sp_expire;   /* Date when account expires
                          (measured in days since
                          1970-01-01 00:00:00 +0000 (UTC)) */
    unsigned long sp_flag;  /* Reserved */
};
.fi
.in
.SH RETURN VALUE
The functions that return a pointer return NULL if no more entries
are available or if an error occurs during processing.
The functions which have \fIint\fP as the return value return 0 for
success and \-1 for failure, with
.I errno
set to indicate the cause of the error.
.LP
For the nonreentrant functions, the return value may point to static area,
and may be overwritten by subsequent calls to these functions.
.LP
The reentrant functions return zero on success.
In case of error, an error number is returned.
.SH ERRORS
.TP
.B EACCES
The caller does not have permission to access the shadow password file.
.TP
.B ERANGE
Supplied buffer is too small.
.SH FILES
.TP
.I /etc/shadow
local shadow password database file
.TP
.I /etc/.pwd.lock
lock file
.LP
The include file
.I <paths.h>
defines the constant
.B _PATH_SHADOW
to the pathname of the shadow password file.
.SH CONFORMING TO
The shadow password database and its associated API are
not specified in POSIX.1-2001.
However, many other systems provide a similar API.
.SH SEE ALSO
.BR getgrnam (3),
.BR getpwnam (3),
.BR getpwnam_r (3),
.BR shadow (5)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2007 Michael Kerrisk <mtk.manpages@gmail.com>
.\" and Copyright (C) 2007 Justin Pryzby <pryzbyj@justinpryzby.com>
.\"
.\" %%%LICENSE_START(PERMISSIVE_MISC)
.\" Permission is hereby granted, free of charge, to any person obtaining
.\" a copy of this software and associated documentation files (the
.\" "Software"), to deal in the Software without restriction, including
.\" without limitation the rights to use, copy, modify, merge, publish,
.\" distribute, sublicense, and/or sell copies of the Software, and to
.\" permit persons to whom the Software is furnished to do so, subject to
.\" the following conditions:
.\"
.\" The above copyright notice and this permission notice shall be
.\" included in all copies or substantial portions of the Software.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
.\" EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
.\" MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
.\" IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
.\" CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
.\" TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
.\" SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
.\" %%%LICENSE_END
.\"
.TH GETSUBOPT 3 2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
getsubopt \- parse suboption arguments from a string
.SH SYNOPSIS
.B #include <stdlib.h>

.BI "int getsubopt(char **"optionp ", char * const *" tokens \
", char **" valuep );
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR getsubopt ():
.ad l
.RS 4
.PD 0
_XOPEN_SOURCE\ >= 500 ||
_XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED
.br
|| /* Since glibc 2.12: */ _POSIX_C_SOURCE\ >=\ 200809L
.PD
.RE
.ad
.SH DESCRIPTION
.BR getsubopt ()
parses the list of comma-separated suboptions provided in
.IR optionp .
(Such a suboption list is typically produced when
.BR getopt (3)
is used to parse a command line;
see for example the \fI-o\fP option of
.BR mount (8).)
Each suboption may include an associated value,
which is separated from the suboption name by an equal sign.
The following is an example of the kind of string
that might be passed in
.IR optionp :
.sp
.in +4n
.B ro,name=xyz
.in

The
.I tokens
argument is a pointer to a NULL-terminated array of pointers to the tokens that
.BR getsubopt ()
will look for in
.IR optionp .
The tokens should be distinct, null-terminated strings containing at
least one character, with no embedded equal signs or commas.

Each call to
.BR getsubopt ()
returns information about the next unprocessed suboption in
.IR optionp .
The first equal sign in a suboption (if any) is interpreted as a
separator between the name and the value of that suboption.
The value extends to the next comma,
or (for the last suboption) to the end of the string.
If the name of the suboption matches a known name from
.IR tokens ,
and a value string was found,
.BR getsubopt ()
sets
.I *valuep
to the address of that string.
The first comma in
.I optionp
is overwritten with a null byte, so
.I *valuep
is precisely the "value string" for that suboption.

If the suboption is recognized, but no value string was found,
.I *valuep
is set to NULL.

When
.BR getsubopt ()
returns,
.I optionp
points to the next suboption,
or to the null byte (\(aq\\0\(aq) at the end of the
string if the last suboption was just processed.
.SH RETURN VALUE
If the first suboption in
.I optionp
is recognized,
.BR getsubopt ()
returns the index of the matching suboption element in
.IR tokens .
Otherwise, \-1 is returned and
.I *valuep
is the entire
.IB name [= value ]
string.

Since
.I *optionp
is changed, the first suboption before the call to
.BR getsubopt ()
is not (necessarily) the same as the first suboption after
.BR getsubopt ().
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR getsubopt ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
POSIX.1-2001.
.SH NOTES

Since
.BR getsubopt ()
overwrites any commas it finds in the string
.IR *optionp ,
that string must be writable; it cannot be a string constant.
.SH EXAMPLE
The following program expects suboptions following a "\-o" option.

.nf
#define _XOPEN_SOURCE 500
#include <stdlib.h>
#include <assert.h>
#include <stdio.h>

int
main(int argc, char **argv)
{
    enum {
        RO_OPT = 0,
        RW_OPT,
        NAME_OPT
    };
    char *const token[] = {
        [RO_OPT]   = "ro",
        [RW_OPT]   = "rw",
        [NAME_OPT] = "name",
        NULL
    };
    char *subopts;
    char *value;
    int opt;

    int readonly = 0;
    int readwrite = 0;
    char *name = NULL;
    int errfnd = 0;

    while ((opt = getopt(argc, argv, "o:")) != \-1) {
        switch (opt) {
        case \(aqo\(aq:
            subopts = optarg;
            while (*subopts != \(aq\\0\(aq && !errfnd) {

            switch (getsubopt(&subopts, token, &value)) {
            case RO_OPT:
                readonly = 1;
                break;

            case RW_OPT:
                readwrite = 1;
                break;

            case NAME_OPT:
                if (value == NULL) {
                    fprintf(stderr, "Missing value for "
                            "suboption \(aq%s\(aq\\n", token[NAME_OPT]);
                    errfnd = 1;
                    continue;
                }

                name = value;
                break;

            default:
                fprintf(stderr, "No match found "
                        "for token: /%s/\\n", value);
                errfnd = 1;
                break;
            }
        }
        if (readwrite && readonly) {
            fprintf(stderr, "Only one of \(aq%s\(aq and \(aq%s\(aq can be "
                    "specified\\n", token[RO_OPT], token[RW_OPT]);
            errfnd = 1;
        }
        break;

        default:
            errfnd = 1;
        }
    }

    if (errfnd || argc == 1) {
        fprintf(stderr, "\\nUsage: %s \-o <suboptstring>\\n", argv[0]);
        fprintf(stderr, "suboptions are \(aqro\(aq, \(aqrw\(aq, "
                "and \(aqname=<value>\(aq\\n");
        exit(EXIT_FAILURE);
    }

    /* Remainder of program... */

    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR getopt (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\"  Copyright 2002 walter harms (walter.harms@informatik.uni-oldenburg.de)
.\"
.\" %%%LICENSE_START(GPL_NOVERSION_ONELINE)
.\" Distributed under GPL
.\" %%%LICENSE_END
.\"
.TH GETTTYENT 3 2015-03-02  "GNU" "Linux Programmer's Manual"
.SH NAME
getttyent, getttynam, setttyent, endttyent \- get ttys file entry
.SH SYNOPSIS
.B "#include <ttyent.h>"
.sp
.B "struct ttyent *getttyent(void);"
.sp
.BI "struct ttyent *getttynam(const char *" name );
.sp
.B "int setttyent(void);"
.sp
.B "int endttyent(void);"
.SH DESCRIPTION
These functions provide an interface to the file
.B _PATH_TTYS
(e.g.,
.IR /etc/ttys ).

The function
.BR setttyent ()
opens the file or rewinds it if already open.

The function
.BR endttyent ()
closes the file.

The function
.BR getttynam ()
searches for a given terminal name in the file.
It returns a pointer to a
.I ttyent
structure (description below).

The function
.BR getttyent ()
opens the file
.B _PATH_TTYS
(if necessary) and returns the first entry.
If the file is already open, the next entry.
The
.I ttyent
structure has the form:
.in +4n
.nf

struct ttyent {
    char *ty_name;     /* terminal device name */
    char *ty_getty;    /* command to execute, usually getty */
    char *ty_type;     /* terminal type for termcap */
    int   ty_status;   /* status flags */
    char *ty_window;   /* command to start up window manager */
    char *ty_comment;  /* comment field */
};
.fi
.in

.I ty_status
can be:
.br
.nf

#define TTY_ON     0x01  /* enable logins (start ty_getty program) */
#define TTY_SECURE 0x02  /* allow UID 0 to login */
.fi
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw25 lb lb
l l l.
Interface	Attribute	Value
T{
.BR getttyent (),
.BR setttyent (),
.BR endttyent (),
.BR getttynam ()
T}	Thread safety	MT-Unsafe race:ttyent
.TE
.SH CONFORMING TO
Not in POSIX.1-2001.
Present on the BSDs, and perhaps other systems.
.SH NOTES
Under Linux, the file
.IR /etc/ttys ,
and the functions described above, are not used.
.SH SEE ALSO
.BR ttyname (3),
.BR ttyslot (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2002 Andries Brouwer <aeb@cwi.nl>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" This replaces an earlier man page written by Walter Harms
.\" <walter.harms@informatik.uni-oldenburg.de>.
.\"
.TH GETUMASK 3 2010-09-10 "GNU" "Linux Programmer's Manual"
.SH NAME
getumask \- get file creation mask
.SH SYNOPSIS
.BR "#define _GNU_SOURCE" "             /* See feature_test_macros(7) */"
.br
.B "#include <sys/types.h>"
.br
.B "#include <sys/stat.h>"
.sp
.B "mode_t getumask(void);"
.SH DESCRIPTION
This function returns the current file creation mask.
It is equivalent to
.in +4n
.nf

mode_t getumask(void)
{
    mode_t mask = umask( 0 );
    umask(mask);
    return mask;
}

.fi
.in
except that it is documented to be thread-safe (that is, shares
a lock with the
.BR umask (2)
library call).
.SH CONFORMING TO
This is a vaporware GNU extension.
.SH NOTES
This function is documented but not implemented yet in glibc,
as at version 2.9.
.SH SEE ALSO
.BR umask (2)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified Sat Jul 24 19:17:53 1993 by Rik Faith (faith@cs.unc.edu)
.TH GETUSERSHELL 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
getusershell, setusershell, endusershell \- get permitted user shells
.SH SYNOPSIS
.nf
.B #include <unistd.h>
.sp
.B char *getusershell(void);
.sp
.B void setusershell(void);
.sp
.B void endusershell(void);
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR getusershell (),
.BR setusershell (),
.BR endusershell ():
.RS 4
_BSD_SOURCE || (_XOPEN_SOURCE && _XOPEN_SOURCE\ <\ 500)
.RE
.ad b
.SH DESCRIPTION
The
.BR getusershell ()
function returns the next line from the file
.IR /etc/shells ,
opening the file if necessary.
The line should contain
the pathname of a valid user shell.
If
.I /etc/shells
does not exist or
is unreadable,
.BR getusershell ()
behaves as if
.I /bin/sh
and
.I /bin/csh
were listed in the file.
.PP
The
.BR setusershell ()
function rewinds
.IR /etc/shells .
.PP
The
.BR endusershell ()
function closes
.IR /etc/shells .
.SH RETURN VALUE
The
.BR getusershell ()
function returns NULL on end-of-file.
.SH FILES
.nf
/etc/shells
.fi
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw31 lb lb
l l l.
Interface	Attribute	Value
T{
.BR getusershell (),
.BR setusershell (),
.br
.BR endusershell ()
T}	Thread safety	MT-Unsafe
.TE
.SH CONFORMING TO
4.3BSD.
.SH SEE ALSO
.BR shells (5)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1995 Mark D. Roth (roth@uiuc.edu)
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Solaris manpages
.\"
.\" Modified Thu Jul 25 14:43:46 MET DST 1996 by Michael Haardt
.\"     <michael@cantor.informatik.rwth-aachen.de>
.\"
.TH GETUTENT 3 2015-04-19 "" "Linux Programmer's Manual"
.SH NAME
getutent, getutid, getutline, pututline, setutent, endutent,
utmpname \- access utmp file entries
.SH SYNOPSIS
.B #include <utmp.h>
.sp
.B struct utmp *getutent(void);
.br
.BI "struct utmp *getutid(const struct utmp *" ut );
.br
.BI "struct utmp *getutline(const struct utmp *" ut );
.sp
.BI "struct utmp *pututline(const struct utmp *" ut );
.sp
.B void setutent(void);
.br
.B void endutent(void);
.sp
.BI "int utmpname(const char *" file );
.SH DESCRIPTION
New applications should use the POSIX.1-specified "utmpx" versions of
these functions; see CONFORMING TO.

.BR utmpname ()
sets the name of the utmp-format file for the other utmp
functions to access.
If
.BR utmpname ()
is not used to set the filename
before the other functions are used, they assume \fB_PATH_UTMP\fP, as
defined in \fI<paths.h>\fP.
.PP
.BR setutent ()
rewinds the file pointer to the beginning of the utmp file.
It is generally a good idea to call it before any of the other
functions.
.PP
.BR endutent ()
closes the utmp file.
It should be called when the user
code is done accessing the file with the other functions.
.PP
.BR getutent ()
reads a line from the current file position in the utmp file.
It returns a pointer to a structure containing the fields of
the line.
The definition of this structure is shown in
.BR utmp (5).
.PP
.BR getutid ()
searches forward from the current file position in the utmp
file based upon \fIut\fP.
If \fIut\->ut_type\fP is one of \fBRUN_LVL\fP,
\fBBOOT_TIME\fP, \fBNEW_TIME\fP, or \fBOLD_TIME\fP,
.BR getutid ()
will
find the first entry whose \fIut_type\fP field matches \fIut\->ut_type\fP.
If \fIut\->ut_type\fP is one of \fBINIT_PROCESS\fP, \fBLOGIN_PROCESS\fP,
\fBUSER_PROCESS\fP, or \fBDEAD_PROCESS\fP,
.BR getutid ()
will find the
first entry whose
.I ut_id
field matches \fIut\->ut_id\fP.
.PP
.BR getutline ()
searches forward from the current file position in the utmp file.
It scans entries whose
.I ut_type
is \fBUSER_PROCESS\fP
or \fBLOGIN_PROCESS\fP and returns the first one whose
.I ut_line
field
matches \fIut\->ut_line\fP.
.PP
.BR pututline ()
writes the
.I utmp
structure \fIut\fP into the utmp file.
It uses
.BR getutid ()
to search for the proper place in the file to insert
the new entry.
If it cannot find an appropriate slot for \fIut\fP,
.BR pututline ()
will append the new entry to the end of the file.
.SH RETURN VALUE
.BR getutent (),
.BR getutid (),
and
.BR getutline ()
return a pointer to a \fIstruct utmp\fP on success,
and NULL on failure (which includes the "record not found" case).
This \fIstruct utmp\fP is allocated in static storage, and may be
overwritten by subsequent calls.

On success
.BR pututline ()
returns
.IR ut ;
on failure, it returns NULL.

.BR utmpname ()
returns 0 if the new name was successfully stored, or \-1 on failure.

In the event of an error, these functions
.I errno
set to indicate the cause.
.SH ERRORS
.TP
.B ENOMEM
Out of memory.
.TP
.B ESRCH
Record not found.
.PP
.BR setutent (),
.BR pututline (),
and the
.BR getut* ()
functions can also fail for the reasons described in
.BR open (2).
.SH FILES
/var/run/utmp	database of currently logged-in users
.br
/var/log/wtmp	database of past user logins
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lbw28
l l l.
Interface	Attribute	Value
T{
.BR getutent ()
T}	Thread safety	T{
MT-Unsafe init race:utent
.br
race:utentbuf sig:ALRM timer
T}
T{
.BR getutid (),
.br
.BR getutline ()
T}	Thread safety	T{
MT-Unsafe init race:utent
.br
sig:ALRM timer
T}
T{
.BR pututline ()
T}	Thread safety	T{
MT-Unsafe race:utent
.br
sig:ALRM timer
T}
T{
.BR setutent (),
.br
.BR endutent (),
.br
.BR utmpname ()
T}	Thread safety	MT-Unsafe race:utent
.TE

In the above table,
.I utent
in
.I race:utent
signifies that if any of the functions
.BR setutent (3),
.BR getutent (3),
.BR getutid (3),
.BR getutline (3),
.BR pututline (3),
.BR utmpname (3),
or
.BR endutent (3)
are used in parallel in different threads of a program,
then data races could occur.
.SH CONFORMING TO
XPG2, SVr4.
.LP
In XPG2 and SVID 2 the function
.BR pututline ()
is documented to return void, and that is what it does on many systems
(AIX, HP-UX).
HP-UX introduces a new function
.BR _pututline ()
with the prototype given above for
.BR pututline ().
.LP
All these functions are obsolete now on non-Linux systems.
POSIX.1-2001, following SUSv1,
does not have any of these functions, but instead uses
.sp
.B #include <utmpx.h>
.sp
.B struct utmpx *getutxent(void);
.br
.B struct utmpx *getutxid(const struct utmpx *);
.br
.B struct utmpx *getutxline(const struct utmpx *);
.br
.B struct utmpx *pututxline(const struct utmpx *);
.br
.B void setutxent(void);
.br
.B void endutxent(void);
.PP
These functions are provided by glibc,
and perform the same task as their equivalents without the "x", but use
.IR "struct utmpx" ,
defined on Linux to be the same as
.IR "struct utmp" .
For completeness, glibc also provides
.BR utmpxname (),
although this function is not specified by POSIX.1.
.PP
On some other systems,
the \fIutmpx\fP structure is a superset of the \fIutmp\fP structure,
with additional fields, and larger versions of the existing fields,
and parallel files are maintained, often
.I /var/*/utmpx
and
.IR /var/*/wtmpx .
.LP
Linux glibc on the other hand does not use a parallel \fIutmpx\fP file
since its \fIutmp\fP structure is already large enough.
The "x" functions listed above are just aliases for
their counterparts without the "x" (e.g.,
.BR getutxent ()
is an alias for
.BR getutent ()).
.SH NOTES
.SS Glibc notes
The above functions are not thread-safe.
Glibc adds reentrant versions
.sp
.nf
.BR "#define _GNU_SOURCE" "    /* or _SVID_SOURCE or _BSD_SOURCE;
.RB "\&                          see " feature_test_macros "(7) */"
.B #include <utmp.h>
.sp
.BI "int getutent_r(struct utmp *" ubuf ", struct utmp **" ubufp );
.sp
.BI "int getutid_r(struct utmp *" ut ,
.BI "              struct utmp *" ubuf ", struct utmp **" ubufp );
.sp
.BI "int getutline_r(struct utmp *" ut ,
.BI "                struct utmp *" ubuf ", struct utmp **" ubufp );
.fi
.sp
These functions are GNU extensions, analogs of the functions of the
same name without the _r suffix.
The
.I ubuf
argument gives these functions a place to store their result.
On success, they return 0, and a pointer to the result is written in
.IR *ubufp .
On error, these functions return \-1.
There are no utmpx equivalents of the above functions.
(POSIX.1 does not specify such functions.)
.SH EXAMPLE
The following example adds and removes a utmp record, assuming it is run
from within a pseudo terminal.
For usage in a real application, you
should check the return values of
.BR getpwuid (3)
and
.BR ttyname (3).
.PP
.nf
#include <string.h>
#include <stdlib.h>
#include <pwd.h>
#include <unistd.h>
#include <utmp.h>

int
main(int argc, char *argv[])
{
    struct utmp entry;

    system("echo before adding entry:;who");

    entry.ut_type = USER_PROCESS;
    entry.ut_pid = getpid();
    strcpy(entry.ut_line, ttyname(STDIN_FILENO) + strlen("/dev/"));
    /* only correct for ptys named /dev/tty[pqr][0\-9a\-z] */
    strcpy(entry.ut_id, ttyname(STDIN_FILENO) + strlen("/dev/tty"));
    time(&entry.ut_time);
    strcpy(entry.ut_user, getpwuid(getuid())\->pw_name);
    memset(entry.ut_host, 0, UT_HOSTSIZE);
    entry.ut_addr = 0;
    setutent();
    pututline(&entry);

    system("echo after adding entry:;who");

    entry.ut_type = DEAD_PROCESS;
    memset(entry.ut_line, 0, UT_LINESIZE);
    entry.ut_time = 0;
    memset(entry.ut_user, 0, UT_NAMESIZE);
    setutent();
    pututline(&entry);

    system("echo after removing entry:;who");

    endutent();
    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR getutmp (3),
.BR utmp (5)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2008, Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH GETUTMP 3 2015-03-02 "Linux" "Linux Programmer's Manual"
.SH NAME
getutmp, getutmpx \- copy utmp structure to utmpx, and vice versa
.SH SYNOPSIS
.nf
.BR "#define _GNU_SOURCE" "             /* See feature_test_macros(7) */"
.B #include <utmpx.h>

.BI " void getutmp(const struct utmpx *" ux ", struct utmp *" u );
.BI " void getutmpx(const struct utmp *" u ", struct utmpx *" ux );
.fi
.SH DESCRIPTION
The
.BR getutmp ()
function copies the fields of the
.I utmpx
structure pointed to by
.I ux
to the corresponding fields of the
.I utmp
structure pointed to by
.IR u .
The
.BR getutmpx ()
function performs the converse operation.
.SH RETURN VALUE
These functions do not return a value.
.SH VERSIONS
These functions first appeared in glibc in version 2.1.1.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw21 lb lb
l l l.
Interface	Attribute	Value
T{
.BR getutmp (),
.BR getutmpx ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
These functions are nonstandard, but appear on a few other systems,
such as Solaris and NetBSD.
.SH NOTES
These functions exist primarily for compatibility with other
systems where the
.I utmp
and
.I utmpx
structures contain different fields,
or the size of corresponding fields differs.
.\" e.g., on Solaris, the utmpx structure is rather larger than utmp.
On Linux, the two structures contain the same fields,
and the fields have the same sizes.
.SH SEE ALSO
.BR utmpdump (1),
.BR getutent (3),
.BR utmp (5)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1995 by Jim Van Zandt <jrv@vanzandt.mv.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH GETW 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
getw, putw \- input and output of words (ints)
.SH SYNOPSIS
.nf
.B #include <stdio.h>
.sp
.BI "int getw(FILE *" stream );

.BI "int putw(int " w ", FILE *" stream );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR getw (),
.BR putw ():
.ad l
.PD 0
.RS 4
.TP 4
Since glibc 2.3.3:
_SVID_SOURCE || _BSD_SOURCE ||
.br
(_XOPEN_SOURCE &&
    !(_POSIX_C_SOURCE\ >=\ 200112L || _XOPEN_SOURCE\ >=\ 600))
.TP
Before glibc 2.3.3:
_SVID_SOURCE || _BSD_SOURCE || _XOPEN_SOURCE
.RE
.PD
.ad
.SH DESCRIPTION
.BR getw ()
reads a word (that is, an \fIint\fP) from \fIstream\fP.
It's provided for compatibility with SVr4.
We recommend you use
.BR fread (3)
instead.
.P
.BR putw ()
writes the word \fIw\fP (that is,
an \fIint\fP) to \fIstream\fP.
It is provided for compatibility with SVr4, but we recommend you use
.BR fwrite (3)
instead.
.SH RETURN VALUE
Normally,
.BR getw ()
returns the word read, and
.BR putw ()
returns 0.
On error, they return \fBEOF\fP.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw14 lb lb
l l l.
Interface	Attribute	Value
T{
.BR getw (),
.BR putw ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
SVr4, SUSv2.
Not present in POSIX.1-2001.
.SH BUGS
The value returned on error is also a legitimate data value.
.BR ferror (3)
can be used to distinguish between the two cases.
.SH SEE ALSO
.BR ferror (3),
.BR fread (3),
.BR fwrite (3),
.BR getc (3),
.BR putc (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) Bruno Haible <haible@clisp.cons.org>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_ONEPARA)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"   GNU glibc-2 source code and manual
.\"   Dinkumware C library reference http://www.dinkumware.com/
.\"   OpenGroup's Single UNIX specification
.\"      http://www.UNIX-systems.org/online.html
.\"   ISO/IEC 9899:1999
.\"
.TH GETWCHAR 3  2015-03-29 "GNU" "Linux Programmer's Manual"
.SH NAME
getwchar \- read a wide character from standard input
.SH SYNOPSIS
.nf
.B #include <wchar.h>
.sp
.B "wint_t getwchar(void);"
.fi
.SH DESCRIPTION
The
.BR getwchar ()
function is the wide-character equivalent of the
.BR getchar (3)
function.
It reads a wide character from
.I stdin
and returns
it.
If the end of stream is reached, or if
.I ferror(stdin)
becomes true, it returns
.BR WEOF .
If a wide-character conversion error occurs, it sets
.I errno
to
.B EILSEQ
and returns
.BR WEOF .
.PP
For a nonlocking counterpart, see
.BR unlocked_stdio (3).
.SH RETURN VALUE
The
.BR getwchar ()
function returns the next wide-character from
standard input, or
.BR WEOF .
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR getwchar ()
T}	Thread safety	MT-Safe
.TE

.SH CONFORMING TO
C99.
.SH NOTES
The behavior of
.BR getwchar ()
depends on the
.B LC_CTYPE
category of the
current locale.
.PP
It is reasonable to expect that
.BR getwchar ()
will actually
read a multibyte sequence from standard input and then
convert it to a wide character.
.SH SEE ALSO
.BR fgetwc (3),
.BR unlocked_stdio (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1993 by Thomas Koenig (ig25@rz.uni-karlsruhe.de)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified Wed Jul 28 11:12:17 1993 by Rik Faith (faith@cs.unc.edu)
.\" Modified Mon May 13 23:08:50 1996 by Martin Schulze (joey@linux.de)
.\" Modified 11 May 1998 by Joseph S. Myers (jsm28@cam.ac.uk)
.\" Modified 990912 by aeb
.\" 2007-10-10 mtk
.\"     Added description of GLOB_TILDE_NOMATCH
.\"     Expanded the description of various flags
.\"     Various wording fixes.
.\"
.TH GLOB 3  2015-04-19 "GNU" "Linux Programmer's Manual"
.SH NAME
glob, globfree \- find pathnames matching a pattern, free memory from glob()
.SH SYNOPSIS
.nf
.B #include <glob.h>
.sp
.BI "int glob(const char *" pattern ", int " flags ,
.br
.BI "         int (*" errfunc ") (const char *" epath ", int " eerrno ),
.br
.BI "         glob_t *" pglob );
.br
.BI "void globfree(glob_t *" pglob );
.fi
.SH DESCRIPTION
The
.BR glob ()
function searches for all the pathnames matching
.I pattern
according to the rules used by the shell (see
.BR glob (7)).
No tilde expansion or parameter substitution is done; if you want
these, use
.BR wordexp (3).
.PP
The
.BR globfree ()
function frees the dynamically allocated storage from an earlier call
to
.BR glob ().
.PP
The results of a
.BR glob ()
call are stored in the structure pointed to by
.IR pglob .
This structure is of type
.I glob_t
(declared in
.IR <glob.h> )
and includes the following elements defined by POSIX.2 (more may be
present as an extension):
.PP
.br
.in +4n
.nf
typedef struct {
    size_t   gl_pathc;    /* Count of paths matched so far  */
    char   **gl_pathv;    /* List of matched pathnames.  */
    size_t   gl_offs;     /* Slots to reserve in \fIgl_pathv\fP.  */
} glob_t;
.fi
.in
.PP
Results are stored in dynamically allocated storage.
.PP
The argument
.I flags
is made up of the bitwise OR of zero or more the following symbolic
constants, which modify the behavior of
.BR glob ():
.TP
.B GLOB_ERR
Return upon a read error (because a directory does not
have read permission, for example).
By default,
.BR glob ()
attempts carry on despite errors,
reading all of the directories that it can.
.TP
.B GLOB_MARK
Append a slash to each path which corresponds to a directory.
.TP
.B GLOB_NOSORT
Don't sort the returned pathnames.
The only reason to do this is to save processing time.
By default, the returned pathnames are sorted.
.TP
.B GLOB_DOOFFS
Reserve
.I pglob\->gl_offs
slots at the beginning of the list of strings in
.IR pglob\->pathv .
The reserved slots contain null pointers.
.TP
.B GLOB_NOCHECK
If no pattern matches, return the original pattern.
By default,
.BR glob ()
returns
.B GLOB_NOMATCH
if there are no matches.
.TP
.B GLOB_APPEND
Append the results of this call to the vector of results
returned by a previous call to
.BR glob ().
Do not set this flag on the first invocation of
.BR glob ().
.TP
.B GLOB_NOESCAPE
Don't allow backslash (\(aq\\\(aq) to be used as an escape
character.
Normally, a backslash can be used to quote the following character,
providing a mechanism to turn off the special meaning
metacharacters.
.PP
.I flags
may also include any of the following, which are GNU
extensions and not defined by POSIX.2:
.TP
.B GLOB_PERIOD
Allow a leading period to be matched by metacharacters.
By default, metacharacters can't match a leading period.
.TP
.B GLOB_ALTDIRFUNC
Use alternative functions
.IR pglob\->gl_closedir ,
.IR pglob\->gl_readdir ,
.IR pglob\->gl_opendir ,
.IR pglob\->gl_lstat ", and"
.I pglob\->gl_stat
for filesystem access instead of the normal library
functions.
.TP
.B GLOB_BRACE
Expand
.BR csh (1)
style brace expressions of the form
.BR {a,b} .
Brace expressions can be nested.
Thus, for example, specifying the pattern
"{foo/{,cat,dog},bar}" would return the same results as four separate
.BR glob ()
calls using the strings:
"foo/",
"foo/cat",
"foo/dog",
and
"bar".
.TP
.B GLOB_NOMAGIC
If the pattern contains no metacharacters,
then it should be returned as the sole matching word,
even if there is no file with that name.
.TP
.B GLOB_TILDE
Carry out tilde expansion.
If a tilde (\(aq~\(aq) is the only character in the pattern,
or an initial tilde is followed immediately by a slash (\(aq/\(aq),
then the home directory of the caller is substituted for
the tilde.
If an initial tilde is followed by a username (e.g., "~andrea/bin"),
then the tilde and username are substituted by the home directory
of that user.
If the username is invalid, or the home directory cannot be
determined, then no substitution is performed.
.TP
.B GLOB_TILDE_CHECK
This provides behavior similar to that of
.BR GLOB_TILDE .
The difference is that if the username is invalid, or the
home directory cannot be determined, then
instead of using the pattern itself as the name,
.BR glob ()
returns
.BR GLOB_NOMATCH
to indicate an error.
.TP
.B GLOB_ONLYDIR
This is a
.I hint
to
.BR glob ()
that the caller is interested only in directories that match the pattern.
If the implementation can easily determine file-type information,
then nondirectory files are not returned to the caller.
However, the caller must still check that returned files
are directories.
(The purpose of this flag is merely to optimize performance when
the caller is interested only in directories.)
.PP
If
.I errfunc
is not NULL,
it will be called in case of an error with the arguments
.IR epath ,
a pointer to the path which failed, and
.IR eerrno ,
the value of
.I errno
as returned from one of the calls to
.BR opendir (3),
.BR readdir (3),
or
.BR stat (2).
If
.I errfunc
returns nonzero, or if
.B GLOB_ERR
is set,
.BR glob ()
will terminate after the call to
.IR errfunc .
.PP
Upon successful return,
.I pglob\->gl_pathc
contains the number of matched pathnames and
.I pglob\->gl_pathv
contains a pointer to the list of pointers to matched pathnames.
The list of pointers is terminated by a null pointer.
.PP
It is possible to call
.BR glob ()
several times.
In that case, the
.B GLOB_APPEND
flag has to be set in
.I flags
on the second and later invocations.
.PP
As a GNU extension,
.I pglob\->gl_flags
is set to the flags specified,
.BR or ed
with
.B GLOB_MAGCHAR
if any metacharacters were found.
.SH RETURN VALUE
On successful completion,
.BR glob ()
returns zero.
Other possible returns are:
.TP
.B GLOB_NOSPACE
for running out of memory,
.TP
.B GLOB_ABORTED
for a read error, and
.TP
.B GLOB_NOMATCH
for no found matches.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lbw24
l l l.
Interface	Attribute	Value
T{
.BR glob ()
T}	Thread safety	T{
MT-Unsafe race:utent env
.br
sig:ALRM timer locale
T}
T{
.BR globfree ()
T}	Thread safety	MT-Safe
.TE

In the above table,
.I utent
in
.I race:utent
signifies that if any of the functions
.BR setutent (3),
.BR getutent (3),
or
.BR endutent (3)
are used in parallel in different threads of a program,
then data races could occur.
.BR glob (3)
calls those functions,
so we use race:utent to remind users.
.SH CONFORMING TO
POSIX.2, POSIX.1-2001.
.SH NOTES
The structure elements
.I gl_pathc
and
.I gl_offs
are declared as
.I size_t
in glibc 2.1, as they should be according to POSIX.2,
but are declared as
.I int
in glibc 2.0.
.SH BUGS
The
.BR glob ()
function may fail due to failure of underlying function calls, such as
.BR malloc (3)
or
.BR opendir (3).
These will store their error code in
.IR errno .
.SH EXAMPLE
One example of use is the following code, which simulates typing
.sp
.in +4n
ls \-l *.c ../*.c
.in
.sp
in the shell:
.nf
.in +4n

glob_t globbuf;

globbuf.gl_offs = 2;
glob("*.c", GLOB_DOOFFS, NULL, &globbuf);
glob("../*.c", GLOB_DOOFFS | GLOB_APPEND, NULL, &globbuf);
globbuf.gl_pathv[0] = "ls";
globbuf.gl_pathv[1] = "\-l";
execvp("ls", &globbuf.gl_pathv[0]);
.in
.fi
.SH SEE ALSO
.BR ls (1),
.BR sh (1),
.BR stat (2),
.BR exec (3),
.BR fnmatch (3),
.BR malloc (3),
.BR opendir (3),
.BR readdir (3),
.BR wordexp (3),
.BR glob (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2008, Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH GNU_GET_LIBC_VERSION 3 2015-03-02 "Linux" "Linux Programmer's Manual"
.SH NAME
gnu_get_libc_version, gnu_get_libc_release \- get glibc version and release
.SH SYNOPSIS
.nf
.B #include <gnu/libc-version.h>

.B const char *gnu_get_libc_version(void);
.B const char *gnu_get_libc_release(void);
.fi
.SH DESCRIPTION
The function
.BR gnu_get_libc_version ()
returns a string that identifies the glibc version available on the system.

The function
.BR gnu_get_libc_release ()
returns a string indicates the release status of the glibc version
available on the system.
This will be a string such as
.IR "stable" .
.SH VERSIONS
These functions first appeared in glibc in version 2.1.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw23 lb lb
l l l.
Interface	Attribute	Value
T{
.BR gnu_get_libc_version (),
.BR gnu_get_libc_release ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
These functions are glibc-specific.
.SH EXAMPLE
When run, the program below will produce output such as the following:
.in +4n
.nf

.RB "$" " ./a.out"
GNU libc version: 2.8
GNU libc release: stable
.fi
.in
.SS Program source
\&
.nf
#include <gnu/libc-version.h>
#include <stdlib.h>
#include <stdio.h>

int
main(int argc, char *argv[])
{
    printf("GNU libc version: %s\\n", gnu_get_libc_version());
    printf("GNU libc release: %s\\n", gnu_get_libc_release());
    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR confstr (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" %%%LICENSE_START(PUBLIC_DOMAIN)
.\" This page is in the public domain. - aeb
.\" %%%LICENSE_END
.\"
.TH GRANTPT 3 2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
grantpt \- grant access to the slave pseudoterminal
.SH SYNOPSIS
.nf
.BR "#define _XOPEN_SOURCE" "       /* See feature_test_macros(7) */"
.br
.B #include <stdlib.h>
.sp
.BI "int grantpt(int " fd ");"
.fi
.SH DESCRIPTION
The
.BR grantpt ()
function changes the mode and owner of the slave pseudoterminal device
corresponding to the master pseudoterminal referred to by
.IR fd .
The user ID of the slave is set to the real UID of the calling process.
The group ID is set to an unspecified value (e.g.,
.IR tty ).
The mode of the slave is set to 0620 (crw\-\-w\-\-\-\-).
.PP
The behavior of
.BR grantpt ()
is unspecified if a signal handler is installed to catch
.B SIGCHLD
signals.
.SH RETURN VALUE
When successful,
.BR grantpt ()
returns 0.
Otherwise, it returns \-1 and sets
.I errno
appropriately.
.SH ERRORS
.TP
.B EACCES
The corresponding slave pseudoterminal could not be accessed.
.TP
.B EBADF
The
.I fd
argument is not a valid open file descriptor.
.TP
.B EINVAL
The
.I fd
argument is valid but not associated with a master pseudoterminal.
.SH VERSIONS
.BR grantpt ()
is provided in glibc since version 2.1.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR grantpt ()
T}	Thread safety	MT-Safe locale
.TE

.SH CONFORMING TO
POSIX.1-2001.
.SH NOTES
This is part of the UNIX 98 pseudoterminal support, see
.BR pts (4).
Many systems implement this function via a set-user-ID helper binary
called "pt_chown".
With Linux devpts no such helper binary is required.
.SH SEE ALSO
.BR open (2),
.BR posix_openpt (3),
.BR ptsname (3),
.BR unlockpt (3),
.BR pts (4),
.BR pty (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2014, Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH GROUP_MEMBER 3 2014-03-30 "GNU" "Linux Programmer's Manual"
.SH NAME
group_member \- test whether a process is in a group
.SH SYNOPSIS
.B #include <unistd.h>
.sp
.BI "int group_member(gid_t " gid );
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR group_member ():
_GNU_SOURCE
.SH DESCRIPTION
The
.BR group_member ()
function tests whether any of the caller's supplementary group IDs
(as returned by
.BR getgroups (2))
matches
.IR gid .
.SH RETURN VALUE
The
.BR group_member ()
function returns nonzero if any of the caller's
supplementary group IDs matches
.IR gid ,
and zero otherwise.
.SH CONFORMING TO
This function is a nonstandard GNU extension.
.SH SEE ALSO
.BR getgid (2),
.BR getgroups (2),
.BR getgrouplist (3),
.BR group (5)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2002 Andries Brouwer <aeb@cwi.nl>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" This replaces an earlier man page written by Walter Harms
.\" <walter.harms@informatik.uni-oldenburg.de>.
.TH GSIGNAL 3  2007-07-26 "" "Linux Programmer's Manual"
.SH NAME
gsignal, ssignal \- software signal facility
.SH SYNOPSIS
.nf
.B #include <signal.h>
.sp
.B typedef void (*sighandler_t)(int);
.sp
.BI "int gsignal(int " signum );
.sp
.BI "sighandler_t ssignal(int " signum ", sighandler_t " action );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR gsignal (),
.BR ssignal ():
_SVID_SOURCE
.SH DESCRIPTION
Don't use these functions under Linux.
Due to a historical mistake, under Linux these functions are
aliases for
.BR raise (3)
and
.BR signal (2),
respectively.
.LP
Elsewhere, on System V-like systems, these functions implement
software signaling, entirely independent of the classical
.BR signal (2)
and
.BR kill (2)
functions.
The function
.BR ssignal ()
defines the action to take when the software signal with
number
.I signum
is raised using the function
.BR gsignal (),
and returns the previous such action or
.BR SIG_DFL .
The function
.BR gsignal ()
does the following: if no action (or the action
.BR SIG_DFL )
was
specified for
.IR signum ,
then it does nothing and returns 0.
If the action
.B SIG_IGN
was specified for
.IR signum ,
then it does nothing and returns 1.
Otherwise, it resets the action to
.B SIG_DFL
and calls
the action function with argument
.IR signum ,
and returns the value returned by that function.
The range of possible values
.I signum
varies (often 1-15 or 1-17).
.SH CONFORMING TO
These functions are available under AIX, DG/UX, HP-UX, SCO, Solaris, Tru64.
They are called obsolete under most of these systems, and are
broken under Linux libc and glibc.
Some systems also have
.BR gsignal_r ()
and
.BR ssignal_r ().
.SH SEE ALSO
.BR kill (2),
.BR signal (2),
.BR raise (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1990, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" %%%LICENSE_START(BSD_4_CLAUSE_UCB)
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\" %%%LICENSE_END
.\"
.\"	@(#)hash.3	8.6 (Berkeley) 8/18/94
.\"
.TH HASH 3 2012-04-23 "" "Linux Programmer's Manual"
.UC 7
.SH NAME
hash \- hash database access method
.SH SYNOPSIS
.nf
.ft B
#include <sys/types.h>
#include <db.h>
.ft R
.fi
.SH DESCRIPTION
.IR "Note well" :
This page documents interfaces provided in glibc up until version 2.1.
Since version 2.2, glibc no longer provides these interfaces.
Probably, you are looking for the APIs provided by the
.I libdb
library instead.

The routine
.BR dbopen (3)
is the library interface to database files.
One of the supported file formats is hash files.
The general description of the database access methods is in
.BR dbopen (3),
this manual page describes only the hash-specific information.
.PP
The hash data structure is an extensible, dynamic hashing scheme.
.PP
The access-method-specific data structure provided to
.BR dbopen (3)
is defined in the
.I <db.h>
include file as follows:
.in +4n
.nf

typedef struct {
    unsigned int       bsize;
    unsigned int       ffactor;
    unsigned int       nelem;
    unsigned int       cachesize;
    uint32_t         (*hash)(const void *, size_t);
    int         lorder;
} HASHINFO;
.fi
.in
.PP
The elements of this structure are as follows:
.TP 10
.I bsize
defines the hash table bucket size, and is, by default, 256 bytes.
It may be preferable to increase the page size for disk-resident tables
and tables with large data items.
.TP
.I ffactor
indicates a desired density within the hash table.
It is an approximation of the number of keys allowed to accumulate in any
one bucket, determining when the hash table grows or shrinks.
The default value is 8.
.TP
.I nelem
is an estimate of the final size of the hash table.
If not set or set too low, hash tables will expand gracefully as keys
are entered, although a slight performance degradation may be noticed.
The default value is 1.
.TP
.I cachesize
is the suggested maximum size, in bytes, of the memory cache.
This value is
.IR "only advisory" ,
and the access method will allocate more memory rather than fail.
.TP
.I hash
is a user-defined hash function.
Since no hash function performs equally well on all possible data, the
user may find that the built-in hash function does poorly on a particular
data set.
A user-specified hash functions must take two arguments (a pointer to a byte
string and a length) and return a 32-bit quantity to be used as the hash
value.
.TP
.I lorder
is the byte order for integers in the stored database metadata.
The number should represent the order as an integer; for example,
big endian order would be the number 4,321.
If
.I lorder
is 0 (no order is specified), the current host order is used.
If the file already exists, the specified value is ignored and the
value specified when the tree was created is used.
.PP
If the file already exists (and the
.B O_TRUNC
flag is not specified), the
values specified for
.IR bsize ,
.IR ffactor ,
.IR lorder ,
and
.I nelem
are
ignored and the values specified when the tree was created are used.
.PP
If a hash function is specified,
.I hash_open
will attempt to determine if the hash function specified is the same as
the one with which the database was created, and will fail if it is not.
.PP
Backward-compatible interfaces to the routines described in
.BR dbm (3),
and
.BR ndbm (3)
are provided, however these interfaces are not compatible with
previous file formats.
.SH ERRORS
The
.I hash
access method routines may fail and set
.I errno
for any of the errors specified for the library routine
.BR dbopen (3).
.SH BUGS
Only big and little endian byte order are supported.
.SH SEE ALSO
.BR btree (3),
.BR dbopen (3),
.BR mpool (3),
.BR recno (3)

.IR "Dynamic Hash Tables" ,
Per-Ake Larson, Communications of the ACM, April 1988.

.IR "A New Hash Package for UNIX" ,
Margo Seltzer, USENIX Proceedings, Winter 1991.
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 Ulrich Drepper (drepper@karlsruhe.gmd.de)
.\" and Copyright 2008, Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     SunOS 4.1.1 man pages
.\" Modified Sat Sep 30 21:52:01 1995 by Jim Van Zandt <jrv@vanzandt.mv.com>
.\" Remarks from dhw@gamgee.acad.emich.edu Fri Jun 19 06:46:31 1998
.\" Modified 2001-12-26, 2003-11-28, 2004-05-20, aeb
.\" 2008-09-02, mtk: various additions and rewrites
.\" 2008-09-03, mtk, restructured somewhat, in part after suggestions from
.\"     Timothy S. Nelson <wayland@wayland.id.au>
.\"
.TH HSEARCH 3 2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
hcreate, hdestroy, hsearch, hcreate_r, hdestroy_r,
hsearch_r \- hash table management
.SH SYNOPSIS
.nf
.B #include <search.h>
.sp
.BI "int hcreate(size_t " nel );
.sp
.BI "ENTRY *hsearch(ENTRY " item ", ACTION " action );
.sp
.B "void hdestroy(void);"
.sp
.BR "#define _GNU_SOURCE" "         /* See feature_test_macros(7) */"
.br
.B #include <search.h>
.sp
.BI "int hcreate_r(size_t " nel ", struct hsearch_data *" htab );
.sp
.BI "int hsearch_r(ENTRY " item ", ACTION " action ", ENTRY **" retval ,
.BI "              struct hsearch_data *" htab );
.sp
.BI "void hdestroy_r(struct hsearch_data *" htab );
.fi
.SH DESCRIPTION
The three functions
.BR hcreate (),
.BR hsearch (),
and
.BR hdestroy ()
allow the caller to create and manage a hash search table
containing entries consisting of a key (a string) and associated data.
Using these functions, only one hash table can be used at a time.

The three functions
.BR hcreate_r (),
.BR hsearch_r (),
.BR hdestroy_r ()
are reentrant versions that allow a program to use
more than one hash search table at the same time.
The last argument,
.IR htab ,
points to a structure that describes the table
on which the function is to operate.
The programmer should treat this structure as opaque
(i.e., do not attempt to directly access or modify
the fields in this structure).

First a hash table must be created using
.BR hcreate ().
The argument \fInel\fP specifies the maximum number of entries
in the table.
(This maximum cannot be changed later, so choose it wisely.)
The implementation may adjust this value upward to improve the
performance of the resulting hash table.
.\" e.g., in glibc it is raised to the next higher prime number

The
.BR hcreate_r ()
function performs the same task as
.BR hcreate (),
but for the table described by the structure
.IR *htab .
The structure pointed to by
.I htab
must be zeroed before the first call to
.BR hcreate_r ().

The function
.BR hdestroy ()
frees the memory occupied by the hash table that was created by
.BR hcreate ().
After calling
.BR hdestroy ()
a new hash table can be created using
.BR hcreate ().
The
.BR hdestroy_r ()
function performs the analogous task for a hash table described by
.IR *htab ,
which was previously created using
.BR hcreate_r ().

The
.BR hsearch ()
function searches the hash table for an
item with the same key as \fIitem\fP (where "the same" is determined using
.BR strcmp (3)),
and if successful returns a pointer to it.

The argument \fIitem\fP is of type \fIENTRY\fP, which is defined in
\fI<search.h>\fP as follows:
.in +4n
.sp
.nf
typedef struct entry {
    char *key;
    void *data;
} ENTRY;
.in
.fi
.sp
The field \fIkey\fP points to a null-terminated string which is the
search key.
The field \fIdata\fP points to data that is associated with that key.

The argument \fIaction\fP determines what
.BR hsearch ()
does after an unsuccessful search.
This argument must either have the value
.BR ENTER ,
meaning insert a copy of
.IR item
(and return a pointer to the new hash table entry as the function result),
or the value
.BR FIND ,
meaning that NULL should be returned.
(If
.I action
is
.BR FIND ,
then
.I data
is ignored.)

The
.BR hsearch_r ()
function is like
.BR hsearch ()
but operates on the hash table described by
.IR *htab .
The
.BR hsearch_r ()
function differs from
.BR hsearch ()
in that a pointer to the found item is returned in
.IR *retval ,
rather than as the function result.
.SH RETURN VALUE
.BR hcreate ()
and
.BR hcreate_r ()
return nonzero on success.
They return 0 on error, with
.I errno
set to indicate the cause of the error.

On success,
.BR hsearch ()
returns a pointer to an entry in the hash table.
.BR hsearch ()
returns NULL on error, that is,
if \fIaction\fP is \fBENTER\fP and
the hash table is full, or \fIaction\fP is \fBFIND\fP and \fIitem\fP
cannot be found in the hash table.
.BR hsearch_r ()
returns nonzero on success, and 0 on error.
In the event of an error, these two functions set
.I errno
to indicate the cause of the error.
.SH ERRORS
.LP
.BR hcreate_r ()
and
.BR hdestroy_r ()
can fail for the following reasons:
.TP
.B EINVAL
.I htab
is NULL.
.PP
.BR hsearch ()
and
.BR hsearch_r ()
can fail for the following reasons:
.TP
.B ENOMEM
.I action
was
.BR ENTER ,
.I key
was not found in the table,
and there was no room in the table to add a new entry.
.TP
.B ESRCH
.I action
was
.BR FIND ,
and
.I key
was not found in the table.
.PP
POSIX.1-2001 specifies only the
.B ENOMEM
error.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw25 lb lb
l l l.
Interface	Attribute	Value
T{
.BR hcreate (),
.BR hsearch (),
.br
.BR hdestroy ()
T}	Thread safety	MT-Unsafe race:hsearch
T{
.BR hcreate_r (),
.BR hsearch_r (),
.br
.BR hdestroy_r ()
T}	Thread safety	MT-Safe race:htab
.TE
.SH CONFORMING TO
The functions
.BR hcreate (),
.BR hsearch (),
and
.BR hdestroy ()
are from SVr4, and are described in POSIX.1-2001.
The functions
.BR hcreate_r (),
.BR hsearch_r (),
and
.BR hdestroy_r ()
are GNU extensions.
.SH NOTES
Hash table implementations are usually more efficient when the
table contains enough free space to minimize collisions.
Typically, this means that
.I nel
should be at least 25% larger than the maximum number of elements
that the caller expects to store in the table.

The
.BR hdestroy ()
and
.BR hdestroy_r ()
functions do not free the buffers pointed to by the
.I key
and
.I data
elements of the hash table entries.
(It can't do this because it doesn't know
whether these buffers were allocated dynamically.)
If these buffers need to be freed (perhaps because the program
is repeatedly creating and destroying hash tables,
rather than creating a single table whose lifetime
matches that of the program),
then the program must maintain bookkeeping data structures that
allow it to free them.
.SH BUGS
SVr4 and POSIX.1-2001 specify that \fIaction\fP
is significant only for unsuccessful searches, so that an \fBENTER\fP
should not do anything for a successful search.
In libc and glibc (before version 2.3), the
implementation violates the specification,
updating the \fIdata\fP for the given \fIkey\fP in this case.

Individual hash table entries can be added, but not deleted.
.SH EXAMPLE
.PP
The following program inserts 24 items into a hash table, then prints
some of them.
.nf

#include <stdio.h>
#include <stdlib.h>
#include <search.h>

static char *data[] = { "alpha", "bravo", "charlie", "delta",
     "echo", "foxtrot", "golf", "hotel", "india", "juliet",
     "kilo", "lima", "mike", "november", "oscar", "papa",
     "quebec", "romeo", "sierra", "tango", "uniform",
     "victor", "whisky", "x\-ray", "yankee", "zulu"
};

int
main(void)
{
    ENTRY e, *ep;
    int i;

    hcreate(30);

    for (i = 0; i < 24; i++) {
        e.key = data[i];
        /* data is just an integer, instead of a
           pointer to something */
        e.data = (void *) i;
        ep = hsearch(e, ENTER);
        /* there should be no failures */
        if (ep == NULL) {
            fprintf(stderr, "entry failed\\n");
            exit(EXIT_FAILURE);
        }
    }

    for (i = 22; i < 26; i++) {
        /* print two entries from the table, and
           show that two are not in the table */
        e.key = data[i];
        ep = hsearch(e, FIND);
        printf("%9.9s \-> %9.9s:%d\\n", e.key,
               ep ? ep\->key : "NULL", ep ? (int)(ep\->data) : 0);
    }
    hdestroy();
    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR bsearch (3),
.BR lsearch (3),
.BR malloc (3),
.BR tsearch (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified 1993-07-24 by Rik Faith (faith@cs.unc.edu)
.\" Modified 2002-07-27 by Walter Harms
.\" 	(walter.harms@informatik.uni-oldenburg.de)
.\"
.TH HYPOT 3 2015-03-29 ""  "Linux Programmer's Manual"
.SH NAME
hypot, hypotf, hypotl \- Euclidean distance function
.SH SYNOPSIS
.nf
.B #include <math.h>
.sp
.BI "double hypot(double " x ", double " y );
.br
.BI "float hypotf(float " x ", float " y );
.br
.BI "long double hypotl(long double " x ", long double " y );
.fi
.sp
Link with \fI\-lm\fP.
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR hypot ():
.RS 4
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.br
.BR hypotf (),
.BR hypotl ():
.RS 4
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE\ >=\ 600 || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.ad b
.SH DESCRIPTION
These functions return
.RI sqrt( x * x + y * y ).
This is the length of the hypotenuse of a right-angled triangle
with sides of length
.I x
and
.IR y ,
or the distance of the point
.RI ( x , y )
from the origin.

The calculation is performed without undue overflow or underflow
during the intermediate steps of the calculation.
.\" e.g., hypot(DBL_MIN, DBL_MIN) does the right thing, as does, say
.\" hypot(DBL_MAX/2.0, DBL_MAX/2.0).
.SH RETURN VALUE
On success, these functions return the length of a right-angled triangle
with sides of length
.I x
and
.IR y .

If
.I x
or
.I y
is an infinity,
positive infinity is returned.

If
.I x
or
.I y
is a NaN,
and the other argument is not an infinity,
a NaN is returned.

If the result overflows,
a range error occurs,
and the functions return
.BR HUGE_VAL ,
.BR HUGE_VALF ,
or
.BR HUGE_VALL ,
respectively.

If both arguments are subnormal, and the result is subnormal,
.\" Actually, could the result not be subnormal if both arguments
.\" are subnormal?  I think not -- mtk, Jul 2008
a range error occurs,
and the correct result is returned.
.SH ERRORS
See
.BR math_error (7)
for information on how to determine whether an error has occurred
when calling these functions.
.PP
The following errors can occur:
.TP
Range error: result overflow
.I errno
is set to
.BR ERANGE .
An overflow floating-point exception
.RB ( FE_OVERFLOW )
is raised.
.TP
Range error: result underflow
.\" .I errno
.\" is set to
.\" .BR ERANGE .
An underflow floating-point exception
.RB ( FE_UNDERFLOW )
is raised.
.IP
These functions do not set
.IR errno
for this case.
.\" FIXME . Is it intentional that these functions do not set errno?
.\" They do set errno for the overflow case.
.\" Bug raised: http://sources.redhat.com/bugzilla/show_bug.cgi?id=6795
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw27 lb lb
l l l.
Interface	Attribute	Value
T{
.BR hypot (),
.BR hypotf (),
.BR hypotl ()
T}	Thread safety	MT-Safe
.TE

.SH CONFORMING TO
C99, POSIX.1-2001, POSIX.1-2008.

The variant returning
.I double
also conforms to
SVr4, 4.3BSD.
.SH SEE ALSO
.BR cabs (3),
.BR sqrt (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) Bruno Haible <haible@clisp.cons.org>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_ONEPARA)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"   GNU glibc-2 source code and manual
.\"   OpenGroup's Single UNIX specification
.\"	http://www.UNIX-systems.org/online.html
.\"
.\" 2000-06-30 correction by Yuichi SATO <sato@complex.eng.hokudai.ac.jp>
.\" 2000-11-15 aeb, fixed prototype
.\"
.TH ICONV 3 2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
iconv \- perform character set conversion
.SH SYNOPSIS
.nf
.B #include <iconv.h>
.sp
.BI "size_t iconv(iconv_t " cd ,
.BI "             char **" inbuf ", size_t *" inbytesleft ,
.BI "             char **" outbuf ", size_t *" outbytesleft );
.fi
.SH DESCRIPTION
The
.BR iconv ()
function converts a sequence of characters in one character encoding
to a sequence of characters in another character encoding.
The
.I cd
argument is a conversion descriptor,
previously created by a call to
.BR iconv_open (3);
the conversion descriptor defines the character encodings that
.BR iconv ()
uses for the conversion.
The
.I inbuf
argument is the address of a variable that points to
the first character of the input sequence;
.I inbytesleft
indicates the number of bytes in that buffer.
The
.I outbuf
argument is the address of a variable that points to
the first byte available in the output buffer;
.I outbytesleft
indicates the number of bytes available in the output buffer.
.PP
The main case is when \fIinbuf\fP is not NULL and \fI*inbuf\fP is not NULL.
In this case, the
.BR iconv ()
function converts the multibyte sequence
starting at \fI*inbuf\fP to a multibyte sequence starting at \fI*outbuf\fP.
At most \fI*inbytesleft\fP bytes, starting at \fI*inbuf\fP, will be read.
At most \fI*outbytesleft\fP bytes, starting at \fI*outbuf\fP, will be written.
.PP
The
.BR iconv ()
function converts one multibyte character at a time, and for
each character conversion it increments \fI*inbuf\fP and decrements
\fI*inbytesleft\fP by the number of converted input bytes, it increments
\fI*outbuf\fP and decrements \fI*outbytesleft\fP by the number of converted
output bytes, and it updates the conversion state contained in \fIcd\fP.
If the character encoding of the input is stateful, the
.BR iconv ()
function can also convert a sequence of input bytes
to an update to the conversion state without producing any output bytes;
such input is called a \fIshift sequence\fP.
The conversion can stop for four reasons:
.IP 1. 3
An invalid multibyte sequence is encountered in the input.
In this case,
it sets \fIerrno\fP to \fBEILSEQ\fP and returns
.IR (size_t)\ \-1 .
\fI*inbuf\fP
is left pointing to the beginning of the invalid multibyte sequence.
.IP 2.
The input byte sequence has been entirely converted,
that is, \fI*inbytesleft\fP has gone down to 0.
In this case,
.BR iconv ()
returns the number of
nonreversible conversions performed during this call.
.IP 3.
An incomplete multibyte sequence is encountered in the input, and the
input byte sequence terminates after it.
In this case, it sets \fIerrno\fP to
\fBEINVAL\fP and returns
.IR (size_t)\ \-1 .
\fI*inbuf\fP is left pointing to the
beginning of the incomplete multibyte sequence.
.IP 4.
The output buffer has no more room for the next converted character.
In this case, it sets \fIerrno\fP to \fBE2BIG\fP and returns
.IR (size_t)\ \-1 .
.PP
A different case is when \fIinbuf\fP is NULL or \fI*inbuf\fP is NULL, but
\fIoutbuf\fP is not NULL and \fI*outbuf\fP is not NULL.
In this case, the
.BR iconv ()
function attempts to set \fIcd\fP's conversion state to the
initial state and store a corresponding shift sequence at \fI*outbuf\fP.
At most \fI*outbytesleft\fP bytes, starting at \fI*outbuf\fP, will be written.
If the output buffer has no more room for this reset sequence, it sets
\fIerrno\fP to \fBE2BIG\fP and returns
.IR (size_t)\ \-1 .
Otherwise, it increments
\fI*outbuf\fP and decrements \fI*outbytesleft\fP by the number of bytes
written.
.PP
A third case is when \fIinbuf\fP is NULL or \fI*inbuf\fP is NULL, and
\fIoutbuf\fP is NULL or \fI*outbuf\fP is NULL.
In this case, the
.BR iconv ()
function sets \fIcd\fP's conversion state to the initial state.
.SH RETURN VALUE
The
.BR iconv ()
function returns the number of characters converted in a
nonreversible way during this call; reversible conversions are not counted.
In case of error, it sets \fIerrno\fP and returns
.IR (size_t)\ \-1 .
.SH ERRORS
The following errors can occur, among others:
.TP
.B E2BIG
There is not sufficient room at \fI*outbuf\fP.
.TP
.B EILSEQ
An invalid multibyte sequence has been encountered in the input.
.TP
.B EINVAL
An incomplete multibyte sequence has been encountered in the input.
.SH VERSIONS
This function is available in glibc since version 2.1.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR iconv ()
T}	Thread safety	MT-Safe race:cd
.TE
.PP
The
.BR iconv ()
function is MT-Safe, as long as callers arrange for
mutual exclusion on the
.I cd
argument.
.SH CONFORMING TO
POSIX.1-2001.
.SH NOTES
Although
.I inbuf
and
.I outbuf
are typed as
.IR "char\ **" ,
this does not mean that the objects they point can be interpreted
as C strings or as arrays of characters:
the interpretation of character byte sequences is
handled internally by the conversion functions.
In some encodings, a zero byte may be a valid part of a multibyte character.

The caller of
.BR iconv ()
must ensure that the pointers passed to the function are suitable
for accessing characters in the appropriate character set.
This includes ensuring correct alignment on platforms that have
tight restrictions on alignment.
.SH SEE ALSO
.BR iconv_close (3),
.BR iconv_open (3),
.BR iconvconfig (8)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) Bruno Haible <haible@clisp.cons.org>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_ONEPARA)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"   GNU glibc-2 source code and manual
.\"   OpenGroup's Single UNIX specification http://www.UNIX-systems.org/online.html
.\"
.TH ICONV_CLOSE 3  2015-05-07 "GNU" "Linux Programmer's Manual"
.SH NAME
iconv_close \- deallocate descriptor for character set conversion
.SH SYNOPSIS
.nf
.B #include <iconv.h>
.sp
.BI "int iconv_close(iconv_t " cd );
.fi
.SH DESCRIPTION
The
.BR iconv_close ()
function deallocates a conversion descriptor
.I cd
previously allocated using
.BR iconv_open (3).
.SH RETURN VALUE
When successful, the
.BR iconv_close ()
function returns 0.
In case of error, it sets
.I errno
and returns \-1.
.SH VERSIONS
This function is available in glibc since version 2.1.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR iconv_close ()
T}	Thread safety	MT-Safe
.TE

.SH CONFORMING TO
UNIX98, POSIX.1-2001.
.SH SEE ALSO
.BR iconv (3),
.BR iconv_open (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) Bruno Haible <haible@clisp.cons.org>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_ONEPARA)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"   GNU glibc-2 source code and manual
.\"   OpenGroup's Single UNIX specification
.\"     http://www.UNIX-systems.org/online.html
.\"
.\" 2007-03-31 Bruno Haible, Describe the glibc/libiconv //TRANSLIT
.\" and //IGNORE extensions for 'tocode'.
.\"
.TH ICONV_OPEN 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
iconv_open \- allocate descriptor for character set conversion
.SH SYNOPSIS
.nf
.B #include <iconv.h>
.sp
.BI "iconv_t iconv_open(const char *" tocode ", const char *" fromcode );
.fi
.SH DESCRIPTION
The
.BR iconv_open ()
function allocates a conversion descriptor suitable
for converting byte sequences from character encoding
.I fromcode
to
character encoding
.IR tocode .
.PP
The values permitted for
.IR fromcode
and
.I tocode
and the supported
combinations are system-dependent.
For the GNU C library, the permitted
values are listed by the
.I "iconv \-\-list"
command, and all combinations
of the listed values are supported.
Furthermore the GNU C library and the
GNU libiconv library support the following two suffixes:
.TP
//TRANSLIT
When the string "//TRANSLIT" is appended to
.IR tocode ,
transliteration
is activated.
This means that when a character cannot be represented in the
target character set, it can be approximated through one or several
similarly looking characters.
.TP
//IGNORE
When the string "//IGNORE" is appended to
.IR tocode ,
characters that
cannot be represented in the target character set will be silently discarded.
.PP
The resulting conversion descriptor can be used with
.BR iconv (3)
any number of times.
It remains valid until deallocated using
.BR iconv_close (3).
.PP
A conversion descriptor contains a conversion state.
After creation using
.BR iconv_open (),
the state is in the initial state.
Using
.BR iconv (3)
modifies the descriptor's conversion state.
To bring the state back to the initial state, use
.BR iconv (3)
with NULL as
.I inbuf
argument.
.SH RETURN VALUE
The
.BR iconv_open ()
function returns a freshly allocated conversion
descriptor.
In case of error, it sets
.I errno
and returns
.IR (iconv_t)\ \-1 .
.SH ERRORS
The following error can occur, among others:
.TP
.B EINVAL
The conversion from
.IR fromcode
to
.I tocode
is not supported by the
implementation.
.SH VERSIONS
This function is available in glibc since version 2.1.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR iconv_open ()
T}	Thread safety	MT-Safe locale
.TE

.SH CONFORMING TO
UNIX98, POSIX.1-2001.
.SH SEE ALSO
.BR iconv (1),
.BR iconv (3),
.BR iconv_close (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2012 YOSHIFUJI Hideaki <yoshfuji@linux-ipv6.org>
.\" and Copyright (c) 2012 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of
.\" this manual under the conditions for verbatim copying, provided that
.\" the entire resulting derived work is distributed under the terms of
.\" a permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume
.\" no responsibility for errors or omissions, or for damages resulting
.\" from the use of the information contained herein.  The author(s) may
.\" not have taken the same level of care in the production of this
.\" manual, which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH IF_NAMEINDEX 3 2015-03-29 "GNU" "Linux Programmer's Manual"
.SH NAME
if_nameindex, if_freenameindex \- get network interface names and indexes
.SH SYNOPSIS
.nf
.B #include <net/if.h>
.sp
.BI "struct if_nameindex *if_nameindex(void);
.BI "void if_freenameindex(struct if_nameindex *" "ptr" );
.fi
.SH DESCRIPTION
The
.BR if_nameindex ()
function returns an array of
.I if_nameindex
structures, each containing information
about one of the network interfaces on the local system.
The
.I if_nameindex
structure contains at least the following entries:
.sp
.in +4n
.nf
    unsigned int if_index; /* Index of interface (1, 2, ...) */
    char        *if_name;  /* Null-terminated name ("eth0", etc.) */
.fi
.in
.PP
The
.I if_index
field contains the interface index.
The
.I ifa_name
field points to the null-terminated interface name.
The end of the array is indicated by entry with
.I if_index
set to zero and
.I ifa_name
set to NULL.
.PP
The data structure returned by
.BR if_nameindex ()
is dynamically allocated and should be freed using
.BR if_freenameindex ()
when no longer needed.
.SH RETURN VALUE
On success,
.BR if_nameindex ()
returns pointer to the array;
on error, NULL is returned, and
.I errno
is set appropriately.
.SH ERRORS
.BR if_nameindex ()
may fail and set
.I errno
if:
.TP
.B ENOBUFS
Insufficient resources available.
.PP
.BR if_nameindex ()
may also fail for any of the errors specified for
.BR socket (2),
.BR bind (2),
.BR ioctl (2),
.BR getsockname (2),
.BR recvmsg (2),
.BR sendto (2),
or
.BR malloc (3).
.SH VERSIONS
The
.BR if_nameindex ()
function first appeared in glibc 2.1, but before glibc 2.3.4,
the implementation supported only interfaces with IPv4 addresses.
Support of interfaces that don't have IPv4 addresses is available only
on kernels that support netlink.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR if_nameindex (),
.br
.BR if_freenameindex ()
T}	Thread safety	MT-Safe
.TE

.SH CONFORMING TO
RFC\ 3493, POSIX.1-2001.

This function first appeared in BSDi.
.SH EXAMPLE
The program below demonstrates the use of the functions described
on this page.
An example of the output this program might produce is the following:

.in +4n
.nf
$ \fB./a.out\fI
1: lo
2: wlan0
3: em1
.fi
.in
.SS Program source
.nf
#include <net/if.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

int
main(int argc, char *argv[])
{
    struct if_nameindex *if_ni, *i;

    if_ni = if_nameindex();
    if (if_ni == NULL) {
        perror("if_nameindex");
        exit(EXIT_FAILURE);
    }

    for (i = if_ni; ! (i\->if_index == 0 && i\->if_name == NULL); i++)
        printf("%u: %s\\n", i\->if_index, i\->if_name);

    if_freenameindex(if_ni);

    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR getsockopt (2),
.BR setsockopt (2),
.BR getifaddrs (3),
.BR if_indextoname (3),
.BR if_nametoindex (3),
.BR ifconfig (8)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2012 YOSHIFUJI Hideaki <yoshfuji@linux-ipv6.org>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of
.\" this manual under the conditions for verbatim copying, provided that
.\" the entire resulting derived work is distributed under the terms of
.\" a permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume
.\" no responsibility for errors or omissions, or for damages resulting
.\" from the use of the information contained herein.  The author(s) may
.\" not have taken the same level of care in the production of this
.\" manual, which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH IF_NAMETOINDEX 3 2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
if_nametoindex, if_indextoname \- mappings between network interface
names and indexes
.SH SYNOPSIS
.nf
.B #include <net/if.h>
.sp
.BI "unsigned int if_nametoindex(const char *" "ifname" );
.sp
.BI "char *if_indextoname(unsigned int ifindex, char *" ifname );
.fi
.SH DESCRIPTION
The
.BR if_nametoindex ()
function returns the index of the network interface
corresponding to the name
.IR ifname .

The
.BR if_indextoname ()
function returns the name of the network interface
corresponding to the interface index
.IR ifindex .
The name is placed in the buffer pointed to by
.IR ifname .
The buffer must allow for the storage of at least
.B IF_NAMESIZE
bytes.
.SH RETURN VALUE
On success,
.BR if_nametoindex ()
returns the index number of the network interface;
on error, 0 is returned and
.I errno
is set appropriately.

On success,
.BR if_indextoname ()
returns
.IR ifname ;
on error, NULL is returned and
.I errno
is set appropriately.
.SH ERRORS
.BR if_indextoname ()
may fail and set
.I errno
if:
.TP
.B ENXIO
No interface found for the index.
.PP
.BR if_nametoindex ()
and
.BR if_indextoname ()
may also fail for any of the errors specified for
.BR socket (2)
or
.BR ioctl (2).
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw34 lb lb
l l l.
Interface	Attribute	Value
T{
.BR if_nametoindex (),
.BR if_indextoname ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
RFC\ 3493, POSIX.1-2001.

This function first appeared in BSDi.
.SH SEE ALSO
.BR getifaddrs (3),
.BR if_nameindex (3),
.BR ifconfig (8)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 2004 Andries Brouwer <aeb@cwi.nl>.
.\" and Copyright 2008, Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Inspired by a page by Walter Harms created 2002-08-10
.\"
.TH ILOGB 3 2015-04-19 "" "Linux Programmer's Manual"
.SH NAME
ilogb, ilogbf, ilogbl \- get integer exponent of a floating-point value
.SH SYNOPSIS
.B #include <math.h>
.sp
.BI "int ilogb(double " x );
.br
.BI "int ilogbf(float " x );
.br
.BI "int ilogbl(long double " x );
.sp
Link with \fI\-lm\fP.
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR ilogb ():
.RS 4
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE\ >=\ 500 ||
_XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED ||
_ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.br
.BR ilogbf (),
.BR ilogbl ():
.RS 4
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE\ >=\ 600 || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.ad b
.SH DESCRIPTION
These functions return the exponent part of their argument
as a signed integer.
When no error occurs, these functions
are equivalent to the corresponding
.BR logb (3)
functions, cast to
.IR int .
.SH RETURN VALUE
On success, these functions return the exponent of
.IR x ,
as a signed integer.

If
.I x
is zero, then a domain error occurs, and the functions return
.\" the POSIX.1 spec for logb() says logb() gives pole error for this
.\" case, but for ilogb() it says domain error.
.BR FP_ILOGB0 .
.\" glibc: The numeric value is either `INT_MIN' or `-INT_MAX'.

If
.I x
is a NaN, then a domain error occurs, and the functions return
.BR FP_ILOGBNAN .
.\" glibc: The numeric value is either `INT_MIN' or `INT_MAX'.
.\" On i386, FP_ILOGB0 and FP_ILOGBNAN have the same value.

If
.I x
is negative infinity or positive infinity, then
a domain error occurs, and the functions return
.BR INT_MAX .
.\"
.\" POSIX.1-2001 also says:
.\" If the correct value is greater than {INT_MAX}, {INT_MAX}
.\" shall be returned and a domain error shall occur.
.\"
.\" If the correct value is less than {INT_MIN}, {INT_MIN}
.\" shall be returned and a domain error shall occur.
.SH ERRORS
See
.BR math_error (7)
for information on how to determine whether an error has occurred
when calling these functions.
.PP
The following errors can occur:
.TP
Domain error: \fIx\fP is 0 or a NaN
An invalid floating-point exception
.RB ( FE_INVALID )
is raised, and
.I errno
is set to
.BR EDOM
(but see BUGS).
.IP
.TP
Domain error: \fIx\fP is an infinity
An invalid floating-point exception
.RB ( FE_INVALID )
is raised, and
.I errno
is set to
.BR EDOM
(but see BUGS).
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw27 lb lb
l l l.
Interface	Attribute	Value
T{
.BR ilogb (),
.BR ilogbf (),
.BR ilogbl ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C99, POSIX.1-2001, POSIX.1-2008.
.SH BUGS
.\" Bug raised: http://sources.redhat.com/bugzilla/show_bug.cgi?id=6794
Before version 2.16, the following bugs existed in the
glibc implementation of these functions:
.IP * 3
The domain error case where
.I x
is 0 or a NaN did not cause
.I errno
to be set or (on some architectures) raise a floating-point exception.
.IP * 3
The domain error case where
.I x
is an infinity did not cause
.I errno
to be set or raise a floating-point exception.
.SH SEE ALSO
.BR log (3),
.BR logb (3),
.BR significand (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified Mon Apr 12 12:54:34 1993, David Metcalfe
.\" Modified Sat Jul 24 19:13:52 1993, Rik Faith (faith@cs.unc.edu)
.TH INDEX 3 2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
index, rindex \- locate character in string
.SH SYNOPSIS
.nf
.B #include <strings.h>
.sp
.BI "char *index(const char *" s ", int " c );
.sp
.BI "char *rindex(const char *" s ", int " c );
.fi
.SH DESCRIPTION
The
.BR index ()
function returns a pointer to the first occurrence
of the character \fIc\fP in the string \fIs\fP.
.PP
The
.BR rindex ()
function returns a pointer to the last occurrence
of the character \fIc\fP in the string \fIs\fP.
.PP
The terminating null byte (\(aq\\0\(aq) is considered to be a part of the
strings.
.SH RETURN VALUE
The
.BR index ()
and
.BR rindex ()
functions return a pointer to
the matched character or NULL if the character is not found.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR index (),
.BR rindex ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
4.3BSD; marked as LEGACY in POSIX.1-2001.
POSIX.1-2008 removes the specifications of
.BR index ()
and
.BR rindex (),
recommending
.BR strchr (3)
and
.BR strrchr (3)
instead.
.SH SEE ALSO
.BR memchr (3),
.BR strchr (3),
.BR string (3),
.BR strpbrk (3),
.BR strrchr (3),
.BR strsep (3),
.BR strspn (3),
.BR strstr (3),
.BR strtok (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\" and Copyright (c) 2008 Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\"     libc.info (from glibc distribution)
.\" Modified Sat Jul 24 19:12:00 1993 by Rik Faith <faith@cs.unc.edu>
.\" Modified Sun Sep  3 20:29:36 1995 by Jim Van Zandt <jrv@vanzandt.mv.com>
.\" Changed network into host byte order (for inet_network),
.\"     Andreas Jaeger <aj@arthur.rhein-neckar.de>, 980130.
.\" 2008-06-19, mtk
.\"     Describe the various address forms supported by inet_aton().
.\"     Clarify discussion of inet_lnaof(), inet_netof(), and inet_makeaddr().
.\"     Add discussion of Classful Addressing, noting that it is obsolete.
.\"     Added an EXAMPLE program.
.\"
.TH INET 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
inet_aton, inet_addr, inet_network, inet_ntoa, inet_makeaddr, inet_lnaof,
inet_netof \- Internet address manipulation routines
.SH SYNOPSIS
.nf
.B #include <sys/socket.h>
.B #include <netinet/in.h>
.B #include <arpa/inet.h>
.sp
.BI "int inet_aton(const char *" cp ", struct in_addr *" inp );
.sp
.BI "in_addr_t inet_addr(const char *" cp );
.sp
.BI "in_addr_t inet_network(const char *" cp );
.sp
.BI "char *inet_ntoa(struct in_addr " in );
.sp
.BI "struct in_addr inet_makeaddr(in_addr_t " net ", in_addr_t " host );
.sp
.BI "in_addr_t inet_lnaof(struct in_addr " in );
.sp
.BI "in_addr_t inet_netof(struct in_addr " in );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR inet_aton (),
.BR inet_ntoa ():
_BSD_SOURCE || _SVID_SOURCE
.SH DESCRIPTION
.BR inet_aton ()
converts the Internet host address \fIcp\fP from the
IPv4 numbers-and-dots notation into binary form (in network byte order)
and stores it in the structure that \fIinp\fP points to.
.BR inet_aton ()
returns nonzero if the address is valid, zero if not.
The address supplied in
.I cp
can have one of the following forms:
.TP 10
.I a.b.c.d
Each of the four numeric parts specifies a byte of the address;
the bytes are assigned in left-to-right order to produce the binary address.
.TP
.I a.b.c
Parts
.I a
and
.I b
specify the first two bytes of the binary address.
Part
.I c
is interpreted as a 16-bit value that defines the rightmost two bytes
of the binary address.
This notation is suitable for specifying (outmoded) Class B
network addresses.
.TP
.I a.b
Part
.I a
specifies the first byte of the binary address.
Part
.I b
is interpreted as a 24-bit value that defines the rightmost three bytes
of the binary address.
This notation is suitable for specifying (outmoded) Class A
network addresses.
.TP
.I a
The value
.I a
is interpreted as a 32-bit value that is stored directly
into the binary address without any byte rearrangement.
.PP
In all of the above forms,
components of the dotted address can be specified in decimal,
octal (with a leading
.IR 0 ),
or hexadecimal, with a leading
.IR 0X ).
Addresses in any of these forms are collectively termed
.IR "IPV4 numbers-and-dots notation" .
The form that uses exactly four decimal numbers is referred to as
.IR "IPv4 dotted-decimal notation"
(or sometimes:
.IR "IPv4 dotted-quad notation" ).

.BR inet_aton ()
returns 1 if the supplied string was successfully interpreted,
or 0 if the string is invalid
.RB ( errno
is
.I not
set on error).
.PP
The
.BR inet_addr ()
function converts the Internet host address
\fIcp\fP from IPv4 numbers-and-dots notation into binary data in network
byte order.
If the input is invalid,
.B INADDR_NONE
(usually \-1) is returned.
Use of this function is problematic because \-1 is a valid address
(255.255.255.255).
Avoid its use in favor of
.BR inet_aton (),
.BR inet_pton (3),
or
.BR getaddrinfo (3),
which provide a cleaner way to indicate error return.
.PP
The
.BR inet_network ()
function converts
.IR cp ,
a string in IPv4 numbers-and-dots notation,
into a number in host byte order suitable for use as an
Internet network address.
On success, the converted address is returned.
If the input is invalid, \-1 is returned.
.PP
The
.BR inet_ntoa ()
function converts the Internet host address
\fIin\fP, given in network byte order, to a string in IPv4
dotted-decimal notation.
The string is returned in a statically
allocated buffer, which subsequent calls will overwrite.
.PP
The
.BR inet_lnaof ()
function returns the local network address part
of the Internet address \fIin\fP.
The returned value is in host byte order.
.PP
The
.BR inet_netof ()
function returns the network number part of
the Internet address \fIin\fP.
The returned value is in host byte order.
.PP
The
.BR inet_makeaddr ()
function is the converse of
.BR inet_netof ()
and
.BR inet_lnaof ().
It returns an Internet host address in network byte order,
created by combining the network number \fInet\fP
with the local address \fIhost\fP, both in
host byte order.
.PP
The structure \fIin_addr\fP as used in
.BR inet_ntoa (),
.BR inet_makeaddr (),
.BR inet_lnaof ()
and
.BR inet_netof ()
is defined in
.I <netinet/in.h>
as:
.sp
.in +4n
.nf
typedef uint32_t in_addr_t;

struct in_addr {
    in_addr_t s_addr;
};
.fi
.in
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw30 lb lb
l l l.
Interface	Attribute	Value
T{
.BR inet_aton (),
.BR inet_addr (),
.br
.BR inet_network (),
.BR inet_ntoa ()
T}	Thread safety	MT-Safe locale
T{
.BR inet_makeaddr (),
.BR inet_lnaof (),
.br
.BR inet_netof ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
4.3BSD.
.BR inet_addr ()
and
.BR inet_ntoa ()
are specified in POSIX.1-2001.
.BR inet_aton ()
is not specified in POSIX.1-2001, but is available on most systems.
.SH NOTES
On the i386 the host byte order is Least Significant Byte
first (little endian), whereas the network byte order, as used on the
Internet, is Most Significant Byte first (big endian).

.BR inet_lnaof (),
.BR inet_netof (),
and
.BR inet_makeaddr ()
are legacy functions that assume they are dealing with
.IR "classful network addresses" .
Classful networking divides IPv4 network addresses into host and network
components at byte boundaries, as follows:
.TP 10
Class A
This address type is indicated by the value 0 in the
most significant bit of the (network byte ordered) address.
The network address is contained in the most significant byte,
and the host address occupies the remaining three bytes.
.TP
Class B
This address type is indicated by the binary value 10 in the
most significant two bits of the address.
The network address is contained in the two most significant bytes,
and the host address occupies the remaining two bytes.
.TP
Class C
This address type is indicated by the binary value 110 in the
most significant three bits of the address.
The network address is contained in the three most significant bytes,
and the host address occupies the remaining byte.
.PP
Classful network addresses are now obsolete,
having been superseded by Classless Inter-Domain Routing (CIDR),
which divides addresses into network and host components at
arbitrary bit (rather than byte) boundaries.
.SH EXAMPLE
An example of the use of
.BR inet_aton ()
and
.BR inet_ntoa ()
is shown below.
Here are some example runs:
.in +4n
.nf

.RB "$" " ./a.out 226.000.000.037" "      # Last byte is in octal"
226.0.0.31
.RB "$" " ./a.out 0x7f.1         " "      # First byte is in hex"
127.0.0.1
.fi
.in
.SS Program source
\&
.nf
#define _BSD_SOURCE
#include <arpa/inet.h>
#include <stdio.h>
#include <stdlib.h>

int
main(int argc, char *argv[])
{
    struct in_addr addr;

    if (argc != 2) {
        fprintf(stderr, "%s <dotted\-address>\\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    if (inet_aton(argv[1], &addr) == 0) {
        fprintf(stderr, "Invalid address\\n");
        exit(EXIT_FAILURE);
    }

    printf("%s\\n", inet_ntoa(addr));
    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR byteorder (3),
.BR getaddrinfo (3),
.BR gethostbyname (3),
.BR getnameinfo (3),
.BR getnetent (3),
.BR inet_net_pton (3),
.BR inet_ntop (3),
.BR inet_pton (3),
.BR hosts (5),
.BR networks (5)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
'\" t
.\" Copyright (C) 2014 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH INET_NET_PTON 3 2014-05-28 "Linux" "Linux Programmer's Manual"
.SH NAME
inet_net_pton, inet_net_ntop \- Internet network number conversion
.SH SYNOPSIS
.nf
.B #include <arpa/inet.h>

.BI "int inet_net_pton(int " af ", const char *" pres ,
.BI "                  void *" netp ", size_t " nsize );

.BI "char *inet_net_ntop(int " af ", const void *" netp ", int " bits ,
.BI "                    char *" pres ", size_t " psize );
.fi
.sp
Link with \fI\-lresolv\fP.
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR inet_net_pton (),
.BR inet_net_ntop ():
.ad l
.RS 4
.PD 0
.TP 4
Since glibc 2.20:
_DEFAULT_SOURCE
.TP 4
Before glibc 2.20:
_BSD_SOURCE || _SVID_SOURCE
.PD
.RE
.ad b
.SH DESCRIPTION
These functions convert network numbers between
presentation (i.e., printable) format and network (i.e., binary) format.

For both functions,
.I af
specifies the address family for the conversion;
the only supported value is
.BR AF_INET .
.SS inet_net_pton()
The
.BR inet_net_pton ()
function converts
.IR pres ,
a null-terminated string containing an Internet network number in
presentation format to network format.
The result of the conversion, which is in network byte order,
is placed in the buffer pointed to by
.IR net .
(The
.I netp
argument typically points to an
.I in_addr
structure.)
The
.I nsize
argument specifies the number of bytes available in
.IR netp .

On success,
.BR inet_net_pton ()
returns the number of bits in the network number field
of the result placed in
.IR netp .
For a discussion of the input presentation format and the return value,
see NOTES.

.IR Note :
the buffer pointed to by
.I netp
should be zeroed out before calling
.BR inet_net_pton (),
since the call writes only as many bytes as are required
for the network number (or as are explicitly specified by
.IR pres ),
which may be less than the number of bytes in a complete network address.
.SS inet_net_ntop()
The
.BR inet_net_ntop ()
function converts the network number in the buffer pointed to by
.IR netp
to presentation format;
.I *netp
is interpreted as a value in network byte order.
The
.I bits
argument specifies the number of bits in the network number in
.IR *netp .

The null-terminated presentation-format string
is placed in the buffer pointed to by
.IR pres .
The
.I psize
argument specifies the number of bytes available in
.IR pres .
The presentation string is in CIDR format:
a dotted-decimal number representing the network address,
followed by a slash, and the size of the network number in bits.
.SH RETURN VALUE
On success,
.BR inet_net_pton ()
returns the number of bits in the network number.
On error, it returns \-1, and
.I errno
is set to indicate the cause of the error.

On success,
.BR inet_net_ntop ()
returns
.IR pres .
On error, it returns NULL, and
.I errno
is set to indicate the cause of the error.
.SH ERRORS
.TP
.B EAFNOSUPPORT
.I af
specified a value other than
.BR AF_INET .
.TP
.B EMSGSIZE
The size of the output buffer was insufficient.
.TP
.B ENOENT
.RB ( inet_net_pton ())
.IR pres
was not in correct presentation format.
.SH CONFORMING TO
The
.BR inet_net_pton ()
and
.BR inet_net_ntop ()
functions are nonstandard, but widely available.
.SH NOTES
.SS Input presentation format for inet_net_pton()
The network number may be specified either
as a hexadecimal value
or in dotted-decimal notation.

Hexadecimal values are indicated by an initial "0x" or "0X".
The hexadecimal digits populate the nibbles (half octets) of the
network number from left to right in network byte order.
.\" If the hexadecimal string is short, the remaining nibbles are zeroed.

In dotted-decimal notation, up to four octets are specified,
as decimal numbers separated by dots.
Thus, any of the following forms are accepted:

    a.b.c.d
    a.b.c
    a.b
    a

Each part is a number in the range 0 to 255 that
populates one byte of the resulting network number,
going from left to right, in network-byte (big endian) order.
Where a part is omitted, the resulting byte in the network number is zero.
.\" Reading other man pages, some other implementations treat
.\" 	'c' in a.b.c as a 16-bit number that populates right-most two bytes
.\"     'b' in a.b as a 24-bit number that populates right-most three bytes

For either hexadecimal or dotted-decimal format,
the network number can optionally be followed by a slash
and a number in the range 0 to 32,
which specifies the size of the network number in bits.
.SS Return value of inet_net_pton()
The return value of
.BR inet_net_pton ()
is the number of bits in the network number field.
If the input presentation string terminates with a slash and
an explicit size value, then that size becomes the return value of
.BR inet_net_pton ().
Otherwise, the return value,
.IR bits ,
is inferred as follows:
.IP * 3
If the most significant byte of the network number is
greater than or equal to 240,
then
.I bits
is 32.
.IP * 3
Otherwise,
if the most significant byte of the network number is
greater than or equal to 224,
then
.I bits
is 4.
.IP * 3
Otherwise,
if the most significant byte of the network number is
greater than or equal to 192,
then
.I bits
is 24.
.IP * 3
Otherwise,
if the most significant byte of the network number is
greater than or equal to 128,
then
.I bits
is 16.
.IP *
Otherwise,
.I bits
is 8.
.PP
If the resulting
.I bits
value from the above steps is greater than or equal to 8,
but the number of octets specified in the network number exceed
.IR "bits/8" ,
then
.I bits
is set to 8 times the number of octets actually specified.
.SH EXAMPLE
The program below demonstrates the use of
.BR inet_net_pton ()
and
.BR inet_net_ntop ().
It uses
.BR inet_net_pton ()
to convert the presentation format network address provided in
its first command-line argument to binary form, displays the return value from
.BR inet_net_pton ().
It then uses
.BR inet_net_ntop ()
to convert the binary form back to presentation format,
and displays the resulting string.

In order to demonstrate that
.BR inet_net_pton ()
may not write to all bytes of its
.I netp
argument, the program allows an optional second command-line argument,
a number used to initialize the buffer before
.BR inet_net_pton ()
is called.
As its final line of output,
the program displays all of the bytes of the buffer returned by
.BR inet_net_pton ()
allowing the user to see which bytes have not been touched by
.BR inet_net_pton ().

An example run, showing that
.BR inet_net_pton ()
infers the number of bits in the network number:

.in +4n
.nf
$ \fB./a.out 193.168\fP
inet_net_pton() returned: 24
inet_net_ntop() yielded:  193.168.0/24
Raw address:              c1a80000
.fi
.in

Demonstrate that
.BR inet_net_pton ()
does not zero out unused bytes in its result buffer:

.in +4n
.nf
$ \fB./a.out 193.168 0xffffffff\fP
inet_net_pton() returned: 24
inet_net_ntop() yielded:  193.168.0/24
Raw address:              c1a800ff
.fi
.in

Demonstrate that
.BR inet_net_pton ()
will widen the inferred size of the network number,
if the supplied number of bytes in the presentation
string exceeds the inferred value:

.in +4n
.nf
$ \fB./a.out 193.168.1.128\fP
inet_net_pton() returned: 32
inet_net_ntop() yielded:  193.168.1.128/32
Raw address:              c1a80180
.fi
.in

Explicitly specifying the size of the network number overrides any
inference about its size
(but any extra bytes that are explicitly specified will still be used by
.BR inet_net_pton ():
to populate the result buffer):

.in +4n
.nf
$ \fB./a.out 193.168.1.128/24\fP
inet_net_pton() returned: 24
inet_net_ntop() yielded:  193.168.1/24
Raw address:              c1a80180
.fi
.in
.SS Program source
.nf
/* Link with "\-lresolv" */

#include <arpa/inet.h>
#include <stdio.h>
#include <stdlib.h>

#define errExit(msg)    do { perror(msg); exit(EXIT_FAILURE); \\
                        } while (0)

int
main(int argc, char *argv[])
{
    char buf[100];
    struct in_addr addr;
    int bits;

    if (argc < 2) {
        fprintf(stderr,
                "Usage: %s presentation\-form [addr\-init\-value]\\n",
                argv[0]);
        exit(EXIT_FAILURE);
    }

    /* If argv[2] is supplied (a numeric value), use it to initialize
       the output buffer given to inet_net_pton(), so that we can see
       that inet_net_pton() initializes only those bytes needed for
       the network number. If argv[2] is not supplied, then initialize
       the buffer to zero (as is recommended practice). */

    addr.s_addr = (argc > 2) ? strtod(argv[2], NULL) : 0;

    /* Convert presentation network number in argv[1] to binary */

    bits = inet_net_pton(AF_INET, argv[1], &addr, sizeof(addr));
    if (bits == \-1)
        errExit("inet_net_ntop");

    printf("inet_net_pton() returned: %d\\n", bits);

    /* Convert binary format back to presentation, using \(aqbits\(aq
       returned by inet_net_pton() */

    if (inet_net_ntop(AF_INET, &addr, bits, buf, sizeof(buf)) == NULL)
        errExit("inet_net_ntop");

    printf("inet_net_ntop() yielded:  %s\\n", buf);

    /* Display \(aqaddr\(aq in raw form (in network byte order), so we can
       see bytes not displayed by inet_net_ntop(); some of those bytes
       may not have been touched by inet_net_ntop(), and so will still
       have any initial value that was specified in argv[2]. */

    printf("Raw address:              %x\\n", htonl(addr.s_addr));

    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR inet (3),
.BR networks (5)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 2000 Sam Varshavchik <mrsam@courier-mta.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References: RFC 2553
.TH INET_NTOP 3 2015-05-07 "Linux" "Linux Programmer's Manual"
.SH NAME
inet_ntop \- convert IPv4 and IPv6 addresses from binary to text form
.SH SYNOPSIS
.nf
.B #include <arpa/inet.h>
.sp
.BI "const char *inet_ntop(int " "af" ", const void *" "src" ,
.BI "                      char *" "dst" ", socklen_t " "size" );
.fi
.SH DESCRIPTION
This function converts the network address structure
.I src
in the
.I af
address family into a character string.
The resulting string is copied to the buffer pointed to by
.IR dst ,
which must be a non-null pointer.
The caller specifies the number of bytes available in this buffer in
the argument
.IR size .
.PP
.BR inet_ntop ()
extends the
.BR inet_ntoa (3)
function to support multiple address families,
.BR inet_ntoa (3)
is now considered to be deprecated in favor of
.BR inet_ntop ().
The following address families are currently supported:
.TP
.B AF_INET
.I src
points to a
.I struct in_addr
(in network byte order)
which is converted to an IPv4 network address in
the dotted-decimal format, "\fIddd.ddd.ddd.ddd\fP".
The buffer
.I dst
must be at least
.B INET_ADDRSTRLEN
bytes long.
.TP
.B AF_INET6
.I src
points to a
.I struct in6_addr
(in network byte order)
which is converted to a representation of this address in the
most appropriate IPv6 network address format for this address.
The buffer
.I dst
must be at least
.B INET6_ADDRSTRLEN
bytes long.
.SH RETURN VALUE
On success,
.BR inet_ntop ()
returns a non-null pointer to
.IR dst .
NULL is returned if there was an error, with
.I errno
set to indicate the error.
.SH ERRORS
.TP
.B EAFNOSUPPORT
.I af
was not a valid address family.
.TP
.B ENOSPC
The converted address string would exceed the size given by
.IR size .
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR inet_ntop ()
T}	Thread safety	MT-Safe locale
.TE

.SH CONFORMING TO
POSIX.1-2001.
Note that RFC\ 2553 defines a prototype where the last argument
.I size
is of type
.IR size_t .
Many systems follow RFC\ 2553.
Glibc 2.0 and 2.1 have
.IR size_t ,
but 2.2 and later have
.IR socklen_t .
.\" 2.1.3: size_t, 2.1.91: socklen_t
.SH BUGS
.B AF_INET6
converts IPv4-mapped IPv6 addresses into an IPv6 format.
.SH EXAMPLE
See
.BR inet_pton (3).
.SH SEE ALSO
.BR getnameinfo (3),
.BR inet (3),
.BR inet_pton (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 2000 Sam Varshavchik <mrsam@courier-mta.com>
.\" and Copyright (c) 2008 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References: RFC 2553
.TH INET_PTON 3 2015-03-02 "Linux" "Linux Programmer's Manual"
.SH NAME
inet_pton \- convert IPv4 and IPv6 addresses from text to binary form
.SH SYNOPSIS
.nf
.B #include <arpa/inet.h>

.BI "int inet_pton(int " "af" ", const char *" "src" ", void *" "dst" );
.fi
.SH DESCRIPTION
This function converts the character string
.I src
into a network address structure in the
.I af
address family, then
copies
the network address structure to
.IR dst .
The
.I af
argument must be either
.B AF_INET
or
.BR AF_INET6 .
.PP
The following address families are currently supported:
.TP
.B AF_INET
.I src
points to a character string containing an IPv4 network address in
dotted-decimal format, "\fIddd.ddd.ddd.ddd\fP", where
.I ddd
is a decimal number of up to three digits in the range 0 to 255.
The address is converted to a
.I struct in_addr
and copied to
.IR dst ,
which must be
.I sizeof(struct in_addr)
(4) bytes (32 bits) long.
.TP
.B AF_INET6
.I src
points to a character string containing an IPv6 network address.
The address is converted to a
.I struct in6_addr
and copied to
.IR dst ,
which must be
.I sizeof(struct in6_addr)
(16) bytes (128 bits) long.
The allowed formats for IPv6 addresses follow these rules:
.RS
.IP 1. 3
The preferred format is
.IR x:x:x:x:x:x:x:x .
This form consists of eight hexadecimal numbers,
each of which expresses a 16-bit value (i.e., each
.I x
can be up to 4 hex digits).
.IP 2.
A series of contiguous zero values in the preferred format
can be abbreviated to
.IR :: .
Only one instance of
.I ::
can occur in an address.
For example, the loopback address
.I 0:0:0:0:0:0:0:1
can be abbreviated as
.IR ::1 .
The wildcard address, consisting of all zeros, can be written as
.IR :: .
.IP 3.
An alternate format is useful for expressing IPv4-mapped IPv6 addresses.
This form is written as
.IR x:x:x:x:x:x:d.d.d.d ,
where the six leading
.IR x s
are hexadecimal values that define the six most-significant
16-bit pieces of the address (i.e., 96 bits), and the
.IR d s
express a value in dotted-decimal notation that
defines the least significant 32 bits of the address.
An example of such an address is
.IR ::FFFF:204.152.189.116 .
.RE
.IP
See RFC 2373 for further details on the representation of IPv6 addresses.
.SH RETURN VALUE
.BR inet_pton ()
returns 1 on success (network address was successfully converted).
0 is returned if
.I src
does not contain a character string representing a valid network
address in the specified address family.
If
.I af
does not contain a valid address family, \-1 is returned and
.I errno
is set to
.BR EAFNOSUPPORT .
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR inet_pton ()
T}	Thread safety	MT-Safe locale
.TE
.SH CONFORMING TO
POSIX.1-2001.
.SH NOTES
Unlike
.BR inet_aton (3)
and
.BR inet_addr (3),
.BR inet_pton ()
supports IPv6 addresses.
On the other hand,
.BR inet_pton ()
accepts only IPv4 addresses in dotted-decimal notation, whereas
.BR inet_aton (3)
and
.BR inet_addr (3)
allow the more general numbers-and-dots notation (hexadecimal
and octal number formats, and formats that don't require all
four bytes to be explicitly written).
For an interface that handles both IPv6 addresses, and IPv4
addresses in numbers-and-dots notation, see
.BR getaddrinfo (3).
.SH BUGS
.B AF_INET6
does not recognize IPv4 addresses.
An explicit IPv4-mapped IPv6 address must be supplied in
.I src
instead.
.SH EXAMPLE
The program below demonstrates the use of
.BR inet_pton ()
and
.BR inet_ntop (3).
Here are some example runs:
.in +4n
.nf

.RB "$" " ./a.out i6 0:0:0:0:0:0:0:0"
::
.RB "$" " ./a.out i6 1:0:0:0:0:0:0:8"
1::8
.RB "$" " ./a.out i6 0:0:0:0:0:FFFF:204.152.189.116"
::ffff:204.152.189.116
.fi
.in
.SS Program source
\&
.nf
#include <arpa/inet.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int
main(int argc, char *argv[])
{
    unsigned char buf[sizeof(struct in6_addr)];
    int domain, s;
    char str[INET6_ADDRSTRLEN];

    if (argc != 3) {
        fprintf(stderr, "Usage: %s {i4|i6|<num>} string\\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    domain = (strcmp(argv[1], "i4") == 0) ? AF_INET :
             (strcmp(argv[1], "i6") == 0) ? AF_INET6 : atoi(argv[1]);

    s = inet_pton(domain, argv[2], buf);
    if (s <= 0) {
        if (s == 0)
            fprintf(stderr, "Not in presentation format");
        else
            perror("inet_pton");
        exit(EXIT_FAILURE);
    }

    if (inet_ntop(domain, buf, str, INET6_ADDRSTRLEN) == NULL) {
        perror("inet_ntop");
        exit(EXIT_FAILURE);
    }

    printf("%s\\n", str);

    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR getaddrinfo (3),
.BR inet (3),
.BR inet_ntop (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 2004 Andries Brouwer <aeb@cwi.nl>.
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH INFINITY 3  2007-07-26 "" "Linux Programmer's Manual"
.SH NAME
INFINITY, NAN, HUGE_VAL, HUGE_VALF, HUGE_VALL \- floating-point constants
.SH SYNOPSIS
.nf
.BR "#define _ISOC99_SOURCE" "      /* See feature_test_macros(7) */"
.br
.B #include <math.h>
.sp
.B INFINITY
.sp
.B NAN
.sp
.B HUGE_VAL
.br
.B HUGE_VALF
.br
.B HUGE_VALL
.fi
.SH DESCRIPTION
The macro
.B INFINITY
expands to a
.I float
constant representing positive infinity.

The macro
.B NAN
expands to a
.I float
constant representing a quiet NaN
(when supported).
A
.I quiet
NaN is a NaN ("not-a-number") that does not raise exceptions
when it is used in arithmetic.
The opposite is a
.I signaling
NaN.
See IEC 60559:1989.

The macros
.BR HUGE_VAL ,
.BR HUGE_VALF ,
.B HUGE_VALL
expand to constants of types
.IR double ,
.I float
and
.IR "long double" ,
respectively,
that represent a large positive value, possibly positive infinity.
.SH CONFORMING TO
C99.
.SH AVAILABILITY
On a glibc system, the macro
.B HUGE_VAL
is always available.
Availability of the
.B NAN
macro can be tested using
.BR "#ifdef NAN" ,
and similarly for
.BR INFINITY ,
.BR HUGE_VALF ,
.BR HUGE_VALL .
They will be defined by
.I <math.h>
if
.B _ISOC99_SOURCE
or
.B _GNU_SOURCE
is defined, or
.B __STDC_VERSION__
is defined
and has a value not less than 199901L.
.SH SEE ALSO
.BR fpclassify (3),
.BR math_error (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified Sat Jul 24 19:11:11 1993 by Rik Faith (faith@cs.unc.edu)
.\" Modified 2004-11-12 as per suggestion by Fabian Kreutz/AEB
.\"	to note that this function is not available in glibc2.
.\"
.TH INFNAN 3  1993-06-02 "GNU" "Linux Programmer's Manual"
.SH NAME
infnan \- deal with infinite or not-a-number (NaN) result
.SH SYNOPSIS
.nf
.B #include <math.h>
.sp
.BI "double infnan(int " error );
.fi
.sp
Link with \fI\-lm\fP.
.SH DESCRIPTION
The
.BR infnan ()
function returns a suitable value for infinity and
"not-a-number" (NaN) results.
The value of
.I error
can be
.B ERANGE
to represent infinity or anything else to represent NaN.
.I errno
is also set.
.SH RETURN VALUE
If
.I error
is
.B ERANGE
(Infinity),
.B HUGE_VAL
is returned.
.PP
If
.I error
is
.RB \- ERANGE
(\-Infinity),
.RB \- HUGE_VAL
is returned.
.PP
If
.I error
is anything else, NAN is returned.
.SH ERRORS
.TP
.B EDOM
The value of
.I error
is "not-a-number" (NaN).
.TP
.B ERANGE
The value of
.I error
is positive infinity or negative infinity.
.SH CONFORMING TO
4.3BSD.
.SH NOTES
This obsolete function was provided in
libc4 and libc5, but is not available in glibc2.
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified 1993-07-24 by Rik Faith <faith@cs.unc.edu>
.\" Modified 2004-10-10 by aeb
.\"
.TH INITGROUPS 3  2015-03-29 "GNU" "Linux Programmer's Manual"
.SH NAME
initgroups \- initialize the supplementary group access list
.SH SYNOPSIS
.nf
.B #include <sys/types.h>
.B #include <grp.h>
.sp
.BI "int initgroups(const char *" user ", gid_t " group );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR initgroups ():
_BSD_SOURCE
.SH DESCRIPTION
The
.BR initgroups ()
function initializes the group access list by
reading the group database
.I /etc/group
and using all groups of
which
.I user
is a member.
The additional group
.I group
is
also added to the list.

The
.I user
argument must be non-NULL.
.SH RETURN VALUE
The
.BR initgroups ()
function returns 0 on success.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B ENOMEM
Insufficient memory to allocate group information structure.
.TP
.B EPERM
The calling process has insufficient privilege.
See the underlying system call
.BR setgroups (2).
.SH FILES
.nf
\fI/etc/group\fP		group database file
.fi
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR initgroups ()
T}	Thread safety	MT-Safe locale
.TE

.SH CONFORMING TO
SVr4, 4.3BSD.
.SH SEE ALSO
.BR getgroups (2),
.BR setgroups (2),
.BR credentials (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" peter memishian -- meem@gnu.ai.mit.edu
.\" $Id: insque.3,v 1.2 1996/10/30 21:03:39 meem Exp meem $
.\" and Copyright (c) 2010, Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"   Linux libc source code (5.4.7)
.\"   Solaris 2.x, OSF/1, and HP-UX manpages
.\"   Curry's "UNIX Systems Programming for SVR4" (O'Reilly & Associates 1996)
.\"
.\" Changed to POSIX, 2003-08-11, aeb+wh
.\" mtk, 2010-09-09: Noted glibc 2.4 bug, added info on circular
.\"	lists, added example program
.\"
.TH INSQUE 3  2015-04-19 "" "Linux Programmer's Manual"
.SH NAME
insque, remque \- insert/remove an item from a queue
.SH SYNOPSIS
.nf
.B #include <search.h>
.sp
.BI "void insque(void *" elem ", void *" prev );

.BI "void remque(void *" elem );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR insque (),
.BR remque ():
.RS 4
_SVID_SOURCE || _XOPEN_SOURCE\ >=\ 500 ||
_XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED
.RE
.ad
.SH DESCRIPTION
The
.BR insque ()
and
.BR remque ()
functions manipulate doubly-linked lists.
Each element in the list is a structure of
which the first two elements are a forward and a
backward pointer.
The linked list may be linear (i.e., NULL forward pointer at
the end of the list and NULL backward pointer at the start of the list)
or circular.

The
.BR insque ()
function inserts the element pointed to by \fIelem\fP
immediately after the element pointed to by \fIprev\fP.

If the list is linear, then the call
.I "insque(elem, NULL)"
can be used to insert the initial list element,
and the call sets the forward and backward pointers of
.I elem
to NULL.

If the list is circular,
the caller should ensure that the forward and backward pointers of the
first element are initialized to point to that element,
and the
.I prev
argument of the
.BR insque ()
call should also point to the element.

The
.BR remque ()
function removes the element pointed to by \fIelem\fP from the
doubly-linked list.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR insque (),
.BR remque ()
T}	Thread safety	MT-Safe
.TE

.SH CONFORMING TO
POSIX.1-2001.
.SH NOTES
Traditionally (e.g., SunOS, Linux libc4 and libc5),
the arguments of these functions were of type \fIstruct qelem *\fP,
defined as:

.in +4n
.nf
struct qelem {
    struct qelem *q_forw;
    struct qelem *q_back;
    char          q_data[1];
};
.fi
.in

This is still what you will get if
.B _GNU_SOURCE
is defined before
including \fI<search.h>\fP.

The location of the prototypes for these functions differs among several
versions of UNIX.
The above is the POSIX version.
Some systems place them in \fI<string.h>\fP.
.\" Linux libc4 and libc 5 placed them
.\" in \fI<stdlib.h>\fP.
.SH BUGS
In glibc 2.4 and earlier, it was not possible to specify
.I prev
as NULL.
Consequently, to build a linear list, the caller had to build a list
using an initial call that contained the first two elements of the list,
with the forward and backward pointers in each element suitably initialized.
.SH EXAMPLE
The program below demonstrates the use of
.BR insque ().
Here is an example run of the program:
.in +4n
.nf

.RB "$ " "./a.out -c a b c"
Traversing completed list:
    a
    b
    c
That was a circular list
.fi
.in
.SS Program source
\&
.nf
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <search.h>

struct element {
    struct element *forward;
    struct element *backward;
    char *name;
};

static struct element *
new_element(void)
{
    struct element *e;

    e = malloc(sizeof(struct element));
    if (e == NULL) {
        fprintf(stderr, "malloc() failed\\n");
        exit(EXIT_FAILURE);
    }

    return e;
}

int
main(int argc, char *argv[])
{
    struct element *first, *elem, *prev;
    int circular, opt, errfnd;

    /* The "\-c" command\-line option can be used to specify that the
       list is circular */

    errfnd = 0;
    circular = 0;
    while ((opt = getopt(argc, argv, "c")) != \-1) {
        switch (opt) {
        case 'c':
            circular = 1;
            break;
        default:
            errfnd = 1;
            break;
        }
    }

    if (errfnd || optind >= argc) {
        fprintf(stderr,  "Usage: %s [\-c] string...\\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    /* Create first element and place it in the linked list */

    elem = new_element();
    first = elem;

    elem\->name = argv[optind];

    if (circular) {
        elem\->forward = elem;
        elem\->backward = elem;
        insque(elem, elem);
    } else {
        insque(elem, NULL);
    }

    /* Add remaining command\-line arguments as list elements */

    while (++optind < argc) {
        prev = elem;

        elem = new_element();
        elem\->name = argv[optind];
        insque(elem, prev);
    }

    /* Traverse the list from the start, printing element names */

    printf("Traversing completed list:\\n");
    elem = first;
    do {
        printf("    %s\\n", elem\->name);
        elem = elem\->forward;
    } while (elem != NULL && elem != first);

    if (elem == first)
        printf("That was a circular list\\n");

    exit(EXIT_SUCCESS);
}
.fi
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2007 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" 2007-10-23 mtk, Nearly a complete rewrite of the earlier page.
.TH INTRO 3 2010-11-11 "Linux" "Linux Programmer's Manual"
.SH NAME
intro \- introduction to library functions
.SH DESCRIPTION
Section 3 of the manual describes all library functions excluding the library
functions (system call wrappers) described in Section 2,
which implement system calls.

Many of the functions described in the section are part of the
Standard C Library
.RI ( libc ).
Some functions are part of other libraries (e.g.,
the math library,
.IR libm ,
or the real-time library,
.IR librt )
in which case the manual page will indicate the linker
option needed to link against the required library
(e.g.,
.I \-lm
and
.IR \-lrt ,
respectively,
for the aforementioned libraries).

In some cases,
the programmer must define a feature test macro in order to obtain
the declaration of a function from the header file specified
in the man page SYNOPSIS section.
(Where required, these feature test macros must be defined before including
.I any
header files.)
In such cases, the required macro is described in the man page.
For further information on feature test macros, see
.BR feature_test_macros (7).
.\"
.\" There
.\" are various function groups which can be identified by a letter which
.\" is appended to the chapter number:
.\" .IP (3C)
.\" These functions, the functions from chapter 2 and from chapter 3S are
.\" contained in the C standard library libc, which will be used by
.\" .BR cc (1)
.\" by default.
.\" .IP (3S)
.\" These functions are parts of the
.\" .BR stdio (3)
.\" library.  They are contained in the standard C library libc.
.\" .IP (3M)
.\" These functions are contained in the arithmetic library libm.  They are
.\" used by the
.\" .BR f77 (1)
.\" FORTRAN compiler by default, but not by the
.\" .BR cc (1)
.\" C compiler, which needs the option \fI\-lm\fP.
.\" .IP (3F)
.\" These functions are part of the FORTRAN library libF77.  There are no
.\" special compiler flags needed to use these functions.
.\" .IP (3X)
.\" Various special libraries.  The manual pages documenting their functions
.\" specify the library names.
.SH CONFORMING TO
Certain terms and abbreviations are used to indicate UNIX variants
and standards to which calls in this section conform.
See
.BR standards (7).
.SH NOTES
.SS Authors and copyright conditions
Look at the header of the manual page source for the author(s) and copyright
conditions.
Note that these can be different from page to page!
.SH SEE ALSO
.BR intro (2),
.BR errno (3),
.BR capabilities (7),
.BR credentials (7),
.BR environ (7),
.BR feature_test_macros (7),
.BR libc (7),
.BR math_error (7),
.BR path_resolution (7),
.BR pthreads (7),
.BR signal (7),
.BR standards (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1993 by Thomas Koenig (ig25@rz.uni-karlsruhe.de)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified Sat Jul 24 19:10:00 1993 by Rik Faith (faith@cs.unc.edu)
.\" Modified Sun Aug 21 17:51:50 1994 by Rik Faith (faith@cs.unc.edu)
.\" Modified Sat Sep  2 21:52:01 1995 by Jim Van Zandt <jrv@vanzandt.mv.com>
.\" Modified Mon May 27 22:55:26 1996 by Martin Schulze (joey@linux.de)
.\"
.TH ISALPHA 3 2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
isalnum, isalpha, isascii, isblank, iscntrl, isdigit, isgraph, islower,
isprint, ispunct, isspace, isupper, isxdigit,
isalnum_l, isalpha_l, isascii_l, isblank_l, iscntrl_l,
isdigit_l, isgraph_l, islower_l,
isprint_l, ispunct_l, isspace_l, isupper_l, isxdigit_l
\- character classification functions
.SH SYNOPSIS
.nf
.B #include <ctype.h>
.sp
.BI "int isalnum(int " c );
.BI "int isalpha(int " c );
.BI "int iscntrl(int " c );
.BI "int isdigit(int " c );
.BI "int isgraph(int " c );
.BI "int islower(int " c );
.BI "int isprint(int " c );
.BI "int ispunct(int " c );
.BI "int isspace(int " c );
.BI "int isupper(int " c );
.BI "int isxdigit(int " c );

.BI "int isascii(int " c );
.BI "int isblank(int " c );

.BI "int isalnum_l(int " c ", locale_t " locale );
.BI "int isalpha_l(int " c ", locale_t " locale );
.BI "int isblank_l(int " c ", locale_t " locale );
.BI "int iscntrl_l(int " c ", locale_t " locale );
.BI "int isdigit_l(int " c ", locale_t " locale );
.BI "int isgraph_l(int " c ", locale_t " locale );
.BI "int islower_l(int " c ", locale_t " locale );
.BI "int isprint_l(int " c ", locale_t " locale );
.BI "int ispunct_l(int " c ", locale_t " locale );
.BI "int isspace_l(int " c ", locale_t " locale );
.BI "int isupper_l(int " c ", locale_t " locale );
.BI "int isxdigit_l(int " c ", locale_t " locale );

.BI "int isascii_l(int " c ", locale_t " locale );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR isascii ():
.RS 4
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE
.br
.RE

.BR isblank ():
.RS 4
_XOPEN_SOURCE\ >=\ 600 || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE

.BR isalnum_l (),
.BR isalpha_l (),
.BR isblank_l (),
.BR iscntrl_l (),
.BR isdigit_l (),
.BR isgraph_l (),
.BR islower_l (),
.BR isprint_l (),
.BR ispunct_l (),
.BR isspace_l (),
.BR isupper_l (),
.BR isxdigit_l ():
.PD 0
.RS 4
.TP
Since glibc 2.10:
_XOPEN_SOURCE\ >=\ 700
.TP
Before glibc 2.10:
_GNU_SOURCE
.RE
.PD

.BR isascii_l ():
.PD 0
.RS 4
.TP
Since glibc 2.10:
_XOPEN_SOURCE\ >=\ 700 && (_SVID_SOURCE || _BSD_SOURCE)
.TP
Before glibc 2.10:
_GNU_SOURCE
.RE
.PD
.ad
.SH DESCRIPTION
These functions check whether
.IR c ,
which must have the value of an
.I unsigned char
or
.BR EOF ,
falls into a certain character class according to the specified locale.
The functions without the
"_l" suffix perform the check based on the current locale.

The functions with the "_l" suffix perform the check
based on the locale specified by the locale object
.IR locale .
The behavior of these functions is undefined if
.I locale
is the special locale object
.B LC_GLOBAL_LOCALE
(see
.BR duplocale (3))
or is not a valid locale object handle.

The list below explains the operation of the functions without
the "_l" suffix;
the functions with the "_l" suffix differ only in using the locale object
.I locale
instead of the current locale.
.TP
.BR isalnum ()
checks for an alphanumeric character; it is equivalent to
.BI "(isalpha(" c ") || isdigit(" c "))" \fR.
.TP
.BR isalpha ()
checks for an alphabetic character; in the standard \fB"C"\fP
locale, it is equivalent to
.BI "(isupper(" c ") || islower(" c "))" \fR.
In some locales, there may be additional characters for which
.BR isalpha ()
is true\(emletters which are neither uppercase nor lowercase.
.TP
.BR isascii ()
checks whether \fIc\fP is a 7-bit
.I unsigned char
value that fits into
the ASCII character set.
.TP
.BR isblank ()
checks for a blank character; that is, a space or a tab.
.TP
.BR iscntrl ()
checks for a control character.
.TP
.BR isdigit ()
checks for a digit (0 through 9).
.TP
.BR isgraph ()
checks for any printable character except space.
.TP
.BR islower ()
checks for a lowercase character.
.TP
.BR isprint ()
checks for any printable character including space.
.TP
.BR ispunct ()
checks for any printable character which is not a space or an
alphanumeric character.
.TP
.BR isspace ()
checks for white-space characters.
In the
.B """C"""
and
.B """POSIX"""
locales, these are: space, form-feed
.RB ( \(aq\ef\(aq ),
newline
.RB ( \(aq\en\(aq ),
carriage return
.RB ( \(aq\er\(aq ),
horizontal tab
.RB ( \(aq\et\(aq ),
and vertical tab
.RB ( \(aq\ev\(aq ).
.TP
.BR isupper ()
checks for an uppercase letter.
.TP
.BR isxdigit ()
checks for hexadecimal digits, that is, one of
.br
.BR "0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F" .
.SH RETURN VALUE
The values returned are nonzero if the character
.I c
falls into the tested class, and zero if not.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.ad l
.TS
allbox;
lbw32 lb lb
l l l.
Interface	Attribute	Value
T{
.BR isalnum (),
.BR isalpha (),
.BR isascii (),
.BR isblank (),
.BR iscntrl (),
.BR isdigit (),
.BR isgraph (),
.BR islower (),
.BR isprint (),
.BR ispunct (),
.BR isspace (),
.BR isupper (),
.BR isxdigit ()
T}	Thread safety	MT-Safe
.TE
.ad
.\" FIXME: need a thread-safety statement about the *_l functions
.SH VERSIONS
.BR isalnum_l (),
.BR isalpha_l (),
.BR isblank_l (),
.BR iscntrl_l (),
.BR isdigit_l (),
.BR isgraph_l (),
.BR islower_l (),
.BR isprint_l (),
.BR ispunct_l (),
.BR isspace_l (),
.BR isupper_l (),
.BR isxdigit_l (),
and
.BR isascii_l ()
are available since glibc 2.3.
.SH CONFORMING TO
C89 specifies
.BR isalnum (),
.BR isalpha (),
.BR iscntrl (),
.BR isdigit (),
.BR isgraph (),
.BR islower (),
.BR isprint (),
.BR ispunct (),
.BR isspace (),
.BR isupper (),
and
.BR isxdigit (),
but not
.BR isascii ()
and
.BR isblank ().
POSIX.1-2001
also specifies those functions, and also
.BR isascii ()
(as an XSI extension)
and
.BR isblank ().
C99 specifies all of the preceding functions, except
.BR isascii ().

POSIX.1-2008 marks
.BR isascii ()
as obsolete,
noting that it cannot be used portably in a localized application.

POSIX.1-2008 specifies
.BR isalnum_l (),
.BR isalpha_l (),
.BR isblank_l (),
.BR iscntrl_l (),
.BR isdigit_l (),
.BR isgraph_l (),
.BR islower_l (),
.BR isprint_l (),
.BR ispunct_l (),
.BR isspace_l (),
.BR isupper_l (),
and
.BR isxdigit_l ().

.BR isascii_l ()
is a GNU extension.
.SH NOTES
The details of what characters belong to which class depend on the
locale.
For example,
.BR isupper ()
will not recognize an A-umlaut (\(:A) as an uppercase letter in the default
.B "C"
locale.
.SH SEE ALSO
.BR iswalnum (3),
.BR iswalpha (3),
.BR iswblank (3),
.BR iswcntrl (3),
.BR iswdigit (3),
.BR iswgraph (3),
.BR iswlower (3),
.BR iswprint (3),
.BR iswpunct (3),
.BR iswspace (3),
.BR iswupper (3),
.BR iswxdigit (3),
.BR newlocale (3),
.BR setlocale (3),
.BR uselocale (3),
.BR toascii (3),
.BR tolower (3),
.BR toupper (3),
.BR ascii (7),
.BR locale (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 2008, Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH ISATTY 3 2015-03-02 "Linux" "Linux Programmer's Manual"
.SH NAME
isatty \- test whether a file descriptor refers to a terminal
.SH SYNOPSIS
.nf
.B #include <unistd.h>
.sp
.BI "int isatty(int " fd );
.fi
.SH DESCRIPTION
The
.BR isatty ()
function tests whether
.I fd
is an open file descriptor referring to a terminal.
.SH RETURN VALUE
.BR isatty ()
returns 1 if
.I fd
is an open file descriptor referring to a terminal;
otherwise 0 is returned, and
.I errno
is set to indicate the error.
.SH ERRORS
.TP
.B EBADF
.I fd
is not a valid file descriptor.
.TP
.B EINVAL
.I fd
refers to a file other than a terminal.
POSIX.1-2001 specifies the error
.BR ENOTTY
.\" FIXME . File a bug for this?
for this case.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR isatty ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
SVr4, 4.3BSD, POSIX.1-2001.
.SH SEE ALSO
.BR fstat (2),
.BR ttyname (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
'\" t
.\" Copyright (C) 2014 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH ISFDTYPE 3 2014-03-13 "Linux" "Linux Programmer's Manual"
.SH NAME
isfdtype \- test file type of a file descriptor
.SH SYNOPSIS
.nf
.B #include <sys/stat.h>
.B #include <sys/socket.h>

.BI "int isfdtype(int " fd ", int " fdtype );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR isfdtype ():
.ad l
.RS 4
.PD 0
.TP 4
Since glibc 2.20:
_DEFAULT_SOURCE
.TP 4
Before glibc 2.20:
_BSD_SOURCE || _SVID_SOURCE
.PD
.RE
.ad b
.SH DESCRIPTION
The
.BR isfdtype ()
function tests whether the file descriptor
.I fd
refers to a file of type
.IR fdtype .
The
.I fdtype
argument specifies one of the
.B S_IF*
constants defined in
.I <sys/stat.h>
and documented in
.BR stat (2)
(e.g.,
.BR S_IFREG ).
.SH RETURN VALUE
The
.BR isfdtype ()
function returns 1 if the file descriptor
.I fd
is of type
.IR fdtype
and 0 if it is not.
On error, -1 is returned and
.I errno
is set to indicate the cause.
.SH ERRORS
The
.BR isfdtype ()
function can fail with any of the same errors as
.BR fstat (3).
.SH CONFORMING TO
The
.BR isfdtype ()
function is not specified in any standard,
but did appear in the draft POSIX.1g standard.
It is present on OpenBSD and Tru64 UNIX
(where the required header file in both cases is just
.IR <sys/stat.h> ,
as shown in the POSIX.1g draft),
and possibly other systems.
.SH NOTES
Portable applications should use
.BR fstat (3)
instead.
.SH SEE ALSO
.BR fstat (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 2002 Walter Harms (walter.harms@informatik.uni-oldenburg.de)
.\"
.\" %%%LICENSE_START(GPL_NOVERSION_ONELINE)
.\" Distributed under GPL
.\" %%%LICENSE_END
.\"
.\" 2002-07-27 Walter Harms
.\" this was done with the help of the glibc manual
.\"
.TH ISGREATER 3  2015-03-02 "" "Linux Programmer's Manual"
.SH NAME
isgreater, isgreaterequal, isless, islessequal, islessgreater,
isunordered \- floating-point relational tests without exception for NaN
.SH SYNOPSIS
.nf
.B #include <math.h>
.sp
.BI "int isgreater(" x ", " y );
.sp
.BI "int isgreaterequal(" x ", " y );
.sp
.BI "int isless(" x ", " y );
.sp
.BI "int islessequal(" x ", " y );
.sp
.BI "int islessgreater(" x ", " y );
.sp
.BI "int isunordered(" x ", " y );
.fi
.sp
Link with \fI\-lm\fP.
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
All functions described here:
.RS
_XOPEN_SOURCE\ >=\ 600 || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.ad b
.SH DESCRIPTION
The normal relation operations (like
.BR < ,
"less than")
will fail if one of the operands is NaN.
This will cause an exception.
To avoid this, C99 defines the macros listed below.

These macros are guaranteed to evaluate their arguments only once.
The arguments must be of real floating-point type (note: do not pass
integer values as arguments to these macros, since the arguments will
.I not
be promoted to real-floating types).
.TP
.BR isgreater ()
determines \fI(x)\ >\ (y)\fP without an exception
if
.IR x
or
.I y
is NaN.
.TP
.BR isgreaterequal ()
determines \fI(x)\ >=\ (y)\fP without an exception
if
.IR x
or
.I y
is NaN.
.TP
.BR isless ()
determines \fI(x)\ <\ (y)\fP without an exception
if
.IR x
or
.I y
is NaN.
.TP
.BR islessequal ()
determines \fI(x)\ <=\ (y)\fP without an exception
if
.IR x
or
.I y
is NaN.
.TP
.BR islessgreater ()
determines \fI(x)\ < (y) || (x) >\ (y)\fP
without an exception if
.IR x
or
.I y
is NaN.
This macro is not equivalent to \fIx\ !=\ y\fP because that expression is
true if
.IR x
or
.I y
is NaN.
.TP
.BR isunordered ()
determines whether its arguments are unordered, that is, whether
at least one of the arguments is a NaN.
.SH RETURN VALUE
The macros other than
.BR isunordered ()
return the result of the relational comparison;
these macros return 0 if either argument is a NaN.

.BR isunordered ()
returns 1 if
.IR x
or
.I y
is NaN and 0 otherwise.
.SH ERRORS
No errors occur.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.ad l
.TS
allbox;
lbw30 lb lb
l l l.
Interface	Attribute	Value
T{
.BR isgreater (),
.BR isgreaterequal (),
.BR isless (),
.BR islessequal (),
.BR islessgreater (),
.BR isunordered ()
T}	Thread safety	MT-Safe
.TE
.ad
.SH CONFORMING TO
C99, POSIX.1-2001.
.SH NOTES
Not all hardware supports these functions,
and where hardware support isn't provided, they will be emulated by macros.
This will result in a performance penalty.
Don't use these functions if NaN is of no concern for you.
.SH SEE ALSO
.BR fpclassify (3),
.BR isnan (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) Bruno Haible <haible@clisp.cons.org>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_ONEPARA)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"   GNU glibc-2 source code and manual
.\"   Dinkumware C library reference http://www.dinkumware.com/
.\"   OpenGroup's Single UNIX specification http://www.UNIX-systems.org/online.html
.\"   ISO/IEC 9899:1999
.\"
.TH ISWALNUM 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
iswalnum \- test for alphanumeric wide character
.SH SYNOPSIS
.nf
.B #include <wctype.h>
.sp
.BI "int iswalnum(wint_t " wc );
.fi
.SH DESCRIPTION
The
.BR iswalnum ()
function is the wide-character equivalent of the
.BR isalnum (3)
function.
It tests whether
.I wc
is a wide character
belonging to the wide-character class "alnum".
.PP
The wide-character class "alnum" is a subclass of the wide-character class
"graph", and therefore also a subclass of the wide-character class "print".
.PP
Being a subclass of the wide-character class "print",
the wide-character class
"alnum" is disjoint from the wide-character class "cntrl".
.PP
Being a subclass of the wide-character class "graph",
the wide-character class "alnum" is disjoint from
the wide-character class "space" and its subclass "blank".
.PP
The wide-character class "alnum" is disjoint from the wide-character class
"punct".
.PP
The wide-character class "alnum" is the union of the wide-character classes
"alpha" and "digit".
As such, it also contains the wide-character class
"xdigit".
.PP
The wide-character class "alnum" always contains at least the letters \(aqA\(aq
to \(aqZ\(aq, \(aqa\(aq to \(aqz\(aq and the digits \(aq0\(aq to \(aq9\(aq.
.SH RETURN VALUE
The
.BR iswalnum ()
function returns nonzero
if
.I wc
is a wide character
belonging to the wide-character class "alnum".
Otherwise, it returns zero.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR iswalnum ()
T}	Thread safety	MT-Safe locale
.TE
.SH CONFORMING TO
C99.
.SH NOTES
The behavior of
.BR iswalnum ()
depends on the
.B LC_CTYPE
category of the
current locale.
.SH SEE ALSO
.BR isalnum (3),
.BR iswctype (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) Bruno Haible <haible@clisp.cons.org>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_ONEPARA)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"   GNU glibc-2 source code and manual
.\"   Dinkumware C library reference http://www.dinkumware.com/
.\"   OpenGroup's Single UNIX specification http://www.UNIX-systems.org/online.html
.\"   ISO/IEC 9899:1999
.\"
.TH ISWALPHA 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
iswalpha \- test for alphabetic wide character
.SH SYNOPSIS
.nf
.B #include <wctype.h>
.sp
.BI "int iswalpha(wint_t " wc );
.fi
.SH DESCRIPTION
The
.BR iswalpha ()
function is the wide-character equivalent of the
.BR isalpha (3)
function.
It tests whether
.I wc
is a wide character
belonging to the wide-character class "alpha".
.PP
The wide-character class "alpha" is a subclass of the
wide-character class "alnum",
and therefore also a subclass of the wide-character class "graph" and
of the wide-character class "print".
.PP
Being a subclass of the wide-character class "print",
the wide-character class
"alpha" is disjoint from the wide-character class "cntrl".
.PP
Being a subclass of the wide-character class "graph",
the wide-character class "alpha" is disjoint from
the wide-character class "space" and its subclass "blank".
.PP
Being a subclass of the wide-character class "alnum",
the wide-character class "alpha" is disjoint from the
wide-character class "punct".
.PP
The wide-character class "alpha" is disjoint from the wide-character class
"digit".
.PP
The wide-character class "alpha" contains the wide-character classes "upper"
and "lower".
.PP
The wide-character class "alpha" always contains at least the
letters \(aqA\(aq to \(aqZ\(aq and \(aqa\(aq to \(aqz\(aq.
.SH RETURN VALUE
The
.BR iswalpha ()
function returns nonzero
if
.I wc
is a wide character
belonging to the wide-character class "alpha".
Otherwise, it returns zero.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR iswalpha ()
T}	Thread safety	MT-Safe locale
.TE
.SH CONFORMING TO
C99.
.SH NOTES
The behavior of
.BR iswalpha ()
depends on the
.B LC_CTYPE
category of the
current locale.
.SH SEE ALSO
.BR isalpha (3),
.BR iswctype (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) Bruno Haible <haible@clisp.cons.org>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_ONEPARA)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"   GNU glibc-2 source code and manual
.\"   Dinkumware C library reference http://www.dinkumware.com/
.\"   OpenGroup's Single UNIX specification http://www.UNIX-systems.org/online.html
.\"   ISO/IEC 9899:1999
.\"
.TH ISWBLANK 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
iswblank \- test for whitespace wide character
.SH SYNOPSIS
.nf
.B #include <wctype.h>
.sp
.BI "int iswblank(wint_t " wc );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR iswblank ():
.RS
_XOPEN_SOURCE\ >=\ 600 || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.ad
.SH DESCRIPTION
The
.BR iswblank ()
function is the wide-character equivalent of the
.BR isblank (3)
function.
It tests whether \fIwc\fP is a wide character
belonging to the wide-character class "blank".
.PP
The wide-character class "blank" is a subclass of the wide-character class
"space".
.PP
Being a subclass of the wide-character class "space",
the wide-character class "blank" is disjoint from the
wide-character class "graph" and therefore also disjoint
from its subclasses "alnum", "alpha", "upper", "lower", "digit",
"xdigit", "punct".
.PP
The wide-character class "blank" always contains
at least the space character
and the control character \(aq\\t\(aq.
.SH RETURN VALUE
The
.BR iswblank ()
function returns nonzero
if \fIwc\fP is a wide character
belonging to the wide-character class "blank".
Otherwise, it returns zero.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR iswblank ()
T}	Thread safety	MT-Safe locale
.TE
.SH CONFORMING TO
POSIX.1-2001.
.SH NOTES
The behavior of
.BR iswblank ()
depends on the
.B LC_CTYPE
category of the
current locale.
.SH SEE ALSO
.BR isblank (3),
.BR iswctype (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) Bruno Haible <haible@clisp.cons.org>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_ONEPARA)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"   GNU glibc-2 source code and manual
.\"   Dinkumware C library reference http://www.dinkumware.com/
.\"   OpenGroup's Single UNIX specification http://www.UNIX-systems.org/online.html
.\"   ISO/IEC 9899:1999
.\"
.TH ISWCNTRL 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
iswcntrl \- test for control wide character
.SH SYNOPSIS
.nf
.B #include <wctype.h>
.sp
.BI "int iswcntrl(wint_t " wc );
.fi
.SH DESCRIPTION
The
.BR iswcntrl ()
function is the wide-character equivalent of the
.BR iscntrl (3)
function.
It tests whether
.I wc
is a wide character
belonging to the wide-character class "cntrl".
.PP
The wide-character class "cntrl" is disjoint from the wide-character class
"print" and therefore also disjoint from its subclasses "graph", "alpha",
"upper", "lower", "digit", "xdigit", "punct".
.PP
For an unsigned char
.IR c ,
.I iscntrl(c)
implies
.IR iswcntrl(btowc(c)) ,
but not vice versa.
.SH RETURN VALUE
The
.BR iswcntrl ()
function returns nonzero if
.I wc
is a
wide character belonging to the wide-character class "cntrl".
Otherwise, it returns zero.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR iswcntrl ()
T}	Thread safety	MT-Safe locale
.TE
.SH CONFORMING TO
C99.
.SH NOTES
The behavior of
.BR iswcntrl ()
depends on the
.B LC_CTYPE
category of the
current locale.
.SH SEE ALSO
.BR iscntrl (3),
.BR iswctype (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) Bruno Haible <haible@clisp.cons.org>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_ONEPARA)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"   GNU glibc-2 source code and manual
.\"   Dinkumware C library reference http://www.dinkumware.com/
.\"   OpenGroup's Single UNIX specification http://www.UNIX-systems.org/online.html
.\"   ISO/IEC 9899:1999
.\"
.TH ISWCTYPE 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
iswctype \- wide-character classification
.SH SYNOPSIS
.nf
.B #include <wctype.h>
.sp
.BI "int iswctype(wint_t " wc ", wctype_t " desc );
.fi
.SH DESCRIPTION
If
.I wc
is a wide character having the character property designated by
.I desc
(or in other words: belongs to the character class designated by
.IR desc ),
the
.BR iswctype ()
function returns nonzero.
Otherwise, it
returns zero.
If
.I wc
is
.BR WEOF ,
zero is returned.
.PP
.I desc
must be a character property descriptor
returned by the
.BR wctype (3)
function.
.SH RETURN VALUE
The
.BR iswctype ()
function returns nonzero if
the
.I wc
has the designated
property.
Otherwise, it returns 0.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR iswctype ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C99.
.SH NOTES
The behavior of
.BR iswctype ()
depends on the
.B LC_CTYPE
category of the
current locale.
.SH SEE ALSO
.BR iswalnum (3),
.BR iswalpha (3),
.BR iswblank (3),
.BR iswcntrl (3),
.BR iswdigit (3),
.BR iswgraph (3),
.BR iswlower (3),
.BR iswprint (3),
.BR iswpunct (3),
.BR iswspace (3),
.BR iswupper (3),
.BR iswxdigit (3),
.BR wctype (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) Bruno Haible <haible@clisp.cons.org>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_ONEPARA)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"   GNU glibc-2 source code and manual
.\"   Dinkumware C library reference http://www.dinkumware.com/
.\"   OpenGroup's Single UNIX specification http://www.UNIX-systems.org/online.html
.\"   ISO/IEC 9899:1999
.\"
.TH ISWDIGIT 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
iswdigit \- test for decimal digit wide character
.SH SYNOPSIS
.nf
.B #include <wctype.h>
.sp
.BI "int iswdigit(wint_t " wc );
.fi
.SH DESCRIPTION
The
.BR iswdigit ()
function is the wide-character equivalent of the
.BR isdigit (3)
function.
It tests whether
.I wc
is a wide character
belonging to the wide-character class "digit".
.PP
The wide-character class "digit" is a subclass of the wide-character class
"xdigit", and therefore also a subclass
of the wide-character class "alnum", of
the wide-character class "graph" and of the wide-character class "print".
.PP
Being a subclass of the wide character
class "print", the wide-character class
"digit" is disjoint from the wide-character class "cntrl".
.PP
Being a subclass of the wide-character class "graph",
the wide-character class
"digit" is disjoint from the wide-character class "space" and its subclass
"blank".
.PP
Being a subclass of the wide-character
class "alnum", the wide-character class
"digit" is disjoint from the wide-character class "punct".
.PP
The wide-character class "digit" is
disjoint from the wide-character class
"alpha" and therefore also disjoint from its subclasses "lower", "upper".
.PP
The wide-character class "digit" always
contains exactly the digits \(aq0\(aq to \(aq9\(aq.
.SH RETURN VALUE
The
.BR iswdigit ()
function returns nonzero
if
.I wc
is a wide character
belonging to the wide-character class "digit".
Otherwise, it returns zero.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR iswdigit ()
T}	Thread safety	MT-Safe locale
.TE
.SH CONFORMING TO
C99.
.SH NOTES
The behavior of
.BR iswdigit ()
depends on the
.B LC_CTYPE
category of the
current locale.
.SH SEE ALSO
.BR isdigit (3),
.BR iswctype (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) Bruno Haible <haible@clisp.cons.org>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_ONEPARA)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"   GNU glibc-2 source code and manual
.\"   Dinkumware C library reference http://www.dinkumware.com/
.\"   OpenGroup's Single UNIX specification http://www.UNIX-systems.org/online.html
.\"   ISO/IEC 9899:1999
.\"
.TH ISWGRAPH 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
iswgraph \- test for graphic wide character
.SH SYNOPSIS
.nf
.B #include <wctype.h>
.sp
.BI "int iswgraph(wint_t " wc );
.fi
.SH DESCRIPTION
The
.BR iswgraph ()
function is the wide-character equivalent of the
.BR isgraph (3)
function.
It tests whether
.I wc
is a wide character
belonging to the wide-character class "graph".
.PP
The wide-character class "graph" is a subclass of the wide-character class
"print".
.PP
Being a subclass of the wide-character class "print",
the wide-character class
"graph" is disjoint from the wide-character class "cntrl".
.PP
The wide-character class "graph" is disjoint from the wide-character class
"space" and therefore also disjoint from its subclass "blank".
.\" Note: UNIX98 (susv2/xbd/locale.html) says that "graph" and "space" may
.\" have characters in common, except U+0020. But C99 (ISO/IEC 9899:1999
.\" section 7.25.2.1.10) says that "space" and "graph" are disjoint.
.PP
The wide-character class "graph" contains all the wide characters from the
wide-character class "print" except the space character.
It therefore contains
the wide-character classes "alnum" and "punct".
.SH RETURN VALUE
The
.BR iswgraph ()
function returns nonzero
if
.I wc
is a wide character
belonging to the wide-character class "graph".
Otherwise, it returns zero.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR iswgraph ()
T}	Thread safety	MT-Safe locale
.TE
.SH CONFORMING TO
C99.
.SH NOTES
The behavior of
.BR iswgraph ()
depends on the
.B LC_CTYPE
category of the
current locale.
.SH SEE ALSO
.BR isgraph (3),
.BR iswctype (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) Bruno Haible <haible@clisp.cons.org>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_ONEPARA)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"   GNU glibc-2 source code and manual
.\"   Dinkumware C library reference http://www.dinkumware.com/
.\"   OpenGroup's Single UNIX specification http://www.UNIX-systems.org/online.html
.\"   ISO/IEC 9899:1999
.\"
.TH ISWLOWER 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
iswlower \- test for lowercase wide character
.SH SYNOPSIS
.nf
.B #include <wctype.h>
.sp
.BI "int iswlower(wint_t " wc );
.fi
.SH DESCRIPTION
The
.BR iswlower ()
function is the wide-character equivalent of the
.BR islower (3)
function.
It tests whether
.I wc
is a wide character
belonging to the wide-character class "lower".
.PP
The wide-character class "lower" is a subclass of the wide-character class
"alpha", and therefore also a subclass
of the wide-character class "alnum", of
the wide-character class "graph" and of the wide-character class "print".
.PP
Being a subclass of the wide-character class "print",
the wide-character class
"lower" is disjoint from the wide-character class "cntrl".
.PP
Being a subclass of the wide-character class "graph",
the wide-character class "lower" is disjoint from the
wide-character class "space" and its subclass "blank".
.PP
Being a subclass of the wide-character class "alnum",
the wide-character class
"lower" is disjoint from the wide-character class "punct".
.PP
Being a subclass of the wide-character class "alpha",
the wide-character class
"lower" is disjoint from the wide-character class "digit".
.PP
The wide-character class "lower" contains at least
those characters
.I wc
which are equal to
.I towlower(wc)
and different from
.IR towupper(wc) .
.PP
The wide-character class "lower" always contains
at least the letters \(aqa\(aq to \(aqz\(aq.
.SH RETURN VALUE
The
.BR iswlower ()
function returns nonzero
if
.I wc
is a wide character
belonging to the wide-character class "lower".
Otherwise, it returns zero.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR iswlower ()
T}	Thread safety	MT-Safe locale
.TE
.SH CONFORMING TO
C99.
.SH NOTES
The behavior of
.BR iswlower ()
depends on the
.B LC_CTYPE
category of the
current locale.
.PP
This function is not very appropriate for dealing with Unicode characters,
because Unicode knows about three cases: upper, lower and title case.
.SH SEE ALSO
.BR islower (3),
.BR iswctype (3),
.BR towlower (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) Bruno Haible <haible@clisp.cons.org>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_ONEPARA)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"   GNU glibc-2 source code and manual
.\"   Dinkumware C library reference http://www.dinkumware.com/
.\"   OpenGroup's Single UNIX specification http://www.UNIX-systems.org/online.html
.\"   ISO/IEC 9899:1999
.\"
.TH ISWPRINT 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
iswprint \- test for printing wide character
.SH SYNOPSIS
.nf
.B #include <wctype.h>
.sp
.BI "int iswprint(wint_t " wc );
.fi
.SH DESCRIPTION
The
.BR iswprint ()
function is the wide-character equivalent of the
.BR isprint (3)
function.
It tests whether
.I wc
is a wide character
belonging to the wide-character class "print".
.PP
The wide-character class "print" is disjoint from the wide-character class
"cntrl".
.PP
The wide-character class "print" contains the wide-character class "graph".
.SH RETURN VALUE
The
.BR iswprint ()
function returns nonzero if
.I wc
is a
wide character belonging to the wide-character class "print".
Otherwise, it returns zero.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR iswprint ()
T}	Thread safety	MT-Safe locale
.TE
.SH CONFORMING TO
C99.
.SH NOTES
The behavior of
.BR iswprint ()
depends on the
.B LC_CTYPE
category of the
current locale.
.SH SEE ALSO
.BR isprint (3),
.BR iswctype (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) Bruno Haible <haible@clisp.cons.org>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_ONEPARA)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"   GNU glibc-2 source code and manual
.\"   Dinkumware C library reference http://www.dinkumware.com/
.\"   OpenGroup's Single UNIX specification http://www.UNIX-systems.org/online.html
.\"   ISO/IEC 9899:1999
.\"
.TH ISWPUNCT 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
iswpunct \- test for punctuation or symbolic wide character
.SH SYNOPSIS
.nf
.B #include <wctype.h>
.sp
.BI "int iswpunct(wint_t " wc );
.fi
.SH DESCRIPTION
The
.BR iswpunct ()
function is the wide-character equivalent of the
.BR ispunct (3)
function.
It tests whether
.I wc
is a wide character
belonging to the wide-character class "punct".
.PP
The wide-character class "punct" is a subclass of the wide-character class
"graph", and therefore also a subclass of the wide-character class "print".
.PP
The wide-character class "punct" is disjoint from the wide-character class
"alnum" and therefore also disjoint from its subclasses "alpha", "upper",
"lower", "digit", "xdigit".
.PP
Being a subclass of the wide-character class "print",
the wide-character class
"punct" is disjoint from the wide-character class "cntrl".
.PP
Being a subclass of the wide-character class "graph",
the wide-character class
"punct" is disjoint from the wide-character class "space" and its subclass
"blank".
.SH RETURN VALUE
The
.BR iswpunct ()
function returns nonzero
if
.I wc
is a wide-character
belonging to the wide-character class "punct".
Otherwise, it returns zero.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR iswpunct ()
T}	Thread safety	MT-Safe locale
.TE
.SH CONFORMING TO
C99.
.SH NOTES
The behavior of
.BR iswpunct ()
depends on the
.B LC_CTYPE
category of the
current locale.
.PP
This function's name is a misnomer when dealing with Unicode characters,
because the wide-character class "punct" contains both punctuation characters
and symbol (math, currency, etc.) characters.
.SH SEE ALSO
.BR ispunct (3),
.BR iswctype (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) Bruno Haible <haible@clisp.cons.org>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_ONEPARA)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"   GNU glibc-2 source code and manual
.\"   Dinkumware C library reference http://www.dinkumware.com/
.\"   OpenGroup's Single UNIX specification http://www.UNIX-systems.org/online.html
.\"   ISO/IEC 9899:1999
.\"
.TH ISWSPACE 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
iswspace \- test for whitespace wide character
.SH SYNOPSIS
.nf
.B #include <wctype.h>
.sp
.BI "int iswspace(wint_t " wc );
.fi
.SH DESCRIPTION
The
.BR iswspace ()
function is the wide-character equivalent of the
.BR isspace (3)
function.
It tests whether
.I wc
is a wide character
belonging to the wide-character class "space".
.PP
The wide-character class "space" is disjoint from the wide-character class
"graph" and therefore also disjoint from its subclasses "alnum", "alpha",
"upper", "lower", "digit", "xdigit", "punct".
.\" Note: UNIX98 (susv2/xbd/locale.html) says that "space" and "graph" may
.\" have characters in common, except U+0020. But C99 (ISO/IEC 9899:1999
.\" section 7.25.2.1.10) says that "space" and "graph" are disjoint.
.PP
The wide-character class "space" contains the wide-character class "blank".
.PP
The wide-character class "space" always contains at least the space character
and the control
characters \(aq\\f\(aq, \(aq\\n\(aq, \(aq\\r\(aq, \(aq\\t\(aq, \(aq\\v\(aq.
.SH RETURN VALUE
The
.BR iswspace ()
function returns nonzero if
.I wc
is a wide character
belonging to the wide-character class "space".
Otherwise, it returns zero.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR iswspace ()
T}	Thread safety	MT-Safe locale
.TE
.SH CONFORMING TO
C99.
.SH NOTES
The behavior of
.BR iswspace ()
depends on the
.B LC_CTYPE
category of the
current locale.
.SH SEE ALSO
.BR isspace (3),
.BR iswctype (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) Bruno Haible <haible@clisp.cons.org>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_ONEPARA)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"   GNU glibc-2 source code and manual
.\"   Dinkumware C library reference http://www.dinkumware.com/
.\"   OpenGroup's Single UNIX specification http://www.UNIX-systems.org/online.html
.\"   ISO/IEC 9899:1999
.\"
.TH ISWUPPER 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
iswupper \- test for uppercase wide character
.SH SYNOPSIS
.nf
.B #include <wctype.h>
.sp
.BI "int iswupper(wint_t " wc );
.fi
.SH DESCRIPTION
The
.BR iswupper ()
function is the wide-character equivalent of the
.BR isupper (3)
function.
It tests whether
.I wc
is a wide character
belonging to the wide-character class "upper".
.PP
The wide-character class "upper" is a subclass of the wide-character class
"alpha", and therefore also a subclass of the wide-character class "alnum", of
the wide-character class "graph" and of the wide-character class "print".
.PP
Being a subclass of the wide-character class "print", the wide-character class
"upper" is disjoint from the wide-character class "cntrl".
.PP
Being a subclass of the wide-character class "graph", the wide-character class
"upper" is disjoint from the wide-character class "space" and its subclass
"blank".
.PP
Being a subclass of the wide-character class "alnum", the wide-character class
"upper" is disjoint from the wide-character class "punct".
.PP
Being a subclass of the wide-character class "alpha", the wide-character class
"upper" is disjoint from the wide-character class "digit".
.PP
The wide-character class "upper" contains at least those characters
.I wc
which are equal to
.I towupper(wc)
and different from
.IR towlower(wc) .
.PP
The wide-character class "upper" always contains at least the
letters \(aqA\(aq to \(aqZ\(aq.
.SH RETURN VALUE
The
.BR iswupper ()
function returns nonzero if
.I wc
is a wide character
belonging to the wide-character class "upper".
Otherwise, it returns zero.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR iswupper ()
T}	Thread safety	MT-Safe locale
.TE
.SH CONFORMING TO
C99.
.SH NOTES
The behavior of
.BR iswupper ()
depends on the
.B LC_CTYPE
category of the
current locale.
.PP
This function is not very appropriate for dealing with Unicode characters,
because Unicode knows about three cases: upper, lower and title case.
.SH SEE ALSO
.BR isupper (3),
.BR iswctype (3),
.BR towupper (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) Bruno Haible <haible@clisp.cons.org>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_ONEPARA)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"   GNU glibc-2 source code and manual
.\"   Dinkumware C library reference http://www.dinkumware.com/
.\"   OpenGroup's Single UNIX specification http://www.UNIX-systems.org/online.html
.\"   ISO/IEC 9899:1999
.\"
.TH ISWXDIGIT 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
iswxdigit \- test for hexadecimal digit wide character
.SH SYNOPSIS
.nf
.B #include <wctype.h>
.sp
.BI "int iswxdigit(wint_t " wc );
.fi
.SH DESCRIPTION
The
.BR iswxdigit ()
function is the wide-character equivalent of the
.BR isxdigit (3)
function.
It tests whether
.I wc
is a wide character
belonging to the wide-character class "xdigit".
.PP
The wide-character class "xdigit" is a subclass of the wide-character class
"alnum", and therefore also a subclass of the wide-character class "graph" and
of the wide-character class "print".
.PP
Being a subclass of the wide-character class "print", the wide-character class
"xdigit" is disjoint from the wide-character class "cntrl".
.PP
Being a subclass of the wide-character class "graph", the wide-character class
"xdigit" is disjoint from the wide-character class "space" and its subclass
"blank".
.PP
Being a subclass of the wide-character class "alnum", the wide-character class
"xdigit" is disjoint from the wide-character class "punct".
.PP
The wide-character class "xdigit" always contains at least the
letters \(aqA\(aq to \(aqF\(aq, \(aqa\(aq to \(aqf\(aq
and the digits \(aq0\(aq to \(aq9\(aq.
.SH RETURN VALUE
The
.BR iswxdigit ()
function returns nonzero if
.I wc
is a wide character
belonging to the wide-character class "xdigit".
Otherwise, it returns zero.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR iswxdigit ()
T}	Thread safety	MT-Safe locale
.TE
.SH CONFORMING TO
C99.
.SH NOTES
The behavior of
.BR iswxdigit ()
depends on the
.B LC_CTYPE
category of the
current locale.
.SH SEE ALSO
.BR iswctype (3),
.BR isxdigit (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\" and Copyright 2008, Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified Sat Jul 24 19:08:17 1993 by Rik Faith (faith@cs.unc.edu)
.\" Modified 2002-08-25, aeb
.\" Modified 2004-11-12 as per suggestion by Fabian Kreutz/AEB
.\" 2008-07-24, mtk, moved yxx() material into separate y0.3 page
.\"
.TH J0 3  2015-04-19 "" "Linux Programmer's Manual"
.SH NAME
j0, j0f, j0l, j1, j1f, j1l, jn, jnf, jnl \-
Bessel functions of the first kind
.SH SYNOPSIS
.nf
.B #include <math.h>
.sp
.fi
.BI "double j0(double " x );
.br
.BI "double j1(double " x );
.br
.BI "double jn(int " n ", double " x );
.sp
.BI "float j0f(float " x );
.br
.BI "float j1f(float " x );
.br
.BI "float jnf(int " n ", float " x );
.sp
.BI "long double j0l(long double " x );
.br
.BI "long double j1l(long double " x );
.br
.BI "long double jnl(int " n ", long double " x );
.sp
Link with \fI\-lm\fP.
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR j0 (),
.BR j1 (),
.BR jn ():
.RS 4
_SVID_SOURCE || _BSD_SOURCE || _XOPEN_SOURCE
.RE
.br
.BR j0f (),
.BR j0l (),
.BR j1f (),
.BR j1l (),
.BR jnf (),
.BR jnl ():
.RS 4
_SVID_SOURCE || _BSD_SOURCE || _XOPEN_SOURCE\ >=\ 600
.\" Also seems to work: -std=c99 -D_XOPEN_SOURCE
.RE
.ad b
.SH DESCRIPTION
The
.BR j0 ()
and
.BR j1 ()
functions return Bessel functions of
.I x
of the first kind of orders 0 and 1, respectively.
The
.BR jn ()
function
returns the Bessel function of
.I x
of the first kind of order
.IR n .
.PP
The
.BR j0f (),
.BR j1f (),
and
.BR jnf (),
functions are versions that take and return
.I float
values.
The
.BR j0l (),
.BR j1l (),
and
.BR jnl ()
functions are versions that take and return
.I "long double"
values.
.SH RETURN VALUE
On success, these functions return the appropriate
Bessel value of the first kind for
.IR x .

If
.I x
is a NaN, a NaN is returned.

If
.I x
is too large in magnitude,
or the result underflows,
a range error occurs,
and the return value is 0.
.SH ERRORS
See
.BR math_error (7)
for information on how to determine whether an error has occurred
when calling these functions.
.PP
The following errors can occur:
.TP
Range error: result underflow, or \fIx\fP is too large in magnitude
.I errno
is set to
.BR ERANGE .
.\" An underflow floating-point exception
.\" .RB ( FE_UNDERFLOW )
.\" is raised.
.PP
These functions do not raise exceptions for
.BR fetestexcept (3).
.\" FIXME . Is it intentional that these functions do not raise exceptions?
.\" e.g., j0(1.5e16)
.\" Bug raised: http://sources.redhat.com/bugzilla/show_bug.cgi?id=6805
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR j0 (),
.BR j0f (),
.BR j0l ()
T}	Thread safety	MT-Safe
T{
.BR j1 (),
.BR j1f (),
.BR j1l ()
T}	Thread safety	MT-Safe
T{
.BR jn (),
.BR jnf (),
.BR jnl ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
The functions returning
.I double
conform to SVr4, 4.3BSD,
POSIX.1-2001, and POSIX.1-2008.
The others are nonstandard functions that also exist on the BSDs.
.SH BUGS
There are errors of up to 2e\-16 in the values returned by
.BR j0 (),
.BR j1 ()
and
.BR jn ()
for values of
.I x
between \-8 and 8.
.SH SEE ALSO
.BR y0 (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\"  Copyright 2002 walter harms (walter.harms@informatik.uni-oldenburg.de)
.\"
.\" %%%LICENSE_START(GPL_NOVERSION_ONELINE)
.\" Distributed under GPL
.\" %%%LICENSE_END
.\"
.\"  I had no way the check the functions out
.\"  be careful
.TH KEY_SETSECRET 3 2014-05-28 "" "Linux Programmer's Manual"
.SH NAME
key_decryptsession, key_encryptsession, key_setsecret, key_gendes,
key_secretkey_is_set \- interfaces to rpc keyserver daemon
.SH SYNOPSIS
.B "#include <rpc/rpc.h>"
.sp
.BI "int key_decryptsession(char *" remotename ,
.BI "des_block *" deskey );
.sp
.BI "int key_encryptsession(char *" remotename ,
.BI "des_block *" deskey );
.sp
.BI "int key_gendes(des_block *" deskey );
.sp
.BI "int key_setsecret(char *" key );
.sp
.B "int key_secretkey_is_set(void);"
.SH DESCRIPTION
The functions here are used within the RPC's secure authentication
mechanism (AUTH_DES).
There should be no need for user programs to
use this functions.

The function
.BR key_decryptsession ()
uses the (remote) server netname and takes the DES key
for decrypting.
It uses the public key of the server and the
secret key associated with the effective UID of the calling process.

The function
.BR key_encryptsession ()
is the inverse of
.BR key_decryptsession ().
It encrypts the DES keys with the public key of the server and
the secret key associated with the effective UID of the calling process.

The function
.BR key_gendes ()
is used to ask the keyserver for a secure conversation key.

The function
.BR key_setsecret ()
is used to set the key for the effective UID of the calling process.

The function
.BR key_secretkey_is_set ()
can be used to determine whether a key has been
set for the effective UID of the calling process.
.SH RETURN VALUE
These functions return 1 on success and 0 on failure.
.SH NOTES
Note that we talk about two types of encryption here.
One is asymmetric using a public and secret key.
The other is symmetric, the
64-bit DES.
.PP
These routines were part of the Linux/Doors-project, abandoned by now.
.SH SEE ALSO
.BR crypt (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\" and Copyright 2008, Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified 1993-07-24 by Rik Faith (faith@cs.unc.edu)
.\" Modified 2004-10-31 by aeb
.\"
.TH LDEXP 3 2015-04-19 "" "Linux Programmer's Manual"
.SH NAME
ldexp, ldexpf, ldexpl \- multiply floating-point number by integral power of 2
.SH SYNOPSIS
.nf
.B #include <math.h>
.sp
.BI "double ldexp(double " x ", int " exp );
.br
.BI "float ldexpf(float " x ", int " exp );
.br
.BI "long double ldexpl(long double " x ", int " exp );
.fi
.sp
Link with \fI\-lm\fP.
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR ldexpf (),
.BR ldexpl ():
.RS 4
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE\ >=\ 600 || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.ad
.SH DESCRIPTION
These functions return the result of multiplying the floating-point number
.I x
by 2 raised to the power
.IR exp .
.SH RETURN VALUE
On success, these functions return
.IR "x * (2^exp)" .

If
.I exp
is zero, then
.I x
is returned.

If
.I x
is a NaN,
a NaN is returned.

If
.I x
is positive infinity (negative infinity),
positive infinity (negative infinity) is returned.

If the result underflows,
a range error occurs,
and zero is returned.

If the result overflows,
a range error occurs,
and the functions return
.BR HUGE_VAL ,
.BR HUGE_VALF ,
or
.BR HUGE_VALL ,
respectively, with a sign the same as
.IR x .
.SH ERRORS
See
.BR math_error (7)
for information on how to determine whether an error has occurred
when calling these functions.
.PP
The following errors can occur:
.TP
Range error, overflow
.I errno
is set to
.BR ERANGE .
An overflow floating-point exception
.RB ( FE_OVERFLOW )
is raised.
.TP
Range error, underflow
.I errno
is set to
.BR ERANGE .
An underflow floating-point exception
.RB ( FE_UNDERFLOW )
is raised.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw27 lb lb
l l l.
Interface	Attribute	Value
T{
.BR ldexp (),
.BR ldexpf (),
.BR ldexpl ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C99, POSIX.1-2001, POSIX.1-2008.

The variant returning
.I double
also conforms to
SVr4, 4.3BSD, C89.
.SH SEE ALSO
.BR frexp (3),
.BR modf (3),
.BR scalbln (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 2002 Walter Harms (walter.harms@informatik.uni-oldenburg.de)
.\" and Copyright 2008, Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(GPL_NOVERSION_ONELINE)
.\" Distributed under GPL
.\" %%%LICENSE_END
.\"
.\" based on glibc infopages
.\"
.TH LGAMMA 3 2015-04-19 "" "Linux Programmer's Manual"
.SH NAME
lgamma, lgammaf, lgammal, lgamma_r, lgammaf_r, lgammal_r, signgam \-
log gamma function
.SH SYNOPSIS
.nf
.B #include <math.h>
.sp
.BI "double lgamma(double " x );
.br
.BI "float lgammaf(float " x );
.br
.BI "long double lgammal(long double " x );
.sp
.BI "double lgamma_r(double " x ", int *" signp );
.br
.BI "float lgammaf_r(float " x ", int *" signp );
.br
.BI "long double lgammal_r(long double " x ", int *" signp );
.sp
.BI "extern int " signgam ;
.fi
.sp
Link with \fI\-lm\fP.
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR lgamma ():
.RS 4
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.br
.BR lgammaf (),
.BR lgammal ():
.RS 4
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE\ >=\ 600 || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.BR lgamma_r (),
.BR lgammaf_r (),
.BR lgammal_r ():
.RS 4
_BSD_SOURCE || _SVID_SOURCE
.RE
.IR signgam :
.RS 4
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE
.RE
.ad b
.SH DESCRIPTION
For the definition of the Gamma function, see
.BR tgamma (3).
.PP
The
.BR lgamma (),
.BR lgammaf (),
and
.BR lgammal ()
functions return the natural logarithm of
the absolute value of the Gamma function.
The sign of the Gamma function is returned in the
external integer
.I signgam
declared in
.IR <math.h> .
It is 1 when the Gamma function is positive or zero, \-1
when it is negative.
.PP
Since using a constant location
.I signgam
is not thread-safe, the functions
.BR lgamma_r (),
.BR lgammaf_r (),
and
.BR lgammal_r ()
have been introduced; they return the sign via the argument
.IR signp .
.SH RETURN VALUE
On success, these functions return the natural logarithm of Gamma(x).

If
.I x
is a NaN, a NaN is returned.

If
.I x
is 1 or 2, +0 is returned.

If
.I x
is positive infinity or negative infinity,
positive infinity is returned.

If
.I x
is a nonpositive integer,
a pole error occurs,
and the functions return
.RB + HUGE_VAL ,
.RB + HUGE_VALF ,
or
.RB + HUGE_VALL ,
respectively.

If the result overflows,
a range error occurs,
.\" e.g., lgamma(DBL_MAX)
and the functions return
.BR HUGE_VAL ,
.BR HUGE_VALF ,
or
.BR HUGE_VALL ,
respectively, with the correct mathematical sign.
.SH ERRORS
See
.BR math_error (7)
for information on how to determine whether an error has occurred
when calling these functions.
.PP
The following errors can occur:
.TP
Pole error: \fIx\fP is a nonpositive integer
.I errno
is set to
.BR ERANGE
(but see BUGS).
A divide-by-zero floating-point exception
.RB ( FE_DIVBYZERO )
is raised.
.TP
Range error: result overflow
.I errno
is set to
.BR ERANGE .
An overflow floating-point exception
.RB ( FE_OVERFLOW )
is raised.
.\" glibc (as at 2.8) also supports an inexact
.\" exception for various cases.
.SH CONFORMING TO
The
.BR lgamma ()
functions are specified in C99, POSIX.1-2001, and POSIX.1-2008.
.I signgam
is specified in POSIX.1-2001 and POSIX.1-2008, but not in C99.
The
.BR lgamma_r ()
functions are nonstandard, but present on several other systems.
.SH BUGS
In glibc 2.9 and earlier,
.\" http://sources.redhat.com/bugzilla/show_bug.cgi?id=6777
when a pole error occurs,
.I errno
is set to
.BR EDOM ;
instead of the POSIX-mandated
.BR ERANGE .
Since version 2.10, glibc does the right thing.
.SH SEE ALSO
.BR tgamma (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2010, Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.TH LIO_LISTIO  3 2015-03-02  "" "Linux Programmer's Manual"
.SH NAME
lio_listio \- initiate a list of I/O requests
.SH SYNOPSIS
.nf
.B "#include <aio.h>"

.BI "int lio_listio(int " mode ", struct aiocb *const " aiocb_list [],
.BI "               int " nitems ", struct sigevent *" sevp );

Link with \fI\-lrt\fP.
.fi
.SH DESCRIPTION
The
.BR lio_listio ()
function initiates the list of I/O operations described by the array
.IR aiocb_list .

The
.I mode
operation has one of the following values:
.TP 12
.B LIO_WAIT
The call blocks until all operations are complete.
The
.I sevp
argument is ignored.
.TP
.B LIO_NOWAIT
The I/O operations are queued for processing and the call returns immediately.
When all of the I/O operations complete, asynchronous notification occurs,
as specified by the
.IR sevp
argument; see
.BR sigevent (7)
for details.
If
.IR sevp
is NULL, no asynchronous notification occurs.
.PP
The
.I aiocb_list
argument is an array of pointers to
.I aiocb
structures that describe I/O operations.
These operations are executed in an unspecified order.
The
.I nitems
argument specifies the size of the array
.IR aiocb_list .
null pointers in
.I aiocb_list
are ignored.

In each control block in
.IR aiocb_list ,
the
.I aio_lio_opcode
field specifies the I/O operation to be initiated, as follows:
.TP 10
.BR LIO_READ
Initiate a read operation.
The operation is queued as for a call to
.BR aio_read (3)
specifying this control block.
.TP
.BR LIO_WRITE
Initiate a write operation.
The operation is queued as for a call to
.BR aio_write (3)
specifying this control block.
.TP
.BR LIO_NOP
Ignore this control block.
.PP
The remaining fields in each control block have the same meanings as for
.BR aio_read (3)
and
.BR aio_write (3).
The
.I aio_sigevent
fields of each control block can be used to specify notifications
for the individual I/O operations (see
.BR sigevent (7)).
.SH RETURN VALUE
If
.I mode
is
.BR LIO_NOWAIT ,
.BR lio_listio ()
returns 0 if all I/O operations are successfully queued.
Otherwise, \-1 is returned, and
.I errno
is set to indicate the error.

If
.I mode
is
.BR LIO_WAIT ,
.BR lio_listio ()
returns 0 when all of the I/O operations have completed successfully.
Otherwise, \-1 is returned, and
.I errno
is set to indicate the error.

The return status from
.BR lio_listio ()
provides information only about the call itself,
not about the individual I/O operations.
One or more of the I/O operations may fail,
but this does not prevent other operations completing.
The status of individual I/O operations in
.IR aiocb_list
can be determined using
.BR aio_error (3).
When an operation has completed,
its return status can be obtained using
.BR aio_return (3).
Individual I/O operations can fail for the reasons described in
.BR aio_read (3)
and
.BR aio_write (3).
.SH ERRORS
The
.BR lio_listio ()
function may fail for the following reasons:
.TP
.B EAGAIN
Out of resources.
.TP
.B EAGAIN
.\" Doesn't happen in glibc(?)
The number of I/O operations specified by
.I nitems
would cause the limit
.BR AIO_MAX
to be exceeded.
.TP
.B EINVAL
.I mode
is invalid, or
.\" Doesn't happen in glibc(?)
.I nitems
exceeds the limit
.BR AIO_LISTIO_MAX .
.TP
.B EINTR
.I mode
was
.BR LIO_WAIT
and a signal
was caught before all I/O operations completed.
(This may even be one of the signals used for
asynchronous I/O completion notification.)
.TP
.B EIO
One of more of the operations specified by
.IR aiocb_list
failed.
.\" e.g., ioa_reqprio or aio_lio_opcode was invalid
The application can check the status of each operation using
.BR aio_return (3).
.PP
If
.BR lio_listio ()
fails with the error
.BR EAGAIN ,
.BR EINTR ,
or
.BR EIO ,
then some of the operations in
.IR aiocb_list
may have been initiated.
If
.BR lio_listio ()
fails for any other reason,
then none of the I/O operations has been initiated.
.SH VERSIONS
The
.BR lio_listio ()
function is available since glibc 2.1.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR lio_listio ()
T}	Thread safety	MT-Safe
.TE

.SH CONFORMING TO
POSIX.1-2001, POSIX.1-2008.
.SH NOTES
It is a good idea to zero out the control blocks before use.
The control blocks must not be changed while the I/O operations
are in progress.
The buffer areas being read into or written from
.\" or the control block of the operation
must not be accessed during the operations or undefined results may occur.
The memory areas involved must remain valid.

Simultaneous I/O operations specifying the same
.I aiocb
structure produce undefined results.
.SH SEE ALSO
.BR aio_cancel (3),
.BR aio_error (3),
.BR aio_fsync (3),
.BR aio_return (3),
.BR aio_suspend (3),
.BR aio_write (3),
.BR aio (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1993 by Thomas Koenig (ig25@rz.uni-karlsruhe.de)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified Sat Jul 24 19:01:20 1993 by Rik Faith (faith@cs.unc.edu)
.TH LOCALECONV 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
localeconv \- get numeric formatting information
.SH SYNOPSIS
.nf
.B #include <locale.h>
.sp
.B struct lconv *localeconv(void);
.fi
.SH DESCRIPTION
The
.BR localeconv ()
function returns a pointer to a
.I struct lconv
for the current locale.
This structure is shown in
.BR locale (7),
and contains all values associated with the locale categories
.B LC_NUMERIC
and
.BR LC_MONETARY .
Programs may also use the functions
.BR printf (3)
and
.BR strfmon (3),
which behave according to the actual locale in use.
.SH RETURN VALUE
The
.BR localeconv ()
function returns a pointer to a filled in
.IR "struct lconv" .
This structure may be (in glibc,
.IR is )
statically allocated, and may be overwritten by subsequent calls.
According to POSIX,
the caller should not modify the contents of this structure.
The
.BR localeconv ()
function always succeeds.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR localeconv ()
T}	Thread safety	MT-Unsafe race:localeconv locale
.TE
.SH CONFORMING TO
C89, C99.
.SH BUGS
The
.BR printf (3)
family of functions may or may not honor the current locale.
.SH SEE ALSO
.BR locale (1),
.BR localedef (1),
.BR isalpha (3),
.BR nl_langinfo (3),
.BR setlocale (3),
.BR strcoll (3),
.BR strftime (3),
.BR locale (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1997 Nicolás Lichtmaier <nick@debian.org>
.\" Created Thu Aug  7 00:44:00 ART 1997
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.\" Added section stuff, aeb, 2002-04-22.
.\" Corrected include file, drepper, 2003-06-15.
.\"
.TH LOCKF 3 2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
lockf \- apply, test or remove a POSIX lock on an open file
.SH SYNOPSIS
.B #include <unistd.h>
.sp
.BI "int lockf(int " fd ", int " cmd ", off_t " len );
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR lockf ():
.ad l
.RS 4
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE\ >=\ 500 ||
_XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED
.RE
.ad
.SH DESCRIPTION
Apply, test or remove a POSIX lock on a section of an open file.
The file is specified by
.IR fd ,
a file descriptor open for writing, the action by
.IR cmd ,
and the section consists of byte positions
.IR pos .. pos + len \-1
if
.I len
is positive, and
.IR pos \- len .. pos \-1
if
.I len
is negative, where
.I pos
is the current file position, and if
.I len
is zero, the section extends from the current file position to
infinity, encompassing the present and future end-of-file positions.
In all cases, the section may extend past current end-of-file.
.LP
On Linux,
.BR lockf ()
is just an interface on top of
.BR fcntl (2)
locking.
Many other systems implement
.BR lockf ()
in this way, but note that POSIX.1-2001 leaves the relationship between
.BR lockf ()
and
.BR fcntl (2)
locks unspecified.
A portable application should probably avoid mixing calls
to these interfaces.
.LP
Valid operations are given below:
.TP
.B F_LOCK
Set an exclusive lock on the specified section of the file.
If (part of) this section is already locked, the call
blocks until the previous lock is released.
If this section overlaps an earlier locked section,
both are merged.
File locks are released as soon as the process holding the locks
closes some file descriptor for the file.
A child process does not inherit these locks.
.TP
.B F_TLOCK
Same as
.B F_LOCK
but the call never blocks and returns an error instead if the file is
already locked.
.TP
.B F_ULOCK
Unlock the indicated section of the file.
This may cause a locked section to be split into two locked sections.
.TP
.B F_TEST
Test the lock: return 0 if the specified section
is unlocked or locked by this process; return \-1, set
.I errno
to
.B EAGAIN
.RB ( EACCES
on some other systems),
if another process holds a lock.
.SH RETURN VALUE
On success, zero is returned.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.BR EACCES " or " EAGAIN
The file is locked and
.B F_TLOCK
or
.B F_TEST
was specified, or the operation is prohibited because the file has
been memory-mapped by another process.
.TP
.B EBADF
.I fd
is not an open file descriptor; or
.I cmd
is
.B F_LOCK
or
.BR F_TLOCK
and
.I fd
is not a writable file descriptor.
.TP
.B EDEADLK
The command was
.B F_LOCK
and this lock operation would cause a deadlock.
.TP
.B EINVAL
An invalid operation was specified in
.IR cmd .
.TP
.B ENOLCK
Too many segment locks open, lock table is full.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR lockf ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
SVr4, POSIX.1-2001.
.SH SEE ALSO
.BR fcntl (2),
.BR flock (2)

.I locks.txt
and
.I mandatory-locking.txt
in the Linux kernel source directory
.IR Documentation/filesystems
(on older kernels, these files are directly under the
.I Documentation
directory, and
.I mandatory-locking.txt
is called
.IR mandatory.txt )
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\" and Copyright 2008, Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified 1993-07-24 by Rik Faith (faith@cs.unc.edu)
.\" Modified 1995-08-14 by Arnt Gulbrandsen <agulbra@troll.no>
.\" Modified 2002-07-27 by Walter Harms
.\" 	(walter.harms@informatik.uni-oldenburg.de)
.\"
.TH LOG10 3  2015-04-19  "" "Linux Programmer's Manual"
.SH NAME
log10, log10f, log10l \-  base-10 logarithmic function
.SH SYNOPSIS
.nf
.B #include <math.h>
.sp
.BI "double log10(double " x );
.br
.BI "float log10f(float " x );
.br
.BI "long double log10l(long double " x );
.fi
.sp
Link with \fI\-lm\fP.
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR log10f (),
.BR log10l ():
.RS 4
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE\ >=\ 600 || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.ad
.SH DESCRIPTION
These functions return the base 10 logarithm of
.IR x .
.SH RETURN VALUE
On success, these functions return the base 10 logarithm of
.IR x .

For special cases, including where
.I x
is 0, 1, negative, infinity, or NaN, see
.BR log (3).
.SH ERRORS
See
.BR math_error (7)
for information on how to determine whether an error has occurred
when calling these functions.

For a discussion of the errors that can occur for these functions, see
.BR log (3).
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw28 lb lb
l l l.
Interface	Attribute	Value
T{
.BR log10 (),
.BR log10f (),
.BR log10l ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C99, POSIX.1-2001, POSIX.1-2008.

The variant returning
.I double
also conforms to
SVr4, 4.3BSD, C89.
.SH SEE ALSO
.BR cbrt (3),
.BR clog10 (3),
.BR exp10 (3),
.BR log (3),
.BR log2 (3),
.BR sqrt (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1995 Jim Van Zandt <jrv@vanzandt.mv.com>
.\" and Copyright 2008, Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified 2002-07-27 by Walter Harms
.\" 	(walter.harms@informatik.uni-oldenburg.de)
.TH LOG1P 3   2015-04-19 "" "Linux Programmer's Manual"
.SH NAME
log1p, log1pf, log1pl \-  logarithm of 1 plus argument
.SH SYNOPSIS
.nf
.B #include <math.h>
.sp
.BI "double log1p(double " x );
.br
.BI "float log1pf(float " x );
.br
.BI "long double log1pl(long double " x );
.sp
.fi
Link with \fI\-lm\fP.
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR log1p ():
.RS 4
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE\ >=\ 500 ||
_XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.br
.BR log1pf (),
.BR log1pl ():
.RS 4
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE\ >=\ 600 || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.ad b
.SH DESCRIPTION
These functions return a value equivalent to
.nf

    log (1 + \fIx\fP)

.fi
The result is computed in a way
that is accurate even if the value of
.I x
is near zero.
.SH RETURN VALUE
On success, these functions return the natural logarithm of
.IR "(1\ +\ x)" .

If
.I x
is a NaN,
a NaN is returned.

If
.I x
is positive infinity, positive infinity is returned.

If
.I x
is \-1, a pole error occurs,
and the functions return
.RB - HUGE_VAL ,
.RB - HUGE_VALF ,
or
.RB - HUGE_VALL ,
respectively.

If
.I x
is less than \-1 (including negative infinity),
a domain error occurs,
and a NaN (not a number) is returned.
.\" POSIX.1 specifies a possible range error if x is subnormal
.\" glibc 2.8 doesn't do this
.SH ERRORS
See
.BR math_error (7)
for information on how to determine whether an error has occurred
when calling these functions.
.PP
The following errors can occur:
.TP
Domain error: \fIx\fP is less than \-1
.\" .I errno
.\" is set to
.\" .BR EDOM .
An invalid floating-point exception
.RB ( FE_INVALID )
is raised.
.TP
Pole error: \fIx\fP is \-1
.\" .I errno
.\" is set to
.\" .BR ERANGE .
A divide-by-zero floating-point exception
.RB ( FE_DIVBYZERO )
is raised.
.PP
These functions do not set
.IR errno .
.\" FIXME . Is it intentional that these functions do not set errno?
.\" log(), log2(), log10() do set errno
.\" Bug raised: http://sources.redhat.com/bugzilla/show_bug.cgi?id=6792
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw27 lb lb
l l l.
Interface	Attribute	Value
T{
.BR log1p (),
.BR log1pf (),
.BR log1pl ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C99, POSIX.1-2001, POSIX.1-2008.
.\" BSD
.SH SEE ALSO
.BR exp (3),
.BR expm1 (3),
.BR log (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\" and Copyright 2008, Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified 1993-07-24 by Rik Faith (faith@cs.unc.edu)
.\" Modified 1995-08-14 by Arnt Gulbrandsen <agulbra@troll.no>
.\" Modified 2002-07-27 by Walter Harms
.\" 	(walter.harms@informatik.uni-oldenburg.de)
.\"
.TH LOG2 3  2015-04-19  "" "Linux Programmer's Manual"
.SH NAME
log2, log2f, log2l \- base-2 logarithmic function
.SH SYNOPSIS
.nf
.B #include <math.h>
.sp
.BI "double log2(double " x );
.br
.BI "float log2f(float " x );
.br
.BI "long double log2l(long double " x );
.fi
.sp
Link with \fI\-lm\fP.
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR log2 (),
.BR log2f (),
.BR log2l ():
.RS 4
_XOPEN_SOURCE\ >=\ 600 || _ISOC99_SOURCE || _POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.ad b
.SH DESCRIPTION
These functions return the base 2 logarithm of
.IR x .
.SH RETURN VALUE
On success, these functions return the base 2 logarithm of
.IR x .

For special cases, including where
.I x
is 0, 1, negative, infinity, or NaN, see
.BR log (3).
.SH ERRORS
See
.BR math_error (7)
for information on how to determine whether an error has occurred
when calling these functions.

For a discussion of the errors that can occur for these functions, see
.BR log (3).
.SH VERSIONS
These functions first appeared in glibc in version 2.1.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw24 lb lb
l l l.
Interface	Attribute	Value
T{
.BR log2 (),
.BR log2f (),
.BR log2l ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C99, POSIX.1-2001, POSIX.1-2008.

The variant returning
.I double
also conforms to
SVr4, 4.3BSD.
.SH SEE ALSO
.BR cbrt (3),
.BR clog2 (3),
.BR log (3),
.BR log10 (3),
.BR sqrt (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\" and Copyright 2008, Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified 1993-07-24 by Rik Faith (faith@cs.unc.edu)
.\" Modified 1995-08-14 by Arnt Gulbrandsen <agulbra@troll.no>
.\" Modified 2002-07-27 by Walter Harms
.\" 	(walter.harms@informatik.uni-oldenburg.de)
.\"
.TH LOG 3  2015-04-19  "" "Linux Programmer's Manual"
.SH NAME
log, logf, logl \- natural logarithmic function
.SH SYNOPSIS
.nf
.B #include <math.h>
.sp
.BI "double log(double " x );
.br
.BI "float logf(float " x );
.br
.BI "long double logl(long double " x );
.fi
.sp
Link with \fI\-lm\fP.
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR logf (),
.BR logl ():
.RS 4
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE\ >=\ 600 || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.ad
.SH DESCRIPTION
These functions return the natural logarithm of
.IR x .
.SH RETURN VALUE
On success, these functions return the natural logarithm of
.IR x .

If
.I x
is a NaN,
a NaN is returned.

If
.I x
is 1, the result is +0.

If
.I x
is positive infinity,
positive infinity is returned.

If
.I x
is zero,
then a pole error occurs, and the functions return
.RB - HUGE_VAL ,
.RB - HUGE_VALF ,
or
.RB - HUGE_VALL ,
respectively.

If
.I x
is negative (including negative infinity), then
a domain error occurs, and a NaN (not a number) is returned.
.SH ERRORS
See
.BR math_error (7)
for information on how to determine whether an error has occurred
when calling these functions.
.PP
The following errors can occur:
.TP
Domain error: \fIx\fP is negative
.I errno
is set to
.BR EDOM .
An invalid floating-point exception
.RB ( FE_INVALID )
is raised.
.TP
Pole error: \fIx\fP is zero
.I errno
is set to
.BR ERANGE .
A divide-by-zero floating-point exception
.RB ( FE_DIVBYZERO )
is raised.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw21 lb lb
l l l.
Interface	Attribute	Value
T{
.BR log (),
.BR logf (),
.BR logl ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C99, POSIX.1-2001, POSIX.1-2008.

The variant returning
.I double
also conforms to
SVr4, 4.3BSD, C89.
.SH BUGS
In glibc 2.5 and earlier,
taking the
.BR log ()
of a NaN produces a bogus invalid floating-point
.RB ( FE_INVALID )
exception.
.SH SEE ALSO
.BR cbrt (3),
.BR clog (3),
.BR log10 (3),
.BR log1p (3),
.BR log2 (3),
.BR sqrt (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 2004 Andries Brouwer <aeb@cwi.nl>.
.\" and Copyright 2008, Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Inspired by a page by Walter Harms created 2002-08-10
.\"
.TH LOGB 3 2015-04-19 "" "Linux Programmer's Manual"
.SH NAME
logb, logbf, logbl \- get exponent of a floating-point value
.SH SYNOPSIS
.B #include <math.h>
.sp
.BI "double logb(double " x );
.br
.BI "float logbf(float " x );
.br
.BI "long double logbl(long double " x );
.sp
Link with \fI\-lm\fP.
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR logb ():
.RS 4
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE\ >=\ 500 ||
_XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.br
.BR logbf (),
.BR logbl ():
.RS 4
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE\ >=\ 600 || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.ad b
.SH DESCRIPTION
These functions extract the exponent from the
internal floating-point representation of
.I x
and return it as a floating-point value.
The integer constant
.BR FLT_RADIX ,
defined in
.IR <float.h> ,
indicates the radix used for the system's floating-point representation.
If
.B FLT_RADIX
is 2,
.BI logb( x )
is equal to
.BI floor(log2( x ))\fR,
except that it is probably faster.
.LP
If
.I x
is subnormal,
.BR logb ()
returns the exponent
.I x
would have if it were normalized.
.SH RETURN VALUE
On success, these functions return the exponent of
.IR x .

If
.I x
is a NaN,
a NaN is returned.

If
.I x
is zero, then a pole error occurs, and the functions return
.RB - HUGE_VAL ,
.RB - HUGE_VALF ,
or
.RB - HUGE_VALL ,
respectively.

If
.I x
is negative infinity or positive infinity, then
positive infinity is returned.
.SH ERRORS
See
.BR math_error (7)
for information on how to determine whether an error has occurred
when calling these functions.
.PP
The following errors can occur:
.TP
Pole error: \fIx\fP is 0
.\" .I errno
.\" is set to
.\" .BR ERANGE .
A divide-by-zero floating-point exception
.RB ( FE_DIVBYZERO )
is raised.
.PP
These functions do not set
.IR errno .
.\" FIXME . Is it intentional that these functions do not set errno?
.\" log(), log2(), log10() do set errno
.\" Bug raised: http://sources.redhat.com/bugzilla/show_bug.cgi?id=6793
.\"
.\" .SH HISTORY
.\" The
.\" .BR logb ()
.\" function occurs in 4.3BSD.
.\" see IEEE.3 in the 4.3BSD manual
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw24 lb lb
l l l.
Interface	Attribute	Value
T{
.BR logb (),
.BR logbf (),
.BR logbl ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C99, POSIX.1-2001, POSIX.1-2008.
.SH SEE ALSO
.BR ilogb (3),
.BR log (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Derived from text written by Martin Schulze (or taken from glibc.info)
.\" and text written by Paul Thompson - both copyright 2002.
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.TH LOGIN 3 2015-04-19 "GNU" "Linux Programmer's Manual"
.SH NAME
login, logout \- write utmp and wtmp entries
.SH SYNOPSIS
.B #include <utmp.h>
.sp
.BI "void login(const struct utmp *" ut );
.sp
.BI "int logout(const char *" ut_line );
.sp
Link with \fI\-lutil\fP.
.SH DESCRIPTION
The utmp file records who is currently using the system.
The wtmp file records all logins and logouts.
See
.BR utmp (5).
.LP
The function
.BR login ()
takes the supplied
.IR "struct utmp" ,
.IR ut ,
and writes it to both the utmp and the wtmp file.
.LP
The function
.BR logout ()
clears the entry in the utmp file again.
.SS GNU details
More precisely,
.BR login ()
takes the argument
.I ut
struct, fills the field
.I ut\->ut_type
(if there is such a field) with the value
.BR USER_PROCESS ,
and fills the field
.I ut\->ut_pid
(if there is such a field) with the process ID of the calling process.
Then it tries to fill the field
.IR ut\->ut_line .
It takes the first of
.IR stdin ,
.IR stdout ,
.I stderr
that is a terminal, and
stores the corresponding pathname minus a possible leading
.I /dev/
into this field, and then writes the struct to the utmp file.
On the other hand,
if no terminal name was found, this field is filled with "???"
and the struct is not written to the utmp file.
After this, the struct is written to the wtmp file.
.LP
The
.BR logout ()
function searches the utmp file for an entry matching the
.I ut_line
argument.
If a record is found, it is updated by zeroing out the
.I ut_name
and
.I ut_host
fields, updating the
.I ut_tv
timestamp field and setting
.I ut_type
(if there is such a field) to
.BR DEAD_PROCESS .
.SH RETURN VALUE
The
.BR logout ()
function returns 1 if the entry was successfully written to the
database, or 0 if an error occurred.
.SH FILES
.TP
.I /var/run/utmp
user accounting database, configured through
.B _PATH_UTMP
in
.I <paths.h>
.TP
.I /var/log/wtmp
user accounting log file, configured through
.B _PATH_WTMP
in
.I <paths.h>
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lbw20
l l l.
Interface	Attribute	Value
T{
.BR login (),
.br
.BR logout ()
T}	Thread safety	T{
MT-Unsafe race:utent
.br
sig:ALRM timer
T}
.TE

In the above table,
.I utent
in
.I race:utent
signifies that if any of the functions
.BR setutent (3),
.BR getutent (3),
or
.BR endutent (3)
are used in parallel in different threads of a program,
then data races could occur.
.BR login (3)
and
.BR logout (3)
calls those functions,
so we use race:utent to remind users.
.SH CONFORMING TO
Not in POSIX.1-2001.
Present on the BSDs.
.SH NOTES
Note that the
member
.I ut_user
of
.I struct utmp
is called
.I ut_name
in BSD.
Therefore,
.I ut_name
is defined as an alias for
.I ut_user
in
.IR <utmp.h> .
.SH SEE ALSO
.BR getutent (3),
.BR utmp (5)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Written by Michael Haardt, Fri Nov 25 14:51:42 MET 1994
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.\" Added siglongjmp, Sun Mar  2 22:03:05 EST 1997, jrv@vanzandt.mv.com
.\" Modifications, Sun Feb 26 14:39:45 1995, faith@cs.unc.edu
.\" "
.TH LONGJMP 3 2015-05-07 "" "Linux Programmer's Manual"
.SH NAME
longjmp, siglongjmp \- nonlocal jump to a saved stack context
.SH SYNOPSIS
.nf
.B #include <setjmp.h>

.BI "void longjmp(jmp_buf " env ", int " val );

.BI "void siglongjmp(sigjmp_buf " env ", int " val );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR siglongjmp ():
_POSIX_C_SOURCE\ >=\ 1 || _XOPEN_SOURCE || _POSIX_C_SOURCE
.SH DESCRIPTION
.BR longjmp ()
and
.BR setjmp (3)
are useful for dealing with errors
and interrupts encountered in a low-level subroutine of a program.
.BR longjmp ()
restores the environment saved by the last call of
.BR setjmp (3)
with the corresponding
.I env
argument.
After
.BR longjmp ()
is completed, program execution continues as if the
corresponding call of
.BR setjmp (3)
had just returned the value
.IR val .
.BR longjmp ()
cannot cause 0 to be returned.
If
.BR longjmp ()
is invoked with a second argument of 0, 1 will be returned instead.
.P
.BR siglongjmp ()
is similar to
.BR longjmp ()
except for the type of
its
.I env
argument.
If, and only if, the
.BR sigsetjmp (3)
call that set this
.I env
used a nonzero
.I savesigs
flag,
.BR siglongjmp ()
also restores the signal mask that was saved by
.BR sigsetjmp (3).
.SH RETURN VALUE
These functions never return.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw23 lb lb
l l l.
Interface	Attribute	Value
T{
.BR longjmp (),
.BR siglongjmp ()
T}	Thread safety	MT-Safe
.TE

.SH CONFORMING TO
C89, C99, and POSIX.1-2001 specify
.BR longjmp ().
POSIX.1-2001 specifies
.BR siglongjmp ().
.SH NOTES
POSIX does not specify whether
.BR longjmp ()
will restore the signal context (see
.BR setjmp (3)
for some more details).
If you want to portably save and restore signal masks, use
.BR sigsetjmp (3)
and
.BR siglongjmp ().
.P
The values of automatic variables are unspecified after a call to
.BR longjmp ()
if they meet all the following criteria:
.IP \(bu 3
they are local to the function that made the corresponding
.BR setjmp (3)
call;
.IP \(bu
their values are changed between the calls to
.BR setjmp (3)
and
.BR longjmp ();
and
.IP \(bu
they are not declared as
.IR volatile .
.P
Analogous remarks apply for
.BR siglongjmp ().
.P
.BR longjmp ()
and
.BR siglongjmp ()
make programs hard to
understand and maintain.
If possible, an alternative should be used.
.SH SEE ALSO
.BR setjmp (3),
.BR sigsetjmp (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 2001 Andries Brouwer <aeb@cwi.nl>.
.\" and Copyright 2008, Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH LRINT 3  2015-04-19 "" "Linux Programmer's Manual"
.SH NAME
lrint, lrintf, lrintl, llrint, llrintf, llrintl \- round to nearest integer
.SH SYNOPSIS
.nf
.B #include <math.h>
.sp
.BI "long int lrint(double " x );
.br
.BI "long int lrintf(float " x );
.br
.BI "long int lrintl(long double " x );
.sp
.BI "long long int llrint(double " x );
.br
.BI "long long int llrintf(float " x );
.br
.BI "long long int llrintl(long double " x );
.fi
.sp
Link with \fI\-lm\fP.
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
All functions shown above:
.RS 4
_XOPEN_SOURCE\ >=\ 600 || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.ad
.SH DESCRIPTION
These functions round their argument to the nearest integer value,
using the current rounding direction (see
.BR fesetround (3)).

Note that unlike the
.BR rint (3)
family of functions,
the return type of these functions differs from
that of their arguments.
.SH RETURN VALUE
These functions return the rounded integer value.

If
.I x
is a NaN or an infinity,
or the rounded value is too large to be stored in a
.I long
.RI ( "long long"
in the case of the
.B ll*
functions),
then a domain error occurs, and the return value is unspecified.
.\" The return value is -(LONG_MAX - 1) or -(LLONG_MAX -1)
.SH ERRORS
See
.BR math_error (7)
for information on how to determine whether an error has occurred
when calling these functions.
.PP
The following errors can occur:
.TP
Domain error: \fIx\fP is a NaN or infinite, or the rounded value is too large
.\" .I errno
.\" is set to
.\" .BR EDOM .
An invalid floating-point exception
.RB ( FE_INVALID )
is raised.
.PP
These functions do not set
.IR errno .
.\" FIXME . Is it intentional that these functions do not set errno?
.\" Bug raised: http://sources.redhat.com/bugzilla/show_bug.cgi?id=6798
.SH VERSIONS
These functions first appeared in glibc in version 2.1.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw30 lb lb
l l l.
Interface	Attribute	Value
T{
.BR lrint (),
.BR lrintf (),
.BR lrintl (),
.br
.BR llrint (),
.BR llrintf (),
.BR llrintl ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C99, POSIX.1-2001, POSIX.1-2008.
.SH SEE ALSO
.BR ceil (3),
.BR floor (3),
.BR lround (3),
.BR nearbyint (3),
.BR rint (3),
.BR round (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 2001 Andries Brouwer <aeb@cwi.nl>.
.\" and Copyright 2008, Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH LROUND 3  2015-04-19 "" "Linux Programmer's Manual"
.SH NAME
lround, lroundf, lroundl, llround, llroundf, llroundl \- round to
nearest integer, away from zero
.SH SYNOPSIS
.nf
.B #include <math.h>
.sp
.BI "long int lround(double " x );
.br
.BI "long int lroundf(float " x );
.br
.BI "long int lroundl(long double " x );
.sp
.BI "long long int llround(double " x );
.br
.BI "long long int llroundf(float " x );
.br
.BI "long long int llroundl(long double " x );
.fi
.sp
Link with \fI\-lm\fP.
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
All functions shown above:
.RS 4
_XOPEN_SOURCE\ >=\ 600 || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.ad
.SH DESCRIPTION
These functions round their argument to the nearest integer value,
rounding away from zero,
regardless of the current rounding direction (see
.BR fenv (3)).

Note that unlike the
.BR round (3)
and
.BR ceil (3),
functions, the return type of these functions differs from
that of their arguments.
.SH RETURN VALUE
These functions return the rounded integer value.

If
.I x
is a NaN or an infinity,
or the rounded value is too large to be stored in a
.I long
.RI ( "long long"
in the case of the
.B ll*
functions),
then a domain error occurs, and the return value is unspecified.
.\" The return value is -(LONG_MAX - 1) or -(LLONG_MAX -1)
.SH ERRORS
See
.BR math_error (7)
for information on how to determine whether an error has occurred
when calling these functions.
.PP
The following errors can occur:
.TP
Domain error: \fIx\fP is a NaN or infinite, or the rounded value is too large
.\" .I errno
.\" is set to
.\" .BR EDOM .
An invalid floating-point exception
.RB ( FE_INVALID )
is raised.
.PP
These functions do not set
.IR errno .
.\" FIXME . Is it intentional that these functions do not set errno?
.\" Bug raised: http://sources.redhat.com/bugzilla/show_bug.cgi?id=6797
.SH VERSIONS
These functions first appeared in glibc in version 2.1.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw33 lb lb
l l l.
Interface	Attribute	Value
T{
.BR lround (),
.BR lroundf (),
.BR lroundl (),
.br
.BR llround (),
.BR llroundf (),
.BR llroundl ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C99, POSIX.1-2001, POSIX.1-2008.
.SH SEE ALSO
.BR ceil (3),
.BR floor (3),
.BR lrint (3),
.BR nearbyint (3),
.BR rint (3),
.BR round (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1995 Jim Van Zandt <jrv@vanzandt.mv.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Corrected prototype and include, aeb, 990927
.TH LSEARCH 3  2015-05-07 "GNU" "Linux Programmer's Manual"
.SH NAME
lfind, lsearch \- linear search of an array
.SH SYNOPSIS
.nf
.B #include <search.h>
.sp
.BI "void *lfind(const void *" key ", const void *" base ", size_t *" nmemb ,
.BI "         size_t " size ", int(*" compar ")(const void *, const void *));"
.sp
.BI "void *lsearch(const void *" key ", void *" base ", size_t *" nmemb ,
.BI "         size_t " size ", int(*" compar ")(const void *, const void *));"
.fi
.SH DESCRIPTION
.BR lfind ()
and
.BR lsearch ()
perform a linear search for
.I key
in the array
.IR base
which has
.I *nmemb
elements of
.I size
bytes each.
The comparison function referenced by
.I compar
is expected to have two arguments which point to the
.I key
object and to an array member, in that order, and which
returns zero if the
.I key
object matches the array member, and
nonzero otherwise.
.PP
If
.BR lsearch ()
does not find a matching element, then the
.I key
object is inserted at the end of the table, and
.I *nmemb
is
incremented.
In particular, one should know that a matching element
exists, or that more room is available.
.SH RETURN VALUE
.BR lfind ()
returns a pointer to a matching member of the array, or
NULL if no match is found.
.BR lsearch ()
returns a pointer to
a matching member of the array, or to the newly added member if no
match is found.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw18 lb lb
l l l.
Interface	Attribute	Value
T{
.BR lfind (),
.BR lsearch ()
T}	Thread safety	MT-Safe
.TE

.SH CONFORMING TO
SVr4, 4.3BSD, POSIX.1-2001.
Present in libc since libc-4.6.27.
.SH BUGS
The naming is unfortunate.
.SH SEE ALSO
.BR bsearch (3),
.BR hsearch (3),
.BR tsearch (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 2004 Andries Brouwer <aeb@cwi.nl>.
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH LSEEK64 3 2015-04-19 "Linux" "Linux Programmer's Manual"
.SH NAME
lseek64 \- reposition 64-bit read/write file offset
.SH SYNOPSIS
.BR "#define _LARGEFILE64_SOURCE" "     /* See feature_test_macros(7) */"
.br
.B #include <sys/types.h>
.br
.B #include <unistd.h>
.sp
.BI "off64_t lseek64(int " fd ", off64_t " offset ", int " whence );
.SH DESCRIPTION
The
.BR lseek (2)
family of functions reposition the offset of the open file associated
with the file descriptor
.I fd
to
.I offset
bytes relative to the start, current position, or end of the file,
when
.I whence
has the value
.BR SEEK_SET ,
.BR SEEK_CUR ,
or
.BR SEEK_END ,
respectively.
.LP
For more details, return value, and errors, see
.BR lseek (2).
.PP
Four interfaces are available:
.BR lseek (2),
.BR lseek64 (),
.BR llseek (2),
and
.BR _llseek (2).
.SS lseek()
Prototype:
.nf
.sp
.in +4n
.BI "off_t lseek(int " fd ", off_t " offset ", int " whence );
.in
.fi
.sp
.BR lseek (2)
uses the type
.IR off_t .
This is a 32-bit signed type on 32-bit architectures, unless one
compiles with
.nf
.sp
.in +4n
#define _FILE_OFFSET_BITS 64
.in
.sp
.fi
in which case it is a 64-bit signed type.
.SS lseek64()
Prototype:
.nf
.sp
.in +4n
.BI "off64_t lseek64(int " fd ", off64_t " offset ", int " whence );
.in
.fi
.sp
The library routine
.BR lseek64 ()
uses a 64-bit type even when
.I off_t
is a 32-bit type.
Its prototype (and the type
.IR off64_t )
is available only when one compiles with
.nf
.sp
.in +4n
#define _LARGEFILE64_SOURCE
.in
.sp
.fi
The function
.BR lseek64 ()
.\" in glibc 2.0.94, not in 2.0.6
is available since glibc 2.1, and is defined to be an alias for
.BR llseek ().
.SS llseek()
Prototype:
.nf
.sp
.in +4n
.BI "loff_t llseek(int " fd ", loff_t " offset ", int " whence );
.in
.fi
.sp
The type
.I loff_t
is a 64-bit signed type.
The library routine
.BR llseek ()
.\" in libc 5.0.9, not in 4.7.6
is available in glibc and works without special defines.
However, the glibc headers do not provide a prototype.
Users should add
the above prototype, or something equivalent, to their own source.
When users complained about data loss caused by a miscompilation of
.BR e2fsck (8),
glibc 2.1.3 added the link-time warning
.sp
.in +4n
"the \`llseek\' function may be dangerous; use \`lseek64\' instead."
.in
.sp
This makes this function unusable if one desires a warning-free
compilation.
.SS _llseek()
On 32-bit architectures,
this is the system call that is used to implement all of the above functions.
The prototype is:
.nf
.sp
.in +4n
.BI "int _llseek(int " fd ", off_t " offset_hi ", off_t " offset_lo ,
.BI "            loff_t *" result ", int " whence );
.in
.fi
.sp
For more details, see
.BR llseek (2).

64-bit systems don't need an
.BR _llseek ()
system call.
Instead, they have an
.BR lseek (2)
system call that supports 64-bit file offsets.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR lseek64 ()
T}	Thread safety	MT-Safe
.TE
.SH SEE ALSO
.BR llseek (2),
.BR lseek (2)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
\" Copyright (C) 2001 Andries Brouwer (aeb@cwi.nl)
.\" and Copyright (C) 2006 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" 2006-08-02, mtk, Added example program
.\"
.TH MAKECONTEXT 3 2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
makecontext, swapcontext \- manipulate user context
.SH SYNOPSIS
.B #include <ucontext.h>
.sp
.BI "void makecontext(ucontext_t *" ucp ", void (*" func )(),
.BI "int " argc ", ...);"
.sp
.BI "int swapcontext(ucontext_t *" oucp ", const ucontext_t *" ucp );
.SH DESCRIPTION
In a System V-like environment, one has the type \fIucontext_t\fP defined in
.I <ucontext.h>
and the four functions
.BR getcontext (3),
.BR setcontext (3),
.BR makecontext ()
and
.BR swapcontext ()
that allow user-level context switching
between multiple threads of control within a process.
.LP
For the type and the first two functions, see
.BR getcontext (3).
.LP
The
.BR makecontext ()
function modifies the context pointed to
by \fIucp\fP (which was obtained from a call to
.BR getcontext (3)).
Before invoking
.BR makecontext (),
the caller must allocate a new stack
for this context and assign its address to \fIucp\->uc_stack\fP,
and define a successor context and
assign its address to \fIucp\->uc_link\fP.

When this context is later activated (using
.BR setcontext (3)
or
.BR swapcontext ())
the function \fIfunc\fP is called,
and passed the series of integer
.RI ( int )
arguments that follow
.IR argc ;
the caller must specify the number of these arguments in
.IR argc .
When this function returns, the successor context is activated.
If the successor context pointer is NULL, the thread exits.
.LP
The
.BR swapcontext ()
function saves the current context in
the structure pointed to by \fIoucp\fP, and then activates the
context pointed to by \fIucp\fP.
.SH RETURN VALUE
When successful,
.BR swapcontext ()
does not return.
(But we may return later, in case \fIoucp\fP is
activated, in which case it looks like
.BR swapcontext ()
returns 0.)
On error,
.BR swapcontext ()
returns \-1 and
sets \fIerrno\fP appropriately.
.SH ERRORS
.TP
.B ENOMEM
Insufficient stack space left.
.SH VERSIONS
.BR makecontext ()
and
.BR swapcontext ()
are provided in glibc since version 2.1.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR makecontext ()
T}	Thread safety	MT-Safe race:ucp
T{
.BR swapcontext ()
T}	Thread safety	MT-Safe race:oucp race:ucp
.TE
.SH CONFORMING TO
SUSv2, POSIX.1-2001.
POSIX.1-2008 removes the specifications of
.BR makecontext ()
and
.BR swapcontext (),
citing portability issues, and
recommending that applications be rewritten to use POSIX threads instead.
.SH NOTES
The interpretation of \fIucp\->uc_stack\fP is just as in
.BR sigaltstack (2),
namely, this struct contains the start and length of a memory area
to be used as the stack, regardless of the direction of growth of
the stack.
Thus, it is not necessary for the user program to
worry about this direction.

On architectures where
.I int
and pointer types are the same size
(e.g., x86-32, where both types are 32 bits),
you may be able to get away with passing pointers as arguments to
.BR makecontext ()
following
.IR argc .
However, doing this is not guaranteed to be portable,
is undefined according to the standards,
and won't work on architectures where pointers are larger than
.IR int s.
Nevertheless, starting with version 2.8, glibc makes some changes to
.BR makecontext (),
to permit this on some 64-bit architectures (e.g., x86-64).
.SH EXAMPLE
.PP
The example program below demonstrates the use of
.BR getcontext (3),
.BR makecontext (),
and
.BR swapcontext ().
Running the program produces the following output:
.in +4n
.nf

.RB "$" " ./a.out"
main: swapcontext(&uctx_main, &uctx_func2)
func2: started
func2: swapcontext(&uctx_func2, &uctx_func1)
func1: started
func1: swapcontext(&uctx_func1, &uctx_func2)
func2: returning
func1: returning
main: exiting
.fi
.in
.SS Program source
\&
.nf
#include <ucontext.h>
#include <stdio.h>
#include <stdlib.h>

static ucontext_t uctx_main, uctx_func1, uctx_func2;

#define handle_error(msg) \\
    do { perror(msg); exit(EXIT_FAILURE); } while (0)

static void
func1(void)
{
    printf("func1: started\\n");
    printf("func1: swapcontext(&uctx_func1, &uctx_func2)\\n");
    if (swapcontext(&uctx_func1, &uctx_func2) == \-1)
        handle_error("swapcontext");
    printf("func1: returning\\n");
}

static void
func2(void)
{
    printf("func2: started\\n");
    printf("func2: swapcontext(&uctx_func2, &uctx_func1)\\n");
    if (swapcontext(&uctx_func2, &uctx_func1) == \-1)
        handle_error("swapcontext");
    printf("func2: returning\\n");
}

int
main(int argc, char *argv[])
{
    char func1_stack[16384];
    char func2_stack[16384];

    if (getcontext(&uctx_func1) == \-1)
        handle_error("getcontext");
    uctx_func1.uc_stack.ss_sp = func1_stack;
    uctx_func1.uc_stack.ss_size = sizeof(func1_stack);
    uctx_func1.uc_link = &uctx_main;
    makecontext(&uctx_func1, func1, 0);

    if (getcontext(&uctx_func2) == \-1)
        handle_error("getcontext");
    uctx_func2.uc_stack.ss_sp = func2_stack;
    uctx_func2.uc_stack.ss_size = sizeof(func2_stack);
    /* Successor context is f1(), unless argc > 1 */
    uctx_func2.uc_link = (argc > 1) ? NULL : &uctx_func1;
    makecontext(&uctx_func2, func2, 0);

    printf("main: swapcontext(&uctx_main, &uctx_func2)\\n");
    if (swapcontext(&uctx_main, &uctx_func2) == \-1)
        handle_error("swapcontext");

    printf("main: exiting\\n");
    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR sigaction (2),
.BR sigaltstack (2),
.BR sigprocmask (2),
.BR getcontext (3),
.BR sigsetjmp (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2008 Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH MAKEDEV 3 2015-03-02 "Linux" "Linux Programmer's Manual"
.SH NAME
makedev, major, minor \- manage a device number
.SH SYNOPSIS
.nf
.BR "#define _BSD_SOURCE" "             /* See feature_test_macros(7) */"
.B #include <sys/types.h>

.BI "dev_t makedev(unsigned int " maj ", unsigned int " min );

.BI "unsigned int major(dev_t " dev );
.BI "unsigned int minor(dev_t " dev );
.fi
.SH DESCRIPTION
A device ID consists of two parts:
a major ID, identifying the class of the device,
and a minor ID, identifying a specific instance of a device in that class.
A device ID is represented using the type
.IR dev_t .

Given major and minor device IDs,
.BR makedev ()
combines these to produce a device ID, returned as the function result.
This device ID can be given to
.BR mknod (2),
for example.

The
.BR major ()
and
.BR minor ()
functions perform the converse task: given a device ID,
they return, respectively, the major and minor components.
These macros can be useful to, for example,
decompose the device IDs in the structure returned by
.BR stat (2).
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw27 lb lb
l l l.
Interface	Attribute	Value
T{
.BR makedev (),
.BR major (),
.BR minor ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
The
.BR makedev (),
.BR major (),
and
.BR minor ()
functions are not specified in POSIX.1,
but are present on many other systems.
.\" The BSDs, HP-UX, Solaris, AIX, Irix
.SH NOTES
These interfaces are defined as macros.
Since glibc 2.3.3,
they have been aliases for three GNU-specific functions:
.BR gnu_dev_makedev (),
.BR gnu_dev_major (),
and
.BR gnu_dev_minor ().
The latter names are exported, but the traditional names are more portable.
.SH SEE ALSO
.BR mknod (2),
.BR stat (2)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
'\" t
.\" Copyright (c) 2012 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH MALLINFO 3  2012-05-06 "Linux" "Linux Programmer's Manual"
.SH NAME
mallinfo \- obtain memory allocation information
.SH SYNOPSIS
.B #include <malloc.h>

.B struct mallinfo mallinfo(void);
.SH DESCRIPTION
The
.BR mallinfo ()
function returns a copy of a structure containing information about
memory allocations performed by
.BR malloc (3)
and related functions.
This structure is defined as follows:
.PP
.in +4n
.nf
struct mallinfo {
    int arena;     /* Non-mmapped space allocated (bytes) */
    int ordblks;   /* Number of free chunks */
    int smblks;    /* Number of free fastbin blocks */
    int hblks;     /* Number of mmapped regions */
    int hblkhd;    /* Space allocated in mmapped regions (bytes) */
    int usmblks;   /* Maximum total allocated space (bytes) */
    int fsmblks;   /* Space in freed fastbin blocks (bytes) */
    int uordblks;  /* Total allocated space (bytes) */
    int fordblks;  /* Total free space (bytes) */
    int keepcost;  /* Top-most, releasable space (bytes) */
};
.fi
.in
.PP
The fields of the
.I mallinfo
structure contain the following information:
.TP 10
.I arena
The total amount of memory allocated by means other than
.BR mmap (2)
(i.e., memory allocated on the heap).
This figure includes both in-use blocks and blocks on the free list.
.TP
.I ordblks
The number of ordinary (i.e., non-fastbin) free blocks.
.TP
.I smblks
The number of fastbin free blocks (see
.BR mallopt (3)).
.TP
.I hblks
The number of blocks currently allocated using
.BR mmap (2).
(See the discussion of
.B M_MMAP_THRESHOLD
in
.BR mallopt (3).)
.TP
.I hblkhd
The number of bytes in blocks currently allocated using
.BR mmap (2).
.TP
.I usmblks
The "highwater mark" for allocated space\(emthat is,
the maximum amount of space that was ever allocated.
This field is maintained only in nonthreading environments.
.TP
.I fsmblks
The total number of bytes in fastbin free blocks.
.TP
.I uordblks
The total number of bytes used by in-use allocations.
.TP
.I fordblks
The total number of bytes in free blocks.
.TP
.I keepcost
The total amount of releasable free space at the top
of the heap.
This is the maximum number of bytes that could ideally
(i.e., ignoring page alignment restrictions, and so on) be released by
.BR malloc_trim (3).
.\" .SH VERSIONS
.\" Available already in glibc 2.0, possibly earlier
.SH CONFORMING TO
This function is not specified by POSIX or the C standards.
A similar function exists on many System V derivatives,
and was specified in the SVID.
.SH BUGS
.\" FIXME . http://sourceware.org/bugzilla/show_bug.cgi?id=208
.\" See the 24 Aug 2011 mail by Paul Pluzhnikov:
.\"     "[patch] Fix mallinfo() to accumulate results for all arenas"
.\" on libc-alpha@sourceware.org
.B Information is returned for only the main memory allocation area.
Allocations in other arenas are excluded.
See
.BR malloc_stats (3)
and
.BR malloc_info (3)
for alternatives that include information about other arenas.

The fields of the
.I mallinfo
structure are typed as
.IR int .
However, because some internal bookkeeping values may be of type
.IR long ,
the reported values may wrap around zero and thus be inaccurate.
.SH EXAMPLE
The program below employs
.BR mallinfo ()
to retrieve memory allocation statistics before and after
allocating and freeing some blocks of memory.
The statistics are displayed on standard output.

The first two command-line arguments specify the number and size of
blocks to be allocated with
.BR malloc (3).

The remaining three arguments specify which of the allocated blocks
should be freed with
.BR free (3).
These three arguments are optional, and specify (in order):
the step size to be used in the loop that frees blocks
(the default is 1, meaning free all blocks in the range);
the ordinal position of the first block to be freed
(default 0, meaning the first allocated block);
and a number one greater than the ordinal position
of the last block to be freed
(default is one greater than the maximum block number).
If these three arguments are omitted,
then the defaults cause all allocated blocks to be freed.

In the following example run of the program,
1000 allocations of 100 bytes are performed,
and then every second allocated block is freed:
.PP
.in +4n
.nf
$ \fB./a.out 1000 100 2\fP
============== Before allocating blocks ==============
Total non\-mmapped bytes (arena):       0
# of free chunks (ordblks):            1
# of free fastbin blocks (smblks):     0
# of mapped regions (hblks):           0
Bytes in mapped regions (hblkhd):      0
Max. total allocated space (usmblks):  0
Free bytes held in fastbins (fsmblks): 0
Total allocated space (uordblks):      0
Total free space (fordblks):           0
Topmost releasable block (keepcost):   0

============== After allocating blocks ==============
Total non\-mmapped bytes (arena):       135168
# of free chunks (ordblks):            1
# of free fastbin blocks (smblks):     0
# of mapped regions (hblks):           0
Bytes in mapped regions (hblkhd):      0
Max. total allocated space (usmblks):  0
Free bytes held in fastbins (fsmblks): 0
Total allocated space (uordblks):      104000
Total free space (fordblks):           31168
Topmost releasable block (keepcost):   31168

============== After freeing blocks ==============
Total non\-mmapped bytes (arena):       135168
# of free chunks (ordblks):            501
# of free fastbin blocks (smblks):     0
# of mapped regions (hblks):           0
Bytes in mapped regions (hblkhd):      0
Max. total allocated space (usmblks):  0
Free bytes held in fastbins (fsmblks): 0
Total allocated space (uordblks):      52000
Total free space (fordblks):           83168
Topmost releasable block (keepcost):   31168
.fi
.in
.SS Program source
\&
.nf
#include <malloc.h>
#include "tlpi_hdr.h"

static void
display_mallinfo(void)
{
    struct mallinfo mi;

    mi = mallinfo();

    printf("Total non\-mmapped bytes (arena):       %d\\n", mi.arena);
    printf("# of free chunks (ordblks):            %d\\n", mi.ordblks);
    printf("# of free fastbin blocks (smblks):     %d\\n", mi.smblks);
    printf("# of mapped regions (hblks):           %d\\n", mi.hblks);
    printf("Bytes in mapped regions (hblkhd):      %d\\n", mi.hblkhd);
    printf("Max. total allocated space (usmblks):  %d\\n", mi.usmblks);
    printf("Free bytes held in fastbins (fsmblks): %d\\n", mi.fsmblks);
    printf("Total allocated space (uordblks):      %d\\n", mi.uordblks);
    printf("Total free space (fordblks):           %d\\n", mi.fordblks);
    printf("Topmost releasable block (keepcost):   %d\\n", mi.keepcost);
}

int
main(int argc, char *argv[])
{
#define MAX_ALLOCS 2000000
    char *alloc[MAX_ALLOCS];
    int numBlocks, j, freeBegin, freeEnd, freeStep;
    size_t blockSize;

    if (argc < 3 || strcmp(argv[1], "\-\-help") == 0)
        usageErr("%s num\-blocks block\-size [free\-step [start\-free "
                "[end\-free]]]\\n", argv[0]);

    numBlocks = atoi(argv[1]);
    blockSize = atoi(argv[2]);
    freeStep = (argc > 3) ? atoi(argv[3]) : 1;
    freeBegin = (argc > 4) ? atoi(argv[4]) : 0;
    freeEnd = (argc > 5) ? atoi(argv[5]) : numBlocks;

    printf("============== Before allocating blocks ==============\\n");
    display_mallinfo();

    for (j = 0; j < numBlocks; j++) {
        if (numBlocks >= MAX_ALLOCS)
            fatal("Too many allocations");

        alloc[j] = malloc(blockSize);
        if (alloc[j] == NULL)
            errExit("malloc");
    }

    printf("\\n============== After allocating blocks ==============\\n");
    display_mallinfo();

    for (j = freeBegin; j < freeEnd; j += freeStep)
        free(alloc[j]);

    printf("\\n============== After freeing blocks ==============\\n");
    display_mallinfo();

    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.ad l
.nh
.BR mmap (2),
.BR malloc (3),
.BR malloc_info (3),
.BR malloc_stats (3),
.BR malloc_trim (3),
.BR mallopt (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1993 by Thomas Koenig (ig25@rz.uni-karlsruhe.de)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified Sat Jul 24 19:00:59 1993 by Rik Faith (faith@cs.unc.edu)
.\" Clarification concerning realloc, iwj10@cus.cam.ac.uk (Ian Jackson), 950701
.\" Documented MALLOC_CHECK_, Wolfram Gloger (wmglo@dent.med.uni-muenchen.de)
.\" 2007-09-15 mtk: added notes on malloc()'s use of sbrk() and mmap().
.\"
.\" FIXME . Review http://austingroupbugs.net/view.php?id=374
.\" to see what changes are required on this page.
.\"
.TH MALLOC 3  2015-04-19 "GNU" "Linux Programmer's Manual"
.SH NAME
malloc, free, calloc, realloc \- allocate and free dynamic memory
.SH SYNOPSIS
.nf
.B #include <stdlib.h>
.sp
.BI "void *malloc(size_t " "size" );
.BI "void free(void " "*ptr" );
.BI "void *calloc(size_t " "nmemb" ", size_t " "size" );
.BI "void *realloc(void " "*ptr" ", size_t "  "size" );
.fi
.SH DESCRIPTION
.PP
The
.BR malloc ()
function allocates
.I size
bytes and returns a pointer to the allocated memory.
.IR "The memory is not initialized" .
If
.I size
is 0, then
.BR malloc ()
returns either NULL,
.\" glibc does this:
or a unique pointer value that can later be successfully passed to
.BR free ().
.PP
The
.BR free ()
function frees the memory space pointed to by
.IR ptr ,
which must have been returned by a previous call to
.BR malloc (),
.BR calloc (),
or
.BR realloc ().
Otherwise, or if
.I free(ptr)
has already been called before, undefined behavior occurs.
If
.I ptr
is NULL, no operation is performed.
.PP
The
.BR calloc ()
function allocates memory for an array of
.I nmemb
elements of
.I size
bytes each and returns a pointer to the allocated memory.
The memory is set to zero.
If
.I nmemb
or
.I size
is 0, then
.BR calloc ()
returns either NULL,
.\" glibc does this:
or a unique pointer value that can later be successfully passed to
.BR free ().
.PP
The
.BR realloc ()
function changes the size of the memory block pointed to by
.I ptr
to
.I size
bytes.
The contents will be unchanged in the range from the start of the region
up to the minimum of the old and new sizes.
If the new size is larger than the old size, the added memory will
.I not
be initialized.
If
.I ptr
is NULL, then the call is equivalent to
.IR malloc(size) ,
for all values of
.IR size ;
if
.I size
is equal to zero,
and
.I ptr
is not NULL, then the call is equivalent to
.IR free(ptr) .
Unless
.I ptr
is NULL, it must have been returned by an earlier call to
.BR malloc (),
.BR calloc ()
or
.BR realloc ().
If the area pointed to was moved, a
.I free(ptr)
is done.
.SH RETURN VALUE
The
.BR malloc ()
and
.BR calloc ()
functions return a pointer to the allocated memory,
which is suitably aligned for any built-in type.
On error, these functions return NULL.
NULL may also be returned by a successful call to
.BR malloc ()
with a
.I size
of zero,
or by a successful call to
.BR calloc ()
with
.I nmemb
or
.I size
equal to zero.
.PP
The
.BR free ()
function returns no value.
.PP
The
.BR realloc ()
function returns a pointer to the newly allocated memory, which is suitably
aligned for any built-in type and may be different from
.IR ptr ,
or NULL if the request fails.
If
.I size
was equal to 0, either NULL or a pointer suitable to be passed to
.BR free ()
is returned.
If
.BR realloc ()
fails, the original block is left untouched; it is not freed or moved.
.SH ERRORS
.BR calloc (),
.BR malloc (),
and
.BR realloc ()
can fail with the following error:
.TP
.B ENOMEM
Out of memory.
Possibly, the application hit the
.BR RLIMIT_AS
or
.BR RLIMIT_DATA
limit described in
.BR getrlimit (2).
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw20 lb lb
l l l.
Interface	Attribute	Value
T{
.BR malloc (),
.BR free (),
.br
.BR calloc (),
.BR realloc ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C89, C99.
.SH NOTES
By default, Linux follows an optimistic memory allocation strategy.
This means that when
.BR malloc ()
returns non-NULL there is no guarantee that the memory really
is available.
In case it turns out that the system is out of memory,
one or more processes will be killed by the OOM killer.
For more information, see the description of
.IR /proc/sys/vm/overcommit_memory
and
.IR /proc/sys/vm/oom_adj
in
.BR proc (5),
and the Linux kernel source file
.IR Documentation/vm/overcommit-accounting .

Normally,
.BR malloc ()
allocates memory from the heap, and adjusts the size of the heap
as required, using
.BR sbrk (2).
When allocating blocks of memory larger than
.B MMAP_THRESHOLD
bytes, the glibc
.BR malloc ()
implementation allocates the memory as a private anonymous mapping using
.BR mmap (2).
.B MMAP_THRESHOLD
is 128 kB by default, but is adjustable using
.BR mallopt (3).
Allocations performed using
.BR mmap (2)
are unaffected by the
.B RLIMIT_DATA
resource limit (see
.BR getrlimit (2)).

To avoid corruption in multithreaded applications,
mutexes are used internally to protect the memory-management
data structures employed by these functions.
In a multithreaded application in which threads simultaneously
allocate and free memory,
there could be contention for these mutexes.
To scalably handle memory allocation in multithreaded applications,
glibc creates additional
.IR "memory allocation arenas"
if mutex contention is detected.
Each arena is a large region of memory that is internally allocated
by the system
(using
.BR brk (2)
or
.BR mmap (2)),
and managed with its own mutexes.

The UNIX 98 standard requires
.BR malloc (),
.BR calloc (),
and
.BR realloc ()
to set
.I errno
to
.B ENOMEM
upon failure.
Glibc assumes that this is done
(and the glibc versions of these routines do this); if you
use a private malloc implementation that does not set
.IR errno ,
then certain library routines may fail without having
a reason in
.IR errno .
.LP
Crashes in
.BR malloc (),
.BR calloc (),
.BR realloc (),
or
.BR free ()
are almost always related to heap corruption, such as overflowing
an allocated chunk or freeing the same pointer twice.
.PP
The
.BR malloc ()
implementation is tunable via environment variables; see
.BR mallopt (3)
for details.
.SH SEE ALSO
.\" http://g.oswego.edu/dl/html/malloc.html
.\" A Memory Allocator - by Doug Lea
.\"
.\" http://www.bozemanpass.com/info/linux/malloc/Linux_Heap_Contention.html
.\" Linux Heap, Contention in free() - David Boreham
.\"
.\" http://www.citi.umich.edu/projects/linux-scalability/reports/malloc.html
.\" malloc() Performance in a Multithreaded Linux Environment -
.\"     Check Lever, David Boreham
.\"
.ad l
.nh
.BR brk (2),
.BR mmap (2),
.BR alloca (3),
.BR malloc_get_state (3),
.BR malloc_info (3),
.BR malloc_trim (3),
.BR malloc_usable_size (3),
.BR mallopt (3),
.BR mcheck (3),
.BR mtrace (3),
.BR posix_memalign (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2012 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH MALLOC_GET_STATE 3 2014-06-13 "GNU" "Linux Programmer's Manual"
.SH NAME
malloc_get_state, malloc_set_state \- record and restore state of malloc implementation
.SH SYNOPSIS
.nf
.B #include <malloc.h>
.sp
.BI "void* malloc_get_state(void);"

.BI "int malloc_set_state(void *" state );
.fi
.SH DESCRIPTION
The
.BR malloc_get_state ()
function records the current state of all
.BR malloc (3)
internal bookkeeping variables
(but not the actual contents of the heap
or the state of
.BR malloc_hook (3)
functions pointers).
The state is recorded in a system-dependent opaque data structure
dynamically allocated via
.BR malloc (3),
and a pointer to that data structure is returned as the function result.
(It is the caller's responsibility to
.BR free (3)
this memory.)

The
.BR malloc_set_state ()
function restores the state of all
.BR malloc (3)
internal bookkeeping variables to the values recorded in
the opaque data structure pointed to by
.IR state .
.SH RETURN VALUE
On success,
.BR malloc_get_state ()
returns a pointer to a newly allocated opaque data structure.
On error (for example, memory could not be allocated for the data structure),
.BR malloc_get_state ()
returns NULL.

On success,
.BR malloc_set_state ()
returns 0.
If the implementation detects that
.I state
does not point to a correctly formed data structure,
.\" if(ms->magic != MALLOC_STATE_MAGIC) return -1;
.BR malloc_set_state ()
returns \-1.
If the implementation detects that
the version of the data structure referred to by
.I state
is a more recent version than this implementation knows about,
.\" /* Must fail if the major version is too high. */
.\" if((ms->version & ~0xffl) > (MALLOC_STATE_VERSION & ~0xffl)) return -2;
.BR malloc_set_state ()
returns \-2.
.SH CONFORMING TO
These functions are GNU extensions.
.SH NOTES
These functions are useful when using this
.BR malloc (3)
implementation as part of a shared library,
and the heap contents are saved/restored via some other method.
This technique is used by GNU Emacs to implement its "dumping" function.

Hook function pointers are never saved or restored by these
functions, with two exceptions:
if malloc checking (see
.BR mallopt (3))
was in use when
.BR malloc_get_state ()
was called, then
.BR malloc_set_state ()
resets malloc checking hooks
.\" i.e., calls __malloc_check_init()
if possible;
.\" i.e., malloc checking is not already in use
.\" and the caller requested malloc checking
if malloc checking was not in use in the recorded state,
but the caller has requested malloc checking,
then the hooks are reset to 0.
.SH SEE ALSO
.BR malloc (3),
.BR mallopt (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 2002 Walter Harms (walter.harms@informatik.uni-oldenburg.de)
.\"
.\" %%%LICENSE_START(GPL_NOVERSION_ONELINE)
.\" Distributed under GPL
.\" %%%LICENSE_END
.\"
.\" Heavily based on glibc documentation
.\" Polished, added docs, removed glibc doc bug, 2002-07-20, aeb
.\"
.TH MALLOC_HOOK 3 2010-10-13 "GNU" "Linux Programmer's Manual"
.SH NAME
__malloc_hook, __malloc_initialize_hook,
__memalign_hook, __free_hook, __realloc_hook,
__after_morecore_hook \- malloc debugging variables
.SH SYNOPSIS
.nf
.B "#include <malloc.h>"
.sp
.BI "void *(*__malloc_hook)(size_t " size ", const void *" caller );
.sp
.BI "void *(*__realloc_hook)(void *" ptr ", size_t " size \
", const void *" caller );
.sp
.BI "void *(*__memalign_hook)(size_t " alignment ", size_t " size ,
.BI "                         const void *" caller );
.sp
.BI "void (*__free_hook)(void *" ptr ", const void *" caller );
.sp
.B "void (*__malloc_initialize_hook)(void);"
.sp
.B "void (*__after_morecore_hook)(void);"
.fi
.SH DESCRIPTION
The GNU C library lets you modify the behavior of
.BR malloc (3),
.BR realloc (3),
and
.BR free (3)
by specifying appropriate hook functions.
You can use these hooks
to help you debug programs that use dynamic memory allocation,
for example.
.LP
The variable
.B __malloc_initialize_hook
points at a function that is called once when the malloc implementation
is initialized.
This is a weak variable, so it can be overridden in
the application with a definition like the following:
.nf

    void (*__malloc_initialize_hook)(void) = my_init_hook;

.fi
Now the function
.IR my_init_hook ()
can do the initialization of all hooks.
.LP
The four functions pointed to by
.BR __malloc_hook ,
.BR __realloc_hook ,
.BR __memalign_hook ,
.B __free_hook
have a prototype like the functions
.BR malloc (3),
.BR realloc (3),
.BR memalign (3),
.BR free (3),
respectively, except that they have a final argument
.I caller
that gives the address of the caller of
.BR malloc (3),
etc.
.LP
The variable
.B __after_morecore_hook
points at a function that is called each time after
.BR sbrk (2)
was asked for more memory.
.SH CONFORMING TO
These functions are GNU extensions.
.SH NOTES
The use of these hook functions is not safe in multithreaded programs,
and they are now deprecated.
.\" https://bugzilla.redhat.com/show_bug.cgi?id=450187
.\" http://sourceware.org/bugzilla/show_bug.cgi?id=9957
Programmers should instead preempt calls to the relevant functions
by defining and exporting functions such as "malloc" and "free".
.SH EXAMPLE
Here is a short example of how to use these variables.
.sp
.nf
#include <stdio.h>
#include <malloc.h>

/* Prototypes for our hooks.  */
static void my_init_hook(void);
static void *my_malloc_hook(size_t, const void *);

/* Variables to save original hooks. */
static void *(*old_malloc_hook)(size_t, const void *);

/* Override initializing hook from the C library. */
void (*__malloc_initialize_hook) (void) = my_init_hook;

static void
my_init_hook(void)
{
    old_malloc_hook = __malloc_hook;
    __malloc_hook = my_malloc_hook;
}

static void *
my_malloc_hook(size_t size, const void *caller)
{
    void *result;

    /* Restore all old hooks */
    __malloc_hook = old_malloc_hook;

    /* Call recursively */
    result = malloc(size);

    /* Save underlying hooks */
    old_malloc_hook = __malloc_hook;

    /* printf() might call malloc(), so protect it too. */
    printf("malloc(%u) called from %p returns %p\\n",
            (unsigned int) size, caller, result);

    /* Restore our own hooks */
    __malloc_hook = my_malloc_hook;

    return result;
}
.fi
.SH SEE ALSO
.BR mallinfo (3),
.BR malloc (3),
.BR mcheck (3),
.BR mtrace (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2012 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH MALLOC_INFO 3  2015-01-22 "GNU" "Linux Programmer's Manual"
.SH NAME
malloc_info \- export malloc state to a stream
.SH SYNOPSIS
.nf
.B #include <malloc.h>
.sp
.BI "int malloc_info(int " options ", FILE *" stream );
.fi
.SH DESCRIPTION
The
.BR malloc_info ()
function exports an XML string that describes the current state
of the memory-allocation
implementation in the caller.
The string is printed on the file stream
.IR stream .
The exported string includes information about all arenas (see
.BR malloc (3)).

As currently implemented,
.I options
must be zero.
.SH RETURN VALUE
On success,
.BR malloc_info ()
returns 0;
on error, it returns \-1, with
.I errno
set to indicate the cause.
.SH ERRORS
.TP
.B EINVAL
.I options
was nonzero.
.SH VERSIONS
.BR malloc_info ()
was added to glibc in version 2.10.
.SH CONFORMING TO
This function is a GNU extension.
.SH NOTES
The memory-allocation information is provided as an XML string
(rather than a C structure)
because the information may change over time
(according to changes in the underlying implementation).
The output XML string includes a version field.

The
.BR open_memstream (3)
function can be used to send the output of
.BR malloc_info ()
directly into a buffer in memory, rather than to a file.

The
.BR malloc_info ()
function is designed to address deficiencies in
.BR malloc_stats (3)
and
.BR mallinfo (3).
.SH EXAMPLE
The program below takes up to four command-line arguments,
of which the first three are mandatory.
The first argument specifies the number of threads that
the program should create.
All of the threads, including the main thread,
allocate the number of blocks of memory specified by the second argument.
The third argument controls the size of the blocks to be allocated.
The main thread creates blocks of this size,
the second thread created by the program allocates blocks of twice this size,
the third thread allocates blocks of three times this size, and so on.

The program calls
.BR malloc_info ()
twice to display the memory-allocation state.
The first call takes place before any threads
are created or memory allocated.
The second call is performed after all threads have allocated memory.

In the following example,
the command-line arguments specify the creation of one additional thread,
and both the main thread and the additional thread
allocate 10000 blocks of memory.
After the blocks of memory have been allocated,
.BR malloc_info ()
shows the state of two allocation arenas.
.in +4
.nf

.RB "$ " "getconf GNU_LIBC_VERSION"
glibc 2.13
.RB "$ " "./a.out 1 10000 100"
============ Before allocating blocks ============
<malloc version="1">
<heap nr="0">
<sizes>
</sizes>
<total type="fast" count="0" size="0"/>
<total type="rest" count="0" size="0"/>
<system type="current" size="135168"/>
<system type="max" size="135168"/>
<aspace type="total" size="135168"/>
<aspace type="mprotect" size="135168"/>
</heap>
<total type="fast" count="0" size="0"/>
<total type="rest" count="0" size="0"/>
<system type="current" size="135168"/>
<system type="max" size="135168"/>
<aspace type="total" size="135168"/>
<aspace type="mprotect" size="135168"/>
</malloc>

============ After allocating blocks ============
<malloc version="1">
<heap nr="0">
<sizes>
</sizes>
<total type="fast" count="0" size="0"/>
<total type="rest" count="0" size="0"/>
<system type="current" size="1081344"/>
<system type="max" size="1081344"/>
<aspace type="total" size="1081344"/>
<aspace type="mprotect" size="1081344"/>
</heap>
<heap nr="1">
<sizes>
</sizes>
<total type="fast" count="0" size="0"/>
<total type="rest" count="0" size="0"/>
<system type="current" size="1032192"/>
<system type="max" size="1032192"/>
<aspace type="total" size="1032192"/>
<aspace type="mprotect" size="1032192"/>
</heap>
<total type="fast" count="0" size="0"/>
<total type="rest" count="0" size="0"/>
<system type="current" size="2113536"/>
<system type="max" size="2113536"/>
<aspace type="total" size="2113536"/>
<aspace type="mprotect" size="2113536"/>
</malloc>
.fi
.in
.SS Program source
.nf

#include <unistd.h>
#include <stdlib.h>
#include <pthread.h>
#include <malloc.h>
#include <errno.h>

static size_t blockSize;
static int numThreads, numBlocks;

#define errExit(msg)    do { perror(msg); exit(EXIT_FAILURE); \\
                        } while (0)

static void *
thread_func(void *arg)
{
    int j;
    int tn = (int) arg;

    /* The multiplier \(aq(2 + tn)\(aq ensures that each thread (including
       the main thread) allocates a different amount of memory */

    for (j = 0; j < numBlocks; j++)
        if (malloc(blockSize * (2 + tn)) == NULL)
            errExit("malloc\-thread");

    sleep(100);         /* Sleep until main thread terminates */
    return NULL;
}

int
main(int argc, char *argv[])
{
    int j, tn, sleepTime;
    pthread_t *thr;

    if (argc < 4) {
        fprintf(stderr,
                "%s num\-threads num\-blocks block\-size [sleep\-time]\\n",
                argv[0]);
        exit(EXIT_FAILURE);
    }

    numThreads = atoi(argv[1]);
    numBlocks = atoi(argv[2]);
    blockSize = atoi(argv[3]);
    sleepTime = (argc > 4) ? atoi(argv[4]) : 0;

    thr = calloc(numThreads, sizeof(pthread_t));
    if (thr == NULL)
        errExit("calloc");

    printf("============ Before allocating blocks ============\\n");
    malloc_info(0, stdout);

    /* Create threads that allocate different amounts of memory */

    for (tn = 0; tn < numThreads; tn++) {
        errno = pthread_create(&thr[tn], NULL, thread_func,
                               (void *) tn);
        if (errno != 0)
            errExit("pthread_create");

        /* If we add a sleep interval after the start\-up of each
           thread, the threads likely won\(aqt contend for malloc
           mutexes, and therefore additional arenas won\(aqt be
           allocated (see malloc(3)). */

        if (sleepTime > 0)
            sleep(sleepTime);
    }

    /* The main thread also allocates some memory */

    for (j = 0; j < numBlocks; j++)
        if (malloc(blockSize) == NULL)
            errExit("malloc");

    sleep(2);           /* Give all threads a chance to
                           complete allocations */

    printf("\\n============ After allocating blocks ============\\n");
    malloc_info(0, stdout);

    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR mallinfo (3),
.BR malloc (3),
.BR malloc_stats (3),
.BR mallopt (3),
.BR open_memstream (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
'\" t
.\" Copyright (c) 2012 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH MALLOC_STATS 3  2012-05-06 "Linux" "Linux Programmer's Manual"
.SH NAME
malloc_stats \- print memory allocation statistics
.SH SYNOPSIS
.B #include <malloc.h>

.B void malloc_stats(void);
.SH DESCRIPTION
The
.BR malloc_stats ()
function prints (on standard error) statistics about memory allocated by
.BR malloc (3)
and related functions.
For each arena (allocation area), this function prints
the total amount of memory allocated
and the total number of bytes consumed by in-use allocations.
(These two values correspond to the
.I arena
and
.I uordblks
fields retrieved by
.BR mallinfo (3).)
In addition,
the function prints the sum of these two statistics for all arenas,
and the maximum number of blocks and bytes that were ever simultaneously
allocated using
.BR mmap (2).
.\" .SH VERSIONS
.\" Available already in glibc 2.0, possibly earlier
.SH CONFORMING TO
This function is a GNU extension.
.SH NOTES
More detailed information about memory allocations in the main arena
can be obtained using
.BR mallinfo (3).
.SH SEE ALSO
.BR mmap (2),
.BR mallinfo (3),
.BR malloc (3),
.BR malloc_info (3),
.BR mallopt (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
'\" t
.\" Copyright (c) 2012 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH MALLOC_TRIM 3  2014-05-28 "Linux" "Linux Programmer's Manual"
.SH NAME
malloc_trim \- release free memory from the top of the heap
.SH SYNOPSIS
.B #include <malloc.h>

.BI "int malloc_trim(size_t "  pad );
.SH DESCRIPTION
The
.BR malloc_trim ()
function attempts to release free memory at the top of the heap
(by calling
.BR sbrk (2)
with a suitable argument).

The
.I pad
argument specifies the amount of free space to leave untrimmed
at the top of the heap.
If this argument is 0, only the minimum amount of memory is maintained
at the top of the heap (i.e., one page or less).
A nonzero argument can be used to maintain some trailing space
at the top of the heap in order to allow future allocations
to be made without having to extend the heap with
.BR sbrk (2).
.SH RETURN VALUE
The
.BR malloc_trim ()
function returns 1 if memory was actually released back to the system,
or 0 if it was not possible to release any memory.
.SH ERRORS
No errors are defined.
.\" .SH VERSIONS
.\" Available already in glibc 2.0, possibly earlier
.SH CONFORMING TO
This function is a GNU extension.
.SH NOTES
This function is automatically called by
.BR free (3)
in certain circumstances; see the discussion of
.B M_TOP_PAD
and
.B M_TRIM_THRESHOLD
in
.BR mallopt (3).

This function cannot release free memory located at places
other than the top of the heap.

This function releases only memory in the main arena.
.\" malloc/malloc.c::mTRIm():
.\"     return result | (av == &main_arena ? sYSTRIm (pad, av) : 0);
.SH SEE ALSO
.BR sbrk (2),
.BR malloc (3),
.BR mallopt (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2012 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH MALLOC_USABLE_SIZE 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
malloc_usable_size \- obtain size of block of memory allocated from heap
.SH SYNOPSIS
.B #include <malloc.h>

.BI "size_t malloc_usable_size (void *" ptr );
.SH DESCRIPTION
The
.BR malloc_usable_size ()
function returns the number of usable bytes in the block pointed to by
.IR ptr ,
a pointer to a block of memory allocated by
.BR malloc (3)
or a related function.
.SH RETURN VALUE
.BR malloc_usable_size ()
returns the number of usable bytes in
the block of allocated memory pointed to by
.IR ptr .
If
.I ptr
is NULL, 0 is returned.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw20 lb lb
l l l.
Interface	Attribute	Value
T{
.BR malloc_usable_size ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
This function is a GNU extension.
.SH NOTES
The value returned by
.BR malloc_usable_size ()
may be greater than the requested size of the allocation because
of alignment and minimum size constraints.
Although the excess bytes can be overwritten by the application
without ill effects,
this is not good programming practice:
the number of excess bytes in an allocation depends on
the underlying implementation.

The main use of this function is for debugging and introspection.
.SH SEE ALSO
.BR malloc (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
'\" t
.\" Copyright (c) 2012 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH MALLOPT 3  2014-07-08 "Linux" "Linux Programmer's Manual"
.SH NAME
mallopt \- set memory allocation parameters
.SH SYNOPSIS
.B #include <malloc.h>

.BI "int mallopt(int " param ", int " value );
.SH DESCRIPTION
The
.BR mallopt ()
function adjusts parameters that control the behavior of the
memory-allocation functions (see
.BR malloc (3)).
The
.IR param
argument specifies the parameter to be modified, and
.I value
specifies the new value for that parameter.

The following values can be specified for
.IR param :
.TP
.BR M_CHECK_ACTION
Setting this parameter controls how glibc responds when various kinds
of programming errors are detected (e.g., freeing the same pointer twice).
The 3 least significant bits (2, 1, and 0) of the value assigned
to this parameter determine the glibc behavior, as follows:
.RS
.TP
Bit 0
If this bit is set, then print a one-line message on
.I stderr
that provides details about the error.
The message starts with the string "***\ glibc detected\ ***",
followed by the program name,
the name of the memory-allocation function in which the error was detected,
a brief description of the error,
and the memory address where the error was detected.
.TP
Bit 1
If this bit is set, then,
after printing any error message specified by bit 0,
the program is terminated by calling
.BR abort (3).
In glibc versions since 2.4,
if bit 0 is also set,
then, between printing the error message and aborting,
the program also prints a stack trace in the manner of
.BR backtrace (3),
and prints the process's memory mapping in the style of
.IR /proc/[pid]/maps
(see
.BR proc (5)).
.TP
Bit 2 (since glibc 2.4)
This bit has an effect only if bit 0 is also set.
If this bit is set,
then the one-line message describing the error is simplified
to contain just the name of the function where the error
was detected and the brief description of the error.
.RE
.IP
The remaining bits in
.I value
are ignored.
.IP
Combining the above details,
the following numeric values are meaningful for
.BR M_CHECK_ACTION :
.RS 12
.IP 0 3
Ignore error conditions; continue execution (with undefined results).
.IP 1
Print a detailed error message and continue execution.
.IP 2
Abort the program.
.IP 3
Print detailed error message, stack trace, and memory mappings,
and abort the program.
.IP 5
Print a simple error message and continue execution.
.IP 7
Print simple error message, stack trace, and memory mappings,
and abort the program.
.RE
.IP
Since glibc 2.3.4, the default value for the
.BR M_CHECK_ACTION
parameter is 3.
In glibc version 2.3.3 and earlier, the default value is 1.
.IP
Using a nonzero
.B M_CHECK_ACTION
value can be useful because otherwise a crash may happen much later,
and the true cause of the problem is then very hard to track down.
.TP
.BR M_MMAP_MAX
.\" The following text adapted from comments in the glibc source:
This parameter specifies the maximum number of allocation requests that
may be simultaneously serviced using
.BR mmap (2).
This parameter exists because some systems have a limited number
of internal tables for use by
.BR mmap (2),
and using more than a few of them may degrade performance.
.IP
The default value is 65,536,
a value which has no special significance and
which servers only as a safeguard.
Setting this parameter to 0 disables the use of
.BR mmap (2)
for servicing large allocation requests.
.TP
.BR M_MMAP_THRESHOLD
For allocations greater than or equal to the limit specified (in bytes) by
.BR M_MMAP_THRESHOLD
that can't be satisfied from the free list,
the memory-allocation functions employ
.BR mmap (2)
instead of increasing the program break using
.BR sbrk (2).
.IP
Allocating memory using
.BR mmap (2)
has the significant advantage that the allocated memory blocks
can always be independently released back to the system.
(By contrast,
the heap can be trimmed only if memory is freed at the top end.)
On the other hand, there are some disadvantages to the use of
.BR mmap (2):
deallocated space is not placed on the free list
for reuse by later allocations;
memory may be wasted because
.BR mmap (2)
allocations must be page-aligned;
and the kernel must perform the expensive task of zeroing out
memory allocated via
.BR mmap (2).
Balancing these factors leads to a default setting of 128*1024 for the
.BR M_MMAP_THRESHOLD
parameter.
.IP
The lower limit for this parameter is 0.
The upper limit is
.BR DEFAULT_MMAP_THRESHOLD_MAX :
512*1024 on 32-bit systems or
.IR 4*1024*1024*sizeof(long)
on 64-bit systems.
.IP
.IR Note:
Nowadays, glibc uses a dynamic mmap threshold by default.
The initial value of the threshold is 128*1024,
but when blocks larger than the current threshold and less than or equal to
.BR DEFAULT_MMAP_THRESHOLD_MAX
are freed,
the threshold is adjusted upward to the size of the freed block.
When dynamic mmap thresholding is in effect,
the threshold for trimming the heap is also dynamically adjusted
to be twice the dynamic mmap threshold.
Dynamic adjustment of the mmap threshold is disabled if any of the
.BR M_TRIM_THRESHOLD ,
.BR M_TOP_PAD ,
.BR M_MMAP_THRESHOLD ,
or
.BR M_MMAP_MAX
parameters is set.
.TP
.BR M_MXFAST " (since glibc 2.3)"
.\" The following text adapted from comments in the glibc sources:
Set the upper limit for memory allocation requests that are satisfied
using "fastbins".
(The measurement unit for this parameter is bytes.)
Fastbins are storage areas that hold deallocated blocks of memory
of the same size without merging adjacent free blocks.
Subsequent reallocation of blocks of the same size can be handled
very quickly by allocating from the fastbin,
although memory fragmentation and the overall memory footprint
of the program can increase.
The default value for this parameter is
.IR "64*sizeof(size_t)/4"
(i.e., 64 on 32-bit architectures).
The range for this parameter is 0 to
.IR "80*sizeof(size_t)/4" .
Setting
.B M_MXFAST
to 0 disables the use of fastbins.
.TP
.BR M_PERTURB " (since glibc 2.4)"
If this parameter is set to a nonzero value,
then bytes of allocated memory (other than allocations via
.BR calloc (3))
are initialized to the complement of the value
in the least significant byte of
.IR value ,
and when allocated memory is released using
.BR free (3),
the freed bytes are set to the least significant byte of
.IR value .
This can be useful for detecting errors where programs
incorrectly rely on allocated memory being initialized to zero,
or reuse values in memory that has already been freed.
.TP
.BR M_TOP_PAD
This parameter defines the amount of padding to employ when calling
.BR sbrk (2)
to modify the program break.
(The measurement unit for this parameter is bytes.)
This parameter has an effect in the following circumstances:
.RS
.IP * 3
When the program break is increased, then
.BR M_TOP_PAD
bytes are added to the
.BR sbrk (2)
request.
.IP *
When the heap is trimmed as a consequence of calling
.BR free (3)
(see the discussion of
.BR M_TRIM_THRESHOLD )
this much free space is preserved at the top of the heap.
.RE
.IP
In either case,
the amount of padding is always rounded to a system page boundary.
.IP
Modifying
.BR M_TOP_PAD
is a trade-off between increasing the number of system calls
(when the parameter is set low)
and wasting unused memory at the top of the heap
(when the parameter is set high).
.IP
The default value for this parameter is 128*1024.
.\" DEFAULT_TOP_PAD in glibc source
.TP
.BR M_TRIM_THRESHOLD
When the amount of contiguous free memory at the top of the heap
grows sufficiently large,
.BR free (3)
employs
.BR sbrk (2)
to release this memory back to the system.
(This can be useful in programs that continue to execute for
a long period after freeing a significant amount of memory.)
The
.BR M_TRIM_THRESHOLD
parameter specifies the minimum size (in bytes) that
this block of memory must reach before
.BR sbrk (2)
is used to trim the heap.
.IP
The default value for this parameter is 128*1024.
Setting
.BR M_TRIM_THRESHOLD
to \-1 disables trimming completely.
.IP
Modifying
.BR M_TRIM_THRESHOLD
is a trade-off between increasing the number of system calls
(when the parameter is set low)
and wasting unused memory at the top of the heap
(when the parameter is set high).
.\" FIXME Do the arena parameters need to be documented?
.\" .TP
.\" .BR M_ARENA_TEST " (since glibc 2.10)"
.\" .TP
.\" .BR M_ARENA_MAX " (since glibc 2.10)"
.\"
.\" Environment variables
.\"     MALLOC_ARENA_MAX_
.\"     MALLOC_ARENA_TEST_
.\"
.\" http://udrepper.livejournal.com/20948.html describes some details
.\"	of the MALLOC_ARENA_* environment variables.
.\"
.\" These macros aren't enabled in production releases until 2.15?
.\" (see glibc malloc/Makefile)
.\"
.SS Environment variables
A number of environment variables can be defined
to modify some of the same parameters as are controlled by
.BR mallopt ().
Using these variables has the advantage that the source code
of the program need not be changed.
To be effective, these variables must be defined before the
first call to a memory-allocation function.
(If the same parameters are adjusted via
.BR mallopt (),
then the
.BR mallopt ()
settings take precedence.)
For security reasons,
these variables are ignored in set-user-ID and set-group-ID programs.

The environment variables are as follows
(note the trailing underscore at the end of the name of each variable):
.TP
.BR MALLOC_CHECK_
This environment variable controls the same parameter as
.BR mallopt ()
.BR M_CHECK_ACTION .
If this variable is set to a nonzero value,
then a special implementation of the memory-allocation functions is used.
(This is accomplished using the
.BR malloc_hook (3)
feature.)
This implementation performs additional error checking,
but is slower
.\" On glibc 2.12/x86, a simple malloc()+free() loop is about 70% slower
.\" when MALLOC_CHECK_ was set.
than the standard set of memory-allocation functions.
(This implementation does not detect all possible errors;
memory leaks can still occur.)
.IP
The value assigned to this environment variable should be a single digit,
whose meaning is as described for
.BR M_CHECK_ACTION .
Any characters beyond the initial digit are ignored.
.IP
For security reasons, the effect of
.BR MALLOC_CHECK_
is disabled by default for set-user-ID and set-group-ID programs.
However, if the file
.IR /etc/suid\-debug
exists (the content of the file is irrelevant), then
.BR MALLOC_CHECK_
also has an effect for set-user-ID and set-group-ID programs.
.TP
.BR MALLOC_MMAP_MAX_
Controls the same parameter as
.BR mallopt ()
.BR M_MMAP_MAX .
.TP
.BR MALLOC_MMAP_THRESHOLD_
Controls the same parameter as
.BR mallopt ()
.BR M_MMAP_THRESHOLD .
.TP
.BR MALLOC_PERTURB_
Controls the same parameter as
.BR mallopt ()
.BR M_PERTURB .
.TP
.BR MALLOC_TRIM_THRESHOLD_
Controls the same parameter as
.BR mallopt ()
.BR M_TRIM_THRESHOLD .
.TP
.BR MALLOC_TOP_PAD_
Controls the same parameter as
.BR mallopt ()
.BR M_TOP_PAD .
.SH RETURN VALUE
On success,
.BR mallopt ()
returns 1.
On error, it returns 0.
.SH ERRORS
On error,
.I errno
is
.I not
set.
.\" .SH VERSIONS
.\" Available already in glibc 2.0, possibly earlier
.SH CONFORMING TO
This function is not specified by POSIX or the C standards.
A similar function exists on many System V derivatives,
but the range of values for
.IR param
varies across systems.
The SVID defined options
.BR M_MXFAST ,
.BR M_NLBLKS ,
.BR M_GRAIN ,
and
.BR M_KEEP ,
but only the first of these is implemented in glibc.
.\" .SH NOTES
.SH BUGS
Specifying an invalid value for
.I param
does not generate an error.

A calculation error within the glibc implementation means that
a call of the form:
.\" FIXME . This looks buggy:
.\" setting the M_MXFAST limit rounds up:    (s + SIZE_SZ) & ~MALLOC_ALIGN_MASK)
.\" malloc requests are rounded up:
.\"    (req) + SIZE_SZ + MALLOC_ALIGN_MASK) & ~MALLOC_ALIGN_MASK
.\" http://sources.redhat.com/bugzilla/show_bug.cgi?id=12129
.nf

    mallopt(M_MXFAST, n)

.fi
does not result in fastbins being employed for all allocations of size up to
.IR n .
To ensure desired results,
.I n
should be rounded up to the next multiple greater than or equal to
.IR (2k+1)*sizeof(size_t) ,
where
.I k
is an integer.
.\" Bins are multiples of 2 * sizeof(size_t) + sizeof(size_t)

If
.BR mallopt ()
is used to set
.BR M_PERTURB ,
then, as expected, the bytes of allocated memory are initialized
to the complement of the byte in
.IR value ,
and when that memory is freed,
the bytes of the region are initialized to the byte specified in
.IR value .
However, there is an
.RI off-by- sizeof(size_t)
error in the implementation:
.\" FIXME . http://sources.redhat.com/bugzilla/show_bug.cgi?id=12140
instead of initializing precisely the block of memory
being freed by the call
.IR free(p) ,
the block starting at
.I p+sizeof(size_t)
is initialized.
.SH EXAMPLE
The program below demonstrates the use of
.BR M_CHECK_ACTION .
If the program is supplied with an (integer) command-line argument,
then that argument is used to set the
.BR M_CHECK_ACTION
parameter.
The program then allocates a block of memory,
and frees it twice (an error).

The following shell session shows what happens when we run this program
under glibc, with the default value for
.BR M_CHECK_ACTION :
.in +4n
.nf

$ \fB./a.out\fP
main(): returned from first free() call
*** glibc detected *** ./a.out: double free or corruption (top): 0x09d30008 ***
======= Backtrace: =========
/lib/libc.so.6(+0x6c501)[0x523501]
/lib/libc.so.6(+0x6dd70)[0x524d70]
/lib/libc.so.6(cfree+0x6d)[0x527e5d]
\&./a.out[0x80485db]
/lib/libc.so.6(__libc_start_main+0xe7)[0x4cdce7]
\&./a.out[0x8048471]
======= Memory map: ========
001e4000\-001fe000 r\-xp 00000000 08:06 1083555    /lib/libgcc_s.so.1
001fe000\-001ff000 r\-\-p 00019000 08:06 1083555    /lib/libgcc_s.so.1
[some lines omitted]
b7814000\-b7817000 rw\-p 00000000 00:00 0
bff53000\-bff74000 rw\-p 00000000 00:00 0          [stack]
Aborted (core dumped)
.fi
.in
.PP
The following runs show the results when employing other values for
.BR M_CHECK_ACTION :
.PP
.in +4n
.nf
$ \fB./a.out 1\fP             # Diagnose error and continue
main(): returned from first free() call
*** glibc detected *** ./a.out: double free or corruption (top): 0x09cbe008 ***
main(): returned from second free() call
$ \fB./a.out 2\fP             # Abort without error message
main(): returned from first free() call
Aborted (core dumped)
$ \fB./a.out 0\fP             # Ignore error and continue
main(): returned from first free() call
main(): returned from second free() call
.fi
.in
.PP
The next run shows how to set the same parameter using the
.B MALLOC_CHECK_
environment variable:
.PP
.in +4n
.nf
$ \fBMALLOC_CHECK_=1 ./a.out\fP
main(): returned from first free() call
*** glibc detected *** ./a.out: free(): invalid pointer: 0x092c2008 ***
main(): returned from second free() call
.fi
.in
.SS Program source
\&
.nf
#include <malloc.h>
#include <stdio.h>
#include <stdlib.h>

int
main(int argc, char *argv[])
{
    char *p;

    if (argc > 1) {
        if (mallopt(M_CHECK_ACTION, atoi(argv[1])) != 1) {
            fprintf(stderr, "mallopt() failed");
            exit(EXIT_FAILURE);
        }
    }

    p = malloc(1000);
    if (p == NULL) {
        fprintf(stderr, "malloc() failed");
        exit(EXIT_FAILURE);
    }

    free(p);
    printf("main(): returned from first free() call\\n");

    free(p);
    printf("main(): returned from second free() call\\n");

    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.ad l
.nh
.BR mmap (2),
.BR sbrk (2),
.BR mallinfo (3),
.BR malloc (3),
.BR malloc_hook (3),
.BR malloc_info (3),
.BR malloc_stats (3),
.BR malloc_trim (3),
.BR mcheck (3),
.BR mtrace (3),
.BR posix_memalign (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
'\" t
.\" Copyright (c) 2008, Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH MATHERR 3 2015-03-02 "Linux" "Linux Programmer's Manual"
.SH NAME
matherr \- SVID math library exception handling
.SH SYNOPSIS
.nf
.BR "#define _SVID_SOURCE" "             /* See feature_test_macros(7) */"
.B #include <math.h>

.BI "int matherr(struct exception *" exc );

.B extern _LIB_VERSION_TYPE _LIB_VERSION;
.fi
.sp
Link with \fI\-lm\fP.
.SH DESCRIPTION
The System V Interface Definition (SVID) specifies that various
math functions should invoke a function called
.BR matherr ()
if a math exception is detected.
This function is called before the math function returns;
after
.BR matherr ()
returns, the system then returns to the math function,
which in turn returns to the caller.

The
.BR matherr ()
mechanism is supported by glibc, but is now obsolete:
new applications should use the techniques described in
.BR math_error (7)
and
.BR fenv (3).
This page documents the glibc
.BR matherr ()
mechanism as an aid for maintaining and porting older applications.

To employ
.BR matherr (),
the programmer must define the
.B _SVID_SOURCE
feature test macro
(before including
.I any
header files),
and assign the value
.B _SVID_
to the external variable
.BR _LIB_VERSION .

The system provides a default version of
.BR matherr ().
This version does nothing, and returns zero
(see below for the significance of this).
The default
.BR matherr ()
can be overridden by a programmer-defined
version, which will be invoked when an exception occurs.
The function is invoked with one argument, a pointer to an
.I exception
structure, defined as follows:

.in +4n
.nf
struct exception {
    int    type;      /* Exception type */
    char  *name;      /* Name of function causing exception */
    double arg1;      /* 1st argument to function */
    double arg2;      /* 2nd argument to function */
    double retval;    /* Function return value */
}
.fi
.in
.PP
The
.I type
field has one of the following values:
.TP 12
.B DOMAIN
A domain error occurred (the function argument was outside the range
for which the function is defined).
The return value depends on the function;
.I errno
is set to
.BR EDOM .
.TP
.B SING
A pole error occurred (the function result is an infinity).
The return value in most cases is
.B HUGE
(the largest single precision floating-point number),
appropriately signed.
In most cases,
.I errno
is set to
.BR EDOM .
.TP
.B OVERFLOW
An overflow occurred.
In most cases, the value
.B HUGE
is returned, and
.I errno
is set to
.BR ERANGE .
.TP
.B UNDERFLOW
An underflow occurred.
0.0 is returned, and
.I errno
is set to
.BR ERANGE .
.TP
.B TLOSS
Total loss of significance.
0.0 is returned, and
.I errno
is set to
.BR ERANGE .
.TP
.B PLOSS
Partial loss of significance.
This value is unused on glibc
(and many other systems).
.PP
The
.I arg1
and
.I arg2
fields are the arguments supplied to the function
.RI ( arg2
is undefined for functions that take only one argument).

The
.I retval
field specifies the return value that the math
function will return to its caller.
The programmer-defined
.BR matherr ()
can modify this field to change the return value of the math function.

If the
.BR matherr ()
function returns zero, then the system sets
.I errno
as described above, and may print an error message on standard error
(see below).

If the
.BR matherr ()
function returns a nonzero value, then the system does not set
.IR errno ,
and doesn't print an error message.
.SS Math functions that employ matherr()
The table below lists the functions and circumstances in which
.BR matherr ()
is called.
The "Type" column indicates the value assigned to
.I exc\->type
when calling
.BR matherr ().
The "Result" column is the default return value assigned to
.IR exc\->retval .

The "Msg?" and "errno" columns describe the default behavior if
.BR matherr ()
returns zero.
If the "Msg?" columns contains "y",
then the system prints an error message on standard error.

The table uses the following notations and abbreviations:
.RS
.nf

x        first argument to function
y        second argument to function
fin      finite value for argument
neg      negative value for argument
int      integral value for argument
o/f      result overflowed
u/f      result underflowed
|x|      absolute value of x
X_TLOSS  is a constant defined in \fI<math.h>\fP
.fi
.RE
.\" Details below from glibc 2.8's sysdeps/ieee754/k_standard.c
.\" A subset of cases were test by experimental programs.
.TS
lB lB lB cB lB
l l l c l.
Function	Type	Result	Msg?	errno
acos(|x|>1)	DOMAIN	HUGE	y	EDOM
asin(|x|>1)	DOMAIN	HUGE	y	EDOM
atan2(0,0)	DOMAIN	HUGE	y	EDOM
acosh(x<1)	DOMAIN	NAN	y	EDOM	\" retval is 0.0/0.0
atanh(|x|>1)	DOMAIN	NAN	y	EDOM	\" retval is 0.0/0.0
atanh(|x|==1)	SING	(x>0.0)?	y	EDOM	\" retval is x/0.0
\ 	\ 	HUGE_VAL :
\ 	\ 	\-HUGE_VAL
cosh(fin) o/f	OVERFLOW	HUGE	n	ERANGE
sinh(fin) o/f	OVERFLOW	(x>0.0) ?	n	ERANGE
\ 	\ 	HUGE : \-HUGE
sqrt(x<0)	DOMAIN	0.0	y	EDOM
hypot(fin,fin) o/f	OVERFLOW	HUGE	n	ERANGE
exp(fin) o/f	OVERFLOW	HUGE	n	ERANGE
exp(fin) u/f	UNDERFLOW	0.0	n	ERANGE
exp2(fin) o/f	OVERFLOW	HUGE	n	ERANGE
exp2(fin) u/f	UNDERFLOW	0.0	n	ERANGE
exp10(fin) o/f	OVERFLOW	HUGE	n	ERANGE
exp10(fin) u/f	UNDERFLOW	0.0	n	ERANGE
j0(|x|>X_TLOSS)	TLOSS	0.0	y	ERANGE
j1(|x|>X_TLOSS)	TLOSS	0.0	y	ERANGE
jn(|x|>X_TLOSS)	TLOSS	0.0	y	ERANGE
y0(x>X_TLOSS)	TLOSS	0.0	y	ERANGE
y1(x>X_TLOSS)	TLOSS	0.0	y	ERANGE
yn(x>X_TLOSS)	TLOSS	0.0	y	ERANGE
y0(0)	DOMAIN	\-HUGE	y	EDOM
y0(x<0)	DOMAIN	\-HUGE	y	EDOM
y1(0)	DOMAIN	\-HUGE	y	EDOM
y1(x<0)	DOMAIN	\-HUGE	y	EDOM
yn(n,0)	DOMAIN	\-HUGE	y	EDOM
yn(x<0)	DOMAIN	\-HUGE	y	EDOM
lgamma(fin) o/f	OVERFLOW	HUGE	n	ERANGE
lgamma(\-int) or	SING	HUGE	y	EDOM
\ \ lgamma(0)
tgamma(fin) o/f	OVERFLOW	HUGE_VAL	n	ERANGE
tgamma(\-int)	SING	NAN	y	EDOM
tgamma(0)	SING	copysign(	y	ERANGE
\ 	\ 	HUGE_VAL,x)
log(0)	SING	\-HUGE	y	EDOM
log(x<0)	DOMAIN	\-HUGE	y	EDOM
log2(0)	SING	\-HUGE	n	EDOM	\" different from log()
log2(x<0)	DOMAIN	\-HUGE	n	EDOM	\" different from log()
log10(0)	SING	\-HUGE	y	EDOM
log10(x<0)	DOMAIN	\-HUGE	y	EDOM
pow(0.0,0.0)	DOMAIN	0.0	y	EDOM
pow(x,y) o/f	OVERFLOW	HUGE	n	ERANGE
pow(x,y) u/f	UNDERFLOW	0.0	n	ERANGE
pow(NaN,0.0)	DOMAIN	x	n	EDOM
0**neg	DOMAIN	0.0	y	EDOM	\" +0 and -0
neg**non-int	DOMAIN	0.0	y	EDOM
scalb() o/f	OVERFLOW	(x>0.0) ?	n	ERANGE
\ 	\ 	HUGE_VAL :
\ 	\ 	\-HUGE_VAL
scalb() u/f	UNDERFLOW	copysign(	n	ERANGE
\ 	\ 	\ \ 0.0,x)
fmod(x,0)	DOMAIN	x	y	EDOM
remainder(x,0)	DOMAIN	NAN	y	EDOM	\" retval is 0.0/0.0
.TE
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR matherr ()
T}	Thread safety	MT-Safe
.TE
.SH EXAMPLE
The example program demonstrates the use of
.BR matherr ()
when calling
.BR log (3).
The program takes up to three command-line arguments.
The first argument is the floating-point number to be given to
.BR log (3).
If the optional second argument is provided, then
.B _LIB_VERSION
is set to
.B _SVID_
so that
.BR matherr ()
is called, and the integer supplied in the
command-line argument is used as the return value from
.BR matherr ().
If the optional third command-line argument is supplied,
then it specifies an alternative return value that
.BR matherr ()
should assign as the return value of the math function.

The following example run, where
.BR log (3)
is given an argument of 0.0, does not use
.BR matherr ():

.in +4n
.nf
.RB "$" " ./a.out 0.0"
errno: Numerical result out of range
x=-inf
.fi
.in

In the following run,
.BR matherr ()
is called, and returns 0:

.in +4n
.nf
.RB "$" " ./a.out 0.0 0"
matherr SING exception in log() function
        args:   0.000000, 0.000000
        retval: \-340282346638528859811704183484516925440.000000
log: SING error
errno: Numerical argument out of domain
x=-340282346638528859811704183484516925440.000000
.fi
.in

The message "log: SING error" was printed by the C library.

In the following run,
.BR matherr ()
is called, and returns a nonzero value:

.in +4n
.nf
.RB "$" " ./a.out 0.0 1"
matherr SING exception in log() function
        args:   0.000000, 0.000000
        retval: \-340282346638528859811704183484516925440.000000
x=-340282346638528859811704183484516925440.000000
.fi
.in

In this case, the C library did not print a message, and
.I errno
was not set.

In the following run,
.BR matherr ()
is called, changes the return value of the math function,
and returns a nonzero value:

.in +4n
.nf
.RB "$" " ./a.out 0.0 1 12345.0"
matherr SING exception in log() function
        args:   0.000000, 0.000000
        retval: \-340282346638528859811704183484516925440.000000
x=12345.000000
.fi
.in
.SS Program source
\&
.nf
#define _SVID_SOURCE
#include <errno.h>
#include <math.h>
#include <stdio.h>
#include <stdlib.h>

static int matherr_ret = 0;     /* Value that matherr()
                                   should return */
static int change_retval = 0;   /* Should matherr() change
                                   function\(aqs return value? */
static double new_retval;       /* New function return value */

int
matherr(struct exception *exc)
{
    fprintf(stderr, "matherr %s exception in %s() function\\n",
           (exc\->type == DOMAIN) ?    "DOMAIN" :
           (exc\->type == OVERFLOW) ?  "OVERFLOW" :
           (exc\->type == UNDERFLOW) ? "UNDERFLOW" :
           (exc\->type == SING) ?      "SING" :
           (exc\->type == TLOSS) ?     "TLOSS" :
           (exc\->type == PLOSS) ?     "PLOSS" : "???",
            exc\->name);
    fprintf(stderr, "        args:   %f, %f\\n",
            exc\->arg1, exc\->arg2);
    fprintf(stderr, "        retval: %f\\n", exc\->retval);

    if (change_retval)
        exc\->retval = new_retval;

    return matherr_ret;
}

int
main(int argc, char *argv[])
{
    double x;

    if (argc < 2) {
        fprintf(stderr, "Usage: %s <argval>"
                " [<matherr\-ret> [<new\-func\-retval>]]\\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    if (argc > 2) {
        _LIB_VERSION = _SVID_;
        matherr_ret = atoi(argv[2]);
    }

    if (argc > 3) {
        change_retval = 1;
        new_retval = atof(argv[3]);
    }

    x = log(atof(argv[1]));
    if (errno != 0)
        perror("errno");

    printf("x=%f\\n", x);
    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR fenv (3),
.BR math_error (7),
.BR standards (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) Bruno Haible <haible@clisp.cons.org>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_ONEPARA)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"   GNU glibc-2 source code and manual
.\"   Dinkumware C library reference http://www.dinkumware.com/
.\"   OpenGroup's Single UNIX specification http://www.UNIX-systems.org/online.html
.\"
.\" Modified, aeb, 990824
.\"
.TH MB_CUR_MAX 3 1999-07-04 "Linux" "Linux Programmer's Manual"
.SH NAME
MB_CUR_MAX \- maximum length of a multibyte character in the current locale
.SH SYNOPSIS
.nf
.B #include <stdlib.h>
.fi
.SH DESCRIPTION
The
.B MB_CUR_MAX
macro defines an integer expression giving
the maximum number of bytes needed to represent a single
wide character in the current locale.
It is locale dependent and therefore not a compile-time constant.
.SH RETURN VALUE
An integer in the range [1,
.BR MB_LEN_MAX ].
The value 1 denotes traditional 8-bit encoded characters.
.SH CONFORMING TO
C99, POSIX.1-2001.
.SH SEE ALSO
.BR MB_LEN_MAX (3),
.BR mblen (3),
.BR mbstowcs (3),
.BR mbtowc (3),
.BR wcstombs (3),
.BR wctomb (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) Bruno Haible <haible@clisp.cons.org>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_ONEPARA)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"   GNU glibc-2 source code and manual
.\"   Dinkumware C library reference http://www.dinkumware.com/
.\"   OpenGroup's Single UNIX specification http://www.UNIX-systems.org/online.html
.\"   ISO/IEC 9899:1999
.\"
.TH MBLEN 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
mblen \- determine number of bytes in next multibyte character
.SH SYNOPSIS
.nf
.B #include <stdlib.h>
.sp
.BI "int mblen(const char *" s ", size_t " n );
.fi
.SH DESCRIPTION
If
.I s
is not NULL, the
.BR mblen ()
function inspects at most
.I n
bytes of the multibyte string starting at
.I s
and extracts the
next complete multibyte character.
It uses a static anonymous shift state known only to the
.BR mblen ()
function.
If the multibyte character is not the null wide
character, it returns the number of bytes that were consumed from
.IR s .
If the multibyte character is the null wide character, it returns 0.
.PP
If the
.IR n
bytes starting at
.I s
do not contain a complete multibyte
character,
.BR mblen ()
returns \-1.
This can happen even if
.I n
is greater than or equal to
.IR MB_CUR_MAX ,
if the multibyte string contains redundant shift sequences.
.PP
If the multibyte string starting at
.I s
contains an invalid multibyte
sequence before the next complete character,
.BR mblen ()
also returns \-1.
.PP
If
.I s
is NULL, the
.BR mblen ()
function
.\" The Dinkumware doc and the Single UNIX specification say this, but
.\" glibc doesn't implement this.
resets the shift state, known to only this function, to the initial state, and
returns nonzero if the encoding has nontrivial shift state, or zero if the
encoding is stateless.
.SH RETURN VALUE
The
.BR mblen ()
function returns the number of
bytes parsed from the multibyte
sequence starting at
.IR s ,
if a non-null wide character was recognized.
It returns 0, if a null wide character was recognized.
It returns \-1, if an
invalid multibyte sequence was encountered or if it couldn't parse a complete
multibyte character.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR mblen ()
T}	Thread safety	MT-Unsafe race
.TE
.SH CONFORMING TO
C99.
.SH NOTES
The behavior of
.BR mblen ()
depends on the
.B LC_CTYPE
category of the
current locale.
.PP
The function
.BR mbrlen (3)
provides a better interface to the same
functionality.
.SH SEE ALSO
.BR mbrlen (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) Bruno Haible <haible@clisp.cons.org>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_ONEPARA)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"   GNU glibc-2 source code and manual
.\"   Dinkumware C library reference http://www.dinkumware.com/
.\"   OpenGroup's Single UNIX specification http://www.UNIX-systems.org/online.html
.\"
.\" Modified, aeb, 990824
.\"
.TH MB_LEN_MAX 3 1999-07-04 "Linux" "Linux Programmer's Manual"
.SH NAME
MB_LEN_MAX \- maximum multibyte length of a character across all locales
.SH SYNOPSIS
.nf
.B #include <limits.h>
.fi
.SH DESCRIPTION
The
.B MB_LEN_MAX
macro is the upper bound for the number of bytes needed to represent a single
wide character, across all locales.
.SH RETURN VALUE
A constant integer greater than zero.
.SH CONFORMING TO
C99, POSIX.1-2001.
.SH NOTES
The entities
.B MB_LEN_MAX
and
.I sizeof(wchar_t)
are totally unrelated.
In glibc,
.B MB_LEN_MAX
is typically 6 while
.I sizeof(wchar_t)
is 4.
.SH SEE ALSO
.BR MB_CUR_MAX (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) Bruno Haible <haible@clisp.cons.org>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_ONEPARA)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"   GNU glibc-2 source code and manual
.\"   Dinkumware C library reference http://www.dinkumware.com/
.\"   OpenGroup's Single UNIX specification http://www.UNIX-systems.org/online.html
.\"   ISO/IEC 9899:1999
.\"
.TH MBRLEN 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
mbrlen \- determine number of bytes in next multibyte character
.SH SYNOPSIS
.nf
.B #include <wchar.h>
.sp
.BI "size_t mbrlen(const char *" s ", size_t " n ", mbstate_t *" ps );
.fi
.SH DESCRIPTION
The
.BR mbrlen ()
function inspects at most
.I n
bytes of the multibyte
string starting at
.I s
and extracts the next complete multibyte character.
It updates the shift state
.IR *ps .
If the multibyte character is not the
null wide character, it returns the number of bytes that were consumed from
.IR s .
If the multibyte character is the null wide character, it resets the
shift state
.I *ps
to the initial state and returns 0.
.PP
If the
.IR n
bytes starting at
.I s
do not contain a complete multibyte
character,
.BR mbrlen ()
returns
.IR "(size_t)\ \-2" .
This can happen even if
.I n
>=
.IR MB_CUR_MAX ,
if the multibyte string contains redundant shift
sequences.
.PP
If the multibyte string starting at
.I s
contains an invalid multibyte
sequence before the next complete character,
.BR mbrlen ()
returns
.IR "(size_t)\ \-1"
and sets
.I errno
to
.BR EILSEQ .
In this case,
the effects on
.I *ps
are undefined.
.PP
If
.I ps
is NULL, a static anonymous state known only to the
.BR mbrlen ()
function is used instead.
.SH RETURN VALUE
The
.BR mbrlen ()
function returns the number of bytes
parsed from the multibyte
sequence starting at
.IR s ,
if a non-null wide character was recognized.
It returns 0, if a null wide character was recognized.
It returns
.I "(size_t)\ \-1"
and sets
.I errno
to
.BR EILSEQ ,
if an invalid multibyte sequence was
encountered.
It returns
.IR "(size_t)\ \-2"
if it couldn't parse a complete multibyte
character, meaning that
.I n
should be increased.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR mbrlen ()
T}	Thread safety	MT-Unsafe race:mbrlen/!ps
.TE
.SH CONFORMING TO
C99.
.SH NOTES
The behavior of
.BR mbrlen ()
depends on the
.B LC_CTYPE
category of the
current locale.
.SH SEE ALSO
.BR mbrtowc (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) Bruno Haible <haible@clisp.cons.org>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_ONEPARA)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"   GNU glibc-2 source code and manual
.\"   Dinkumware C library reference http://www.dinkumware.com/
.\"   OpenGroup's Single UNIX specification
.\"      http://www.UNIX-systems.org/online.html
.\"   ISO/IEC 9899:1999
.\"
.TH MBRTOWC 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
mbrtowc \- convert a multibyte sequence to a wide character
.SH SYNOPSIS
.nf
.B #include <wchar.h>
.sp
.BI "size_t mbrtowc(wchar_t *" pwc ", const char *" s ", size_t " n \
", mbstate_t *" ps );
.fi
.SH DESCRIPTION
The main case for this function is when
.IR s
is not NULL and
.I pwc
is
not NULL.
In this case, the
.BR mbrtowc ()
function inspects at most
.I n
bytes of the multibyte string starting at
.IR s ,
extracts the next complete
multibyte character, converts it to a wide character and stores it at
.IR *pwc .
It updates the shift state
.IR *ps .
If the converted wide
character is not L\(aq\\0\(aq (the null wide character),
it returns the number of bytes that were consumed
from
.IR s .
If the converted wide character is L\(aq\\0\(aq, it resets the shift
state
.I *ps
to the initial state and returns 0.
.PP
If the
.IR n
bytes starting at
.I s
do not contain a complete multibyte
character,
.BR mbrtowc ()
returns
.IR "(size_t)\ \-2" .
This can happen even if
.I n
>=
.IR MB_CUR_MAX ,
if the multibyte string contains redundant shift
sequences.
.PP
If the multibyte string starting at
.I s
contains an invalid multibyte
sequence before the next complete character,
.BR mbrtowc ()
returns
.IR "(size_t)\ \-1"
and sets
.I errno
to
.BR EILSEQ .
In this case,
the effects on
.I *ps
are undefined.
.PP
A different case is when
.IR s
is not NULL but
.I pwc
is NULL.
In this case, the
.BR mbrtowc ()
function behaves as above, except that it does not
store the converted wide character in memory.
.PP
A third case is when
.I s
is NULL.
In this case,
.IR pwc
and
.I n
are
ignored.
If the conversion state represented by
.I *ps
denotes an
incomplete multibyte character conversion, the
.BR mbrtowc ()
function
returns
.IR "(size_t)\ \-1" ,
sets
.I errno
to
.BR EILSEQ ,
and
leaves
.I *ps
in an undefined state.
Otherwise, the
.BR mbrtowc ()
function
puts
.I *ps
in the initial state and returns 0.
.PP
In all of the above cases, if
.I ps
is NULL, a static anonymous
state known only to the
.BR mbrtowc ()
function is used instead.
Otherwise,
.IR *ps
must be a valid
.I mbstate_t
object.
An
.IR mbstate_t
object
.I a
can be initialized to the initial state
by zeroing it, for example using
.sp
.in +4n
memset(&a, 0, sizeof(a));
.in
.SH RETURN VALUE
The
.BR mbrtowc ()
function returns the number of bytes parsed from the
multibyte sequence starting at
.IR s ,
if a non-L\(aq\\0\(aq wide character
was recognized.
It returns 0, if a L\(aq\\0\(aq wide character was recognized.
It returns
.I (size_t)\ \-1
and sets
.I errno
to
.BR EILSEQ ,
if an invalid multibyte sequence was
encountered.
It returns
.I "(size_t)\ \-2"
if it couldn't parse a complete multibyte
character, meaning that
.I n
should be increased.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR mbrtowc ()
T}	Thread safety	MT-Unsafe race:mbrtowc/!ps
.TE
.SH CONFORMING TO
C99.
.SH NOTES
The behavior of
.BR mbrtowc ()
depends on the
.B LC_CTYPE
category of the
current locale.
.SH SEE ALSO
.BR mbsinit (3),
.BR mbsrtowcs (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) Bruno Haible <haible@clisp.cons.org>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_ONEPARA)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"   GNU glibc-2 source code and manual
.\"   Dinkumware C library reference http://www.dinkumware.com/
.\"   OpenGroup's Single UNIX specification http://www.UNIX-systems.org/online.html
.\"   ISO/IEC 9899:1999
.\"
.TH MBSINIT 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
mbsinit \- test for initial shift state
.SH SYNOPSIS
.nf
.B #include <wchar.h>
.sp
.BI "int mbsinit(const mbstate_t *" ps );
.fi
.SH DESCRIPTION
Character conversion between the multibyte representation and the wide
character representation uses conversion state, of type
.IR mbstate_t .
Conversion of a string uses a finite-state machine; when it is interrupted
after the complete conversion of a number of characters, it may need to
save a state for processing the remaining characters.
Such a conversion
state is needed for the sake of encodings such as ISO-2022 and UTF-7.
.PP
The initial state is the state at the beginning of conversion of a string.
There are two kinds of state: The one used by multibyte to wide character
conversion functions, such as
.BR mbsrtowcs (3),
and the one used by wide
character to multibyte conversion functions, such as
.BR wcsrtombs (3),
but they both fit in a
.IR mbstate_t ,
and they both have the same
representation for an initial state.
.PP
For 8-bit encodings, all states are equivalent to the initial state.
For multibyte encodings like UTF-8, EUC-*, BIG5 or SJIS, the wide character
to multibyte conversion functions never produce non-initial states, but the
multibyte to wide-character conversion functions like
.BR mbrtowc (3)
do
produce non-initial states when interrupted in the middle of a character.
.PP
One possible way to create an
.I mbstate_t
in initial state is to set it to zero:
.nf

    mbstate_t state;
    memset(&state,0,sizeof(mbstate_t));
.fi
.PP
On Linux, the following works as well, but might generate compiler warnings:
.nf

    mbstate_t state = { 0 };
.fi
.PP
The function
.BR mbsinit ()
tests whether
.I *ps
corresponds to an
initial state.
.SH RETURN VALUE
.BR mbsinit ()
returns nonzero if
.I *ps
is an initial state, or if
.I ps
is NULL.
Otherwise, it returns 0.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR mbsinit ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C99.
.SH NOTES
The behavior of
.BR mbsinit ()
depends on the
.B LC_CTYPE
category of the
current locale.
.SH SEE ALSO
.BR mbrlen (3),
.BR mbrtowc (3),
.BR wcrtomb (3),
.BR mbsrtowcs (3),
.BR wcsrtombs (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) Bruno Haible <haible@clisp.cons.org>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_ONEPARA)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"   GNU glibc-2 source code and manual
.\"   Dinkumware C library reference http://www.dinkumware.com/
.\"   OpenGroup's Single UNIX specification http://www.UNIX-systems.org/online.html
.\"
.TH MBSNRTOWCS 3  2015-04-19 "GNU" "Linux Programmer's Manual"
.SH NAME
mbsnrtowcs \- convert a multibyte string to a wide-character string
.SH SYNOPSIS
.nf
.B #include <wchar.h>
.sp
.BI "size_t mbsnrtowcs(wchar_t *" dest ", const char **" src ,
.BI "                  size_t " nms ", size_t " len ", mbstate_t *" ps );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR mbsnrtowcs ():
.PD 0
.ad l
.RS 4
.TP 4
Since glibc 2.10:
_XOPEN_SOURCE\ >=\ 700 || _POSIX_C_SOURCE\ >=\ 200809L
.TP
Before glibc 2.10:
_GNU_SOURCE
.RE
.ad
.PD
.SH DESCRIPTION
The
.BR mbsnrtowcs ()
function is like the
.BR mbsrtowcs (3)
function, except that
the number of bytes to be converted, starting at
.IR *src ,
is limited to
.IR nms .
.PP
If
.I dest
is not NULL, the
.BR mbsnrtowcs ()
function converts at
most
.I nms
bytes from the
multibyte string
.I *src
to a wide-character string starting at
.IR dest .
At most
.I len
wide characters are written to
.IR dest .
The shift state
.I *ps
is updated.
The conversion is effectively performed by repeatedly
calling
.I "mbrtowc(dest, *src, n, ps)"
where
.I n
is some
positive number, as long as this call succeeds, and then incrementing
.I dest
by one and
.I *src
by the number of bytes consumed.
The
conversion can stop for three reasons:
.IP 1. 3
An invalid multibyte sequence has been encountered.
In this case,
.I *src
is left pointing to the invalid multibyte sequence,
.I (size_t)\ \-1
is returned,
and
.I errno
is set to
.BR EILSEQ .
.IP 2.
The
.I nms
limit forces a stop,
or
.I len
non-L\(aq\\0\(aq wide characters
have been stored at
.IR dest .
In this case,
.I *src
is left pointing to the
next multibyte sequence to be converted, and the number of wide characters
written to
.I dest
is returned.
.IP 3.
The multibyte string has been completely converted, including the
terminating null wide character (\(aq\\0\(aq)
(which has the side effect of bringing back
.I *ps
to the
initial state).
In this case,
.I *src
is set to NULL, and the number of wide
characters written to
.IR dest ,
excluding the terminating null wide character,
is returned.
.PP
If
.IR dest
is NULL,
.I len
is ignored, and the conversion proceeds as
above, except that the converted wide characters
are not written out to memory,
and that no destination length limit exists.
.PP
In both of the above cases, if
.I ps
is NULL, a static anonymous
state known only to the
.BR mbsnrtowcs ()
function is used instead.
.PP
The programmer must ensure that there is room for at least
.I len
wide
characters at
.IR dest .
.SH RETURN VALUE
The
.BR mbsnrtowcs ()
function returns the number of wide characters
that make up the converted part of the wide-character string,
not including the terminating null wide character.
If an invalid multibyte sequence was
encountered,
.I (size_t)\ \-1
is returned, and
.I errno
set to
.BR EILSEQ .
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lbw29
l l l.
Interface	Attribute	Value
T{
.BR mbsnrtowcs ()
T}	Thread safety	MT-Unsafe race:mbsnrtowcs/!ps
.TE

.SH CONFORMING TO
POSIX.1-2008.
.SH NOTES
The behavior of
.BR mbsnrtowcs ()
depends on the
.B LC_CTYPE
category of the
current locale.
.PP
Passing NULL as
.I ps
is not multithread safe.
.SH SEE ALSO
.BR iconv (3),
.BR mbrtowc (3)
.BR mbsinit (3),
.BR mbsrtowcs (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) Bruno Haible <haible@clisp.cons.org>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_ONEPARA)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"   GNU glibc-2 source code and manual
.\"   Dinkumware C library reference http://www.dinkumware.com/
.\"   OpenGroup's Single UNIX specification http://www.UNIX-systems.org/online.html
.\"   ISO/IEC 9899:1999
.\"
.TH MBSRTOWCS 3  2015-04-19 "GNU" "Linux Programmer's Manual"
.SH NAME
mbsrtowcs \- convert a multibyte string to a wide-character string
.SH SYNOPSIS
.nf
.B #include <wchar.h>
.sp
.BI "size_t mbsrtowcs(wchar_t *" dest ", const char **" src ,
.BI "                  size_t " len ", mbstate_t *" ps );
.fi
.SH DESCRIPTION
If
.I dest
is not NULL, the
.BR mbsrtowcs ()
function converts the
multibyte string
.I *src
to a wide-character string starting at
.IR dest .
At most
.I len
wide characters are written to
.IR dest .
The shift state
.I *ps
is updated.
The conversion is effectively performed by repeatedly
calling
.I "mbrtowc(dest, *src, n, ps)"
where
.I n
is some
positive number, as long as this call succeeds, and then incrementing
.I dest
by one and
.I *src
by the number of bytes consumed.
The conversion can stop for three reasons:
.IP 1. 3
An invalid multibyte sequence has been encountered.
In this case,
.I *src
is left pointing to the invalid multibyte sequence,
.I (size_t)\ \-1
is returned,
and
.I errno
is set to
.BR EILSEQ .
.IP 2.
.I len
non-L\(aq\\0\(aq wide characters have been stored at
.IR dest .
In this case,
.I *src
is left pointing to the next
multibyte sequence to be converted,
and the number of wide characters written to
.I dest
is returned.
.IP 3.
The multibyte string has been completely converted, including the
terminating null wide character (\(aq\\0\(aq), which has the side
effect of bringing back
.I *ps
to the
initial state.
In this case,
.I *src
is set to NULL, and the number of wide
characters written to
.IR dest ,
excluding the terminating null wide character, is returned.
.PP
If
.IR dest
is NULL,
.I len
is ignored,
and the conversion proceeds as above,
except that the converted wide characters are not written out to memory,
and that no length limit exists.
.PP
In both of the above cases,
if
.I ps
is NULL, a static anonymous
state known only to the
.BR mbsrtowcs ()
function is used instead.
.PP
The programmer must ensure that there is room for at least
.I len
wide
characters at
.IR dest .
.SH RETURN VALUE
The
.BR mbsrtowcs ()
function returns the number of wide characters that make
up the converted part of the wide-character string, not including the
terminating null wide character.
If an invalid multibyte sequence was
encountered,
.I (size_t)\ \-1
is returned, and
.I errno
set to
.BR EILSEQ .
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lbw28
l l l.
Interface	Attribute	Value
T{
.BR mbsrtowcs ()
T}	Thread safety	MT-Unsafe race:mbsrtowcs/!ps
.TE

.SH CONFORMING TO
C99.
.SH NOTES
The behavior of
.BR mbsrtowcs ()
depends on the
.B LC_CTYPE
category of the
current locale.
.PP
Passing NULL as
.I ps
is not multithread safe.
.SH SEE ALSO
.BR iconv (3),
.BR mbrtowc (3),
.BR mbsinit (3),
.BR mbsnrtowcs (3),
.BR mbstowcs (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
'\" t -*- coding: UTF-8 -*-
.\" Copyright (c) Bruno Haible <haible@clisp.cons.org>
.\" and Copyright 2014 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_ONEPARA)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"   GNU glibc-2 source code and manual
.\"   Dinkumware C library reference http://www.dinkumware.com/
.\"   OpenGroup's Single UNIX specification http://www.UNIX-systems.org/online.html
.\"   ISO/IEC 9899:1999
.\"
.TH MBSTOWCS 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
mbstowcs \- convert a multibyte string to a wide-character string
.SH SYNOPSIS
.nf
.B #include <stdlib.h>
.sp
.BI "size_t mbstowcs(wchar_t *" dest ", const char *" src ", size_t " n );
.fi
.SH DESCRIPTION
If
.I dest
is not NULL,
the
.BR mbstowcs ()
function converts the
multibyte string
.I src
to a wide-character string starting at
.IR dest .
At most
.I n
wide characters are written to
.IR dest .
The conversion starts
in the initial state.
The conversion can stop for three reasons:
.IP 1. 3
An invalid multibyte sequence has been encountered.
In this case,
.I (size_t)\ \-1
is returned.
.IP 2.
.I n
non-L\(aq\\0\(aq wide characters have been stored at
.IR dest .
In this case, the number of wide characters written to
.I dest
is returned, but the
shift state at this point is lost.
.IP 3.
The multibyte string has been completely converted, including the
terminating null wide character (\(aq\\0\(aq).
In this case, the number of wide characters written to
.IR dest ,
excluding the terminating null wide character, is returned.
.PP
The programmer must ensure that there is room for at least
.I n
wide
characters at
.IR dest .
.PP
If
.IR dest
is NULL,
.I n
is ignored, and the conversion proceeds as
above, except that the converted wide characters are not written out to memory,
and that no length limit exists.
.PP
In order to avoid the case 2 above, the programmer should make sure
.I n
is
greater than or equal to
.IR "mbstowcs(NULL,src,0)+1" .
.SH RETURN VALUE
The
.BR mbstowcs ()
function returns the number of wide characters that make
up the converted part of the wide-character string, not including the
terminating null wide character.
If an invalid multibyte sequence was
encountered,
.I (size_t)\ \-1
is returned.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR mbstowcs ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C99.
.SH NOTES
The behavior of
.BR mbstowcs ()
depends on the
.B LC_CTYPE
category of the
current locale.
.PP
The function
.BR mbsrtowcs (3)
provides a better interface to the same
functionality.
.SH EXAMPLE
The program below illustrates the use of
.BR mbstowcs (),
as well as some of the wide character classification functions.
An example run is the following:
.in +4n
.nf

$ ./t_mbstowcs de_DE.UTF\-8 Grüße!
Length of source string (excluding terminator):
    8 bytes
    6 multibyte characters

Wide character string is: Grüße! (6 characters)
    G alpha upper
    r alpha lower
    ü alpha lower
    ß alpha lower
    e alpha lower
    ! !alpha
.fi
.in
.SS Program source
.nf
#include <locale.h>
#include <wchar.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

int
main(int argc, char *argv[])
{
    size_t mbslen;      /* Number of multibyte characters in source */
    wchar_t *wcs;       /* Pointer to converted wide character string */
    wchar_t *wp;

    if (argc < 3) {
        fprintf(stderr, "Usage: %s <locale> <string>\\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    /* Apply the specified locale */

    if (setlocale(LC_ALL, argv[1]) == NULL) {
        perror("setlocale");
        exit(EXIT_FAILURE);
    }

    /* Calculate the length required to hold argv[2] converted to
       a wide character string */

    mbslen = mbstowcs(NULL, argv[2], 0);
    if (mbslen == (size_t) \-1) {
        perror("mbstowcs");
        exit(EXIT_FAILURE);
    }

    /* Describe the source string to the user */

    printf("Length of source string (excluding terminator):\\n");
    printf("    %zu bytes\\n", strlen(argv[2]));
    printf("    %zu multibyte characters\\n\\n", mbslen);

    /* Allocate wide character string of the desired size.  Add 1
       to allow for terminating null wide character (L\(aq\\0\(aq). */

    wcs = calloc(mbslen + 1, sizeof(wchar_t));
    if (wcs == NULL) {
        perror("calloc");
        exit(EXIT_FAILURE);
    }

    /* Convert the multibyte character string in argv[2] to a
       wide character string */

    if (mbstowcs(wcs, argv[2], mbslen + 1) == (size_t) \-1) {
        perror("mbstowcs");
        exit(EXIT_FAILURE);
    }

    printf("Wide character string is: %ls (%zu characters)\\n",
            wcs, mbslen);

    /* Now do some inspection of the classes of the characters in
       the wide character string */

    for (wp = wcs; *wp != 0; wp++) {
        printf("    %lc ", (wint_t) *wp);

        if (!iswalpha(*wp))
            printf("!");
        printf("alpha ");

        if (iswalpha(*wp)) {
            if (iswupper(*wp))
                printf("upper ");

            if (iswlower(*wp))
                printf("lower ");
        }

        putchar(\(aq\\n\(aq);
    }

    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR mblen (3),
.BR mbsrtowcs (3),
.BR mbtowc (3),
.BR wctomb (3),
.BR wcstombs (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) Bruno Haible <haible@clisp.cons.org>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_ONEPARA)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"   GNU glibc-2 source code and manual
.\"   Dinkumware C library reference http://www.dinkumware.com/
.\"   OpenGroup's Single UNIX specification http://www.UNIX-systems.org/online.html
.\"   ISO/IEC 9899:1999
.\"
.TH MBTOWC 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
mbtowc \- convert a multibyte sequence to a wide character
.SH SYNOPSIS
.nf
.B #include <stdlib.h>
.sp
.BI "int mbtowc(wchar_t *" pwc ", const char *" s ", size_t " n );
.fi
.SH DESCRIPTION
The main case for this function is when
.IR s
is not NULL and
.I pwc
is
not NULL.
In this case, the
.BR mbtowc ()
function inspects at most
.I n
bytes of the multibyte string starting at
.IR s ,
extracts the next complete
multibyte character, converts it to a wide character and stores it at
.IR *pwc .
It updates an internal shift state known only to the
.BR mbtowc ()
function.
If
.I s
does not point to a null byte (\(aq\\0\(aq), it returns the number
of bytes that were consumed from
.IR s ,
otherwise it returns 0.
.PP
If the
.IR n
bytes starting at
.I s
do not contain a complete multibyte
character, or if they contain an invalid multibyte sequence,
.BR mbtowc ()
returns \-1.
This can happen even if
.I n
>=
.IR MB_CUR_MAX ,
if the multibyte string contains redundant shift sequences.
.PP
A different case is when
.IR s
is not NULL but
.I pwc
is NULL.
In this case, the
.BR mbtowc ()
function behaves as above, except that it does not
store the converted wide character in memory.
.PP
A third case is when
.I s
is NULL.
In this case,
.IR pwc
and
.I n
are
ignored.
The
.BR mbtowc ()
function
.\" The Dinkumware doc and the Single UNIX specification say this, but
.\" glibc doesn't implement this.
resets the shift state, only known to this function,
to the initial state, and
returns nonzero if the encoding has nontrivial shift state, or zero if the
encoding is stateless.
.SH RETURN VALUE
If
.I s
is not NULL, the
.BR mbtowc ()
function returns the number of
consumed bytes starting at
.IR s ,
or 0 if
.I s
points to a null byte,
or \-1 upon failure.
.PP
If
.I s
is NULL, the
.BR mbtowc ()
function
returns nonzero if the encoding
has nontrivial shift state, or zero if the encoding is stateless.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR mbtowc ()
T}	Thread safety	MT-Unsafe race
.TE
.SH CONFORMING TO
C99.
.SH NOTES
The behavior of
.BR mbtowc ()
depends on the
.B LC_CTYPE
category of the
current locale.
.PP
This function is not multithread safe.
The function
.BR mbrtowc (3)
provides
a better interface to the same functionality.
.SH SEE ALSO
.BR MB_CUR_MAX (3),
.BR mblen (3),
.BR mbrtowc (3),
.BR mbstowcs (3),
.BR wctomb (3),
.BR wcstombs (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2012 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH MCHECK 3  2015-05-07 "GNU" "Linux Programmer's Manual"
.SH NAME
mcheck, mcheck_check_all, mcheck_pedantic, mprobe \- heap consistency checking
.SH SYNOPSIS
.nf
.B #include <mcheck.h>
.sp
.BI "int mcheck(void (*" abortfunc ")(enum mcheck_status " mstatus ));

.BI "int mcheck_pedantic(void (*" abortfunc ")(enum mcheck_status " mstatus ));

.B void mcheck_check_all(void);

.BI "enum mcheck_status mprobe(void *" ptr );
.fi
.SH DESCRIPTION
The
.BR mcheck ()
function installs a set of debugging hooks for the
.BR malloc (3)
family of memory-allocation functions.
These hooks cause certain consistency checks to be performed
on the state of the heap.
The checks can detect application errors such as freeing a block of memory
more than once or corrupting the bookkeeping data structures
that immediately precede a block of allocated memory.

To be effective, the
.BR mcheck ()
function must be called before the first call to
.BR malloc (3)
or a related function.
In cases where this is difficult to ensure, linking the program with
.IR \-lmcheck
inserts an implicit call to
.BR mcheck ()
(with a NULL argument)
before the first call to a memory-allocation function.

The
.BR mcheck_pedantic ()
function is similar to
.BR mcheck (),
but performs checks on all allocated blocks whenever
one of the memory-allocation functions is called.
This can be very slow!

The
.BR mcheck_check_all ()
function causes an immediate check on all allocated blocks.
This call is effective only if
.BR mcheck ()
is called beforehand.

If the system detects an inconsistency in the heap,
the caller-supplied function pointed to by
.I abortfunc
is invoked with a single argument argument,
.IR mstatus ,
that indicates what type of inconsistency was detected.
If
.I abortfunc
is NULL, a default function prints an error message on
.IR stderr
and calls
.BR abort (3).

The
.BR mprobe ()
function performs a consistency check on
the block of allocated memory pointed to by
.IR ptr .
The
.BR mcheck ()
function should be called beforehand (otherwise
.BR mprobe ()
returns
.BR MCHECK_DISABLED ).

The following list describes the values returned by
.BR mprobe ()
or passed as the
.I mstatus
argument when
.I abortfunc
is invoked:
.TP
.BR MCHECK_DISABLED " (" mprobe "() only)"
.BR mcheck ()
was not called before the first memory allocation function was called.
Consistency checking is not possible.
.TP
.BR MCHECK_OK " (" mprobe "() only)"
No inconsistency detected.
.TP
.B MCHECK_HEAD
Memory preceding an allocated block was clobbered.
.TP
.B MCHECK_TAIL
Memory following an allocated block was clobbered.
.TP
.B
MCHECK_FREE
A block of memory was freed twice.
.SH RETURN VALUE
.BR mcheck ()
and
.BR mcheck_pedantic ()
return 0 on success, or \-1 on error.
.SH VERSIONS
The
.BR mcheck_pedantic ()
and
.BR mcheck_check_all ()
functions are available since glibc 2.2.
The
.BR mcheck ()
and
.BR mprobe ()
functions are present since at least glibc 2.0
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw28 lb lbw21
l l l.
Interface	Attribute	Value
T{
.BR mcheck (),
.BR mcheck_pedantic (),
.br
.BR mcheck_check_all (),
.BR mprobe ()
T}	Thread safety	T{
MT-Unsafe race:mcheck
.br
const:malloc_hooks
T}
.TE

.SH CONFORMING TO
These functions are GNU extensions.
.SH NOTES
Linking a program with
.I \-lmcheck
and using the
.B MALLOC_CHECK_
environment variable (described in
.BR mallopt (3))
cause the same kinds of errors to be detected.
But, using
.B MALLOC_CHECK_
does not require the application to be relinked.
.\" But is MALLOC_CHECK_ slower?
.SH EXAMPLE
The program below calls
.BR mcheck ()
with a NULL argument and then frees the same block of memory twice.
The following shell session demonstrates what happens
when running the program:
.in +4n
.nf

.RB "$" " ./a.out"
About to free

About to free a second time
block freed twice
Aborted (core dumped)
.fi
.in
.SS Program source
\&
.nf
#include <stdlib.h>
#include <stdio.h>
#include <mcheck.h>

int
main(int argc, char *argv[])
{
    char *p;

    if (mcheck(NULL) != 0) {
        fprintf(stderr, "mcheck() failed\\n");

        exit(EXIT_FAILURE);
    }

    p = malloc(1000);

    fprintf(stderr, "About to free\\n");
    free(p);
    fprintf(stderr, "\\nAbout to free a second time\\n");
    free(p);

    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR malloc (3),
.BR mallopt (3),
.BR mtrace (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified Sat Jul 24 18:57:24 1993 by Rik Faith (faith@cs.unc.edu)
.TH MEMCCPY 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
memccpy \- copy memory area
.SH SYNOPSIS
.nf
.B #include <string.h>
.sp
.BI "void *memccpy(void *" dest ", const void *" src ", int " c ", size_t " n );
.fi
.SH DESCRIPTION
The
.BR memccpy ()
function copies no more than
.I n
bytes from
memory area
.I src
to memory area
.IR dest ,
stopping when the
character
.I c
is found.

If the memory areas overlap, the results are undefined.
.SH RETURN VALUE
The
.BR memccpy ()
function returns a pointer to the next character
in
.IR dest
after
.IR c ,
or NULL if
.I c
was not found in the
first
.I n
characters of
.IR src .
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR memccpy ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
SVr4, 4.3BSD, POSIX.1-2001.
.SH SEE ALSO
.BR bcopy (3),
.BR memcpy (3),
.BR memmove (3),
.BR strcpy (3),
.BR strncpy (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\" and Copyright (c) 2008 Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified Mon Apr 12 12:49:57 1993, David Metcalfe
.\" Modified Sat Jul 24 18:56:22 1993, Rik Faith (faith@cs.unc.edu)
.\" Modified Wed Feb 20 21:09:36 2002, Ian Redfern (redferni@logica.com)
.\" 2008-07-09, mtk, add rawmemchr()
.\"
.TH MEMCHR 3  2015-03-02 "" "Linux Programmer's Manual"
.SH NAME
memchr, memrchr, rawmemchr \- scan memory for a character
.SH SYNOPSIS
.nf
.B #include <string.h>

.BI "void *memchr(const void *" s ", int " c ", size_t " n );

.BI "void *memrchr(const void *" s ", int " c ", size_t " n );

.BI "void *rawmemchr(const void *" s ", int " c );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR memrchr (),
.BR rawmemchr ():
_GNU_SOURCE
.SH DESCRIPTION
The
.BR memchr ()
function scans the initial
.I n
bytes of the memory
area pointed to by
.I s
for the first instance of
.IR c .
Both
.I c
and the bytes of the memory area pointed to by
.I s
are interpreted as
.IR "unsigned char" .
.PP
The
.BR memrchr ()
function is like the
.BR memchr ()
function,
except that it searches backward from the end of the
.I n
bytes pointed to by
.I s
instead of forward from the beginning.

The
.BR rawmemchr ()
function is similar to
.BR memchr ():
it assumes (i.e., the programmer knows for certain)
that an instance of
.I c
lies somewhere in the memory area starting at the location pointed to by
.IR s ,
and so performs an optimized search for
.IR c
(i.e., no use of a count argument to limit the range of the search).
If an instance of
.I c
is not found, the results are unpredictable.
The following call is a fast means of locating a string's
terminating null byte:
.in +4n
.nf

char *p = rawmemchr(s,\ \(aq\\0\(aq);
.fi
.in
.SH RETURN VALUE
The
.BR memchr ()
and
.BR memrchr ()
functions return a pointer
to the matching byte or NULL if the character does not occur in
the given memory area.

The
.BR rawmemchr ()
function returns a pointer to the matching byte, if one is found.
If no matching byte is found, the result is unspecified.
.SH VERSIONS
.BR rawmemchr ()
first appeared in glibc in version 2.1.

.BR memrchr ()
first appeared in glibc in version 2.2.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw32 lb lb
l l l.
Interface	Attribute	Value
T{
.BR memchr (),
.BR memrchr (),
.BR rawmemchr ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
The
.BR memchr ()
function conforms to SVr4, 4.3BSD, C89, C99, POSIX.1-2001.

The
.BR memrchr ()
function is a GNU extension, available since glibc 2.1.91.

The
.BR rawmemchr ()
function is a GNU extension, available since glibc 2.1.
.SH SEE ALSO
.BR ffs (3),
.BR index (3),
.BR memmem (3),
.BR rindex (3),
.BR strchr (3),
.BR strpbrk (3),
.BR strrchr (3),
.BR strsep (3),
.BR strspn (3),
.BR strstr (3),
.BR wmemchr (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified Sat Jul 24 18:55:27 1993 by Rik Faith (faith@cs.unc.edu)
.TH MEMCMP 3  2015-03-02 "" "Linux Programmer's Manual"
.SH NAME
memcmp \- compare memory areas
.SH SYNOPSIS
.nf
.B #include <string.h>
.sp
.BI "int memcmp(const void *" s1 ", const void *" s2 ", size_t " n );
.fi
.SH DESCRIPTION
The
.BR memcmp ()
function compares the first \fIn\fP bytes (each interpreted as
.IR "unsigned char" )
of the memory areas \fIs1\fP and \fIs2\fP.
.SH RETURN VALUE
The
.BR memcmp ()
function returns an integer less than, equal to, or
greater than zero if the first \fIn\fP bytes of \fIs1\fP is found,
respectively, to be less than, to match, or be greater than the first
\fIn\fP bytes of \fIs2\fP.

For a nonzero return value, the sign is determined by the sign of
the difference between the first pair of bytes (interpreted as
.IR "unsigned char" )
that differ in
.I s1
and
.IR s2 .

If
.I n
is zero, the return value is zero.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR memcmp ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
SVr4, 4.3BSD, C89, C99, POSIX.1-2001.
.SH NOTES
.PP
Do not use
.BR memcmp ()
to compare security critical data, such as cryptographic secrets,
because the required CPU time depends on the number of equal bytes.
Instead, a function that performs comparisons in constant time is required.
Some operating systems provide such a function (e.g., NetBSD's
.BR consttime_memequal ()),
but no such function is specified in POSIX.
On Linux, it may be necessary to implement such a function oneself.
.SH SEE ALSO
.BR bcmp (3),
.BR strcasecmp (3),
.BR strcmp (3),
.BR strcoll (3),
.BR strncasecmp (3),
.BR strncmp (3),
.BR wmemcmp (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified Sun Jul 25 10:41:09 1993 by Rik Faith (faith@cs.unc.edu)
.TH MEMCPY 3  2015-03-02 "" "Linux Programmer's Manual"
.SH NAME
memcpy \- copy memory area
.SH SYNOPSIS
.nf
.B #include <string.h>
.sp
.BI "void *memcpy(void *" dest ", const void *" src ", size_t " n );
.fi
.SH DESCRIPTION
The
.BR memcpy ()
function copies \fIn\fP bytes from memory area
\fIsrc\fP to memory area \fIdest\fP.
The memory areas must not overlap.
Use
.BR memmove (3)
if the memory areas do overlap.
.SH RETURN VALUE
The
.BR memcpy ()
function returns a pointer to \fIdest\fP.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR memcpy ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
SVr4, 4.3BSD, C89, C99, POSIX.1-2001.
.SH SEE ALSO
.BR bcopy (3),
.BR memccpy (3),
.BR memmove (3),
.BR mempcpy (3),
.BR strcpy (3),
.BR strncpy (3),
.BR wmemcpy (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified Sat Jul 24 18:54:45 1993 by Rik Faith (faith@cs.unc.edu)
.TH MEMFROB 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
memfrob \- frobnicate (encrypt) a memory area
.SH SYNOPSIS
.nf
.BR "#define _GNU_SOURCE" "             /* See feature_test_macros(7) */"
.B #include <string.h>
.sp
.BI "void *memfrob(void *" s ", size_t " n );
.fi
.SH DESCRIPTION
The
.BR memfrob ()
function encrypts the first \fIn\fP bytes of the
memory area \fIs\fP by exclusive-ORing each character with the number
42.
The effect can be reversed by using
.BR memfrob ()
on the
encrypted memory area.
.PP
Note that this function is not a proper encryption routine as the XOR
constant is fixed, and is suitable only for hiding strings.
.SH RETURN VALUE
The
.BR memfrob ()
function returns a pointer to the encrypted memory
area.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR memfrob ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
The
.BR memfrob ()
function is unique to the
GNU C Library.
.SH SEE ALSO
.BR strfry (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     386BSD man pages
.\" Modified Sat Jul 24 18:50:48 1993 by Rik Faith (faith@cs.unc.edu)
.\" Interchanged 'needle' and 'haystack'; added history, aeb, 980113.
.TH MEMMEM 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
memmem \- locate a substring
.SH SYNOPSIS
.nf
.BR "#define _GNU_SOURCE" "         /* See feature_test_macros(7) */"
.B #include <string.h>
.sp
.BI "void *memmem(const void *" haystack ", size_t " haystacklen ,
.BI "             const void *" needle ", size_t " needlelen  );
.fi
.SH DESCRIPTION
The
.BR memmem ()
function finds the start of the first occurrence
of the substring
.IR needle
of length
.I needlelen
in the memory
area
.I haystack
of length
.IR haystacklen .
.SH RETURN VALUE
The
.BR memmem ()
function returns a pointer to the beginning of the
substring, or NULL if the substring is not found.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR memmem ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
This function is a GNU extension.
.SH BUGS
.\" This function was broken in Linux libraries up to and including libc 5.0.9;
.\" there the
.\" .IR needle
.\" and
.\" .I haystack
.\" arguments were interchanged,
.\" and a pointer to the end of the first occurrence of
.\" .I needle
.\" was returned.
.\"
.\" Both old and new libc's have the bug that if
.\" .I needle
.\" is empty,
.\" .I haystack\-1
.\" (instead of
.\" .IR haystack )
.\" is returned.
In glibc 2.0, if
.I needle
is empty,
.BR memmem ()
returns a pointer to the last byte of
.IR haystack .
This is fixed in glibc 2.1.
.SH SEE ALSO
.BR strstr (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified Sat Jul 24 18:49:59 1993 by Rik Faith (faith@cs.unc.edu)
.TH MEMMOVE 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
memmove \- copy memory area
.SH SYNOPSIS
.nf
.B #include <string.h>
.sp
.BI "void *memmove(void *" dest ", const void *" src ", size_t " n );
.fi
.SH DESCRIPTION
The
.BR memmove ()
function copies
.I n
bytes from memory area
.I src
to memory area
.IR dest .
The memory areas may overlap: copying takes place as though
the bytes in
.I src
are first copied into a temporary array that does not overlap
.I src
or
.IR dest ,
and the bytes are then copied from the temporary array to
.IR dest .
.SH RETURN VALUE
The
.BR memmove ()
function returns a pointer to
.IR dest .
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR memmove ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
SVr4, 4.3BSD, C89, C99, POSIX.1-2001.
.SH SEE ALSO
.BR bcopy (3),
.BR memccpy (3),
.BR memcpy (3),
.BR strcpy (3),
.BR strncpy (3),
.BR wmemmove (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 2002 Walter Harms (walter.harms@informatik.uni-oldenburg.de)
.\"
.\" %%%LICENSE_START(GPL_NOVERSION_ONELINE)
.\" Distributed under GPL
.\" %%%LICENSE_END
.\"
.\" Heavily based on glibc infopages, copyright Free Software Foundation
.\"
.\" aeb, 2003, polished a little
.TH MEMPCPY 3 2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
mempcpy, wmempcpy  \- copy memory area
.SH SYNOPSIS
.nf
.BR "#define _GNU_SOURCE" "         /* See feature_test_macros(7) */"
.br
.B #include <string.h>
.sp
.BI "void *mempcpy(void *" dest ", const void *" src ", size_t " n );
.sp
.BR "#define _GNU_SOURCE" "         /* See feature_test_macros(7) */"
.br
.B #include <wchar.h>
.sp
.BI "wchar_t *wmempcpy(wchar_t *" dest ", const wchar_t *" src ", size_t " n );
.fi
.SH DESCRIPTION
The
.BR mempcpy ()
function is nearly identical to the
.BR memcpy (3)
function.
It copies
.I n
bytes from the object beginning at
.I src
into the object pointed to by
.IR dest .
But instead of returning the value of
.I dest
it returns a pointer to the byte following the last written byte.
.PP
This function is useful in situations where a number of objects
shall be copied to consecutive memory positions.
.PP
The
.BR wmempcpy ()
function is identical but takes
.I wchar_t
type arguments and copies
.I n
wide characters.
.SH RETURN VALUE
.I dest
+
.IR n .
.SH VERSIONS
.BR mempcpy ()
first appeared in glibc in version 2.1.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw21 lb lb
l l l.
Interface	Attribute	Value
T{
.BR mempcpy (),
.BR wmempcpy ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
This function is a GNU extension.
.SH EXAMPLE
.nf
void *
combine(void *o1, size_t s1, void *o2, size_t s2)
{
    void *result = malloc(s1 + s2);
    if (result != NULL)
        mempcpy(mempcpy(result, o1, s1), o2, s2);
    return result;
}
.fi
.SH SEE ALSO
.BR memccpy (3),
.BR memcpy (3),
.BR memmove (3),
.BR wmemcpy (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified Sat Jul 24 18:49:23 1993 by Rik Faith (faith@cs.unc.edu)
.TH MEMSET 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
memset \- fill memory with a constant byte
.SH SYNOPSIS
.nf
.B #include <string.h>
.sp
.BI "void *memset(void *" s ", int " c ", size_t " n );
.fi
.SH DESCRIPTION
The
.BR memset ()
function fills the first
.I n
bytes of the
memory area pointed to by
.I s
with the constant byte
.IR c .
.SH RETURN VALUE
The
.BR memset ()
function returns a pointer to the memory area
.IR s .
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR memset ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
SVr4, 4.3BSD, C89, C99, POSIX.1-2001.
.SH SEE ALSO
.BR bzero (3),
.BR swab (3),
.BR wmemset (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 2001 John Levon <moz@compsoc.man.ac.uk>
.\" Based on mkstemp(3), Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\" and GNU libc documentation
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.TH MKDTEMP 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
mkdtemp \- create a unique temporary directory
.SH SYNOPSIS
.nf
.B #include <stdlib.h>
.sp
.BI "char *mkdtemp(char *" template );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR mkdtemp ():
.br
.ad l
.RS 4
.PD 0
_BSD_SOURCE
.br
|| /* Since glibc 2.10: */
.RS 4
(_POSIX_C_SOURCE\ >=\ 200809L || _XOPEN_SOURCE\ >=\ 700)
.ad
.PD
.RE
.RE
.SH DESCRIPTION
The
.BR mkdtemp ()
function generates a uniquely named temporary
directory from \fItemplate\fP.
The last six characters of \fItemplate\fP
must be XXXXXX and these are replaced with a string that makes the
directory name unique.
The directory is then created with
permissions 0700.
Since it will be modified,
.I template
must not be a string constant, but should be declared as a character array.
.SH RETURN VALUE
The
.BR mkdtemp ()
function returns a pointer to the modified template
string on success, and NULL on failure, in which case
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EINVAL
The last six characters of \fItemplate\fP were not XXXXXX.
Now \fItemplate\fP is unchanged.
.PP
Also see
.BR mkdir (2)
for other possible values for \fIerrno\fP.
.SH VERSIONS
Available since glibc 2.1.91.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR mkdtemp ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
POSIX.1-2008.
This function is present on the BSDs.
.\" As at 2006, this function is being considered for a revision of POSIX.1
.\" Also in NetBSD 1.4.
.SH SEE ALSO
.BR mkdir (2),
.BR mkstemp (3),
.BR mktemp (3),
.BR tempnam (3),
.BR tmpfile (3),
.BR tmpnam (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" This manpage is Copyright (C) 1995 James R. Van Zandt <jrv@vanzandt.mv.com>
.\" and Copyright (C) 2006, 2014 Michael Kerrisk
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" changed section from 2 to 3, aeb, 950919
.\"
.TH MKFIFO 3 2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
mkfifo, mkfifoat \- make a FIFO special file (a named pipe)
.SH SYNOPSIS
.nf
.B #include <sys/types.h>
.B #include <sys/stat.h>
.sp
.BI "int mkfifo(const char *" pathname ", mode_t " mode );
.sp
.BR "#include <fcntl.h>           " "/* Definition of AT_* constants */"
.B #include <sys/stat.h>
.sp
.BI "int mkfifoat(int " dirfd ", const char *" pathname ", mode_t " mode );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR mkfifoat ():
.PD 0
.ad l
.RS 4
.TP 4
Since glibc 2.10:
_XOPEN_SOURCE\ >=\ 700 || _POSIX_C_SOURCE\ >=\ 200809L
.TP
Before glibc 2.10:
_ATFILE_SOURCE
.RE
.ad
.PD
.SH DESCRIPTION
.BR mkfifo ()
makes a FIFO special file with name \fIpathname\fP.
\fImode\fP specifies the FIFO's permissions.
It is modified by the
process's \fBumask\fP in the usual way: the permissions of the created
file are \fB(\fP\fImode\fP\fB & ~umask)\fP.
.PP
A FIFO special file is similar to a pipe, except that it is created
in a different way.
Instead of being an anonymous communications
channel, a FIFO special file is entered into the filesystem by
calling
.BR mkfifo ().
.PP
Once you have created a FIFO special file in this way, any process can
open it for reading or writing, in the same way as an ordinary file.
However, it has to be open at both ends simultaneously before you can
proceed to do any input or output operations on it.
Opening a FIFO for reading normally blocks until some
other process opens the same FIFO for writing, and vice versa.
See
.BR fifo (7)
for nonblocking handling of FIFO special files.
.SS mkfifoat()
The
.BR mkfifoat ()
function operates in exactly the same way as
.BR mkfifo (),
except for the differences described here.

If the pathname given in
.I pathname
is relative, then it is interpreted relative to the directory
referred to by the file descriptor
.I dirfd
(rather than relative to the current working directory of
the calling process, as is done by
.BR mkfifo ()
for a relative pathname).

If
.I pathname
is relative and
.I dirfd
is the special value
.BR AT_FDCWD ,
then
.I pathname
is interpreted relative to the current working
directory of the calling process (like
.BR mkfifo ()).

If
.I pathname
is absolute, then
.I dirfd
is ignored.
.SH RETURN VALUE
On success
.BR mkfifo ()
and
.BR mkfifoat ()
return 0.
In the case of an error, \-1 is returned (in which case, \fIerrno\fP
is set appropriately).
.SH ERRORS
.TP
.B EACCES
One of the directories in \fIpathname\fP did not allow search
(execute) permission.
.TP
.B EDQUOT
The user's quota of disk blocks or inodes on the filesystem has been
exhausted.
.TP
.B EEXIST
\fIpathname\fP already exists.
This includes the case where
.I pathname
is a symbolic link, dangling or not.
.TP
.B ENAMETOOLONG
Either the total length of \fIpathname\fP is greater than
\fBPATH_MAX\fP, or an individual filename component has a length
greater than \fBNAME_MAX\fP.
In the GNU system, there is no imposed
limit on overall filename length, but some filesystems may place
limits on the length of a component.
.TP
.B ENOENT
A directory component in \fIpathname\fP does not exist or is a
dangling symbolic link.
.TP
.B ENOSPC
The directory or filesystem has no room for the new file.
.TP
.B ENOTDIR
A component used as a directory in \fIpathname\fP is not, in fact, a
directory.
.TP
.B EROFS
\fIpathname\fP refers to a read-only filesystem.
.PP
The following additional errors can occur for
.BR mkfifoat ():
.TP
.B EBADF
.I dirfd
is not a valid file descriptor.
.TP
.B ENOTDIR
.I pathname
is a relative path and
.I dirfd
is a file descriptor referring to a file other than a directory.
.SH VERSIONS
.BR mkfifoat ()
was added to glibc in version 2.4.
It is implemented using
.BR mknodat (2),
available on Linux since kernel 2.6.16.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw20 lb lb
l l l.
Interface	Attribute	Value
T{
.BR mkfifo (),
.BR mkfifoat ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
.BR mkfifo ():
POSIX.1-2001, POSIX.1-2008.

.BR mkfifoat ():
POSIX.1-2008.
.SH SEE ALSO
.BR mkfifo (1),
.BR close (2),
.BR open (2),
.BR read (2),
.BR stat (2),
.BR umask (2),
.BR write (2),
.BR fifo (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\" and Copyright (C) 2008, Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified Sat Jul 24 18:48:48 1993 by Rik Faith (faith@cs.unc.edu)
.\" Modified 980310, aeb
.\" Modified 990328, aeb
.\" 2008-06-19, mtk, Added mkostemp(); various other changes
.\"
.TH MKSTEMP 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
mkstemp, mkostemp, mkstemps, mkostemps \- create a unique temporary file
.SH SYNOPSIS
.nf
.B #include <stdlib.h>
.sp
.BI "int mkstemp(char *" template );
.sp
.BI "int mkostemp(char *" template ", int " flags );
.sp
.BI "int mkstemps(char *" template ", int " suffixlen );
.sp
.BI "int mkostemps(char *" template ", int " suffixlen ", int " flags );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR mkstemp ():
.ad l
.RS 4
.PD 0
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE\ >=\ 500 ||
_XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED
.br
|| /* Since glibc 2.12: */ _POSIX_C_SOURCE\ >=\ 200112L
.PD
.RE
.ad b
.PP
.BR mkostemp ():
_GNU_SOURCE
.br
.BR mkstemps ():
_BSD_SOURCE || _SVID_SOURCE
.br
.BR mkostemps ():
_GNU_SOURCE
.SH DESCRIPTION
The
.BR mkstemp ()
function generates a unique temporary filename from
.IR template ,
creates and opens the file,
and returns an open file descriptor for the file.

The last six characters of
.I template
must be "XXXXXX" and these are replaced with a string that makes the
filename unique.
Since it will be modified,
.I template
must not be a string constant, but should be declared as a character array.

The file is created with
permissions 0600, that is, read plus write for owner only.
The returned file descriptor provides both read and write access to the file.
The file is opened with the
.BR open (2)
.B O_EXCL
flag, guaranteeing that the caller is the process that creates the file.

The
.BR mkostemp ()
function is like
.BR mkstemp (),
with the difference that the following bits\(emwith the same meaning as for
.BR open (2)\(emmay
be specified in
.IR flags :
.BR O_APPEND ,
.BR O_CLOEXEC ,
and
.BR O_SYNC .
Note that when creating the file,
.BR mkostemp ()
includes the values
.BR O_RDWR ,
.BR O_CREAT ,
and
.BR O_EXCL
in the
.I flags
argument given to
.BR open (2);
including these values in the
.I flags
argument given to
.BR mkostemp ()
is unnecessary, and produces errors on some
.\" Reportedly, FreeBSD
systems.

The
.BR mkstemps ()
function is like
.BR mkstemp (),
except that the string in
.I template
contains a suffix of
.I suffixlen
characters.
Thus,
.I template
is of the form
.IR "prefixXXXXXXsuffix" ,
and the string XXXXXX is modified as for
.BR mkstemp ().

The
.BR mkostemps ()
function is to
.BR mkstemps ()
as
.BR mkostemp ()
is to
.BR mkstemp ().
.SH RETURN VALUE
On success, these functions return the file descriptor
of the temporary file.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EEXIST
Could not create a unique temporary filename.
Now the contents of \fItemplate\fP are undefined.
.TP
.B EINVAL
For
.BR mkstemp ()
and
.BR mkostemp ():
The last six characters of \fItemplate\fP were not XXXXXX;
now \fItemplate\fP is unchanged.
.sp
For
.BR mkstemps ()
and
.BR mkostemps ():
.I template
is less than
.I "(6 + suffixlen)"
characters long, or the last 6 characters before the suffix in
.I template
were not XXXXXX.
.PP
These functions may also fail with any of the errors described for
.BR open (2).
.SH VERSIONS
.BR mkostemp ()
is available since glibc 2.7.
.BR mkstemps ()
and
.BR mkostemps ()
are available since glibc 2.11.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw23 lb lb
l l l.
Interface	Attribute	Value
T{
.BR mkstemp (),
.BR mkostemp (),
.br
.BR mkstemps (),
.BR mkostemps ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
.BR mkstemp ():
4.3BSD, POSIX.1-2001.

.BR mkstemps ():
unstandardized, but appears on several other systems.
.\" mkstemps() appears to be at least on the BSDs, Mac OS X, Solaris,
.\" and Tru64.

.BR mkostemp ()
and
.BR mkostemps ():
are glibc extensions.
.SH NOTES
In glibc versions 2.06 and earlier, the file is created with permissions 0666,
that is, read and write for all users.
This old behavior may be
a security risk, especially since other UNIX flavors use 0600,
and somebody might overlook this detail when porting programs.
POSIX.1-2008 adds a requirement that the file be created with mode 0600.

More generally, the POSIX specification of
.BR mkstemp ()
does not say anything
about file modes, so the application should make sure its
file mode creation mask (see
.BR umask (2))
is set appropriately before calling
.BR mkstemp ()
(and
.BR mkostemp ()).
.\"
.\" The prototype for
.\" .BR mktemp ()
.\" is in
.\" .I <unistd.h>
.\" for libc4, libc5, glibc1; glibc2 follows POSIX.1 and has the prototype in
.\" .IR <stdlib.h> .
.SH SEE ALSO
.BR mkdtemp (3),
.BR mktemp (3),
.BR tempnam (3),
.BR tmpfile (3),
.BR tmpnam (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified Sat Jul 24 18:48:06 1993 by Rik Faith (faith@cs.unc.edu)
.\" Modified Fri Jun 23 01:26:34 1995 by Andries Brouwer (aeb@cwi.nl)
.\" (prompted by Scott Burkett <scottb@IntNet.net>)
.\" Modified Sun Mar 28 23:44:38 1999 by Andries Brouwer (aeb@cwi.nl)
.\"
.TH MKTEMP 3  2015-02-21 "GNU" "Linux Programmer's Manual"
.SH NAME
mktemp \- make a unique temporary filename
.SH SYNOPSIS
.nf
.B #include <stdlib.h>
.sp
.BI "char *mktemp(char *" template );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR mktemp ():
.ad l
.PD 0
.RS 4
.TP 4
Since glibc 2.12:
_BSD_SOURCE || _SVID_SOURCE ||
    (_XOPEN_SOURCE\ >=\ 500 ||
         _XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED) &&
    !(_POSIX_C_SOURCE\ >=\ 200112L || _XOPEN_SOURCE\ >=\ 600)
.TP
Before glibc 2.12:
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE\ >=\ 500 ||
_XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED
.RE
.PD
.ad b
.SH DESCRIPTION
.IR "Never use this function" ;
see BUGS.

The
.BR mktemp ()
function generates a unique temporary filename
from \fItemplate\fP.
The last six characters of \fItemplate\fP must
be XXXXXX and these are replaced with a string that makes the
filename unique.
Since it will be modified,
.I template
must not be a string constant, but should be declared as a character array.
.SH RETURN VALUE
The
.BR mktemp ()
function always returns \fItemplate\fP.
If a unique name was created, the last six bytes of \fItemplate\fP will
have been modified in such a way that the resulting name is unique
(i.e., does not exist already)
If a unique name could not be created,
\fItemplate\fP is made an empty string, and
.I errno
is set to indicate the error.
.SH ERRORS
.TP
.B EINVAL
The last six characters of \fItemplate\fP were not XXXXXX.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR mktemp ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
4.3BSD, POSIX.1-2001.
POSIX.1-2008 removes the specification of
.BR mktemp ().
.\" .SH NOTES
.\" The prototype is in
.\" .I <unistd.h>
.\" for libc4, libc5, glibc1; glibc2 follows the Single UNIX Specification
.\" and has the prototype in
.\" .IR <stdlib.h> .
.SH BUGS
Never use
.BR mktemp ().
Some implementations follow 4.3BSD
and replace XXXXXX by the current process ID and a single letter,
so that at most 26 different names can be returned.
Since on the one hand the names are easy to guess, and on the other
hand there is a race between testing whether the name exists and
opening the file, every use of
.BR mktemp ()
is a security risk.
The race is avoided by
.BR mkstemp (3).
.SH SEE ALSO
.BR mkstemp (3),
.BR tempnam (3),
.BR tmpfile (3),
.BR tmpnam (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified 1993-07-24 by Rik Faith (faith@cs.unc.edu)
.\" Modified 2002-07-27 by Walter Harms
.\" 	(walter.harms@informatik.uni-oldenburg.de)
.\"
.TH MODF 3  2015-04-19 ""  "Linux Programmer's Manual"
.SH NAME
modf, modff, modfl \- extract signed integral and fractional values from
floating-point number
.SH SYNOPSIS
.nf
.B #include <math.h>
.sp
.BI "double modf(double " x ", double *" iptr );
.br
.BI "float modff(float " x ", float *" iptr );
.br
.BI "long double modfl(long double " x ", long double *" iptr );
.fi
.sp
Link with \fI\-lm\fP.
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR modf (),
.BR modfl ():
.RS 4
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE\ >=\ 600 || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.ad
.SH DESCRIPTION
These functions break the argument
.I x
into an integral
part and a fractional part, each of which has the same sign as
.IR x .
The integral part is stored in the location pointed to by
.IR iptr .
.SH RETURN VALUE
These functions return the fractional part of
.IR x .

If
.I x
is a NaN, a NaN is returned, and
.IR *iptr
is set to a NaN.

If
.I x
is positive infinity (negative infinity), +0 (\-0) is returned, and
.IR *iptr
is set to positive infinity (negative infinity).
.SH ERRORS
No errors occur.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw24 lb lb
l l l.
Interface	Attribute	Value
T{
.BR modf (),
.BR modff (),
.BR modfl ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C99, POSIX.1-2001, POSIX.1-2008.

The variant returning
.I double
also conforms to
SVr4, 4.3BSD, C89.
.SH SEE ALSO
.BR frexp (3),
.BR ldexp (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1990, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" %%%LICENSE_START(BSD_4_CLAUSE_UCB)
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\" %%%LICENSE_END
.\"
.\"	@(#)mpool.3	8.1 (Berkeley) 6/4/93
.\"
.TH MPOOL 3 2012-04-26 "" "Linux Programmer's Manual"
.UC 7
.SH NAME
mpool \- shared memory buffer pool
.SH SYNOPSIS
.nf
.B #include <db.h>
.B #include <mpool.h>
.sp
.BI "MPOOL *mpool_open(DBT *" key ", int " fd ", pgno_t " pagesize \
", pgno_t " maxcache );
.sp
.BI "void mpool_filter(MPOOL *" mp ", void (*pgin)(void *, pgno_t, void *),"
.BI "                  void (*" pgout ")(void *, pgno_t, void *),"
.BI "                  void *" pgcookie );
.sp
.BI "void *mpool_new(MPOOL *" mp ", pgno_t *" pgnoaddr );
.sp
.BI "void *mpool_get(MPOOL *" mp ", pgno_t " pgno ", unsigned int " flags );
.sp
.BI "int mpool_put(MPOOL *" mp ", void *" pgaddr ", unsigned int " flags );
.sp
.BI "int mpool_sync(MPOOL *" mp );
.sp
.BI "int mpool_close(MPOOL *" mp );
.fi
.SH DESCRIPTION
.IR "Note well" :
This page documents interfaces provided in glibc up until version 2.1.
Since version 2.2, glibc no longer provides these interfaces.
Probably, you are looking for the APIs provided by the
.I libdb
library instead.

.I Mpool
is the library interface intended to provide page oriented buffer management
of files.
The buffers may be shared between processes.
.PP
The function
.BR mpool_open ()
initializes a memory pool.
The
.I key
argument is the byte string used to negotiate between multiple
processes wishing to share buffers.
If the file buffers are mapped in shared memory, all processes using
the same key will share the buffers.
If
.I key
is NULL, the buffers are mapped into private memory.
The
.I fd
argument is a file descriptor for the underlying file, which must be seekable.
If
.I key
is non-NULL and matches a file already being mapped, the
.I fd
argument is ignored.
.PP
The
.I pagesize
argument is the size, in bytes, of the pages into which the file is broken up.
The
.I maxcache
argument is the maximum number of pages from the underlying file to cache
at any one time.
This value is not relative to the number of processes which share a file's
buffers, but will be the largest value specified by any of the processes
sharing the file.
.PP
The
.BR mpool_filter ()
function is intended to make transparent input and output processing of the
pages possible.
If the
.I pgin
function is specified, it is called each time a buffer is read into the memory
pool from the backing file.
If the
.I pgout
function is specified, it is called each time a buffer is written into the
backing file.
Both functions are called with the
.I pgcookie
pointer, the page number and a pointer to the page to being read or written.
.PP
The function
.BR mpool_new ()
takes an
.I MPOOL
pointer and an address as arguments.
If a new page can be allocated, a pointer to the page is returned and
the page number is stored into the
.I pgnoaddr
address.
Otherwise, NULL is returned and
.I errno
is set.
.PP
The function
.BR mpool_get ()
takes an
.I MPOOL
pointer and a page number as arguments.
If the page exists, a pointer to the page is returned.
Otherwise, NULL is returned and
.I errno
is set.
The
.I flags
argument is not currently used.
.PP
The function
.BR mpool_put ()
unpins the page referenced by
.IR pgaddr .
.I pgaddr
must be an address previously returned by
.BR mpool_get ()
or
.BR mpool_new ().
The flag value is specified by ORing
any of the following values:
.TP
.B MPOOL_DIRTY
The page has been modified and needs to be written to the backing file.
.PP
.BR mpool_put ()
returns 0 on success and \-1 if an error occurs.
.PP
The function
.BR mpool_sync ()
writes all modified pages associated with the
.I MPOOL
pointer to the
backing file.
.BR mpool_sync ()
returns 0 on success and \-1 if an error occurs.
.PP
The
.BR mpool_close ()
function free's up any allocated memory associated with the memory pool
cookie.
Modified pages are
.B not
written to the backing file.
.BR mpool_close ()
returns 0 on success and \-1 if an error occurs.
.SH ERRORS
The
.BR mpool_open ()
function may fail and set
.I errno
for any of the errors specified for the library routine
.BR malloc (3).
.PP
The
.BR mpool_get ()
function may fail and set
.I errno
for the following:
.TP 15
.B EINVAL
The requested record doesn't exist.
.PP
The
.BR mpool_new ()
and
.BR mpool_get ()
functions may fail and set
.I errno
for any of the errors specified for the library routines
.BR read (2),
.BR write (2),
and
.BR malloc (3).
.PP
The
.BR mpool_sync ()
function may fail and set
.I errno
for any of the errors specified for the library routine
.BR write (2).
.PP
The
.BR mpool_close ()
function may fail and set
.I errno
for any of the errors specified for the library routine
.BR free (3).
.SH CONFORMING TO
Not in POSIX.1-2001.
Present on the BSDs.
.SH SEE ALSO
.BR btree (3),
.BR dbopen (3),
.BR hash (3),
.BR recno (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
'\" t
.\" Copyright (C) 2006 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH MQ_CLOSE 3 2015-03-02 "Linux" "Linux Programmer's Manual"
.SH NAME
mq_close \- close a message queue descriptor
.SH SYNOPSIS
.nf
.B #include <mqueue.h>
.sp
.BI "int mq_close(mqd_t " mqdes );
.fi
.sp
Link with \fI\-lrt\fP.
.SH DESCRIPTION
.BR mq_close ()
closes the message queue descriptor
.IR mqdes .

If the calling process has attached a notification request
to this message queue via
.IR mqdes ,
then this request is removed,
and another process can now attach a notification request.
.SH RETURN VALUE
On success
.BR mq_close ()
returns 0; on error, \-1 is returned, with
.I errno
set to indicate the error.
.SH ERRORS
.TP
.B EBADF
The descriptor specified in
.I mqdes
is invalid.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR mq_close ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
POSIX.1-2001.
.SH NOTES
All open message queues are automatically closed on process termination,
or upon
.BR execve (2).
.SH SEE ALSO
.BR mq_getattr (3),
.BR mq_notify (3),
.BR mq_open (3),
.BR mq_receive (3),
.BR mq_send (3),
.BR mq_unlink (3),
.BR mq_overview (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
'\" t
.\" Copyright (C) 2006 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH MQ_GETATTR 3 2015-03-02 "Linux" "Linux Programmer's Manual"
.SH NAME
mq_getattr, mq_setattr \- get/set message queue attributes
.SH SYNOPSIS
.nf
.B #include <mqueue.h>
.sp
.BI "int mq_getattr(mqd_t " mqdes ", struct mq_attr *" attr );

.BI "int mq_setattr(mqd_t " mqdes ", const struct mq_attr *" newattr ","
.BI "                 struct mq_attr *" oldattr );
.fi
.sp
Link with \fI\-lrt\fP.
.SH DESCRIPTION
.BR mq_getattr ()
and
.BR mq_setattr ()
respectively retrieve and modify attributes of the message queue
referred to by the descriptor
.IR mqdes .

.BR mq_getattr ()
returns an
.I mq_attr
structure in the buffer pointed by
.IR attr .
This structure is defined as:
.in +4n
.nf

struct mq_attr {
    long mq_flags;       /* Flags: 0 or O_NONBLOCK */
    long mq_maxmsg;      /* Max. # of messages on queue */
    long mq_msgsize;     /* Max. message size (bytes) */
    long mq_curmsgs;     /* # of messages currently in queue */
};
.fi
.in
.PP
The
.I mq_flags
field contains flags associated with the open message queue description.
This field is initialized when the queue is created by
.BR mq_open (3).
The only flag that can appear in this field is
.BR O_NONBLOCK .

The
.I mq_maxmsg
and
.I mq_msgsize
fields are set when the message queue is created by
.BR mq_open (3).
The
.I mq_maxmsg
field is an upper limit on the number of messages
that may be placed on the queue using
.BR mq_send (3).
The
.I mq_msgsize
field is an upper limit on the size of messages
that may be placed on the queue.
Both of these fields must have a value greater than zero.
Two
.I /proc
files that place ceilings on the values for these fields are described in
.BR mq_overview (7).

The
.I mq_curmsgs
field returns the number of messages currently held in the queue.

.BR mq_setattr ()
sets message queue attributes using information supplied in the
.I mq_attr
structure pointed to by
.IR newattr .
The only attribute that can be modified is the setting of the
.B O_NONBLOCK
flag in
.IR mq_flags .
The other fields in
.I newattr
are ignored.
If the
.I oldattr
field is not NULL,
then the buffer that it points to is used to return an
.I mq_attr
structure that contains the same information that is returned by
.BR mq_getattr ().
.SH RETURN VALUE
On success
.BR mq_getattr ()
and
.BR mq_setattr ()
return 0; on error, \-1 is returned, with
.I errno
set to indicate the error.
.SH ERRORS
.TP
.B EBADF
The descriptor specified in
.I mqdes
is invalid.
.TP
.B EINVAL
.I newattr\->mq_flags
contained set bits other than
.BR O_NONBLOCK .
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw26 lb lb
l l l.
Interface	Attribute	Value
T{
.BR mq_getattr (),
.BR mq_setattr ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
POSIX.1-2001.
.SH NOTES
On Linux,
.BR mq_getattr ()
and
.BR mq_setattr ()
are library functions layered on top of the
.BR mq_getsetattr (2)
system call.
.SH EXAMPLE
The program below can be used to show the default
.I mq_maxmsg
and
.I mq_msgsize
values that are assigned to a message queue that is created with a call to
.BR mq_open (3)
in which the
.I attr
argument is NULL.
Here is an example run of the program:

.in +4n
.nf
$ \fB./a.out /testq\fP
Maximum # of messages on queue:   10
Maximum message size:             8192
.fi
.in

Since Linux 3.5, the following
.I /proc
files (described in
.BR mq_overview (7))
can be used to control the defaults:

.in +4n
.nf
$ \fBuname -sr\fP
Linux 3.8.0
$ \fBcat /proc/sys/fs/mqueue/msg_default\fP
10
$ \fBcat /proc/sys/fs/mqueue/msgsize_default\fP
8192
.fi
.in
.SS Program source
\&
.nf
#include <mqueue.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

#define errExit(msg)    do { perror(msg); exit(EXIT_FAILURE); \\
                        } while (0)

int
main(int argc, char *argv[])
{
    mqd_t mqd;
    struct mq_attr attr;

    if (argc != 2) {
        fprintf(stderr, "Usage: %s mq\-name\\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    mqd = mq_open(argv[1], O_CREAT | O_EXCL, S_IRUSR | S_IWUSR, NULL);
    if (mqd == (mqd_t) \-1)
        errExit("mq_open");

    if (mq_getattr(mqd, &attr) == \-1)
        errExit("mq_getattr");

    printf("Maximum # of messages on queue:   %ld\\n", attr.mq_maxmsg);
    printf("Maximum message size:             %ld\\n", attr.mq_msgsize);

    if (mq_unlink(argv[1]) == \-1)
        errExit("mq_unlink");

    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR mq_close (3),
.BR mq_notify (3),
.BR mq_open (3),
.BR mq_receive (3),
.BR mq_send (3),
.BR mq_unlink (3),
.BR mq_overview (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
'\" t
.\" Copyright (C) 2006 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH MQ_NOTIFY 3 2015-04-19 "Linux" "Linux Programmer's Manual"
.SH NAME
mq_notify \- register for notification when a message is available
.SH SYNOPSIS
.nf
.B #include <mqueue.h>
.sp
.BI "int mq_notify(mqd_t " mqdes ", const struct sigevent *" sevp );
.fi
.sp
Link with \fI\-lrt\fP.
.SH DESCRIPTION
.BR mq_notify ()
allows the calling process to register or unregister for delivery of
an asynchronous notification when a new message arrives on
the empty message queue referred to by the descriptor
.IR mqdes .

The
.I sevp
argument is a pointer to a
.I sigevent
structure.
For the definition and general details of this structure, see
.BR sigevent (7).
.PP
If
.I sevp
is a non-null pointer, then
.BR mq_notify ()
registers the calling process to receive message notification.
The
.I sigev_notify
field of the
.I sigevent
structure to which
.I sevp
points specifies how notification is to be performed.
This field has one of the following values:
.TP
.B SIGEV_NONE
A "null" notification: the calling process is registered as the target
for notification, but when a message arrives, no notification is sent.
.\" When is SIGEV_NONE useful?
.TP
.B SIGEV_SIGNAL
Notify the process by sending the signal specified in
.IR sigev_signo .
See
.BR sigevent (7)
for general details.
The
.I si_code
field of the
.I siginfo_t
structure will be set to
.BR SI_MESGQ .
In addition,
.\" I don't know of other implementations that set
.\" si_pid and si_uid -- MTK
.I si_pid
will be set to the PID of the process that sent the message, and
.I si_uid
will be set to the real user ID of the sending process.
.TP
.B SIGEV_THREAD
Upon message delivery, invoke
.I sigev_notify_function
as if it were the start function of a new thread.
See
.BR sigevent (7)
for details.
.PP
Only one process can be registered to receive notification
from a message queue.

If
.I sevp
is NULL, and the calling process is currently registered to receive
notifications for this message queue, then the registration is removed;
another process can then register to receive a message notification
for this queue.

Message notification occurs only when a new message arrives and
the queue was previously empty.
If the queue was not empty at the time
.BR mq_notify ()
was called, then a notification will occur only after
the queue is emptied and a new message arrives.

If another process or thread is waiting to read a message
from an empty queue using
.BR mq_receive (3),
then any message notification registration is ignored:
the message is delivered to the process or thread calling
.BR mq_receive (3),
and the message notification registration remains in effect.

Notification occurs once: after a notification is delivered,
the notification registration is removed,
and another process can register for message notification.
If the notified process wishes to receive the next notification,
it can use
.BR mq_notify ()
to request a further notification.
This should be done before emptying all unread messages from the queue.
(Placing the queue in nonblocking mode is useful for emptying
the queue of messages without blocking once it is empty.)
.SH RETURN VALUE
On success
.BR mq_notify ()
returns 0; on error, \-1 is returned, with
.I errno
set to indicate the error.
.SH ERRORS
.TP
.B EBADF
The descriptor specified in
.I mqdes
is invalid.
.TP
.B EBUSY
Another process has already registered to receive notification
for this message queue.
.TP
.B EINVAL
.I sevp\->sigev_notify
is not one of the permitted values; or
.I sevp\->sigev_notify
is
.B SIGEV_SIGNAL
and
.I sevp\->sigev_signo
is not a valid signal number.
.TP
.B ENOMEM
Insufficient memory.
.PP
POSIX.1-2008 says that an implementation
.I may
generate an
.B EINVAL
.\" Linux does not do this
error if
.I sevp
is NULL, and the caller is not currently registered to receive
notifications for the queue
.IR mqdes .
.SH CONFORMING TO
POSIX.1-2001.
.SH NOTES
.\"
.SS C library/kernel ABI differences
In the glibc implementation, the
.BR mq_notify ()
library function is implemented on top of the system call of the same name.
When
.I sevp
is NULL, or specifies a notification mechanism other than
.BR SIGEV_THREAD ,
the library function directly invokes the system call.
For
.BR SIGEV_THREAD ,
much of the implementation resides within the library,
rather than the kernel.
(This is necessarily so,
since the thread involved in handling the notification is one
that must be managed by the C library POSIX threads implementation.)
The implementation involves the use of a raw
.BR netlink (7)
socket and creates a new thread for each notification that is
delivered to the process.
.SH EXAMPLE
The following program registers a notification request for the
message queue named in its command-line argument.
Notification is performed by creating a thread.
The thread executes a function which reads one message from the
queue and then terminates the process.
.SS Program source
.nf
#include <pthread.h>
#include <mqueue.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

#define handle_error(msg) \\
    do { perror(msg); exit(EXIT_FAILURE); } while (0)

static void                     /* Thread start function */
tfunc(union sigval sv)
{
    struct mq_attr attr;
    ssize_t nr;
    void *buf;
    mqd_t mqdes = *((mqd_t *) sv.sival_ptr);

    /* Determine max. msg size; allocate buffer to receive msg */

    if (mq_getattr(mqdes, &attr) == \-1)
        handle_error("mq_getattr");
    buf = malloc(attr.mq_msgsize);
    if (buf == NULL)
        handle_error("malloc");

    nr = mq_receive(mqdes, buf, attr.mq_msgsize, NULL);
    if (nr == \-1)
        handle_error("mq_receive");

    printf("Read %zd bytes from MQ\\n", nr);
    free(buf);
    exit(EXIT_SUCCESS);         /* Terminate the process */
}

int
main(int argc, char *argv[])
{
    mqd_t mqdes;
    struct sigevent sev;

    if (argc != 2) {
        fprintf(stderr, "Usage: %s <mq\-name>\\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    mqdes = mq_open(argv[1], O_RDONLY);
    if (mqdes == (mqd_t) \-1)
        handle_error("mq_open");

    sev.sigev_notify = SIGEV_THREAD;
    sev.sigev_notify_function = tfunc;
    sev.sigev_notify_attributes = NULL;
    sev.sigev_value.sival_ptr = &mqdes;   /* Arg. to thread func. */
    if (mq_notify(mqdes, &sev) == \-1)
        handle_error("mq_notify");

    pause();    /* Process will be terminated by thread function */
}
.fi
.SH SEE ALSO
.BR mq_close (3),
.BR mq_getattr (3),
.BR mq_open (3),
.BR mq_receive (3),
.BR mq_send (3),
.BR mq_unlink (3),
.BR mq_overview (7),
.BR sigevent (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
'\" t
.\" Copyright (C) 2006 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH MQ_OPEN 3 2015-04-19 "Linux" "Linux Programmer's Manual"
.SH NAME
mq_open \- open a message queue
.SH SYNOPSIS
.nf
.BR "#include <fcntl.h>" "           /* For O_* constants */"
.BR "#include <sys/stat.h>" "        /* For mode constants */"
.B #include <mqueue.h>
.sp
.BI "mqd_t mq_open(const char *" name ", int " oflag );
.BI "mqd_t mq_open(const char *" name ", int " oflag ", mode_t " mode ,
.BI "              struct mq_attr *" attr );
.fi
.sp
Link with \fI\-lrt\fP.
.SH DESCRIPTION
.BR mq_open ()
creates a new POSIX message queue or opens an existing queue.
The queue is identified by
.IR name .
For details of the construction of
.IR name ,
see
.BR mq_overview (7).

The
.I oflag
argument specifies flags that control the operation of the call.
(Definitions of the flags values can be obtained by including
.IR <fcntl.h> .)
Exactly one of the following must be specified in
.IR oflag :
.TP
.B O_RDONLY
Open the queue to receive messages only.
.TP
.B O_WRONLY
Open the queue to send messages only.
.TP
.B O_RDWR
Open the queue to both send and receive messages.
.PP
Zero or more of the following flags can additionally be
.IR OR ed
in
.IR oflag :
.TP
.BR O_CLOEXEC " (since Linux 2.6.26)"
.\" commit 269f21344b23e552c21c9e2d7ca258479dcd7a0a
Set the close-on-exec flag for the message queue descriptor.
See
.BR open (2)
for a discussion of why this flag is useful.
.TP
.B O_CREAT
Create the message queue if it does not exist.
The owner (user ID) of the message queue is set to the effective
user ID of the calling process.
The group ownership (group ID) is set to the effective group ID
of the calling process.
.\" In reality the filesystem IDs are used on Linux.
.TP
.B O_EXCL
If
.B O_CREAT
was specified in
.IR oflag ,
and a queue with the given
.I name
already exists, then fail with the error
.BR EEXIST .
.TP
.B O_NONBLOCK
Open the queue in nonblocking mode.
In circumstances where
.BR mq_receive (3)
and
.BR mq_send (3)
would normally block, these functions instead fail with the error
.BR EAGAIN .
.PP
If
.B O_CREAT
is specified in
.IR oflag ,
then two additional arguments must be supplied.
The
.I mode
argument specifies the permissions to be placed on the new queue,
as for
.BR open (2).
(Symbolic definitions for the permissions bits can be obtained by including
.IR <sys/stat.h> .)
The permissions settings are masked against the process umask.

The
.I attr
argument specifies attributes for the queue.
See
.BR mq_getattr (3)
for details.
If
.I attr
is NULL, then the queue is created with implementation-defined
default attributes.
Since Linux 3.5, two
.I /proc
files can be used to control these defaults; see
.BR mq_overview (7)
for details.
.SH RETURN VALUE
On success,
.BR mq_open ()
returns a message queue descriptor for use by other
message queue functions.
On error,
.BR mq_open ()
returns
.IR "(mqd_t)\ \-1",
with
.I errno
set to indicate the error.
.SH ERRORS
.TP
.B EACCES
The queue exists, but the caller does not have permission to
open it in the specified mode.
.TP
.B EACCES
.I name
contained more than one slash.
.\" Note that this isn't consistent with the same case for sem_open()
.TP
.B EEXIST
Both
.B O_CREAT
and
.B O_EXCL
were specified in
.IR oflag ,
but a queue with this
.I name
already exists.
.TP
.B EINVAL
.\" glibc checks whether the name starts with a "/" and if not,
.\" gives this error
.I name
doesn't follow the format in
.BR mq_overview (7).
.TP
.B EINVAL
.B O_CREAT
was specified in
.IR oflag ,
and
.I attr
was not NULL, but
.I attr\->mq_maxmsg
or
.I attr\->mq_msqsize
was invalid.
Both of these fields must be greater than zero.
In a process that is unprivileged (does not have the
.B CAP_SYS_RESOURCE
capability),
.I attr\->mq_maxmsg
must be less than or equal to the
.I msg_max
limit, and
.I attr\->mq_msgsize
must be less than or equal to the
.I msgsize_max
limit.
In addition, even in a privileged process,
.I attr\->mq_maxmsg
cannot exceed the
.B HARD_MAX
limit.
(See
.BR mq_overview (7)
for details of these limits.)
.TP
.B EMFILE
The process already has the maximum number of files and
message queues open.
.TP
.B ENAMETOOLONG
.I name
was too long.
.TP
.B ENFILE
The system limit on the total number of open files and message queues
has been reached.
.TP
.B ENOENT
The
.B O_CREAT
flag was not specified in
.IR oflag ,
and no queue with this
.I name
exists.
.TP
.B ENOENT
.I name
was just "/" followed by no other characters.
.\" Note that this isn't consistent with the same case for sem_open()
.TP
.B ENOMEM
Insufficient memory.
.TP
.B ENOSPC
Insufficient space for the creation of a new message queue.
This probably occurred because the
.I queues_max
limit was encountered; see
.BR mq_overview (7).
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR mq_open ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
POSIX.1-2001.
.SH NOTES
.SS C library/kernel ABI differences
The
.BR mq_open ()
library function is implemented on top of a system call of the same name.
The library function performs the check that the
.I name
starts with a slash (/), giving the
.B EINVAL
error if it does not.
The kernel system call expects
.I name
to contain no preceding slash,
so the C library function passes
.I name
without the preceding slash (i.e.,
.IR name+1 )
to the system call.
.SH BUGS
In kernels before 2.6.14,
the process umask was not applied to the permissions specified in
.IR mode .
.SH SEE ALSO
.BR mq_close (3),
.BR mq_getattr (3),
.BR mq_notify (3),
.BR mq_receive (3),
.BR mq_send (3),
.BR mq_unlink (3),
.BR mq_overview (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
'\" t
.\" Copyright (C) 2006 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH MQ_RECEIVE 3 2015-03-02 "Linux" "Linux Programmer's Manual"
.SH NAME
mq_receive, mq_timedreceive \- receive a message from a message queue
.SH SYNOPSIS
.nf
.B #include <mqueue.h>
.sp
.BI "ssize_t mq_receive(mqd_t " mqdes ", char *" msg_ptr ,
.BI "                   size_t " msg_len ", unsigned int *" msg_prio );
.sp
.B #include <time.h>
.B #include <mqueue.h>
.sp
.BI "ssize_t mq_timedreceive(mqd_t " mqdes ", char *" msg_ptr ,
.BI "                   size_t " msg_len ", unsigned int *" msg_prio ,
.BI "                   const struct timespec *" abs_timeout );
.fi
.sp
Link with \fI\-lrt\fP.
.sp
.ad l
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR mq_timedreceive ():
.RS 4
_XOPEN_SOURCE\ >=\ 600 || _POSIX_C_SOURCE\ >=\ 200112L
.RE
.ad
.SH DESCRIPTION
.BR mq_receive ()
removes the oldest message with the highest priority from
the message queue referred to by the descriptor
.IR mqdes ,
and places it in the buffer pointed to by
.IR msg_ptr .
The
.I msg_len
argument specifies the size of the buffer pointed to by
.IR msg_ptr ;
this must be greater than or equal to the
.I mq_msgsize
attribute of the queue (see
.BR mq_getattr (3)).
If
.I msg_prio
is not NULL, then the buffer to which it points is used
to return the priority associated with the received message.

If the queue is empty, then, by default,
.BR mq_receive ()
blocks until a message becomes available,
or the call is interrupted by a signal handler.
If the
.B O_NONBLOCK
flag is enabled for the message queue description,
then the call instead fails immediately with the error
.BR EAGAIN .

.BR mq_timedreceive ()
behaves just like
.BR mq_receive (),
except that if the queue is empty and the
.B O_NONBLOCK
flag is not enabled for the message queue description, then
.I abs_timeout
points to a structure which specifies a ceiling on the time for which
the call will block.
This ceiling is an absolute timeout in seconds and nanoseconds
since the Epoch, 1970-01-01 00:00:00 +0000 (UTC), and it is
specified in the following structure:
.sp
.in +4n
.nf
struct timespec {
    time_t tv_sec;        /* seconds */
    long   tv_nsec;       /* nanoseconds */
};

.fi
.in
If no message is available,
and the timeout has already expired by the time of the call,
.BR mq_timedreceive ()
returns immediately.
.SH RETURN VALUE
On success,
.BR mq_receive ()
and
.BR mq_timedreceive ()
return the number of bytes in the received message;
on error, \-1 is returned, with
.I errno
set to indicate the error.
.SH ERRORS
.TP
.B EAGAIN
The queue was empty, and the
.B O_NONBLOCK
flag was set for the message queue description referred to by
.IR mqdes .
.TP
.B EBADF
The descriptor specified in
.I mqdes
was invalid.
.TP
.B EINTR
The call was interrupted by a signal handler; see
.BR signal (7).
.TP
.B EINVAL
The call would have blocked, and
.I abs_timeout
was invalid, either because
.I tv_sec
was less than zero, or because
.I tv_nsec
was less than zero or greater than 1000 million.
.TP
.B EMSGSIZE
.I msg_len
was less than the
.I mq_msgsize
attribute of the message queue.
.TP
.B ETIMEDOUT
The call timed out before a message could be transferred.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw31 lb lb
l l l.
Interface	Attribute	Value
T{
.BR mq_receive (),
.BR mq_timedreceive ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
POSIX.1-2001.
.SH NOTES
On Linux,
.BR mq_timedreceive ()
is a system call, and
.BR mq_receive ()
is a library function layered on top of that system call.
.SH SEE ALSO
.BR mq_close (3),
.BR mq_getattr (3),
.BR mq_notify (3),
.BR mq_open (3),
.BR mq_send (3),
.BR mq_unlink (3),
.BR mq_overview (7),
.BR time (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
'\" t
.\" Copyright (C) 2006 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH MQ_SEND 3 2015-03-02 "Linux" "Linux Programmer's Manual"
.SH NAME
mq_send, mq_timedsend \- send a message to a message queue
.SH SYNOPSIS
.nf
.B #include <mqueue.h>
.sp
.BI "int mq_send(mqd_t " mqdes ", const char *" msg_ptr ,
.BI "              size_t " msg_len ", unsigned int " msg_prio );
.sp
.B #include <time.h>
.B #include <mqueue.h>
.sp
.BI "int mq_timedsend(mqd_t " mqdes ", const char *" msg_ptr ,
.BI "              size_t " msg_len ", unsigned int " msg_prio ,
.BI "              const struct timespec *" abs_timeout );
.fi
.sp
Link with \fI\-lrt\fP.
.sp
.ad l
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR mq_timedsend ():
.RS 4
_XOPEN_SOURCE\ >=\ 600 || _POSIX_C_SOURCE\ >=\ 200112L
.RE
.ad
.SH DESCRIPTION
.BR mq_send ()
adds the message pointed to by
.I msg_ptr
to the message queue referred to by the descriptor
.IR mqdes .
The
.I msg_len
argument specifies the length of the message pointed to by
.IR msg_ptr ;
this length must be less than or equal to the queue's
.I mq_msgsize
attribute.
Zero-length messages are allowed.

The
.I msg_prio
argument is a nonnegative integer that specifies the priority
of this message.
Messages are placed on the queue in decreasing order of priority,
with newer messages of the same priority being placed after
older messages with the same priority.

If the message queue is already full
(i.e., the number of messages on the queue equals the queue's
.I mq_maxmsg
attribute), then, by default,
.BR mq_send ()
blocks until sufficient space becomes available to allow the message
to be queued, or until the call is interrupted by a signal handler.
If the
.B O_NONBLOCK
flag is enabled for the message queue description,
then the call instead fails immediately with the error
.BR EAGAIN .

.BR mq_timedsend ()
behaves just like
.BR mq_send (),
except that if the queue is full and the
.B O_NONBLOCK
flag is not enabled for the message queue description, then
.I abs_timeout
points to a structure which specifies a ceiling on the time for which
the call will block.
This ceiling is an absolute timeout in seconds and nanoseconds
since the Epoch, 1970-01-01 00:00:00 +0000 (UTC), and it is
specified in the following structure:
.sp
.in +4n
.nf
struct timespec {
    time_t tv_sec;        /* seconds */
    long   tv_nsec;       /* nanoseconds */
};

.fi
.in
If the message queue is full,
and the timeout has already expired by the time of the call,
.BR mq_timedsend ()
returns immediately.
.SH RETURN VALUE
On success,
.BR mq_send ()
and
.BR mq_timedsend ()
return zero; on error, \-1 is returned, with
.I errno
set to indicate the error.
.SH ERRORS
.TP
.B EAGAIN
The queue was full, and the
.B O_NONBLOCK
flag was set for the message queue description referred to by
.IR mqdes .
.TP
.B EBADF
The descriptor specified in
.I mqdes
was invalid.
.TP
.B EINTR
The call was interrupted by a signal handler; see
.BR signal (7).
.TP
.B EINVAL
The call would have blocked, and
.I abs_timeout
was invalid, either because
.I tv_sec
was less than zero, or because
.I tv_nsec
was less than zero or greater than 1000 million.
.TP
.B EMSGSIZE
.I msg_len
was greater than the
.I mq_msgsize
attribute of the message queue.
.TP
.B ETIMEDOUT
The call timed out before a message could be transferred.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw25 lb lb
l l l.
Interface	Attribute	Value
T{
.BR mq_send (),
.BR mq_timedsend ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
POSIX.1-2001.
.SH NOTES
On Linux,
.BR mq_timedsend ()
is a system call, and
.BR mq_send ()
is a library function layered on top of that system call.
.SH SEE ALSO
.BR mq_close (3),
.BR mq_getattr (3),
.BR mq_notify (3),
.BR mq_open (3),
.BR mq_receive (3),
.BR mq_unlink (3),
.BR mq_overview (7),
.BR time (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
'\" t
.\" Copyright (C) 2006 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH MQ_UNLINK 3 2015-03-02 "Linux" "Linux Programmer's Manual"
.SH NAME
mq_unlink \- remove a message queue
.SH SYNOPSIS
.nf
.B #include <mqueue.h>
.sp
.BI "int mq_unlink(const char *" name );
.fi
.sp
Link with \fI\-lrt\fP.
.SH DESCRIPTION
.BR mq_unlink ()
removes the specified message queue
.IR name .
The message queue name is removed immediately.
The queue itself is destroyed once any other processes that have
the queue open close their descriptors referring to the queue.
.SH RETURN VALUE
On success
.BR mq_unlink ()
returns 0; on error, \-1 is returned, with
.I errno
set to indicate the error.
.SH ERRORS
.TP
.B EACCES
The caller does not have permission to unlink this message queue.
.TP
.B ENAMETOOLONG
.I name
was too long.
.TP
.B ENOENT
There is no message queue with the given
.IR name .
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR mq_unlink ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
POSIX.1-2001.
.SH SEE ALSO
.BR mq_close (3),
.BR mq_getattr (3),
.BR mq_notify (3),
.BR mq_open (3),
.BR mq_receive (3),
.BR mq_send (3),
.BR mq_overview (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2012 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH MTRACE 3 2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
mtrace, muntrace \- malloc tracing
.SH SYNOPSIS
.B "#include <mcheck.h>"
.sp
.B "void mtrace(void);"
.sp
.B "void muntrace(void);"
.SH DESCRIPTION
The
.BR mtrace ()
function installs hook functions for the memory-allocation functions
.RB ( malloc (3),
.BR realloc (3)
.BR memalign (3),
.BR free (3)).
These hook functions record tracing information about memory allocation
and deallocation.
The tracing information can be used to discover memory leaks and
attempts to free nonallocated memory in a program.

The
.BR muntrace ()
function disables the hook functions installed by
.BR mtrace (),
so that tracing information is no longer recorded
for the memory-allocation functions.
If no hook functions were successfully installed by
.BR mtrace (),
.BR muntrace ()
does nothing.

When
.BR mtrace ()
is called, it checks the value of the environment variable
.BR MALLOC_TRACE ,
which should contain the pathname of a file in which
the tracing information is to be recorded.
If the pathname is successfully opened, it is truncated to zero length.

If
.BR MALLOC_TRACE
is not set,
or the pathname it specifies is invalid or not writable,
then no hook functions are installed, and
.BR mtrace ()
has no effect.
In set-user-ID and set-group-ID programs,
.BR MALLOC_TRACE
is ignored, and
.BR mtrace ()
has no effect.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw20 lb lb
l l l.
Interface	Attribute	Value
T{
.BR mtrace (),
.BR muntrace ()
.\" FIXME: the following marking is different from which in glibc manual,
.\" markings in glibc manual are more detailed.
.\" mtrace: MT-Unsafe env race:mtrace const:malloc_hooks init
.\" muntrace: MT-Unsafe race:mtrace const:malloc_hooks locale
.\" But there is something wrong in glibc manual, for example:
.\" glibc manual says muntrace should have marking locale because it calls
.\" fprintf(), but muntrace does not execute area which cause locale problem.
T}	Thread safety	MT-Unsafe
.TE
.SH CONFORMING TO
These functions are GNU extensions.
.SH NOTES
In normal usage,
.BR mtrace ()
is called once at the start of execution of a program, and
.BR muntrace ()
is never called.

The tracing output produced after a call to
.BR mtrace ()
is textual, but not designed to be human readable.
The GNU C library provides a Perl script,
.BR mtrace (1),
that interprets the trace log and produces human-readable output.
For best results,
the traced program should be compiled with debugging enabled,
so that line-number information is recorded in the executable.

The tracing performed by
.BR mtrace ()
incurs a performance penalty (if
.B MALLOC_TRACE
points to a valid, writable pathname).
.SH BUGS
The line-number information produced by
.BR mtrace (1)
is not always precise:
the line number references may refer to the previous or following (nonblank)
line of the source code.
.SH EXAMPLE
The shell session below demonstrates the use of the
.BR mtrace ()
function and the
.BR mtrace (1)
command in a program that has memory leaks at two different locations.
The demonstration uses the following program:
.in +4
.nf

.RB "$ " "cat t_mtrace.c"
#include <mcheck.h>
#include <stdlib.h>
#include <stdio.h>

int
main(int argc, char *argv[])
{
    int j;

    mtrace();

    for (j = 0; j < 2; j++)
        malloc(100);            /* Never freed\-\-a memory leak */

    calloc(16, 16);             /* Never freed\-\-a memory leak */
    exit(EXIT_SUCCESS);
}

.fi
.in
When we run the program as follows, we see that
.BR mtrace ()
diagnosed memory leaks at two different locations in the program:
.in +4n
.nf

.RB "$ " "cc \-g t_mtrace.c \-o t_mtrace"
.RB "$ " "export MALLOC_TRACE=/tmp/t"
.RB "$ " "./t_mtrace"
.RB "$ " "mtrace ./t_mtrace $MALLOC_TRACE"
Memory not freed:
-----------------
   Address     Size     Caller
0x084c9378     0x64  at /home/cecilia/t_mtrace.c:12
0x084c93e0     0x64  at /home/cecilia/t_mtrace.c:12
0x084c9448    0x100  at /home/cecilia/t_mtrace.c:16
.fi
.in

The first two messages about unfreed memory correspond to the two
.BR malloc (3)
calls inside the
.I for
loop.
The final message corresponds to the call to
.BR calloc (3)
(which in turn calls
.BR malloc (3)).
.SH SEE ALSO
.BR mtrace (1),
.BR malloc (3),
.BR malloc_hook (3),
.BR mcheck (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 2002 Walter Harms (walter.harms@informatik.uni-oldenburg.de)
.\"
.\" %%%LICENSE_START(GPL_NOVERSION_ONELINE)
.\" Distributed under GPL
.\" %%%LICENSE_END
.\"
.\" Based on glibc infopages
.\"
.\" Corrections by aeb
.\"
.TH NAN 3 2015-04-19 "GNU" "Linux Programmer's Manual"
.SH NAME
nan, nanf, nanl \- return 'Not a Number'
.SH SYNOPSIS
.B #include <math.h>
.sp
.BI "double nan(const char *" tagp );
.br
.BI "float nanf(const char *" tagp );
.br
.BI "long double nanl(const char *" tagp );
.sp
Link with \fI\-lm\fP.
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR nan (),
.BR nanf (),
.BR nanl ():
.RS 4
_XOPEN_SOURCE\ >=\ 600 || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.ad
.SH DESCRIPTION
These functions return a representation (determined by
.IR tagp )
of a quiet NaN.
If the implementation does not support
quiet NaNs, these functions return zero.
.LP
The call
.I nan("char-sequence")
is equivalent to:
.nf

    strtod("NAN(char-sequence)", NULL);
.fi
.PP
Similarly, calls to
.BR nanf ()
and
.BR nanl ()
are equivalent to analogous calls to
.BR strtof (3)
and
.BR strtold (3).
.PP
The argument
.I tagp
is used in an unspecified manner.
On IEEE 754 systems, there are many representations of NaN, and
.I tagp
selects one.
On other systems it may do nothing.
.SH VERSIONS
These functions first appeared in glibc in version 2.1.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw21 lb lb
l l l.
Interface	Attribute	Value
T{
.BR nan (),
.BR nanf (),
.BR nanl ()
T}	Thread safety	MT-Safe locale
.TE
.SH CONFORMING TO
C99, POSIX.1-2001, POSIX.1-2008.
See also IEC 559 and the appendix with
recommended functions in IEEE 754/IEEE 854.
.SH SEE ALSO
.BR isnan (3),
.BR strtod (3),
.BR math_error (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" This manpage copyright 1998 by Andi Kleen.
.\"
.\" %%%LICENSE_START(GPL_NOVERSION_ONELINE)
.\" Subject to the GPL.
.\" %%%LICENSE_END
.\"
.\" Based on the original comments from Alexey Kuznetsov
.\" $Id: netlink.3,v 1.1 1999/05/14 17:17:24 freitag Exp $
.\"
.TH NETLINK 3 2014-03-20 "GNU" "Linux Programmer's Manual"
.SH NAME
netlink \- Netlink macros
.SH SYNOPSIS
.nf
.B #include <asm/types.h>
.br
.B #include <linux/netlink.h>
.sp
.BI "int NLMSG_ALIGN(size_t " len );
.br
.BI "int NLMSG_LENGTH(size_t " len );
.br
.BI "int NLMSG_SPACE(size_t " len );
.br
.BI "void *NLMSG_DATA(struct nlmsghdr *" nlh );
.br
.BI "struct nlmsghdr *NLMSG_NEXT(struct nlmsghdr *" nlh ", int " len );
.br
.BI "int NLMSG_OK(struct nlmsghdr *" nlh ", int " len );
.br
.BI "int NLMSG_PAYLOAD(struct nlmsghdr *" nlh ", int " len );
.fi
.SH DESCRIPTION
.I <linux/netlink.h>
defines several standard macros to access or create a netlink datagram.
They are similar in spirit to the macros defined in
.BR cmsg (3)
for auxiliary data.
The buffer passed to and from a netlink socket should
be accessed using only these macros.
.TP
.BR NLMSG_ALIGN ()
Round the length of a netlink message up to align it properly.
.TP
.BR NLMSG_LENGTH ()
Given the payload length,
.IR len ,
this macro returns the aligned length to store in the
.I nlmsg_len
field of the
.IR nlmsghdr .
.TP
.BR NLMSG_SPACE ()
Return the number of bytes that a netlink message with payload of
.I len
would occupy.
.TP
.BR NLMSG_DATA ()
Return a pointer to the payload associated with the passed
.IR nlmsghdr .
.TP
.\" this is bizarre, maybe the interface should be fixed.
.BR NLMSG_NEXT ()
Get the next
.I nlmsghdr
in a multipart message.
The caller must check if the current
.I nlmsghdr
didn't have the
.B NLMSG_DONE
set\(emthis function doesn't return NULL on end.
The
.I len
argument is an lvalue containing the remaining length
of the message buffer.
This macro decrements it by the length of the message header.
.TP
.BR NLMSG_OK ()
Return true if the netlink message is not truncated and
is in a form suitable for parsing.
.TP
.BR NLMSG_PAYLOAD ()
Return the length of the payload associated with the
.IR nlmsghdr .
.SH CONFORMING TO
These macros are nonstandard Linux extensions.
.SH NOTES
It is often better to use netlink via
.I libnetlink
than via the low-level kernel interface.
.SH SEE ALSO
.BR libnetlink (3),
.BR netlink (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
'\" t -*- coding: UTF-8 -*-
.\" Copyright (C) 2014 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH NEWLOCALE 3 2014-05-28 "Linux" "Linux Programmer's Manual"
.SH NAME
newlocale, freelocale \- create, modify, and free a locale object
.SH SYNOPSIS
.nf
.B #include <locale.h>

.BI "locale_t newlocale(int " category_mask ", const char *" locale ",
.BI "                   locale_t " base );

.BI "void freelocale(locale_t " locobj );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR newlocale (),
.BR freelocale ():
.PD 0
.RS 4
.TP
Since glibc 2.10:
_XOPEN_SOURCE\ >=\ 700
.TP
Before glibc 2.10:
_GNU_SOURCE
.RE
.PD
.SH DESCRIPTION
The
.BR newlocale ()
function creates a new locale object, or modifies an existing object,
returning a reference to the new or modified object as the function result.
Whether the call creates a new object or modifies an existing object
is determined by the value of
.IR base :
.IP * 3
If
.I base
is
.IR "(locale_t)\ 0" ,
a new object is created.
.IP *
If
.I base
refers to valid existing locale object
(i.e., an object returned by a previous call to
.BR newlocale ()
or
.BR duplocale (3)),
then that object is modified by the call.
If the call is successful, the contents of
.I base
are unspecified (in particular, the object referred to by
.I base
may be freed, and a new object created).
Therefore, the caller should ensure that it stops using
.I base
before the call to
.BR newlocale (),
and should subsequently refer to the modified object via the
reference returned as the function result.
If the call fails, the contents of
.I base
remain valid and unchanged.
.PP
If
.I base
is the special locale object
.BR LC_GLOBAL_LOCALE
(see
.BR duplocale (3)),
or is not
.IR "(locale_t)\ 0"
and is not a valid locale object handle,
the behavior is undefined.

The
.I category_mask
argument is a bit mask that specifies the locale categories
that are to be set in a newly created locale object
or modified in an existing object.
The mask is constructed by a bitwise OR of the constants
.BR LC_ADDRESS_MASK ,
.BR LC_CTYPE_MASK ,
.BR LC_COLLATE_MASK ,
.BR LC_IDENTIFICATION_MASK ,
.BR LC_MEASUREMENT_MASK ,
.BR LC_MESSAGES_MASK ,
.BR LC_MONETARY_MASK ,
.BR LC_NUMERIC_MASK ,
.BR LC_NAME_MASK ,
.BR LC_PAPER_MASK ,
.BR LC_TELEPHONE_MASK ,
and
.BR LC_TIME_MASK .
Alternatively, the mask can be specified as
.BR LC_ALL_MASK ,
which is equivalent to ORing all of the preceding constants.

For each category specified in
.IR category_mask ,
the locale data from
.I locale
will be used in the object returned by
.BR newlocale ().
If a new locale object is being created,
data for all categories not specified in
.IR category_mask
is taken from the default ("POSIX") locale.

The following preset values of
.I locale
are defined for all categories that can be specified in
.IR category_mask :
.TP
"POSIX"
A minimal locale environment for C language programs.
.TP
"C"
Equivalent to "POSIX".
.TP
""
An implementation-defined native environment
corresponding to the values of the
.BR LC_*
and
.B LANG
environment variables (see
.BR locale (7)).
.SS freelocale()
The
.BR freelocale ()
function deallocates the resources associated with
.IR locobj ,
a locale object previously returned by a call to
.BR newlocale ()
or
.BR duplocale (3).
If
.I locobj
is
.BR LC_GLOBAL_LOCALE
or is not valid locale object handle, the results are undefined.

Once a locale object has been freed,
the program should make no further use of it.
.SH RETURN VALUE
On success,
.BR newlocale ()
returns a handle that can be used in calls to
.BR duplocale (3),
.BR freelocale (),
and other functions that take a
.I locale_t
argument.
On error,
.BR newlocale ()
returns
.IR "(locale_t)\ 0",
and sets
.I errno
to indicate the cause of the error.
.SH ERRORS
.TP
.B EINVAL
One or more bits in
.I category_mask
do not correspond to a valid locale category.
.TP
.B EINVAL
.I locale
is NULL.
.TP
.B ENOENT
.I locale
is not a string pointer referring to a valid locale.
.TP
.B ENOMEM
Insufficient memory to create a locale object.
.SH VERSIONS
The
.BR newlocale ()
and
.BR freelocale ()
functions first appeared in version 2.3 of the GNU C library.
.SH CONFORMING TO
POSIX.1-2008.
.SH NOTES
Each locale object created by
.BR newlocale ()
should be deallocated using
.BR freelocale (3).
.SH EXAMPLE
The program below takes up to two command-line arguments,
which each identify locales.
The first argument is required, and is used to set the
.B LC_NUMERIC
category in a locale object created using
.BR newlocale ().
The second command-line argument is optional;
if it is present, it is used to set the
.B LC_TIME
category of the locale object.

Having created and initialized the locale object,
the program then applies it using
.BR uselocale (3),
and then tests the effect of the locale changes by:
.IP 1. 3
Displaying a floating-point number with a fractional part.
This output will be affected by the
.B LC_NUMERIC
setting.
In many European-language locales,
the fractional part of the number is separated from the integer part
using a comma, rather than a period.
.IP 2.
Displaying the date.
The format and language of the output will be affected by the
.B LC_TIME
setting.

.PP
The following shell sessions show some example runs of this program.

Set the
.B LC_NUMERIC
category to
.IR fr_FR
(French):
.in +4n
.nf

$ \fB./a.out fr_FR\fP
123456,789
Fri Mar  7 00:25:08 2014
.fi
.in

Set the
.B LC_NUMERIC
category to
.IR fr_FR
(French),
and the
.B LC_TIME
category to
.IR it_IT
(Italian):
.in +4n
.nf

$ \fB./a.out fr_FR it_IT\fP
123456,789
ven 07 mar 2014 00:26:01 CET
.fi
.in

Specify the
.B LC_TIME
setting as an empty string,
which causes the value to be taken from environment variable settings
(which, here, specify
.IR mi_NZ ,
New Zealand Māori):
.in +4n
.nf

$ LC_ALL=mi_NZ ./a.out fr_FR ""
123456,789
Te Paraire, te 07 o Poutū-te-rangi, 2014 00:38:44 CET
.fi
.SS Program source
.nf
#define _XOPEN_SOURCE 700
#include <stdio.h>
#include <stdlib.h>
#include <locale.h>
#include <time.h>

#define errExit(msg)    do { perror(msg); exit(EXIT_FAILURE); \\
                        } while (0)

int
main(int argc, char *argv[])
{
    char buf[100];
    time_t t;
    size_t s;
    struct tm *tm;
    locale_t loc, nloc;

    if (argc < 2) {
        fprintf(stderr, "Usage: %s locale1 [locale2]\\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    /* Create a new locale object, taking the LC_NUMERIC settings
       from the locale specified in argv[1] */

    loc = newlocale(LC_NUMERIC_MASK, argv[1], (locale_t) 0);
    if (loc == (locale_t) 0)
        errExit("newlocale");

    /* If a second command\-line argument was specified, modify the
       locale object to take the LC_TIME settings from the locale
       specified in argv[2]. We assign the result of this newlocale()
       call to 'nloc' rather than 'loc', since in some cases, we might
       want to preserve 'loc' if this call fails. */

    if (argc > 2) {
        nloc = newlocale(LC_TIME_MASK, argv[2], loc);
        if (nloc == (locale_t) 0)
            errExit("newlocale");
        loc = nloc;
    }

    /* Apply the newly created locale to this thread */

    uselocale(loc);

    /* Test effect of LC_NUMERIC */

    printf("%8.3f\\n", 123456.789);

    /* Test effect of LC_TIME */

    t = time(NULL);
    tm = localtime(&t);
    if (tm == NULL)
        errExit("time");

    s = strftime(buf, sizeof(buf), "%c", tm);
    if (s == 0)
        errExit("strftime");

    printf("%s\\n", buf);

    /* Free the locale object */

    freelocale(loc);

    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR locale (1),
.BR duplocale (3),
.BR setlocale (3),
.BR uselocale (3),
.BR locale (5),
.BR locale (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 2002 Walter Harms (walter.harms@informatik.uni-oldenburg.de)
.\" and Copyright 2008, Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(GPL_NOVERSION_ONELINE)
.\" Distributed under GPL
.\" %%%LICENSE_END
.\"
.\" Based on glibc infopages
.\"
.TH NEXTAFTER 3 2015-04-19 "GNU" "Linux Programmer's Manual"
.SH NAME
nextafter, nextafterf, nextafterl, nexttoward, nexttowardf, nexttowardl \-
floating-point number manipulation
.SH SYNOPSIS
.B #include <math.h>
.sp
.BI "double nextafter(double " x ", double " y );
.br
.BI "float nextafterf(float " x ", float " y );
.br
.BI "long double nextafterl(long double " x ", long double " y );
.sp
.BI "double nexttoward(double " x ", long double " y );
.br
.BI "float nexttowardf(float " x ", long double " y );
.br
.BI "long double nexttowardl(long double " x ", long double " y );
.sp
Link with \fI\-lm\fP.
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR nextafter ():
.RS 4
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE\ >=\ 500 ||
_XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED ||
_ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.br
.BR nextafterf (),
.BR nextafterl ():
.RS 4
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE\ >=\ 600 || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.br
.BR nexttoward (),
.BR nexttowardf (),
.BR nexttowardl ():
.RS 4
_XOPEN_SOURCE\ >=\ 600 || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.ad b
.SH DESCRIPTION
The
.BR nextafter (),
.BR nextafterf (),
and
.BR nextafterl ()
functions return the next representable floating-point value following
.I x
in the direction of
.IR y .
If
.I y
is less than
.IR x ,
these functions will return the largest representable number less than
.IR x .

If
.I x
equals
.IR y ,
the functions return
.IR y .

The
.BR nexttoward (),
.BR nexttowardf (),
and
.BR nexttowardl ()
functions do the same as the corresponding
.BR nextafter ()
functions, except that they have a
.I "long double"
second argument.
.SH RETURN VALUE
On success,
these functions return the next representable floating-point value after
.I x
in the direction of
.IR y .

If
.I x
equals
.IR y ,
then
.I y
(cast to the same type as
.IR x )
is returned.

If
.I x
or
.I y
is a NaN,
a NaN is returned.

If
.I x
is finite,
.\" e.g., DBL_MAX
and the result would overflow,
a range error occurs,
and the functions return
.BR HUGE_VAL ,
.BR HUGE_VALF ,
or
.BR HUGE_VALL ,
respectively, with the correct mathematical sign.

If
.I x
is not equal to
.IR y ,
and the correct function result would be subnormal, zero, or underflow,
a range error occurs,
and either the correct value (if it can be represented),
or 0.0, is returned.
.SH ERRORS
See
.BR math_error (7)
for information on how to determine whether an error has occurred
when calling these functions.
.PP
The following errors can occur:
.TP
Range error: result overflow
.\" e.g., nextafter(DBL_MAX, HUGE_VAL);
.\" .I errno
.\" is set to
.\" .BR ERANGE .
An overflow floating-point exception
.RB ( FE_OVERFLOW )
is raised.
.TP
Range error: result is subnormal or underflows
.\" e.g., nextafter(DBL_MIN, 0.0);
.\" .I errno
.\" is set to
.\" .BR ERANGE .
An underflow floating-point exception
.RB ( FE_UNDERFLOW )
is raised.
.PP
These functions do not set
.IR errno .
.\" FIXME . Is it intentional that these functions do not set errno?
.\" Bug raised: http://sources.redhat.com/bugzilla/show_bug.cgi?id=6799
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw28 lb lb
l l l.
Interface	Attribute	Value
T{
.BR nextafter (),
.BR nextafterf (),
.br
.BR nextafterl (),
.BR nexttoward (),
.br
.BR nexttowardf (),
.BR nexttowardl ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C99, POSIX.1-2001, POSIX.1-2008.
This function is defined in IEC 559 (and the appendix with
recommended functions in IEEE 754/IEEE 854).
.SH BUGS
In glibc version 2.5 and earlier, these functions do not raise an underflow
floating-point
.RB ( FE_UNDERFLOW )
exception when an underflow occurs.
.SH SEE ALSO
.BR nearbyint (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2001 Markus Kuhn <mkuhn@acm.org>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_ONEPARA)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"   GNU glibc-2 manual
.\"   OpenGroup's Single UNIX specification http://www.UNIX-systems.org/online.html
.\"
.\" Corrected prototype, 2002-10-18, aeb
.\"
.TH NL_LANGINFO 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
nl_langinfo \- query language and locale information
.SH SYNOPSIS
.nf
.B #include <langinfo.h>
.sp
.BI "char *nl_langinfo(nl_item " item );
.fi
.SH DESCRIPTION
The
.BR nl_langinfo ()
function provides access to locale information
in a more flexible way than
.BR localeconv (3)
does.
Individual and additional elements of the locale categories can
be queried.
.PP
Examples for the locale elements that can be specified in \fIitem\fP
using the constants defined in \fI<langinfo.h>\fP are:
.TP
.BR CODESET \ (LC_CTYPE)
Return a string with the name of the character encoding used in the
selected locale, such as "UTF-8", "ISO-8859-1", or "ANSI_X3.4-1968"
(better known as US-ASCII).
This is the same string that you get with
"locale charmap".
For a list of character encoding names,
try "locale \-m", cf.\&
.BR locale (1).
.TP
.BR D_T_FMT \ (LC_TIME)
Return a string that can be used as a format string for
.BR strftime (3)
to represent time and date in a locale-specific way.
.TP
.BR D_FMT \ (LC_TIME)
Return a string that can be used as a format string for
.BR strftime (3)
to represent a date in a locale-specific way.
.TP
.BR T_FMT \ (LC_TIME)
Return a string that can be used as a format string for
.BR strftime (3)
to represent a time in a locale-specific way.
.TP
.BR DAY_ "{1\(en7} (LC_TIME)"
Return name of the \fIn\fP-th day of the week. [Warning: this follows
the US convention DAY_1 = Sunday, not the international convention
(ISO 8601) that Monday is the first day of the week.]
.TP
.BR ABDAY_ "{1\(en7} (LC_TIME)"
Return abbreviated name of the \fIn\fP-th day of the week.
.TP
.BR MON_ "{1\(en12} (LC_TIME)"
Return name of the \fIn\fP-th month.
.TP
.BR ABMON_ "{1\(en12} (LC_TIME)"
Return abbreviated name of the \fIn\fP-th month.
.TP
.BR RADIXCHAR \ (LC_NUMERIC)
Return radix character (decimal dot, decimal comma, etc.).
.TP
.BR THOUSEP \ (LC_NUMERIC)
Return separator character for thousands (groups of three digits).
.TP
.BR YESEXPR \ (LC_MESSAGES)
Return a regular expression that can be used with the
.BR regex (3)
function to recognize a positive response to a yes/no question.
.TP
.BR NOEXPR \ (LC_MESSAGES)
Return a regular expression that can be used with the
.BR regex (3)
function to recognize a negative response to a yes/no question.
.TP
.BR CRNCYSTR \ (LC_MONETARY)
Return the currency symbol, preceded by "\-" if the symbol should
appear before the value, "+" if the symbol should appear after the
value, or "." if the symbol should replace the radix character.
.PP
The above list covers just some examples of items that can be requested.
For a more detailed list, consult
.IR "The GNU C Library Reference Manual" .
.SH RETURN VALUE
If no locale has been selected by
.BR setlocale (3)
for the appropriate category,
.BR nl_langinfo ()
returns a pointer to the corresponding string in the
"C" locale.
.PP
If \fIitem\fP is not valid, a pointer to an empty string is returned.
.PP
This pointer may point to static data that may be overwritten on the
next call to
.BR nl_langinfo ()
or
.BR setlocale (3).
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR nl_langinfo ()
T}	Thread safety	MT-Safe locale
.TE
.SH CONFORMING TO
SUSv2, POSIX.1-2001.
.SH EXAMPLE
The following program sets the character type and the numeric locale
according to the environment and queries the terminal character set and
the radix character.
.LP
.nf
#include <langinfo.h>
#include <locale.h>
#include <stdio.h>
#include <stdlib.h>

int
main(int argc, char *argv[])
{
    setlocale(LC_CTYPE, "");
    setlocale(LC_NUMERIC, "");
    printf("%s\\n", nl_langinfo(CODESET));
    printf("%s\\n", nl_langinfo(RADIXCHAR));
    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR locale (1),
.BR localeconv (3),
.BR setlocale (3),
.BR charsets (7),
.BR locale (7)
.br
The GNU C Library Reference Manual
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2006 Justin Pryzby <pryzbyj@justinpryzby.com>
.\"     and Copyright (C) 2006 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(PERMISSIVE_MISC)
.\" Permission is hereby granted, free of charge, to any person obtaining
.\" a copy of this software and associated documentation files (the
.\" "Software"), to deal in the Software without restriction, including
.\" without limitation the rights to use, copy, modify, merge, publish,
.\" distribute, sublicense, and/or sell copies of the Software, and to
.\" permit persons to whom the Software is furnished to do so, subject to
.\" the following conditions:
.\"
.\" The above copyright notice and this permission notice shall be
.\" included in all copies or substantial portions of the Software.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
.\" EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
.\" MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
.\" IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
.\" CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
.\" TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
.\" SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
.\" %%%LICENSE_END
.\"
.\" References:
.\"   /usr/lib/gcc/i486-linux-gnu/4.1.1/include/stddef.h
.\"   glibc-doc
.TH OFFSETOF 3 2014-04-06 "GNU" "Linux Programmer's Manual"
.SH NAME
offsetof \- offset of a structure member
.SH SYNOPSIS
.nf
.B #include <stddef.h>
.sp
.BI "size_t offsetof(" type ", " member );
.fi
.SH DESCRIPTION
The macro
.BR offsetof ()
returns the offset of the field
.I member
from the start of the structure
.IR type .

This macro is useful because the sizes of the fields that compose
a structure can vary across implementations,
and compilers may insert different numbers of padding
bytes between fields.
Consequently, an element's offset is not necessarily
given by the sum of the sizes of the previous elements.

A compiler error will result if
.I member
is not aligned to a byte boundary
(i.e., it is a bit field).
.SH RETURN VALUE
.BR offsetof ()
returns the offset of the given
.I member
within the given
.IR type ,
in units of bytes.
.SH CONFORMING TO
C89, C99, POSIX.1-2001.
.SH EXAMPLE
On a Linux/i386 system, when compiled using the default
.BR gcc (1)
options, the program below produces the following output:
.in +4n
.nf

.RB "$" " ./a.out"
offsets: i=0; c=4; d=8 a=16
sizeof(struct s)=16
.fi
.SS Program source
\&
.nf
#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>

int
main(void)
{
    struct s {
        int i;
        char c;
        double d;
        char a[];
    };

    /* Output is compiler dependent */

    printf("offsets: i=%zd; c=%zd; d=%zd a=%zd\\n",
            offsetof(struct s, i), offsetof(struct s, c),
            offsetof(struct s, d), offsetof(struct s, a));
    printf("sizeof(struct s)=%zd\\n", sizeof(struct s));

    exit(EXIT_SUCCESS);
}
.fi
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified 1993-04-02, David Metcalfe
.\" Modified 1993-07-25, Rik Faith (faith@cs.unc.edu)
.TH ON_EXIT 3  2015-05-07 "GNU" "Linux Programmer's Manual"
.SH NAME
on_exit \- register a function to be called at normal process termination
.SH SYNOPSIS
.nf
.B #include <stdlib.h>
.sp
.BI "int on_exit(void (*" function ")(int , void *), void *" arg );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR on_exit ():
_BSD_SOURCE || _SVID_SOURCE
.SH DESCRIPTION
The
.BR on_exit ()
function registers the given
.I function
to be
called at normal process termination, whether via
.BR exit (3)
or via return from the program's
.IR main ().
The
.I function
is passed the status argument given to the last call to
.BR exit (3)
and the
.I arg
argument from
.BR on_exit ().

The same function may be registered multiple times:
it is called once for each registration.

When a child process is created via
.BR fork (2),
it inherits copies of its parent's registrations.
Upon a successful call to one of the
.BR exec (3)
functions, all registrations are removed.
.SH RETURN VALUE
The
.BR on_exit ()
function returns the value 0 if successful; otherwise
it returns a nonzero value.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR on_exit ()
T}	Thread safety	MT-Safe
.TE

.SH CONFORMING TO
This function comes from SunOS 4, but is also present in glibc.
It no longer occurs in Solaris (SunOS 5).
Portable application should avoid this function, and use the standard
.BR atexit (3)
instead.
.SH SEE ALSO
.BR _exit (2),
.BR atexit (3),
.BR exit (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified Sat Jul 24 18:46:01 1993 by Rik Faith (faith@cs.unc.edu)
.\" Modified 11 June 1995 by Andries Brouwer (aeb@cwi.nl)
.\" 2007-07-30 Ulrich Drepper <drepper@redhat.com>: document fdopendir().
.TH OPENDIR 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
opendir, fdopendir \- open a directory
.SH SYNOPSIS
.nf
.B #include <sys/types.h>
.br
.B #include <dirent.h>
.sp
.BI "DIR *opendir(const char *" name );
.BI "DIR *fdopendir(int " fd );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR fdopendir ():
.PD 0
.ad l
.RS 4
.TP 4
Since glibc 2.10:
_XOPEN_SOURCE\ >=\ 700 || _POSIX_C_SOURCE\ >=\ 200809L
.TP
Before glibc 2.10:
_GNU_SOURCE
.RE
.ad
.PD
.SH DESCRIPTION
The
.BR opendir ()
function opens a directory stream corresponding to the
directory \fIname\fP, and returns a pointer to the directory stream.
The stream is positioned at the first entry in the directory.

The
.BR fdopendir ()
function
is like
.BR opendir (),
but returns a directory stream for the directory referred
to by the open file descriptor
.IR fd .
After a successful call to
.BR fdopendir (),
.I fd
is used internally by the implementation,
and should not otherwise be used by the application.
.SH RETURN VALUE
The
.BR opendir ()
and
.BR fdopendir ()
functions return a pointer to the directory stream.
On error, NULL is returned, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EACCES
Permission denied.
.TP
.B EBADF
.I fd
is not a valid file descriptor opened for reading.
.TP
.B EMFILE
Too many file descriptors in use by process.
.TP
.B ENFILE
Too many files are currently open in the system.
.TP
.B ENOENT
Directory does not exist, or \fIname\fP is an empty string.
.TP
.B ENOMEM
Insufficient memory to complete the operation.
.TP
.B ENOTDIR
\fIname\fP is not a directory.
.SH VERSIONS
.BR fdopendir ()
is available in glibc since version 2.4.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw22 lb lb
l l l.
Interface	Attribute	Value
T{
.BR opendir (),
.BR fdopendir ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
.BR opendir ()
is present on SVr4, 4.3BSD, and specified in POSIX.1-2001.
.BR fdopendir ()
is specified in POSIX.1-2008.
.SH NOTES
The underlying file descriptor of the directory stream can be obtained using
.BR dirfd (3).

The
.BR opendir ()
function sets the close-on-exec flag for the file descriptor underlying the
.IR "DIR *" .
The
.BR fdopendir ()
function leaves the setting of the close-on-exec
flag unchanged for the file descriptor,
.IR fd .
POSIX.1-200x leaves it unspecified whether a successful call to
.BR fdopendir ()
will set the close-on-exec flag for the file descriptor,
.IR fd .
.SH SEE ALSO
.BR open (2),
.BR closedir (3),
.BR dirfd (3),
.BR readdir (3),
.BR rewinddir (3),
.BR scandir (3),
.BR seekdir (3),
.BR telldir (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) OpenBSD Group
.\" All rights reserved.
.\"
.\" %%%LICENSE_START(BSD_3_CLAUSE_UCB)
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\" %%%LICENSE_END
.\"
.\" Converted into a manpage again by Martin Schulze <joey@infodrom.org>
.\"
.\" Added -lutil remark, 030718
.\"
.TH OPENPTY 3  2015-04-19 "GNU" "Linux Programmer's Manual"
.SH NAME
openpty, login_tty, forkpty \- terminal utility functions
.SH SYNOPSIS
.nf
.B #include <pty.h>
.sp
.BI "int openpty(int *" amaster ", int *" aslave ", char *" name ,
.BI "            const struct termios *" termp ,
.BI "            const struct winsize *" winp );
.sp
.BI "pid_t forkpty(int *" amaster ", char *" name ,
.BI "              const struct termios *" termp ,
.BI "              const struct winsize *" winp );
.sp
.B #include <utmp.h>
.sp
.BI "int login_tty(int " fd );
.sp
Link with \fI\-lutil\fP.
.fi
.SH DESCRIPTION
The
.BR openpty ()
function finds an available pseudoterminal and returns file descriptors
for the master and slave in
.I amaster
and
.IR aslave .
If
.I name
is not NULL, the filename of the slave is returned in
.IR name .
If
.I termp
is not NULL, the terminal parameters of the slave will be set to the
values in
.IR termp .
If
.I winp
is not NULL, the window size of the slave will be set to the values in
.IR winp .

The
.BR login_tty ()
function prepares for a login on the terminal
.I fd
(which may be a real terminal device, or the slave of a pseudoterminal as
returned by
.BR openpty ())
by creating a new session, making
.I fd
the controlling terminal for the calling process, setting
.I fd
to be the standard input, output, and error streams of the current
process, and closing
.IR fd .

The
.BR forkpty ()
function combines
.BR openpty (),
.BR fork (2),
and
.BR login_tty ()
to create a new process operating in a pseudoterminal.
The file
descriptor of the master side of the pseudoterminal is returned in
.IR amaster ,
and the filename of the slave in
.I name
if it is not NULL.
The
.I termp
and
.I winp
arguments, if not NULL,
will determine the terminal attributes and window size of the slave
side of the pseudoterminal.
.SH RETURN VALUE
If a call to
.BR openpty (),
.BR login_tty (),
or
.BR forkpty ()
is not successful, \-1 is returned and
.I errno
is set to indicate the error.
Otherwise,
.BR openpty (),
.BR login_tty (),
and the child process of
.BR forkpty ()
return 0, and the parent process of
.BR forkpty ()
returns the process ID of the child process.
.SH ERRORS
.BR openpty ()
will fail if:
.TP
.B ENOENT
There are no available terminals.
.LP
.BR login_tty ()
will fail if
.BR ioctl (2)
fails to set
.I fd
to the controlling terminal of the calling process.
.LP
.BR forkpty ()
will fail if either
.BR openpty ()
or
.BR fork (2)
fails.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw20 lb lb
l l l.
Interface	Attribute	Value
T{
.BR forkpty (),
.BR openpty ()
T}	Thread safety	MT-Safe locale
T{
.BR login_tty ()
T}	Thread safety	MT-Unsafe race:ttyname
.TE

.SH CONFORMING TO
These are BSD functions, present in glibc.
They are not standardized in POSIX.
.SH NOTES
The
.B const
modifiers were added to the structure pointer arguments of
.BR openpty ()
and
.BR forkpty ()
in glibc 2.8.

In versions of glibc before 2.0.92,
.BR openpty ()
returns file descriptors for a BSD pseudoterminal pair;
since glibc 2.0.92,
it first attempts to open a UNIX 98 pseudoterminal pair,
and falls back to opening a BSD pseudoterminal pair if that fails.
.SH BUGS
Nobody knows how much space should be reserved for
.IR name .
So, calling
.BR openpty ()
or
.BR forkpty ()
with non-NULL
.I name
may not be secure.
.SH SEE ALSO
.BR fork (2),
.BR ttyname (3),
.BR pty (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1994 Michael Haardt (michael@moria.de), 1994-06-04
.\" Copyright (c) 1995 Michael Haardt
.\"      (michael@cantor.informatik.rwth-aachen.de), 1995-03-16
.\" Copyright (c) 1996 Andries Brouwer (aeb@cwi.nl), 1996-01-13
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.\" 1996-01-13 aeb: merged in some text contributed by Melvin Smith
.\"   (msmith@falcon.mercer.peachnet.edu) and various other changes.
.\" Modified 1996-05-16 by Martin Schulze (joey@infodrom.north.de)
.\"
.TH PERROR 3 2015-04-19 "" "Linux Programmer's Manual"
.SH NAME
perror \- print a system error message
.SH SYNOPSIS
.B #include <stdio.h>
.sp
.BI "void perror(const char *" s );
.sp
.B #include <errno.h>
.sp
.BI "const char * const " sys_errlist [];
.br
.BI "int " sys_nerr ;
.br
.BI "int " errno "; /* Not really declared this way; see errno(3). */"
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.IR sys_errlist ,
.IR sys_nerr :
_BSD_SOURCE
.SH DESCRIPTION
The routine
.BR perror ()
produces a message on the standard error output, describing the last
error encountered during a call to a system or library function.
First (if
.I s
is not NULL and
.I *s
is not a null byte (\(aq\\0\(aq)) the argument string
.I s
is printed, followed by a colon and a blank.
Then the message and a new-line.

To be of most use, the argument string should include the name
of the function that incurred the error.
The error number is taken from
the external variable
.IR errno ,
which is set when errors occur but not
cleared when successful calls are made.

The global error list
.IR sys_errlist "[]"
indexed by
.I errno
can be used to obtain the error message without the newline.
The largest message number provided in the table is
.IR sys_nerr "\-1."
Be careful when directly accessing this list because new error values
may not have been added to
.IR sys_errlist "[]."
The use of
.IR sys_errlist "[]"
is nowadays deprecated.

When a system call fails, it usually returns \-1 and sets the
variable
.I errno
to a value describing what went wrong.
(These values can be found in
.IR <errno.h> .)
Many library functions do likewise.
The function
.BR perror ()
serves to translate this error code into human-readable form.
Note that
.I errno
is undefined after a successful library call:
this call may well change this variable, even though it succeeds,
for example because it internally used some other library function that failed.
Thus, if a failing call is not immediately followed by a call to
.BR perror (),
the value of
.I errno
should be saved.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR perror ()
T}	Thread safety	MT-Safe race:stderr
.TE

.SH CONFORMING TO
The function
.BR perror ()
and the external
.I errno
(see
.BR errno (3))
conform to C89, C99, 4.3BSD, POSIX.1-2001.
The externals
.I sys_nerr
and
.I sys_errlist
conform to BSD.
.SH NOTES
The externals
.I sys_nerr
and
.I sys_errlist
are defined by glibc, but in
.IR <stdio.h> .
.\" and only when _BSD_SOURCE is defined.
.\" When
.\" .B _GNU_SOURCE
.\" is defined, the symbols
.\" .I _sys_nerr
.\" and
.\" .I _sys_errlist
.\" are provided.
.SH SEE ALSO
.BR err (3),
.BR errno (3),
.BR error (3),
.BR strerror (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1991 The Regents of the University of California.
.\" All rights reserved.
.\"
.\" %%%LICENSE_START(BSD_4_CLAUSE_UCB)
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\" %%%LICENSE_END
.\"
.\"     @(#)popen.3	6.4 (Berkeley) 4/30/91
.\"
.\" Converted for Linux, Mon Nov 29 14:45:38 1993, faith@cs.unc.edu
.\" Modified Sat May 18 20:37:44 1996 by Martin Schulze (joey@linux.de)
.\" Modified 7 May 1998 by Joseph S. Myers (jsm28@cam.ac.uk)
.\"
.TH POPEN 3  2015-03-29 "GNU" "Linux Programmer's Manual"
.SH NAME
popen, pclose \- pipe stream to or from a process
.SH SYNOPSIS
.nf
.B #include <stdio.h>
.sp
.BI "FILE *popen(const char *" command ", const char *" type );
.sp
.BI "int pclose(FILE *" stream );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.ad l
.in
.sp
.BR popen (),
.BR pclose ():
.RS 4
_POSIX_C_SOURCE\ >=\ 2 || _XOPEN_SOURCE || _BSD_SOURCE || _SVID_SOURCE
.RE
.ad b
.SH DESCRIPTION
The
.BR popen ()
function opens a process by creating a pipe, forking, and invoking the
shell.
Since a pipe is by definition unidirectional, the
.I type
argument may specify only reading or writing, not both; the resulting
stream is correspondingly read-only or write-only.
.PP
The
.I command
argument is a pointer to a null-terminated string containing a shell
command line.
This command is passed to
.I /bin/sh
using the
.B \-c
flag; interpretation, if any, is performed by the shell.
The
.I type
argument is a pointer to a null-terminated string which must contain
either the letter \(aqr\(aq for reading or the letter \(aqw\(aq for writing.
Since glibc 2.9,
this argument can additionally include the letter \(aqe\(aq,
which causes the close-on-exec flag
.RB ( FD_CLOEXEC )
to be set on the underlying file descriptor;
see the description of the
.B O_CLOEXEC
flag in
.BR open (2)
for reasons why this may be useful.
.PP
The return value from
.BR popen ()
is a normal standard I/O stream in all respects save that it must be closed
with
.BR pclose ()
rather than
.BR fclose (3).
Writing to such a stream writes to the standard input of the command; the
command's standard output is the same as that of the process that called
.BR popen (),
unless this is altered by the command itself.
Conversely, reading from
the stream reads the command's standard output, and the command's
standard input is the same as that of the process that called
.BR popen ().
.PP
Note that output
.BR popen ()
streams are fully buffered by default.
.PP
The
.BR pclose ()
function waits for the associated process to terminate and returns the exit
status of the command as returned by
.BR wait4 (2).
.SH RETURN VALUE
The
.BR popen ()
function returns NULL if the
.BR fork (2)
or
.BR pipe (2)
calls fail, or if it cannot allocate memory.
.PP
The
.BR pclose ()
function returns \-1 if
.\" These conditions actually give undefined results, so I commented
.\" them out.
.\" .I stream
.\" is not associated with a "popen()ed" command, if
.\".I stream
.\" already "pclose()d", or if
.BR wait4 (2)
returns an error, or some other error is detected.
In the event of an error, these functions set
.I errno
to indicate the cause of the error.
.SH ERRORS
The
.BR popen ()
function does not set
.I errno
if memory allocation fails.
If the underlying
.BR fork (2)
or
.BR pipe (2)
fails,
.I errno
is set appropriately.
If the
.I type
argument is invalid, and this condition is detected,
.I errno
is set to
.BR EINVAL .
.PP
If
.BR pclose ()
cannot obtain the child status,
.I errno
is set to
.BR ECHILD .
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw17 lb lb
l l l.
Interface	Attribute	Value
T{
.BR popen (),
.BR pclose ()
T}	Thread safety	MT-Safe
.TE

.SH CONFORMING TO
POSIX.1-2001.

The \(aqe\(aq value for
.I type
is a Linux extension.
.SH BUGS
Since the standard input of a command opened for reading shares its seek
offset with the process that called
.BR popen (),
if the original process has done a buffered read, the command's input
position may not be as expected.
Similarly, the output from a command
opened for writing may become intermingled with that of the original
process.
The latter can be avoided by calling
.BR fflush (3)
before
.BR popen ().
.PP
Failure to execute the shell is indistinguishable from the shell's failure
to execute command, or an immediate exit of the command.
The only hint is an exit status of 127.
.\" .SH HISTORY
.\" A
.\" .BR popen ()
.\" and a
.\" .BR pclose ()
.\" function appeared in Version 7 AT&T UNIX.
.SH SEE ALSO
.BR sh (1),
.BR fork (2),
.BR pipe (2),
.BR wait4 (2),
.BR fclose (3),
.BR fflush (3),
.BR fopen (3),
.BR stdio (3),
.BR system (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2006, Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH POSIX_FALLOCATE 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
posix_fallocate \- allocate file space
.SH SYNOPSIS
.nf
.B #include <fcntl.h>
.sp
.BI "int posix_fallocate(int " fd ", off_t " offset ", off_t " len );
.fi
.sp
.ad l
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR posix_fallocate ():
.RS 4
_XOPEN_SOURCE\ >=\ 600 || _POSIX_C_SOURCE\ >=\ 200112L
.RE
.ad
.SH DESCRIPTION
The function
.BR posix_fallocate ()
ensures that disk space is allocated for the file referred to by the
descriptor
.I fd
for the bytes in the range starting at
.I offset
and continuing for
.I len
bytes.
After a successful call to
.BR posix_fallocate (),
subsequent writes to bytes in the specified range are
guaranteed not to fail because of lack of disk space.

If the size of the file is less than
.IR offset + len ,
then the file is increased to this size;
otherwise the file size is left unchanged.
.SH RETURN VALUE
.BR posix_fallocate ()
returns zero on success, or an error number on failure.
Note that
.I errno
is not set.
.SH ERRORS
.TP
.B EBADF
.I fd
is not a valid file descriptor, or is not opened for writing.
.TP
.B EFBIG
.I offset+len
exceeds the maximum file size.
.TP
.B EINVAL
.I offset
was less than 0, or
.I len
was less than or equal to 0.
.TP
.B ENODEV
.I fd
does not refer to a regular file.
.TP
.B ENOSPC
There is not enough space left on the device containing the file
referred to by
.IR fd .
.TP
.B ESPIPE
.I fd
refers to a pipe.
.SH VERSIONS
.BR posix_fallocate ()
is available since glibc 2.1.94.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR posix_fallocate ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
POSIX.1-2001.

POSIX.1-2008 says that an implementation
.I shall
give the
.B EINVAL
error if
.I len
was 0, or
.I offset
was less than 0.
POSIX.1-2001 says that an implementation
.I shall
give the
.B EINVAL
error if
.I len
is less than 0, or
.I offset
was less than 0, and
.I may
give the error if
.I len
equals zero.
.SH NOTES
In the glibc implementation,
.BR posix_fallocate ()
is implemented using
.BR fallocate (2).
.SH SEE ALSO
.BR fallocate (1),
.BR fallocate (2),
.BR lseek (2),
.BR posix_fadvise (2)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2015 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(GPLv2+)
.\"
.\" This program is free software; you can redistribute it and/or modify
.\" it under the terms of the GNU General Public License as published by
.\" the Free Software Foundation; either version 2 of the License, or
.\" (at your option) any later version.
.\"
.\" This program is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.TH POSIX_MADVISE 3 2015-02-03 Linux "Linux Programmer's Manual"
.SH NAME
posix_madvise \- give advice about patterns of memory usage
.SH SYNOPSIS
.nf
.B #include <sys/mman.h>

.BI "int posix_madvise(void *" addr ", size_t " len ", int " advice );
.fi

.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR posix_madvise ():
.br
.RS 4
.ad l
_POSIX_C_SOURCE >= 200112L || _XOPEN_SOURCE >= 600
.RE
.ad
.SH DESCRIPTION
The
.BR posix_madvise ()
function allows an application to advise the system about its expected
patterns of usage of memory in the address range starting at
.I addr
and continuing for
.I len
bytes.
The system is free to use this advice in order to improve the performance
of memory accesses (or to ignore the advice altogether), but calling
.BR posix_madvise ()
shall not affect the semantics of access to memory in the specified range.

The
.I advice
argument is one of the following:
.TP
.B POSIX_MADV_NORMAL
The application has no special advice regarding its memory usage patterns
for the specified address range.
This is the default behavior.
.TP
.B POSIX_MADV_SEQUENTIAL
The application expects to access the specified address range sequentially,
running from lower addresses to higher addresses.
Hence, pages in this region can be aggressively read ahead,
and may be freed soon after they are accessed.
.TP
.B POSIX_MADV_RANDOM
The application expects to access the specified address range randomly.
Thus, read ahead may be less useful than normally.
.TP
.B POSIX_MADV_WILLNEED
The application expects to access the specified address range
in the near future.
Thus, read ahead may be beneficial.
.TP
.B POSIX_MADV_DONTNEED
The application expects that it will not access the specified address range
in the near future.
.SH RETURN VALUE
On success,
.BR posix_madvise ()
returns 0.
On failure, it returns a positive error number.
.SH ERRORS
.TP
.B EINVAL
.I addr
is not a multiple of the system page size or
.I len
is negative.
.TP
.B EINVAL
.I advice
is invalid.
.TP
.B ENOMEM
Addresses in the specified range are partially or completely outside
the caller's address space.
.SH VERSIONS
Support for
.BR posix_madvise ()
first appeared in glibc version 2.2.
.SH CONFORMING TO
POSIX.1-2001.

POSIX.1-2008 specifies a further value for
.IR advice ,
.BR POSIX_FADV_NOREUSE ,
meaning that the specified data will be accessed only once.
This value is not currently supported.
.SH NOTES
POSIX.1 permits an implementation to generate an error if
.I len
is 0.
On Linux, specifying
.I len
as 0 is permitted (as a successful no-op).

In glibc, this function is implemented using
.BR madvise (2).
However, since glibc 2.6,
.BR POSIX_MADV_DONTNEED
is treated as a no-op, because the corresponding
.BR madvise (2)
value,
.BR MADV_DONTNEED ,
has destructive semantics.
.SH SEE ALSO
.BR madvise (2),
.BR posix_fadvise (2)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2001 by John Levon <moz@compsoc.man.ac.uk>
.\" Based in part on GNU libc documentation.
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" 2001-10-11, 2003-08-22, aeb, added some details
.\" 2012-03-23, Michael Kerrisk <mtk.manpages@mail.com>
.\"     Document pvalloc() and aligned_alloc()
.TH POSIX_MEMALIGN 3  2015-04-19 "GNU" "Linux Programmer's Manual"
.SH NAME
posix_memalign, aligned_alloc, memalign, valloc, pvalloc \- allocate aligned memory
.SH SYNOPSIS
.nf
.B #include <stdlib.h>
.sp
.BI "int posix_memalign(void **" memptr ", size_t " alignment ", size_t " size );
.BI "void *aligned_alloc(size_t " alignment ", size_t " size );
.BI "void *valloc(size_t " size );
.sp
.B #include <malloc.h>
.sp
.BI "void *memalign(size_t " alignment ", size_t " size );
.BI "void *pvalloc(size_t " size );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR posix_memalign ():
_POSIX_C_SOURCE\ >=\ 200112L || _XOPEN_SOURCE\ >=\ 600
.sp
.BR aligned_alloc ():
_ISOC11_SOURCE
.sp
.BR valloc ():
.br
.PD 0
.RS 4
.TP 4
Since glibc 2.12:
.nf
_BSD_SOURCE ||
    (_XOPEN_SOURCE\ >=\ 500 ||
        _XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED) &&
    !(_POSIX_C_SOURCE\ >=\ 200112L || _XOPEN_SOURCE\ >=\ 600)
.br
.fi
.TP
Before glibc 2.12:
_BSD_SOURCE || _XOPEN_SOURCE\ >=\ 500 ||
_XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED
.ad b
.br
(The (nonstandard) header file
.I <malloc.h>
also exposes the declaration of
.BR valloc ();
no feature test macros are required.)
.RE
.PD
.SH DESCRIPTION
The function
.BR posix_memalign ()
allocates
.I size
bytes and places the address of the allocated memory in
.IR "*memptr" .
The address of the allocated memory will be a multiple of
.IR "alignment" ,
which must be a power of two and a multiple of
.IR "sizeof(void\ *)" .
If
.I size
is 0, then
the value placed in
.IR "*memptr"
is either NULL,
.\" glibc does this:
or a unique pointer value that can later be successfully passed to
.BR free (3).

The obsolete function
.BR memalign ()
allocates
.I size
bytes and returns a pointer to the allocated memory.
The memory address will be a multiple of
.IR alignment ,
which must be a power of two.
.\" The behavior of memalign() for size==0 is as for posix_memalign()
.\" but no standards govern this.

The function
.BR aligned_alloc ()
is the same as
.BR memalign (),
except for the added restriction that
.I size
should be a multiple of
.IR alignment .

The obsolete function
.BR valloc ()
allocates
.I size
bytes and returns a pointer to the allocated memory.
The memory address will be a multiple of the page size.
It is equivalent to
.IR "memalign(sysconf(_SC_PAGESIZE),size)" .

The obsolete function
.BR pvalloc ()
is similar to
.BR valloc (),
but rounds the size of the allocation up to
the next multiple of the system page size.

For all of these functions, the memory is not zeroed.
.SH RETURN VALUE
.BR aligned_alloc (),
.BR memalign (),
.BR valloc (),
and
.BR pvalloc ()
return a pointer to the allocated memory, or NULL if the request fails.

.BR posix_memalign ()
returns zero on success, or one of the error values listed in the
next section on failure.
The value of
.I errno
is indeterminate after a call to
.BR posix_memalign ().
.SH ERRORS
.TP
.B EINVAL
The
.I alignment
argument was not a power of two, or was not a multiple of
.IR "sizeof(void\ *)" .
.TP
.B ENOMEM
There was insufficient memory to fulfill the allocation request.
.SH VERSIONS
The functions
.BR memalign (),
.BR valloc (),
and
.BR pvalloc ()
have been available in all Linux libc libraries.

The function
.BR aligned_alloc ()
was added to glibc in version 2.16.

The function
.BR posix_memalign ()
is available since glibc 2.1.91.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR aligned_alloc (),
.br
.BR memalign (),
.br
.BR posix_memalign ()
T}	Thread safety	MT-Safe
T{
.BR valloc (),
.br
.BR pvalloc ()
T}	Thread safety	MT-Unsafe init
.TE

.SH CONFORMING TO
The function
.BR valloc ()
appeared in 3.0BSD.
It is documented as being obsolete in 4.3BSD,
and as legacy in SUSv2.
It does not appear in POSIX.1-2001.

The function
.BR pvalloc ()
is a GNU extension.

The function
.BR memalign ()
appears in SunOS 4.1.3 but not in 4.4BSD.

The function
.BR posix_memalign ()
comes from POSIX.1d.

The function
.BR aligned_alloc ()
is specified in the C11 standard.
.\"
.SS Headers
Everybody agrees that
.BR posix_memalign ()
is declared in \fI<stdlib.h>\fP.

On some systems
.BR memalign ()
is declared in \fI<stdlib.h>\fP instead of \fI<malloc.h>\fP.

According to SUSv2,
.BR valloc ()
is declared in \fI<stdlib.h>\fP.
Libc4,5 and glibc declare it in \fI<malloc.h>\fP, and also in
\fI<stdlib.h>\fP
if suitable feature test macros are defined (see above).
.SH NOTES
On many systems there are alignment restrictions, for example, on buffers
used for direct block device I/O.
POSIX specifies the
.I "pathconf(path,_PC_REC_XFER_ALIGN)"
call that tells what alignment is needed.
Now one can use
.BR posix_memalign ()
to satisfy this requirement.

.BR posix_memalign ()
verifies that
.I alignment
matches the requirements detailed above.
.BR memalign ()
may not check that the
.I alignment
argument is correct.

POSIX requires that memory obtained from
.BR posix_memalign ()
can be freed using
.BR free (3).
Some systems provide no way to reclaim memory allocated with
.BR memalign ()
or
.BR valloc ()
(because one can pass to
.BR free (3)
only a pointer obtained from
.BR malloc (3),
while, for example,
.BR memalign ()
would call
.BR malloc (3)
and then align the obtained value).
.\" Other systems allow passing the result of
.\" .IR valloc ()
.\" to
.\" .IR free (3),
.\" but not to
.\" .IR realloc (3).
The glibc implementation
allows memory obtained from any of these functions to be
reclaimed with
.BR free (3).

The glibc
.BR malloc (3)
always returns 8-byte aligned memory addresses, so these functions are
needed only if you require larger alignment values.
.SH SEE ALSO
.BR brk (2),
.BR getpagesize (2),
.BR free (3),
.BR malloc (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2004 Michael Kerrisk
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH POSIX_OPENPT 3 2015-03-02 "" "Linux Programmer's Manual"
.SH NAME
posix_openpt \- open a pseudoterminal device
.SH SYNOPSIS
.nf
.B #include <stdlib.h>
.B #include <fcntl.h>
.sp
.BI "int posix_openpt(int " flags ");"
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR posix_openpt ():
_XOPEN_SOURCE\ >=\ 600
.ad b
.SH DESCRIPTION
The
.BR posix_openpt ()
function opens an unused pseudoterminal master device, returning a
file descriptor that can be used to refer to that device.

The
.I flags
argument is a bit mask that ORs together zero or more of
the following flags:
.TP
.B O_RDWR
Open the device for both reading and writing.
It is usual to specify this flag.
.TP
.B O_NOCTTY
Do not make this device the controlling terminal for the process.
.SH RETURN VALUE
On success,
.BR posix_openpt ()
returns a nonnegative file descriptor which is the lowest
numbered unused descriptor.
On failure, \-1 is returned, and
.I errno
is set to indicate the error.
.SH ERRORS
See
.BR open (2).
.SH VERSIONS
Glibc support for
.BR posix_openpt ()
has been provided since version 2.2.1.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR posix_openpt ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
.BR posix_openpt ()
is part of the UNIX 98 pseudoterminal support (see
.BR pts (4)).
This function is specified in POSIX.1-2001.
.SH NOTES
The
.BR posix_openpt ()
function is a recent invention in POSIX.
Some UNIX implementations that support System V
(aka UNIX 98) pseudoterminals don't have this function, but it
is easy to implement:
.in +4n
.nf

int
posix_openpt(int flags)
{
    return open("/dev/ptmx", flags);
}
.fi
.in
.PP
Calling
.BR posix_openpt ()
creates a pathname for the corresponding pseudoterminal slave device.
The pathname of the slave device can be obtained using
.BR ptsname (3).
The slave device pathname exists only as long as the master device is open.
.SH SEE ALSO
.BR open (2),
.BR getpt (3),
.BR grantpt (3),
.BR ptsname (3),
.BR unlockpt (3),
.BR pts (4),
.BR pty (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 2004 Andries Brouwer (aeb@cwi.nl)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH POW10 3  2015-03-02 "" "Linux Programmer's Manual"
.SH NAME
pow10, pow10f, pow10l \- base-10 power functions
.SH SYNOPSIS
.nf
.BR "#define _GNU_SOURCE" "         /* See feature_test_macros(7) */"
.B #include <math.h>
.sp
.BI "double pow10(double " x );
.br
.BI "float pow10f(float " x );
.br
.BI "long double pow10l(long double " x );
.fi
.sp
Link with \fI\-lm\fP.
.SH DESCRIPTION
These functions return the value of 10 raised to the power
.IR x .
.SH VERSIONS
These functions first appeared in glibc in version 2.1.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw28 lb lb
l l l.
Interface	Attribute	Value
T{
.BR pow10 (),
.BR pow10f (),
.BR pow10l ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
This is a GNU extension.
.SH NOTES
These functions are identical to the functions listed under
.BR exp10 (3).
.SH SEE ALSO
.BR exp10 (3),
.BR pow (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\" and Copyright 2008, Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified 1993-07-24 by Rik Faith (faith@cs.unc.edu)
.\" Modified 1995-08-14 by Arnt Gulbrandsen <agulbra@troll.no>
.\" Modified 2002-07-27 by Walter Harms
.\" 	(walter.harms@informatik.uni-oldenburg.de)
.TH POW 3  2015-04-19 "" "Linux Programmer's Manual"
.SH NAME
pow, powf, powl \- power functions
.SH SYNOPSIS
.nf
.B #include <math.h>
.sp
.BI "double pow(double " x ", double " y );
.br
.BI "float powf(float " x ", float " y );
.br
.BI "long double powl(long double " x ", long double " y );
.fi
.sp
Link with \fI\-lm\fP.
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR powf (),
.BR powl ():
.RS 4
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE\ >=\ 600 || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.ad
.SH DESCRIPTION
These functions return the value of
.I x
raised to the
power of
.IR y .
.SH RETURN VALUE
On success, these functions return the value of
.I x
to the power of
.IR y .

If
.I x
is a finite value less than 0, and
.I y
is a finite noninteger, a domain error occurs,
.\" The domain error is generated at least as far back as glibc 2.4
and a NaN is returned.

If the result overflows,
a range error occurs,
.\" The range error is generated at least as far back as glibc 2.4
and the functions return
.BR HUGE_VAL ,
.BR HUGE_VALF ,
or
.BR HUGE_VALL ,
respectively, with the mathematically correct sign.

If result underflows, and is not representable,
a range error occurs,
and 0.0 is returned.
.\" POSIX.1 does not specify the sign of the zero,
.\" but http://sources.redhat.com/bugzilla/show_bug.cgi?id=2678
.\" points out that the zero has the wrong sign in some cases.

Except as specified below, if
.I x
or
.I y
is a NaN, the result is a NaN.

If
.I x
is +1, the result is 1.0 (even if
.I y
is a NaN).

If
.I y
is 0, the result is 1.0 (even if
.I x
is a NaN).

If
.I x
is +0 (\-0),
and
.I y
is an odd integer greater than 0,
the result is +0 (\-0).

If
.I x
is 0,
and
.I y
greater than 0 and not an odd integer,
the result is +0.

If
.I x
is \-1,
and
.I y
is positive infinity or negative infinity,
the result is 1.0.

If the absolute value of
.I x
is less than 1,
and
.I y
is negative infinity,
the result is positive infinity.

If the absolute value of
.I x
is greater than 1,
and
.I y
is negative infinity,
the result is +0.

If the absolute value of
.I x
is less than 1,
and
.I y
is positive infinity,
the result is +0.

If the absolute value of
.I x
is greater than 1,
and
.I y
is positive infinity,
the result is positive infinity.

If
.I x
is negative infinity,
and
.I y
is an odd integer less than 0,
the result is \-0.

If
.I x
is negative infinity,
and
.I y
less than 0 and not an odd integer,
the result is +0.

If
.I x
is negative infinity,
and
.I y
is an odd integer greater than 0,
the result is negative infinity.

If
.I x
is negative infinity,
and
.I y
greater than 0 and not an odd integer,
the result is positive infinity.

If
.I x
is positive infinity,
and
.I y
less than 0,
the result is +0.

If
.I x
is positive infinity,
and
.I y
greater than 0,
the result is positive infinity.

If
.I x
is +0 or \-0,
and
.I y
is an odd integer less than 0,
a pole error occurs and
.BR HUGE_VAL ,
.BR HUGE_VALF ,
or
.BR HUGE_VALL ,
is returned,
with the same sign as
.IR x .

If
.I x
is +0 or \-0,
and
.I y
is less than 0 and not an odd integer,
a pole error occurs and
.\" The pole error is generated at least as far back as glibc 2.4
.RB + HUGE_VAL ,
.RB + HUGE_VALF ,
or
.RB + HUGE_VALL ,
is returned.
.SH ERRORS
.\" FIXME . review status of this error
.\" longstanding bug report for glibc:
.\" http://sources.redhat.com/bugzilla/show_bug.cgi?id=369
.\" For negative x, and -large and +large y, glibc 2.8 gives incorrect
.\" results
.\" pow(-0.5,-DBL_MAX)=nan
.\" EDOM FE_INVALID nan; fail-errno fail-except fail-result;
.\" FAIL (expected: range-error-overflow (ERANGE, FE_OVERFLOW); +INF)
.\"
.\" pow(-1.5,-DBL_MAX)=nan
.\" EDOM FE_INVALID nan; fail-errno fail-except fail-result;
.\" FAIL (expected: range-error-underflow (ERANGE, FE_UNDERFLOW); +0)
.\"
.\" pow(-0.5,DBL_MAX)=nan
.\" EDOM FE_INVALID nan; fail-errno fail-except fail-result;
.\" FAIL (expected: range-error-underflow (ERANGE, FE_UNDERFLOW); +0)
.\"
.\" pow(-1.5,DBL_MAX)=nan
.\" EDOM FE_INVALID nan; fail-errno fail-except fail-result;
.\" FAIL (expected: range-error-overflow (ERANGE, FE_OVERFLOW); +INF)
See
.BR math_error (7)
for information on how to determine whether an error has occurred
when calling these functions.
.PP
The following errors can occur:
.TP
Domain error: \fIx\fP is negative, and \fIy\fP is a finite noninteger
.I errno
is set to
.BR EDOM .
An invalid floating-point exception
.RB ( FE_INVALID )
is raised.
.TP
Pole error: \fIx\fP is zero, and \fIy\fP is negative
.I errno
is set to
.BR ERANGE
(but see BUGS).
A divide-by-zero floating-point exception
.RB ( FE_DIVBYZERO )
is raised.
.TP
Range error: the result overflows
.I errno
is set to
.BR ERANGE .
An overflow floating-point exception
.RB ( FE_OVERFLOW )
is raised.
.TP
Range error: the result underflows
.I errno
is set to
.BR ERANGE .
An underflow floating-point exception
.RB ( FE_UNDERFLOW )
is raised.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw21 lb lb
l l l.
Interface	Attribute	Value
T{
.BR pow (),
.BR powf (),
.BR powl ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C99, POSIX.1-2001, POSIX.1-2008.

The variant returning
.I double
also conforms to
SVr4, 4.3BSD, C89.
.SH BUGS
On 64-bits,
.\"
.\" https://sourceware.org/bugzilla/show_bug.cgi?id=13932
.BR pow ()
may be more than 10,000 times slower for some (rare) inputs
than for other nearby inputs.
This affects only
.BR pow (),
and not
.BR powf ()
nor
.BR powl ().

In glibc 2.9 and earlier,
.\"
.\" http://sources.redhat.com/bugzilla/show_bug.cgi?id=6776
when a pole error occurs,
.I errno
is set to
.BR EDOM
instead of the POSIX-mandated
.BR ERANGE .
Since version 2.10,
.\" or possibly 2.9, I haven't found the source code change
.\" and I don't have a 2.9 system to test
glibc does the right thing.

If
.I x
is negative,
then large negative or positive
.I y
values yield a NaN as the function result, with
.I errno
set to
.BR EDOM ,
and an invalid
.RB ( FE_INVALID )
floating-point exception.
For example, with
.BR pow (),
one sees this behavior when the absolute value of
.I y
is greater than about 9.223373e18.
.\" see bug http://sources.redhat.com/bugzilla/show_bug.cgi?id=3866
.\" and http://sources.redhat.com/bugzilla/show_bug.cgi?id=369

In version 2.3.2 and earlier,
.\" FIXME . Actually, 2.3.2 is the earliest test result I have; so yet
.\" to confirm if this error occurs only in 2.3.2.
when an overflow or underflow error occurs, glibc's
.BR pow ()
generates a bogus invalid floating-point exception
.RB ( FE_INVALID )
in addition to the overflow or underflow exception.
.SH SEE ALSO
.BR cbrt (3),
.BR cpow (3),
.BR sqrt (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1999 Andries Brouwer (aeb@cwi.nl)
.\"
.\" Earlier versions of this page influenced the present text.
.\" It was derived from a Berkeley page with version
.\"       @(#)printf.3    6.14 (Berkeley) 7/30/91
.\" converted for Linux by faith@cs.unc.edu, updated by
.\" Helmut.Geyer@iwr.uni-heidelberg.de, agulbra@troll.no and Bruno Haible.
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.\" 1999-11-25 aeb - Rewritten, using SUSv2 and C99.
.\" 2000-07-26 jsm28@hermes.cam.ac.uk - three small fixes
.\" 2000-10-16 jsm28@hermes.cam.ac.uk - more fixes
.\"
.TH PRINTF 3  2015-04-19 "GNU" "Linux Programmer's Manual"
.SH NAME
printf, fprintf, dprintf, sprintf, snprintf, vprintf, vfprintf, vdprintf,
vsprintf, vsnprintf \- formatted output conversion
.SH SYNOPSIS
.B #include <stdio.h>
.sp
.BI "int printf(const char *" format ", ...);"
.br
.BI "int fprintf(FILE *" stream ", const char *" format ", ...);"
.br
.BI "int dprintf(int " fd ", const char *" format ", ...);"
.br
.BI "int sprintf(char *" str ", const char *" format ", ...);"
.br
.BI "int snprintf(char *" str ", size_t " size ", const char *" format ", ...);"
.sp
.B #include <stdarg.h>
.sp
.BI "int vprintf(const char *" format ", va_list " ap );
.br
.BI "int vfprintf(FILE *" stream ", const char *" format ", va_list " ap );
.br
.BI "int vdprintf(int " fd ", const char *" format ", va_list " ap );
.br
.BI "int vsprintf(char *" str ", const char *" format ", va_list " ap );
.br
.BI "int vsnprintf(char *" str ", size_t " size ", const char *" format \
", va_list " ap );
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR snprintf (),
.BR vsnprintf ():
.RS 4
_BSD_SOURCE || _XOPEN_SOURCE\ >=\ 500 || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I "cc -std=c99"
.RE
.sp
.BR dprintf (),
.BR vdprintf ():
.PD 0
.RS 4
.TP 4
Since glibc 2.10:
_XOPEN_SOURCE\ >=\ 700 || _POSIX_C_SOURCE\ >=\ 200809L
.TP
Before glibc 2.10:
_GNU_SOURCE
.RE
.ad
.PD
.SH DESCRIPTION
The functions in the
.BR printf ()
family produce output according to a
.I format
as described below.
The functions
.BR printf ()
and
.BR vprintf ()
write output to
.IR stdout ,
the standard output stream;
.BR fprintf ()
and
.BR vfprintf ()
write output to the given output
.IR stream ;
.BR sprintf (),
.BR snprintf (),
.BR vsprintf ()
and
.BR vsnprintf ()
write to the character string
.IR str .

The function
.BR dprintf ()
is the same as
.BR fprintf (3)
except that it outputs to a file descriptor,
.IR fd ,
instead of to a
.I stdio
stream.

The functions
.BR snprintf ()
and
.BR vsnprintf ()
write at most
.I size
bytes (including the terminating null byte (\(aq\e0\(aq)) to
.IR str .

The functions
.BR vprintf (),
.BR vfprintf (),
.BR vdprintf (),
.BR vsprintf (),
.BR vsnprintf ()
are equivalent to the functions
.BR printf (),
.BR fprintf (),
.BR dprintf (),
.BR sprintf (),
.BR snprintf (),
respectively, except that they are called with a
.I va_list
instead of a variable number of arguments.
These functions do not call the
.I va_end
macro.
Because they invoke the
.I va_arg
macro, the value of
.I ap
is undefined after the call.
See
.BR stdarg (3).

All of these functions write the output under the control of a
.I format
string that specifies how subsequent arguments (or arguments accessed via
the variable-length argument facilities of
.BR stdarg (3))
are converted for output.

C99 and POSIX.1-2001 specify that the results are undefined if a call to
.BR sprintf (),
.BR snprintf (),
.BR vsprintf (),
or
.BR vsnprintf ()
would cause copying to take place between objects that overlap
(e.g., if the target string array and one of the supplied input arguments
refer to the same buffer).
See NOTES.
.SS Format of the format string
The format string is a character string, beginning and ending
in its initial shift state, if any.
The format string is composed of zero or more directives: ordinary
characters (not
.BR % ),
which are copied unchanged to the output stream;
and conversion specifications, each of which results in fetching zero or
more subsequent arguments.
Each conversion specification is introduced by
the character
.BR % ,
and ends with a
.IR "conversion specifier" .
In between there may be (in this order) zero or more
.IR flags ,
an optional minimum
.IR "field width" ,
an optional
.I precision
and an optional
.IR "length modifier" .

The arguments must correspond properly (after type promotion) with the
conversion specifier.
By default, the arguments are used in the order
given, where each \(aq*\(aq (see
.I "Field width"
and
.I Precision
below) and each conversion specifier asks for the next
argument (and it is an error if insufficiently many arguments are given).
One can also specify explicitly which argument is taken,
at each place where an argument is required, by writing "%m$" instead
of \(aq%\(aq and "*m$" instead of \(aq*\(aq,
where the decimal integer \fIm\fP denotes
the position in the argument list of the desired argument, indexed starting
from 1.
Thus,
.in +4n
.nf

printf("%*d", width, num);

.fi
.in
and
.in +4n
.nf

printf("%2$*1$d", width, num);

.fi
.in
are equivalent.
The second style allows repeated references to the
same argument.
The C99 standard does not include the style using \(aq$\(aq,
which comes from the Single UNIX Specification.
If the style using
\(aq$\(aq is used, it must be used throughout for all conversions taking an
argument and all width and precision arguments, but it may be mixed
with "%%" formats, which do not consume an argument.
There may be no
gaps in the numbers of arguments specified using \(aq$\(aq; for example, if
arguments 1 and 3 are specified, argument 2 must also be specified
somewhere in the format string.

For some numeric conversions a radix character ("decimal point") or
thousands' grouping character is used.
The actual character used
depends on the
.B LC_NUMERIC
part of the locale.
The POSIX locale
uses \(aq.\(aq as radix character, and does not have a grouping character.
Thus,
.in +4n
.nf

    printf("%\(aq.2f", 1234567.89);

.fi
.in
results in "1234567.89" in the POSIX locale, in "1234567,89" in the
nl_NL locale, and in "1.234.567,89" in the da_DK locale.
.SS Flag characters
The character % is followed by zero or more of the following flags:
.TP
.B #
The value should be converted to an "alternate form".
For
.B o
conversions, the first character of the output string is made zero
(by prefixing a 0 if it was not zero already).
For
.B x
and
.B X
conversions, a nonzero result has the string "0x" (or "0X" for
.B X
conversions) prepended to it.
For
.BR a ,
.BR A ,
.BR e ,
.BR E ,
.BR f ,
.BR F ,
.BR g ,
and
.B G
conversions, the result will always contain a decimal point, even if no
digits follow it (normally, a decimal point appears in the results of those
conversions only if a digit follows).
For
.B g
and
.B G
conversions, trailing zeros are not removed from the result as they would
otherwise be.
For other conversions, the result is undefined.
.TP
.B \&0
The value should be zero padded.
For
.BR d ,
.BR i ,
.BR o ,
.BR u ,
.BR x ,
.BR X ,
.BR a ,
.BR A ,
.BR e ,
.BR E ,
.BR f ,
.BR F ,
.BR g ,
and
.B G
conversions, the converted value is padded on the left with zeros rather
than blanks.
If the
.B \&0
and
.B \-
flags both appear, the
.B \&0
flag is ignored.
If a precision is given with a numeric conversion
.RB ( d ,
.BR i ,
.BR o ,
.BR u ,
.BR x ,
and
.BR X ),
the
.B \&0
flag is ignored.
For other conversions, the behavior is undefined.
.TP
.B \-
The converted value is to be left adjusted on the field boundary.
(The default is right justification.)
The converted value is padded on the right with blanks, rather
than on the left with blanks or zeros.
A
.B \-
overrides a
.B \&0
if both are given.
.TP
.B \(aq \(aq
(a space) A blank should be left before a positive number
(or empty string) produced by a signed conversion.
.TP
.B +
A sign (+ or \-) should always be placed before a number produced by a signed
conversion.
By default, a sign is used only for negative numbers.
A
.B +
overrides a space if both are used.
.PP
The five flag characters above are defined in the C99 standard.
The Single UNIX Specification specifies one further flag character.
.TP
.B \(aq
For decimal conversion
.RB ( i ,
.BR d ,
.BR u ,
.BR f ,
.BR F ,
.BR g ,
.BR G )
the output is to be grouped with thousands' grouping characters
if the locale information indicates any.
Note that many versions of
.BR gcc (1)
cannot parse this option and will issue a warning.
(SUSv2 did not
include \fI%\(aqF\fP, but SUSv3 added it.)
.PP
glibc 2.2 adds one further flag character.
.TP
.B I
For decimal integer conversion
.RB ( i ,
.BR d ,
.BR u )
the output uses the locale's alternative output digits, if any.
For example, since glibc 2.2.3 this will give Arabic-Indic digits
in the Persian ("fa_IR") locale.
.\" outdigits keyword in locale file
.SS Field width
An optional decimal digit string (with nonzero first digit) specifying
a minimum field width.
If the converted value has fewer characters
than the field width, it will be padded with spaces on the left
(or right, if the left-adjustment flag has been given).
Instead of a decimal digit string one may write "*" or "*m$"
(for some decimal integer \fIm\fP) to specify that the field width
is given in the next argument, or in the \fIm\fP-th argument, respectively,
which must be of type
.IR int .
A negative field width is taken as a \(aq\-\(aq flag followed by a
positive field width.
In no case does a nonexistent or small field width cause truncation of a
field; if the result of a conversion is wider than the field width, the
field is expanded to contain the conversion result.
.SS Precision
An optional precision, in the form of a period (\(aq.\(aq)  followed by an
optional decimal digit string.
Instead of a decimal digit string one may write "*" or "*m$"
(for some decimal integer \fIm\fP) to specify that the precision
is given in the next argument, or in the \fIm\fP-th argument, respectively,
which must be of type
.IR int .
If the precision is given as just \(aq.\(aq, the precision is taken to
be zero.
A negative precision is taken as if the precision were omitted.
This gives the minimum number of digits to appear for
.BR d ,
.BR i ,
.BR o ,
.BR u ,
.BR x ,
and
.B X
conversions, the number of digits to appear after the radix character for
.BR a ,
.BR A ,
.BR e ,
.BR E ,
.BR f ,
and
.B F
conversions, the maximum number of significant digits for
.B g
and
.B G
conversions, or the maximum number of characters to be printed from a
string for
.B s
and
.B S
conversions.
.SS Length modifier
Here, "integer conversion" stands for
.BR d ,
.BR i ,
.BR o ,
.BR u ,
.BR x ,
or
.B X
conversion.
.TP
.B hh
A following integer conversion corresponds to a
.I signed char
or
.I unsigned char
argument, or a following
.B n
conversion corresponds to a pointer to a
.I signed char
argument.
.TP
.B h
A following integer conversion corresponds to a
.I short int
or
.I unsigned short int
argument, or a following
.B n
conversion corresponds to a pointer to a
.I short int
argument.
.TP
.B l
(ell) A following integer conversion corresponds to a
.I long int
or
.I unsigned long int
argument, or a following
.B n
conversion corresponds to a pointer to a
.I long int
argument, or a following
.B c
conversion corresponds to a
.I wint_t
argument, or a following
.B s
conversion corresponds to a pointer to
.I wchar_t
argument.
.TP
.B ll
(ell-ell).
A following integer conversion corresponds to a
.I long long int
or
.I unsigned long long int
argument, or a following
.B n
conversion corresponds to a pointer to a
.I long long int
argument.
.TP
.B L
A following
.BR a ,
.BR A ,
.BR e ,
.BR E ,
.BR f ,
.BR F ,
.BR g ,
or
.B G
conversion corresponds to a
.I long double
argument.
(C99 allows %LF, but SUSv2 does not.)
.\" .TP
.\" .B q
.\" ("quad". 4.4BSD and Linux libc5 only.
.\" Don't use.)
This is a synonym for
.BR ll .
.TP
.B j
A following integer conversion corresponds to an
.I intmax_t
or
.I uintmax_t
argument, or a following
.B n
conversion corresponds to a pointer to an
.I intmax_t
argument.
.TP
.B z
A following integer conversion corresponds to a
.I size_t
or
.I ssize_t
argument, or a following
.B n
conversion corresponds to a pointer to a
.I size_t
argument.
.\" (Linux libc5 has
.\" .B Z
.\" with this meaning.
.\" Don't use it.)
.TP
.B t
A following integer conversion corresponds to a
.I ptrdiff_t
argument, or a following
.B n
conversion corresponds to a pointer to a
.I ptrdiff_t
argument.
.PP
SUSv3 specifies all of the above.
SUSv2 specified only the length modifiers
.B h
(in
.BR hd ,
.BR hi ,
.BR ho ,
.BR hx ,
.BR hX ,
.BR hn )
and
.B l
(in
.BR ld ,
.BR li ,
.BR lo ,
.BR lx ,
.BR lX ,
.BR ln ,
.BR lc ,
.BR ls )
and
.B L
(in
.BR Le ,
.BR LE ,
.BR Lf ,
.BR Lg ,
.BR LG ).
.SS Conversion specifiers
A character that specifies the type of conversion to be applied.
The conversion specifiers and their meanings are:
.TP
.BR d ", " i
The
.I int
argument is converted to signed decimal notation.
The precision, if any, gives the minimum number of digits
that must appear; if the converted value requires fewer digits, it is
padded on the left with zeros.
The default precision is 1.
When 0 is printed with an explicit precision 0, the output is empty.
.TP
.BR o ", " u ", " x ", " X
The
.I "unsigned int"
argument is converted to unsigned octal
.RB ( o ),
unsigned decimal
.RB ( u ),
or unsigned hexadecimal
.RB ( x
and
.BR X )
notation.
The letters
.B abcdef
are used for
.B x
conversions; the letters
.B ABCDEF
are used for
.B X
conversions.
The precision, if any, gives the minimum number of digits
that must appear; if the converted value requires fewer digits, it is
padded on the left with zeros.
The default precision is 1.
When 0 is printed with an explicit precision 0, the output is empty.
.TP
.BR e ", " E
The
.I double
argument is rounded and converted in the style
.RB [\-]d \&. ddd e \(+-dd
where there is one digit before the decimal-point character and the number
of digits after it is equal to the precision; if the precision is missing,
it is taken as 6; if the precision is zero, no decimal-point character
appears.
An
.B E
conversion uses the letter
.B E
(rather than
.BR e )
to introduce the exponent.
The exponent always contains at least two
digits; if the value is zero, the exponent is 00.
.TP
.BR f ", " F
The
.I double
argument is rounded and converted to decimal notation in the style
.RB [\-]ddd \&. ddd,
where the number of digits after the decimal-point character is equal to
the precision specification.
If the precision is missing, it is taken as
6; if the precision is explicitly zero, no decimal-point character appears.
If a decimal point appears, at least one digit appears before it.

(SUSv2 does not know about
.B F
and says that character string representations for infinity and NaN
may be made available.
SUSv3 adds a specification for
.BR F .
The C99 standard specifies "[\-]inf" or "[\-]infinity"
for infinity, and a string starting with "nan" for NaN, in the case of
.B f
conversion, and "[\-]INF" or "[\-]INFINITY" or "NAN*" in the case of
.B F
conversion.)
.TP
.BR g ", " G
The
.I double
argument is converted in style
.B f
or
.B e
(or
.B F
or
.B E
for
.B G
conversions).
The precision specifies the number of significant digits.
If the precision is missing, 6 digits are given; if the precision is zero,
it is treated as 1.
Style
.B e
is used if the exponent from its conversion is less than \-4 or greater
than or equal to the precision.
Trailing zeros are removed from the
fractional part of the result; a decimal point appears only if it is
followed by at least one digit.
.TP
.BR a ", " A
(C99; not in SUSv2, but added in SUSv3)
For
.B a
conversion, the
.I double
argument is converted to hexadecimal notation (using the letters abcdef)
in the style
.RB [\-] 0x h \&. hhhh p \(+-;
for
.B A
conversion the prefix
.BR 0X ,
the letters ABCDEF, and the exponent separator
.B P
is used.
There is one hexadecimal digit before the decimal point,
and the number of digits after it is equal to the precision.
The default precision suffices for an exact representation of the value
if an exact representation in base 2 exists
and otherwise is sufficiently large to distinguish values of type
.IR double .
The digit before the decimal point is unspecified for nonnormalized
numbers, and nonzero but otherwise unspecified for normalized numbers.
.TP
.B c
If no
.B l
modifier is present, the
.I int
argument is converted to an
.IR "unsigned char" ,
and the resulting character is written.
If an
.B l
modifier is present, the
.I wint_t
(wide character) argument is converted to a multibyte sequence by a call
to the
.BR wcrtomb (3)
function, with a conversion state starting in the initial state, and the
resulting multibyte string is written.
.TP
.B s
If no
.B l
modifier is present: The
.I "const char\ *"
argument is expected to be a pointer to an array of character type (pointer
to a string).
Characters from the array are written up to (but not
including) a terminating null byte (\(aq\\0\(aq);
if a precision is specified, no more than the number specified
are written.
If a precision is given, no null byte need be present;
if the precision is not specified, or is greater than the size of the
array, the array must contain a terminating null byte.

If an
.B l
modifier is present: The
.I "const wchar_t\ *"
argument is expected to be a pointer to an array of wide characters.
Wide characters from the array are converted to multibyte characters
(each by a call to the
.BR wcrtomb (3)
function, with a conversion state starting in the initial state before
the first wide character), up to and including a terminating null
wide character.
The resulting multibyte characters are written up to
(but not including) the terminating null byte.
If a precision is
specified, no more bytes than the number specified are written, but
no partial multibyte characters are written.
Note that the precision
determines the number of
.I bytes
written, not the number of
.I wide characters
or
.IR "screen positions" .
The array must contain a terminating null wide character, unless a
precision is given and it is so small that the number of bytes written
exceeds it before the end of the array is reached.
.TP
.B C
(Not in C99 or C11, but in SUSv2, SUSv3, and SUSv4.)
Synonym for
.BR lc .
Don't use.
.TP
.B S
(Not in C99 or C11, but in SUSv2, SUSv3, and SUSv4.)
Synonym for
.BR ls .
Don't use.
.TP
.B p
The
.I "void\ *"
pointer argument is printed in hexadecimal (as if by
.B %#x
or
.BR %#lx ).
.TP
.B n
The number of characters written so far is stored into the integer
pointed to by the corresponding argument.
That argument shall be an
.IR "int\ *" ,
or variant whose size matches the (optionally)
supplied integer length modifier.
No argument is converted.
The behavior is undefined if the conversion specification includes
any flags, a field width, or a precision.
.TP
.B m
(Glibc extension.)
Print output of
.IR strerror(errno) .
No argument is required.
.TP
.B %
A \(aq%\(aq is written.
No argument is converted.
The complete conversion
specification is \(aq%%\(aq.
.SH RETURN VALUE
Upon successful return, these functions return the number of characters
printed (excluding the null byte used to end output to strings).

The functions
.BR snprintf ()
and
.BR vsnprintf ()
do not write more than
.I size
bytes (including the terminating null byte (\(aq\e0\(aq)).
If the output was truncated due to this limit, then the return value
is the number of characters (excluding the terminating null byte)
which would have been written to the final string if enough space
had been available.
Thus, a return value of
.I size
or more means that the output was truncated.
(See also below under NOTES.)

If an output error is encountered, a negative value is returned.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw23 lb lb
l l l.
Interface	Attribute	Value
T{
.BR printf (),
.BR fprintf (),
.br
.BR sprintf (),
.BR snprintf (),
.br
.BR vprintf (),
.BR vfprintf (),
.br
.BR vsprintf (),
.BR vsnprintf ()
T}	Thread safety	MT-Safe locale
.TE

.SH CONFORMING TO
The
.BR fprintf (),
.BR printf (),
.BR sprintf (),
.BR vprintf (),
.BR vfprintf (),
and
.BR vsprintf ()
functions conform to C89 and C99.

The
.BR snprintf ()
and
.BR vsnprintf ()
functions conform to C99.

The
.BR dprintf ()
and
.BR vdprintf ()
functions were originally GNU extensions that were later standardized
in POSIX.1-2008.
.PP
Concerning the return value of
.BR snprintf (),
SUSv2 and C99 contradict each other: when
.BR snprintf ()
is called with
.IR size =0
then SUSv2 stipulates an unspecified return value less than 1,
while C99 allows
.I str
to be NULL in this case, and gives the return value (as always)
as the number of characters that would have been written in case
the output string has been large enough.
SUSv3 and later align their specification of
.BR snprintf ()
with C99.
.\" .PP
.\" Linux libc4 knows about the five C standard flags.
.\" It knows about the length modifiers \fBh\fP, \fBl\fP, \fBL\fP,
.\" and the conversions
.\" \fBc\fP, \fBd\fP, \fBe\fP, \fBE\fP, \fBf\fP, \fBF\fP,
.\" \fBg\fP, \fBG\fP, \fBi\fP, \fBn\fP, \fBo\fP, \fBp\fP,
.\" \fBs\fP, \fBu\fP, \fBx\fP, and \fBX\fP,
.\" where \fBF\fP is a synonym for \fBf\fP.
.\" Additionally, it accepts \fBD\fP, \fBO\fP, and \fBU\fP as synonyms
.\" for \fBld\fP, \fBlo\fP, and \fBlu\fP.
.\" (This is bad, and caused serious bugs later, when
.\" support for \fB%D\fP disappeared.)
.\" No locale-dependent radix character,
.\" no thousands' separator, no NaN or infinity, no "%m$" and "*m$".
.\" .PP
.\" Linux libc5 knows about the five C standard flags and the \(aq flag,
.\" locale, "%m$" and "*m$".
.\" It knows about the length modifiers \fBh\fP, \fBl\fP, \fBL\fP,
.\" \fBZ\fP, and \fBq\fP, but accepts \fBL\fP and \fBq\fP
.\" both for \fIlong double\fP and for \fIlong long int\fP (this is a bug).
.\" It no longer recognizes \fBF\fP, \fBD\fP, \fBO\fP, and \fBU\fP,
.\" but adds the conversion character
.\" .BR m ,
.\" which outputs
.\" .IR strerror(errno) .
.\" .PP
.\" glibc 2.0 adds conversion characters \fBC\fP and \fBS\fP.
.PP
glibc 2.1 adds length modifiers \fBhh\fP, \fBj\fP, \fBt\fP, and \fBz\fP
and conversion characters \fBa\fP and \fBA\fP.
.PP
glibc 2.2 adds the conversion character \fBF\fP with C99 semantics,
and the flag character \fBI\fP.
.SH NOTES
Some programs imprudently rely on code such as the following

    sprintf(buf, "%s some further text", buf);

to append text to
.IR buf .
However, the standards explicitly note that the results are undefined
if source and destination buffers overlap when calling
.BR sprintf (),
.BR snprintf (),
.BR vsprintf (),
and
.BR vsnprintf ().
.\" http://sourceware.org/bugzilla/show_bug.cgi?id=7075
Depending on the version of
.BR gcc (1)
used, and the compiler options employed, calls such as the above will
.B not
produce the expected results.

The glibc implementation of the functions
.BR snprintf ()
and
.BR vsnprintf ()
conforms to the C99 standard, that is, behaves as described above,
since glibc version 2.1.
Until glibc 2.0.6, they would return \-1
when the output was truncated.
.\" .SH HISTORY
.\" UNIX V7 defines the three routines
.\" .BR printf (),
.\" .BR fprintf (),
.\" .BR sprintf (),
.\" and has the flag \-, the width or precision *, the length modifier l,
.\" and the conversions doxfegcsu, and also D,O,U,X as synonyms for ld,lo,lu,lx.
.\" This is still true for 2.9.1BSD, but 2.10BSD has the flags
.\" #, + and <space> and no longer mentions D,O,U,X.
.\" 2.11BSD has
.\" .BR vprintf (),
.\" .BR vfprintf (),
.\" .BR vsprintf (),
.\" and warns not to use D,O,U,X.
.\" 4.3BSD Reno has the flag 0, the length modifiers h and L,
.\" and the conversions n, p, E, G, X (with current meaning)
.\" and deprecates D,O,U.
.\" 4.4BSD introduces the functions
.\" .BR snprintf ()
.\" and
.\" .BR vsnprintf (),
.\" and the length modifier q.
.\" FreeBSD also has functions
.\" .BR asprintf ()
.\" and
.\" .BR vasprintf (),
.\" that allocate a buffer large enough for
.\" .BR sprintf ().
.\" In glibc there are functions
.\" .BR dprintf ()
.\" and
.\" .BR vdprintf ()
.\" that print to a file descriptor instead of a stream.
.SH BUGS
Because
.BR sprintf ()
and
.BR vsprintf ()
assume an arbitrarily long string, callers must be careful not to overflow
the actual space; this is often impossible to assure.
Note that the length
of the strings produced is locale-dependent and difficult to predict.
Use
.BR snprintf ()
and
.BR vsnprintf ()
instead (or
.BR asprintf (3)
and
.BR vasprintf (3)).
.\" .PP
.\" Linux libc4.[45] does not have a
.\" .BR snprintf (),
.\" but provides a libbsd that contains an
.\" .BR snprintf ()
.\" equivalent to
.\" .BR sprintf (),
.\" that is, one that ignores the
.\" .I size
.\" argument.
.\" Thus, the use of
.\" .BR snprintf ()
.\" with early libc4 leads to serious security problems.
.PP
Code such as
.BI printf( foo );
often indicates a bug, since
.I foo
may contain a % character.
If
.I foo
comes from untrusted user input, it may contain \fB%n\fP, causing the
.BR printf ()
call to write to memory and creating a security hole.
.\" .PP
.\" Some floating-point conversions under early libc4
.\" caused memory leaks.
.SH EXAMPLE
To print
.I Pi
to five decimal places:
.in +4n
.nf

#include <math.h>
#include <stdio.h>
fprintf(stdout, "pi = %.5f\en", 4 * atan(1.0));
.fi
.in
.PP
To print a date and time in the form "Sunday, July 3, 10:02",
where
.I weekday
and
.I month
are pointers to strings:
.in +4n
.nf

#include <stdio.h>
fprintf(stdout, "%s, %s %d, %.2d:%.2d\en",
        weekday, month, day, hour, min);
.fi
.in
.PP
Many countries use the day-month-year order.
Hence, an internationalized version must be able to print
the arguments in an order specified by the format:
.in +4n
.nf

#include <stdio.h>
fprintf(stdout, format,
        weekday, month, day, hour, min);

.fi
.in
where
.I format
depends on locale, and may permute the arguments.
With the value:
.in +4n
.nf

"%1$s, %3$d. %2$s, %4$d:%5$.2d\en"

.fi
.in
one might obtain "Sonntag, 3. Juli, 10:02".
.PP
To allocate a sufficiently large string and print into it
(code correct for both glibc 2.0 and glibc 2.1):
.nf

#include <stdio.h>
#include <stdlib.h>
#include <stdarg.h>

char *
make_message(const char *fmt, ...)
{
    int size = 0;
    char *p = NULL;
    va_list ap;

    /* Determine required size */

    va_start(ap, fmt);
    size = vsnprintf(p, size, fmt, ap);
    va_end(ap);

    if (size < 0)
        return NULL;

    size++;             /* For '\\0' */
    p = malloc(size);
    if (p == NULL)
        return NULL;

    va_start(ap, fmt);
    size = vsnprintf(p, size, fmt, ap);
    if (size < 0) {
        free(p);
        return NULL;
    }
    va_end(ap);

    return p;
}
.fi
.PP
If truncation occurs in glibc versions prior to 2.0.6, this is treated as an
error instead of being handled gracefully.
.SH SEE ALSO
.BR printf (1),
.BR asprintf (3),
.BR dprintf (3),
.BR puts (3),
.BR scanf (3),
.BR setlocale (3),
.BR wcrtomb (3),
.BR wprintf (3),
.BR locale (5)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 Rickard E. Faith (faith@cs.unc.edu)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified Fri Jun 23 01:35:19 1995 Andries Brouwer <aeb@cwi.nl>
.\" (prompted by Bas V. de Bakker <bas@phys.uva.nl>)
.\" Corrected (and moved to man3), 980612, aeb
.TH PROFIL 3 2014-07-08 "Linux" "Linux Programmer's Manual"
.SH NAME
profil \- execution time profile
.SH SYNOPSIS
.nf
.B #include <unistd.h>
.sp
.BI "int profil(unsigned short *" buf ", size_t " bufsiz ,
.BI "           size_t " offset ", unsigned int " scale );
.sp
.fi
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR profil ():
_BSD_SOURCE || (_XOPEN_SOURCE && _XOPEN_SOURCE\ <\ 500)
.SH DESCRIPTION
This routine provides a means to find out in what areas your program
spends most of its time.
The argument
.I buf
points to
.I bufsiz
bytes of core.
Every virtual 10 milliseconds, the user's program counter (PC)
is examined:
.I offset
is subtracted and the result is multiplied by
.I scale
and divided by 65536.
If the resulting value is less than
.IR bufsiz ,
then the corresponding entry in
.I buf
is incremented.
If
.I buf
is NULL, profiling is disabled.
.SH RETURN VALUE
Zero is always returned.
.SH CONFORMING TO
Similar to a call in SVr4 (but not POSIX.1-2001).
.SH BUGS
.BR profil ()
cannot be used on a program that also uses
.B ITIMER_PROF
interval timers (see
.BR setitimer (2)).

True kernel profiling provides more accurate results.
Libc 4.4 contained a kernel patch providing a system call profil.
.SH SEE ALSO
.BR gprof (1),
.BR sprof (1),
.BR setitimer (2),
.BR sigaction (2),
.BR signal (2)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2006 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(PERMISSIVE_MISC)
.\" Permission is hereby granted, free of charge, to any person obtaining
.\" a copy of this software and associated documentation files (the
.\" "Software"), to deal in the Software without restriction, including
.\" without limitation the rights to use, copy, modify, merge, publish,
.\" distribute, sublicense, and/or sell copies of the Software, and to
.\" permit persons to whom the Software is furnished to do so, subject to
.\" the following conditions:
.\"
.\" The above copyright notice and this permission notice shall be
.\" included in all copies or substantial portions of the Software.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
.\" EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
.\" MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
.\" IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
.\" CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
.\" TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
.\" SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
.\" %%%LICENSE_END
.\"
.TH INVOCATION_NAME 3 2006-04-29 "GNU" "Linux Programmer's Manual"
.SH NAME
program_invocation_name, program_invocation_short_name \- \
obtain name used to invoke calling program
.SH SYNOPSIS
.nf
.BR "#define _GNU_SOURCE" "         /* See feature_test_macros(7) */"
.B #include <errno.h>

.BI "extern char *" program_invocation_name ;
.BI "extern char *" program_invocation_short_name ;
.fi
.SH DESCRIPTION
.I program_invocation_name
contains the name that was used to invoke the calling program.
This is the same as the value of
.I argv[0]
in
.IR main (),
with the difference that the scope of
.I program_invocation_name
is global.

.I program_invocation_short_name
contains the basename component of name that was used to invoke
the calling program.
That is, it is the same value as
.IR program_invocation_name ,
with all text up to and including the final slash (/), if any, removed.

These variables are automatically initialized by the glibc run-time
startup code.
.SH CONFORMING TO
These variables are GNU extensions, and should not be
used in programs intended to be portable.
.SH NOTES
The Linux-specific
.I /proc/[number]/cmdline
file provides access to similar information.
.SH SEE ALSO
.BR proc (5)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified Sat Jul 24 18:45:17 1993 by Rik Faith (faith@cs.unc.edu)
.TH PSIGNAL 3  2010-10-06 "GNU" "Linux Programmer's Manual"
.SH NAME
psignal, psiginfo \- print signal message
.SH SYNOPSIS
.nf
.B #include <signal.h>
.sp
.BI "void psignal(int " sig ", const char *" s );
.BI "void psiginfo(const siginfo_t *" pinfo ", const char *" s );
.sp
.BI "extern const char *const " sys_siglist [];
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR psignal ():
_SVID_SOURCE || _BSD_SOURCE
.br
.BR psiginfo ():
_XOPEN_SOURCE\ >=\ 700 || _POSIX_C_SOURCE\ >=\ 200809L
.br
.IR sys_siglist :
_BSD_SOURCE
.SH DESCRIPTION
The
.BR psignal ()
function displays a message on \fIstderr\fP
consisting of the string \fIs\fP, a colon, a space, a string
describing the signal number \fIsig\fP, and a trailing newline.
If the string \fIs\fP is NULL or empty, the colon and space are omitted.
If \fIsig\fP is invalid,
the message displayed will indicate an unknown signal.

The
.BR psiginfo ()
function is like
.BR psignal (),
except that it displays information about the signal described by
.IR pinfo ,
which should point to a valid
.I siginfo_t
structure.
As well as the signal description,
.BR psiginfo ()
displays information about the origin of the signal,
and other information relevant to the signal
(e.g., the relevant memory address for hardware-generated signals,
the child process ID for
.BR SIGCHLD ,
and the user ID and process ID of the sender, for signals set using
.BR kill (2)
or
.BR sigqueue (3)).

The array \fIsys_siglist\fP holds the signal description strings
indexed by signal number.
.SH RETURN VALUE
The
.BR psignal ()
and
.BR psiginfo ()
functions return no value.
.SH VERSIONS
The
.BR psiginfo ()
function was added to glibc in version 2.10.
.SH CONFORMING TO
POSIX.1-2008, 4.3BSD.
.SH BUGS
In glibc versions up to 2.12,
.BR psiginfo ()
had the following bugs:
.IP * 3
In some circumstances, a trailing newline is not printed.
.\" FIXME . http://sourceware.org/bugzilla/show_bug.cgi?id=12107
.\" Reportedly now fixed; check glibc 2.13
.IP *
Additional details are not displayed for real-time signals.
.\" FIXME . http://sourceware.org/bugzilla/show_bug.cgi?id=12108
.\" Reportedly now fixed; check glibc 2.13
.SH SEE ALSO
.BR sigaction (2),
.BR perror (3),
.BR strsignal (3),
.BR signal (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2008 Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH PTHREAD_ATTR_INIT 3 2008-11-11 "Linux" "Linux Programmer's Manual"
.SH NAME
pthread_attr_init, pthread_attr_destroy \- initialize and destroy
thread attributes object
.SH SYNOPSIS
.nf
.B #include <pthread.h>

.BI "int pthread_attr_init(pthread_attr_t *" attr );
.BI "int pthread_attr_destroy(pthread_attr_t *" attr );
.sp
Compile and link with \fI\-pthread\fP.
.fi
.SH DESCRIPTION
The
.BR pthread_attr_init ()
function initializes the thread attributes object pointed to by
.IR attr
with default attribute values.
After this call, individual attributes of the object can be set
using various related functions (listed under SEE ALSO),
and then the object can be used in one or more
.BR pthread_create (3)
calls that create threads.

Calling
.BR pthread_attr_init ()
on a thread attributes object that has already been initialized
results in undefined behavior.

When a thread attributes object is no longer required,
it should be destroyed using the
.BR pthread_attr_destroy ()
function.
Destroying a thread attributes object has no effect
on threads that were created using that object.

Once a thread attributes object has been destroyed,
it can be reinitialized using
.BR pthread_attr_init ().
Any other use of a destroyed thread attributes object
has undefined results.
.SH RETURN VALUE
On success, these functions return 0;
on error, they return a nonzero error number.
.SH ERRORS
POSIX.1-2001 documents an
.B ENOMEM
error for
.BR pthread_attr_init ();
on Linux these functions always succeed
(but portable and future-proof applications should nevertheless
handle a possible error return).
.SH CONFORMING TO
POSIX.1-2001.
.SH NOTES
The
.I pthread_attr_t
type should be treated as opaque:
any access to the object other than via pthreads functions
is nonportable and produces undefined results.
.SH EXAMPLE
The program below optionally makes use of
.BR pthread_attr_init ()
and various related functions to initialize a thread attributes
object that is used to create a single thread.
Once created, the thread uses the
.BR pthread_getattr_np (3)
function (a nonstandard GNU extension) to retrieve the thread's
attributes, and then displays those attributes.

If the program is run with no command-line argument,
then it passes NULL as the
.I attr
argument of
.BR pthread_create (3),
so that the thread is created with default attributes.
Running the program on Linux/x86-32 with the NPTL threading implementation,
we see the following:

.in +4n
.nf
.\" Results from glibc 2.8, SUSE 11.0; Oct 2008
.RB "$" " ulimit \-s" "       # No stack limit ==> default stack size is 2MB"
unlimited
.RB "$" " ./a.out"
Thread attributes:
        Detach state        = PTHREAD_CREATE_JOINABLE
        Scope               = PTHREAD_SCOPE_SYSTEM
        Inherit scheduler   = PTHREAD_INHERIT_SCHED
        Scheduling policy   = SCHED_OTHER
        Scheduling priority = 0
        Guard size          = 4096 bytes
        Stack address       = 0x40196000
        Stack size          = 0x201000 bytes
.fi
.in

When we supply a stack size as a command-line argument,
the program initializes a thread attributes object,
sets various attributes in that object,
and passes a pointer to the object in the call to
.BR pthread_create (3).
Running the program on Linux/x86-32 with the NPTL threading implementation,
we see the following:

.in +4n
.nf
.\" Results from glibc 2.8, SUSE 11.0; Oct 2008
.RB "$" " ./a.out 0x3000000"
posix_memalign() allocated at 0x40197000
Thread attributes:
        Detach state        = PTHREAD_CREATE_DETACHED
        Scope               = PTHREAD_SCOPE_SYSTEM
        Inherit scheduler   = PTHREAD_EXPLICIT_SCHED
        Scheduling policy   = SCHED_OTHER
        Scheduling priority = 0
        Guard size          = 0 bytes
        Stack address       = 0x40197000
        Stack size          = 0x3000000 bytes
.fi
.in
.SS Program source
\&
.nf
#define _GNU_SOURCE     /* To get pthread_getattr_np() declaration */
#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>

#define handle_error_en(en, msg) \\
        do { errno = en; perror(msg); exit(EXIT_FAILURE); } while (0)

static void
display_pthread_attr(pthread_attr_t *attr, char *prefix)
{
    int s, i;
    size_t v;
    void *stkaddr;
    struct sched_param sp;

    s = pthread_attr_getdetachstate(attr, &i);
    if (s != 0)
        handle_error_en(s, "pthread_attr_getdetachstate");
    printf("%sDetach state        = %s\\n", prefix,
            (i == PTHREAD_CREATE_DETACHED) ? "PTHREAD_CREATE_DETACHED" :
            (i == PTHREAD_CREATE_JOINABLE) ? "PTHREAD_CREATE_JOINABLE" :
            "???");

    s = pthread_attr_getscope(attr, &i);
    if (s != 0)
        handle_error_en(s, "pthread_attr_getscope");
    printf("%sScope               = %s\\n", prefix,
            (i == PTHREAD_SCOPE_SYSTEM)  ? "PTHREAD_SCOPE_SYSTEM" :
            (i == PTHREAD_SCOPE_PROCESS) ? "PTHREAD_SCOPE_PROCESS" :
            "???");

    s = pthread_attr_getinheritsched(attr, &i);
    if (s != 0)
        handle_error_en(s, "pthread_attr_getinheritsched");
    printf("%sInherit scheduler   = %s\\n", prefix,
            (i == PTHREAD_INHERIT_SCHED)  ? "PTHREAD_INHERIT_SCHED" :
            (i == PTHREAD_EXPLICIT_SCHED) ? "PTHREAD_EXPLICIT_SCHED" :
            "???");

    s = pthread_attr_getschedpolicy(attr, &i);
    if (s != 0)
        handle_error_en(s, "pthread_attr_getschedpolicy");
    printf("%sScheduling policy   = %s\\n", prefix,
            (i == SCHED_OTHER) ? "SCHED_OTHER" :
            (i == SCHED_FIFO)  ? "SCHED_FIFO" :
            (i == SCHED_RR)    ? "SCHED_RR" :
            "???");

    s = pthread_attr_getschedparam(attr, &sp);
    if (s != 0)
        handle_error_en(s, "pthread_attr_getschedparam");
    printf("%sScheduling priority = %d\\n", prefix, sp.sched_priority);

    s = pthread_attr_getguardsize(attr, &v);
    if (s != 0)
        handle_error_en(s, "pthread_attr_getguardsize");
    printf("%sGuard size          = %d bytes\\n", prefix, v);

    s = pthread_attr_getstack(attr, &stkaddr, &v);
    if (s != 0)
        handle_error_en(s, "pthread_attr_getstack");
    printf("%sStack address       = %p\\n", prefix, stkaddr);
    printf("%sStack size          = 0x%x bytes\\n", prefix, v);
}

static void *
thread_start(void *arg)
{
    int s;
    pthread_attr_t gattr;

    /* pthread_getattr_np() is a non\-standard GNU extension that
       retrieves the attributes of the thread specified in its
       first argument */

    s = pthread_getattr_np(pthread_self(), &gattr);
    if (s != 0)
        handle_error_en(s, "pthread_getattr_np");

    printf("Thread attributes:\\n");
    display_pthread_attr(&gattr, "\\t");

    exit(EXIT_SUCCESS);         /* Terminate all threads */
}

int
main(int argc, char *argv[])
{
    pthread_t thr;
    pthread_attr_t attr;
    pthread_attr_t *attrp;      /* NULL or &attr */
    int s;

    attrp = NULL;

    /* If a command\-line argument was supplied, use it to set the
       stack\-size attribute and set a few other thread attributes,
       and set attrp pointing to thread attributes object */

    if (argc > 1) {
        int stack_size;
        void *sp;

        attrp = &attr;

        s = pthread_attr_init(&attr);
        if (s != 0)
            handle_error_en(s, "pthread_attr_init");

        s = pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
        if (s != 0)
            handle_error_en(s, "pthread_attr_setdetachstate");

        s = pthread_attr_setinheritsched(&attr, PTHREAD_EXPLICIT_SCHED);
        if (s != 0)
            handle_error_en(s, "pthread_attr_setinheritsched");

        stack_size = strtoul(argv[1], NULL, 0);

        s = posix_memalign(&sp, sysconf(_SC_PAGESIZE), stack_size);
        if (s != 0)
            handle_error_en(s, "posix_memalign");

        printf("posix_memalign() allocated at %p\\n", sp);

        s = pthread_attr_setstack(&attr, sp, stack_size);
        if (s != 0)
            handle_error_en(s, "pthread_attr_setstack");
    }

    s = pthread_create(&thr, attrp, &thread_start, NULL);
    if (s != 0)
        handle_error_en(s, "pthread_create");

    if (attrp != NULL) {
        s = pthread_attr_destroy(attrp);
        if (s != 0)
            handle_error_en(s, "pthread_attr_destroy");
    }

    pause();    /* Terminates when other thread calls exit() */
}
.fi
.SH SEE ALSO
.ad l
.nh
.BR pthread_attr_setaffinity_np (3),
.BR pthread_attr_setdetachstate (3),
.BR pthread_attr_setguardsize (3),
.BR pthread_attr_setinheritsched (3),
.BR pthread_attr_setschedparam (3),
.BR pthread_attr_setschedpolicy (3),
.BR pthread_attr_setscope (3),
.BR pthread_attr_setstack (3),
.BR pthread_attr_setstackaddr (3),
.BR pthread_attr_setstacksize (3),
.BR pthread_create (3),
.BR pthread_getattr_np (3),
.BR pthreads (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2008 Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH PTHREAD_ATTR_SETAFFINITY_NP 3 2014-05-28 "Linux" "Linux Programmer's Manual"
.SH NAME
pthread_attr_setaffinity_np, pthread_attr_getaffinity_np \- set/get
CPU affinity attribute in thread attributes object
.SH SYNOPSIS
.nf
.BR "#define _GNU_SOURCE" "             /* See feature_test_macros(7) */"
.B #include <pthread.h>

.BI "int pthread_attr_setaffinity_np(pthread_attr_t *" attr ,
.BI "                   size_t " cpusetsize ", const cpu_set_t *" cpuset );
.BI "int pthread_attr_getaffinity_np(const pthread_attr_t *" attr ,
.BI "                   size_t " cpusetsize ", cpu_set_t *" cpuset );
.sp
Compile and link with \fI\-pthread\fP.
.fi
.SH DESCRIPTION
The
.BR pthread_attr_setaffinity_np ()
function
sets the CPU affinity mask attribute of the
thread attributes object referred to by
.I attr
to the value specified in
.IR cpuset .
This attribute determines the CPU affinity mask
of a thread created using the thread attributes object
.IR attr .

The
.BR pthread_attr_getaffinity_np ()
function
returns the CPU affinity mask attribute of the thread attributes object
referred to by
.IR attr
in the buffer pointed to by
.IR cpuset .

The argument
.I cpusetsize
is the length (in bytes) of the buffer pointed to by
.IR cpuset .
Typically, this argument would be specified as
.IR sizeof(cpu_set_t) .

For more details on CPU affinity masks, see
.BR sched_setaffinity (2).
For a description of a set of macros
that can be used to manipulate and inspect CPU sets, see
.BR CPU_SET (3).
.SH RETURN VALUE
On success, these functions return 0;
on error, they return a nonzero error number.
.SH ERRORS
.TP
.BR EINVAL
.RB ( pthread_attr_setaffinity_np ())
.I cpuset
specified a CPU that was outside the set supported by the kernel.
(The kernel configuration option
.BR CONFIG_NR_CPUS
defines the range of the set supported by the kernel data type
.\" cpumask_t
used to represent CPU sets.)
.\" The raw sched_getaffinity() system call returns the size (in bytes)
.\" of the cpumask_t type.
.TP
.B EINVAL
.RB ( pthread_attr_getaffinity_np ())
A CPU in the affinity mask of the thread attributes object referred to by
.I attr
lies outside the range specified by
.IR cpusetsize
(i.e.,
.IR cpuset / cpusetsize
is too small).
.TP
.B ENOMEM
.RB ( pthread_attr_setaffinity_np ())
Could not allocate memory.
.SH VERSIONS
These functions are provided by glibc since version 2.3.4.
.SH CONFORMING TO
These functions are nonstandard GNU extensions;
hence the suffix "_np" (nonportable) in the names.
.SH NOTES
In glibc 2.3.3 only,
versions of these functions were provided that did not have a
.I cpusetsize
argument.
Instead the CPU set size given to the underlying system calls was always
.IR sizeof(cpu_set_t) .
.SH SEE ALSO
.BR sched_setaffinity (2),
.BR pthread_attr_init (3),
.BR pthread_setaffinity_np (3),
.BR cpuset (7),
.BR pthreads (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2008 Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH PTHREAD_ATTR_SETDETACHSTATE 3 2015-03-02 "Linux" "Linux Programmer's Manual"
.SH NAME
pthread_attr_setdetachstate, pthread_attr_getdetachstate \-
set/get detach state attribute in thread attributes object
.SH SYNOPSIS
.nf
.B #include <pthread.h>

.BI "int pthread_attr_setdetachstate(pthread_attr_t *" attr \
", int " detachstate );
.BI "int pthread_attr_getdetachstate(const pthread_attr_t *" attr \
", int *" detachstate );
.sp
Compile and link with \fI\-pthread\fP.
.fi
.SH DESCRIPTION
The
.BR pthread_attr_setdetachstate ()
function sets the detach state attribute of the
thread attributes object referred to by
.IR attr
to the value specified in
.IR detachstate .
The detach state attribute determines whether a thread created using
the thread attributes object
.I attr
will be created in a joinable or a detached state.

The following values may be specified in
.IR detachstate :
.TP
.B PTHREAD_CREATE_DETACHED
Threads that are created using
.I attr
will be created in a detached state.
.TP
.B PTHREAD_CREATE_JOINABLE
Threads that are created using
.I attr
will be created in a joinable state.
.PP
The default setting of the detach state attribute in a newly initialized
thread attributes object is
.BR PTHREAD_CREATE_JOINABLE .

The
.BR pthread_attr_getdetachstate ()
returns the detach state attribute of the thread attributes object
.IR attr
in the buffer pointed to by
.IR detachstate .
.SH RETURN VALUE
On success, these functions return 0;
on error, they return a nonzero error number.
.SH ERRORS
.BR pthread_attr_setdetachstate ()
can fail with the following error:
.TP
.B EINVAL
An invalid value was specified in
.IR detachstate .
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw30 lb lb
l l l.
Interface	Attribute	Value
T{
.BR pthread_attr_setdetachstate (),
.BR pthread_attr_getdetachstate ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
POSIX.1-2001.
.SH NOTES
See
.BR pthread_create (3)
for more details on detached and joinable threads.

A thread that is created in a joinable state should
eventually either be joined using
.BR pthread_join (3)
or detached using
.BR pthread_detach (3);
see
.BR pthread_create (3).

It is an error to specify the thread ID of
a thread that was created in a detached state
in a later call to
.BR pthread_detach (3)
or
.BR pthread_join (3).
.SH EXAMPLE
See
.BR pthread_attr_init (3).
.SH SEE ALSO
.BR pthread_attr_init (3),
.BR pthread_create (3),
.BR pthread_detach (3),
.BR pthread_join (3),
.BR pthreads (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2008 Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH PTHREAD_ATTR_SETGUARDSIZE 3 2015-03-02 "Linux" "Linux Programmer's Manual"
.SH NAME
pthread_attr_setguardsize, pthread_attr_getguardsize \- set/get guard size
attribute in thread attributes object
.SH SYNOPSIS
.nf
.B #include <pthread.h>

.BI "int pthread_attr_setguardsize(pthread_attr_t *" attr \
", size_t " guardsize );
.BI "int pthread_attr_getguardsize(const pthread_attr_t *" attr \
", size_t *" guardsize );
.sp
Compile and link with \fI\-pthread\fP.
.fi
.SH DESCRIPTION
The
.BR pthread_attr_setguardsize ()
function sets the guard size attribute of the
thread attributes object referred to by
.I attr
to the value specified in
.IR guardsize .

If
.I guardsize
is greater than 0,
then for each new thread created using
.I attr
the system allocates an additional region of at least
.I guardsize
bytes at the end of the thread's stack to act as the guard area
for the stack (but see BUGS).

If
.I guardsize
is 0, then new threads created with
.I attr
will not have a guard area.

The default guard size is the same as the system page size.

If the stack address attribute has been set in
.I attr
(using
.BR pthread_attr_setstack (3)
or
.BR pthread_attr_setstackaddr (3)),
meaning that the caller is allocating the thread's stack,
then the guard size attribute is ignored
(i.e., no guard area is created by the system):
it is the application's responsibility to handle stack overflow
(perhaps by using
.BR mprotect (2)
to manually define a guard area at the end of the stack
that it has allocated).

The
.BR pthread_attr_getguardsize ()
function returns the guard size attribute of the
thread attributes object referred to by
.I attr
in the buffer pointed to by
.IR guardsize .
.SH RETURN VALUE
On success, these functions return 0;
on error, they return a nonzero error number.
.SH ERRORS
POSIX.1-2001 documents an
.B EINVAL
error if
.I attr
or
.I guardsize
is invalid.
On Linux these functions always succeed
(but portable and future-proof applications should nevertheless
handle a possible error return).
.SH VERSIONS
These functions are provided by glibc since version 2.1.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw28 lb lb
l l l.
Interface	Attribute	Value
T{
.BR pthread_attr_setguardsize (),
.BR pthread_attr_getguardsize ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
POSIX.1-2001.
.SH NOTES
A guard area consists of virtual memory pages that are protected
to prevent read and write access.
If a thread overflows its stack into the guard area,
then, on most hard architectures, it receives a
.B SIGSEGV
signal, thus notifying it of the overflow.
Guard areas start on page boundaries,
and the guard size is internally rounded up to
the system page size when creating a thread.
(Nevertheless,
.BR pthread_attr_getguardsize ()
returns the guard size that was set by
.BR pthread_attr_setguardsize ().)

Setting a guard size of 0 may be useful to save memory
in an application that creates many threads
and knows that stack overflow can never occur.

Choosing a guard size larger than the default size
may be necessary for detecting stack overflows
if a thread allocates large data structures on the stack.
.SH BUGS
As at glibc 2.8, the NPTL threading implementation includes
the guard area within the stack size allocation,
rather than allocating extra space at the end of the stack,
as POSIX.1 requires.
(This can result in an
.B EINVAL
error from
.BR pthread_create (3)
if the guard size value is too large,
leaving no space for the actual stack.)

The obsolete LinuxThreads implementation did the right thing,
allocating extra space at the end of the stack for the guard area.
.\" glibc includes the guardsize within the allocated stack size,
.\" which looks pretty clearly to be in violation of POSIX.
.\"
.\" Filed bug, 22 Oct 2008:
.\" http://sources.redhat.com/bugzilla/show_bug.cgi?id=6973
.\"
.\" Older reports:
.\" https//bugzilla.redhat.com/show_bug.cgi?id=435337
.\" Reportedly, LinuxThreads did the right thing, allocating
.\" extra space at the end of the stack:
.\" http://sourceware.org/ml/libc-alpha/2008-05/msg00086.html
.SH EXAMPLE
See
.BR pthread_getattr_np (3).
.SH SEE ALSO
.BR mmap (2),
.BR mprotect (2),
.BR pthread_attr_init (3),
.BR pthread_attr_setstack (3),
.BR pthread_attr_setstacksize (3),
.BR pthread_create (3),
.BR pthreads (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2008 Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH PTHREAD_ATTR_SETINHERITSCHED 3 2015-03-02 "Linux" "Linux Programmer's Manual"
.SH NAME
pthread_attr_setinheritsched, pthread_attr_getinheritsched \- set/get
inherit-scheduler attribute in thread attributes object
.SH SYNOPSIS
.nf
.B #include <pthread.h>

.BI "int pthread_attr_setinheritsched(pthread_attr_t *" attr ,
.BI "                                 int " inheritsched );
.BI "int pthread_attr_getinheritsched(const pthread_attr_t *" attr ,
.BI "                                 int *" inheritsched );
.sp
Compile and link with \fI\-pthread\fP.
.fi
.SH DESCRIPTION
The
.BR pthread_attr_setinheritsched ()
function sets the inherit-scheduler attribute of the
thread attributes object referred to by
.IR attr
to the value specified in
.IR inheritsched .
The inherit-scheduler attribute determines whether a thread created using
the thread attributes object
.I attr
will inherit its scheduling attributes from the calling thread
or whether it will take them from
.IR attr .

The following scheduling attributes are affected by the
inherit-scheduler attribute:
scheduling policy
.RB ( pthread_attr_setschedpolicy (3)),
scheduling priority
.RB ( pthread_attr_setschedparam (3)),
and contention scope
.RB ( pthread_attr_setscope (3)).

The following values may be specified in
.IR inheritsched :
.TP
.B PTHREAD_INHERIT_SCHED
Threads that are created using
.I attr
inherit scheduling attributes from the creating thread;
the scheduling attributes in
.I attr
are ignored.
.TP
.B PTHREAD_EXPLICIT_SCHED
Threads that are created using
.I attr
take their scheduling attributes from the values specified
by the attributes object.
.\" FIXME Document the defaults for scheduler settings
.PP
The default setting of the inherit-scheduler attribute in
a newly initialized thread attributes object is
.BR PTHREAD_INHERIT_SCHED .

The
.BR pthread_attr_getinheritsched ()
returns the inherit-scheduler attribute of the thread attributes object
.IR attr
in the buffer pointed to by
.IR inheritsched .
.SH RETURN VALUE
On success, these functions return 0;
on error, they return a nonzero error number.
.SH ERRORS
.BR pthread_attr_setinheritsched ()
can fail with the following error:
.TP
.B EINVAL
Invalid value in
.IR inheritsched .
.PP
POSIX.1-2001 also documents an optional
.B ENOTSUP
error ("attempt was made to set the attribute to an unsupported value") for
.BR pthread_attr_setinheritsched ().
.\" .SH VERSIONS
.\" Available since glibc 2.0.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw31 lb lb
l l l.
Interface	Attribute	Value
T{
.BR pthread_attr_setinheritsched (),
.BR pthread_attr_getinheritsched ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
POSIX.1-2001.
.SH BUGS
As at glibc 2.8, if a thread attributes object is initialized using
.BR pthread_attr_init (3),
then the scheduling policy of the attributes object is set to
.BR SCHED_OTHER
and the scheduling priority is set to 0.
However, if the inherit-scheduler attribute is then set to
.BR PTHREAD_EXPLICIT_SCHED ,
then a thread created using the attribute object
wrongly inherits its scheduling attributes from the creating thread.
This bug does not occur if either the scheduling policy or
scheduling priority attribute is explicitly set
in the thread attributes object before calling
.BR pthread_create (3).
.\" FIXME . Track status of the following bug:
.\" http://sourceware.org/bugzilla/show_bug.cgi?id=7007
.SH EXAMPLE
See
.BR pthread_setschedparam (3).
.SH SEE ALSO
.ad l
.nh
.BR pthread_attr_init (3),
.BR pthread_attr_setschedparam (3),
.BR pthread_attr_setschedpolicy (3),
.BR pthread_attr_setscope (3),
.BR pthread_create (3),
.BR pthread_setschedparam (3),
.BR pthread_setschedprio (3),
.BR pthreads (7),
.BR sched (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2008 Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH PTHREAD_ATTR_SETSCHEDPARAM 3 2015-02-21 "Linux" "Linux Programmer's Manual"
.SH NAME
pthread_attr_setschedparam, pthread_attr_getschedparam \- set/get
scheduling parameter attributes in thread attributes object
.SH SYNOPSIS
.nf
.B #include <pthread.h>

.BI "int pthread_attr_setschedparam(pthread_attr_t *" attr ,
.BI "                               const struct sched_param *" param );
.BI "int pthread_attr_getschedparam(const pthread_attr_t *" attr ,
.BI "                               struct sched_param *" param );
.sp
Compile and link with \fI\-pthread\fP.
.fi
.SH DESCRIPTION
The
.BR pthread_attr_setschedparam ()
function sets the scheduling parameter attributes of the
thread attributes object referred to by
.IR attr
to the values specified in the buffer pointed to by
.IR param .
These attributes determine the scheduling parameters of
a thread created using the thread attributes object
.IR attr .

The
.BR pthread_attr_getschedparam ()
returns the scheduling parameter attributes of the thread attributes object
.IR attr
in the buffer pointed to by
.IR param .

Scheduling parameters are maintained in the following structure:

.in +4n
.nf
struct sched_param {
    int sched_priority;     /* Scheduling priority */
};
.fi
.in

As can be seen, only one scheduling parameter is supported.
For details of the permitted ranges for scheduling priorities
in each scheduling policy, see
.BR sched (7).

In order for the parameter setting made by
.BR pthread_attr_setschedparam ()
to have effect when calling
.BR pthread_create (3),
the caller must use
.BR pthread_attr_setinheritsched (3)
to set the inherit-scheduler attribute of the attributes object
.I attr
to
.BR PTHREAD_EXPLICIT_SCHED .
.SH RETURN VALUE
On success, these functions return 0;
on error, they return a nonzero error number.
.SH ERRORS
.BR pthread_attr_setschedparam ()
can fail with the following error:
.TP
.B EINVAL
The priority specified in
.I param
does not make sense for the current scheduling policy of
.IR attr .
.PP
POSIX.1 also documents an
.B ENOTSUP
error for
.BR pthread_attr_setschedparam ().
This value is never returned on Linux
(but portable and future-proof applications should nevertheless
handle this error return value).
.\" .SH VERSIONS
.\" Available since glibc 2.0.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw29 lb lb
l l l.
Interface	Attribute	Value
T{
.BR pthread_attr_setschedparam (),
.BR pthread_attr_getschedparam ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
POSIX.1-2001.
.SH NOTES
See
.BR pthread_attr_setschedpolicy (3)
for a list of the thread scheduling policies supported on Linux.
.SH EXAMPLE
See
.BR pthread_setschedparam (3).
.SH SEE ALSO
.ad l
.nh
.BR sched_get_priority_min (2),
.BR pthread_attr_init (3),
.BR pthread_attr_setinheritsched (3),
.BR pthread_attr_setschedpolicy (3),
.BR pthread_create (3),
.BR pthread_setschedparam (3),
.BR pthread_setschedprio (3),
.BR pthreads (7),
.BR sched (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2008 Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH PTHREAD_ATTR_SETSCHEDPOLICY 3 2015-03-02 "Linux" "Linux Programmer's Manual"
.SH NAME
pthread_attr_setschedpolicy, pthread_attr_getschedpolicy \- set/get
scheduling policy attribute in thread attributes object
.SH SYNOPSIS
.nf
.B #include <pthread.h>

.BI "int pthread_attr_setschedpolicy(pthread_attr_t *" attr \
", int " policy );
.BI "int pthread_attr_getschedpolicy(const pthread_attr_t *" attr \
", int " *policy );
.sp
Compile and link with \fI\-pthread\fP.
.fi
.SH DESCRIPTION
The
.BR pthread_attr_setschedpolicy ()
function sets the scheduling policy attribute of the
thread attributes object referred to by
.IR attr
to the value specified in
.IR policy .
This attribute determines the scheduling policy of
a thread created using the thread attributes object
.IR attr .

The supported values for
.I policy
are
.BR SCHED_FIFO ,
.BR SCHED_RR ,
and
.BR SCHED_OTHER ,
with the semantics described in
.BR sched (7).
.\" FIXME . pthread_setschedparam() places no restriction on the policy,
.\" but pthread_attr_setschedpolicy() restricts policy to RR/FIFO/OTHER
.\" http://sourceware.org/bugzilla/show_bug.cgi?id=7013

The
.BR pthread_attr_getschedpolicy ()
returns the scheduling policy attribute of the thread attributes object
.IR attr
in the buffer pointed to by
.IR policy .

In order for the policy setting made by
.BR pthread_attr_setschedpolicy ()
to have effect when calling
.BR pthread_create (3),
the caller must use
.BR pthread_attr_setinheritsched (3)
to set the inherit-scheduler attribute of the attributes object
.I attr
to
.BR PTHREAD_EXPLICIT_SCHED .
.SH RETURN VALUE
On success, these functions return 0;
on error, they return a nonzero error number.
.SH ERRORS
.BR pthread_attr_setschedpolicy ()
can fail with the following error:
.TP
.B EINVAL
Invalid value in
.IR policy .
.PP
POSIX.1-2001 also documents an optional
.B ENOTSUP
error ("attempt was made to set the attribute to an unsupported value") for
.BR pthread_attr_setschedpolicy ().
.\" .SH VERSIONS
.\" Available since glibc 2.0.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw30 lb lb
l l l.
Interface	Attribute	Value
T{
.BR pthread_attr_setschedpolicy (),
.BR pthread_attr_getschedpolicy ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
POSIX.1-2001.
.SH EXAMPLE
See
.BR pthread_setschedparam (3).
.SH SEE ALSO
.ad l
.nh
.BR pthread_attr_init (3),
.BR pthread_attr_setinheritsched (3),
.BR pthread_attr_setschedparam (3),
.BR pthread_create (3),
.BR pthread_setschedparam (3),
.BR pthread_setschedprio (3),
.BR pthreads (7),
.BR sched (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2008 Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH PTHREAD_ATTR_SETSCOPE 3 2015-03-02 "Linux" "Linux Programmer's Manual"
.SH NAME
pthread_attr_setscope, pthread_attr_getscope \- set/get contention scope
attribute in thread attributes object
.SH SYNOPSIS
.nf
.B #include <pthread.h>

.BI "int pthread_attr_setscope(pthread_attr_t *" attr \
", int " scope );
.BI "int pthread_attr_getscope(const pthread_attr_t *" attr \
", int *" scope );
.sp
Compile and link with \fI\-pthread\fP.
.fi
.SH DESCRIPTION
The
.BR pthread_attr_setscope ()
function sets the contention scope attribute of the
thread attributes object referred to by
.I attr
to the value specified in
.IR scope .
The contention scope attribute defines the set of threads
against which a thread competes for resources such as the CPU.
POSIX.1-2001 specifies two possible values for
.IR scope :
.TP
.B PTHREAD_SCOPE_SYSTEM
The thread competes for resources with all other threads
in all processes on the system that are in the same scheduling
allocation domain (a group of one or more processors).
.B PTHREAD_SCOPE_SYSTEM
threads are scheduled relative to one another
according to their scheduling policy and priority.
.TP
.B PTHREAD_SCOPE_PROCESS
The thread competes for resources with all other threads
in the same process that were also created with the
.BR PTHREAD_SCOPE_PROCESS
contention scope.
.BR PTHREAD_SCOPE_PROCESS
threads are scheduled relative to other threads in the process
according to their scheduling policy and priority.
POSIX.1-2001 leaves it unspecified how these threads contend
with other threads in other process on the system or
with other threads in the same process that
were created with the
.B PTHREAD_SCOPE_SYSTEM
contention scope.
.PP
POSIX.1-2001 requires that an implementation support at least one of these
contention scopes.
Linux supports
.BR PTHREAD_SCOPE_SYSTEM ,
but not
.BR PTHREAD_SCOPE_PROCESS .

On systems that support multiple contention scopes, then,
in order for the parameter setting made by
.BR pthread_attr_setscope ()
to have effect when calling
.BR pthread_create (3),
the caller must use
.BR pthread_attr_setinheritsched (3)
to set the inherit-scheduler attribute of the attributes object
.I attr
to
.BR PTHREAD_EXPLICIT_SCHED .

The
.BR pthread_attr_getscope ()
function returns the contention scope attribute of the
thread attributes object referred to by
.I attr
in the buffer pointed to by
.IR scope .
.SH RETURN VALUE
On success, these functions return 0;
on error, they return a nonzero error number.
.SH ERRORS
.BR pthread_attr_setscope ()
can fail with the following errors:
.TP
.B EINVAL
An invalid value was specified in
.IR scope .
.TP
.B ENOTSUP
.IR scope
specified the value
.BR PTHREAD_SCOPE_PROCESS ,
which is not supported on Linux.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw24 lb lb
l l l.
Interface	Attribute	Value
T{
.BR pthread_attr_setscope (),
.BR pthread_attr_getscope ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
POSIX.1-2001.
.SH NOTES
The
.B PTHREAD_SCOPE_SYSTEM
contention scope typically indicates that a user-space thread is
bound directly to a single kernel-scheduling entity.
This is the case on Linux for the obsolete LinuxThreads implementation
and the modern NPTL implementation,
which are both 1:1 threading implementations.

POSIX.1-2001 specifies that the default contention scope is
implementation-defined.
.SH SEE ALSO
.ad l
.nh
.BR pthread_attr_init (3),
.BR pthread_attr_setaffinity_np (3),
.BR pthread_attr_setinheritsched (3),
.BR pthread_attr_setschedparam (3),
.BR pthread_attr_setschedpolicy (3),
.BR pthread_create (3),
.BR pthreads (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2008 Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH PTHREAD_ATTR_SETSTACK 3 2015-03-02 "Linux" "Linux Programmer's Manual"
.SH NAME
pthread_attr_setstack, pthread_attr_getstack \- set/get stack
attributes in thread attributes object
.SH SYNOPSIS
.nf
.B #include <pthread.h>

.BI "int pthread_attr_setstack(pthread_attr_t *" attr ,
.BI "                          void *" stackaddr ", size_t " stacksize );
.BI "int pthread_attr_getstack(const pthread_attr_t *" attr ,
.BI "                          void **" stackaddr ", size_t *" stacksize );
.sp
Compile and link with \fI\-pthread\fP.
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR pthread_attr_getstack (),
.BR pthread_attr_setstack ():
.RS 4
_POSIX_C_SOURCE\ >=\ 200112L || _XOPEN_SOURCE\ >=\ 600
.RE
.ad b
.SH DESCRIPTION
The
.BR pthread_attr_setstack ()
function sets the stack address and stack size attributes of the
thread attributes object referred to by
.I attr
to the values specified in
.IR stackaddr
and
.IR stacksize ,
respectively.
These attributes specify the location and size of the stack that should
be used by a thread that is created using the thread attributes object
.IR attr .

.I stackaddr
should point to the lowest addressable byte of a buffer of
.I stacksize
bytes that was allocated by the caller.
The pages of the allocated buffer should be both readable and writable.

The
.BR pthread_attr_getstack ()
function returns the stack address and stack size attributes of the
thread attributes object referred to by
.I attr
in the buffers pointed to by
.IR stackaddr
and
.IR stacksize ,
respectively.
.SH RETURN VALUE
On success, these functions return 0;
on error, they return a nonzero error number.
.SH ERRORS
.BR pthread_attr_setstack ()
can fail with the following error:
.TP
.B EINVAL
.I stacksize
is less than
.BR PTHREAD_STACK_MIN
(16384) bytes.
On some systems, this error may also occur if
.IR stackaddr
or
.IR "stackaddr\ +\ stacksize"
is not suitably aligned.
.PP
POSIX.1-2001 also documents an
.BR EACCES
error if the stack area described by
.I stackaddr
and
.I stacksize
is not both readable and writable by the caller.
.SH VERSIONS
These functions are provided by glibc since version 2.2.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw24 lb lb
l l l.
Interface	Attribute	Value
T{
.BR pthread_attr_setstack (),
.BR pthread_attr_getstack ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
POSIX.1-2001.
.SH NOTES
These functions are provided for applications that must ensure that
a thread's stack is placed in a particular location.
For most applications, this is not necessary,
and the use of these functions should be avoided.
(Use
.BR pthread_attr_setstacksize (3)
if an application simply requires a stack size other than the default.)

When an application employs
.BR pthread_attr_setstack (),
it takes over the responsibility of allocating the stack.
Any guard size value that was set using
.BR pthread_attr_setguardsize (3)
is ignored.
If deemed necessary,
it is the application's responsibility to allocate a guard area
(one or more pages protected against reading and writing)
to handle the possibility of stack overflow.

The address specified in
.I stackaddr
should be suitably aligned:
for full portability, align it on a page boundary
.RI ( sysconf(_SC_PAGESIZE) ).
.BR posix_memalign (3)
may be useful for allocation.
Probably,
.IR stacksize
should also be a multiple of the system page size.

If
.I attr
is used to create multiple threads, then the caller must change the
stack address attribute between calls to
.BR pthread_create (3);
otherwise, the threads will attempt to use the same memory area
for their stacks, and chaos will ensue.
.SH EXAMPLE
See
.BR pthread_attr_init (3).
.SH SEE ALSO
.ad l
.nh
.BR mmap (2),
.BR mprotect (2),
.BR posix_memalign (3),
.BR pthread_attr_init (3),
.BR pthread_attr_setguardsize (3),
.BR pthread_attr_setstackaddr (3),
.BR pthread_attr_setstacksize (3),
.BR pthread_create (3),
.BR pthreads (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2008 Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH PTHREAD_ATTR_SETSTACKADDR 3 2015-03-02 "Linux" "Linux Programmer's Manual"
.SH NAME
pthread_attr_setstackaddr, pthread_attr_getstackaddr \-
set/get stack address attribute in thread attributes object
.SH SYNOPSIS
.nf
.B #include <pthread.h>

.BI "int pthread_attr_setstackaddr(pthread_attr_t *" attr \
", void *" stackaddr );
.BI "int pthread_attr_getstackaddr(const pthread_attr_t *" attr \
", void **" stackaddr );
.sp
Compile and link with \fI\-pthread\fP.
.fi
.SH DESCRIPTION
These functions are obsolete:
.B do not use them.
Use
.BR pthread_attr_setstack (3)
and
.BR pthread_attr_getstack (3)
instead.

The
.BR pthread_attr_setstackaddr ()
function sets the stack address attribute of the
thread attributes object referred to by
.I attr
to the value specified in
.IR stackaddr .
This attribute specifies the location of the stack that should
be used by a thread that is created using the thread attributes object
.IR attr .

.I stackaddr
should point to a buffer of at least
.B PTHREAD_STACK_MIN
bytes that was allocated by the caller.
The pages of the allocated buffer should be both readable and writable.

The
.BR pthread_attr_getstackaddr ()
function returns the stack address attribute of the
thread attributes object referred to by
.I attr
in the buffer pointed to by
.IR stackaddr .
.SH RETURN VALUE
On success, these functions return 0;
on error, they return a nonzero error number.
.SH ERRORS
No errors are defined
(but applications should nevertheless
handle a possible error return).
.SH VERSIONS
These functions are provided by glibc since version 2.1.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw28 lb lb
l l l.
Interface	Attribute	Value
T{
.BR pthread_attr_setstackaddr (),
.BR pthread_attr_getstackaddr ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
POSIX.1-2001 specifies these functions but marks them as obsolete.
POSIX.1-2008 removes the specification of these functions.
.SH NOTES
.I Do not use these functions!
They cannot be portably used, since they provide no way of specifying
the direction of growth or the range of the stack.
For example, on architectures with a stack that grows downward,
.I stackaddr
specifies the next address past the
.I highest
address of the allocated stack area.
However, on architectures with a stack that grows upward,
.I stackaddr
specifies the
.I lowest
address in the allocated stack area.
By contrast, the
.I stackaddr
used by
.BR pthread_attr_setstack (3)
and
.BR pthread_attr_getstack (3),
is always a pointer to the lowest address in the allocated stack area
(and the
.I stacksize
argument specifies the range of the stack).
.SH SEE ALSO
.BR pthread_attr_init (3),
.BR pthread_attr_setstack (3),
.BR pthread_attr_setstacksize (3),
.BR pthread_create (3),
.BR pthreads (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2008 Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH PTHREAD_ATTR_SETSTACKSIZE 3 2015-03-02 "Linux" "Linux Programmer's Manual"
.SH NAME
pthread_attr_setstacksize, pthread_attr_getstacksize \- set/get stack size
attribute in thread attributes object
.SH SYNOPSIS
.nf
.B #include <pthread.h>

.BI "int pthread_attr_setstacksize(pthread_attr_t *" attr \
", size_t " stacksize );
.BI "int pthread_attr_getstacksize(const pthread_attr_t *" attr \
", size_t *" stacksize );
.sp
Compile and link with \fI\-pthread\fP.
.fi
.SH DESCRIPTION
The
.BR pthread_attr_setstacksize ()
function sets the stack size attribute of the
thread attributes object referred to by
.I attr
to the value specified in
.IR stacksize .

The stack size attribute determines the minimum size (in bytes) that
will be allocated for threads created using the thread attributes object
.IR attr .

The
.BR pthread_attr_getstacksize ()
function returns the stack size attribute of the
thread attributes object referred to by
.I attr
in the buffer pointed to by
.IR stacksize .
.SH RETURN VALUE
On success, these functions return 0;
on error, they return a nonzero error number.
.SH ERRORS
.BR pthread_attr_setstacksize ()
can fail with the following error:
.TP
.B EINVAL
The stack size is less than
.BR PTHREAD_STACK_MIN
(16384) bytes.
.PP
On some systems,
.\" e.g., MacOS
.BR pthread_attr_setstacksize ()
can fail with the error
.B EINVAL
if
.I stacksize
is not a multiple of the system page size.
.SH VERSIONS
These functions are provided by glibc since version 2.1.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw28 lb lb
l l l.
Interface	Attribute	Value
T{
.BR pthread_attr_setstacksize (),
.BR pthread_attr_getstacksize ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
POSIX.1-2001.
.SH NOTES
For details on the default stack size of new threads, see
.BR pthread_create (3).

A thread's stack size is fixed at the time of thread creation.
Only the main thread can dynamically grow its stack.

The
.BR pthread_attr_setstack (3)
function allows an application to set both the size and location
of a caller-allocated stack that is to be used by a thread.
.SH BUGS
As at glibc 2.8,
if the specified
.I stacksize
is not a multiple of
.BR STACK_ALIGN
(16 bytes on most architectures), it may be rounded
.IR downward ,
in violation of POSIX.1-2001, which says that the allocated stack will
be at least
.I stacksize
bytes.
.SH EXAMPLE
See
.BR pthread_create (3).
.SH SEE ALSO
.BR getrlimit (2),
.BR pthread_attr_init (3),
.BR pthread_attr_setguardsize (3),
.BR pthread_attr_setstack (3),
.BR pthread_create (3),
.BR pthreads (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2008 Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH PTHREAD_CANCEL 3 2008-11-17 "Linux" "Linux Programmer's Manual"
.SH NAME
pthread_cancel \- send a cancellation request to a thread
.SH SYNOPSIS
.nf
.B #include <pthread.h>

.BI "int pthread_cancel(pthread_t " thread );
.sp
Compile and link with \fI\-pthread\fP.
.fi
.SH DESCRIPTION
The
.BR pthread_cancel ()
function sends a cancellation request to the thread
.IR thread .
Whether and when the target thread
reacts to the cancellation request depends on
two attributes that are under the control of that thread:
its cancelability
.I state
and
.IR type .

A thread's cancelability state, determined by
.BR pthread_setcancelstate (3),
can be
.I enabled
(the default for new threads) or
.IR disabled .
If a thread has disabled cancellation,
then a cancellation request remains queued until the thread
enables cancellation.
If a thread has enabled cancellation,
then its cancelability type determines when cancellation occurs.

A thread's cancellation type, determined by
.BR pthread_setcanceltype (3),
may be either
.IR asynchronous
or
.IR deferred
(the default for new threads).
Asynchronous cancelability
means that the thread can be canceled at any time
(usually immediately, but the system does not guarantee this).
Deferred cancelability means that cancellation will be delayed until
the thread next calls a function that is a
.IR "cancellation point" .
A list of functions that are or may be cancellation points is provided in
.BR pthreads (7).

When a cancellation requested is acted on, the following steps occur for
.IR thread
(in this order):
.IP 1. 3
Cancellation clean-up handlers are popped
(in the reverse of the order in which they were pushed) and called.
(See
.BR pthread_cleanup_push (3).)
.IP 2.
Thread-specific data destructors are called,
in an unspecified order.
(See
.BR pthread_key_create (3).)
.IP 3.
The thread is terminated.
(See
.BR pthread_exit (3).)
.PP
The above steps happen asynchronously with respect to the
.BR pthread_cancel ()
call;
the return status of
.BR pthread_cancel ()
merely informs the caller whether the cancellation request
was successfully queued.
.PP
After a canceled thread has terminated,
a join with that thread using
.BR pthread_join (3)
obtains
.B PTHREAD_CANCELED
as the thread's exit status.
(Joining with a thread is the only way to know that cancellation
has completed.)
.SH RETURN VALUE
On success,
.BR pthread_cancel ()
returns 0;
on error, it returns a nonzero error number.
.SH ERRORS
.TP
.B ESRCH
No thread with the ID
.I thread
could be found.
.\" .SH VERSIONS
.\" Available since glibc 2.0
.SH CONFORMING TO
POSIX.1-2001.
.SH NOTES
On Linux, cancellation is implemented using signals.
Under the NPTL threading implementation,
the first real-time signal (i.e., signal 32) is used for this purpose.
On LinuxThreads, the second real-time signal is used,
if real-time signals are available, otherwise
.B SIGUSR2
is used.
.SH EXAMPLE
The program below creates a thread and then cancels it.
The main thread joins with the canceled thread to check
that its exit status was
.BR PTHREAD_CANCELED .
The following shell session shows what happens when we run the program:

.in +4n
.nf
$ ./a.out
thread_func(): started; cancellation disabled
main(): sending cancellation request
thread_func(): about to enable cancellation
main(): thread was canceled
.fi
.in
.SS Program source
\&
.nf
#include <pthread.h>
#include <stdio.h>
#include <errno.h>
#include <stdlib.h>
#include <unistd.h>

#define handle_error_en(en, msg) \\
        do { errno = en; perror(msg); exit(EXIT_FAILURE); } while (0)

static void *
thread_func(void *ignored_argument)
{
    int s;

    /* Disable cancellation for a while, so that we don\(aqt
       immediately react to a cancellation request */

    s = pthread_setcancelstate(PTHREAD_CANCEL_DISABLE, NULL);
    if (s != 0)
        handle_error_en(s, "pthread_setcancelstate");

    printf("thread_func(): started; cancellation disabled\\n");
    sleep(5);
    printf("thread_func(): about to enable cancellation\\n");

    s = pthread_setcancelstate(PTHREAD_CANCEL_ENABLE, NULL);
    if (s != 0)
        handle_error_en(s, "pthread_setcancelstate");

    /* sleep() is a cancellation point */

    sleep(1000);        /* Should get canceled while we sleep */

    /* Should never get here */

    printf("thread_func(): not canceled!\\n");
    return NULL;
}

int
main(void)
{
    pthread_t thr;
    void *res;
    int s;

    /* Start a thread and then send it a cancellation request */

    s = pthread_create(&thr, NULL, &thread_func, NULL);
    if (s != 0)
        handle_error_en(s, "pthread_create");

    sleep(2);           /* Give thread a chance to get started */

    printf("main(): sending cancellation request\\n");
    s = pthread_cancel(thr);
    if (s != 0)
        handle_error_en(s, "pthread_cancel");

    /* Join with thread to see what its exit status was */

    s = pthread_join(thr, &res);
    if (s != 0)
        handle_error_en(s, "pthread_join");

    if (res == PTHREAD_CANCELED)
        printf("main(): thread was canceled\\n");
    else
        printf("main(): thread wasn\(aqt canceled (shouldn\(aqt happen!)\\n");
    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.ad l
.nh
.BR pthread_cleanup_push (3),
.BR pthread_create (3),
.BR pthread_exit (3),
.BR pthread_join (3),
.BR pthread_key_create (3),
.BR pthread_setcancelstate (3),
.BR pthread_setcanceltype (3),
.BR pthread_testcancel (3),
.BR pthreads (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2008 Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH PTHREAD_CLEANUP_PUSH 3 2008-11-24 "Linux" "Linux Programmer's Manual"
.SH NAME
pthread_cleanup_push, pthread_cleanup_pop \- push and pop
thread cancellation clean-up handlers
.SH SYNOPSIS
.nf
.B #include <pthread.h>

.BI "void pthread_cleanup_push(void (*" routine ")(void *),"
.BI "                          void *" arg );
.BI "void pthread_cleanup_pop(int " execute );
.sp
Compile and link with \fI\-pthread\fP.
.fi
.SH DESCRIPTION
These functions manipulate the calling thread's stack of
thread-cancellation clean-up handlers.
A clean-up handler is a function that is automatically executed
when a thread is canceled (or in various other circumstances
described below);
it might, for example, unlock a mutex so that
it becomes available to other threads in the process.

The
.BR pthread_cleanup_push ()
function pushes
.I routine
onto the top of the stack of clean-up handlers.
When
.I routine
is later invoked, it will be given
.I arg
as its argument.

The
.BR pthread_cleanup_pop ()
function removes the routine at the top of the stack of clean-up handlers,
and optionally executes it if
.I execute
is nonzero.

A cancellation clean-up handler is popped from the stack
and executed in the following circumstances:
.IP 1. 3
When a thread is canceled,
all of the stacked clean-up handlers are popped and executed in
the reverse of the order in which they were pushed onto the stack.
.IP 2.
When a thread terminates by calling
.BR pthread_exit (3),
all clean-up handlers are executed as described in the preceding point.
(Clean-up handlers are
.I not
called if the thread terminates by
performing a
.I return
from the thread start function.)
.IP 3.
When a thread calls
.BR pthread_cleanup_pop ()
with a nonzero
.I execute
argument, the top-most clean-up handler is popped and executed.
.PP
POSIX.1 permits
.BR pthread_cleanup_push ()
and
.BR pthread_cleanup_pop ()
to be implemented as macros that expand to text
containing \(aq\fB{\fP\(aq and \(aq\fB}\fP\(aq, respectively.
For this reason, the caller must ensure that calls to these
functions are paired within the same function,
and at the same lexical nesting level.
(In other words, a clean-up handler is established only
during the execution of a specified section of code.)

Calling
.BR longjmp (3)
.RB ( siglongjmp (3))
produces undefined results if any call has been made to
.BR pthread_cleanup_push ()
or
.BR pthread_cleanup_pop ()
without the matching call of the pair since the jump buffer
was filled by
.BR setjmp (3)
.RB ( sigsetjmp (3)).
Likewise, calling
.BR longjmp (3)
.RB ( siglongjmp (3))
from inside a clean-up handler produces undefined results
unless the jump buffer was also filled by
.BR setjmp (3)
.RB ( sigsetjmp (3))
inside the handler.
.SH RETURN VALUE
These functions do not return a value.
.SH ERRORS
There are no errors.
.\" SH VERSIONS
.\" Available since glibc 2.0
.SH CONFORMING TO
POSIX.1-2001.
.SH NOTES
On Linux, the
.BR pthread_cleanup_push ()
and
.BR pthread_cleanup_pop ()
functions
.I are
implemented as macros that expand to text
containing \(aq\fB{\fP\(aq and \(aq\fB}\fP\(aq, respectively.
This means that variables declared within the scope of
paired calls to these functions will be visible within only that scope.

POSIX.1
.\" The text was actually added in the 2004 TC2
says that the effect of using
.IR return ,
.IR break ,
.IR continue ,
or
.IR goto
to prematurely leave a block bracketed
.BR pthread_cleanup_push ()
and
.BR pthread_cleanup_pop ()
is undefined.
Portable applications should avoid doing this.
.SH EXAMPLE
The program below provides a simple example of the use of the functions
described in this page.
The program creates a thread that executes a loop bracketed by
.BR pthread_cleanup_push ()
and
.BR pthread_cleanup_pop ().
This loop increments a global variable,
.IR cnt ,
once each second.
Depending on what command-line arguments are supplied,
the main thread sends the other thread a cancellation request,
or sets a global variable that causes the other thread
to exit its loop and terminate normally (by doing a
.IR return ).

In the following shell session,
the main thread sends a cancellation request to the other thread:

.in +4n
.nf
$ \fB./a.out\fP
New thread started
cnt = 0
cnt = 1
Canceling thread
Called clean-up handler
Thread was canceled; cnt = 0
.fi
.in

From the above, we see that the thread was canceled,
and that the cancellation clean-up handler was called
and it reset the value of the global variable
.I cnt
to 0.

In the next run, the main program sets a
global variable that causes other thread to terminate normally:

.in +4n
.nf
$ \fB./a.out x\fP
New thread started
cnt = 0
cnt = 1
Thread terminated normally; cnt = 2
.fi
.in

From the above, we see that the clean-up handler was not executed (because
.I cleanup_pop_arg
was 0), and therefore the value of
.I cnt
was not reset.

In the next run, the main program sets a global variable that
causes the other thread to terminate normally,
and supplies a nonzero value for
.IR cleanup_pop_arg :

.in +4n
.nf
$ \fB./a.out x 1\fP
New thread started
cnt = 0
cnt = 1
Called clean-up handler
Thread terminated normally; cnt = 0
.fi
.in

In the above, we see that although the thread was not canceled,
the clean-up handler was executed, because the argument given to
.BR pthread_cleanup_pop ()
was nonzero.
.SS Program source
\&
.nf
#include <pthread.h>
#include <sys/types.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>

#define handle_error_en(en, msg) \\
        do { errno = en; perror(msg); exit(EXIT_FAILURE); } while (0)

static int done = 0;
static int cleanup_pop_arg = 0;
static int cnt = 0;

static void
cleanup_handler(void *arg)
{
    printf("Called clean\-up handler\\n");
    cnt = 0;
}

static void *
thread_start(void *arg)
{
    time_t start, curr;

    printf("New thread started\\n");

    pthread_cleanup_push(cleanup_handler, NULL);

    curr = start = time(NULL);

    while (!done) {
        pthread_testcancel();           /* A cancellation point */
        if (curr < time(NULL)) {
            curr = time(NULL);
            printf("cnt = %d\\n", cnt);  /* A cancellation point */
            cnt++;
        }
    }

    pthread_cleanup_pop(cleanup_pop_arg);
    return NULL;
}

int
main(int argc, char *argv[])
{
    pthread_t thr;
    int s;
    void *res;

    s = pthread_create(&thr, NULL, thread_start, NULL);
    if (s != 0)
        handle_error_en(s, "pthread_create");

    sleep(2);           /* Allow new thread to run a while */

    if (argc > 1) {
        if (argc > 2)
            cleanup_pop_arg = atoi(argv[2]);
        done = 1;

    } else {
        printf("Canceling thread\\n");
        s = pthread_cancel(thr);
        if (s != 0)
            handle_error_en(s, "pthread_cancel");
    }

    s = pthread_join(thr, &res);
    if (s != 0)
        handle_error_en(s, "pthread_join");

    if (res == PTHREAD_CANCELED)
        printf("Thread was canceled; cnt = %d\\n", cnt);
    else
        printf("Thread terminated normally; cnt = %d\\n", cnt);
    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR pthread_cancel (3),
.BR pthread_cleanup_push_defer_np (3),
.BR pthread_setcancelstate (3),
.BR pthread_testcancel (3),
.BR pthreads (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2008 Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH PTHREAD_CLEANUP_PUSH_DEFER_NP 3 2014-05-28 "Linux" "Linux Programmer's Manual"
.SH NAME
pthread_cleanup_push_defer_np, pthread_cleanup_pop_restore_np \- push and pop
thread cancellation clean-up handlers while saving cancelability type
.SH SYNOPSIS
.nf
.B #include <pthread.h>

.BI "void pthread_cleanup_push_defer_np(void (*" routine ")(void *),"
.BI "                                   void *" arg );
.BI "void pthread_cleanup_pop_restore_np(int " execute );
.fi
.sp
Compile and link with \fI\-pthread\fP.
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR pthread_cleanup_push_defer_np (),
.BR pthread_cleanup_pop_defer_np ():
.RS 4
_GNU_SOURCE
.RE
.ad
.SH DESCRIPTION
These functions are the same as
.BR pthread_cleanup_push (3)
and
.BR pthread_cleanup_pop (3),
except for the differences noted on this page.

Like
.BR pthread_cleanup_push (3),
.BR pthread_cleanup_push_defer_np ()
pushes
.I routine
onto the thread's stack of cancellation clean-up handlers.
In addition, it also saves the thread's current cancelability type,
and sets the cancelability type to "deferred" (see
.BR pthread_setcanceltype (3));
this ensures that cancellation clean-up will occur
even if the thread's cancelability type was "asynchronous"
before the call.

Like
.BR pthread_cleanup_pop (3),
.BR pthread_cleanup_pop_restore_np ()
pops the top-most clean-up handler from the thread's
stack of cancellation clean-up handlers.
In addition, it restores the thread's cancelability
type to its value at the time of the matching
.BR pthread_cleanup_push_defer_np ().

The caller must ensure that calls to these
functions are paired within the same function,
and at the same lexical nesting level.
Other restrictions apply, as described in
.BR pthread_cleanup_push (3).

This sequence of calls:

.in +4n
.nf
pthread_cleanup_push_defer_np(routine, arg);
pthread_cleanup_pop_restore_np(execute);
.fi
.in

is equivalent to (but shorter and more efficient than):

.\" As far as I can see, LinuxThreads reverses the two substeps
.\" in the push and pop below.
.in +4n
.nf
int oldtype;

pthread_cleanup_push(routine, arg);
pthread_setcanceltype(PTHREAD_CANCEL_DEFERRED, &oldtype);
\&...
pthread_setcanceltype(oldtype, NULL);
pthread_cleanup_pop(execute);
.fi
.in
.\" SH VERSIONS
.\" Available since glibc 2.0
.SH CONFORMING TO
These functions are nonstandard GNU extensions;
hence the suffix "_np" (nonportable) in the names.
.SH SEE ALSO
.BR pthread_cancel (3),
.BR pthread_cleanup_push (3),
.BR pthread_setcancelstate (3),
.BR pthread_testcancel (3),
.BR pthreads (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2008 Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH PTHREAD_CREATE 3 2014-05-28 "Linux" "Linux Programmer's Manual"
.SH NAME
pthread_create \- create a new thread
.SH SYNOPSIS
.nf
.B #include <pthread.h>

.BI "int pthread_create(pthread_t *" thread ", const pthread_attr_t *" attr ,
.BI "                   void *(*" start_routine ") (void *), void *" arg );
.fi
.sp
Compile and link with \fI\-pthread\fP.
.SH DESCRIPTION
The
.BR pthread_create ()
function starts a new thread in the calling process.
The new thread starts execution by invoking
.IR start_routine ();
.IR arg
is passed as the sole argument of
.IR start_routine ().

The new thread terminates in one of the following ways:
.IP * 2
It calls
.BR pthread_exit (3),
specifying an exit status value that is available to another thread
in the same process that calls
.BR pthread_join (3).
.IP *
It returns from
.IR start_routine ().
This is equivalent to calling
.BR pthread_exit (3)
with the value supplied in the
.I return
statement.
.IP *
It is canceled (see
.BR pthread_cancel (3)).
.IP *
Any of the threads in the process calls
.BR exit (3),
or the main thread performs a return from
.IR main ().
This causes the termination of all threads in the process.
.PP
The
.I attr
argument points to a
.I pthread_attr_t
structure whose contents are used at thread creation time to
determine attributes for the new thread;
this structure is initialized using
.BR pthread_attr_init (3)
and related functions.
If
.I attr
is NULL,
then the thread is created with default attributes.

Before returning, a successful call to
.BR pthread_create ()
stores the ID of the new thread in the buffer pointed to by
.IR thread ;
this identifier is used to refer to the thread
in subsequent calls to other pthreads functions.

The new thread inherits a copy of the creating thread's signal mask
.RB ( pthread_sigmask (3)).
The set of pending signals for the new thread is empty
.RB ( sigpending (2)).
The new thread does not inherit the creating thread's
alternate signal stack
.RB ( sigaltstack (2)).

The new thread inherits the calling thread's floating-point environment
.RB ( fenv (3)).

The initial value of the new thread's CPU-time clock is 0
(see
.BR pthread_getcpuclockid (3)).
.\" CLOCK_THREAD_CPUTIME_ID in clock_gettime(2)
.SS Linux-specific details
The new thread inherits copies of the calling thread's capability sets
(see
.BR capabilities (7))
and CPU affinity mask (see
.BR sched_setaffinity (2)).
.SH RETURN VALUE
On success,
.BR pthread_create ()
returns 0;
on error, it returns an error number, and the contents of
.IR *thread
are undefined.
.SH ERRORS
.TP
.B EAGAIN
Insufficient resources to create another thread.
.TP
.B EAGAIN
.\" NOTE! The following should match the description in fork(2)
A system-imposed limit on the number of threads was encountered.
There are a number of limits that may trigger this error: the
.BR RLIMIT_NPROC
soft resource limit (set via
.BR setrlimit (2)),
which limits the number of processes and threads for a real user ID,
was reached;
the kernel's system-wide limit on the number of processes and threads,
.IR /proc/sys/kernel/threads-max ,
was reached (see
.BR proc (5));
or the maximum number of PIDs,
.IR /proc/sys/kernel/pid_max ,
was reached (see
.BR proc (5)).
.TP
.B EINVAL
Invalid settings in
.IR attr .
.TP
.\" FIXME . Test the following
.B EPERM
No permission to set the scheduling policy and parameters specified in
.IR attr .
.SH CONFORMING TO
POSIX.1-2001.
.SH NOTES
See
.BR pthread_self (3)
for further information on the thread ID returned in
.IR *thread
by
.BR pthread_create ().
Unless real-time scheduling policies are being employed,
after a call to
.BR pthread_create (),
it is indeterminate which thread\(emthe caller or the new thread\(emwill
next execute.

A thread may either be
.I joinable
or
.IR detached .
If a thread is joinable, then another thread can call
.BR pthread_join (3)
to wait for the thread to terminate and fetch its exit status.
Only when a terminated joinable thread has been joined are
the last of its resources released back to the system.
When a detached thread terminates,
its resources are automatically released back to the system:
it is not possible to join with the thread in order to obtain
its exit status.
Making a thread detached is useful for some types of daemon threads
whose exit status the application does not need to care about.
By default, a new thread is created in a joinable state, unless
.I attr
was set to create the thread in a detached state (using
.BR pthread_attr_setdetachstate (3)).

.\" FIXME . Perhaps some of the following detail should be in
.\" a future pthread_attr_setstacksize(3) page.
On Linux/x86-32, the default stack size for a new thread is 2 megabytes.
Under the NPTL threading implementation, if the
.BR RLIMIT_STACK
soft resource limit
.IR "at the time the program started"
has any value other than "unlimited",
then it determines the default stack size of new threads.
Using
.BR pthread_attr_setstacksize (3),
the stack size attribute can be explicitly set in the
.I attr
argument used to create a thread,
in order to obtain a stack size other than the default.
.SH BUGS
In the obsolete LinuxThreads implementation,
each of the threads in a process has a different process ID.
This is in violation of the POSIX threads specification,
and is the source of many other nonconformances to the standard; see
.BR pthreads (7).
.SH EXAMPLE
The program below demonstrates the use of
.BR pthread_create (),
as well as a number of other functions in the pthreads API.

In the following run,
on a system providing the NPTL threading implementation,
the stack size defaults to the value given by the
"stack size" resource limit:

.in +4n
.nf
.RB "$" " ulimit \-s"
8192            # The stack size limit is 8 MB (0x800000 bytes)
.RB "$" " ./a.out hola salut servus"
Thread 1: top of stack near 0xb7dd03b8; argv_string=hola
Thread 2: top of stack near 0xb75cf3b8; argv_string=salut
Thread 3: top of stack near 0xb6dce3b8; argv_string=servus
Joined with thread 1; returned value was HOLA
Joined with thread 2; returned value was SALUT
Joined with thread 3; returned value was SERVUS
.fi
.in

In the next run, the program explicitly sets a stack size of 1MB (using
.BR pthread_attr_setstacksize (3))
for the created threads:

.in +4n
.nf
.RB "$" " ./a.out \-s 0x100000 hola salut servus"
Thread 1: top of stack near 0xb7d723b8; argv_string=hola
Thread 2: top of stack near 0xb7c713b8; argv_string=salut
Thread 3: top of stack near 0xb7b703b8; argv_string=servus
Joined with thread 1; returned value was HOLA
Joined with thread 2; returned value was SALUT
Joined with thread 3; returned value was SERVUS
.fi
.in
.SS Program source
\&
.nf
#include <pthread.h>
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <ctype.h>

#define handle_error_en(en, msg) \\
        do { errno = en; perror(msg); exit(EXIT_FAILURE); } while (0)

#define handle_error(msg) \\
        do { perror(msg); exit(EXIT_FAILURE); } while (0)

struct thread_info {    /* Used as argument to thread_start() */
    pthread_t thread_id;        /* ID returned by pthread_create() */
    int       thread_num;       /* Application\-defined thread # */
    char     *argv_string;      /* From command\-line argument */
};

/* Thread start function: display address near top of our stack,
   and return upper\-cased copy of argv_string */

static void *
thread_start(void *arg)
{
    struct thread_info *tinfo = arg;
    char *uargv, *p;

    printf("Thread %d: top of stack near %p; argv_string=%s\\n",
            tinfo\->thread_num, &p, tinfo\->argv_string);

    uargv = strdup(tinfo\->argv_string);
    if (uargv == NULL)
        handle_error("strdup");

    for (p = uargv; *p != \(aq\\0\(aq; p++)
        *p = toupper(*p);

    return uargv;
}

int
main(int argc, char *argv[])
{
    int s, tnum, opt, num_threads;
    struct thread_info *tinfo;
    pthread_attr_t attr;
    int stack_size;
    void *res;

    /* The "\-s" option specifies a stack size for our threads */

    stack_size = \-1;
    while ((opt = getopt(argc, argv, "s:")) != \-1) {
        switch (opt) {
        case \(aqs\(aq:
            stack_size = strtoul(optarg, NULL, 0);
            break;

        default:
            fprintf(stderr, "Usage: %s [\-s stack-size] arg...\\n",
                    argv[0]);
            exit(EXIT_FAILURE);
        }
    }

    num_threads = argc \- optind;

    /* Initialize thread creation attributes */

    s = pthread_attr_init(&attr);
    if (s != 0)
        handle_error_en(s, "pthread_attr_init");

    if (stack_size > 0) {
        s = pthread_attr_setstacksize(&attr, stack_size);
        if (s != 0)
            handle_error_en(s, "pthread_attr_setstacksize");
    }

    /* Allocate memory for pthread_create() arguments */

    tinfo = calloc(num_threads, sizeof(struct thread_info));
    if (tinfo == NULL)
        handle_error("calloc");

    /* Create one thread for each command\-line argument */

    for (tnum = 0; tnum < num_threads; tnum++) {
        tinfo[tnum].thread_num = tnum + 1;
        tinfo[tnum].argv_string = argv[optind + tnum];

        /* The pthread_create() call stores the thread ID into
           corresponding element of tinfo[] */

        s = pthread_create(&tinfo[tnum].thread_id, &attr,
                           &thread_start, &tinfo[tnum]);
        if (s != 0)
            handle_error_en(s, "pthread_create");
    }

    /* Destroy the thread attributes object, since it is no
       longer needed */

    s = pthread_attr_destroy(&attr);
    if (s != 0)
        handle_error_en(s, "pthread_attr_destroy");

    /* Now join with each thread, and display its returned value */

    for (tnum = 0; tnum < num_threads; tnum++) {
        s = pthread_join(tinfo[tnum].thread_id, &res);
        if (s != 0)
            handle_error_en(s, "pthread_join");

        printf("Joined with thread %d; returned value was %s\\n",
                tinfo[tnum].thread_num, (char *) res);
        free(res);      /* Free memory allocated by thread */
    }

    free(tinfo);
    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.ad l
.nh
.BR getrlimit (2),
.BR pthread_attr_init (3),
.BR pthread_cancel (3),
.BR pthread_detach (3),
.BR pthread_equal (3),
.BR pthread_exit (3),
.BR pthread_getattr_np (3),
.BR pthread_join (3),
.BR pthread_self (3),
.BR pthreads (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2008 Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH PTHREAD_DETACH 3 2008-11-27 "Linux" "Linux Programmer's Manual"
.SH NAME
pthread_detach \- detach a thread
.SH SYNOPSIS
.nf
.B #include <pthread.h>

.BI "int pthread_detach(pthread_t " thread );
.fi
.sp
Compile and link with \fI\-pthread\fP.
.SH DESCRIPTION
The
.BR pthread_detach ()
function marks the thread identified by
.IR thread
as detached.
When a detached thread terminates,
its resources are automatically released back to the system without
the need for another thread to join with the terminated thread.

Attempting to detach an already detached thread results
in unspecified behavior.
.SH RETURN VALUE
On success,
.BR pthread_detach ()
returns 0;
on error, it returns an error number.
.SH ERRORS
.TP
.B EINVAL
.I thread
is not a joinable thread.
.TP
.B ESRCH
No thread with the ID
.I thread
could be found.
.SH CONFORMING TO
POSIX.1-2001.
.SH NOTES
Once a thread has been detached, it can't be joined with
.BR pthread_join (3)
or be made joinable again.

A new thread can be created in a detached state using
.BR pthread_attr_setdetachstate (3)
to set the detached attribute of the
.I attr
argument of
.BR pthread_create (3).

The detached attribute merely determines the behavior of the system
when the thread terminates;
it does not prevent the thread from being terminated
if the process terminates using
.BR exit (3)
(or equivalently, if the main thread returns).

Either
.BR pthread_join (3)
or
.BR pthread_detach ()
should be called for each thread that an application creates,
so that system resources for the thread can be released.
(But note that the resources of all threads are freed when the
process terminates.)
.SH EXAMPLE
The following statement detaches the calling thread:

    pthread_detach(pthread_self());
.SH SEE ALSO
.BR pthread_attr_setdetachstate (3),
.BR pthread_cancel (3),
.BR pthread_create (3),
.BR pthread_exit (3),
.BR pthread_join (3),
.BR pthreads (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2008 Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH PTHREAD_EQUAL 3 2015-03-02 "Linux" "Linux Programmer's Manual"
.SH NAME
pthread_equal \- compare thread IDs
.SH SYNOPSIS
.nf
.B #include <pthread.h>

.BI "int pthread_equal(pthread_t " t1 ", pthread_t " t2 );
.sp
Compile and link with \fI\-pthread\fP.
.fi
.SH DESCRIPTION
The
.BR pthread_equal ()
function compares two thread identifiers.
.SH RETURN VALUE
If the two thread IDs are equal,
.BR pthread_equal ()
returns a nonzero value; otherwise, it returns 0.
.SH ERRORS
This function always succeeds.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR pthread_equal ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
POSIX.1-2001.
.SH NOTES
The
.BR pthread_equal ()
function is necessary because thread IDs should be considered opaque:
there is no portable way for applications to directly compare two
.I pthread_t
values.
.SH SEE ALSO
.BR pthread_create (3),
.BR pthread_self (3),
.BR pthreads (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2008 Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH PTHREAD_EXIT 3 2015-03-02 "Linux" "Linux Programmer's Manual"
.SH NAME
pthread_exit \- terminate calling thread
.SH SYNOPSIS
.nf
.B #include <pthread.h>

.BI "void pthread_exit(void *" retval );
.sp
Compile and link with \fI\-pthread\fP.
.fi
.SH DESCRIPTION
The
.BR pthread_exit ()
function terminates the calling thread and returns a value via
.I retval
that (if the thread is joinable)
is available to another thread in the same process that calls
.BR pthread_join (3).

Any clean-up handlers established by
.BR pthread_cleanup_push (3)
that have not yet been popped,
are popped (in the reverse of the order in which they were pushed)
and executed.
If the thread has any thread-specific data, then,
after the clean-up handlers have been executed,
the corresponding destructor functions are called,
in an unspecified order.

When a thread terminates,
process-shared resources (e.g., mutexes, condition variables,
semaphores, and file descriptors) are not released,
and functions registered using
.BR atexit (3)
are not called.

After the last thread in a process terminates,
the process terminates as by calling
.BR exit (3)
with an exit status of zero;
thus, process-shared resources
are released and functions registered using
.BR atexit (3)
are called.
.SH RETURN VALUE
This function does not return to the caller.
.SH ERRORS
This function always succeeds.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR pthread_exit ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
POSIX.1-2001.
.SH NOTES
Performing a return from the start function of any thread other
than the main thread results in an implicit call to
.BR pthread_exit (),
using the function's return value as the thread's exit status.

To allow other threads to continue execution,
the main thread should terminate by calling
.BR pthread_exit ()
rather than
.BR exit (3).

The value pointed to by
.IR retval
should not be located on the calling thread's stack,
since the contents of that stack are undefined after the thread terminates.
.SH BUGS
Currently,
.\" Linux 2.6.27
there are limitations in the kernel implementation logic for
.BR wait (2)ing
on a stopped thread group with a dead thread group leader.
This can manifest in problems such as a locked terminal if a stop signal is
sent to a foreground process whose thread group leader has already called
.BR pthread_exit ().
.\" FIXME . review a later kernel to see if this gets fixed
.\" http://thread.gmane.org/gmane.linux.kernel/611611
.\" http://marc.info/?l=linux-kernel&m=122525468300823&w=2
.SH SEE ALSO
.BR pthread_create (3),
.BR pthread_join (3),
.BR pthreads (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2008 Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH PTHREAD_GETATTR_NP 3 2010-09-10 "Linux" "Linux Programmer's Manual"
.SH NAME
pthread_getattr_np \- get attributes of created thread
.SH SYNOPSIS
.nf
.BR "#define _GNU_SOURCE" "             /* See feature_test_macros(7) */"
.B #include <pthread.h>

.BI "int pthread_getattr_np(pthread_t " thread ", pthread_attr_t *" attr );
.sp
Compile and link with \fI\-pthread\fP.
.fi
.SH DESCRIPTION
The
.BR pthread_getattr_np ()
function initializes the thread attributes object referred to by
.I attr
so that it contains actual attribute values describing the running thread
.IR thread .

The returned attribute values may differ from
the corresponding attribute values passed in the
.I attr
object that was used to create the thread using
.BR pthread_create (3).
In particular, the following attributes may differ:
.IP * 2
the detach state, since a joinable thread may have detached itself
after creation;
.IP *
the stack size,
which the implementation may align to a suitable boundary.
.IP *
and the guard size,
which the implementation may round upward to a multiple of the page size,
or ignore (i.e., treat as 0),
if the application is allocating its own stack.
.PP
Furthermore, if the stack address attribute was not set
in the thread attributes object used to create the thread,
then the returned thread attributes object will report the actual
stack address that the implementation selected for the thread.

When the thread attributes object returned by
.BR pthread_getattr_np ()
is no longer required, it should be destroyed using
.BR pthread_attr_destroy (3).
.SH RETURN VALUE
On success, this function returns 0;
on error, it returns a nonzero error number.
.SH ERRORS
.TP
.B ENOMEM
.\" Can happen (but unlikely) while trying to allocate memory for cpuset
Insufficient memory.
.PP
In addition, if
.I thread
refers to the main thread, then
.BR pthread_getattr_np ()
can fail because of errors from various underlying calls:
.BR fopen (3),
if
.IR /proc/self/maps
can't be opened;
and
.BR getrlimit (2),
if the
.BR RLIMIT_STACK
resource limit is not supported.
.SH VERSIONS
This function is available in glibc since version 2.2.3.
.SH CONFORMING TO
This function is a nonstandard GNU extension;
hence the suffix "_np" (nonportable) in the name.
.SH EXAMPLE
The program below demonstrates the use of
.BR pthread_getattr_np ().
The program creates a thread that then uses
.BR pthread_getattr_np ()
to retrieve and display its guard size, stack address,
and stack size attributes.
Command-line arguments can be used to set these attributes
to values other than the default when creating the thread.
The shell sessions below demonstrate the use of the program.

In the first run, on an x86-32 system,
a thread is created using default attributes:

.in +4n
.nf
.RB "$" " ulimit \-s" "      # No stack limit ==> default stack size is 2MB"
unlimited
.RB "$" " ./a.out"
Attributes of created thread:
        Guard size          = 4096 bytes
        Stack address       = 0x40196000 (EOS = 0x40397000)
        Stack size          = 0x201000 (2101248) bytes
.fi
.in

In the following run, we see that if a guard size is specified,
it is rounded up to the next multiple of the system page size
(4096 bytes on x86-32):

.in +4n
.nf
.RB "$" " ./a.out \-g 4097"
Thread attributes object after initializations:
        Guard size          = 4097 bytes
        Stack address       = (nil)
        Stack size          = 0x0 (0) bytes

Attributes of created thread:
        Guard size          = 8192 bytes
        Stack address       = 0x40196000 (EOS = 0x40397000)
        Stack size          = 0x201000 (2101248) bytes
.fi
.in
.\".in +4n
.\".nf
.\"$ ./a.out \-s 0x8000
.\"Thread attributes object after initializations:
.\"        Guard size          = 4096 bytes
.\"        Stack address       = 0xffff8000 (EOS = (nil))
.\"        Stack size          = 0x8000 (32768) bytes
.\"
.\"Attributes of created thread:
.\"        Guard size          = 4096 bytes
.\"        Stack address       = 0x4001e000 (EOS = 0x40026000)
.\"        Stack size          = 0x8000 (32768) bytes
.\".fi
.\".in

In the last run, the program manually allocates a stack for the thread.
In this case, the guard size attribute is ignored.

.in +4n
.nf
.RB "$" " ./a.out \-g 4096 \-s 0x8000 \-a"
Allocated thread stack at 0x804d000

Thread attributes object after initializations:
        Guard size          = 4096 bytes
        Stack address       = 0x804d000 (EOS = 0x8055000)
        Stack size          = 0x8000 (32768) bytes

Attributes of created thread:
        Guard size          = 0 bytes
        Stack address       = 0x804d000 (EOS = 0x8055000)
        Stack size          = 0x8000 (32768) bytes
.fi
.in
.SS Program source
\&
.nf
#define _GNU_SOURCE     /* To get pthread_getattr_np() declaration */
#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>

#define handle_error_en(en, msg) \\
        do { errno = en; perror(msg); exit(EXIT_FAILURE); } while (0)

static void
display_stack_related_attributes(pthread_attr_t *attr, char *prefix)
{
    int s;
    size_t stack_size, guard_size;
    void *stack_addr;

    s = pthread_attr_getguardsize(attr, &guard_size);
    if (s != 0)
        handle_error_en(s, "pthread_attr_getguardsize");
    printf("%sGuard size          = %d bytes\\n", prefix, guard_size);

    s = pthread_attr_getstack(attr, &stack_addr, &stack_size);
    if (s != 0)
        handle_error_en(s, "pthread_attr_getstack");
    printf("%sStack address       = %p", prefix, stack_addr);
    if (stack_size > 0)
        printf(" (EOS = %p)", (char *) stack_addr + stack_size);
    printf("\\n");
    printf("%sStack size          = 0x%x (%d) bytes\\n",
            prefix, stack_size, stack_size);
}

static void
display_thread_attributes(pthread_t thread, char *prefix)
{
    int s;
    pthread_attr_t attr;

    s = pthread_getattr_np(thread, &attr);
    if (s != 0)
        handle_error_en(s, "pthread_getattr_np");

    display_stack_related_attributes(&attr, prefix);

    s = pthread_attr_destroy(&attr);
    if (s != 0)
        handle_error_en(s, "pthread_attr_destroy");
}

static void *           /* Start function for thread we create */
thread_start(void *arg)
{
    printf("Attributes of created thread:\\n");
    display_thread_attributes(pthread_self(), "\\t");

    exit(EXIT_SUCCESS);         /* Terminate all threads */
}

static void
usage(char *pname, char *msg)
{
    if (msg != NULL)
        fputs(msg, stderr);
    fprintf(stderr, "Usage: %s [\-s stack\-size [\-a]]"
            " [\-g guard\-size]\\n", pname);
    fprintf(stderr, "\\t\\t\-a means program should allocate stack\\n");
    exit(EXIT_FAILURE);
}

static pthread_attr_t *   /* Get thread attributes from command line */
get_thread_attributes_from_cl(int argc, char *argv[],
                              pthread_attr_t *attrp)
{
    int s, opt, allocate_stack;
    long stack_size, guard_size;
            void *stack_addr;
    pthread_attr_t *ret_attrp = NULL;   /* Set to attrp if we initialize
                                           a thread attributes object */
    allocate_stack = 0;
    stack_size = \-1;
    guard_size = \-1;

    while ((opt = getopt(argc, argv, "ag:s:")) != \-1) {
        switch (opt) {
        case \(aqa\(aq:   allocate_stack = 1;                     break;
        case \(aqg\(aq:   guard_size = strtoul(optarg, NULL, 0);  break;
        case \(aqs\(aq:   stack_size = strtoul(optarg, NULL, 0);  break;
        default:    usage(argv[0], NULL);
        }
    }

    if (allocate_stack && stack_size == \-1)
        usage(argv[0], "Specifying \-a without \-s makes no sense\\n");

    if (argc > optind)
        usage(argv[0], "Extraneous command\-line arguments\\n");

    if (stack_size >= 0 || guard_size > 0) {
        ret_attrp = attrp;

        s = pthread_attr_init(attrp);
        if (s != 0)
            handle_error_en(s, "pthread_attr_init");
    }

    if (stack_size >= 0) {
        if (!allocate_stack) {
            s = pthread_attr_setstacksize(attrp, stack_size);
            if (s != 0)
                handle_error_en(s, "pthread_attr_setstacksize");
        } else {
            s = posix_memalign(&stack_addr, sysconf(_SC_PAGESIZE),
                               stack_size);
            if (s != 0)
                handle_error_en(s, "posix_memalign");
            printf("Allocated thread stack at %p\\n\\n", stack_addr);

            s = pthread_attr_setstack(attrp, stack_addr, stack_size);
            if (s != 0)
                handle_error_en(s, "pthread_attr_setstacksize");
        }
    }

    if (guard_size >= 0) {
        s = pthread_attr_setguardsize(attrp, guard_size);
        if (s != 0)
            handle_error_en(s, "pthread_attr_setstacksize");
    }

    return ret_attrp;
}

int
main(int argc, char *argv[])
{
    int s;
    pthread_t thr;
    pthread_attr_t attr;
    pthread_attr_t *attrp = NULL;    /* Set to &attr if we initialize
                                        a thread attributes object */

    attrp = get_thread_attributes_from_cl(argc, argv, &attr);

    if (attrp != NULL) {
        printf("Thread attributes object after initializations:\\n");
        display_stack_related_attributes(attrp, "\\t");
        printf("\\n");
    }

    s = pthread_create(&thr, attrp, &thread_start, NULL);
    if (s != 0)
        handle_error_en(s, "pthread_create");

    if (attrp != NULL) {
        s = pthread_attr_destroy(attrp);
        if (s != 0)
            handle_error_en(s, "pthread_attr_destroy");
    }

    pause();    /* Terminates when other thread calls exit() */
}
.fi
.SH SEE ALSO
.ad l
.nh
.BR pthread_attr_getaffinity_np (3),
.BR pthread_attr_getdetachstate (3),
.BR pthread_attr_getguardsize (3),
.BR pthread_attr_getinheritsched (3),
.BR pthread_attr_getschedparam (3),
.BR pthread_attr_getschedpolicy (3),
.BR pthread_attr_getscope (3),
.BR pthread_attr_getstack (3),
.BR pthread_attr_getstackaddr (3),
.BR pthread_attr_getstacksize (3),
.BR pthread_attr_init (3),
.BR pthread_create (3),
.BR pthreads (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2009 Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH PTHREAD_GETCPUCLOCKID 3 2015-03-02 "Linux" "Linux Programmer's Manual"
.SH NAME
pthread_getcpuclockid \- retrieve ID of a thread's CPU time clock
.SH SYNOPSIS
.nf
.B #include <pthread.h>
.B #include <time.h>

.BI "int pthread_getcpuclockid(pthread_t " thread ", clockid_t *" clock_id );
.sp
Compile and link with \fI\-pthread\fP.
.fi
.SH DESCRIPTION
The
.BR pthread_getcpuclockid ()
function returns the clock ID for the CPU time clock of the thread
.IR thread .
.\" The clockid is constructed as follows:
.\" *clockid = CLOCK_THREAD_CPUTIME_ID | (pd->tid << CLOCK_IDFIELD_SIZE)
.\" where CLOCK_IDFIELD_SIZE is 3.
.SH RETURN VALUE
On success, this function returns 0;
on error, it returns a nonzero error number.
.SH ERRORS
.TP
.B ENOENT
.\" CLOCK_THREAD_CPUTIME_ID not defined
Per-thread CPU time clocks are not supported by the system.
.\"
.\" Looking at nptl/pthread_getcpuclockid.c an ERANGE error would
.\" be possible if kernel thread IDs took more than 29 bits (which
.\" they currently cannot).
.TP
.B ESRCH
No thread with the ID
.I thread
could be found.
.SH VERSIONS
This function is available in glibc since version 2.2.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw23 lb lb
l l l.
Interface	Attribute	Value
T{
.BR pthread_getcpuclockid ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
POSIX.1-2001.
.SH NOTES
When
.I thread
refers to the calling thread,
this function returns an identifier that refers to the same clock
manipulated by
.BR clock_gettime (2)
and
.BR clock_settime (2)
when given the clock ID
.BR CLOCK_THREAD_CPUTIME_ID .
.SH EXAMPLE
The program below creates a thread and then uses
.BR clock_gettime (2)
to retrieve the total process CPU time,
and the per-thread CPU time consumed by the two threads.
The following shell session shows an example run:

.in +4n
.nf
$ \fB./a.out\fP
Main thread sleeping
Subthread starting infinite loop
Main thread consuming some CPU time...
Process total CPU time:    1.368
Main thread CPU time:      0.376
Subthread CPU time:        0.992
.fi
.in
.SS Program source
\&
.nf
/* Link with "\-lrt" */

#include <time.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <pthread.h>
#include <string.h>
#include <errno.h>

#define handle_error(msg) \\
        do { perror(msg); exit(EXIT_FAILURE); } while (0)

#define handle_error_en(en, msg) \\
        do { errno = en; perror(msg); exit(EXIT_FAILURE); } while (0)

static void *
thread_start(void *arg)
{
    printf("Subthread starting infinite loop\\n");
    for (;;)
        continue;
}

static void
pclock(char *msg, clockid_t cid)
{
    struct timespec ts;

    printf("%s", msg);
    if (clock_gettime(cid, &ts) == \-1)
        handle_error("clock_gettime");
    printf("%4ld.%03ld\\n", ts.tv_sec, ts.tv_nsec / 1000000);
}

int
main(int argc, char *argv[])
{
    pthread_t thread;
    clockid_t cid;
    int j, s;

    s = pthread_create(&thread, NULL, thread_start, NULL);
    if (s != 0)
        handle_error_en(s, "pthread_create");

    printf("Main thread sleeping\\n");
    sleep(1);

    printf("Main thread consuming some CPU time...\\n");
    for (j = 0; j < 2000000; j++)
        getppid();

    pclock("Process total CPU time: ", CLOCK_PROCESS_CPUTIME_ID);

    s = pthread_getcpuclockid(pthread_self(), &cid);
    if (s != 0)
        handle_error_en(s, "pthread_getcpuclockid");
    pclock("Main thread CPU time:   ", cid);

    /* The preceding 4 lines of code could have been replaced by:
       pclock("Main thread CPU time:   ", CLOCK_THREAD_CPUTIME_ID); */

    s = pthread_getcpuclockid(thread, &cid);
    if (s != 0)
        handle_error_en(s, "pthread_getcpuclockid");
    pclock("Subthread CPU time: 1    ", cid);

    exit(EXIT_SUCCESS);         /* Terminates both threads */
}
.fi
.SH SEE ALSO
.BR clock_gettime (2),
.BR clock_settime (2),
.BR timer_create (2),
.BR clock_getcpuclockid (3),
.BR pthread_self (3),
.BR pthreads (7),
.BR time (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2008 Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH PTHREAD_JOIN 3 2008-11-27 "Linux" "Linux Programmer's Manual"
.SH NAME
pthread_join \- join with a terminated thread
.SH SYNOPSIS
.nf
.B #include <pthread.h>

.BI "int pthread_join(pthread_t " thread ", void **" retval );
.fi
.sp
Compile and link with \fI\-pthread\fP.
.SH DESCRIPTION
The
.BR pthread_join ()
function waits for the thread specified by
.IR thread
to terminate.
If that thread has already terminated, then
.BR pthread_join ()
returns immediately.
The thread specified by
.I thread
must be joinable.

If
.I retval
is not NULL, then
.BR pthread_join ()
copies the exit status of the target thread
(i.e., the value that the target thread supplied to
.BR pthread_exit (3))
into the location pointed to by
.IR *retval .
If the target thread was canceled, then
.B PTHREAD_CANCELED
is placed in
.IR *retval .

If multiple threads simultaneously try to join with the same thread,
the results are undefined.
If the thread calling
.BR pthread_join ()
is canceled, then the target thread will remain joinable
(i.e., it will not be detached).
.SH RETURN VALUE
On success,
.BR pthread_join ()
returns 0;
on error, it returns an error number.
.SH ERRORS
.TP
.B EDEADLK
A deadlock was detected
.\" The following verified by testing on glibc 2.8/NPTL:
(e.g., two threads tried to join with each other);
or
.\" The following verified by testing on glibc 2.8/NPTL:
.I thread
specifies the calling thread.
.TP
.B EINVAL
.I thread
is not a joinable thread.
.TP
.B EINVAL
Another thread is already waiting to join with this thread.
.\" POSIX.1-2001 does not specify this error case.
.TP
.B ESRCH
No thread with the ID
.I thread
could be found.
.SH CONFORMING TO
POSIX.1-2001.
.SH NOTES
After a successful call to
.BR pthread_join (),
the caller is guaranteed that the target thread has terminated.

Joining with a thread that has previously been joined results in
undefined behavior.

Failure to join with a thread that is joinable
(i.e., one that is not detached),
produces a "zombie thread".
Avoid doing this,
since each zombie thread consumes some system resources,
and when enough zombie threads have accumulated,
it will no longer be possible to create new threads (or processes).

There is no pthreads analog of
.IR "waitpid(-1,\ &status,\ 0)" ,
that is, "join with any terminated thread".
If you believe you need this functionality,
you probably need to rethink your application design.

All of the threads in a process are peers:
any thread can join with any other thread in the process.
.SH EXAMPLE
See
.BR pthread_create (3).
.SH SEE ALSO
.BR pthread_cancel (3),
.BR pthread_create (3),
.BR pthread_detach (3),
.BR pthread_exit (3),
.BR pthread_tryjoin_np (3),
.BR pthreads (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2009 Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH PTHREAD_KILL 3 2015-03-02 "Linux" "Linux Programmer's Manual"
.SH NAME
pthread_kill \- send a signal to a thread
.SH SYNOPSIS
.nf
.B #include <signal.h>

.BI "int pthread_kill(pthread_t " thread ", int " sig );
.fi
.sp
Compile and link with \fI\-pthread\fP.
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR pthread_kill ():
.RS 4
_POSIX_C_SOURCE\ >=\ 199506L || _XOPEN_SOURCE\ >=\ 500
.RE
.ad b
.SH DESCRIPTION
The
.BR pthread_kill ()
function sends the signal
.I sig
to
.IR thread ,
a thread in the same process as the caller.
The signal is asynchronously directed to
.IR thread .

If
.I sig
is 0, then no signal is sent, but error checking is still performed.
.SH RETURN VALUE
On success,
.BR pthread_kill ()
returns 0;
on error, it returns an error number, and no signal is sent.
.SH ERRORS
.TP
.B EINVAL
An invalid signal was specified.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR pthread_kill ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
POSIX.1-2008.
.SH NOTES
Signal dispositions are process-wide:
if a signal handler is installed,
the handler will be invoked in the thread
.IR thread ,
but if the disposition of the signal is "stop", "continue", or "terminate",
this action will affect the whole process.

The glibc implementation of
.BR pthread_kill ()
gives an error
.RB ( EINVAL )
on attempts to send either of the real-time signals
used internally by the NPTL threading implementation.
See
.BR nptl (7)
for details.

POSIX.1-2008 recommends that if an implementation detects the use
of a thread ID after the end of its lifetime,
.BR pthread_kill ()
should return the error
.BR ESRCH .
The glibc implementation returns this error in the cases where
an invalid thread ID can be detected.
But note also that POSIX says that an attempt to use a thread ID whose
lifetime has ended produces undefined behavior,
and an attempt to use an invalid thread ID in a call to
.BR pthread_kill ()
can, for example, cause a segmentation fault.
.SH SEE ALSO
.BR kill (2),
.BR sigaction (2),
.BR sigpending (2),
.BR pthread_self (3),
.BR pthread_sigmask (3),
.BR raise (3),
.BR pthreads (7),
.BR signal (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2009 Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH PTHREAD_KILL_OTHER_THREADS_NP 3 2015-03-02 "Linux" "Linux Programmer's Manual"
.SH NAME
pthread_kill_other_threads_np \- terminate all other threads in process
.SH SYNOPSIS
.nf
.B #include <pthread.h>

.B void pthread_kill_other_threads_np(void);
.fi
.SH DESCRIPTION
.BR pthread_kill_other_threads_np ()
has an effect only in the LinuxThreads threading implementation.
On that implementation,
calling this function causes the immediate termination of
all threads in the application,
except the calling thread.
The cancellation state and cancellation type of the
to-be-terminated threads are ignored,
and the cleanup handlers are not called in those threads.
.\" .SH VERSIONS
.\" Available since glibc 2.0
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw31 lb lb
l l l.
Interface	Attribute	Value
T{
.BR pthread_kill_other_threads_np ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
This function is a nonstandard GNU extension;
hence the suffix "_np" (nonportable) in the name.
.SH NOTES
.BR pthread_kill_other_threads_np ()
is intended to be called just before a thread calls
.BR execve (2)
or a similar function.
This function is designed to address a limitation in the obsolete
LinuxThreads implementation whereby the other threads of an application
are not automatically terminated (as POSIX.1-2001 requires) during
.BR execve (2).

In the NPTL threading implementation,
.BR pthread_kill_other_threads_np ()
exists, but does nothing.
(Nothing needs to be done,
because the implementation does the right thing during an
.BR execve (2).)
.SH SEE ALSO
.BR execve (2),
.BR pthread_cancel (3),
.BR pthread_setcancelstate (3),
.BR pthread_setcanceltype (3),
.BR pthreads (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\"Copyright (c) 2010 Novell Inc., written by Robert Schweikert
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbat`im copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH PTHREAD_RWLOCKATTR_SETKIND_NP 3 2014-10-15 "Linux Programmer's Manual"
.SH NAME
pthread_rwlockattr_setkind_np, pthread_rwlockattr_getkind_np \- set/get
the read-write lock kind of the thread read-write lock attribute object
.SH SYNOPSIS
.nf
.B #include <pthread.h>

.BI "int pthread_rwlockattr_setkind_np(pthread_rwlockattr_t *" attr ,
.BI "                                   int " pref );
.BI "int pthread_rwlockattr_getkind_np(const pthread_rwlockattr_t *" attr ,
.BI "                                   int *" pref );
.sp
Compile and link with \fI\-pthread\fP.
.sp
.fi
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR pthread_rwlockattr_setkind_np (),
.BR pthread_rwlockattr_getkind_np ():
.br
.RS 4
.ad l
_XOPEN_SOURCE\ >=\ 500 || _POSIX_C_SOURCE >= 200809L
.RE
.ad
.SH DESCRIPTION
The
.BR pthread_rwlockattr_setkind_np ()
function sets the "lock kind" attribute of the
read-write lock attribute object referred to by
.I attr
to the value specified in
.IR pref .
The argument
.I pref
may be set to one of the following:
.TP
.B PTHREAD_RWLOCK_PREFER_READER_NP
This is the default.
A thread may hold multiple read locks; that is, read locks are recursive.
According to The Single Unix Specification, the behavior is unspecified when a
reader tries to place a lock, and there is no write lock but writers are
waiting.
Giving preference to the reader, as is set by
.BR PTHREAD_RWLOCK_PREFER_READER_NP ,
implies that the reader will receive the requested lock, even if
a writer is waiting.
As long as there are readers, the writer will be
starved.
.TP
.B PTHREAD_RWLOCK_PREFER_WRITER_NP
This is intended as the write lock analog of
.BR PTHREAD_RWLOCK_PREFER_READER_NP .
But see BUGS.
.TP
.B PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
Setting the lock kind to this
avoids writer starvation as long as any read locking is not done in a
recursive fashion.
.PP
The
.BR pthread_rwlockattr_getkind_np ()
function returns the value of the lock kind attribute of the
read-write lock attribute object referred to by
.IR attr
in the pointer
.IR pref .
.SH RETURN VALUE
On success, these functions return 0.
Given valid pointer arguments,
.BR pthread_rwlockattr_getkind_np ()
always succeeds.
On error,
.BR pthread_rwlockattr_setkind_np ()
returns a non-zero error number.
.SH ERRORS
.TP
.BR EINVAL
.I pref
specifies an unsupported value.
.SH BUGS
Setting the value read-write lock kind to
.BR  PTHREAD_RWLOCK_PREFER_WRITER_NP
results in the same behavior as setting the value to
.BR PTHREAD_RWLOCK_PREFER_READER_NP .
As long as a reader thread holds the lock, the thread holding a
write lock will be starved.
Setting the lock kind to
.BR PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
allows writers to run, but, as the name implies a writer
may not lock recursively.
.\" http://sourceware.org/bugzilla/show_bug.cgi?id=7057
.SH VERSIONS
The
.BR pthread_rwlockattr_getkind_np ()
and
.BR pthread_rwlockattr_setkind_np ()
functions first appeared in glibc 2.1.
.SH CONFORMING TO
These functions are non-standard GNU extensions;
hence the suffix "_np" (non-portable) in the names.
.SH SEE ALSO
.BR pthreads (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2008 Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH PTHREAD_SELF 3 2015-03-02 "Linux" "Linux Programmer's Manual"
.SH NAME
pthread_self \- obtain ID of the calling thread
.SH SYNOPSIS
.nf
.B #include <pthread.h>

.B pthread_t pthread_self(void);
.sp
Compile and link with \fI\-pthread\fP.
.fi
.SH DESCRIPTION
The
.BR pthread_self ()
function returns the ID of the calling thread.
This is the same value that is returned in
.IR *thread
in the
.BR pthread_create (3)
call that created this thread.
.SH RETURN VALUE
This function always succeeds, returning the calling thread's ID.
.SH ERRORS
This function always succeeds.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR pthread_self ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
POSIX.1-2001.
.SH NOTES
POSIX.1 allows an implementation wide freedom in choosing
the type used to represent a thread ID;
for example, representation using either an arithmetic type or
a structure is permitted.
Therefore, variables of type
.I pthread_t
can't portably be compared using the C equality operator (\fB==\fP);
use
.BR pthread_equal (3)
instead.

Thread identifiers should be considered opaque:
any attempt to use a thread ID other than in pthreads calls
is nonportable and can lead to unspecified results.

Thread IDs are guaranteed to be unique only within a process.
A thread ID may be reused after a terminated thread has been joined,
or a detached thread has terminated.

The thread ID returned by
.BR pthread_self ()
is not the same thing as the kernel thread ID returned by a call to
.BR gettid (2).
.SH SEE ALSO
.BR pthread_create (3),
.BR pthread_equal (3),
.BR pthreads (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2008 Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH PTHREAD_SETAFFINITY_NP 3 2015-03-02 "Linux" "Linux Programmer's Manual"
.SH NAME
pthread_setaffinity_np, pthread_getaffinity_np \- set/get
CPU affinity of a thread
.SH SYNOPSIS
.nf
.BR "#define _GNU_SOURCE" "             /* See feature_test_macros(7) */"
.B #include <pthread.h>

.BI "int pthread_setaffinity_np(pthread_t " thread ", size_t " cpusetsize ,
.BI "                           const cpu_set_t *" cpuset );
.BI "int pthread_getaffinity_np(pthread_t " thread ", size_t " cpusetsize ,
.BI "                           cpu_set_t *" cpuset );
.sp
Compile and link with \fI\-pthread\fP.
.fi
.SH DESCRIPTION
The
.BR pthread_setaffinity_np ()
function
sets the CPU affinity mask of the thread
.I thread
to the CPU set pointed to by
.IR cpuset .
If the call is successful,
and the thread is not currently running on one of the CPUs in
.IR cpuset ,
then it is migrated to one of those CPUs.

The
.BR pthread_getaffinity_np ()
function returns the CPU affinity mask of the thread
.I thread
in the buffer pointed to by
.IR cpuset .

For more details on CPU affinity masks, see
.BR sched_setaffinity (2).
For a description of a set of macros
that can be used to manipulate and inspect CPU sets, see
.BR CPU_SET (3).

The argument
.I cpusetsize
is the length (in bytes) of the buffer pointed to by
.IR cpuset .
Typically, this argument would be specified as
.IR sizeof(cpu_set_t) .
(It may be some other value, if using the macros described in
.BR CPU_SET (3)
for dynamically allocating a CPU set.)
.SH RETURN VALUE
On success, these functions return 0;
on error, they return a nonzero error number.
.SH ERRORS
.TP
.B EFAULT
A supplied memory address was invalid.
.TP
.B EINVAL
.RB ( pthread_setaffinity_np ())
The affinity bit mask
.I mask
contains no processors that are currently physically on the system
and permitted to the thread according to any restrictions that
may be imposed by the "cpuset" mechanism described in
.BR cpuset (7).
.TP
.BR EINVAL
.RB ( pthread_setaffinity_np ())
.I cpuset
specified a CPU that was outside the set supported by the kernel.
(The kernel configuration option
.BR CONFIG_NR_CPUS
.\" FIXME . ?
.\" Loic Domaigne commented: it seems that in the future the
.\" kernel developers want to make cpumask_t dynamic, so
.\" CONFIG_NR_CPUS might become obsolete in the future.
defines the range of the set supported by the kernel data type
.\" cpumask_t
used to represent CPU sets.)
.\" The raw sched_getaffinity() system call returns the size (in bytes)
.\" of the cpumask_t type.
.TP
.B EINVAL
.RB ( pthread_getaffinity_np ())
.I cpusetsize
is smaller than the size of the affinity mask used by the kernel.
.TP
.B ESRCH
No thread with the ID
.I thread
could be found.
.SH VERSIONS
These functions are provided by glibc since version 2.3.4.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw25 lb lb
l l l.
Interface	Attribute	Value
T{
.BR pthread_setaffinity_np (),
.BR pthread_getaffinity_np ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
These functions are nonstandard GNU extensions;
hence the suffix "_np" (nonportable) in the names.
.SH NOTES
After a call to
.BR pthread_setaffinity_np (),
the set of CPUs on which the thread will actually run is
the intersection of the set specified in the
.I cpuset
argument and the set of CPUs actually present on the system.
The system may further restrict the set of CPUs on which the thread
runs if the "cpuset" mechanism described in
.BR cpuset (7)
is being used.
These restrictions on the actual set of CPUs on which the thread
will run are silently imposed by the kernel.

These functions are implemented on top of the
.BR sched_setaffinity (2)
and
.BR sched_getaffinity (2)
system calls.

In glibc 2.3.3 only,
versions of these functions were provided that did not have a
.I cpusetsize
argument.
Instead the CPU set size given to the underlying system calls was always
.IR sizeof(cpu_set_t) .

A new thread created by
.BR pthread_create (3)
inherits a copy of its creator's CPU affinity mask.
.SH EXAMPLE
In the following program, the main thread uses
.BR pthread_setaffinity_np ()
to set its CPU affinity mask to include CPUs 0 to 7
(which may not all be available on the system),
and then calls
.BR pthread_getaffinity_np ()
to check the resulting CPU affinity mask of the thread.

.nf
#define _GNU_SOURCE
#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>
#include <errno.h>

#define handle_error_en(en, msg) \\
        do { errno = en; perror(msg); exit(EXIT_FAILURE); } while (0)

int
main(int argc, char *argv[])
{
    int s, j;
    cpu_set_t cpuset;
    pthread_t thread;

    thread = pthread_self();

    /* Set affinity mask to include CPUs 0 to 7 */

    CPU_ZERO(&cpuset);
    for (j = 0; j < 8; j++)
        CPU_SET(j, &cpuset);

    s = pthread_setaffinity_np(thread, sizeof(cpu_set_t), &cpuset);
    if (s != 0)
        handle_error_en(s, "pthread_setaffinity_np");

    /* Check the actual affinity mask assigned to the thread */

    s = pthread_getaffinity_np(thread, sizeof(cpu_set_t), &cpuset);
    if (s != 0)
        handle_error_en(s, "pthread_getaffinity_np");

    printf("Set returned by pthread_getaffinity_np() contained:\\n");
    for (j = 0; j < CPU_SETSIZE; j++)
        if (CPU_ISSET(j, &cpuset))
            printf("    CPU %d\\n", j);

    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR sched_setaffinity (2),
.BR pthread_attr_setaffinity_np (3),
.BR pthread_self (3),
.BR sched_getcpu (3),
.BR cpuset (7),
.BR pthreads (7),
.BR sched (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2008 Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH PTHREAD_SETCANCELSTATE 3 2015-03-02 "Linux" "Linux Programmer's Manual"
.SH NAME
pthread_setcancelstate, pthread_setcanceltype \-
set cancelability state and type
.SH SYNOPSIS
.nf
.B #include <pthread.h>

.BI "int pthread_setcancelstate(int " state ", int *" oldstate );
.BI "int pthread_setcanceltype(int " type ", int *" oldtype );
.sp
Compile and link with \fI\-pthread\fP.
.fi
.SH DESCRIPTION
The
.BR pthread_setcancelstate ()
sets the cancelability state of the calling thread to the value
given in
.IR state .
The previous cancelability state of the thread is returned
in the buffer pointed to by
.IR oldstate .
The
.I state
argument must have one of the following values:
.TP
.B PTHREAD_CANCEL_ENABLE
The thread is cancelable.
This is the default cancelability state in all new threads,
including the initial thread.
The thread's cancelability type determines when a cancelable thread
will respond to a cancellation request.
.TP
.B PTHREAD_CANCEL_DISABLE
The thread is not cancelable.
If a cancellation request is received,
it is blocked until cancelability is enabled.
.PP
The
.BR pthread_setcanceltype ()
sets the cancelability type of the calling thread to the value
given in
.IR type .
The previous cancelability type of the thread is returned
in the buffer pointed to by
.IR oldtype .
The
.I type
argument must have one of the following values:
.TP
.B PTHREAD_CANCEL_DEFERRED
A cancellation request is deferred until the thread next calls
a function that is a cancellation point (see
.BR pthreads (7)).
This is the default cancelability type in all new threads,
including the initial thread.
.TP
.B PTHREAD_CANCEL_ASYNCHRONOUS
The thread can be canceled at any time.
(Typically,
it will be canceled immediately upon receiving a cancellation request,
but the system doesn't guarantee this.)
.PP
The set-and-get operation performed by each of these functions
is atomic with respect to other threads in the process
calling the same function.
.SH RETURN VALUE
On success, these functions return 0;
on error, they return a nonzero error number.
.SH ERRORS
The
.BR pthread_setcancelstate ()
can fail with the following error:
.TP
.B EINVAL
Invalid value for
.IR state .
.PP
The
.BR pthread_setcanceltype ()
can fail with the following error:
.TP
.B EINVAL
Invalid value for
.IR type .
.\" .SH VERSIONS
.\" Available since glibc 2.0
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.ad l
.TS
allbox;
lb lb lb
lw25 l l.
Interface	Attribute	Value
T{
.BR pthread_setcancelstate (),
.BR pthread_setcanceltype ()
T}	Thread safety	T{
MT-Safe
T}
T{
.BR pthread_setcancelstate (),
.BR pthread_setcanceltype ()
T}	Async-cancel-safety	T{
AC-Safe
T}
.TE
.ad
.hy
.SH CONFORMING TO
POSIX.1-2001.
.SH NOTES
For details of what happens when a thread is canceled, see
.BR pthread_cancel (3).

Briefly disabling cancelability is useful
if a thread performs some critical action
that must not be interrupted by a cancellation request.
Beware of disabling cancelability for long periods,
or around operations that may block for long periods,
since that will render the thread unresponsive to cancellation requests.
.SS Asynchronous cancelability
Setting the cancelability type to
.B PTHREAD_CANCEL_ASYNCHRONOUS
is rarely useful.
Since the thread could be canceled at
.I any
time, it cannot safely reserve resources (e.g., allocating memory with
.BR malloc (3)),
acquire mutexes, semaphores, or locks, and so on.
Reserving resources is unsafe because the application has no way of
knowing what the state of these resources is when the thread is canceled;
that is, did cancellation occur before the resources were reserved,
while they were reserved, or after they were released?
Furthermore, some internal data structures
(e.g., the linked list of free blocks managed by the
.BR malloc (3)
family of functions) may be left in an inconsistent state
if cancellation occurs in the middle of the function call.
Consequently, clean-up handlers cease to be useful.

Functions that can be safely asynchronously canceled are called
.IR "async-cancel-safe functions" .
POSIX.1-2001 requires only that
.BR pthread_cancel (3),
.BR pthread_setcancelstate (),
and
.BR pthread_setcanceltype ()
be async-cancel-safe.
In general, other library functions
can't be safely called from an asynchronously cancelable thread.

One of the few circumstances in which asynchronous cancelability is useful
is for cancellation of a thread that is in a pure compute-bound loop.
.SS Portability notes
The Linux threading implementations permit the
.I oldstate
argument of
.BR pthread_setcancelstate ()
to be NULL, in which case the information about the previous
cancelability state is not returned to the caller.
Many other implementations also permit a NULL
.I oldstat
argument,
.\" It looks like at least Solaris, FreeBSD and Tru64 support this.
but POSIX.1-2001 does not specify this point,
so portable applications should always specify a non-NULL value in
.IR oldstate .
A precisely analogous set of statements applies for the
.I oldtype
argument of
.BR pthread_setcanceltype ().
.SH EXAMPLE
See
.BR pthread_cancel (3).
.SH SEE ALSO
.BR pthread_cancel (3),
.BR pthread_cleanup_push (3),
.BR pthread_testcancel (3),
.BR pthreads (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2009 Michael Kerrisk, <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH PTHREAD_SETCONCURRENCY 3 2015-03-02 "Linux" "Linux Programmer's Manual"
.SH NAME
pthread_setconcurrency, pthread_getconcurrency \- set/get
the concurrency level
.SH SYNOPSIS
.nf
.B #include <pthread.h>

.BI "int pthread_setconcurrency(int " new_level );
.BI "int pthread_getconcurrency(void);
.sp
Compile and link with \fI\-pthread\fP.
.fi
.SH DESCRIPTION
The
.BR pthread_setconcurrency ()
function informs the implementation of the application's
desired concurrency level, specified in
.IR new_level .
The implementation takes this only as a hint:
POSIX.1 does not specify the level of concurrency that
should be provided as a result of calling
.BR pthread_setconcurrency ().

Specifying
.I new_level
as 0 instructs the implementation to manage the concurrency level
as it deems appropriate.

.BR pthread_getconcurrency ()
returns the current value of the concurrency level for this process.
.SH RETURN VALUE
On success,
.BR pthread_setconcurrency ()
returns 0;
on error, it returns a nonzero error number.

.BR pthread_getconcurrency ()
always succeeds, returning the concurrency level set by a previous call to
.BR pthread_setconcurrency (),
or 0, if
.BR pthread_setconcurrency ()
has not previously been called.
.SH ERRORS
.BR pthread_setconcurrency ()
can fail with the following error:
.TP
.B EINVAL
.I new_level
is negative.
.PP
POSIX.1-2001 also documents an
.BR EAGAIN
error ("the value specified by
.I new_level
would cause a system resource to be exceeded").
.SH VERSIONS
These functions are available in glibc since version 2.1.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw25 lb lb
l l l.
Interface	Attribute	Value
T{
.BR pthread_setconcurrency (),
.BR pthread_getconcurrency ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
POSIX.1-2001.
.SH NOTES
The default concurrency level is 0.

Concurrency levels are meaningful only for M:N threading implementations,
where at any moment a subset of a process's set of user-level threads
may be bound to a smaller number of kernel-scheduling entities.
Setting the concurrency level allows the application to
give the system a hint as to the number of kernel-scheduling entities
that should be provided for efficient execution of the application.

Both LinuxThreads and NPTL are 1:1 threading implementations,
so setting the concurrency level has no meaning.
In other words,
on Linux these functions merely exist for compatibility with other systems,
and they have no effect on the execution of a program.
.SH SEE ALSO
.BR pthread_attr_setscope (3),
.BR pthreads (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2012 Chandan Apsangi <chandan.jc@gmail.com>
.\" and Copyright (C) 2013 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH PTHREAD_SETNAME_NP 3 2014-05-28 "Linux" "Linux Programmer's Manual"
.SH NAME
pthread_setname_np, pthread_getname_np \- set/get the name of a thread
.SH SYNOPSIS
.nf
.BR "#define _GNU_SOURCE" "             /* See feature_test_macros(7) */"
.B #include <pthread.h>
.BI "int pthread_setname_np(pthread_t " thread ", const char *" name ");
.BI "int pthread_getname_np(pthread_t " thread ,
.BI "                       char *" name ", size_t " len );
.fi
.sp
Compile and link with \fI\-pthread\fP.
.SH DESCRIPTION
By default, all the threads created using
.BR pthread_create ()
inherit the program name.
The
.BR pthread_setname_np ()
function can be used to set a unique name for a thread,
which can be useful for debugging
multithreaded applications.
The thread name is a meaningful C language string, whose length is
restricted to 16 characters, including the terminating null byte (\(aq\\0\(aq).
The
.I thread
argument specifies the thread whose name is to be changed;
.I name
specifies the new name.

The
.BR pthread_getname_np ()
function can be used to retrieve the name of the thread.
The
.I thread
argument specifies the thread whose name is to be retrieved.
The buffer
.I name
is used to return the thread name;
.I len
specifies the number of bytes available in
.IR name .
The buffer specified by
.I name
should be at least 16 characters in length.
The returned thread name in the output buffer will be null terminated.
.SH RETURN VALUE
On success, these functions return 0;
on error, they return a nonzero error number.
.SH ERRORS
The
.BR pthread_setname_np ()
function can fail with the following error:
.TP
.B ERANGE
The length of the string specified pointed to by
.I name
exceeds the allowed limit.
.PP
The
.BR pthread_getname_np ()
function can fail with the following error:
.TP
.B ERANGE
The buffer specified by
.I name
and
.I len
is too small to hold the thread name.
.PP
If either of these functions fails to open
.IR /proc/self/task/[tid]/comm ,
then the call may fail with one of the errors described in
.BR open (2).
.SH VERSIONS
These functions first appeared in glibc in version 2.12.
.SH CONFORMING TO
These functions are nonstandard GNU extensions.
.SH NOTES
.BR pthread_setname_np ()
internally writes to the thread-specific
.I comm
file under the
.IR /proc
filesystem:
.IR /proc/self/task/[tid]/comm .
.BR pthread_getname_np ()
retrieves it from the same location.
.SH EXAMPLE
.PP
The program below demonstrates the use of
.BR pthread_setname_np ()
and
.BR pthread_getname_np ().

The following shell session shows a sample run of the program:
.in +4n
.nf

.RB "$" " ./a.out"
Created a thread. Default name is: a.out
The thread name after setting it is THREADFOO.
\fB^Z\fP                           # Suspend the program
[1]+  Stopped           ./a.out
.RB "$ " "ps H -C a.out -o 'pid tid cmd comm'"
  PID   TID CMD                         COMMAND
 5990  5990 ./a.out                     a.out
 5990  5991 ./a.out                     THREADFOO
.RB "$ " "cat /proc/5990/task/5990/comm"
a.out
.RB "$ " "cat /proc/5990/task/5991/comm"
THREADFOO
.fi
.in
.SS Program source
\&
.nf
#define _GNU_SOURCE
#include <pthread.h>
#include <stdio.h>
#include <string.h>
#include <unistd.h>
#include <errno.h>
#include <stdlib.h>

#define NAMELEN 16

#define errExitEN(en, msg) \\
            do { errno = en; perror(msg); exit(EXIT_FAILURE); \\
        } while (0)

static void *
threadfunc(void *parm)
{
    sleep(5);          // allow main program to set the thread name
    return NULL;
}

int
main(int argc, char **argv)
{
    pthread_t thread;
    int rc;
    char thread_name[NAMELEN];

    rc = pthread_create(&thread, NULL, threadfunc, NULL);
    if (rc != 0)
        errExitEN(rc, "pthread_create");

    rc = pthread_getname_np(thread, thread_name, NAMELEN);
    if (rc != 0)
        errExitEN(rc, "pthread_getname_np");

    printf("Created a thread. Default name is: %s\\n", thread_name);
    rc = pthread_setname_np(thread, (argc > 1) ? argv[1] : "THREADFOO");
    if (rc != 0)
        errExitEN(rc, "pthread_setname_np");

    sleep(2);

    rc = pthread_getname_np(thread, thread_name,
                            (argc > 2) ? atoi(argv[1]) : NAMELEN);
    if (rc != 0)
        errExitEN(rc, "pthread_getname_np");
    printf("The thread name after setting it is %s.\\n", thread_name);

    rc = pthread_join(thread, NULL);
    if (rc != 0)
        errExitEN(rc, "pthread_join");

    printf("Done\\n");
    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.ad l
.nh
.BR prctl (2),
.BR pthread_create (3),
.BR pthreads (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2008 Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH PTHREAD_SETSCHEDPARAM 3 2015-03-02 "Linux" "Linux Programmer's Manual"
.SH NAME
pthread_setschedparam, pthread_getschedparam \- set/get
scheduling policy and parameters of a thread
.SH SYNOPSIS
.nf
.B #include <pthread.h>

.BI "int pthread_setschedparam(pthread_t " thread ", int " policy ,
.BI "                          const struct sched_param *" param );
.BI "int pthread_getschedparam(pthread_t " thread ", int *" policy ,
.BI "                          struct sched_param *" param );
.sp
Compile and link with \fI\-pthread\fP.
.fi
.SH DESCRIPTION
The
.BR pthread_setschedparam ()
function sets the scheduling policy and parameters of the thread
.IR thread .

.I policy
specifies the new scheduling policy for
.IR thread .
The supported values for
.IR policy ,
and their semantics, are described in
.BR sched (7).
.\" FIXME . pthread_setschedparam() places no restriction on the policy,
.\" but pthread_attr_setschedpolicy() restricts policy to RR/FIFO/OTHER
.\" http://sourceware.org/bugzilla/show_bug.cgi?id=7013

The structure pointed to by
.I param
specifies the new scheduling parameters for
.IR thread .
Scheduling parameters are maintained in the following structure:

.in +4n
.nf
struct sched_param {
    int sched_priority;     /* Scheduling priority */
};
.fi
.in

As can be seen, only one scheduling parameter is supported.
For details of the permitted ranges for scheduling priorities
in each scheduling policy, see
.BR sched (7).

The
.BR pthread_getschedparam ()
function returns the scheduling policy and parameters of the thread
.IR thread ,
in the buffers pointed to by
.I policy
and
.IR param ,
respectively.
The returned priority value is that set by the most recent
.BR pthread_setschedparam (),
.BR pthread_setschedprio (3),
or
.BR pthread_create (3)
call that affected
.IR thread .
The returned priority does not reflect any temporary priority adjustments
as a result of calls to any priority inheritance or
priority ceiling functions (see, for example,
.BR pthread_mutexattr_setprioceiling (3)
and
.BR pthread_mutexattr_setprotocol (3)).
.\" FIXME . nptl/pthread_setschedparam.c has the following
.\"   /* If the thread should have higher priority because of some
.\"      PTHREAD_PRIO_PROTECT mutexes it holds, adjust the priority. */
.\" Eventually (perhaps after writing the mutexattr pages), we
.\" may want to add something on the topic to this page.
.SH RETURN VALUE
On success, these functions return 0;
on error, they return a nonzero error number.
If
.BR pthread_setschedparam ()
fails, the scheduling policy and parameters of
.I thread
are not changed.
.SH ERRORS
Both of these functions can fail with the following error:
.TP
.B ESRCH
No thread with the ID
.I thread
could be found.
.PP
.BR pthread_setschedparam ()
may additionally fail with the following errors:
.TP
.B EINVAL
.I policy
is not a recognized policy, or
.I param
does not make sense for the
.IR policy .
.TP
.B EPERM
The caller does not have appropriate privileges
to set the specified scheduling policy and parameters.
.PP
POSIX.1-2001 also documents an
.B ENOTSUP
("attempt was made to set the policy or scheduling parameters
to an unsupported value") error for
.BR pthread_setschedparam ().
.\" .SH VERSIONS
.\" Available since glibc 2.0
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw24 lb lb
l l l.
Interface	Attribute	Value
T{
.BR pthread_setschedparam (),
.BR pthread_getschedparam ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
POSIX.1-2001.
.SH NOTES
For a description of the permissions required to, and the effect of,
changing a thread's scheduling policy and priority,
and details of the permitted ranges for priorities
in each scheduling policy, see
.BR sched (7).
.SH EXAMPLE
The program below demonstrates the use of
.BR pthread_setschedparam ()
and
.BR pthread_getschedparam (),
as well as the use of a number of other scheduling-related
pthreads functions.

In the following run, the main thread sets its scheduling policy to
.BR SCHED_FIFO
with a priority of 10,
and initializes a thread attributes object with
a scheduling policy attribute of
.BR SCHED_RR
and a scheduling priority attribute of 20.
The program then sets (using
.BR pthread_attr_setinheritsched (3))
the inherit scheduler attribute of the thread attributes object to
.BR PTHREAD_EXPLICIT_SCHED ,
meaning that threads created using this attributes object should
take their scheduling attributes from the thread attributes object.
The program then creates a thread using the thread attributes object,
and that thread displays its scheduling policy and priority.
.in +4n
.nf

$ \fBsu\fP      # Need privilege to set real-time scheduling policies
Password:
# \fB./a.out \-mf10 \-ar20 \-i e\fP
Scheduler settings of main thread
    policy=SCHED_FIFO, priority=10

Scheduler settings in \(aqattr\(aq
    policy=SCHED_RR, priority=20
    inheritsched is EXPLICIT

Scheduler attributes of new thread
    policy=SCHED_RR, priority=20
.fi
.in

In the above output, one can see that the scheduling policy and priority
were taken from the values specified in the thread attributes object.

The next run is the same as the previous,
except that the inherit scheduler attribute is set to
.BR PTHREAD_INHERIT_SCHED ,
meaning that threads created using the thread attributes object should
ignore the scheduling attributes specified in the attributes object
and instead take their scheduling attributes from the creating thread.

.in +4n
.nf
# \fB./a.out \-mf10 \-ar20 \-i i\fP
Scheduler settings of main thread
    policy=SCHED_FIFO, priority=10

Scheduler settings in \(aqattr\(aq
    policy=SCHED_RR, priority=20
    inheritsched is INHERIT

Scheduler attributes of new thread
    policy=SCHED_FIFO, priority=10
.fi
.in

In the above output, one can see that the scheduling policy and priority
were taken from the creating thread,
rather than the thread attributes object.

Note that if we had omitted the
.IR "\-i\ i"
option, the output would have been the same, since
.BR PTHREAD_INHERIT_SCHED
is the default for the inherit scheduler attribute.
.SS Program source
\&
.nf
/* pthreads_sched_test.c */

#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>

#define handle_error_en(en, msg) \\
        do { errno = en; perror(msg); exit(EXIT_FAILURE); } while (0)

static void
usage(char *prog_name, char *msg)
{
    if (msg != NULL)
        fputs(msg, stderr);

    fprintf(stderr, "Usage: %s [options]\\n", prog_name);
    fprintf(stderr, "Options are:\\n");
#define fpe(msg) fprintf(stderr, "\\t%s", msg);          /* Shorter */
    fpe("\-a<policy><prio> Set scheduling policy and priority in\\n");
    fpe("                 thread attributes object\\n");
    fpe("                 <policy> can be\\n");
    fpe("                     f  SCHED_FIFO\\n");
    fpe("                     r  SCHED_RR\\n");
    fpe("                     o  SCHED_OTHER\\n");
    fpe("\-A               Use default thread attributes object\\n");
    fpe("\-i {e|i}         Set inherit scheduler attribute to\\n");
    fpe("                 \(aqexplicit\(aq or \(aqinherit\(aq\\n");
    fpe("\-m<policy><prio> Set scheduling policy and priority on\\n");
    fpe("                 main thread before pthread_create() call\\n");
    exit(EXIT_FAILURE);
}

static int
get_policy(char p, int *policy)
{
    switch (p) {
    case \(aqf\(aq: *policy = SCHED_FIFO;     return 1;
    case \(aqr\(aq: *policy = SCHED_RR;       return 1;
    case \(aqo\(aq: *policy = SCHED_OTHER;    return 1;
    default:  return 0;
    }
}

static void
display_sched_attr(int policy, struct sched_param *param)
{
    printf("    policy=%s, priority=%d\\n",
            (policy == SCHED_FIFO)  ? "SCHED_FIFO" :
            (policy == SCHED_RR)    ? "SCHED_RR" :
            (policy == SCHED_OTHER) ? "SCHED_OTHER" :
            "???",
            param\->sched_priority);
}

static void
display_thread_sched_attr(char *msg)
{
    int policy, s;
    struct sched_param param;

    s = pthread_getschedparam(pthread_self(), &policy, &param);
    if (s != 0)
        handle_error_en(s, "pthread_getschedparam");

    printf("%s\\n", msg);
    display_sched_attr(policy, &param);
}

static void *
thread_start(void *arg)
{
    display_thread_sched_attr("Scheduler attributes of new thread");

    return NULL;
}

int
main(int argc, char *argv[])
{
    int s, opt, inheritsched, use_null_attrib, policy;
    pthread_t thread;
    pthread_attr_t attr;
    pthread_attr_t *attrp;
    char *attr_sched_str, *main_sched_str, *inheritsched_str;
    struct sched_param param;

    /* Process command\-line options */

    use_null_attrib = 0;
    attr_sched_str = NULL;
    main_sched_str = NULL;
    inheritsched_str = NULL;

    while ((opt = getopt(argc, argv, "a:Ai:m:")) != \-1) {
        switch (opt) {
        case \(aqa\(aq: attr_sched_str = optarg;      break;
        case \(aqA\(aq: use_null_attrib = 1;          break;
        case \(aqi\(aq: inheritsched_str = optarg;    break;
        case \(aqm\(aq: main_sched_str = optarg;      break;
        default:  usage(argv[0], "Unrecognized option\\n");
        }
    }

    if (use_null_attrib &&
            (inheritsched_str != NULL || attr_sched_str != NULL))
        usage(argv[0], "Can\(aqt specify \-A with \-i or \-a\\n");

    /* Optionally set scheduling attributes of main thread,
       and display the attributes */

    if (main_sched_str != NULL) {
        if (!get_policy(main_sched_str[0], &policy))
            usage(argv[0], "Bad policy for main thread (\-m)\\n");
        param.sched_priority = strtol(&main_sched_str[1], NULL, 0);

        s = pthread_setschedparam(pthread_self(), policy, &param);
        if (s != 0)
            handle_error_en(s, "pthread_setschedparam");
    }

    display_thread_sched_attr("Scheduler settings of main thread");
    printf("\\n");

    /* Initialize thread attributes object according to options */

    attrp = NULL;

    if (!use_null_attrib) {
        s = pthread_attr_init(&attr);
        if (s != 0)
            handle_error_en(s, "pthread_attr_init");
        attrp = &attr;
    }

    if (inheritsched_str != NULL) {
        if (inheritsched_str[0] == \(aqe\(aq)
            inheritsched = PTHREAD_EXPLICIT_SCHED;
        else if (inheritsched_str[0] == \(aqi\(aq)
            inheritsched = PTHREAD_INHERIT_SCHED;
        else
            usage(argv[0], "Value for \-i must be \(aqe\(aq or \(aqi\(aq\\n");

        s = pthread_attr_setinheritsched(&attr, inheritsched);
        if (s != 0)
            handle_error_en(s, "pthread_attr_setinheritsched");
    }

    if (attr_sched_str != NULL) {
        if (!get_policy(attr_sched_str[0], &policy))
            usage(argv[0],
                    "Bad policy for \(aqattr\(aq (\-a)\\n");
        param.sched_priority = strtol(&attr_sched_str[1], NULL, 0);

        s = pthread_attr_setschedpolicy(&attr, policy);
        if (s != 0)
            handle_error_en(s, "pthread_attr_setschedpolicy");
        s = pthread_attr_setschedparam(&attr, &param);
        if (s != 0)
            handle_error_en(s, "pthread_attr_setschedparam");
    }

    /* If we initialized a thread attributes object, display
       the scheduling attributes that were set in the object */

    if (attrp != NULL) {
        s = pthread_attr_getschedparam(&attr, &param);
        if (s != 0)
            handle_error_en(s, "pthread_attr_getschedparam");
        s = pthread_attr_getschedpolicy(&attr, &policy);
        if (s != 0)
            handle_error_en(s, "pthread_attr_getschedpolicy");

        printf("Scheduler settings in \(aqattr\(aq\\n");
        display_sched_attr(policy, &param);

        s = pthread_attr_getinheritsched(&attr, &inheritsched);
        printf("    inheritsched is %s\\n",
                (inheritsched == PTHREAD_INHERIT_SCHED)  ? "INHERIT" :
                (inheritsched == PTHREAD_EXPLICIT_SCHED) ? "EXPLICIT" :
                "???");
        printf("\\n");
    }

    /* Create a thread that will display its scheduling attributes */

    s = pthread_create(&thread, attrp, &thread_start, NULL);
    if (s != 0)
        handle_error_en(s, "pthread_create");

    /* Destroy unneeded thread attributes object */

    if (!use_null_attrib) {
      s = pthread_attr_destroy(&attr);
      if (s != 0)
          handle_error_en(s, "pthread_attr_destroy");
    }

    s = pthread_join(thread, NULL);
    if (s != 0)
        handle_error_en(s, "pthread_join");

    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.ad l
.nh
.BR getrlimit (2),
.BR sched_get_priority_min (2),
.BR pthread_attr_init (3),
.BR pthread_attr_setinheritsched (3),
.BR pthread_attr_setschedparam (3),
.BR pthread_attr_setschedpolicy (3),
.BR pthread_create (3),
.BR pthread_self (3),
.BR pthread_setschedprio (3),
.BR pthreads (7),
.BR sched (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2008 Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH PTHREAD_SETSCHEDPRIO 3 2015-03-02 "Linux" "Linux Programmer's Manual"
.SH NAME
pthread_setschedprio \- set scheduling priority of a thread
.SH SYNOPSIS
.nf
.B #include <pthread.h>

.BI "int pthread_setschedprio(pthread_t " thread ", int " prio );
.sp
Compile and link with \fI\-pthread\fP.
.fi
.SH DESCRIPTION
The
.BR pthread_setschedprio ()
function sets the scheduling priority of the thread
.I thread
to the value specified in
.IR prio .
(By contrast
.BR pthread_setschedparam (3)
changes both the scheduling policy and priority of a thread.)
.\" FIXME . nptl/pthread_setschedprio.c has the following
.\"   /* If the thread should have higher priority because of some
.\"      PTHREAD_PRIO_PROTECT mutexes it holds, adjust the priority. */
.\" Eventually (perhaps after writing the mutexattr pages), we
.\" may want to add something on the topic to this page.
.\" nptl/pthread_setschedparam.c has a similar case.
.SH RETURN VALUE
On success, this function returns 0;
on error, it returns a nonzero error number.
If
.BR pthread_setschedprio ()
fails, the scheduling priority of
.I thread
is not changed.
.SH ERRORS
.TP
.B EINVAL
.I prio
is not valid for the scheduling policy of the specified thread.
.TP
.B EPERM
The caller does not have appropriate privileges
to set the specified priority.
.TP
.B ESRCH
No thread with the ID
.I thread
could be found.
.PP
POSIX.1-2001 also documents an
.B ENOTSUP
("attempt was made to set the priority
to an unsupported value") error for
.BR pthread_setschedparam (3).
.SH VERSIONS
This function is available in glibc since version 2.3.4.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw22 lb lb
l l l.
Interface	Attribute	Value
T{
.BR pthread_setschedprio ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
POSIX.1-2001.
.SH NOTES
For a description of the permissions required to, and the effect of,
changing a thread's scheduling priority,
and details of the permitted ranges for priorities
in each scheduling policy, see
.BR sched (7).
.SH SEE ALSO
.ad l
.nh
.BR getrlimit (2),
.BR sched_get_priority_min (2),
.BR pthread_attr_init (3),
.BR pthread_attr_setinheritsched (3),
.BR pthread_attr_setschedparam (3),
.BR pthread_attr_setschedpolicy (3),
.BR pthread_create (3),
.BR pthread_self (3),
.BR pthread_setschedparam (3),
.BR pthreads (7),
.BR sched (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2009 Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH PTHREAD_SIGMASK 3 2015-03-02 "Linux" "Linux Programmer's Manual"
.SH NAME
pthread_sigmask \- examine and change mask of blocked signals
.SH SYNOPSIS
.nf
.B #include <signal.h>

.BI "int pthread_sigmask(int " how ", const sigset_t *" set \
", sigset_t *" oldset );
.fi
.sp
Compile and link with \fI\-pthread\fP.
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR pthread_sigmask ():
.RS 4
_POSIX_C_SOURCE\ >=\ 199506L || _XOPEN_SOURCE\ >=\ 500
.RE
.ad b
.SH DESCRIPTION
The
.BR pthread_sigmask ()
function is just like
.BR sigprocmask (2),
with the difference that its use in multithreaded programs
is explicitly specified by POSIX.1-2001.
Other differences are noted in this page.

For a description of the arguments and operation of this function, see
.BR sigprocmask (2).
.SH RETURN VALUE
On success,
.BR pthread_sigmask ()
returns 0;
on error, it returns an error number.
.SH ERRORS
See
.BR sigprocmask (2).
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR pthread_sigmask ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
POSIX.1-2001.
.SH NOTES
A new thread inherits a copy of its creator's signal mask.

The glibc
.BR pthread_sigmask ()
function silently ignores attempts to block the two real-time signals that
are used internally by the NPTL threading implementation.
See
.BR nptl (7)
for details.
.SH EXAMPLE
The program below blocks some signals in the main thread,
and then creates a dedicated thread to fetch those signals via
.BR sigwait (3).
The following shell session demonstrates its use:

.in +4n
.nf
.RB "$" " ./a.out &"
[1] 5423
.RB "$" " kill \-QUIT %1"
Signal handling thread got signal 3
.RB "$" " kill \-USR1 %1"
Signal handling thread got signal 10
.RB "$" " kill \-TERM %1"
[1]+  Terminated              ./a.out
.fi
.in
.SS Program source
\&
.nf
#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <signal.h>
#include <errno.h>

/* Simple error handling functions */

#define handle_error_en(en, msg) \\
        do { errno = en; perror(msg); exit(EXIT_FAILURE); } while (0)

static void *
sig_thread(void *arg)
{
    sigset_t *set = arg;
    int s, sig;

    for (;;) {
        s = sigwait(set, &sig);
        if (s != 0)
            handle_error_en(s, "sigwait");
        printf("Signal handling thread got signal %d\\n", sig);
    }
}

int
main(int argc, char *argv[])
{
    pthread_t thread;
    sigset_t set;
    int s;

    /* Block SIGQUIT and SIGUSR1; other threads created by main()
       will inherit a copy of the signal mask. */

    sigemptyset(&set);
    sigaddset(&set, SIGQUIT);
    sigaddset(&set, SIGUSR1);
    s = pthread_sigmask(SIG_BLOCK, &set, NULL);
    if (s != 0)
        handle_error_en(s, "pthread_sigmask");

    s = pthread_create(&thread, NULL, &sig_thread, (void *) &set);
    if (s != 0)
        handle_error_en(s, "pthread_create");

    /* Main thread carries on to create other threads and/or do
       other work */

    pause();            /* Dummy pause so we can test program */
}
.fi
.SH SEE ALSO
.BR sigaction (2),
.BR sigpending (2),
.BR sigprocmask (2),
.BR pthread_create (3),
.BR pthread_kill (3),
.BR sigsetops (3),
.BR pthreads (7),
.BR signal (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2010 Michael Kerrisk, <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH PTHREAD_SIGQUEUE 3 2015-03-02 "Linux" "Linux Programmer's Manual"
.SH NAME
pthread_sigqueue \- queue a signal and data to a thread
.SH SYNOPSIS
.nf
.B #include <signal.h>
.B #include <pthread.h>

.BI "int pthread_sigqueue(pthread_t " thread ", int " sig ,
.BI "                     const union sigval " value );
.fi
.sp
Compile and link with \fI\-pthread\fP.
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR pthread_sigqueue ():
_GNU_SOURCE
.SH DESCRIPTION
The
.BR pthread_sigqueue ()
function performs a similar task to
.BR sigqueue (3),
but, rather than sending a signal to a process,
it sends a signal to a thread in the same process as the
calling thread.

The
.I thread
argument is the ID of a thread in the same process as the caller.
The
.I sig
argument specifies the signal to be sent.
The
.I value
argument specifies data to accompany the signal; see
.BR sigqueue (3)
for details.
.SH RETURN VALUE
On success,
.BR pthread_sigqueue ()
returns 0;
on error, it returns an error number.
.SH ERRORS
.TP
.B EAGAIN
The limit of signals which may be queued has been reached.
(See
.BR signal (7)
for further information.)
.TP
.B EINVAL
.I sig
was invalid.
.TP
.B ENOSYS
.BR pthread_sigqueue ()
is not supported on this system.
.TP
.B ESRCH
.I thread
is not valid.
.SH VERSIONS
The
.BR pthread_sigqueue ()
function first appeared in glibc 2.11.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR pthread_sigqueue ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
This function is a GNU extension.
.SH NOTES
The glibc implementation of
.BR pthread_sigqueue ()
gives an error
.RB ( EINVAL )
on attempts to send either of the real-time signals
used internally by the NPTL threading implementation.
See
.BR nptl (7)
for details.
.SH SEE ALSO
.BR rt_tgsigqueueinfo (2),
.BR sigaction (2),
.BR pthread_sigmask (3),
.BR sigqueue (3),
.BR sigwait (3),
.BR pthreads (7),
.BR signal (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2008 Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH PTHREAD_TESTCANCEL 3 2015-03-02 "Linux" "Linux Programmer's Manual"
.SH NAME
pthread_testcancel \- request delivery of any pending cancellation request
.SH SYNOPSIS
.nf
.B #include <pthread.h>

.B void pthread_testcancel(void);
.sp
Compile and link with \fI\-pthread\fP.
.fi
.SH DESCRIPTION
Calling
.BR pthread_testcancel ()
creates a cancellation point within the calling thread,
so that a thread that is otherwise executing code that contains
no cancellation points will respond to a cancellation request.

If cancelability is disabled (using
.BR pthread_setcancelstate (3)),
or no cancellation request is pending,
then a call to
.BR pthread_testcancel ()
has no effect.
.SH RETURN VALUE
This function does not return a value.
If the calling thread is canceled as a consequence of a call
to this function, then the function does not return.
.SH ERRORS
This function always succeeds.
.\" SH VERSIONS
.\" Available since glibc 2.0
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw20 lb lb
l l l.
Interface	Attribute	Value
T{
.BR pthread_testcancel ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
POSIX.1-2001.
.SH EXAMPLE
See
.BR pthread_cleanup_push (3).
.SH SEE ALSO
.BR pthread_cancel (3),
.BR pthread_cleanup_push (3),
.BR pthread_setcancelstate (3),
.BR pthreads (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2008 Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH PTHREAD_TRYJOIN_NP 3 2015-01-10 "Linux" "Linux Programmer's Manual"
.SH NAME
pthread_tryjoin_np, pthread_timedjoin_np \- try to join with a
terminated thread
.SH SYNOPSIS
.nf
.BR "#define _GNU_SOURCE" "             /* See feature_test_macros(7) */"
.B #include <pthread.h>

.BI "int pthread_tryjoin_np(pthread_t " thread ", void **" retval );

.BI "int pthread_timedjoin_np(pthread_t " thread ", void **" retval ,
.BI "                         const struct timespec *" abstime );
.fi
.sp
Compile and link with \fI\-pthread\fP.
.SH DESCRIPTION
These functions operate in the same way as
.BR pthread_join (3),
except for the differences described on this page.

The
.BR pthread_tryjoin_np ()
function performs a nonblocking join with the thread
.IR thread ,
returning the exit status of the thread in
.IR *retval .
If
.I thread
has not yet terminated, then instead of blocking, as is done by
.BR pthread_join (3),
the call returns an error.

The
.BR pthread_timedjoin_np ()
function performs a join-with-timeout.
If
.I thread
has not yet terminated,
then the call blocks until a maximum time, specified in
.IR abstime .
If the timeout expires before
.I thread
terminates,
the call returns an error.
The
.I abstime
argument is a structure of the following form,
specifying an absolute time measured since the Epoch (see
.BR time (2)):

.in +4n
.nf
struct timespec {
    time_t tv_sec;     /* seconds */
    long   tv_nsec;    /* nanoseconds */
};
.fi
.in
.SH RETURN VALUE
On success,
these functions return 0;
on error, they return an error number.
.SH ERRORS
These functions can fail with the same errors as
.BR pthread_join (3).
.BR pthread_tryjoin_np ()
can in addition fail with the following error:
.TP
.B EBUSY
.I thread
had not yet terminated at the time of the call.
.PP
.BR pthread_timedjoin_np ()
can in addition fail with the following errors:
.TP
.BR ETIMEDOUT
The call timed out before
.I thread
terminated.
.TP
.BR EINVAL
.I abstime
value is invalid
.RI ( tv_sec
is less than 0 or
.IR tv_nsec
is greater than 1e9).
.PP
.BR pthread_timedjoin_np ()
never returns the error
.BR EINTR .
.SH VERSIONS
These functions first appeared in glibc in version 2.3.3.
.SH CONFORMING TO
These functions are nonstandard GNU extensions;
hence the suffix "_np" (nonportable) in the names.
.SH EXAMPLE
The following code waits to join for up to 5 seconds:

.nf
    struct timespec ts;
    int s;

    ...

    if (clock_gettime(CLOCK_REALTIME, &ts) == \-1) {
	/* Handle error */
    }

    ts.tv_sec += 5;

    s = pthread_timedjoin_np(thread, NULL, &ts);
    if (s != 0) {
        /* Handle error */
    }
.fi
.SH SEE ALSO
.BR clock_gettime (2),
.BR pthread_exit (3),
.BR pthread_join (3),
.BR pthreads (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2009 Michael Kerrisk, <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH PTHREAD_YIELD 3 2015-03-02 "Linux" "Linux Programmer's Manual"
.SH NAME
pthread_yield \- yield the processor
.SH SYNOPSIS
.nf
.BR "#define _GNU_SOURCE" "             /* See feature_test_macros(7) */"
.B #include <pthread.h>

.B int pthread_yield(void);
.fi
.sp
Compile and link with \fI\-pthread\fP.
.SH DESCRIPTION
.BR pthread_yield ()
causes the calling thread to relinquish the CPU.
The thread is placed at the end of the run queue for its static
priority and another thread is scheduled to run.
For further details, see
.BR sched_yield (2)
.SH RETURN VALUE
On success,
.BR pthread_yield ()
returns 0;
on error, it returns an error number.
.SH ERRORS
On Linux, this call always succeeds
(but portable and future-proof applications should nevertheless
handle a possible error return).
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR pthread_yield ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
This call is nonstandard, but present on several other systems.
Use the standardized
.BR sched_yield (2)
instead.
.\" e.g., the BSDs, Tru64, AIX, and Irix.
.SH NOTES
On Linux, this function is implemented as a call to
.BR sched_yield (2).
.SH SEE ALSO
.BR sched_yield (2),
.BR pthreads (7),
.BR sched (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" %%%LICENSE_START(PUBLIC_DOMAIN)
.\" This page is in the public domain. - aeb
.\" %%%LICENSE_END
.\"
.\" 2004-12-17, mtk, added description of ptsname_r() + ERRORS
.\"
.TH PTSNAME 3 2015-03-02 "" "Linux Programmer's Manual"
.SH NAME
ptsname, ptsname_r \- get the name of the slave pseudoterminal
.SH SYNOPSIS
.nf
.BR "#define _XOPEN_SOURCE" "       /* See feature_test_macros(7) */"
.br
.B #include <stdlib.h>
.sp
.BI "char *ptsname(int " fd ");"
.sp
.BR "#define _GNU_SOURCE" "         /* See feature_test_macros(7) */"
.br
.B #include <stdlib.h>
.sp
.BI "int ptsname_r(int " fd ", char *" buf ", size_t " buflen ");"
.fi
.SH DESCRIPTION
The
.BR ptsname ()
function returns the name of the slave pseudoterminal device
corresponding to the master referred to by
.IR fd .

The
.BR ptsname_r ()
function is the reentrant equivalent of
.BR ptsname ().
It returns the name of the slave pseudoterminal device as a
null-terminated string in the buffer pointed to by
.IR buf .
The
.I buflen
argument specifies the number of bytes available in
.IR buf .
.SH RETURN VALUE
On success,
.BR ptsname ()
returns a pointer to a string in static storage which will be
overwritten by subsequent calls.
This pointer must not be freed.
On failure, NULL is returned.

On success,
.BR ptsname_r ()
returns 0.
On failure, a nonzero value is returned
and
.I errno
is set to indicate the error.
.\" In fact the errno value is also returned as the function
.\" result -- MTK, Dec 04
.SH ERRORS
.TP
.B EINVAL
.RB ( ptsname_r ()
only)
.I buf
is NULL.
.TP
.B ENOTTY
.I fd
does not refer to a pseudoterminal master device.
.TP
.B ERANGE
.RB ( ptsname_r ()
only)
.I buf
is too small.
.SH VERSIONS
.BR ptsname ()
is provided in glibc since version 2.1.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR ptsname ()
T}	Thread safety	MT-Unsafe race:ptsname
T{
.BR ptsname_r ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
.BR ptsname ()
is part of the UNIX 98 pseudoterminal support (see
.BR pts (4)).
This function is specified in POSIX.1-2001.

.BR ptsname_r ()
is a Linux extension.
A version of this function is documented on Tru64 and HP-UX, but
on those implementations, \-1 is returned on error, with
.I errno
set to indicate the error.
Avoid using this function in portable programs.
.SH SEE ALSO
.BR grantpt (3),
.BR posix_openpt (3),
.BR ttyname (3),
.BR unlockpt (3),
.BR pts (4),
.BR pty (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\"	Single UNIX Specification, Version 2
.\" Modified Thu Apr  8 15:00:12 1993, David Metcalfe
.\" Modified Sat Jul 24 18:44:45 1993, Rik Faith (faith@cs.unc.edu)
.\" Modified Fri Feb 14 21:47:50 1997 by Andries Brouwer (aeb@cwi.nl)
.\" Modified Mon Oct 11 11:11:11 1999 by Andries Brouwer (aeb@cwi.nl)
.\" Modified Wed Nov 10 00:02:26 1999 by Andries Brouwer (aeb@cwi.nl)
.\" Modified Sun May 20 22:17:20 2001 by Andries Brouwer (aeb@cwi.nl)
.TH PUTENV 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
putenv \- change or add an environment variable
.SH SYNOPSIS
.nf
.B #include <stdlib.h>
.sp
.BI "int putenv(char *" string );
.\" Not: const char *
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR putenv ():
_SVID_SOURCE || _XOPEN_SOURCE
.SH DESCRIPTION
The
.BR putenv ()
function adds or changes the value of environment
variables.
The argument \fIstring\fP is of the form \fIname\fP=\fIvalue\fP.
If \fIname\fP does not already exist in the environment, then
\fIstring\fP is added to the environment.
If \fIname\fP does exist,
then the value of \fIname\fP in the environment is changed to
\fIvalue\fP.
The string pointed to by \fIstring\fP becomes part of the environment,
so altering the string changes the environment.
.SH RETURN VALUE
The
.BR putenv ()
function returns zero on success,
or nonzero if an error occurs.
In the event of an error,
.I errno
is set to indicate the cause.
.SH ERRORS
.TP
.B ENOMEM
Insufficient space to allocate new environment.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR putenv ()
T}	Thread safety	MT-Unsafe const:env
.TE
.SH CONFORMING TO
SVr4, POSIX.1-2001, 4.3BSD.
.SH NOTES
The
.BR putenv ()
function is not required to be reentrant, and the
one in glibc 2.0 is not, but the glibc 2.1 version is.
.\" .LP
.\" Description for libc4, libc5, glibc:
.\" If the argument \fIstring\fP is of the form \fIname\fP,
.\" and does not contain an \(aq=\(aq character, then the variable \fIname\fP
.\" is removed from the environment.
.\" If
.\" .BR putenv ()
.\" has to allocate a new array \fIenviron\fP,
.\" and the previous array was also allocated by
.\" .BR putenv (),
.\" then it will be freed.
.\" In no case will the old storage associated
.\" to the environment variable itself be freed.
.LP
Since version 2.1.2, the glibc implementation conforms to SUSv2:
the pointer \fIstring\fP given to
.BR putenv ()
is used.
In particular, this string becomes part of the environment;
changing it later will change the environment.
(Thus, it is an error is to call
.BR putenv ()
with an automatic variable
as the argument, then return from the calling function while \fIstring\fP
is still part of the environment.)
However, glibc versions 2.0 to 2.1.1 differ: a copy of the string is used.
On the one hand this causes a memory leak, and on the other hand
it violates SUSv2.
.LP
The 4.4BSD version, like glibc 2.0, uses a copy.
.LP
SUSv2 removes the \fIconst\fP from the prototype, and so does glibc 2.1.3.
.SH SEE ALSO
.BR clearenv (3),
.BR getenv (3),
.BR setenv (3),
.BR unsetenv (3),
.BR environ (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 2003 Walter Harms (walter.harms@informatik.uni-oldenburg.de)
.\"
.\" %%%LICENSE_START(GPL_NOVERSION_ONELINE)
.\" Distributed under GPL
.\" %%%LICENSE_END
.\"
.TH PUTGRENT 3 2015-01-22 "GNU" "Linux Programmer's Manual"
.SH NAME
putgrent \- write a group database entry to a file
.SH SYNOPSIS
.BR "#define _GNU_SOURCE" "         /* See feature_test_macros(7) */"
.br
.B #include <grp.h>
.sp
.BI "int putgrent(const struct group *" grp ", FILE *" stream );
.SH DESCRIPTION
The
.BR putgrent ()
function is the counterpart for
.BR fgetgrent (3).
The function writes the content of the provided
.IR "struct group"
into the
.IR stream .
The list of group members must be NULL-terminated or NULL-initialized.
.sp
The
.IR "struct group"
is defined as follows:
.sp
.in +4n
.nf
struct group {
    char   *gr_name;      /* group name */
    char   *gr_passwd;    /* group password */
    gid_t   gr_gid;       /* group ID */
    char  **gr_mem;       /* group members */
};
.fi
.in
.SH RETURN VALUE
The function returns zero on success, and a nonzero value on error.
.SH CONFORMING TO
This function is a GNU extension.
.SH SEE ALSO
.BR fgetgrent (3),
.BR getgrent (3),
.BR group (5)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified Sat Jul 24 18:43:46 1993 by Rik Faith (faith@cs.unc.edu)
.TH PUTPWENT 3  2015-05-07 "GNU" "Linux Programmer's Manual"
.SH NAME
putpwent \- write a password file entry
.SH SYNOPSIS
.nf
.B #include <stdio.h>
.B #include <sys/types.h>
.B #include <pwd.h>
.sp
.BI "int putpwent(const struct passwd *" p ", FILE *" stream );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR putpwent ():
_SVID_SOURCE
.SH DESCRIPTION
The
.BR putpwent ()
function writes a password entry from the
structure \fIp\fP in the file associated with \fIstream\fP.
.PP
The \fIpasswd\fP structure is defined in \fI<pwd.h>\fP as follows:
.sp
.in +4n
.nf
struct passwd {
    char    *pw_name;        /* username */
    char    *pw_passwd;      /* user password */
    uid_t    pw_uid;         /* user ID */
    gid_t    pw_gid;         /* group ID */
    char    *pw_gecos;       /* real name */
    char    *pw_dir;         /* home directory */
    char    *pw_shell;       /* shell program */
};
.fi
.in
.SH RETURN VALUE
The
.BR putpwent ()
function returns 0 on success, or \-1 if an error
occurs.
In the event of an error,
.I errno
is set to indicate the cause.
.SH ERRORS
.TP
.B EINVAL
Invalid (NULL) argument given.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR putpwent ()
T}	Thread safety	MT-Safe locale
.TE

.SH CONFORMING TO
SVr4.
.SH SEE ALSO
.BR endpwent (3),
.BR fgetpwent (3),
.BR getpw (3),
.BR getpwent (3),
.BR getpwnam (3),
.BR getpwuid (3),
.BR setpwent (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1993 by Thomas Koenig (ig25@rz.uni-karlsruhe.de)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified Sat Jul 24 18:42:59 1993 by Rik Faith (faith@cs.unc.edu)
.TH PUTS 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
fputc, fputs, putc, putchar, puts \- output of characters and strings
.SH SYNOPSIS
.nf
.B #include <stdio.h>
.sp
.BI "int fputc(int " c ", FILE *" stream );

.BI "int fputs(const char *" "s" ", FILE *" "stream" );

.BI "int putc(int " c ", FILE *" stream );

.BI "int putchar(int " c );

.BI "int puts(const char *" "s" );
.fi
.SH DESCRIPTION
.BR fputc ()
writes the character
.IR c ,
cast to an
.IR "unsigned char" ,
to
.IR stream .
.PP
.BR fputs ()
writes the string
.I s
to
.IR stream ,
without its terminating null byte (\(aq\e0\(aq).
.PP
.BR putc ()
is equivalent to
.BR fputc ()
except that it may be implemented as a macro which evaluates
.I stream
more than once.
.PP
.BI "putchar(" c )
is equivalent to
.BI "putc(" c ", " stdout ).
.PP
.BR puts ()
writes the string
.I s
and a trailing newline
to
.IR stdout .
.PP
Calls to the functions described here can be mixed with each other and with
calls to other output functions from the
.I stdio
library for the same output stream.
.PP
For nonlocking counterparts, see
.BR unlocked_stdio (3).
.SH RETURN VALUE
.BR fputc (),
.BR putc ()
and
.BR putchar ()
return the character written as an
.I unsigned char
cast to an
.I int
or
.B EOF
on error.
.PP
.BR puts ()
and
.BR fputs ()
return a nonnegative number on success, or
.B EOF
on error.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw25 lb lb
l l l.
Interface	Attribute	Value
T{
.BR fputc (),
.BR fputs (),
.BR putc (),
.BR putchar (),
.BR puts ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C89, C99.
.SH BUGS
It is not advisable to mix calls to output functions from the
.I stdio
library with low-level calls to
.BR write (2)
for the file descriptor associated with the same output stream; the results
will be undefined and very probably not what you want.
.SH SEE ALSO
.BR write (2),
.BR ferror (3),
.BR fgets (3),
.BR fopen (3),
.BR fputwc (3),
.BR fputws (3),
.BR fseek (3),
.BR fwrite (3),
.BR putwchar (3),
.BR scanf (3),
.BR unlocked_stdio (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) Bruno Haible <haible@clisp.cons.org>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_ONEPARA)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"   GNU glibc-2 source code and manual
.\"   Dinkumware C library reference http://www.dinkumware.com/
.\"   OpenGroup's Single UNIX specification
.\"      http://www.UNIX-systems.org/online.html
.\"   ISO/IEC 9899:1999
.\"
.TH PUTWCHAR 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
putwchar \- write a wide character to standard output
.SH SYNOPSIS
.nf
.B #include <wchar.h>
.sp
.BI "wint_t putwchar(wchar_t " wc );
.fi
.SH DESCRIPTION
The
.BR putwchar ()
function is the wide-character equivalent of the
.BR putchar (3)
function.
It writes the wide character
.I wc
to
.IR stdout .
If
.I ferror(stdout)
becomes true, it returns
.BR WEOF .
If a wide character
conversion error occurs, it sets
.IR errno
to
.B EILSEQ
and returns
.BR WEOF .
Otherwise, it returns
.IR wc .
.PP
For a nonlocking counterpart, see
.BR unlocked_stdio (3).
.SH RETURN VALUE
The
.BR putwchar ()
function returns
.I wc
if no error occurred, or
.B WEOF
to indicate an error.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR putwchar ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C99.
.SH NOTES
The behavior of
.BR putwchar ()
depends on the
.B LC_CTYPE
category of the
current locale.
.PP
It is reasonable to expect that
.BR putwchar ()
will actually write
the multibyte sequence corresponding to the wide character
.IR wc .
.SH SEE ALSO
.BR fputwc (3),
.BR unlocked_stdio (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2002 Andries Brouwer <aeb@cwi.nl>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" This replaces an earlier man page written by Walter Harms
.\" <walter.harms@informatik.uni-oldenburg.de>.
.\"
.TH QECVT 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
qecvt, qfcvt, qgcvt \- convert a floating-point number to a string
.SH SYNOPSIS
.B #include <stdlib.h>
.sp
.BI "char *qecvt(long double " number ", int " ndigits ", int *" decpt ,
.BI "int *" sign );
.sp
.BI "char *qfcvt(long double " number ", int " ndigits ", int *" decpt ,
.BI "int *" sign );
.sp
.BI "char *qgcvt(long double " number ", int " ndigit ", char *" buf );
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR qecvt (),
.BR qfcvt (),
.BR qgcvt ():
_SVID_SOURCE
.ad b
.\" FIXME . The full FTM picture looks to have be something like the
.\" following mess:
.\"    glibc 2.20 onward
.\"        _DEFAULT_SOURCE
.\"    glibc 2.18 to glibc 2.19
.\"        _BSD_SOURCE || _SVID_SOURCE
.\"    glibc 2.10 to glibc 2.17
.\"        _SVID_SOURCE || (_XOPEN_SOURCE >= 500 ||
.\"            (_XOPEN_SOURCE && _XOPEN_SOURCE_EXTENDED) &&
.\"                ! (_POSIX_C_SOURCE >= 200809L || _XOPEN_SOURCE >= 700))
.\"    Before glibc 2.10:
.\"        _SVID_SOURCE || _XOPEN_SOURCE >= 500 ||
.\"            (_XOPEN_SOURCE && _XOPEN_SOURCE_EXTENDED)
.SH DESCRIPTION
The functions
.BR qecvt (),
.BR qfcvt (),
and
.BR qgcvt ()
are identical to
.BR ecvt (3),
.BR fcvt (3),
and
.BR gcvt (3)
respectively, except that they use a
.I "long double"
argument
.IR number .
See
.BR ecvt (3)
and
.BR gcvt (3).
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR qecvt ()
T}	Thread safety	MT-Unsafe race:qecvt
T{
.BR qfcvt ()
T}	Thread safety	MT-Unsafe race:qfcvt
T{
.BR qgcvt ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
SVr4.
Not seen in most common UNIX implementations,
but occurs in SunOS.
.\" Not supported by libc4 and libc5.
Supported by glibc.
.SH NOTES
These functions are obsolete.
Instead,
.BR snprintf (3)
is recommended.
.SH SEE ALSO
.BR ecvt (3),
.BR ecvt_r (3),
.BR gcvt (3),
.BR sprintf (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\"
.\" Modified 1993-03-29, David Metcalfe
.\" Modified 1993-07-24, Rik Faith (faith@cs.unc.edu)
.\" 2006-01-15, mtk, Added example program.
.\" Modified 2012-03-08, Mark R. Bannister <cambridge@users.sourceforge.net>
.\"                  and Ben Bacarisse <software@bsb.me.uk>
.\"     Document qsort_r()
.\"
.TH QSORT 3 2015-04-19 "" "Linux Programmer's Manual"
.SH NAME
qsort, qsort_r \- sort an array
.SH SYNOPSIS
.nf
.B #include <stdlib.h>
.sp
.BI "void qsort(void *" base ", size_t " nmemb ", size_t " size ,
.BI "           int (*" compar ")(const void *, const void *));"
.sp
.BI "void qsort_r(void *" base ", size_t " nmemb ", size_t " size ,
.BI "           int (*" compar ")(const void *, const void *, void *),"
.BI "           void *" arg ");"
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR qsort_r ():
_GNU_SOURCE
.ad b
.SH DESCRIPTION
The
.BR qsort ()
function sorts an array with \fInmemb\fP elements of
size \fIsize\fP.
The \fIbase\fP argument points to the start of the
array.
.PP
The contents of the array are sorted in ascending order according to a
comparison function pointed to by \fIcompar\fP, which is called with two
arguments that point to the objects being compared.
.PP
The comparison function must return an integer less than, equal to, or
greater than zero if the first argument is considered to be respectively
less than, equal to, or greater than the second.
If two members compare as equal,
their order in the sorted array is undefined.
.PP
The
.BR qsort_r ()
function is identical to
.BR qsort ()
except that the comparison function
.I compar
takes a third argument.
A pointer is passed to the comparison function via
.IR arg .
In this way, the comparison function does not need to use global variables to
pass through arbitrary arguments, and is therefore reentrant and safe to
use in threads.
.SH RETURN VALUE
The
.BR qsort ()
and
.BR qsort_r ()
functions return no value.
.SH VERSIONS
.BR qsort_r ()
was added to glibc in version 2.8.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw18 lb lb
l l l.
Interface	Attribute	Value
T{
.BR qsort (),
.BR qsort_r ()
T}	Thread safety	MT-Safe
.TE

.SH CONFORMING TO
The
.BR qsort ()
function conforms to SVr4, 4.3BSD, C89, C99.
.SH NOTES
To compare C strings, the comparison function can call
.BR strcmp (3),
as shown in the example below.
.SH EXAMPLE
For one example of use, see the example under
.BR bsearch (3).

Another example is the following program,
which sorts the strings given in its command-line arguments:
.sp
.nf
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

static int
cmpstringp(const void *p1, const void *p2)
{
    /* The actual arguments to this function are "pointers to
       pointers to char", but strcmp(3) arguments are "pointers
       to char", hence the following cast plus dereference */

    return strcmp(* (char * const *) p1, * (char * const *) p2);
}

int
main(int argc, char *argv[])
{
    int j;

    if (argc < 2) {
        fprintf(stderr, "Usage: %s <string>...\\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    qsort(&argv[1], argc \- 1, sizeof(char *), cmpstringp);

    for (j = 1; j < argc; j++)
        puts(argv[j]);
    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR sort (1),
.BR alphasort (3),
.BR strcmp (3),
.BR versionsort (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1993
.\"     The Regents of the University of California.  All rights reserved.
.\"
.\" %%%LICENSE_START(BSD_4_CLAUSE_UCB)
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"     This product includes software developed by the University of
.\"     California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\" %%%LICENSE_END
.\"
.\"     @(#)queue.3     8.2 (Berkeley) 1/24/94
.\"
.\" hch, 2002-03-25
.\" 2007-12-08, mtk, Converted from mdoc to man macros
.\"
.TH QUEUE 3 2007-12-28 "Linux" "Linux Programmer's Manual"
.SH NAME
LIST_ENTRY, LIST_HEAD, LIST_INIT, LIST_INSERT_AFTER,
LIST_INSERT_HEAD, LIST_REMOVE, TAILQ_ENTRY, TAILQ_HEAD,
TAILQ_INIT, TAILQ_INSERT_AFTER, TAILQ_INSERT_HEAD, TAILQ_INSERT_TAIL,
TAILQ_REMOVE, CIRCLEQ_ENTRY, CIRCLEQ_HEAD, CIRCLEQ_INIT,
CIRCLEQ_INSERT_AFTER, CIRCLEQ_INSERT_BEFORE,
CIRCLEQ_INSERT_HEAD, CIRCLEQ_INSERT_TAIL,
CIRCLEQ_REMOVE \- implementations of lists, tail queues, and circular queues
.SH SYNOPSIS
.nf
.B #include <sys/queue.h>

.BI "LIST_ENTRY(" TYPE );
.BI "LIST_HEAD(" HEADNAME ", " TYPE );
.BI "LIST_INIT(LIST_HEAD *" head );
.BI "LIST_INSERT_AFTER(LIST_ENTRY *" listelm ", "
.BI "                TYPE *" elm ", LIST_ENTRY " NAME );
.BI "LIST_INSERT_HEAD(LIST_HEAD *" head ", "
.BI "                TYPE *" elm ", LIST_ENTRY " NAME );
.BI "LIST_REMOVE(TYPE *" elm ", LIST_ENTRY " NAME );

.BI "TAILQ_ENTRY(" TYPE );
.BI "TAILQ_HEAD("HEADNAME ", " TYPE );
.BI "TAILQ_INIT(TAILQ_HEAD *" head );
.BI "TAILQ_INSERT_AFTER(TAILQ_HEAD *" head ", TYPE *" listelm ", "
.BI "                TYPE *" elm ", TAILQ_ENTRY " NAME );
.BI "TAILQ_INSERT_HEAD(TAILQ_HEAD *" head ", "
.BI "                TYPE *" elm ", TAILQ_ENTRY " NAME );
.BI "TAILQ_INSERT_TAIL(TAILQ_HEAD *" head ", "
.BI "                TYPE *" elm ", TAILQ_ENTRY " NAME );
.BI "TAILQ_REMOVE(TAILQ_HEAD *" head ", TYPE *" elm ", TAILQ_ENTRY " NAME );

.BI CIRCLEQ_ENTRY( TYPE );
.BI "CIRCLEQ_HEAD(" HEADNAME ", " TYPE );
.BI "CIRCLEQ_INIT(CIRCLEQ_HEAD *" head );
.BI "CIRCLEQ_INSERT_AFTER(CIRCLEQ_HEAD *" head ", TYPE *" listelm ", "
.BI "                TYPE *" elm ", CIRCLEQ_ENTRY " NAME );
.BI "CIRCLEQ_INSERT_BEFORE(CIRCLEQ_HEAD *" head ", TYPE *" listelm ", "
.BI "                TYPE *" elm ", CIRCLEQ_ENTRY " NAME );
.BI "CIRCLEQ_INSERT_HEAD(CIRCLEQ_HEAD *" head ", "
.BI "                TYPE *" elm ", CIRCLEQ_ENTRY " NAME );
.BI "CIRCLEQ_INSERT_TAIL(CIRCLEQ_HEAD *" head ", "
.BI "                TYPE *" elm ", CIRCLEQ_ENTRY " NAME );
.BI "CIRCLEQ_REMOVE(CIRCLEQ_HEAD *" head ", "
.BI "                TYPE *" elm ", CIRCLEQ_ENTRY " NAME );
.fi
.SH DESCRIPTION
These macros define and operate on three types of data structures:
lists, tail queues, and circular queues.
All three structures support the following functionality:
.sp
.RS 4
.PD 0
.IP * 4
Insertion of a new entry at the head of the list.
.IP *
Insertion of a new entry after any element in the list.
.IP *
Removal of any entry in the list.
.IP *
Forward traversal through the list.
.PD
.RE
.PP
Lists are the simplest of the three data structures and support
only the above functionality.

Tail queues add the following functionality:
.RS 4
.IP * 4
Entries can be added at the end of a list.
.RE
.PP
However:
.sp
.RS 4
.PD 0
.IP 1. 4
All list insertions and removals must specify the head of the list.
.IP 2.
Each head entry requires two pointers rather than one.
.IP 3.
Code size is about 15% greater and operations run about 20% slower
than lists.
.PD
.RE
.PP
Circular queues add the following functionality:
.sp
.RS 4
.PD 0
.IP * 4
Entries can be added at the end of a list.
.IP *
Entries can be added before another entry.
.IP *
They may be traversed backward, from tail to head.
.PD
.RE
.PP
However:
.sp
.RS 4
.PD 0
.IP 1. 4
All list insertions and removals must specify the head of the list.
.IP 2.
Each head entry requires two pointers rather than one.
.IP 3.
The termination condition for traversal is more complex.
.IP 4.
Code size is about 40% greater and operations run about 45% slower
than lists.
.PD
.RE
.PP
In the macro definitions,
.I TYPE
is the name of a user-defined structure,
that must contain a field of type
.BR "LIST_ENTRY" ,
.BR "TAILQ_ENTRY" ,
or
.BR "CIRCLEQ_ENTRY" ,
named
.IR NAME .
The argument
.I HEADNAME
is the name of a user-defined structure that must be declared
using the macros
.BR "LIST_HEAD" ,
.BR "TAILQ_HEAD" ,
or
.BR "CIRCLEQ_HEAD" .
See the examples below for further explanation of how these
macros are used.
.SS Lists
A list is headed by a structure defined by the
.B LIST_HEAD
macro.
This structure contains a single pointer to the first element
on the list.
The elements are doubly linked so that an arbitrary element can be
removed without traversing the list.
New elements can be added to the list after an existing element or
at the head of the list.
A
.B LIST_HEAD
structure is declared as follows:
.in +4n
.nf

LIST_HEAD(HEADNAME, TYPE) head;
.fi
.in
.PP
where
.I HEADNAME
is the name of the structure to be defined, and
.I TYPE
is the type of the elements to be linked into the list.
A pointer to the head of the list can later be declared as:
.in +4n
.nf

struct HEADNAME *headp;
.fi
.in
.PP
(The names
.IR "head"
and
.IR "headp"
are user selectable.)
.PP
The macro
.B LIST_ENTRY
declares a structure that connects the elements in
the list.
.PP
The macro
.B LIST_INIT
initializes the list referenced by
.IR head .
.PP
The macro
.B LIST_INSERT_HEAD
inserts the new element
.I elm
at the head of the list.
.PP
The macro
.B LIST_INSERT_AFTER
inserts the new element
.I elm
after the element
.IR listelm .
.PP
The macro
.B LIST_REMOVE
removes the element
.I elm
from the list.
.SS List example
.nf
LIST_HEAD(listhead, entry) head;
struct listhead *headp;                 /* List head. */
struct entry {
    ...
    LIST_ENTRY(entry) entries;          /* List. */
    ...
} *n1, *n2, *np;

LIST_INIT(&head);                       /* Initialize the list. */

n1 = malloc(sizeof(struct entry));      /* Insert at the head. */
LIST_INSERT_HEAD(&head, n1, entries);

n2 = malloc(sizeof(struct entry));      /* Insert after. */
LIST_INSERT_AFTER(n1, n2, entries);
                                        /* Forward traversal. */
for (np = head.lh_first; np != NULL; np = np\->entries.le_next)
    np\-> ...

.\" FIXME . http://sourceware.org/bugzilla/show_bug.cgi?id=1506
while (head.lh_first != NULL)           /* Delete. */
    LIST_REMOVE(head.lh_first, entries);
.fi
.SS Tail queues
A tail queue is headed by a structure defined by the
.B TAILQ_HEAD
macro.
This structure contains a pair of pointers,
one to the first element in the tail queue and the other to
the last element in the tail queue.
The elements are doubly linked so that an arbitrary element can be
removed without traversing the tail queue.
New elements can be added to the tail queue after an existing element,
at the head of the tail queue, or at the end of the tail queue.
A
.B TAILQ_HEAD
structure is declared as follows:
.in +4n
.nf

TAILQ_HEAD(HEADNAME, TYPE) head;
.fi
.in
.PP
where
.IR "HEADNAME"
is the name of the structure to be defined, and
.IR "TYPE"
is the type of the elements to be linked into the tail queue.
A pointer to the head of the tail queue can later be declared as:
.in +4n
.nf

struct HEADNAME *headp;
.fi
.in
.PP
(The names
.IR "head"
and
.IR "headp"
are user selectable.)
.PP
The macro
.B TAILQ_ENTRY
declares a structure that connects the elements in
the tail queue.
.PP
The macro
.B TAILQ_INIT
initializes the tail queue referenced by
.IR head .
.PP
The macro
.B TAILQ_INSERT_HEAD
inserts the new element
.I elm
at the head of the tail queue.
.PP
The macro
.B TAILQ_INSERT_TAIL
inserts the new element
.I elm
at the end of the tail queue.
.PP
The macro
.B TAILQ_INSERT_AFTER
inserts the new element
.I elm
after the element
.IR listelm .
.PP
The macro
.B TAILQ_REMOVE
removes the element
.I elm
from the tail queue.
.SS Tail queue example
.nf
TAILQ_HEAD(tailhead, entry) head;
struct tailhead *headp;                 /* Tail queue head. */
struct entry {
    ...
    TAILQ_ENTRY(entry) entries;         /* Tail queue. */
    ...
} *n1, *n2, *np;

TAILQ_INIT(&head);                      /* Initialize the queue. */

n1 = malloc(sizeof(struct entry));      /* Insert at the head. */
TAILQ_INSERT_HEAD(&head, n1, entries);

n1 = malloc(sizeof(struct entry));      /* Insert at the tail. */
TAILQ_INSERT_TAIL(&head, n1, entries);

n2 = malloc(sizeof(struct entry));      /* Insert after. */
TAILQ_INSERT_AFTER(&head, n1, n2, entries);
                                        /* Forward traversal. */
for (np = head.tqh_first; np != NULL; np = np\->entries.tqe_next)
    np\-> ...
                                        /* Delete. */
while (head.tqh_first != NULL)
    TAILQ_REMOVE(&head, head.tqh_first, entries);
.fi
.SS Circular queues
A circular queue is headed by a structure defined by the
.B CIRCLEQ_HEAD
macro.
This structure contains a pair of pointers,
one to the first element in the circular queue and the other to the
last element in the circular queue.
The elements are doubly linked so that an arbitrary element can be
removed without traversing the queue.
New elements can be added to the queue after an existing element,
before an existing element, at the head of the queue, or at the end
of the queue.
A
.B CIRCLEQ_HEAD
structure is declared as follows:
.in +4n
.nf

CIRCLEQ_HEAD(HEADNAME, TYPE) head;
.fi
.in
.PP
where
.IR "HEADNAME"
is the name of the structure to be defined, and
.IR "TYPE"
is the type of the elements to be linked into the circular queue.
A pointer to the head of the circular queue can later be declared as:
.in +4n
.nf

struct HEADNAME *headp;
.fi
.in
.PP
(The names
.IR "head"
and
.IR "headp"
are user selectable.)
.PP
The macro
.B CIRCLEQ_ENTRY
declares a structure that connects the elements in
the circular queue.
.PP
The macro
.B CIRCLEQ_INIT
initializes the circular queue referenced by
.IR head .
.PP
The macro
.B CIRCLEQ_INSERT_HEAD
inserts the new element
.I elm
at the head of the circular queue.
.PP
The macro
.B CIRCLEQ_INSERT_TAIL
inserts the new element
.I elm
at the end of the circular queue.
.PP
The macro
.B CIRCLEQ_INSERT_AFTER
inserts the new element
.I elm
after the element
.IR listelm .
.PP
The macro
.B CIRCLEQ_INSERT_BEFORE
inserts the new element
.I elm
before the element
.IR listelm .
.PP
The macro
.B CIRCLEQ_REMOVE
removes the element
.I elm
from the circular queue.
.SS Circular queue example
.nf
CIRCLEQ_HEAD(circleq, entry) head;
struct circleq *headp;              /* Circular queue head. */
struct entry {
    ...
    CIRCLEQ_ENTRY(entry) entries;   /* Circular queue. */
    ...
} *n1, *n2, *np;

CIRCLEQ_INIT(&head);                /* Initialize the circular queue. */

n1 = malloc(sizeof(struct entry));  /* Insert at the head. */
CIRCLEQ_INSERT_HEAD(&head, n1, entries);

n1 = malloc(sizeof(struct entry));  /* Insert at the tail. */
CIRCLEQ_INSERT_TAIL(&head, n1, entries);

n2 = malloc(sizeof(struct entry));  /* Insert after. */
CIRCLEQ_INSERT_AFTER(&head, n1, n2, entries);

n2 = malloc(sizeof(struct entry));  /* Insert before. */
CIRCLEQ_INSERT_BEFORE(&head, n1, n2, entries);
                                    /* Forward traversal. */
for (np = head.cqh_first; np != (void *)&head;
        np = np\->entries.cqe_next)
    np\-> ...
                                    /* Reverse traversal. */
for (np = head.cqh_last; np != (void *)&head; np = np\->entries.cqe_prev)
    np\-> ...
                                    /* Delete. */
while (head.cqh_first != (void *)&head)
    CIRCLEQ_REMOVE(&head, head.cqh_first, entries);
.fi
.SH CONFORMING TO
Not in POSIX.1-2001.
Present on the BSDs.
The
queue functions first appeared in
4.4BSD.
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1993 by Thomas Koenig (ig25@rz.uni-karlsruhe.de)
.\" and Copyright (C) 2008 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified Sat Jul 24 18:40:56 1993 by Rik Faith (faith@cs.unc.edu)
.\" Modified 1995 by Mike Battersby (mib@deakin.edu.au)
.\"
.TH RAISE 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
raise \- send a signal to the caller
.SH SYNOPSIS
.nf
.B #include <signal.h>
.sp
.BI "int raise(int " sig );
.fi
.SH DESCRIPTION
The
.BR raise ()
function sends a signal to the calling process or thread.
In a single-threaded program it is equivalent to
.sp
.in +4n
.nf
kill(getpid(), sig);
.fi
.in
.PP
In a multithreaded program it is equivalent to
.sp
.in +4n
.nf
pthread_kill(pthread_self(), sig);
.fi
.in
.PP
If the signal causes a handler to be called,
.BR raise ()
will return only after the signal handler has returned.
.SH RETURN VALUE
.BR raise ()
returns 0 on success, and nonzero for failure.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR raise ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C89, C99, POSIX.1-2001.
.SH NOTES
Since version 2.3.3, glibc implements
.BR raise ()
by calling
.BR tgkill (2),
.\" 2.3.2 used the obsolete tkill(), if available.
if the kernel supports that system call.
Older glibc versions implemented
.BR raise ()
using
.BR kill (2).
.SH SEE ALSO
.BR getpid (2),
.BR kill (2),
.BR sigaction (2),
.BR signal (2),
.BR pthread_kill (3),
.BR signal (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\"
.\" Modified 1993-03-29, David Metcalfe
.\" Modified 1993-04-28, Lars Wirzenius
.\" Modified 1993-07-24, Rik Faith (faith@cs.unc.edu)
.\" Modified 1995-05-18, Rik Faith (faith@cs.unc.edu) to add
.\"          better discussion of problems with rand on other systems.
.\"          (Thanks to Esa Hyyti{ (ehyytia@snakemail.hut.fi).)
.\" Modified 1998-04-10, Nicolás Lichtmaier <nick@debian.org>
.\"          with contribution from Francesco Potorti <F.Potorti@cnuce.cnr.it>
.\" Modified 2003-11-15, aeb, added rand_r
.\" 2010-09-13, mtk, added example program
.\"
.TH RAND 3 2015-03-02 "" "Linux Programmer's Manual"
.SH NAME
rand, rand_r, srand \- pseudo-random number generator
.SH SYNOPSIS
.nf
.B #include <stdlib.h>
.sp
.B int rand(void);
.sp
.BI "int rand_r(unsigned int *" seedp );
.sp
.BI "void srand(unsigned int " seed );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR rand_r ():
_POSIX_C_SOURCE\ >=\ 1 || _XOPEN_SOURCE || _POSIX_SOURCE
.SH DESCRIPTION
The
.BR rand ()
function returns a pseudo-random integer in the range 0 to
.BR RAND_MAX
inclusive (i.e., the mathematical range [0,\ \fBRAND_MAX\fR]).
.PP
The
.BR srand ()
function sets its argument as the seed for a new
sequence of pseudo-random integers to be returned by
.BR rand ().
These sequences are repeatable by calling
.BR srand ()
with the same seed value.
.PP
If no seed value is provided, the
.BR rand ()
function is automatically seeded with a value of 1.
.PP
The function
.BR rand ()
is not reentrant, since it
uses hidden state that is modified on each call.
This might just be the seed value to be used by the next call,
or it might be something more elaborate.
In order to get reproducible behavior in a threaded
application, this state must be made explicit;
this can be done using the reentrant function
.BR rand_r ().

Like
.BR rand (),
.BR rand_r ()
returns a pseudo-random integer in the range [0,\ \fBRAND_MAX\fR].
The
.I seedp
argument is a pointer to an
.IR "unsigned int"
that is used to store state between calls.
If
.BR rand_r ()
is called with the same initial value for the integer pointed to by
.IR seedp ,
and that value is not modified between calls,
then the same pseudo-random sequence will result.

The value pointed to by the
.I seedp
argument of
.BR rand_r ()
provides only a very small amount of state,
so this function will be a weak pseudo-random generator.
Try
.BR drand48_r (3)
instead.
.SH RETURN VALUE
The
.BR rand ()
and
.BR rand_r ()
functions return a value between 0 and
.BR RAND_MAX
(inclusive).
The
.BR srand ()
function returns no value.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw25 lb lb
l l l.
Interface	Attribute	Value
T{
.BR rand (),
.BR rand_r (),
.BR srand ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
The functions
.BR rand ()
and
.BR srand ()
conform to SVr4, 4.3BSD, C89, C99, POSIX.1-2001.
The function
.BR rand_r ()
is from POSIX.1-2001.
POSIX.1-2008 marks
.BR rand_r ()
as obsolete.
.SH NOTES
The versions of
.BR rand ()
and
.BR srand ()
in the Linux C Library use the same random number generator as
.BR random (3)
and
.BR srandom (3),
so the lower-order bits should be as random as the higher-order bits.
However, on older
.BR rand ()
implementations, and on current implementations on different systems,
the lower-order bits are much less random than the higher-order bits.
Do not use this function in applications intended to be portable
when good randomness is needed.
(Use
.BR random (3)
instead.)
.SH EXAMPLE
POSIX.1-2001 gives the following example of an implementation of
.BR rand ()
and
.BR srand (),
possibly useful when one needs the same sequence on two different machines.
.sp
.in +4n
.nf
static unsigned long next = 1;

/* RAND_MAX assumed to be 32767 */
int myrand(void) {
    next = next * 1103515245 + 12345;
    return((unsigned)(next/65536) % 32768);
}

void mysrand(unsigned int seed) {
    next = seed;
}
.fi
.in
.PP
The following program can be used to display the
pseudo-random sequence produced by
.BR rand ()
when given a particular seed.
.in +4n
.nf

#include <stdlib.h>
#include <stdio.h>

int
main(int argc, char *argv[])
{
    int j, r, nloops;
    unsigned int seed;

    if (argc != 3) {
        fprintf(stderr, "Usage: %s <seed> <nloops>\\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    seed = atoi(argv[1]);
    nloops = atoi(argv[2]);

    srand(seed);
    for (j = 0; j < nloops; j++) {
        r =  rand();
        printf("%d\\n", r);
    }

    exit(EXIT_SUCCESS);
}
.fi
.in
.SH SEE ALSO
.BR drand48 (3),
.BR random (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified Sun Mar 28 00:25:51 1993, David Metcalfe
.\" Modified Sat Jul 24 18:13:39 1993 by Rik Faith (faith@cs.unc.edu)
.\" Modified Sun Aug 20 21:47:07 2000, aeb
.\"
.TH RANDOM 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
random, srandom, initstate, setstate \- random number generator
.SH SYNOPSIS
.nf
.B #include <stdlib.h>
.sp
.B long int random(void);

.BI "void srandom(unsigned int " seed );

.BI "char *initstate(unsigned int " seed ", char *" state ", size_t " n );
.br
.BI "char *setstate(char *" state );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR random (),
.BR srandom (),
.BR initstate (),
.BR setstate ():
.RS 4
_SVID_SOURCE || _BSD_SOURCE || _XOPEN_SOURCE\ >=\ 500 ||
_XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED
.RE
.ad
.SH DESCRIPTION
The
.BR random ()
function uses a nonlinear additive feedback random
number generator employing a default table of size 31 long integers to
return successive pseudo-random numbers in
the range from 0 to \fBRAND_MAX\fR.
The period of this random number generator is very large, approximately
.IR "16\ *\ ((2^31)\ \-\ 1)" .
.PP
The
.BR srandom ()
function sets its argument as the seed for a new
sequence of pseudo-random integers to be returned by
.BR random ().
These sequences are repeatable by calling
.BR srandom ()
with the same
seed value.
If no seed value is provided, the
.BR random ()
function
is automatically seeded with a value of 1.
.PP
The
.BR initstate ()
function allows a state array \fIstate\fP to
be initialized for use by
.BR random ().
The size of the state array
\fIn\fP is used by
.BR initstate ()
to decide how sophisticated a
random number generator it should use\(emthe larger the state array,
the better the random numbers will be.
\fIseed\fP is the seed for the
initialization, which specifies a starting point for the random number
sequence, and provides for restarting at the same point.
.PP
The
.BR setstate ()
function changes the state array used by the
.BR random ()
function.
The state array \fIstate\fP is used for
random number generation until the next call to
.BR initstate ()
or
.BR setstate ().
\fIstate\fP must first have been initialized
using
.BR initstate ()
or be the result of a previous call of
.BR setstate ().
.SH RETURN VALUE
The
.BR random ()
function returns a value between 0 and
.BR RAND_MAX .
The
.BR srandom ()
function returns no value.

The
.BR initstate ()
function returns a pointer to the previous state array.
On error,
.I errno
is set to indicate the cause.

On success,
.BR setstate ()
returns a pointer to the previous state array.
On error, it returns NULL, with
.I errno
set to indicate the cause of the error.
.SH ERRORS
.TP
.B EINVAL
The
.I state
argument given to
.BR setstate ()
was NULL.
.TP
.B EINVAL
A state array of less than 8 bytes was specified to
.BR initstate ().
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw23 lb lb
l l l.
Interface	Attribute	Value
T{
.BR random (),
.BR srandom (),
.br
.BR initstate (),
.BR setstate ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
4.3BSD, POSIX.1-2001.
.SH NOTES
Current "optimal" values for the size of the state array \fIn\fP are
8, 32, 64, 128, and 256 bytes; other amounts will be rounded down to
the nearest known amount.
Using less than 8 bytes will cause an
error.
.PP
This function should not be used in cases where multiple threads use
.BR random ()
and the behavior should be reproducible.
Use
.BR random_r (3)
for that purpose.
.PP
Random-number generation is a complex topic.
.I Numerical Recipes in C: The Art of Scientific Computing
(William H. Press, Brian P. Flannery, Saul A. Teukolsky, William
T. Vetterling; New York: Cambridge University Press, 2007, 3rd ed.)
provides an excellent discussion of practical random-number generation
issues in Chapter 7 (Random Numbers).
.PP
For a more theoretical discussion which also covers many practical issues
in depth, see Chapter 3 (Random Numbers) in Donald E. Knuth's
.IR "The Art of Computer Programming" ,
volume 2 (Seminumerical Algorithms), 2nd ed.; Reading, Massachusetts:
Addison-Wesley Publishing Company, 1981.
.SH BUGS
According to POSIX,
.BR initstate ()
should return NULL on error.
In the glibc implementation,
.I errno
is (as specified) set on error, but the function does not return NULL.
.\" http://sourceware.org/bugzilla/show_bug.cgi?id=15380
.SH SEE ALSO
.BR drand48 (3),
.BR getrandom (2),
.BR rand (3),
.BR random_r (3),
.BR srand (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 2008 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\"
.TH RANDOM_R 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
random_r, srandom_r, initstate_r, setstate_r \- reentrant
random number generator
.SH SYNOPSIS
.nf
.B #include <stdlib.h>
.sp
.BI "int random_r(struct random_data *" buf ", int32_t *" result );

.BI "int srandom_r(unsigned int " seed ", struct random_data *" buf );

.BI "int initstate_r(unsigned int " seed ", char *" statebuf ,
.BI "                size_t " statelen ", struct random_data *" buf );
.br
.BI "int setstate_r(char *" statebuf ", struct random_data *" buf );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR random_r (),
.BR srandom_r (),
.BR initstate_r (),
.BR setstate_r ():
.RS 4
_SVID_SOURCE || _BSD_SOURCE
.RE
.ad b
.SH DESCRIPTION
These functions are the reentrant equivalents
of the functions described in
.BR random (3).
They are suitable for use in multithreaded programs where each thread
needs to obtain an independent, reproducible sequence of random numbers.

The
.BR random_r ()
function is like
.BR random (3),
except that instead of using state information maintained
in a global variable,
it uses the state information in the argument pointed to by
.IR buf .
The generated random number is returned in the argument
.IR result .

The
.BR srandom_r ()
function is like
.BR srandom (3),
except that it initializes the seed for the random number generator
whose state is maintained in the object pointed to by
.IR buf ,
instead of the seed associated with the global state variable.

The
.BR initstate_r ()
function is like
.BR initstate (3)
except that it initializes the state in the object pointed to by
.IR buf ,
rather than initializing the global state variable.

The
.BR setstate_r ()
function is like
.BR setstate (3)
except that it modifies the state in the object pointer to by
.IR buf ,
rather than modifying the global state variable.
.SH RETURN VALUE
All of these functions return 0 on success.
On error, \-1 is returned, with
.I errno
set to indicate the cause of the error.
.SH ERRORS
.TP
.B EINVAL
A state array of less than 8 bytes was specified to
.BR initstate_r ().
.TP
.B EINVAL
The
.I statebuf
or
.I buf
argument to
.BR setstate_r ()
was NULL.
.TP
.B EINVAL
The
.I buf
or
.I result
argument to
.BR random_r ()
was NULL.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw27 lb lb
l l l.
Interface	Attribute	Value
T{
.BR random_r (),
.BR srandom_r (),
.br
.BR initstate_r (),
.BR setstate_r ()
T}	Thread safety	MT-Safe race:buf
.TE
.SH CONFORMING TO
These functions are nonstandard glibc extensions.
.\" These functions appear to be on Tru64, but don't seem to be on
.\" Solaris, HP-UX, or FreeBSD.
.SH SEE ALSO
.BR drand48 (3),
.BR rand (3),
.BR random (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\"	$NetBSD: rcmd.3,v 1.9 1996/05/28 02:07:39 mrg Exp $
.\"
.\" Copyright (c) 1983, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" %%%LICENSE_START(BSD_4_CLAUSE_UCB)
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\" %%%LICENSE_END
.\"
.\"     @(#)rcmd.3	8.1 (Berkeley) 6/4/93
.\"
.\" Contributed as Linux man page by David A. Holland, 970908
.\" I have not checked whether the Linux situation is exactly the same.
.\"
.\" 2007-12-08, mtk, Converted from mdoc to man macros
.\"
.TH RCMD 3 2014-05-28 "Linux" "Linux Programmer's Manual"
.SH NAME
rcmd, rresvport, iruserok, ruserok, rcmd_af,
rresvport_af, iruserok_af, ruserok_af \- routines for returning a
stream to a remote command
.SH SYNOPSIS
.nf
.B #include <netdb.h> \ \ \fP/* Or <unistd.h> on some systems */
.sp
.BI "int rcmd(char **" ahost ", unsigned short " inport ", const char *" locuser ", "
.BI "         const char *" remuser ", const char *" cmd ", int *" fd2p );
.sp
.BI "int rresvport(int *" port );
.sp
.BI "int iruserok(uint32_t " raddr ", int " superuser ", "
.BI "             const char *" ruser ", const char *" luser );
.sp
.BI "int ruserok(const char *" rhost ", int " superuser ", "
.BI "            const char *" ruser ", const char *" luser );
.sp
.BI "int rcmd_af(char **" ahost ", unsigned short " inport ", const char *" locuser ", "
.BI "            const char *" remuser ", const char *" cmd ", int *" fd2p ,
.BI "            sa_family_t " af );
.sp
.BI "int rresvport_af(int *" port ", sa_family_t " af );
.sp
.BI "int iruserok_af(const void *" raddr ", int " superuser ", "
.BI "                const char *" ruser ", const char *" luser \
", sa_family_t " af );
.sp
.BI "int ruserok_af(const char *" rhost ", int " superuser ", "
.BI "               const char *" ruser ", const char *" luser \
", sa_family_t " af );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR rcmd (),
.BR rcmd_af (),
.BR rresvport (),
.BR rresvport_af (),
.BR iruserok (),
.BR iruserok_af (),
.BR ruserok (),
.BR ruserok_af ():
_BSD_SOURCE
.SH DESCRIPTION
The
.BR rcmd ()
function is used by the superuser to execute a command on
a remote machine using an authentication scheme based
on privileged port numbers.
The
.BR rresvport ()
function
returns a descriptor to a socket
with an address in the privileged port space.
The
.BR iruserok ()
and
.BR ruserok ()
functions are used by servers
to authenticate clients requesting service with
.BR rcmd ().
All four functions are used by the
.BR rshd (8)
server (among others).
.SS rcmd()
.PP
The
.BR rcmd ()
function
looks up the host
.I *ahost
using
.BR gethostbyname (3),
returning \-1 if the host does not exist.
Otherwise,
.I *ahost
is set to the standard name of the host
and a connection is established to a server
residing at the well-known Internet port
.IR inport .
.PP
If the connection succeeds,
a socket in the Internet domain of type
.BR SOCK_STREAM
is returned to the caller, and given to the remote
command as
.IR stdin
and
.IR stdout .
If
.I fd2p
is nonzero, then an auxiliary channel to a control
process will be set up, and a descriptor for it will be placed
in
.IR *fd2p .
The control process will return diagnostic
output from the command (unit 2) on this channel, and will also
accept bytes on this channel as being UNIX signal numbers, to be
forwarded to the process group of the command.
If
.I fd2p
is 0, then the
.IR stderr
(unit 2 of the remote
command) will be made the same as the
.IR stdout
and no
provision is made for sending arbitrary signals to the remote process,
although you may be able to get its attention by using out-of-band data.
.PP
The protocol is described in detail in
.BR rshd (8).
.SS rresvport()
.PP
The
.BR rresvport ()
function is used to obtain a socket with a privileged
port bound to it.
This socket is suitable for use by
.BR rcmd ()
and several other functions.
Privileged ports are those in the range 0 to 1023.
Only a privileged process
.RB ( CAP_NET_BIND_SERVICE )
is allowed to bind to a privileged port.
In the glibc implementation,
this function restricts its search to the ports from 512 to 1023.
The
.I port
argument is value-result:
the value it supplies to the call is used as the starting point
for a circular search of the port range;
on (successful) return, it contains the port number that was bound to.
.\"
.SS iruserok() and ruserok()
.PP
The
.BR iruserok ()
and
.BR ruserok ()
functions take a remote host's IP address or name, respectively,
two usernames and a flag indicating whether the local user's
name is that of the superuser.
Then, if the user is
.I not
the superuser, it checks the
.IR /etc/hosts.equiv
file.
If that lookup is not done, or is unsuccessful, the
.IR .rhosts
in the local user's home directory is checked to see if the request for
service is allowed.
.PP
If this file does not exist, is not a regular file, is owned by anyone
other than the user or the superuser, or is writable by anyone other
than the owner, the check automatically fails.
Zero is returned if the machine name is listed in the
.IR hosts.equiv
file, or the host and remote username are found in the
.IR .rhosts
file; otherwise
.BR iruserok ()
and
.BR ruserok ()
return \-1.
If the local domain (as obtained from
.BR gethostname (2))
is the same as the remote domain, only the machine name need be specified.
.PP
If the IP address of the remote host is known,
.BR iruserok ()
should be used in preference to
.BR ruserok (),
as it does not require trusting the DNS server for the remote host's domain.
.SS *_af() variants
All of the functions described above work with IPv4
.RB ( AF_INET )
sockets.
The "_af" variants take an extra argument that allows the
socket address family to be specified.
For these functions, the
.I af
argument can be specified as
.BR AF_INET
or
.BR AF_INET6 .
In addition,
.BR rcmd_af ()
supports the use of
.BR AF_UNSPEC .
.SH RETURN VALUE
The
.BR rcmd ()
function
returns a valid socket descriptor on success.
It returns \-1 on error and prints a diagnostic message on the standard error.
.PP
The
.BR rresvport ()
function
returns a valid, bound socket descriptor on success.
It returns \-1 on error with the global value
.I errno
set according to the reason for failure.
The error code
.BR EAGAIN
is overloaded to mean "All network ports in use."

For information on the return from
.BR ruserok ()
and
.BR iruserok (),
see above.
.SH VERSIONS
The functions
.BR iruserok_af (),
.BR rcmd_af (),
.BR rresvport_af (),
and
.BR ruserok_af ()
functions are provide in glibc since version 2.2.
.SH CONFORMING TO
Not in POSIX.1-2001.
Present on the BSDs, Solaris, and many other systems.
These
functions appeared in
4.2BSD.
The "_af" variants are more recent additions,
and are not present on as wide a range of systems.
.SH BUGS
.BR iruserok ()
and
.BR iruserok_af ()
are declared in glibc headers only since version 2.12.
.\" Bug filed 25 Nov 2007:
.\" http://sources.redhat.com/bugzilla/show_bug.cgi?id=5399
.SH SEE ALSO
.BR rlogin (1),
.BR rsh (1),
.BR intro (2),
.BR rexec (3),
.BR rexecd (8),
.BR rlogind (8),
.BR rshd (8)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified Sat Jul 24 16:09:49 1993 by Rik Faith (faith@cs.unc.edu)
.\" Modified 11 June 1995 by Andries Brouwer (aeb@cwi.nl)
.\" Modified 22 July 1996 by Andries Brouwer (aeb@cwi.nl)
.\" 2007-07-30 Ulrich Drepper <drepper@redhat.com>, mtk:
.\"     Rework discussion of nonstandard structure fields.
.\" 2008-09-11, mtk, Document readdir_r().
.\"
.TH READDIR 3  2015-03-02 "" "Linux Programmer's Manual"
.SH NAME
readdir, readdir_r \- read a directory
.SH SYNOPSIS
.nf
.B #include <dirent.h>
.sp
.BI "struct dirent *readdir(DIR *" dirp );
.sp
.BI "int readdir_r(DIR *" dirp ", struct dirent *" entry \
", struct dirent **" result );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.ad l
.in
.sp
.BR readdir_r ():
.RS 4
_POSIX_C_SOURCE\ >=\ 1 || _XOPEN_SOURCE || _BSD_SOURCE ||
_SVID_SOURCE || _POSIX_SOURCE
.RE
.ad b
.SH DESCRIPTION
The
.BR readdir ()
function returns a pointer to a \fIdirent\fP structure
representing the next directory entry in the directory stream pointed
to by \fIdirp\fP.
It returns NULL on reaching the end of the directory stream or if
an error occurred.
.PP
On Linux, the
.I dirent
structure is defined as follows:
.PP
.in +4n
.nf
struct dirent {
    ino_t          d_ino;       /* inode number */
    off_t          d_off;       /* not an offset; see NOTES */
    unsigned short d_reclen;    /* length of this record */
    unsigned char  d_type;      /* type of file; not supported
                                   by all filesystem types */
    char           d_name[256]; /* filename */
};
.fi
.in
.PP
The only fields in the
.I dirent
structure that are mandated by POSIX.1 are:
.IR d_name [],
of unspecified size, with at most
.B NAME_MAX
characters preceding the terminating null byte (\(aq\\0\(aq);
and (as an XSI extension)
.IR d_ino .
The other fields are unstandardized, and not present on all systems;
see NOTES below for some further details.
.PP
The data returned by
.BR readdir ()
may be overwritten by subsequent calls to
.BR readdir ()
for the same directory stream.

The
.BR readdir_r ()
function is a reentrant version of
.BR readdir ().
It reads the next directory entry from the directory stream
.IR dirp ,
and returns it in the caller-allocated buffer pointed to by
.IR entry .
(See NOTES for information on allocating this buffer.)
A pointer to the returned item is placed in
.IR *result ;
if the end of the directory stream was encountered,
then NULL is instead returned in
.IR *result .
.SH RETURN VALUE
On success,
.BR readdir ()
returns a pointer to a
.I dirent
structure.
(This structure may be statically allocated; do not attempt to
.BR free (3)
it.)
If the end of the directory stream is reached, NULL is returned and
.I errno
is not changed.
If an error occurs, NULL is returned and
.I errno
is set appropriately.

The
.BR readdir_r ()
function returns 0 on success.
On error, it returns a positive error number (listed under ERRORS).
If the end of the directory stream is reached,
.BR readdir_r ()
returns 0, and returns NULL in
.IR *result .
.SH ERRORS
.TP
.B EBADF
Invalid directory stream descriptor \fIdirp\fP.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR readdir ()
T}	Thread safety	MT-Unsafe race:dirstream
T{
.BR readdir_r ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
SVr4, 4.3BSD, POSIX.1-2001.
.SH NOTES
Only the fields
.I d_name
and
.I d_ino
are specified in POSIX.1-2001.
The remaining fields are available on many, but not all systems.
Under glibc,
programs can check for the availability of the fields not defined
in POSIX.1 by testing whether the macros
.BR _DIRENT_HAVE_D_NAMLEN ,
.BR _DIRENT_HAVE_D_RECLEN ,
.BR _DIRENT_HAVE_D_OFF ,
or
.B _DIRENT_HAVE_D_TYPE
are defined.

The value returned in
.I d_off
is the same as would be returned by calling
.BR telldir (3)
at the current position in the directory stream.
Be aware that despite its type and name, the
.I d_off
field is seldom any kind of directory offset on modern filesystems.
.\" https://lwn.net/Articles/544298/
Applications should treat this field as an opaque value,
making no assumptions about its contents; see also
.BR telldir (3).

Other than Linux, the
.I d_type
field is available mainly only on BSD systems.
This field makes it possible to avoid the expense of calling
.BR lstat (2)
if further actions depend on the type of the file.
If the
.B _BSD_SOURCE
feature test macro is defined,
then glibc defines the following macro constants
for the value returned in
.IR d_type :
.TP 12
.B DT_BLK
This is a block device.
.TP
.B DT_CHR
This is a character device.
.TP
.B DT_DIR
This is a directory.
.TP
.B DT_FIFO
This is a named pipe (FIFO).
.TP
.B DT_LNK
This is a symbolic link.
.TP
.B DT_REG
This is a regular file.
.TP
.B DT_SOCK
This is a UNIX domain socket.
.TP
.B DT_UNKNOWN
The file type is unknown.
.\" The glibc manual says that on some systems this is the only
.\" value returned
.PP
If the file type could not be determined, the value
.B DT_UNKNOWN
is returned in
.IR d_type .

Currently,
.\" kernel 2.6.27
.\" The same sentence is in getdents.2
only some filesystems (among them: Btrfs, ext2, ext3, and ext4)
have full support for returning the file type in
.IR d_type .
All applications must properly handle a return of
.BR DT_UNKNOWN .

Since POSIX.1 does not specify the size of the
.I d_name
field, and other nonstandard fields may precede that field within the
.I dirent
structure, portable applications that use
.BR readdir_r ()
should allocate the buffer whose address is passed in
.IR entry
as follows:
.in +4n
.nf

name_max = pathconf(dirpath, _PC_NAME_MAX);
if (name_max == \-1)         /* Limit not defined, or error */
    name_max = 255;         /* Take a guess */
len = offsetof(struct dirent, d_name) + name_max + 1;
entryp = malloc(len);

.fi
.in
(POSIX.1 requires that
.I d_name
is the last field in a
.IR "struct dirent" .)
.SH SEE ALSO
.BR getdents (2),
.BR read (2),
.BR closedir (3),
.BR dirfd (3),
.BR ftw (3),
.BR offsetof (3),
.BR opendir (3),
.BR rewinddir (3),
.BR scandir (3),
.BR seekdir (3),
.BR telldir (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 1999 Andries Brouwer (aeb@cwi.nl)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Rewritten old page, 990824, aeb@cwi.nl
.\" 2004-12-14, mtk, added discussion of resolved_path == NULL
.\"
.TH REALPATH 3  2015-04-19 "" "Linux Programmer's Manual"
.SH NAME
realpath \- return the canonicalized absolute pathname
.SH SYNOPSIS
.nf
.B #include <limits.h>
.B #include <stdlib.h>
.sp
.BI "char *realpath(const char *" path ", char *" resolved_path );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR realpath ():
.ad l
.RS 4
_BSD_SOURCE || _XOPEN_SOURCE\ >=\ 500 ||
_XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED
.RE
.ad
.SH DESCRIPTION
.BR realpath ()
expands all symbolic links and resolves references
to
.IR "/./" ", " "/../"
and extra \(aq/\(aq
characters in the null-terminated string named by
.I path
to produce a canonicalized absolute pathname.
The resulting pathname is stored as a null-terminated string,
up to a maximum of
.B PATH_MAX
bytes,
in the buffer pointed to by
.IR resolved_path .
The resulting path will have no symbolic link,
.I "/./"
or
.I "/../"
components.

If
.I resolved_path
is specified as NULL, then
.BR realpath ()
uses
.BR malloc (3)
to allocate a buffer of up to
.B PATH_MAX
bytes to hold the resolved pathname,
and returns a pointer to this buffer.
The caller should deallocate this buffer using
.BR free (3).
.\" Even if we use resolved_path == NULL, then realpath() will still
.\" return ENAMETOOLONG if the resolved pathname would exceed PATH_MAX
.\" bytes -- MTK, Dec 04
.\" .SH HISTORY
.\" The
.\" .BR realpath ()
.\" function first appeared in 4.4BSD, contributed by Jan-Simon Pendry.
.SH RETURN VALUE
If there is no error,
.BR realpath ()
returns a pointer to the
.IR resolved_path .

Otherwise, it returns NULL, the contents
of the array
.I resolved_path
are undefined, and
.I errno
is set to indicate the error.
.SH ERRORS
.TP
.B EACCES
Read or search permission was denied for a component of the path prefix.
.TP
.B EINVAL
.I path
is NULL.
.\" (In libc5 this would just cause a segfault.)
(In glibc versions before 2.3,
this error is also returned if
.IR resolved_path
is NULL.)
.TP
.B EIO
An I/O error occurred while reading from the filesystem.
.TP
.B ELOOP
Too many symbolic links were encountered in translating the pathname.
.TP
.B ENAMETOOLONG
A component of a pathname exceeded
.B NAME_MAX
characters, or an entire pathname exceeded
.B PATH_MAX
characters.
.TP
.B ENOMEM
Out of memory.
.TP
.B ENOENT
The named file does not exist.
.TP
.B ENOTDIR
A component of the path prefix is not a directory.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR realpath ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
4.4BSD, POSIX.1-2001.

POSIX.1-2001 says that the behavior if
.I resolved_path
is NULL is implementation-defined.
POSIX.1-2008 specifies the behavior described in this page.
.SH NOTES
In 4.4BSD and Solaris, the limit on the pathname length is
.B MAXPATHLEN
(found in \fI<sys/param.h>\fP).
SUSv2 prescribes
.B PATH_MAX
and
.BR NAME_MAX ,
as found in \fI<limits.h>\fP or provided by the
.BR pathconf (3)
function.
A typical source fragment would be
.LP
.in +4n
.nf
#ifdef PATH_MAX
  path_max = PATH_MAX;
#else
  path_max = pathconf(path, _PC_PATH_MAX);
  if (path_max <= 0)
    path_max = 4096;
#endif
.fi
.in
.LP
(But see the BUGS section.)
.LP
.\"     2012-05-05, According to Casper Dik, the statement about
.\"     Solaris was not true at least as far back as 1997, and
.\"     may never have been true.
.\"
.\" The 4.4BSD, Linux and SUSv2 versions always return an absolute
.\" pathname.
.\" Solaris may return a relative pathname when the
.\" .I path
.\" argument is relative.
.\" The prototype of
.\" .BR realpath ()
.\" is given in \fI<unistd.h>\fP in libc4 and libc5,
.\" but in \fI<stdlib.h>\fP everywhere else.
.SS GNU extensions
If the call fails with either
.BR EACCES
or
.BR ENOENT
and
.I resolved_path
is not NULL, then the prefix of
.I path
that is not readable or does not exist is returned in
.IR resolved_path .
.SH BUGS
The POSIX.1-2001 standard version of this function is broken by design,
since it is impossible to determine a suitable size for the output buffer,
.IR resolved_path .
According to POSIX.1-2001 a buffer of size
.B PATH_MAX
suffices, but
.B PATH_MAX
need not be a defined constant, and may have to be obtained using
.BR pathconf (3).
And asking
.BR pathconf (3)
does not really help, since, on the one hand POSIX warns that
the result of
.BR pathconf (3)
may be huge and unsuitable for mallocing memory,
and on the other hand
.BR pathconf (3)
may return \-1 to signify that
.B PATH_MAX
is not bounded.
The
.I "resolved_path\ ==\ NULL"
feature, not standardized in POSIX.1-2001,
but standardized in POSIX.1-2008, allows this design problem to be avoided.
.\" .LP
.\" The libc4 and libc5 implementation contained a buffer overflow
.\" (fixed in libc-5.4.13).
.\" Thus, set-user-ID programs like
.\" .BR mount (8)
.\" needed a private version.
.SH SEE ALSO
.BR realpath (1),
.BR readlink (2),
.BR canonicalize_file_name (3),
.BR getcwd (3),
.BR pathconf (3),
.BR sysconf (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1990, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" %%%LICENSE_START(BSD_4_CLAUSE_UCB)
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\" %%%LICENSE_END
.\"
.\"	@(#)recno.3	8.5 (Berkeley) 8/18/94
.\"
.TH RECNO 3 2012-04-23 "" "Linux Programmer's Manual"
.UC 7
.SH NAME
recno \- record number database access method
.SH SYNOPSIS
.nf
.ft B
#include <sys/types.h>
#include <db.h>
.ft R
.fi
.SH DESCRIPTION
.IR "Note well" :
This page documents interfaces provided in glibc up until version 2.1.
Since version 2.2, glibc no longer provides these interfaces.
Probably, you are looking for the APIs provided by the
.I libdb
library instead.

The routine
.BR dbopen (3)
is the library interface to database files.
One of the supported file formats is record number files.
The general description of the database access methods is in
.BR dbopen (3),
this manual page describes only the recno-specific information.
.PP
The record number data structure is either variable or fixed-length
records stored in a flat-file format, accessed by the logical record
number.
The existence of record number five implies the existence of records
one through four, and the deletion of record number one causes
record number five to be renumbered to record number four, as well
as the cursor, if positioned after record number one, to shift down
one record.
.PP
The recno access-method-specific data structure provided to
.BR dbopen (3)
is defined in the
.I <db.h>
include file as follows:
.PP
.in +4n
.nf
typedef struct {
    unsigned long flags;
    unsigned int  cachesize;
    unsigned int  psize;
    int           lorder;
    size_t        reclen;
    unsigned char bval;
    char         *bfname;
} RECNOINFO;
.fi
.in
.PP
The elements of this structure are defined as follows:
.TP
.I flags
The flag value is specified by ORing
any of the following values:
.RS
.TP
.B R_FIXEDLEN
The records are fixed-length, not byte delimited.
The structure element
.I reclen
specifies the length of the record, and the structure element
.I bval
is used as the pad character.
Any records, inserted into the database, that are less than
.I reclen
bytes long are automatically padded.
.TP
.B R_NOKEY
In the interface specified by
.BR dbopen (3),
the sequential record retrieval fills in both the caller's key and
data structures.
If the
.B R_NOKEY
flag is specified, the
.I cursor
routines are not required to fill in the key structure.
This permits applications to retrieve records at the end of files without
reading all of the intervening records.
.TP
.B R_SNAPSHOT
This flag requires that a snapshot of the file be taken when
.BR dbopen (3)
is called, instead of permitting any unmodified records to be read from
the original file.
.RE
.TP
.I cachesize
A suggested maximum size, in bytes, of the memory cache.
This value is
.B only
advisory, and the access method will allocate more memory rather than fail.
If
.I cachesize
is  0 (no size is specified), a default cache is used.
.TP
.I psize
The recno access method stores the in-memory copies of its records
in a btree.
This value is the size (in bytes) of the pages used for nodes in that tree.
If
.I psize
is 0 (no page size is specified), a page size is chosen based on the
underlying filesystem I/O block size.
See
.BR btree (3)
for more information.
.TP
.I lorder
The byte order for integers in the stored database metadata.
The number should represent the order as an integer; for example,
big endian order would be the number 4,321.
If
.I lorder
is 0 (no order is specified), the current host order is used.
.TP
.I reclen
The length of a fixed-length record.
.TP
.I bval
The delimiting byte to be used to mark the end of a record for
variable-length records, and the pad character for fixed-length
records.
If no value is specified, newlines ("\en") are used to mark the end
of variable-length records and fixed-length records are padded with
spaces.
.TP
.I bfname
The recno access method stores the in-memory copies of its records
in a btree.
If
.I bfname
is non-NULL, it specifies the name of the btree file,
as if specified as the filename for a
.BR dbopen (3)
of a btree file.
.PP
The data part of the key/data pair used by the
.I recno
access method
is the same as other access methods.
The key is different.
The
.I data
field of the key should be a pointer to a memory location of type
.IR recno_t ,
as defined in the
.I <db.h>
include file.
This type is normally the largest unsigned integral type available to
the implementation.
The
.I size
field of the key should be the size of that type.
.PP
Because there can be no metadata associated with the underlying
recno access method files, any changes made to the default values
(e.g., fixed record length or byte separator value) must be explicitly
specified each time the file is opened.
.PP
In the interface specified by
.BR dbopen (3),
using the
.I put
interface to create a new record will cause the creation of multiple,
empty records if the record number is more than one greater than the
largest record currently in the database.
.SH ERRORS
The
.I recno
access method routines may fail and set
.I errno
for any of the errors specified for the library routine
.BR dbopen (3)
or the following:
.TP
.B EINVAL
An attempt was made to add a record to a fixed-length database that
was too large to fit.
.SH BUGS
Only big and little endian byte order is supported.
.SH SEE ALSO
.BR btree (3),
.BR dbopen (3),
.BR hash (3),
.BR mpool (3)

.IR "Document Processing in a Relational Database System" ,
Michael Stonebraker, Heidi Stettner, Joseph Kalash, Antonin Guttman,
Nadene Lynn, Memorandum No. UCB/ERL M82/32, May 1982.
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C), 1995, Graeme W. Wilford. (Wilf.)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Wed Jun 14 16:10:28 BST 1995 Wilf. (G.Wilford@@ee.surrey.ac.uk)
.\"
.TH RE_COMP 3 2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
re_comp, re_exec \- BSD regex functions
.SH SYNOPSIS
.B #define _REGEX_RE_COMP
.br
.B #include <sys/types.h>
.br
.B #include <regex.h>
.sp
.BI "char *re_comp(const char *" regex );
.sp
.BI "int re_exec(const char *" string );
.SH DESCRIPTION
.BR re_comp ()
is used to compile the null-terminated regular expression pointed to by
.IR regex .
The compiled pattern occupies a static area, the pattern buffer,
which is overwritten by subsequent use of
.BR re_comp ().
If
.I regex
is NULL,
no operation is performed and the pattern buffer's contents are not
altered.

.BR re_exec ()
is used to assess whether the null-terminated string pointed to by
.I string
matches the previously compiled
.IR regex .
.SH RETURN VALUE
.BR re_comp ()
returns NULL on successful compilation of
.I regex
otherwise it returns a pointer to an appropriate error message.

.BR re_exec ()
returns 1 for a successful match, zero for failure.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw20 lb lb
l l l.
Interface	Attribute	Value
T{
.BR re_comp (),
.BR re_exec ()
T}	Thread safety	MT-Unsafe
.TE
.SH CONFORMING TO
4.3BSD.
.SH NOTES
These functions are obsolete; the functions documented in
.BR regcomp (3)
should be used instead.
.SH SEE ALSO
.BR regcomp (3),
.BR regex (7),
GNU regex manual
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C), 1995, Graeme W. Wilford. (Wilf.)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Wed Jun 14 16:10:28 BST 1995 Wilf. (G.Wilford@ee.surrey.ac.uk)
.\" Tiny change in formatting - aeb, 950812
.\" Modified 8 May 1998 by Joseph S. Myers (jsm28@cam.ac.uk)
.\"
.\" show the synopsis section nicely
.TH REGEX 3 2015-05-07 "GNU" "Linux Programmer's Manual"
.SH NAME
regcomp, regexec, regerror, regfree \- POSIX regex functions
.SH SYNOPSIS
.nf
.B #include <sys/types.h>
.B #include <regex.h>

.BI "int regcomp(regex_t *" preg ", const char *" regex ", int " cflags );

.BI "int regexec(const regex_t *" preg ", const char *" string \
", size_t " nmatch ,
.BI "            regmatch_t " pmatch[] ", int " eflags );

.BI "size_t regerror(int " errcode ", const regex_t *" preg ", char *" errbuf ,
.BI "                size_t " errbuf_size );

.BI "void regfree(regex_t *" preg );
.fi
.SH DESCRIPTION
.SS POSIX regex compiling
.BR regcomp ()
is used to compile a regular expression into a form that is suitable
for subsequent
.BR regexec ()
searches.

.BR regcomp ()
is supplied with
.IR preg ,
a pointer to a pattern buffer storage area;
.IR regex ,
a pointer to the null-terminated string and
.IR cflags ,
flags used to determine the type of compilation.

All regular expression searching must be done via a compiled pattern
buffer, thus
.BR regexec ()
must always be supplied with the address of a
.BR regcomp ()
initialized pattern buffer.

.I cflags
may be the
.RB bitwise- or
of zero or more of the following:
.TP
.B REG_EXTENDED
Use
.B POSIX
Extended Regular Expression syntax when interpreting
.IR regex .
If not set,
.B POSIX
Basic Regular Expression syntax is used.
.TP
.B REG_ICASE
Do not differentiate case.
Subsequent
.BR regexec ()
searches using this pattern buffer will be case insensitive.
.TP
.B REG_NOSUB
Do not report position of matches.
The
.I nmatch
and
.I pmatch
arguments to
.BR regexec ()
are ignored if the pattern buffer supplied was compiled with this flag set.
.TP
.B REG_NEWLINE
Match-any-character operators don't match a newline.

A nonmatching list
.RB ( [^...] )
not containing a newline does not match a newline.

Match-beginning-of-line operator
.RB ( ^ )
matches the empty string immediately after a newline, regardless of
whether
.IR eflags ,
the execution flags of
.BR regexec (),
contains
.BR REG_NOTBOL .

Match-end-of-line operator
.RB ( $ )
matches the empty string immediately before a newline, regardless of
whether
.I eflags
contains
.BR REG_NOTEOL .
.SS POSIX regex matching
.BR regexec ()
is used to match a null-terminated string
against the precompiled pattern buffer,
.IR preg .
.I nmatch
and
.I pmatch
are used to provide information regarding the location of any matches.
.I eflags
may be the
.RB bitwise- or
of one or both of
.B REG_NOTBOL
and
.B REG_NOTEOL
which cause changes in matching behavior described below.
.TP
.B REG_NOTBOL
The match-beginning-of-line operator always fails to match (but see the
compilation flag
.B REG_NEWLINE
above).
This flag may be used when different portions of a string are passed to
.BR regexec ()
and the beginning of the string should not be interpreted as the
beginning of the line.
.TP
.B REG_NOTEOL
The match-end-of-line operator always fails to match (but see the
compilation flag
.B REG_NEWLINE
above).
.SS Byte offsets
Unless
.B REG_NOSUB
was set for the compilation of the pattern buffer, it is possible to
obtain match addressing information.
.I pmatch
must be dimensioned to have at least
.I nmatch
elements.
These are filled in by
.BR regexec ()
with substring match addresses.
The offsets of the subexpression starting at the
.IR i th
open parenthesis are stored in
.IR pmatch[i] .
The entire regular expression's match addresses are stored in
.IR pmatch[0] .
(Note that to return the offsets of
.I N
subexpression matches,
.I nmatch
must be at least
.IR N+1 .)
Any unused structure elements will contain the value \-1.

The
.I regmatch_t
structure which is the type of
.I pmatch
is defined in
.IR <regex.h> .

.in +4n
.nf
typedef struct {
    regoff_t rm_so;
    regoff_t rm_eo;
} regmatch_t;
.fi
.in

Each
.I rm_so
element that is not \-1 indicates the start offset of the next largest
substring match within the string.
The relative
.I rm_eo
element indicates the end offset of the match,
which is the offset of the first character after the matching text.
.SS POSIX error reporting
.BR regerror ()
is used to turn the error codes that can be returned by both
.BR regcomp ()
and
.BR regexec ()
into error message strings.

.BR regerror ()
is passed the error code,
.IR errcode ,
the pattern buffer,
.IR preg ,
a pointer to a character string buffer,
.IR errbuf ,
and the size of the string buffer,
.IR errbuf_size .
It returns the size of the
.I errbuf
required to contain the null-terminated error message string.
If both
.I errbuf
and
.I errbuf_size
are nonzero,
.I errbuf
is filled in with the first
.I "errbuf_size \- 1"
characters of the error message and a terminating null byte (\(aq\\0\(aq).
.SS POSIX pattern buffer freeing
Supplying
.BR regfree ()
with a precompiled pattern buffer,
.I preg
will free the memory allocated to the pattern buffer by the compiling
process,
.BR regcomp ().
.SH RETURN VALUE
.BR regcomp ()
returns zero for a successful compilation or an error code for failure.

.BR regexec ()
returns zero for a successful match or
.B REG_NOMATCH
for failure.
.SH ERRORS
The following errors can be returned by
.BR regcomp ():
.TP
.B REG_BADBR
Invalid use of back reference operator.
.TP
.B REG_BADPAT
Invalid use of pattern operators such as group or list.
.TP
.B REG_BADRPT
Invalid use of repetition operators such as using \(aq*\(aq
as the first character.
.TP
.B REG_EBRACE
Un-matched brace interval operators.
.TP
.B REG_EBRACK
Un-matched bracket list operators.
.TP
.B REG_ECOLLATE
Invalid collating element.
.TP
.B REG_ECTYPE
Unknown character class name.
.TP
.B REG_EEND
Nonspecific error.
This is not defined by POSIX.2.
.TP
.B REG_EESCAPE
Trailing backslash.
.TP
.B REG_EPAREN
Un-matched parenthesis group operators.
.TP
.B REG_ERANGE
Invalid use of the range operator; for example, the ending point of the range
occurs prior to the starting point.
.TP
.B REG_ESIZE
Compiled regular expression requires a pattern buffer larger than 64Kb.
This is not defined by POSIX.2.
.TP
.B REG_ESPACE
The regex routines ran out of memory.
.TP
.B REG_ESUBREG
Invalid back reference to a subexpression.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw20 lb lb
l l l.
Interface	Attribute	Value
T{
.BR regcomp (),
.BR regexec ()
T}	Thread safety	MT-Safe locale
T{
.BR regerror ()
T}	Thread safety	MT-Safe env
T{
.BR regfree ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
POSIX.1-2001.
.SH SEE ALSO
.BR grep (1),
.BR regex (7)
.br
The glibc manual section,
.I "Regular Expression Matching"
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\" and Copyright 2008, Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\"
.\" Modified 1993-07-24 by Rik Faith (faith@cs.unc.edu)
.\" Modified 2002-08-10 Walter Harms
.\"	(walter.harms@informatik.uni-oldenburg.de)
.\" Modified 2003-11-18, 2004-10-05 aeb
.\"
.TH REMAINDER 3 2015-04-19 "" "Linux Programmer's Manual"
.SH NAME
drem, dremf, dreml, remainder, remainderf, remainderl \- \
floating-point remainder function
.SH SYNOPSIS
.nf
.B #include <math.h>
.sp
/* The C99 versions */
.BI "double remainder(double " x ", double " y );
.BI "float remainderf(float " x ", float " y );
.BI "long double remainderl(long double " x ", long double " y );
.sp
/* Obsolete synonyms */
.BI "double drem(double " x ", double " y );
.BI "float dremf(float " x ", float " y );
.BI "long double dreml(long double " x ", long double " y );
.sp
.fi
Link with \fI\-lm\fP.
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR remainder ():
.RS 4
_SVID_SOURCE || _BSD_SOURCE || _XOPEN_SOURCE\ >=\ 500 ||
_XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED ||
_ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.br
.BR remainderf (),
.BR remainderl ():
.RS 4
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE\ >=\ 600 || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.br
.BR drem (),
.BR dremf (),
.BR dreml ():
.RS 4
_SVID_SOURCE || _BSD_SOURCE
.RE
.ad b
.SH DESCRIPTION
These
functions compute the remainder of dividing
.I x
by
.IR y .
The return value is
\fIx\fP\-\fIn\fP*\fIy\fP,
where
.I n
is the value
.IR "x\ /\ y" ,
rounded to the nearest integer.
If the absolute value of
\fIx\fP\-\fIn\fP*\fIy\fP
is 0.5,
.I n
is chosen to be even.

These functions are unaffected by the current rounding mode (see
.BR fenv (3)).
.LP
The
.BR drem ()
function does precisely the same thing.
.SH RETURN VALUE
On success, these
functions return the floating-point remainder,
\fIx\fP\-\fIn\fP*\fIy\fP.
If the return value is 0, it has the sign of
.IR x .

If
.I x
or
.I y
is a NaN, a NaN is returned.

If
.I x
is an infinity,
and
.I y
is not a NaN,
a domain error occurs, and
a NaN is returned.

If
.I y
is zero,
.\" FIXME . Instead, glibc gives a domain error even if x is a NaN
and
.I x
is not a NaN,
.\" Interestingly, remquo(3) does not have the same problem.
a domain error occurs, and
a NaN is returned.
.SH ERRORS
See
.BR math_error (7)
for information on how to determine whether an error has occurred
when calling these functions.
.PP
The following errors can occur:
.TP
Domain error: \fIx\fP is an infinity and \fIy\fP is not a NaN
.\" .I errno
.\" is set to
.\" .BR EDOM .
An invalid floating-point exception
.RB ( FE_INVALID )
is raised.
.IP
These functions do not set
.IR errno
for this case.
.\" FIXME . Is it intentional that these functions do not set errno?
.\" They do set errno for the y == 0 case, below.
.\" Bug raised: http://sources.redhat.com/bugzilla/show_bug.cgi?id=6783
.TP
Domain error: \fIy\fP is zero\" [XXX see bug above] and \fIx\fP is not a NaN
.I errno
is set to
.BR EDOM .
An invalid floating-point exception
.RB ( FE_INVALID )
is raised.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw26 lb lb
l l l.
Interface	Attribute	Value
T{
.BR drem (),
.BR dremf (),
.BR dreml (),
.br
.BR remainder (),
.BR remainderf (),
.br
.BR remainderl ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
.\" IEC 60559.
The functions
.BR remainder (),
.BR remainderf (),
and
.BR remainderl ()
are specified in C99, POSIX.1-2001, and POSIX.1-2008.

The function
.BR drem ()
is from 4.3BSD.
The
.I float
and
.I "long double"
variants
.BR dremf ()
and
.BR dreml ()
exist on some systems, such as Tru64 and glibc2.
Avoid the use of these functions in favor of
.BR remainder ()
etc.
.SH BUGS
The call

    remainder(nan(""), 0);

returns a NaN, as expected, but wrongly causes a domain error;
it should yield a silent NaN.
.\" FIXME . this bug occurs as at glibc 2.8.
.\" Bug raised: http://sources.redhat.com/bugzilla/show_bug.cgi?id=6779
.SH EXAMPLE
The call "remainder(29.0, 3.0)" returns \-1.
.SH SEE ALSO
.BR div (3),
.BR fmod (3),
.BR remquo (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" This file is derived from unlink.2, which has the following copyright:
.\"
.\" This manpage is Copyright (C) 1992 Drew Eckhardt;
.\"             and Copyright (C) 1993 Ian Jackson.
.\"
.\" Edited into remove.3 shape by:
.\" Graeme W. Wilford (G.Wilford@ee.surrey.ac.uk) on 13th July 1994
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH REMOVE 3 2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
remove \- remove a file or directory
.SH SYNOPSIS
.B #include <stdio.h>
.sp
.BI "int remove(const char *" pathname );
.SH DESCRIPTION
.BR remove ()
deletes a name from the filesystem.
It calls
.BR unlink (2)
for files, and
.BR rmdir (2)
for directories.

If the removed name was the
last link to a file and no processes have the file open, the file is
deleted and the space it was using is made available for reuse.

If the name was the last link to a file,
but any processes still have the file open,
the file will remain in existence until the last file
descriptor referring to it is closed.

If the name referred to a symbolic link, the link is removed.

If the name referred to a socket, FIFO, or device, the name is removed,
but processes which have the object open may continue to use it.
.SH RETURN VALUE
On success, zero is returned.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
The errors that occur are those for
.BR unlink (2)
and
.BR rmdir (2).
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR remove ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C89, C99, 4.3BSD, POSIX.1-2001.
.\" .SH NOTES
.\" Under libc4 and libc5,
.\" .BR remove ()
.\" was an alias for
.\" .BR unlink (2)
.\" (and hence would not remove directories).
.SH BUGS
Infelicities in the protocol underlying NFS can cause the unexpected
disappearance of files which are still being used.
.SH SEE ALSO
.BR rm (1),
.BR unlink (1),
.BR link (2),
.BR mknod (2),
.BR open (2),
.BR rename (2),
.BR rmdir (2),
.BR unlink (2),
.BR mkfifo (3),
.BR symlink (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 2002 Walter Harms (walter.harms@informatik.uni-oldenburg.de)
.\" and Copyright 2008, Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(GPL_NOVERSION_ONELINE)
.\" Distributed under GPL
.\" %%%LICENSE_END
.\"
.\" based on glibc infopages
.\" polished, aeb
.\"
.TH REMQUO 3 2015-04-19 "GNU" "Linux Programmer's Manual"
.SH NAME
remquo, remquof, remquol \- remainder and part of quotient
.SH SYNOPSIS
.nf
.B #include <math.h>
.sp
.BI "double remquo(double " x ", double " y ", int *" quo );
.br
.BI "float remquof(float " x ", float " y ", int *" quo );
.br
.BI "long double remquol(long double " x ", long double " y ", int *" quo );
.fi
.sp
Link with \fI\-lm\fP.
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR remquo (),
.BR remquof (),
.BR remquol ():
.RS 4
_XOPEN_SOURCE\ >=\ 600 || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.ad
.SH DESCRIPTION
These functions compute the remainder and part of the quotient
upon division of
.I x
by
.IR y .
A few bits of the quotient are stored via the
.I quo
pointer.
The remainder is returned as the function result.

The value of the remainder is the same as that computed by the
.BR remainder (3)
function.

The value stored via the
.I quo
pointer has the sign of
.IR "x\ /\ y"
and agrees with the quotient in at least the low order 3 bits.

For example, \fIremquo(29.0,\ 3.0)\fP returns \-1.0 and might store 2.
Note that the actual quotient might not fit in an integer.
.\" A possible application of this function might be the computation
.\" of sin(x). Compute remquo(x, pi/2, &quo) or so.
.\"
.\" glibc, UnixWare: return 3 bits
.\" MacOS 10: return 7 bits
.SH RETURN VALUE
On success, these functions return the same value as
the analogous functions described in
.BR remainder (3).

If
.I x
or
.I y
is a NaN, a NaN is returned.

If
.I x
is an infinity,
and
.I y
is not a NaN,
a domain error occurs, and
a NaN is returned.

If
.I y
is zero,
and
.I x
is not a NaN,
a domain error occurs, and
a NaN is returned.
.SH ERRORS
See
.BR math_error (7)
for information on how to determine whether an error has occurred
when calling these functions.
.PP
The following errors can occur:
.TP
Domain error: \fIx\fP is an infinity or \fIy\fP is 0, \
and the other argument is not a NaN
.\" .I errno
.\" is set to
.\" .BR EDOM .
An invalid floating-point exception
.RB ( FE_INVALID )
is raised.
.PP
These functions do not set
.IR errno .
.\" FIXME . Is it intentional that these functions do not set errno?
.\" Bug raised: http://sources.redhat.com/bugzilla/show_bug.cgi?id=6802
.SH VERSIONS
These functions first appeared in glibc in version 2.1.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw30 lb lb
l l l.
Interface	Attribute	Value
T{
.BR remquo (),
.BR remquof (),
.BR remquol ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C99, POSIX.1-2001, POSIX.1-2008.
.SH SEE ALSO
.BR fmod (3),
.BR logb (3),
.BR remainder (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\" and (C) Copyright 2015 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified 1993-07-25 by Rik Faith (faith@cs.unc.edu)
.\" Modified 2004-10-31 by aeb
.\"
.TH RESOLVER 3 2015-05-07 "GNU" "Linux Programmer's Manual"
.SH NAME
res_ninit, res_nquery, res_nsearch, res_nquerydomain, res_nmkquery, res_nsend,
res_init, res_query, res_search, res_querydomain, res_mkquery, res_send,
dn_comp, dn_expand \- resolver routines
.SH SYNOPSIS
.nf
.B #include <netinet/in.h>
.B #include <arpa/nameser.h>
.B #include <resolv.h>

.B struct __res_state;
.B typedef struct __res_state *res_state;

.B int res_ninit(void);

.BI "int res_nquery(res_state " statep );
.BI "           const char *" dname ", int " class ", int " type ,
.BI "           unsigned char *" answer ", int " anslen );

.BI "int res_nsearch(res_state " statep ,
.BI "           const char *" dname ", int " class ", int " type ,
.BI "           unsigned char *" answer ", int " anslen );

.BI "int res_nquerydomain(res_state " statep ,
.BI "           const char *" name ", const char *" domain ,
.BI "           int " class ", int " type ", unsigned char *" answer ,
.BI "           int " anslen );

.BI "int res_nmkquery(res_state " statep ,
.BI "           int " op ", const char *" dname ", int " class ,
.BI "           int " type ", const unsigned char *" data ", int " datalen ,
.BI "           const unsigned char *" newrr ,
.BI "           unsigned char *" buf ", int " buflen );

.BI "int res_nsend(res_state " statep ,
.BI "           const unsigned char *" msg ", int " msglen ,
.BI "           unsigned char *" answer ", int " anslen );

.BI "int dn_comp(const char *" exp_dn ", unsigned char *" comp_dn ,
.BI "           int " length ", unsigned char **" dnptrs ,
.BI "           unsigned char **" lastdnptr );

.BI "int dn_expand(const unsigned char *" msg ,
.BI "           const unsigned char *" eomorig ,
.BI "           const unsigned char *" comp_dn ", char *" exp_dn ,
.BI "           int " length );
.fi

.SS Deprecated

.nf
.B extern struct __res_state _res;

.B int res_init(void);

.BI "int res_query(const char *" dname ", int " class ", int " type ,
.BI "           unsigned char *" answer ", int " anslen );

.BI "int res_search(const char *" dname ", int " class ", int " type ,
.BI "           unsigned char *" answer ", int " anslen );

.BI "int res_querydomain(const char *" name ", const char *" domain ,
.BI "           int " class ", int " type ", unsigned char *" answer ,
.BI "           int " anslen );

.BI "int res_mkquery(int " op ", const char *" dname ", int " class ,
.BI "           int " type ", const unsigned char *" data ", int " datalen ,
.BI "           const unsigned char *" newrr ,
.BI "           unsigned char *" buf ", int " buflen );

.BI "int res_send(const unsigned char *" msg ", int " msglen ,
.BI "           unsigned char *" answer ", int " anslen );
.fi
.sp
Link with \fI\-lresolv\fP.
.SH DESCRIPTION
.B Note:
This page is incomplete (various resolver functions provided by glibc
are not described) and likely out of date.

The functions described below make queries to and interpret
the responses from Internet domain name servers.

The API consists of a set of more modern, reentrant functions
and an older set of nonreentrant functions that have been superseded.
The traditional resolver interfaces such as
.BR res_init ()
and
.BR res_query ()
use some static (global) state stored in the
.I _res
structure, rendering these functions non-thread-safe.
BIND 8.2 introduced a set of new interfaces
.BR res_ninit (),
.BR res_nquery (),
and so on, which take a
.I res_state
as their first argument, so you can use a per-thread resolver state.

The
.BR res_ninit ()
and
.BR res_init ()
functions read the configuration files (see
.BR resolv.conf (5))
to get the default domain name and name
server address(es).
If no server is given, the local host is tried.
If no domain is given, that associated with the local host is used.
It can be overridden with the environment variable
.BR LOCALDOMAIN .
.BR res_ninit ()
or
.BR res_init ()
is normally executed by the first call to one of the
other functions.

The
.BR res_nquery ()
and
.BR res_query ()
functions query the name server for the
fully qualified domain name \fIname\fP of specified \fItype\fP and
\fIclass\fP.
The reply is left in the buffer \fIanswer\fP of length
\fIanslen\fP supplied by the caller.

The
.BR res_nsearch ()
and
.BR res_search ()
functions make a query and waits for the response like
.BR res_nquery ()
and
.BR res_query (),
but in addition they implement the default and search
rules controlled by
.B RES_DEFNAMES
and
.B RES_DNSRCH
(see description of
\fI_res\fP options below).

The
.BR res_nquerydomain ()
and
.BR res_querydomain ()
functions make a query using
.BR res_nquery ()/ res_query ()
on the concatenation of \fIname\fP and \fIdomain\fP.

The following functions are lower-level routines used by
.BR res_query ()/ res_query ().

The
.BR res_nmkquery ()
and
.BR res_mkquery ()
functions construct a query message in \fIbuf\fP
of length \fIbuflen\fP for the domain name \fIdname\fP.
The query type
\fIop\fP is usually
.BR QUERY ,
but can be any of the types defined in
\fI<arpa/nameser.h>\fP.
\fInewrr\fP is currently unused.

The
.BR res_nsend ()
and
.BR res_send ()
function send a preformatted query given in
\fImsg\fP of length \fImsglen\fP and returns the answer in \fIanswer\fP
which is of length \fIanslen\fP.
They will call
.BR res_ninit ()/ res_init ()
if it has not already been called.
.PP
The
.BR dn_comp ()
function compresses the domain name \fIexp_dn\fP
and stores it in the buffer \fIcomp_dn\fP of length \fIlength\fP.
The compression uses an array of pointers \fIdnptrs\fP to previously
compressed names in the current message.
The first pointer points
to the beginning of the message and the list ends with NULL.
The limit of the array is specified by \fIlastdnptr\fP.
If \fIdnptr\fP is NULL, domain names are not compressed.
If \fIlastdnptr\fP is NULL, the list
of labels is not updated.
.PP
The
.BR dn_expand ()
function expands the compressed domain name
\fIcomp_dn\fP to a full domain name, which is placed in the buffer
\fIexp_dn\fP of size \fIlength\fP.
The compressed name is contained
in a query or reply message, and \fImsg\fP points to the beginning of
the message.
.PP
The resolver routines use configuration and state information
contained in a
.IR __res_state
structure (either passed as the
.IR statep
argument, or in the global variable
.IR _res ,
in the case of the older nonreentrant functions).
The only field of this structure that is normally manipulated by the
user is the
.IR options
field.
This field can contain the bitwise "OR"
of the following options:
.TP
.B RES_INIT
True if
.BR res_ninit ()
or
.BR res_init ()
has been called.
.TP
.B RES_DEBUG
Print debugging messages.
This option is available only if glibc was built with debugging enabled,
.\" See resolv/README.
.\" Support for RES_DEBUG was made conditional in glibc 2.2.
which is not the default.
.TP
.B RES_AAONLY
Accept authoritative answers only.
.BR res_send ()
continues until
it finds an authoritative answer or returns an error.
[Not currently implemented].
.TP
.B RES_USEVC
Use TCP connections for queries rather than UDP datagrams.
.TP
.B RES_PRIMARY
Query primary domain name server only.
[Not currently implemented].
.TP
.B RES_IGNTC
Ignore truncation errors.
Don't retry with TCP.
.TP
.B RES_RECURSE
Set the recursion desired bit in queries.
Recursion is carried out
by the domain name server, not by
.BR res_send ().
[Enabled by default].
.TP
.B RES_DEFNAMES
If set,
.BR res_search ()
will append the default domain name to
single component names\(emthat is, those that do not contain a dot.
[Enabled by default].
.TP
.B RES_STAYOPEN
Used with
.B RES_USEVC
to keep the TCP connection open between queries.
.TP
.B RES_DNSRCH
If set,
.BR res_search ()
will search for hostnames in the current
domain and in parent domains.
This option is used by
.BR gethostbyname (3).
[Enabled by default].
.TP
.B RES_INSECURE1
Accept a response from a wrong server.
This can be used to detect potential security hazards,
but you need to compile glibc with debugging enabled and use
.B RES_DEBUG
option (for debug purpose only).
.TP
.B RES_INSECURE2
Accept a response which contains a wrong query.
This can be used to detect potential security hazards,
but you need to compile glibc with debugging enabled and use
.B RES_DEBUG
option (for debug purpose only).
.TP
.B RES_NOALIASES
Disable usage of
.B HOSTALIASES
environment variable.
.TP
.B RES_USE_INET6
Try an AAAA query before an A query inside the
.BR gethostbyname ()
function, and map IPv4 responses in IPv6 "tunneled form" if no AAAA records
are found but an A record set exists.
.TP
.B RES_ROTATE
Causes round-robin selection of name servers from among those listed.
This has the effect of spreading the query load among all listed servers,
rather than having all clients try the first listed server first every
time.
.TP
.B RES_NOCHECKNAME
Disable the modern BIND checking of incoming hostnames and mail names
for invalid characters such as underscore (_), non-ASCII,
or control characters.
[Not currently implemented].
.TP
.B RES_KEEPTSIG
Do not strip TSIG records.
[Not currently implemented].
.TP
.B RES_BLAST
Send each query simultaneously and recursively to all servers.
Note this option overrides
.BR RES_ROTATE .
.TP
.BR RES_USEBSTRING " (since glibc 2.3.4)"
Make reverse IPv6 lookups using the bit-label format described in RFC 2673;
if this option is not set, then nibble format is used.
.TP
.B RES_NOIP6DOTINT
Use
.I ip6.arpa
zone in IPv6 reverse lookup instead of
.IR ip6.int ,
which is deprecated since glibc 2.3.4.
[Enabled by default].
.TP
.BR RES_USE_EDNS0 " (since glibc 2.6)"
Enables support for the DNS extensions (EDNS0) described in RFC 2671.
.TP
.BR RES_SNGLKUP " (since glibc 2.10)"
By default, glibc performs IPv4 and IPv6 lookups in parallel since
version 2.9.
Some appliance DNS servers cannot handle these queries properly
and make the requests time out.
This option disables the behavior and makes glibc
perform the IPv6 and IPv4 requests sequentially
(at the cost of some slowdown of the resolving process).
.TP
.B RES_SNGLKUPREOP
When
.B RES_SNGLKUP
option is enabled, opens a new socket for the each request.
.TP
.B RES_USE_DNSSEC
Use DNSSEC with OK bit in OPT record.
This option implies
.BR RES_USE_EDNS0 .
.TP
.B RES_NOTLDQUERY
Do not look up unqualified name as a top-level domain (TLD).
.TP
.B RES_DEFAULT
Default option which implies:
.BR RES_RECURSE ,
.BR RES_DEFNAMES ,
.BR RES_DNSRCH
and
.BR RES_NOIP6DOTINT .

.SH RETURN VALUE
The
.BR res_ninit ()
and
.BR res_init ()
functions return 0 on success, or \-1 if an error
occurs.
.PP
The
.BR res_nquery (),
.BR res_query (),
.BR res_nsearch (),
.BR res_search (),
.BR res_nquerydomain (),
.BR res_querydomain (),
.BR res_nmkquery (),
.BR res_mkquery (),
.BR res_nsend (),
and
.BR res_send ()
functions return the length
of the response, or \-1 if an error occurs.
.PP
The
.BR dn_comp ()
and
.BR dn_expand ()
functions return the length
of the compressed name, or \-1 if an error occurs.
.SH FILES
.nf
/etc/resolv.conf          resolver configuration file
/etc/host.conf            resolver configuration file
.fi
.SH CONFORMING TO
4.3BSD.
.SH SEE ALSO
.BR gethostbyname (3),
.BR resolv.conf (5),
.BR resolver (5),
.BR hostname (7),
.BR named (8)

The GNU C library source file
.IR resolv/README .
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified Sat Jul 24 18:29:11 1993 by Rik Faith (faith@cs.unc.edu)
.\" Modified 11 June 1995 by Andries Brouwer (aeb@cwi.nl)
.TH REWINDDIR 3  2015-03-02 "" "Linux Programmer's Manual"
.SH NAME
rewinddir \- reset directory stream
.SH SYNOPSIS
.nf
.B #include <sys/types.h>
.sp
.B #include <dirent.h>
.sp
.BI "void rewinddir(DIR *" dirp );
.fi
.SH DESCRIPTION
The
.BR rewinddir ()
function resets the position of the directory
stream
.I dirp
to the beginning of the directory.
.SH RETURN VALUE
The
.BR rewinddir ()
function returns no value.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR rewinddir ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
SVr4, 4.3BSD, POSIX.1-2001.
.SH SEE ALSO
.BR closedir (3),
.BR opendir (3),
.BR readdir (3),
.BR scandir (3),
.BR seekdir (3),
.BR telldir (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1983, 1991, 1993
.\"     The Regents of the University of California.  All rights reserved.
.\"
.\" %%%LICENSE_START(BSD_4_CLAUSE_UCB)
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"     This product includes software developed by the University of
.\"     California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\" %%%LICENSE_END
.\"
.\"     @(#)rexec.3     8.1 (Berkeley) 6/4/93
.\" $FreeBSD: src/lib/libcompat/4.3/rexec.3,v 1.12 2004/07/02 23:52:14 ru Exp $
.\"
.\" Taken from FreeBSD 5.4; not checked against Linux reality (mtk)
.\"
.\" 2013-06-21, mtk, Converted from mdoc to man macros
.\"
.TH REXEC 3 2015-03-02 "Linux" "Linux Programmer's Manual"
.SH NAME
rexec, rexec_af \- return stream to a remote command
.SH SYNOPSIS
.nf
.BR "#define _BSD_SOURCE" "             /* See feature_test_macros(7) */"
.B #include <netdb.h>
.sp
.BI "int rexec(char **" ahost ", int " inport ", const char *" user ", "
.BI "          const char *" passwd ", const char *" cmd ", int *" fd2p );
.sp
.BI "int rexec_af(char **" ahost ", int " inport ", const char *" user ", "
.BI "             const char *" passwd ", const char *" cmd ", int *" fd2p ,
.BI "             sa_family_t " af  );
.fi
.SH DESCRIPTION
This interface is obsoleted by
.BR rcmd (3).

The
.BR rexec ()
function
looks up the host
.IR *ahost
using
.BR gethostbyname (3),
returning \-1 if the host does not exist.
Otherwise,
.IR *ahost
is set to the standard name of the host.
If a username and password are both specified, then these
are used to authenticate to the foreign host; otherwise
the environment and then the
.I .netrc
file in user's
home directory are searched for appropriate information.
If all this fails, the user is prompted for the information.
.PP
The port
.I inport
specifies which well-known DARPA Internet port to use for
the connection; the call
.I "getservbyname(""exec"", ""tcp"")"
(see
.BR getservent (3))
will return a pointer to a structure that contains the necessary port.
The protocol for connection is described in detail in
.BR rexecd (8).
.PP
If the connection succeeds,
a socket in the Internet domain of type
.BR SOCK_STREAM
is returned to
the caller, and given to the remote command as
.IR stdin
and
.IR stdout .
If
.I fd2p
is nonzero, then an auxiliary channel to a control
process will be setup, and a descriptor for it will be placed
in
.IR *fd2p .
The control process will return diagnostic
output from the command (unit 2) on this channel, and will also
accept bytes on this channel as being UNIX signal numbers, to be
forwarded to the process group of the command.
The diagnostic
information returned does not include remote authorization failure,
as the secondary connection is set up after authorization has been
verified.
If
.I fd2p
is 0, then the
.IR stderr
(unit 2 of the remote
command) will be made the same as the
.IR stdout
and no
provision is made for sending arbitrary signals to the remote process,
although you may be able to get its attention by using out-of-band data.
.SS rexec_af()
The
.BR rexec ()
function works over IPv4
.RB ( AF_INET ).
By contrast, the
.BR rexec_af ()
function provides an extra argument,
.IR af ,
that allows the caller to select the protocol.
This argument can be specified as
.BR AF_INET ,
.BR AF_INET6 ,
or
.BR AF_UNSPEC
(to allow the implementation to select the protocol).
.SH VERSIONS
The
.BR rexec_af ()
function was added to glibc in version 2.2.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw19 lb lb
l l l.
Interface	Attribute	Value
T{
.BR rexec (),
.BR rexec_af ()
T}	Thread safety	MT-Unsafe
.TE
.SH CONFORMING TO
These functions are not in POSIX.1-2001.
The
.BR rexec ()
function first appeared in
4.2BSD, and is present on the BSDs, Solaris, and many other systems.
The
.BR rexec_af ()
function is more recent, and less widespread.
.SH BUGS
The
.BR rexec ()
function sends the unencrypted password across the network.
.PP
The underlying service is considered a big security hole and therefore
not enabled on many sites; see
.BR rexecd (8)
for explanations.
.SH SEE ALSO
.BR rcmd (3),
.BR rexecd (8)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 2001 Andries Brouwer <aeb@cwi.nl>.
.\" and Copyright 2008, Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH RINT 3  2015-04-19 "" "Linux Programmer's Manual"
.SH NAME
nearbyint, nearbyintf, nearbyintl, rint, rintf, rintl \- round
to nearest integer
.SH SYNOPSIS
.nf
.B #include <math.h>
.sp
.BI "double nearbyint(double " x );
.br
.BI "float nearbyintf(float " x );
.br
.BI "long double nearbyintl(long double " x );
.sp
.BI "double rint(double " x );
.br
.BI "float rintf(float " x );
.br
.BI "long double rintl(long double " x );
.fi
.sp
Link with \fI\-lm\fP.
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR nearbyint (),
.BR nearbyintf (),
.BR nearbyintl ():
.RS 4
_XOPEN_SOURCE\ >=\ 600 || _POSIX_C_SOURCE\ >=\ 200112L || _ISOC99_SOURCE;
.br
or
.I cc\ -std=c99
.RE
.br
.BR rint ():
.RS 4
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE\ >=\ 500 ||
_XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.br
.BR rintf (),
.BR rintl ():
.RS 4
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE\ >=\ 600 || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.ad b
.SH DESCRIPTION
The
.BR nearbyint (),
.BR nearbyintf (),
and
.BR nearbyintl ()
functions round their argument to an integer value in floating-point
format, using the current rounding direction (see
.BR fesetround (3))
and without raising the
.I inexact
exception.
When the current rounding direction is to nearest, these
functions round halfway cases to the even integer in accordance with
IEEE-754.
.LP
The
.BR rint (),
.BR rintf (),
and
.BR rintl ()
functions do the same, but will raise the
.I inexact
exception
.RB ( FE_INEXACT ,
checkable via
.BR fetestexcept (3))
when the result differs in value from the argument.
.SH RETURN VALUE
These functions return the rounded integer value.

If
.I x
is integral, +0, \-0, NaN, or infinite,
.I x
itself is returned.
.SH ERRORS
No errors occur.
POSIX.1-2001 documents a range error for overflows, but see NOTES.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw26 lb lb
l l l.
Interface	Attribute	Value
T{
.BR nearbyint (),
.BR nearbyintf (),
.br
.BR nearbyintl (),
.BR rint (),
.br
.BR rintf (),
.BR rintl ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C99, POSIX.1-2001, POSIX.1-2008.
.SH NOTES
SUSv2 and POSIX.1-2001 contain text about overflow (which might set
.I errno
to
.BR ERANGE ,
or raise an
.B FE_OVERFLOW
exception).
In practice, the result cannot overflow on any current machine,
so this error-handling stuff is just nonsense.
(More precisely, overflow can happen only when the maximum value
of the exponent is smaller than the number of mantissa bits.
For the IEEE-754 standard 32-bit and 64-bit floating-point numbers
the maximum value of the exponent is 128 (respectively, 1024),
and the number of mantissa bits is 24 (respectively, 53).)

If you want to store the rounded value in an integer type,
you probably want to use one of the functions described in
.BR lrint (3)
instead.
.SH SEE ALSO
.BR ceil (3),
.BR floor (3),
.BR lrint (3),
.BR round (3),
.BR trunc (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 2001 Andries Brouwer <aeb@cwi.nl>.
.\" and Copyright 2008, Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH ROUND 3  2015-04-19 "" "Linux Programmer's Manual"
.SH NAME
round, roundf, roundl \- round to nearest integer, away from zero
.SH SYNOPSIS
.nf
.B #include <math.h>
.sp
.BI "double round(double " x );
.br
.BI "float roundf(float " x );
.br
.BI "long double roundl(long double " x );
.fi
.sp
Link with \fI\-lm\fP.
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR round (),
.BR roundf (),
.BR roundl ():
.RS 4
_XOPEN_SOURCE\ >=\ 600 || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.ad
.SH DESCRIPTION
These functions round
.I x
to the nearest integer, but
round halfway cases away from zero (regardless of the current rounding
direction, see
.BR fenv (3)),
instead of to the nearest even integer like
.BR rint (3).

For example,
.IR round(0.5)
is 1.0, and
.IR round(\-0.5)
is \-1.0.
.SH RETURN VALUE
These functions return the rounded integer value.

If
.I x
is integral, +0, \-0, NaN,  or infinite,
.I x
itself is returned.
.SH ERRORS
No errors occur.
POSIX.1-2001 documents a range error for overflows, but see NOTES.
.SH VERSIONS
These functions first appeared in glibc in version 2.1.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw27 lb lb
l l l.
Interface	Attribute	Value
T{
.BR round (),
.BR roundf (),
.BR roundl ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C99, POSIX.1-2001, POSIX.1-2008.
.SH NOTES
POSIX.1-2001 contains text about overflow (which might set
.I errno
to
.BR ERANGE ,
or raise an
.B FE_OVERFLOW
exception).
In practice, the result cannot overflow on any current machine,
so this error-handling stuff is just nonsense.
.\" The POSIX.1-2001 APPLICATION USAGE SECTION discusses this point.
(More precisely, overflow can happen only when the maximum value
of the exponent is smaller than the number of mantissa bits.
For the IEEE-754 standard 32-bit and 64-bit floating-point numbers
the maximum value of the exponent is 128 (respectively, 1024),
and the number of mantissa bits is 24 (respectively, 53).)

If you want to store the rounded value in an integer type,
you probably want to use one of the functions described in
.BR lround (3)
instead.
.SH SEE ALSO
.BR ceil (3),
.BR floor (3),
.BR lround (3),
.BR nearbyint (3),
.BR rint (3),
.BR trunc (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" This page was taken from the 4.4BSD-Lite CDROM (BSD license)
.\"
.\" %%%LICENSE_START(BSD_ONELINE_CDROM)
.\" This page was taken from the 4.4BSD-Lite CDROM (BSD license)
.\" %%%LICENSE_END
.\"
.\" @(#)rpc.3n	2.4 88/08/08 4.0 RPCSRC; from 1.19 88/06/24 SMI
.\"
.\" 2007-12-30, mtk, Convert function prototypes to modern C syntax
.\"
.TH RPC 3 2013-09-26 "" "Linux Programmer's Manual"
.SH NAME
rpc \- library routines for remote procedure calls
.SH SYNOPSIS AND DESCRIPTION
These routines allow C programs to make procedure
calls on other machines across the network.
First, the client calls a procedure to send a data packet to the server.
Upon receipt of the packet, the server calls a dispatch routine
to perform the requested service, and then sends back a reply.
Finally, the procedure call returns to the client.
.\" .LP
.\" We don't have an rpc_secure.3 page at the moment -- MTK, 19 Sep 05
.\" Routines that are used for Secure RPC (DES authentication) are described in
.\" .BR rpc_secure (3).
.\" Secure RPC can be used only if DES encryption is available.
.LP
To take use of these routines, include the header file
.IR "<rpc/rpc.h>" .

The prototypes below make use of the following types:
.in +4n
.nf

.BI "typedef int " bool_t ;

.BI "typedef bool_t (*" xdrproc_t ") (XDR *, void *, ...);"

.BI "typedef bool_t (*" resultproc_t ") (caddr_t " resp ,
.BI "                                struct sockaddr_in *" raddr );
.fi
.in
.LP
See the header files for the declarations of the
.IR AUTH ,
.IR CLIENT ,
.IR SVCXPRT ,
and
.IR XDR
types.
.LP
.nf
.BI "void auth_destroy(AUTH *" auth );
.fi
.IP
A macro that destroys the authentication information associated with
.IR auth .
Destruction usually involves deallocation of private data structures.
The use of
.I auth
is undefined after calling
.BR auth_destroy ().
.LP
.nf
.BI "AUTH *authnone_create(void);"
.fi
.IP
Create and return an RPC
authentication handle that passes nonusable authentication
information with each remote procedure call.
This is the default authentication used by RPC.
.LP
.nf
.BI "AUTH *authunix_create(char *" host ", int " uid ", int " gid ,
.BI "                      int " len ", int *" aup_gids );
.fi
.IP
Create and return an RPC authentication handle that contains
authentication information.
The parameter
.I host
is the name of the machine on which the information was created;
.I uid
is the user's user ID;
.I gid
is the user's current group ID;
.I len
and
.I aup_gids
refer to a counted array of groups to which the user belongs.
It is easy to impersonate a user.
.LP
.nf
.BI "AUTH *authunix_create_default(void);"
.fi
.IP
Calls
.BR authunix_create ()
with the appropriate parameters.
.LP
.nf
.BI "int callrpc(char *" host ", unsigned long " prognum ,
.BI "            unsigned long " versnum ", unsigned long " procnum ,
.BI "            xdrproc_t " inproc ", char *" in ,
.BI "            xdrproc_t " outproc ", char *" out );
.fi
.IP
Call the remote procedure associated with
.IR prognum ,
.IR versnum ,
and
.I procnum
on the machine,
.IR host .
The parameter
.I in
is the address of the procedure's argument(s), and
.I out
is the address of where to place the result(s);
.I inproc
is used to encode the procedure's parameters, and
.I outproc
is used to decode the procedure's results.
This routine returns zero if it succeeds, or the value of
.B "enum clnt_stat"
cast to an integer if it fails.
The routine
.BR clnt_perrno ()
is handy for translating failure statuses into messages.
.IP
Warning: calling remote procedures with this routine
uses UDP/IP as a transport; see
.BR clntudp_create ()
for restrictions.
You do not have control of timeouts or authentication using this routine.
.LP
.nf
.BI "enum clnt_stat clnt_broadcast(unsigned long " prognum ,
.BI "                     unsigned long " versnum ", unsigned long " procnum ,
.BI "                     xdrproc_t " inproc ", char *" in ,
.BI "                     xdrproc_t " outproc ", char *" out ,
.BI "                     resultproc_t " eachresult );
.fi
.IP
Like
.BR callrpc (),
except the call message is broadcast to all locally
connected broadcast nets.
Each time it receives a response, this routine calls
.BR eachresult (),
whose form is:
.IP
.in +4n
.nf
.BI "eachresult(char *" out ", struct sockaddr_in *" addr );
.fi
.in
.IP
where
.I out
is the same as
.I out
passed to
.BR clnt_broadcast (),
except that the remote procedure's output is decoded there;
.I addr
points to the address of the machine that sent the results.
If
.BR eachresult ()
returns zero,
.BR clnt_broadcast ()
waits for more replies; otherwise it returns with appropriate status.
.IP
Warning: broadcast sockets are limited in size to the
maximum transfer unit of the data link.
For ethernet, this value is 1500 bytes.
.LP
.nf
.BI "enum clnt_stat clnt_call(CLIENT *" clnt ", unsigned long " procnum ,
.BI "                    xdrproc_t " inproc ", char *" in ,
.BI "                    xdrproc_t " outproc ", char *" out ,
.BI "                    struct timeval " tout );
.fi
.IP
A macro that calls the remote procedure
.I procnum
associated with the client handle,
.IR clnt ,
which is obtained with an RPC client creation routine such as
.BR clnt_create ().
The parameter
.I in
is the address of the procedure's argument(s), and
.I out
is the address of where to place the result(s);
.I inproc
is used to encode the procedure's parameters, and
.I outproc
is used to decode the procedure's results;
.I tout
is the time allowed for results to come back.
.LP
.nf
.BI "clnt_destroy(CLIENT *" clnt );
.fi
.IP
A macro that destroys the client's RPC handle.
Destruction usually involves deallocation
of private data structures, including
.I clnt
itself.
Use of
.I clnt
is undefined after calling
.BR clnt_destroy ().
If the RPC library opened the associated socket, it will close it also.
Otherwise, the socket remains open.
.LP
.nf
.BI "CLIENT *clnt_create(char *" host ", unsigned long " prog ,
.BI "                    unsigned long " vers ", char *" proto );
.fi
.IP
Generic client creation routine.
.I host
identifies the name of the remote host where the server is located.
.I proto
indicates which kind of transport protocol to use.
The currently supported values for this field are \(lqudp\(rq
and \(lqtcp\(rq.
Default timeouts are set, but can be modified using
.BR clnt_control ().
.IP
Warning: Using UDP has its shortcomings.
Since UDP-based RPC messages can hold only up to 8 Kbytes of encoded data,
this transport cannot be used for procedures that take
large arguments or return huge results.
.LP
.nf
.BI "bool_t clnt_control(CLIENT *" cl ", int " req ", char *" info );
.fi
.IP
A macro used to change or retrieve various information
about a client object.
.I req
indicates the type of operation, and
.I info
is a pointer to the information.
For both UDP and TCP, the supported values of
.I req
and their argument types and what they do are:
.IP
.in +4n
.nf
\fBCLSET_TIMEOUT\fP  \fIstruct timeval\fP // set total timeout
\fBCLGET_TIMEOUT\fP  \fIstruct timeval\fP // get total timeout
.fi
.in
.IP
Note: if you set the timeout using
.BR clnt_control (),
the timeout parameter passed to
.BR clnt_call ()
will be ignored in all future calls.
.IP
.in +4n
.nf
\fBCLGET_SERVER_ADDR\fP  \fIstruct sockaddr_in \fP // get server's address
.fi
.in
.IP
The following operations are valid for UDP only:
.IP
.in +4n
.nf
\fBCLSET_RETRY_TIMEOUT\fP  \fIstruct timeval\fP // set the retry timeout
\fBCLGET_RETRY_TIMEOUT\fP  \fIstruct timeval\fP // get the retry timeout
.fi
.in
.IP
The retry timeout is the time that "UDP RPC"
waits for the server to reply before
retransmitting the request.
.LP
.nf
.BI "clnt_freeres(CLIENT * " clnt ", xdrproc_t " outproc ", char *" out );
.fi
.IP
A macro that frees any data allocated by the RPC/XDR
system when it decoded the results of an RPC call.
The parameter
.I out
is the address of the results, and
.I outproc
is the XDR routine describing the results.
This routine returns one if the results were successfully freed,
and zero otherwise.
.LP
.nf
.BI "void clnt_geterr(CLIENT *" clnt ", struct rpc_err *" errp );
.fi
.IP
A macro that copies the error structure out of the client
handle to the structure at address
.IR errp .
.LP
.nf
.BI "void clnt_pcreateerror(char *" s );
.fi
.IP
Print a message to standard error indicating why a client RPC
handle could not be created.
The message is prepended with string
.I s
and a colon.
Used when a
.BR clnt_create (),
.BR clntraw_create (),
.BR clnttcp_create (),
or
.BR clntudp_create ()
call fails.
.LP
.nf
.BI "void clnt_perrno(enum clnt_stat " stat );
.fi
.IP
Print a message to standard error corresponding
to the condition indicated by
.IR stat .
Used after
.BR callrpc ().
.LP
.nf
.BI "clnt_perror(CLIENT *" clnt ", char *" s );
.fi
.IP
Print a message to standard error indicating why an RPC call failed;
.I clnt
is the handle used to do the call.
The message is prepended with string
.I s
and a colon.
Used after
.BR clnt_call ().
.LP
.nf
.BI "char *clnt_spcreateerror(char *" s );
.fi
.IP
Like
.BR clnt_pcreateerror (),
except that it returns a string instead of printing to the standard error.
.IP
Bugs: returns pointer to static data that is overwritten on each call.
.LP
.nf
.BI "char *clnt_sperrno(enum clnt_stat " stat );
.fi
.IP
Take the same arguments as
.BR clnt_perrno (),
but instead of sending a message to the standard error indicating why an RPC
call failed, return a pointer to a string which contains the message.
The string ends with a NEWLINE.
.IP
.BR clnt_sperrno ()
is used instead of
.BR clnt_perrno ()
if the program does not have a standard error (as a program
running as a server quite likely does not), or if the programmer
does not want the message to be output with
.BR printf (3),
or if a message format different than that supported by
.BR clnt_perrno ()
is to be used.
Note: unlike
.BR clnt_sperror ()
and
.BR clnt_spcreateerror (),
.BR clnt_sperrno ()
returns pointer to static data, but the
result will not get overwritten on each call.
.LP
.nf
.BI "char *clnt_sperror(CLIENT *" rpch ", char *" s );
.fi
.IP
Like
.BR clnt_perror (),
except that (like
.BR clnt_sperrno ())
it returns a string instead of printing to standard error.
.IP
Bugs: returns pointer to static data that is overwritten on each call.
.LP
.nf
.BI "CLIENT *clntraw_create(unsigned long " prognum \
", unsigned long " versnum );
.fi
.IP
This routine creates a toy RPC client for the remote program
.IR prognum ,
version
.IR versnum .
The transport used to pass messages to the service is
actually a buffer within the process's address space, so the
corresponding RPC server should live in the same address space; see
.BR svcraw_create ().
This allows simulation of RPC and acquisition of RPC
overheads, such as round trip times, without any kernel interference.
This routine returns NULL if it fails.
.LP
.nf
.BI "CLIENT *clnttcp_create(struct sockaddr_in *" addr ,
.BI "                unsigned long " prognum ", unsigned long " versnum ,
.BI "                int *" sockp ", unsigned int " sendsz \
", unsigned int " recvsz );
.fi
.IP
This routine creates an RPC client for the remote program
.IR prognum ,
version
.IR versnum ;
the client uses TCP/IP as a transport.
The remote program is located at Internet address
.IR *addr .
If
.\"The following inline font conversion is necessary for the hyphen indicator
.I addr\->sin_port
is zero, then it is set to the actual port that the remote
program is listening on (the remote
.B portmap
service is consulted for this information).
The parameter
.I sockp
is a socket; if it is
.BR RPC_ANYSOCK ,
then this routine opens a new one and sets
.IR sockp .
Since TCP-based RPC uses buffered I/O,
the user may specify the size of the send and receive buffers
with the parameters
.I sendsz
and
.IR recvsz ;
values of zero choose suitable defaults.
This routine returns NULL if it fails.
.LP
.nf
.BI "CLIENT *clntudp_create(struct sockaddr_in *" addr ,
.BI "                unsigned long " prognum ", unsigned long " versnum ,
.BI "                struct timeval " wait ", int *" sockp );
.fi
.IP
This routine creates an RPC client for the remote program
.IR prognum ,
version
.IR versnum ;
the client uses use UDP/IP as a transport.
The remote program is located at Internet address
.IR addr .
If
.I addr\->sin_port
is zero, then it is set to actual port that the remote
program is listening on (the remote
.B portmap
service is consulted for this information).
The parameter
.I sockp
is a socket; if it is
.BR RPC_ANYSOCK ,
then this routine opens a new one and sets
.IR sockp .
The UDP transport resends the call message in intervals of
.I wait
time until a response is received or until the call times out.
The total time for the call to time out is specified by
.BR clnt_call ().
.IP
Warning: since UDP-based RPC messages can hold only up to 8 Kbytes
of encoded data, this transport cannot be used for procedures
that take large arguments or return huge results.
.LP
.nf
.BI "CLIENT *clntudp_bufcreate(struct sockaddr_in *" addr ,
.BI "            unsigned long " prognum ", unsigned long " versnum ,
.BI "            struct timeval " wait ", int *" sockp ,
.BI "            unsigned int " sendsize ", unsigned int "recosize );
.fi
.IP
This routine creates an RPC client for the remote program
.IR prognum ,
on
.IR versnum ;
the client uses use UDP/IP as a transport.
The remote program is located at Internet address
.IR addr .
If
.I addr\->sin_port
is zero, then it is set to actual port that the remote
program is listening on (the remote
.B portmap
service is consulted for this information).
The parameter
.I sockp
is a socket; if it is
.BR RPC_ANYSOCK ,
then this routine opens a new one and sets
.IR sockp .
The UDP transport resends the call message in intervals of
.I wait
time until a response is received or until the call times out.
The total time for the call to time out is specified by
.BR clnt_call ().
.IP
This allows the user to specify the maximum packet
size for sending and receiving UDP-based RPC messages.
.LP
.nf
.BI "void get_myaddress(struct sockaddr_in *" addr );
.fi
.IP
Stuff the machine's IP address into
.IR *addr ,
without consulting the library routines that deal with
.IR /etc/hosts .
The port number is always set to
.BR htons(PMAPPORT) .
.LP
.nf
.BI "struct pmaplist *pmap_getmaps(struct sockaddr_in *" addr );
.fi
.IP
A user interface to the
.B portmap
service, which returns a list of the current RPC
program-to-port mappings on the host located at IP address
.IR *addr .
This routine can return NULL.
The command
.IR "rpcinfo\ \-p"
uses this routine.
.LP
.nf
.BI "unsigned short pmap_getport(struct sockaddr_in *" addr ,
.BI "                    unsigned long " prognum ", unsigned long " versnum ,
.BI "                    unsigned int " protocol );
.fi
.IP
A user interface to the
.B portmap
service, which returns the port number
on which waits a service that supports program number
.IR prognum ,
version
.IR versnum ,
and speaks the transport protocol associated with
.IR protocol .
The value of
.I protocol
is most likely
.B IPPROTO_UDP
or
.BR IPPROTO_TCP .
A return value of zero means that the mapping does not exist
or that the RPC system failed to contact the remote
.B portmap
service.
In the latter case, the global variable
.I rpc_createerr
contains the RPC status.
.LP
.nf
.BI "enum clnt_stat pmap_rmtcall(struct sockaddr_in *" addr ,
.BI "                    unsigned long " prognum ", unsigned long " versnum ,
.BI "                    unsigned long " procnum ,
.BI "                    xdrproc_t " inproc ", char *" in ,
.BI "                    xdrproc_t " outproc ", char *" out ,
.BI "                    struct timeval " tout ", unsigned long *" portp );
.fi
.IP
A user interface to the
.B portmap
service, which instructs
.B portmap
on the host at IP address
.I *addr
to make an RPC call on your behalf to a procedure on that host.
The parameter
.I *portp
will be modified to the program's port number if the procedure succeeds.
The definitions of other parameters are discussed
in
.BR callrpc ()
and
.BR clnt_call ().
This procedure should be used for a \(lqping\(rq and nothing else.
See also
.BR clnt_broadcast ().
.LP
.nf
.BI "bool_t pmap_set(unsigned long " prognum ", unsigned long " versnum ,
.BI "                unsigned int " protocol ", unsigned short " port );
.fi
.IP
A user interface to the
.B portmap
service, which establishes a mapping between the triple
.RI [ prognum , versnum , protocol ]
and
.I port
on the machine's
.B portmap
service.
The value of
.I protocol
is most likely
.B IPPROTO_UDP
or
.BR IPPROTO_TCP .
This routine returns one if it succeeds, zero otherwise.
Automatically done by
.BR svc_register ().
.LP
.nf
.BI "bool_t pmap_unset(unsigned long " prognum ", unsigned long " versnum );
.fi
.IP
A user interface to the
.B portmap
service, which destroys all mapping between the triple
.RI [ prognum , versnum , * ]
and
.B ports
on the machine's
.B portmap
service.
This routine returns one if it succeeds, zero otherwise.
.LP
.nf
.BI "int registerrpc(unsigned long " prognum ", unsigned long " versnum ,
.BI "                unsigned long " procnum ", char *(*" procname ")(char *),"
.BI "                xdrproc_t " inproc ", xdrproc_t " outproc );
.fi
.IP
Register procedure
.I procname
with the RPC service package.
If a request arrives for program
.IR prognum ,
version
.IR versnum ,
and procedure
.IR procnum ,
.I procname
is called with a pointer to its parameter(s);
.I procname
should return a pointer to its static result(s);
.I inproc
is used to decode the parameters while
.I outproc
is used to encode the results.
This routine returns zero if the registration succeeded, \-1 otherwise.
.IP
Warning: remote procedures registered in this form
are accessed using the UDP/IP transport; see
.BR svcudp_create ()
for restrictions.
.LP
.nf
.BI "struct rpc_createerr " rpc_createerr ;
.fi
.IP
A global variable whose value is set by any RPC client creation routine
that does not succeed.
Use the routine
.BR clnt_pcreateerror ()
to print the reason why.
.LP
.nf
.BI "void svc_destroy(SVCXPRT *" xprt );
.fi
.IP
A macro that destroys the RPC service transport handle,
.IR xprt .
Destruction usually involves deallocation
of private data structures, including
.I xprt
itself.
Use of
.I xprt
is undefined after calling this routine.
.LP
.nf
.BI "fd_set " svc_fdset ;
.fi
.IP
A global variable reflecting the RPC service side's
read file descriptor bit mask; it is suitable as a parameter to the
.BR select (2)
system call.
This is of interest only if a service implementor does their own
asynchronous event processing, instead of calling
.BR svc_run ().
This variable is read-only (do not pass its address to
.BR select (2)!),
yet it may change after calls to
.BR svc_getreqset ()
or any creation routines.
.LP
.nf
.BI "int " svc_fds ;
.fi
.IP
Similar to
.BR svc_fdset ,
but limited to 32 descriptors.
This interface is obsoleted by
.BR svc_fdset .
.LP
.nf
.BI "svc_freeargs(SVCXPRT *" xprt ", xdrproc_t " inproc ", char *" in );
.fi
.IP
A macro that frees any data allocated by the RPC/XDR
system when it decoded the arguments to a service procedure using
.BR svc_getargs ().
This routine returns 1 if the results were successfully freed,
and zero otherwise.
.LP
.nf
.BI "svc_getargs(SVCXPRT *" xprt ", xdrproc_t " inproc ", char *" in );
.fi
.IP
A macro that decodes the arguments of an RPC request
associated with the RPC service transport handle,
.IR xprt .
The parameter
.I in
is the address where the arguments will be placed;
.I inproc
is the XDR routine used to decode the arguments.
This routine returns one if decoding succeeds, and zero otherwise.
.LP
.nf
.BI "struct sockaddr_in *svc_getcaller(SVCXPRT *" xprt );
.fi
.IP
The approved way of getting the network address of the caller
of a procedure associated with the RPC service transport handle,
.IR xprt .
.LP
.nf
.BI "void svc_getreqset(fd_set *" rdfds );
.fi
.IP
This routine is of interest only if a service implementor does not call
.BR svc_run (),
but instead implements custom asynchronous event processing.
It is called when the
.BR select (2)
system call has determined that an RPC request has arrived on some
RPC socket(s);
.I rdfds
is the resultant read file descriptor bit mask.
The routine returns when all sockets associated with the value of
.I rdfds
have been serviced.
.LP
.nf
.BI "void svc_getreq(int " rdfds );
.fi
.IP
Similar to
.BR svc_getreqset (),
but limited to 32 descriptors.
This interface is obsoleted by
.BR svc_getreqset ().
.LP
.nf
.BI "bool_t svc_register(SVCXPRT *" xprt ", unsigned long " prognum ,
.BI "                    unsigned long " versnum ,
.BI "                    void (*" dispatch ")(svc_req *, SVCXPRT *),"
.BI "                    unsigned long " protocol );
.fi
.IP
Associates
.I prognum
and
.I versnum
with the service dispatch procedure,
.IR dispatch .
If
.I protocol
is zero, the service is not registered with the
.B portmap
service.
If
.I protocol
is nonzero, then a mapping of the triple
.RI [ prognum , versnum , protocol ]
to
.I xprt\->xp_port
is established with the local
.B portmap
service (generally
.I protocol
is zero,
.B IPPROTO_UDP
or
.BR IPPROTO_TCP ).
The procedure
.I dispatch
has the following form:
.in +4n
.nf

dispatch(struct svc_req *request, SVCXPRT *xprt);
.fi
.in
.IP
The
.BR svc_register ()
routine returns one if it succeeds, and zero otherwise.
.LP
.nf
.B "void svc_run(void);"
.fi
.IP
This routine never returns.
It waits for RPC requests to arrive, and calls the appropriate service
procedure using
.BR svc_getreq ()
when one arrives.
This procedure is usually waiting for a
.BR select (2)
system call to return.
.LP
.nf
.BI "bool_t svc_sendreply(SVCXPRT *" xprt ", xdrproc_t " outproc \
", char *" out );
.fi
.IP
Called by an RPC service's dispatch routine to send the results of a
remote procedure call.
The parameter
.I xprt
is the request's associated transport handle;
.I outproc
is the XDR routine which is used to encode the results; and
.I out
is the address of the results.
This routine returns one if it succeeds, zero otherwise.
.LP
.nf
.BI "void svc_unregister(unsigned long " prognum ", unsigned long " versnum );
.fi
.IP
Remove all mapping of the double
.RI [ prognum , versnum ]
to dispatch routines, and of the triple
.RI [ prognum , versnum , * ]
to port number.
.LP
.nf
.BI "void svcerr_auth(SVCXPRT *" xprt ", enum auth_stat " why );
.fi
.IP
Called by a service dispatch routine that refuses to perform
a remote procedure call due to an authentication error.
.LP
.nf
.BI "void svcerr_decode(SVCXPRT *" xprt );
.fi
.IP
Called by a service dispatch routine that cannot successfully
decode its parameters.
See also
.BR svc_getargs ().
.LP
.nf
.BI "void svcerr_noproc(SVCXPRT *" xprt );
.fi
.IP
Called by a service dispatch routine that does not implement
the procedure number that the caller requests.
.LP
.nf
.BI "void svcerr_noprog(SVCXPRT *" xprt );
.fi
.IP
Called when the desired program is not registered with the RPC package.
Service implementors usually do not need this routine.
.LP
.nf
.BI "void svcerr_progvers(SVCXPRT *" xprt );
.fi
.IP
Called when the desired version of a program is not registered
with the RPC package.
Service implementors usually do not need this routine.
.LP
.nf
.BI "void svcerr_systemerr(SVCXPRT *" xprt );
.fi
.IP
Called by a service dispatch routine when it detects a system
error not covered by any particular protocol.
For example, if a service can no longer allocate storage,
it may call this routine.
.LP
.nf
.BI "void svcerr_weakauth(SVCXPRT *" xprt );
.fi
.IP
Called by a service dispatch routine that refuses to perform
a remote procedure call due to insufficient authentication parameters.
The routine calls
.BR "svcerr_auth(xprt, AUTH_TOOWEAK)" .
.LP
.nf
.BI "SVCXPRT *svcfd_create(int " fd ", unsigned int " sendsize ,
.BI "                      unsigned int " recvsize );
.fi
.IP
Create a service on top of any open descriptor.
Typically, this descriptor is a connected socket for a stream protocol such
as TCP.
.I sendsize
and
.I recvsize
indicate sizes for the send and receive buffers.
If they are zero, a reasonable default is chosen.
.LP
.nf
.BI "SVCXPRT *svcraw_create(void);"
.fi
.IP
This routine creates a toy RPC
service transport, to which it returns a pointer.
The transport is really a buffer within the process's address space,
so the corresponding RPC client should live in the same address space; see
.BR clntraw_create ().
This routine allows simulation of RPC and acquisition of RPC
overheads (such as round trip times), without any kernel interference.
This routine returns NULL if it fails.
.LP
.nf
.BI "SVCXPRT *svctcp_create(int " sock ", unsigned int " send_buf_size ,
.BI "                       unsigned int " recv_buf_size );
.fi
.IP
This routine creates a TCP/IP-based RPC
service transport, to which it returns a pointer.
The transport is associated with the socket
.IR sock ,
which may be
.BR RPC_ANYSOCK ,
in which case a new socket is created.
If the socket is not bound to a local TCP
port, then this routine binds it to an arbitrary port.
Upon completion,
.I xprt\->xp_sock
is the transport's socket descriptor, and
.I xprt\->xp_port
is the transport's port number.
This routine returns NULL if it fails.
Since TCP-based RPC uses buffered I/O,
users may specify the size of buffers; values of zero
choose suitable defaults.
.LP
.nf
.BI "SVCXPRT *svcudp_bufcreate(int " sock ", unsigned int " sendsize ,
.BI "                          unsigned int " recosize );
.fi
.IP
This routine creates a UDP/IP-based RPC
service transport, to which it returns a pointer.
The transport is associated with the socket
.IR sock ,
which may be
.BR RPC_ANYSOCK ,
in which case a new socket is created.
If the socket is not bound to a local UDP
port, then this routine binds it to an arbitrary port.
Upon completion,
.I xprt\->xp_sock
is the transport's socket descriptor, and
.I xprt\->xp_port
is the transport's port number.
This routine returns NULL if it fails.
.IP
This allows the user to specify the maximum packet size for sending and
receiving UDP-based RPC messages.
.LP
.nf
.BI "SVCXPRT *svcudp_create(int " sock );
.fi
.IP
This call is equivalent to
.I svcudp_bufcreate(sock,SZ,SZ)
for some default size
.IR SZ .
.LP
.nf
.BI "bool_t xdr_accepted_reply(XDR *" xdrs ", struct accepted_reply *" ar );
.fi
.IP
Used for encoding RPC reply messages.
This routine is useful for users who wish to generate
RPC-style messages without using the RPC package.
.LP
.nf
.BI "bool_t xdr_authunix_parms(XDR *" xdrs ", struct authunix_parms *" aupp );
.fi
.IP
Used for describing UNIX credentials.
This routine is useful for users
who wish to generate these credentials without using the RPC
authentication package.
.LP
.nf
.BI "void xdr_callhdr(XDR *" xdrs ", struct rpc_msg *" chdr );
.fi
.IP
Used for describing RPC call header messages.
This routine is useful for users who wish to generate
RPC-style messages without using the RPC package.
.LP
.nf
.BI "bool_t xdr_callmsg(XDR *" xdrs ", struct rpc_msg *" cmsg );
.fi
.IP
Used for describing RPC call messages.
This routine is useful for users who wish to generate RPC-style
messages without using the RPC package.
.LP
.nf
.BI "bool_t xdr_opaque_auth(XDR *" xdrs ", struct opaque_auth *" ap );
.fi
.IP
Used for describing RPC authentication information messages.
This routine is useful for users who wish to generate
RPC-style messages without using the RPC package.
.LP
.nf
.BI "bool_t xdr_pmap(XDR *" xdrs ", struct pmap *" regs );
.fi
.IP
Used for describing parameters to various
.B portmap
procedures, externally.
This routine is useful for users who wish to generate
these parameters without using the
.B pmap
interface.
.LP
.nf
.BI "bool_t xdr_pmaplist(XDR *" xdrs ", struct pmaplist **" rp );
.fi
.IP
Used for describing a list of port mappings, externally.
This routine is useful for users who wish to generate
these parameters without using the
.B pmap
interface.
.LP
.nf
.BI "bool_t xdr_rejected_reply(XDR *" xdrs ", struct rejected_reply *" rr );
.fi
.IP
Used for describing RPC reply messages.
This routine is useful for users who wish to generate
RPC-style messages without using the RPC package.
.LP
.nf
.BI "bool_t xdr_replymsg(XDR *" xdrs ", struct rpc_msg *" rmsg );
.fi
.IP
Used for describing RPC reply messages.
This routine is useful for users who wish to generate
RPC style messages without using the RPC package.
.LP
.nf
.BI "void xprt_register(SVCXPRT *" xprt );
.fi
.IP
After RPC service transport handles are created,
they should register themselves with the RPC service package.
This routine modifies the global variable
.IR svc_fds .
Service implementors usually do not need this routine.
.LP
.nf
.BI "void xprt_unregister(SVCXPRT *" xprt );
.fi
.IP
Before an RPC service transport handle is destroyed,
it should unregister itself with the RPC service package.
This routine modifies the global variable
.IR svc_fds .
Service implementors usually do not need this routine.
.SH SEE ALSO
.\" We don't have an rpc_secure.3 page in the set at the moment -- MTK, 19 Sep 05
.\" .BR rpc_secure (3),
.BR xdr (3)

The following manuals:
.RS
Remote Procedure Calls: Protocol Specification
.br
Remote Procedure Call Programming Guide
.br
rpcgen Programming Guide
.br
.RE

.IR "RPC: Remote Procedure Call Protocol Specification" ,
RFC\ 1050, Sun Microsystems, Inc.,
USC-ISI.
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2006 Justin Pryzby <pryzbyj@justinpryzby.com>
.\"
.\" %%%LICENSE_START(PERMISSIVE_MISC)
.\" Permission is hereby granted, free of charge, to any person obtaining
.\" a copy of this software and associated documentation files (the
.\" "Software"), to deal in the Software without restriction, including
.\" without limitation the rights to use, copy, modify, merge, publish,
.\" distribute, sublicense, and/or sell copies of the Software, and to
.\" permit persons to whom the Software is furnished to do so, subject to
.\" the following conditions:
.\"
.\" The above copyright notice and this permission notice shall be
.\" included in all copies or substantial portions of the Software.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
.\" EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
.\" MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
.\" IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
.\" CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
.\" TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
.\" SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
.\" %%%LICENSE_END
.\"
.\" References:
.\"   glibc manual and source
.\"
.\" 2006-05-19, mtk, various edits and example program
.\"
.TH RPMATCH 3 2007-07-26 "GNU" "Linux Programmer's Manual"
.SH NAME
rpmatch \- determine if the answer to a question is affirmative or negative
.SH SYNOPSIS
.nf
.B #include <stdlib.h>

.BI "int rpmatch(const char *" response );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR rpmatch ():
_SVID_SOURCE
.SH DESCRIPTION
.BR rpmatch ()
handles a user response to yes or no questions, with
support for internationalization.

.I response
should be a null-terminated string containing a
user-supplied response, perhaps obtained with
.BR fgets (3)
or
.BR getline (3).

The user's language preference is taken into account per the
environment variables
.BR LANG ,
.BR LC_MESSAGES ,
and
.BR LC_ALL ,
if the program has called
.BR setlocale (3)
to effect their changes.

Regardless of the locale, responses matching
.B ^[Yy]
are always accepted as affirmative, and those matching
.B ^[Nn]
are always accepted as negative.
.SH RETURN VALUE
After examining
.IR response ,
.BR rpmatch ()
returns 0 for a recognized negative response ("no"), 1
for a recognized positive response ("yes"), and \-1 when the value
of
.I response
is unrecognized.
.SH ERRORS
A return value of \-1 may indicate either an invalid input, or some
other error.
It is incorrect to only test if the return value is nonzero.

.BR rpmatch ()
can fail for any of the reasons that
.BR regcomp (3)
or
.BR regexec (3)
can fail; the cause of the error
is not available from
.I errno
or anywhere else, but indicates a
failure of the regex engine (but this case is indistinguishable from
that of an unrecognized value of
.IR response ).
.SH CONFORMING TO
.BR rpmatch ()
is not required by any standard, but
is available on a few other systems.
.\" It is available on at least AIX 5.1 and FreeBSD 6.0.
.SH BUGS
The
.BR rpmatch ()
implementation looks at only the first character
of
.IR response .
As a consequence, "nyes" returns 0, and
"ynever; not in a million years" returns 1.
It would be preferable to accept input strings much more
strictly, for example (using the extended regular
expression notation described in
.BR regex (7)):
.B ^([yY]|yes|YES)$
and
.BR ^([nN]|no|NO)$ .
.SH EXAMPLE
The following program displays the results when
.BR rpmatch ()
is applied to the string given in the program's command-line argument.
.nf

#define _SVID_SOURCE
#include <locale.h>
#include <stdlib.h>
#include <string.h>
#include <stdio.h>

int
main(int argc, char *argv[])
{
    if (argc != 2 || strcmp(argv[1], "\-\-help") == 0) {
        fprintf(stderr, "%s response\\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    setlocale(LC_ALL, "");
    printf("rpmatch() returns: %d\\n", rpmatch(argv[1]));
    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR fgets (3),
.BR getline (3),
.BR nl_langinfo (3),
.BR regcomp (3),
.BR setlocale (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 2003 walter harms (walter.harms@informatik.uni-oldenburg.de)
.\"
.\" %%%LICENSE_START(GPL_NOVERSION_ONELINE)
.\" Distributed under GPL
.\" %%%LICENSE_END
.\"
.\" Modified 2003-04-04 Walter Harms
.\" <walter.harms@informatik.uni-oldenburg.de>
.\"
.\" Slightly polished, aeb, 2003-04-06
.\"
.TH RTIME 3 2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
rtime \- get time from a remote machine
.SH SYNOPSIS
.nf
.B "#include <rpc/auth_des.h>"
.sp
.BI "int rtime(struct sockaddr_in *" addrp ", struct rpc_timeval *" timep ,
.BI "          struct rpc_timeval *" timeout );
.fi
.SH DESCRIPTION
This function uses the Time Server Protocol as described in
RFC\ 868 to obtain the time from a remote machine.
.LP
The Time Server Protocol gives the time in seconds since
00:00:00 UTC, 1 Jan 1900,
and this function subtracts the appropriate constant in order to
convert the result to seconds since the
Epoch, 1970-01-01 00:00:00 +0000 (UTC).
.LP
When
.I timeout
is non-NULL, the udp/time socket (port 37) is used.
Otherwise, the tcp/time socket (port 37) is used.
.SH RETURN VALUE
On success, 0 is returned, and the obtained 32-bit time value is stored in
.IR timep\->tv_sec .
In case of error \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
All errors for underlying functions
.RB ( sendto (2),
.BR poll (2),
.BR recvfrom (2),
.BR connect (2),
.BR read (2))
can occur.
Moreover:
.TP
.B EIO
The number of returned bytes is not 4.
.TP
.B ETIMEDOUT
The waiting time as defined in timeout has expired.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR rtime ()
T}	Thread safety	MT-Safe
.TE
.SH NOTES
Only IPv4 is supported.
.LP
Some
.I in.timed
versions support only TCP.
Try the example program with
.I use_tcp
set to 1.
.LP
Libc5 uses the prototype
.nf

    int rtime(struct sockaddr_in *, struct timeval *, struct timeval *);

.fi
and requires
.I <sys/time.h>
instead of
.IR <rpc/auth_des.h> .
.SH BUGS
.BR rtime ()
in glibc 2.2.5 and earlier does not work properly on 64-bit machines.
.SH EXAMPLE
This example requires that port 37 is up and open.
You may check
that the time entry within
.I /etc/inetd.conf
is not commented out.

The program connects to a computer called "linux".
Using "localhost" does not work.
The result is the localtime of the computer "linux".
.sp
.nf
#include <stdio.h>
#include <stdlib.h>
#include <errno.h>
#include <string.h>
#include <time.h>
#include <rpc/auth_des.h>
#include <netdb.h>

static int use_tcp = 0;
static char *servername = "linux";

int
main(void)
{
    struct sockaddr_in name;
    struct rpc_timeval time1 = {0,0};
    struct rpc_timeval timeout = {1,0};
    struct hostent *hent;
    int ret;

    memset(&name, 0, sizeof(name));
    sethostent(1);
    hent = gethostbyname(servername);
    memcpy(&name.sin_addr, hent\->h_addr, hent\->h_length);

    ret = rtime(&name, &time1, use_tcp ? NULL : &timeout);
    if (ret < 0)
        perror("rtime error");
    else {
        time_t t = time1.tv_sec;
        printf("%s\\n", ctime(&t));
    }

    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.\" .BR netdate (1),
.BR ntpdate (1),
.\" .BR rdate (1),
.BR inetd (8)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" This man page is Copyright (C) 1999 Andi Kleen <ak@muc.de>.
.\"
.\" %%%LICENSE_START(VERBATIM_ONE_PARA)
.\" Permission is granted to distribute possibly modified copies
.\" of this page provided the header is included verbatim,
.\" and in case of nontrivial modification author and date
.\" of the modification is added to the header.
.\" %%%LICENSE_END
.\"
.\" $Id: rtnetlink.3,v 1.2 1999/05/18 10:35:10 freitag Exp $
.\"
.TH RTNETLINK 3 2014-09-06 "GNU" "Linux Programmer's Manual"
.SH NAME
rtnetlink \- macros to manipulate rtnetlink messages
.SH SYNOPSIS
.B #include <asm/types.h>
.br
.B #include <linux/netlink.h>
.br
.B #include <linux/rtnetlink.h>
.br
.B #include <sys/socket.h>

.BI "rtnetlink_socket = socket(AF_NETLINK, int " socket_type \
", NETLINK_ROUTE);"
.sp
.BI "int RTA_OK(struct rtattr *" rta ", int " rtabuflen );
.sp
.BI "void *RTA_DATA(struct rtattr *" rta );
.sp
.BI "unsigned int RTA_PAYLOAD(struct rtattr *" rta );
.sp
.BI "struct rtattr *RTA_NEXT(struct rtattr *" rta \
", unsigned int " rtabuflen );
.sp
.BI "unsigned int RTA_LENGTH(unsigned int " length );
.sp
.BI "unsigned int RTA_SPACE(unsigned int "length );
.SH DESCRIPTION
All
.BR rtnetlink (7)
messages consist of a
.BR netlink (7)
message header and appended attributes.
The attributes should be manipulated only using the macros provided here.
.PP
.BI RTA_OK( rta ", " attrlen )
returns true if
.I rta
points to a valid routing attribute;
.I attrlen
is the running length of the attribute buffer.
When not true then you must assume there are no more attributes in the
message, even if
.I attrlen
is nonzero.
.PP
.BI RTA_DATA( rta )
returns a pointer to the start of this attribute's data.
.PP
.BI RTA_PAYLOAD( rta )
returns the length of this attribute's data.
.PP
.BI RTA_NEXT( rta ", " attrlen )
gets the next attribute after
.IR rta .
Calling this macro will update
.IR attrlen .
You should use
.B RTA_OK
to check the validity of the returned pointer.
.PP
.BI RTA_LENGTH( len )
returns the length which is required for
.I len
bytes of data plus the header.
.PP
.BI RTA_SPACE( len )
returns the amount of space which will be needed in a message with
.I len
bytes of data.
.SH CONFORMING TO
These macros are nonstandard Linux extensions.
.SH BUGS
This manual page is incomplete.
.SH EXAMPLE
.\" FIXME . ? would be better to use libnetlink in the EXAMPLE code here
Creating a rtnetlink message to set the MTU of a device:
.nf
    #include <linux/rtnetlink.h>

    ...

    struct {
        struct nlmsghdr  nh;
        struct ifinfomsg if;
        char             attrbuf[512];
    } req;

    struct rtattr *rta;
    unsigned int mtu = 1000;

    int rtnetlink_sk = socket(AF_NETLINK, SOCK_DGRAM, NETLINK_ROUTE);

    memset(&req, 0, sizeof(req));
    req.nh.nlmsg_len = NLMSG_LENGTH(sizeof(struct ifinfomsg));
    req.nh.nlmsg_flags = NLM_F_REQUEST;
    req.nh.nlmsg_type = RTM_NEWLINK;
    req.if.ifi_family = AF_UNSPEC;
    req.if.ifi_index = INTERFACE_INDEX;
    req.if.ifi_change = 0xffffffff; /* ??? */
    rta = (struct rtattr *)(((char *) &req) +
                             NLMSG_ALIGN(req.nh.nlmsg_len));
    rta\->rta_type = IFLA_MTU;
    rta\->rta_len = RTA_LENGTH(sizeof(unsigned int));
    req.n.nlmsg_len = NLMSG_ALIGN(req.nh.nlmsg_len) +
                                  RTA_LENGTH(sizeof(mtu));
    memcpy(RTA_DATA(rta), &mtu, sizeof(mtu));
    send(rtnetlink_sk, &req, req.nh.nlmsg_len, 0);
.fi
.SH SEE ALSO
.BR netlink (3),
.BR netlink (7),
.BR rtnetlink (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 2004 Andries Brouwer <aeb@cwi.nl>.
.\" and Copyright 2008, Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH SCALB 3 2015-03-02 "" "Linux Programmer's Manual"
.SH NAME
scalb, scalbf, scalbl \- multiply floating-point number
by integral power of radix (OBSOLETE)
.SH SYNOPSIS
.B #include <math.h>
.sp
.BI "double scalb(double " x ", double " exp );
.br
.BI "float scalbf(float " x ", float " exp );
.br
.BI "long double scalbl(long double " x ", long double " exp );
.sp
Link with \fI\-lm\fP.
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR scalb ():
.RS 4
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE\ >=\ 500 ||
_XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED
.RE
.br
.BR scalbf (),
.BR scalbl ():
.RS 4
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE\ >=\ 600
.RE
.ad b
.SH DESCRIPTION
These functions multiply their first argument
.I x
by
.B FLT_RADIX
(probably 2)
to the power of
.IR exp ,
that is:
.nf

    x * FLT_RADIX ** exp
.fi

The definition of
.B FLT_RADIX
can be obtained by including
.IR <float.h> .
.\" not in /usr/include but in a gcc lib
.SH RETURN VALUE
On success, these functions return
.IR x
*
.B FLT_RADIX
**
.IR exp .

If
.I x
or
.I exp
is a NaN, a NaN is returned.

If
.I x
is positive infinity (negative infinity),
and
.I exp
is not negative infinity,
positive infinity (negative infinity) is returned.

If
.I x
is +0 (\-0), and
.I exp
is not positive infinity, +0 (\-0) is returned.

If
.I x
is zero, and
.I exp
is positive infinity,
a domain error occurs, and
a NaN is returned.

If
.I x
is an infinity,
and
.I exp
is negative infinity,
a domain error occurs, and
a NaN is returned.

If the result overflows,
a range error occurs,
and the functions return
.BR HUGE_VAL ,
.BR HUGE_VALF ,
or
.BR HUGE_VALL ,
respectively, with a sign the same as
.IR x .

If the result underflows,
a range error occurs,
and the functions return zero, with a sign the same as
.IR x .
.SH ERRORS
See
.BR math_error (7)
for information on how to determine whether an error has occurred
when calling these functions.
.PP
The following errors can occur:
.TP
Domain error: \fIx\fP is 0, and \fIexp\fP is positive infinity, \
or \fIx\fP is positive infinity and \fIexp\fP is negative infinity \
and the other argument is not a NaN
.\" .I errno
.\" is set to
.\" .BR EDOM .
An invalid floating-point exception
.RB ( FE_INVALID )
is raised.
.TP
Range error, overflow
.\" .I errno
.\" is set to
.\" .BR ERANGE .
An overflow floating-point exception
.RB ( FE_OVERFLOW )
is raised.
.TP
Range error, underflow
.\" .I errno
.\" is set to
.\" .BR ERANGE .
An underflow floating-point exception
.RB ( FE_UNDERFLOW )
is raised.
.PP
These functions do not set
.IR errno .
.\" FIXME . Is it intentional that these functions do not set errno?
.\" Bug raised: http://sources.redhat.com/bugzilla/show_bug.cgi?id=6803
.\" Bug raised: http://sources.redhat.com/bugzilla/show_bug.cgi?id=6804
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw28 lb lb
l l l.
Interface	Attribute	Value
T{
.BR scalb (),
.BR scalbf (),
.BR scalbl ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
.BR scalb ()
is specified in POSIX.1-2001, but marked obsolescent.
POSIX.1-2008 removes the specification of
.BR scalb (),
recommending the use of
.BR scalbln (3),
.BR scalblnf (3),
or
.BR scalblnl (3)
instead.
The
.BR scalb ()
function is from 4.3BSD.

.BR scalbf ()
and
.BR scalbl ()
are unstandardized;
.BR scalbf ()
is nevertheless present on several other systems
.\" Looking at header files: scalbf() is present on the
.\" BSDs, Tru64, HP-UX 11, Irix 6.5; scalbl() is on HP-UX 11 and Tru64.
.SH SEE ALSO
.BR ldexp (3),
.BR scalbln (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 2004 Andries Brouwer <aeb@cwi.nl>.
.\" and Copyright 2008, Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH SCALBLN 3 2015-04-19 "" "Linux Programmer's Manual"
.SH NAME
scalbn, scalbnf, scalbnl, scalbln, scalblnf, scalblnl \-
multiply floating-point number by integral power of radix
.SH SYNOPSIS
.B #include <math.h>
.sp
.BI "double scalbln(double " x ", long int " exp );
.br
.BI "float scalblnf(float " x ", long int " exp );
.br
.BI "long double scalblnl(long double " x ", long int " exp );
.sp
.BI "double scalbn(double " x ", int " exp );
.br
.BI "float scalbnf(float " x ", int " exp );
.br
.BI "long double scalbnl(long double " x ", int " exp );
.sp
Link with \fI\-lm\fP.
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR scalbln (),
.BR scalblnf (),
.BR scalblnl ():
.RS
_XOPEN_SOURCE\ >=\ 600 || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.br
.BR scalbn (),
.BR scalbnf (),
.BR scalbnl ():
.RS
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE\ >=\ 600 || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.ad b
.SH DESCRIPTION
These functions multiply their first argument
.I x
by
.B FLT_RADIX
(probably 2)
to the power of
.IR exp ,
that is:
.nf

    x * FLT_RADIX ** exp
.fi

The definition of
.B FLT_RADIX
can be obtained by including
.IR <float.h> .
.\" not in /usr/include but in a gcc lib
.SH RETURN VALUE
On success, these functions return
.IR x
*
.B FLT_RADIX
**
.IR exp .

If
.I x
is a NaN, a NaN is returned.

If
.I x
is positive infinity (negative infinity),
positive infinity (negative infinity) is returned.

If
.I x
is +0 (\-0), +0 (\-0) is returned.

If the result overflows,
a range error occurs,
and the functions return
.BR HUGE_VAL ,
.BR HUGE_VALF ,
or
.BR HUGE_VALL ,
respectively, with a sign the same as
.IR x .

If the result underflows,
a range error occurs,
and the functions return zero, with a sign the same as
.IR x .
.SH ERRORS
See
.BR math_error (7)
for information on how to determine whether an error has occurred
when calling these functions.
.PP
The following errors can occur:
.TP
Range error, overflow
.\" .I errno
.\" is set to
.\" .BR ERANGE .
An overflow floating-point exception
.RB ( FE_OVERFLOW )
is raised.
.TP
Range error, underflow
.\" .I errno
.\" is set to
.\" .BR ERANGE .
An underflow floating-point exception
.RB ( FE_UNDERFLOW )
is raised.
.PP
These functions do not set
.IR errno .
.\" FIXME . Is it intentional that these functions do not set errno?
.\" Bug raised: http://sources.redhat.com/bugzilla/show_bug.cgi?id=6803
.SH VERSIONS
These functions first appeared in glibc in version 2.1.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw33 lb lb
l l l.
Interface	Attribute	Value
T{
.BR scalbn (),
.BR scalbnf (),
.BR scalbnl (),
.br
.BR scalbln (),
.BR scalblnf (),
.BR scalblnl ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C99, POSIX.1-2001, POSIX.1-2008.
.SH NOTES
These functions differ from the obsolete functions described in
.BR scalb (3)
in the type of their second argument.
The functions described on this page have a second argument
of an integral type, while those in
.BR scalb (3)
have a second argument of type
.IR double .

If
.B FLT_RADIX
equals 2 (which is usual), then
.BR scalbn ()
is equivalent to
.BR ldexp (3).
.SH SEE ALSO
.BR ldexp (3),
.BR scalb (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified Sat Jul 24 18:26:16 1993 by Rik Faith (faith@cs.unc.edu)
.\" Modified Thu Apr 11 17:11:33 1996 by Andries Brouwer (aeb@cwi.nl):
.\"     Corrected type of compar routines, as suggested by
.\"     Miguel Barreiro (enano@avalon.yaix.es).  Added example.
.\" Modified Sun Sep 24 20:15:46 2000 by aeb, following Petter Reinholdtsen.
.\" Modified 2001-12-26 by aeb, following Joey. Added versionsort.
.\"
.\" The pieces on scandirat(3) were copyright and licensed as follows.
.\"
.\" Copyright (c) 2012, Mark R. Bannister <cambridge@users.sourceforge.net>
.\"        based on text in mkfifoat.3 Copyright (c) 2006, Michael Kerrisk
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.TH SCANDIR 3  2015-04-19 "GNU" "Linux Programmer's Manual"
.SH NAME
scandir, scandirat, alphasort, versionsort \- scan
a directory for matching entries
.SH SYNOPSIS
.nf
.B #include <dirent.h>
.sp
.BI "int scandir(const char *" dirp ", struct dirent ***" namelist ,
.RS
.BI "int (*" filter ")(const struct dirent *),"
.BI "int (*" compar ")(const struct dirent **, const struct dirent **));"
.RE
.sp
.BI "int alphasort(const struct dirent **" a ", const struct dirent **" b );
.sp
.BI "int versionsort(const struct dirent **" a ", const struct dirent **" b );

.BR "#include <fcntl.h>" "          /* Definition of AT_* constants */"
.B #include <dirent.h>
.sp
.fi
.BI "int scandirat(int " dirfd ", const char *" dirp ","
.BI "struct dirent ***" namelist ,
.nf
.RS
.BI "int (*" filter ")(const struct dirent *),"
.BI "int (*" compar ")(const struct dirent **, const struct dirent **));"
.RE
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR scandir (),
.BR alphasort ():
.br
.RS 4
.PD 0
.ad b
_BSD_SOURCE || _SVID_SOURCE
.br
|| /* Since glibc 2.10: */
.RS 4
(_POSIX_C_SOURCE\ >=\ 200809L || _XOPEN_SOURCE\ >=\ 700)
.RE
.PD
.RE
.sp
.BR versionsort ():
_GNU_SOURCE
.sp
.BR scandirat ():
_GNU_SOURCE
.SH DESCRIPTION
The
.BR scandir ()
function scans the directory \fIdirp\fP, calling
\fIfilter\fP() on each directory entry.
Entries for which
\fIfilter\fP() returns nonzero are stored in strings allocated via
.BR malloc (3),
sorted using
.BR qsort (3)
with the comparison
function \fIcompar\fP(), and collected in array \fInamelist\fP
which is allocated via
.BR malloc (3).
If \fIfilter\fP is NULL, all entries are selected.
.LP
The
.BR alphasort ()
and
.BR versionsort ()
functions can be used as the comparison function
.IR compar ().
The former sorts directory entries using
.BR strcoll (3),
the latter using
.BR strverscmp (3)
on the strings \fI(*a)\->d_name\fP and \fI(*b)\->d_name\fP.
.SS scandirat()
The
.BR scandirat ()
function operates in exactly the same way as
.BR scandir (),
except for the differences described here.

If the pathname given in
.I dirp
is relative, then it is interpreted relative to the directory
referred to by the file descriptor
.I dirfd
(rather than relative to the current working directory of
the calling process, as is done by
.BR scandir ()
for a relative pathname).

If
.I dirp
is relative and
.I dirfd
is the special value
.BR AT_FDCWD ,
then
.I dirp
is interpreted relative to the current working
directory of the calling process (like
.BR scandir ()).

If
.I dirp
is absolute, then
.I dirfd
is ignored.
.PP
See
.BR openat (2)
for an explanation of the need for
.BR scandirat ().
.SH RETURN VALUE
The
.BR scandir ()
function returns the number of directory entries
selected.
On error, \-1 is returned, with
.I errno
set to indicate the cause of the error.
.PP
The
.BR alphasort ()
and
.BR versionsort ()
functions return an integer less than, equal to,
or greater than zero if the first argument is considered to be
respectively less than, equal to, or greater than the second.
.SH ERRORS
.TP
.B ENOENT
The path in \fIdirp\fR does not exist.
.TP
.B ENOMEM
Insufficient memory to complete the operation.
.TP
.B ENOTDIR
The path in \fIdirp\fR is not a directory.
.PP
The following additional errors can occur for
.BR scandirat ():
.TP
.B EBADF
.I dirfd
is not a valid file descriptor.
.TP
.B ENOTDIR
.I dirp
is a relative path and
.I dirfd
is a file descriptor referring to a file other than a directory.
.SH VERSIONS
.BR versionsort ()
was added to glibc in version 2.1.

.BR scandirat ()
was added to glibc in version 2.15.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw26 lb lb
l l l.
Interface	Attribute	Value
T{
.BR scandir (),
.BR scandirat ()
T}	Thread safety	MT-Safe
T{
.BR alphasort (),
.BR versionsort ()
T}	Thread safety	MT-Safe locale
.TE

.SH CONFORMING TO
.BR alphasort (),
.BR scandir ():
4.3BSD, POSIX.1-2008.

.BR versionsort ()
and
.BR scandirat ()
are GNU extensions.
.\" .LP
.\" The functions
.\" .BR scandir ()
.\" and
.\" .BR alphasort ()
.\" are from 4.3BSD, and have been available under Linux since libc4.
.\" Libc4 and libc5 use the more precise prototype
.\" .sp
.\" .nf
.\"    int alphasort(const struct dirent ** a,
.\"                  const struct dirent **b);
.\" .fi
.\" .sp
.\" but glibc 2.0 returns to the imprecise BSD prototype.
.SH NOTES
Since glibc 2.1,
.BR alphasort ()
calls
.BR strcoll (3);
earlier it used
.BR strcmp (3).

Before glibc 2.10, the two arguments of
.BR alphasort ()
and
.BR versionsort ()
were typed as
.IR "const void\ *" .
When
.BR alphasort ()
was standardized in POSIX.1-2008,
the argument type was specified as the type-safe
.IR "const struct dirent\ **",
and glibc 2.10 changed the definition of
.BR alphasort ()
(and the nonstandard
.BR versionsort ())
to match the standard.
.SH EXAMPLE
.nf
#define _SVID_SOURCE
/* print files in current directory in reverse order */
#include <dirent.h>

int
main(void)
{
    struct dirent **namelist;
    int n;

    n = scandir(".", &namelist, NULL, alphasort);
    if (n < 0)
        perror("scandir");
    else {
        while (n\-\-) {
            printf("%s\en", namelist[n]\->d_name);
            free(namelist[n]);
        }
        free(namelist);
    }
}
.fi
.SH SEE ALSO
.BR closedir (3),
.BR fnmatch (3),
.BR opendir (3),
.BR readdir (3),
.BR rewinddir (3),
.BR seekdir (3),
.BR strcmp (3),
.BR strcoll (3),
.BR strverscmp (3),
.BR telldir (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1990, 1991 The Regents of the University of California.
.\" All rights reserved.
.\"
.\" This code is derived from software contributed to Berkeley by
.\" Chris Torek and the American National Standards Committee X3,
.\" on Information Processing Systems.
.\"
.\" %%%LICENSE_START(BSD_4_CLAUSE_UCB)
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\" %%%LICENSE_END
.\"
.\"     @(#)scanf.3	6.14 (Berkeley) 1/8/93
.\"
.\" Converted for Linux, Mon Nov 29 15:22:01 1993, faith@cs.unc.edu
.\" modified to resemble the GNU libio setup used in the Linux libc
.\" used in versions 4.x (x>4) and 5   Helmut.Geyer@iwr.uni-heidelberg.de
.\" Modified, aeb, 970121
.\" 2005-07-14, mtk, added description of %n$ form; various text
.\"	incorporated from the GNU C library documentation ((C) The
.\"	Free Software Foundation); other parts substantially rewritten.
.\"
.\" 2008-06-23, mtk
.\"     Add ERRORS section.
.\"     Document the 'a' and 'm' modifiers for dynamic string allocation.
.\"
.TH SCANF 3  2015-04-19 "GNU" "Linux Programmer's Manual"
.SH NAME
scanf, fscanf, sscanf, vscanf, vsscanf, vfscanf \- input format conversion
.SH SYNOPSIS
.nf
.B #include <stdio.h>

.BI "int scanf(const char *" format ", ...);"
.BI "int fscanf(FILE *" stream ", const char *" format ", ...);"
.BI "int sscanf(const char *" str ", const char *" format ", ...);"
.sp
.B #include <stdarg.h>

.BI "int vscanf(const char *" format ", va_list " ap );
.BI "int vsscanf(const char *" str ", const char *" format ", va_list " ap );
.BI "int vfscanf(FILE *" stream ", const char *" format ", va_list " ap );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.ad l
.sp
.BR vscanf (),
.BR vsscanf (),
.BR vfscanf ():
.RS 4
_XOPEN_SOURCE\ >=\ 600 || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I "cc -std=c99"
.ad
.RE
.SH DESCRIPTION
The
.BR scanf ()
family of functions scans input according to
.I format
as described below.
This format may contain
.IR "conversion specifications" ;
the results from such conversions, if any,
are stored in the locations pointed to by the
.I pointer
arguments that follow
.IR format .
Each
.I pointer
argument must be of a type that is appropriate for the value returned
by the corresponding conversion specification.

If the number of conversion specifications in
.I format
exceeds the number of
.I pointer
arguments, the results are undefined.
If the number of
.I pointer
arguments exceeds the number of conversion specifications, then the excess
.I pointer
arguments are evaluated, but are otherwise ignored.

The
.BR scanf ()
function reads input from the standard input stream
.IR stdin ,
.BR fscanf ()
reads input from the stream pointer
.IR stream ,
and
.BR sscanf ()
reads its input from the character string pointed to by
.IR str .
.PP
The
.BR vfscanf ()
function is analogous to
.BR vfprintf (3)
and reads input from the stream pointer
.I stream
using a variable argument list of pointers (see
.BR stdarg (3).
The
.BR vscanf ()
function scans a variable argument list from the standard input and the
.BR vsscanf ()
function scans it from a string; these are analogous to the
.BR vprintf (3)
and
.BR vsprintf (3)
functions respectively.
.PP
The
.I format
string consists of a sequence of
.I directives
which describe how to process the sequence of input characters.
If processing of a directive fails, no further input is read, and
.BR scanf ()
returns.
A "failure" can be either of the following:
.IR "input failure" ,
meaning that input characters were unavailable, or
.IR "matching failure" ,
meaning that the input was inappropriate (see below).

A directive is one of the following:
.TP
\(bu
A sequence of white-space characters (space, tab, newline, etc.; see
.BR isspace (3)).
This directive matches any amount of white space,
including none, in the input.
.TP
\(bu
An ordinary character (i.e., one other than white space or \(aq%\(aq).
This character must exactly match the next character of input.
.TP
\(bu
A conversion specification,
which commences with a \(aq%\(aq (percent) character.
A sequence of characters from the input is converted according to
this specification, and the result is placed in the corresponding
.I pointer
argument.
If the next item of input does not match the conversion specification,
the conversion fails\(emthis is a
.IR "matching failure" .
.PP
Each
.I conversion specification
in
.I format
begins with either the character \(aq%\(aq or the character sequence
"\fB%\fP\fIn\fP\fB$\fP"
(see below for the distinction) followed by:
.TP
\(bu
An optional \(aq*\(aq assignment-suppression character:
.BR scanf ()
reads input as directed by the conversion specification,
but discards the input.
No corresponding
.I pointer
argument is required, and this specification is not
included in the count of successful assignments returned by
.BR scanf ().
.TP
\(bu
An optional \(aqm\(aq character.
This is used with string conversions
.RI ( %s ,
.IR %c ,
.IR %[ ),
and relieves the caller of the
need to allocate a corresponding buffer to hold the input: instead,
.BR scanf ()
allocates a buffer of sufficient size,
and assigns the address of this buffer to the corresponding
.I pointer
argument, which should be a pointer to a
.I "char\ *"
variable (this variable does not need to be initialized before the call).
The caller should subsequently
.BR free (3)
this buffer when it is no longer required.
.TP
\(bu
An optional decimal integer which specifies the
.IR "maximum field width" .
Reading of characters stops either when this maximum is reached or
when a nonmatching character is found, whichever happens first.
Most conversions discard initial white space characters (the exceptions
are noted below),
and these discarded characters don't count toward the maximum field width.
String input conversions store a terminating null byte (\(aq\\0\(aq)
to mark the end of the input;
the maximum field width does not include this terminator.
.TP
\(bu
An optional
.IR "type modifier character" .
For example, the
.B l
type modifier is used with integer conversions such as
.B %d
to specify that the corresponding
.I pointer
argument refers to a
.I "long int"
rather than a pointer to an
.IR int .
.TP
\(bu
A
.I "conversion specifier"
that specifies the type of input conversion to be performed.
.PP
The conversion specifications in
.I format
are of two forms, either beginning with \(aq%\(aq or beginning with
"\fB%\fP\fIn\fP\fB$\fP".
The two forms should not be mixed in the same
.I format
string, except that a string containing
"\fB%\fP\fIn\fP\fB$\fP"
specifications can include
.B %%
and
.BR %* .
If
.I format
contains \(aq%\(aq
specifications, then these correspond in order with successive
.I pointer
arguments.
In the
"\fB%\fP\fIn\fP\fB$\fP"
form (which is specified in POSIX.1-2001, but not C99),
.I n
is a decimal integer that specifies that the converted input should
be placed in the location referred to by the
.IR n -th
.I pointer
argument following
.IR format .
.SS Conversions
The following
.I "type modifier characters"
can appear in a conversion specification:
.TP
.B h
Indicates that the conversion will be one of
\fBd\fP, \fBi\fP, \fBo\fP, \fBu\fP, \fBx\fP, \fBX\fP, or \fBn\fP
and the next pointer is a pointer to a
.I short int
or
.I unsigned short int
(rather than
.IR int ).
.TP
.B hh
As for
.BR h ,
but the next pointer is a pointer to a
.I signed char
or
.IR "unsigned char" .
.TP
.B j
As for
.BR h ,
but the next pointer is a pointer to an
.I intmax_t
or a
.IR uintmax_t .
This modifier was introduced in C99.
.TP
.B l
Indicates either that the conversion will be one of
\fBd\fP, \fBi\fP, \fBo\fP, \fBu\fP, \fBx\fP, \fBX\fP, or \fBn\fP
and the next pointer is a pointer to a
.I long int
or
.I unsigned long int
(rather than
.IR int ),
or that the conversion will be one of
\fBe\fP, \fBf\fP, or \fBg\fP
and the next pointer is a pointer to
.I double
(rather than
.IR float ).
Specifying two
.B l
characters is equivalent to
.BR L .
If used with
.B %c
or
.BR %s ,
the corresponding parameter is considered
as a pointer to a wide character or wide-character string respectively.
.\" This use of l was introduced in Amendment 1 to ISO C90.
.TP
.B L
Indicates that the conversion will be either
\fBe\fP, \fBf\fP, or \fBg\fP
and the next pointer is a pointer to
.I "long double"
or the conversion will be
\fBd\fP, \fBi\fP, \fBo\fP, \fBu\fP, or \fBx\fP
and the next pointer is a pointer to
.IR "long long" .
.\" MTK, Jul 05: The following is no longer true for modern
.\" ANSI C (i.e., C99):
.\" (Note that long long is not an
.\" ANSI C
.\" type. Any program using this will not be portable to all
.\" architectures).
.TP
.B q
equivalent to
.BR L .
This specifier does not exist in ANSI C.
.TP
.B t
As for
.BR h ,
but the next pointer is a pointer to a
.IR ptrdiff_t .
This modifier was introduced in C99.
.TP
.B z
As for
.BR h ,
but the next pointer is a pointer to a
.IR size_t .
This modifier was introduced in C99.
.PP
The following
.I "conversion specifiers"
are available:
.TP
.B %
Matches a literal \(aq%\(aq.
That is,
.B %\&%
in the format string matches a
single input \(aq%\(aq character.
No conversion is done (but initial white space characters are discarded),
and assignment does not occur.
.TP
.B d
Matches an optionally signed decimal integer;
the next pointer must be a pointer to
.IR int .
.TP
.B D
Equivalent to
.IR ld ;
this exists only for backward compatibility.
(Note: thus only in libc4.
In libc5 and glibc the
.B %D
is silently ignored, causing old programs to fail mysteriously.)
.TP
.B i
Matches an optionally signed integer; the next pointer must be a pointer to
.IR int .
The integer is read in base 16 if it begins with
.I 0x
or
.IR 0X ,
in base 8 if it begins with
.IR 0 ,
and in base 10 otherwise.
Only characters that correspond to the base are used.
.TP
.B o
Matches an unsigned octal integer; the next pointer must be a pointer to
.IR "unsigned int" .
.TP
.B u
Matches an unsigned decimal integer; the next pointer must be a
pointer to
.IR "unsigned int" .
.TP
.B x
Matches an unsigned hexadecimal integer; the next pointer must
be a pointer to
.IR "unsigned int" .
.TP
.B X
Equivalent to
.BR x .
.TP
.B f
Matches an optionally signed floating-point number; the next pointer must
be a pointer to
.IR float .
.TP
.B e
Equivalent to
.BR f .
.TP
.B g
Equivalent to
.BR f .
.TP
.B E
Equivalent to
.BR f .
.TP
.B a
(C99) Equivalent to
.BR f .
.TP
.B s
Matches a sequence of non-white-space characters;
the next pointer must be a pointer to character array that is
long enough to hold the input sequence and
the terminating null byte (\(aq\\0\(aq), which is added automatically.
The input string stops at white space or at the maximum field
width, whichever occurs first.
.TP
.B c
Matches a sequence of characters whose length is specified by the
.I maximum field width
(default 1); the next pointer must be a pointer to
.IR char ,
and there must be enough room for all the characters
(no terminating null byte is added).
The usual skip of leading white space is suppressed.
To skip white space first, use an explicit space in the format.
.TP
.B \&[
Matches a nonempty sequence of characters from the specified set of
accepted characters; the next pointer must be a pointer to
.IR char ,
and there must be enough room for all the characters in the string, plus a
terminating null byte.
The usual skip of leading white space is suppressed.
The string is to be made up of characters in (or not in) a particular set;
the set is defined by the characters between the open bracket
.B [
character and a close bracket
.B ]
character.
The set
.I excludes
those characters if the first character after the open bracket is a
circumflex
.RB ( ^ ).
To include a close bracket in the set, make it the first character after
the open bracket or the circumflex; any other position will end the set.
The hyphen character
.B \-
is also special; when placed between two other characters, it adds all
intervening characters to the set.
To include a hyphen, make it the last
character before the final close bracket.
For instance,
.B [^]0\-9\-]
means
the set "everything except close bracket, zero through nine, and hyphen".
The string ends with the appearance of a character not in the (or, with a
circumflex, in) set or when the field width runs out.
.TP
.B p
Matches a pointer value (as printed by
.B %p
in
.BR printf (3);
the next pointer must be a pointer to a pointer to
.IR void .
.TP
.B n
Nothing is expected; instead, the number of characters consumed thus far
from the input is stored through the next pointer, which must be a pointer
to
.IR int .
This is
.I not
a conversion and does
.I not
increase the count returned by the function.
The assignment can be suppressed with the
.B *
assignment-suppression character, but the effect on the
return value is undefined.
Therefore
.B %*n
conversions should not be used.
.SH RETURN VALUE
These functions return the number of input items
successfully matched and assigned,
which can be fewer than provided for,
or even zero in the event of an early matching failure.

The value
.B EOF
is returned if the end of input is reached before either the first
successful conversion or a matching failure occurs.
.B EOF
is also returned if a read error occurs,
in which case the error indicator for the stream (see
.BR ferror (3))
is set, and
.I errno
is set to indicate the error.
.SH ERRORS
.TP
.B EAGAIN
The file descriptor underlying
.I stream
is marked nonblocking, and the read operation would block.
.TP
.B EBADF
The file descriptor underlying
.I stream
is invalid, or not open for reading.
.TP
.B EILSEQ
Input byte sequence does not form a valid character.
.TP
.B EINTR
The read operation was interrupted by a signal; see
.BR signal (7).
.TP
.B EINVAL
Not enough arguments; or
.I format
is NULL.
.TP
.B ENOMEM
Out of memory.
.TP
.B ERANGE
The result of an integer conversion would exceed the size
that can be stored in the corresponding integer type.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw20 lb lb
l l l.
Interface	Attribute	Value
T{
.BR scanf (),
.BR fscanf (),
.br
.BR sscanf (),
.BR vscanf (),
.br
.BR vsscanf (),
.BR vfscanf ()
T}	Thread safety	MT-Safe locale
.TE

.SH CONFORMING TO
The functions
.BR fscanf (),
.BR scanf (),
and
.BR sscanf ()
conform to C89 and C99 and POSIX.1-2001.
These standards do not specify the
.B ERANGE
error.
.PP
The
.B q
specifier is the 4.4BSD notation for
.IR "long long" ,
while
.B ll
or the usage of
.B L
in integer conversions is the GNU notation.
.PP
The Linux version of these functions is based on the
.I GNU
.I libio
library.
Take a look at the
.I info
documentation of
.I GNU
.I libc (glibc-1.08)
for a more concise description.
.SH NOTES
.SS The 'a' assignment-allocation modifier
Originally, the GNU C library supported dynamic allocation for string inputs
(as a nonstandard extension) via the
.B a
character.
(This feature is present at least as far back as glibc 2.0.)
Thus, one could write the following to have
.BR scanf ()
allocate a buffer for an input string,
with a pointer to that buffer being returned in
.IR *buf :

    char *buf;
    scanf("%as", &buf);
.PP
The use of the letter
.B a
for this purpose was problematic, since
.B a
is also specified by the ISO C standard as a synonym for
.B f
(floating-point input).
POSIX.1-2008 instead specifies the
.B m
modifier for assignment allocation (as documented in DESCRIPTION, above).
.PP
Note that the
.B a
modifier is not available if the program is compiled with
.I "gcc -std=c99"
or
.IR "gcc -D_ISOC99_SOURCE"
(unless
.B _GNU_SOURCE
is also specified), in which case the
.B a
is interpreted as a specifier for floating-point numbers (see above).

Support for the
.B m
modifier was added to glibc starting with version 2.7,
and new programs should use that modifier instead of
.BR a .

As well as being standardized by POSIX, the
.B m
modifier has the following further advantages over
the use of
.BR a:
.IP * 2
It may also be applied to
.B %c
conversion specifiers (e.g.,
.BR %3mc ).
.IP *
It avoids ambiguity with respect to the
.B %a
floating-point conversion specifier (and is unaffected by
.IR "gcc -std=c99"
etc.).
.SH BUGS
All functions are fully C89 conformant, but provide the
additional specifiers
.B q
and
.B a
as well as an additional behavior of the
.B L
and
.B l
specifiers.
The latter may be considered to be a bug, as it changes the
behavior of specifiers defined in C89.
.PP
Some combinations of the type modifiers and conversion
specifiers defined by ANSI C do not make sense
(e.g.,
.BR "%Ld" ).
While they may have a well-defined behavior on Linux, this need not
to be so on other architectures.
Therefore it usually is better to use
modifiers that are not defined by ANSI C at all, that is, use
.B q
instead of
.B L
in combination with
\fBd\fP, \fBi\fP, \fBo\fP, \fBu\fP, \fBx\fP, and \fBX\fP
conversions or
.BR ll .
.PP
The usage of
.B q
is not the same as on 4.4BSD,
as it may be used in float conversions equivalently to
.BR L .
.SH EXAMPLE
To use the dynamic allocation conversion specifier, specify
.B m
as a length modifier (thus
.B %ms
or
\fB%m[\fP\fIrange\fP\fB]\fP).
The caller must
.BR free (3)
the returned string, as in the following example:
.in +4n
.nf

char *p;
int n;

errno = 0;
n = scanf("%m[a-z]", &p);
if (n == 1) {
    printf("read: %s\\n", p);
    free(p);
} else if (errno != 0) {
    perror("scanf");
} else {
    fprintf(stderr, "No matching characters\\n");
}
.fi
.in
.PP
As shown in the above example, it is necessary to call
.BR free (3)
only if the
.BR scanf ()
call successfully read a string.
.SH SEE ALSO
.BR getc (3),
.BR printf (3),
.BR setlocale (3),
.BR strtod (3),
.BR strtol (3),
.BR strtoul (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2008, Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH SCHED_GETCPU 3 2015-03-02 "Linux" "Linux Programmer's Manual"
.SH NAME
sched_getcpu \- determine CPU on which the calling thread is running
.SH SYNOPSIS
.nf
.B #include <sched.h>

.B int sched_getcpu(void);
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR sched_getcpu ():
.ad l
.RS 4
.PD 0
.TP 4
Since glibc 2.14:
_GNU_SOURCE
.TP 4
Before glibc 2.14:
_BSD_SOURCE || _SVID_SOURCE
    /* _GNU_SOURCE also suffices */
.PD
.RE
.ad b
.SH DESCRIPTION
.BR sched_getcpu ()
returns the number of the CPU on which the calling thread is currently executing.
.SH RETURN VALUE
On success,
.BR sched_getcpu ()
returns a nonnegative CPU number.
On error, \-1 is returned and
.I errno
is set to indicate the error.
.SH ERRORS
.TP
.B ENOSYS
This kernel does not implement
.BR getcpu (2).
.SH VERSIONS
This function is available since glibc 2.6.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR sched_getcpu ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
.BR sched_getcpu ()
is glibc-specific.
.SH NOTES
The call
.in +4n
.nf

cpu = sched_getcpu();

.fi
.in
is equivalent to the following
.BR getcpu (2)
call:
.in +4n
.nf

int c, s;
s = getcpu(&c, NULL, NULL);
cpu = (s == \-1) ? s : c;
.fi
.in
.SH SEE ALSO
.BR getcpu (2),
.BR sched (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified Sat Jul 24 18:25:21 1993 by Rik Faith (faith@cs.unc.edu)
.\"
.TH SEEKDIR 3  2015-03-02 "" "Linux Programmer's Manual"
.SH NAME
seekdir \- set the position of the next readdir() call in the directory
stream.
.SH SYNOPSIS
.nf
.B #include <dirent.h>
.sp
.BI "void seekdir(DIR *" dirp ", long " loc );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR seekdir ():
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE
.SH DESCRIPTION
The
.BR seekdir ()
function sets the location in the directory stream
from which the next
.BR readdir (2)
call will start.
The
.I loc
argument should be a value returned by a previous call to
.BR telldir (3).
.SH RETURN VALUE
The
.BR seekdir ()
function returns no value.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR seekdir ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
4.3BSD, POSIX.1-2001.
.SH NOTES
In glibc up to version 2.1.1, the type of the
.I loc
argument was
.IR off_t .
POSIX.1-2001 specifies
.IR long ,
and this is the type used since glibc 2.1.2.
See
.BR telldir (3)
for information on why you should be careful in making any
assumptions about the value in this argument.
.SH SEE ALSO
.BR lseek (2),
.BR closedir (3),
.BR opendir (3),
.BR readdir (3),
.BR rewinddir (3),
.BR scandir (3),
.BR telldir (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
'\" t
.\" Copyright (C) 2006 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH SEM_CLOSE 3 2012-05-13 "Linux" "Linux Programmer's Manual"
.SH NAME
sem_close \- close a named semaphore
.SH SYNOPSIS
.nf
.B #include <semaphore.h>
.sp
.BI "int sem_close(sem_t *" sem );
.fi
.sp
Link with \fI\-pthread\fP.
.SH DESCRIPTION
.BR sem_close ()
closes the named semaphore referred to by
.IR sem ,
allowing any resources that the system has allocated to
the calling process for this semaphore to be freed.
.SH RETURN VALUE
On success
.BR sem_close ()
returns 0; on error, \-1 is returned, with
.I errno
set to indicate the error.
.SH ERRORS
.TP
.B EINVAL
.I sem
is not a valid semaphore.
.SH CONFORMING TO
POSIX.1-2001.
.SH NOTES
All open named semaphores are automatically closed on process
termination, or upon
.BR execve (2).
.SH SEE ALSO
.BR sem_getvalue (3),
.BR sem_open (3),
.BR sem_post (3),
.BR sem_unlink (3),
.BR sem_wait (3),
.BR sem_overview (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
'\" t
.\" Copyright (C) 2006 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH SEM_DESTROY 3 2015-03-02 "Linux" "Linux Programmer's Manual"
.SH NAME
sem_destroy \- destroy an unnamed semaphore
.SH SYNOPSIS
.nf
.B #include <semaphore.h>
.sp
.BI "int sem_destroy(sem_t *" sem );
.fi
.sp
Link with \fI\-pthread\fP.
.SH DESCRIPTION
.BR sem_destroy ()
destroys the unnamed semaphore at the address pointed to by
.IR sem .

Only a semaphore that has been initialized by
.BR sem_init (3)
should be destroyed using
.BR sem_destroy ().

Destroying a semaphore that other processes or threads are
currently blocked on (in
.BR sem_wait (3))
produces undefined behavior.

Using a semaphore that has been destroyed produces undefined results,
until the semaphore has been reinitialized using
.BR sem_init (3).
.SH RETURN VALUE
.BR sem_destroy ()
returns 0 on success;
on error, \-1 is returned, and
.I errno
is set to indicate the error.
.SH ERRORS
.TP
.B EINVAL
.I sem
is not a valid semaphore.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR sem_destroy ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
POSIX.1-2001.
.SH NOTES
An unnamed semaphore should be destroyed with
.BR sem_destroy ()
before the memory in which it is located is deallocated.
Failure to do this can result in resource leaks on some implementations.
.\" But not on NPTL, where sem_destroy () is a no-op..
.SH SEE ALSO
.BR sem_init (3),
.BR sem_post (3),
.BR sem_wait (3),
.BR sem_overview (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
'\" t
.\" Copyright (C) 2006 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH SEM_GETVALUE 3 2015-03-02 "Linux" "Linux Programmer's Manual"
.SH NAME
sem_getvalue \- get the value of a semaphore
.SH SYNOPSIS
.nf
.B #include <semaphore.h>
.sp
.BI "int sem_getvalue(sem_t *" sem ", int *" sval );
.fi
.sp
Link with \fI\-pthread\fP.
.SH DESCRIPTION
.BR sem_getvalue ()
places the current value of the semaphore pointed to
.I sem
into the integer pointed to by
.IR sval .

If one or more processes or threads are blocked
waiting to lock the semaphore with
.BR sem_wait (3),
POSIX.1-2001 permits two possibilities for the value returned in
.IR sval :
either 0 is returned;
or a negative number whose absolute value is the count
of the number of processes and threads currently blocked in
.BR sem_wait (3).
Linux adopts the former behavior.
.SH RETURN VALUE
.BR sem_getvalue ()
returns 0 on success;
on error, \-1 is returned and
.I errno
is set to indicate the error.
.SH ERRORS
.TP
.B EINVAL
.I sem
is not a valid semaphore.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR sem_getvalue ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
POSIX.1-2001.
.SH NOTES
The value of the semaphore may already have changed by the time
.BR sem_getvalue ()
returns.
.SH SEE ALSO
.BR sem_post (3),
.BR sem_wait (3),
.BR sem_overview (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
'\" t
.\" Copyright (C) 2006 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH SEM_INIT 3 2015-03-02 "Linux" "Linux Programmer's Manual"
.SH NAME
sem_init \- initialize an unnamed semaphore
.SH SYNOPSIS
.nf
.B #include <semaphore.h>
.sp
.BI "int sem_init(sem_t *" sem ", int " pshared ", unsigned int " value );
.fi
.sp
Link with \fI\-pthread\fP.
.SH DESCRIPTION
.BR sem_init ()
initializes the unnamed semaphore at the address pointed to by
.IR sem .
The
.I value
argument specifies the initial value for the semaphore.

The
.I pshared
argument indicates whether this semaphore is to be shared
between the threads of a process, or between processes.

If
.I pshared
has the value 0,
then the semaphore is shared between the threads of a process,
and should be located at some address that is visible to all threads
(e.g., a global variable, or a variable allocated dynamically on
the heap).

If
.I pshared
is nonzero, then the semaphore is shared between processes,
and should be located in a region of shared memory (see
.BR shm_open (3),
.BR mmap (2),
and
.BR shmget (2)).
(Since a child created by
.BR fork (2)
inherits its parent's memory mappings, it can also access the semaphore.)
Any process that can access the shared memory region
can operate on the semaphore using
.BR sem_post (3),
.BR sem_wait (3),
and so on.

Initializing a semaphore that has already been initialized
results in undefined behavior.
.SH RETURN VALUE
.BR sem_init ()
returns 0 on success;
on error, \-1 is returned, and
.I errno
is set to indicate the error.
.SH ERRORS
.TP
.B EINVAL
.I value
exceeds
.BR SEM_VALUE_MAX .
.TP
.B ENOSYS
.I pshared
is nonzero,
but the system does not support process-shared semaphores (see
.BR sem_overview (7)).
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR sem_init ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
POSIX.1-2001.
.SH NOTES
Bizarrely, POSIX.1-2001 does not specify the value that should
be returned by a successful call to
.BR sem_init ().
POSIX.1-2008 rectifies this, specifying the zero return on success.
.SH SEE ALSO
.BR sem_destroy (3),
.BR sem_post (3),
.BR sem_wait (3),
.BR sem_overview (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
'\" t
.\" Copyright (C) 2006 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH SEM_OPEN 3 2012-05-13 "Linux" "Linux Programmer's Manual"
.SH NAME
sem_open \- initialize and open a named semaphore
.SH SYNOPSIS
.nf
.BR "#include <fcntl.h>" "           /* For O_* constants */"
.BR "#include <sys/stat.h>" "        /* For mode constants */"
.B #include <semaphore.h>
.sp
.BI "sem_t *sem_open(const char *" name ", int " oflag );
.BI "sem_t *sem_open(const char *" name ", int " oflag ", "
.BI "                mode_t " mode ", unsigned int " value );
.fi
.sp
Link with \fI\-pthread\fP.
.SH DESCRIPTION
.BR sem_open ()
creates a new POSIX semaphore or opens an existing semaphore.
The semaphore is identified by
.IR name .
For details of the construction of
.IR name ,
see
.BR sem_overview (7).

The
.I oflag
argument specifies flags that control the operation of the call.
(Definitions of the flags values can be obtained by including
.IR <fcntl.h> .)
If
.B O_CREAT
is specified in
.IR oflag ,
then the semaphore is created if
it does not already exist.
The owner (user ID) of the semaphore is set to the effective
user ID of the calling process.
The group ownership (group ID) is set to the effective group ID
of the calling process.
.\" In reality the filesystem IDs are used on Linux.
If both
.B O_CREAT
and
.B O_EXCL
are specified in
.IR oflag ,
then an error is returned if a semaphore with the given
.I name
already exists.
.PP
If
.B O_CREAT
is specified in
.IR oflag ,
then two additional arguments must be supplied.
The
.I mode
argument specifies the permissions to be placed on the new semaphore,
as for
.BR open (2).
(Symbolic definitions for the permissions bits can be obtained by including
.IR <sys/stat.h> .)
The permissions settings are masked against the process umask.
Both read and write permission should be granted to each class of
user that will access the semaphore.
The
.I value
argument specifies the initial value for the new semaphore.
If
.B O_CREAT
is specified, and a semaphore with the given
.I name
already exists, then
.I mode
and
.I value
are ignored.
.SH RETURN VALUE
On success,
.BR sem_open ()
returns the address of the new semaphore;
this address is used when calling other semaphore-related functions.
On error,
.BR sem_open ()
returns
.BR SEM_FAILED ,
with
.I errno
set to indicate the error.
.SH ERRORS
.TP
.B EACCES
The semaphore exists, but the caller does not have permission to
open it.
.TP
.B EEXIST
Both
.B O_CREAT
and
.B O_EXCL
were specified in
.IR oflag ,
but a semaphore with this
.I name
already exists.
.TP
.B EINVAL
.I value
was greater than
.BR SEM_VALUE_MAX .
.TP
.B EINVAL
.I name
consists of just "/", followed by no other characters.
.TP
.B EMFILE
The process already has the maximum number of files and open.
.TP
.B ENAMETOOLONG
.I name
was too long.
.TP
.B ENFILE
The system limit on the total number of open files has been reached.
.TP
.B ENOENT
The
.B O_CREAT
flag was not specified in
.IR oflag
and no semaphore with this
.I name
exists;
or,
.\" this error can occur if we have a name of the (nonportable) form
.\" /dir/name, and the directory /dev/shm/dir does not exist.
.B O_CREAT
was specified, but
.I name
wasn't well formed.
.TP
.B ENOMEM
Insufficient memory.
.SH CONFORMING TO
POSIX.1-2001.
.SH SEE ALSO
.BR sem_close (3),
.BR sem_getvalue (3),
.BR sem_post (3),
.BR sem_unlink (3),
.BR sem_wait (3),
.BR sem_overview (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
'\" t
.\" Copyright (C) 2006 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH SEM_POST 3 2015-03-02 "Linux" "Linux Programmer's Manual"
.SH NAME
sem_post \- unlock a semaphore
.SH SYNOPSIS
.nf
.B #include <semaphore.h>
.sp
.BI "int sem_post(sem_t *" sem );
.fi
.sp
Link with \fI\-pthread\fP.
.SH DESCRIPTION
.BR sem_post ()
increments (unlocks) the semaphore pointed to by
.IR sem .
If the semaphore's value consequently becomes greater than zero,
then another process or thread blocked in a
.BR sem_wait (3)
call will be woken up and proceed to lock the semaphore.
.SH RETURN VALUE
.BR sem_post ()
returns 0 on success;
on error, the value of the semaphore is left unchanged,
\-1 is returned, and
.I errno
is set to indicate the error.
.SH ERRORS
.TP
.B EINVAL
.I sem
is not a valid semaphore.
.TP
.B EOVERFLOW
.\" Added in POSIX.1-2008 TC1 (Austin Interpretation 213)
The maximum allowable value for a semaphore would be exceeded.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR sem_post ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
POSIX.1-2001.
.SH NOTES
.BR sem_post ()
is async-signal-safe:
it may be safely called within a signal handler.
.SH EXAMPLE
See
.BR sem_wait (3).
.SH SEE ALSO
.BR sem_getvalue (3),
.BR sem_wait (3),
.BR sem_overview (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
'\" t
.\" Copyright (C) 2006 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH SEM_UNLINK 3 2015-03-02 "Linux" "Linux Programmer's Manual"
.SH NAME
sem_unlink \- remove a named semaphore
.SH SYNOPSIS
.nf
.B #include <semaphore.h>
.sp
.BI "int sem_unlink(const char *" name );
.fi
.sp
Link with \fI\-pthread\fP.
.SH DESCRIPTION
.BR sem_unlink ()
removes the named semaphore referred to by
.IR name .
The semaphore name is removed immediately.
The semaphore is destroyed once all other processes that have
the semaphore open close it.
.SH RETURN VALUE
On success
.BR sem_unlink ()
returns 0; on error, \-1 is returned, with
.I errno
set to indicate the error.
.SH ERRORS
.TP
.B EACCES
The caller does not have permission to unlink this semaphore.
.TP
.B ENAMETOOLONG
.I name
was too long.
.TP
.B ENOENT
There is no semaphore with the given
.IR name .
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR sem_unlink ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
POSIX.1-2001.
.SH SEE ALSO
.BR sem_getvalue (3),
.BR sem_open (3),
.BR sem_post (3),
.BR sem_wait (3),
.BR sem_overview (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
'\" t
.\" Copyright (C) 2006 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH SEM_WAIT 3 2015-03-02 "Linux" "Linux Programmer's Manual"
.SH NAME
sem_wait, sem_timedwait, sem_trywait \- lock a semaphore
.SH SYNOPSIS
.nf
.B #include <semaphore.h>
.sp
.BI "int sem_wait(sem_t *" sem );
.sp
.BI "int sem_trywait(sem_t *" sem );
.sp
.BI "int sem_timedwait(sem_t *" sem ", const struct timespec *" abs_timeout );
.fi
.sp
Link with \fI\-pthread\fP.
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR sem_timedwait ():
_POSIX_C_SOURCE\ >=\ 200112L || _XOPEN_SOURCE\ >=\ 600
.SH DESCRIPTION
.BR sem_wait ()
decrements (locks) the semaphore pointed to by
.IR sem .
If the semaphore's value is greater than zero,
then the decrement proceeds, and the function returns, immediately.
If the semaphore currently has the value zero,
then the call blocks until either it becomes possible to perform
the decrement (i.e., the semaphore value rises above zero),
or a signal handler interrupts the call.

.BR sem_trywait ()
is the same as
.BR sem_wait (),
except that if the decrement cannot be immediately performed,
then call returns an error
.RI ( errno
set to
.BR EAGAIN )
instead of blocking.

.BR sem_timedwait ()
is the same as
.BR sem_wait (),
except that
.I abs_timeout
specifies a limit on the amount of time that the call
should block if the decrement cannot be immediately performed.
The
.I abs_timeout
argument points to a structure that specifies an absolute timeout
in seconds and nanoseconds since the Epoch, 1970-01-01 00:00:00 +0000 (UTC).
This structure is defined as follows:

.nf
.in +4n
struct timespec {
    time_t tv_sec;      /* Seconds */
    long   tv_nsec;     /* Nanoseconds [0 .. 999999999] */
};
.in
.fi
.PP
If the timeout has already expired by the time of the call,
and the semaphore could not be locked immediately,
then
.BR sem_timedwait ()
fails with a timeout error
.RI ( errno
set to
.BR ETIMEDOUT ).

If the operation can be performed immediately, then
.BR sem_timedwait ()
never fails with a timeout error, regardless of the value of
.IR abs_timeout .
Furthermore, the validity of
.I abs_timeout
is not checked in this case.
.SH RETURN VALUE
All of these functions return 0 on success;
on error, the value of the semaphore is left unchanged,
\-1 is returned, and
.I errno
is set to indicate the error.
.SH ERRORS
.TP
.B EINTR
The call was interrupted by a signal handler; see
.BR signal (7).
.TP
.B EINVAL
.I sem
is not a valid semaphore.
.PP
The following additional error can occur for
.BR sem_trywait ():
.TP
.B EAGAIN
The operation could not be performed without blocking (i.e., the
semaphore currently has the value zero).
.PP
The following additional errors can occur for
.BR sem_timedwait ():
.TP
.B EINVAL
The value of
.I abs_timeout.tv_nsecs
is less than 0, or greater than or equal to 1000 million.
.TP
.B ETIMEDOUT
The call timed out before the semaphore could be locked.
.\" POSIX.1-2001 also allows EDEADLK -- "A deadlock condition
.\" was detected", but this does not occur on Linux(?).
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw26 lb lb
l l l.
Interface	Attribute	Value
T{
.BR sem_wait (),
.BR sem_trywait (),
.BR sem_timedwait ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
POSIX.1-2001.
.SH NOTES
A signal handler always interrupts a blocked call to
one of these functions, regardless of the use of the
.BR sigaction (2)
.B SA_RESTART
flag.
.\" sem_wait() is always interrupted on most other implementations,
.\" but on FreeBSD 5.4 SA_RESTART does cause restarting.
.SH EXAMPLE
.PP
The (somewhat trivial) program shown below operates on an
unnamed semaphore.
The program expects two command-line arguments.
The first argument specifies a seconds value that is used to
set an alarm timer to generate a
.B SIGALRM
signal.
This handler performs a
.BR sem_post (3)
to increment the semaphore that is being waited on in
.I main()
using
.BR sem_timedwait ().
The second command-line argument specifies the length
of the timeout, in seconds, for
.BR sem_timedwait ().
The following shows what happens on two different runs of the program:

.in +4n
.nf
.RB "$" " ./a.out 2 3"
About to call sem_timedwait()
sem_post() from handler
sem_timedwait() succeeded
.RB "$" " ./a.out 2 1"
About to call sem_timedwait()
sem_timedwait() timed out
.fi
.in
.SS Program source
\&
.nf
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <semaphore.h>
#include <time.h>
#include <assert.h>
#include <errno.h>
#include <signal.h>

sem_t sem;

#define handle_error(msg) \\
    do { perror(msg); exit(EXIT_FAILURE); } while (0)

static void
handler(int sig)
{
    write(STDOUT_FILENO, "sem_post() from handler\\n", 24);
    if (sem_post(&sem) == \-1) {
        write(STDERR_FILENO, "sem_post() failed\\n", 18);
        _exit(EXIT_FAILURE);
    }
}

int
main(int argc, char *argv[])
{
    struct sigaction sa;
    struct timespec ts;
    int s;

    if (argc != 3) {
        fprintf(stderr, "Usage: %s <alarm\-secs> <wait\-secs>\\n",
                argv[0]);
        exit(EXIT_FAILURE);
    }

    if (sem_init(&sem, 0, 0) == \-1)
        handle_error("sem_init");

    /* Establish SIGALRM handler; set alarm timer using argv[1] */

    sa.sa_handler = handler;
    sigemptyset(&sa.sa_mask);
    sa.sa_flags = 0;
    if (sigaction(SIGALRM, &sa, NULL) == \-1)
        handle_error("sigaction");

    alarm(atoi(argv[1]));

    /* Calculate relative interval as current time plus
       number of seconds given argv[2] */

    if (clock_gettime(CLOCK_REALTIME, &ts) == \-1)
        handle_error("clock_gettime");

    ts.tv_sec += atoi(argv[2]);

    printf("main() about to call sem_timedwait()\\n");
    while ((s = sem_timedwait(&sem, &ts)) == \-1 && errno == EINTR)
        continue;       /* Restart if interrupted by handler */

    /* Check what happened */

    if (s == \-1) {
        if (errno == ETIMEDOUT)
            printf("sem_timedwait() timed out\\n");
        else
            perror("sem_timedwait");
    } else
        printf("sem_timedwait() succeeded\\n");

    exit((s == 0) ? EXIT_SUCCESS : EXIT_FAILURE);
}
.fi
.SH SEE ALSO
.BR clock_gettime (2),
.BR sem_getvalue (3),
.BR sem_post (3),
.BR sem_overview (7),
.BR time (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 2003 Walter Harms (walter.harms@informatik.uni-oldenburg.de)
.\"
.\" %%%LICENSE_START(GPL_NOVERSION_ONELINE)
.\" Distributed under GPL
.\" %%%LICENSE_END
.\"
.\" Polished a bit, added a little, aeb
.\"
.TH SETALIASENT 3 2003-09-09 "GNU" "Linux Programmer's Manual"
.SH NAME
setaliasent, endaliasent, getaliasent, getaliasent_r,
getaliasbyname, getaliasbyname_r \- read an alias entry
.SH SYNOPSIS
.B #include <aliases.h>
.sp
.B "void setaliasent(void);"
.sp
.B "void endaliasent(void);"
.sp
.B "struct aliasent *getaliasent(void);"
.sp
.BI "int getaliasent_r(struct aliasent *" result ","
.br
.BI "        char *" buffer ", size_t " buflen ", struct aliasent **" res );
.sp
.BI "struct aliasent *getaliasbyname(const char *" name );
.sp
.BI "int getaliasbyname_r(const char *" name ", struct aliasent *" result ,
.br
.BI "        char *" buffer ", size_t " buflen ", struct aliasent **" res );
.SH DESCRIPTION
One of the databases available with the Name Service Switch (NSS)
is the aliases database, that contains mail aliases.
(To find out which databases are supported, try
.IR "getent \-\-help" .)
Six functions are provided to access the aliases database.
.PP
The
.BR getaliasent ()
function returns a pointer to a structure containing
the group information from the aliases database.
The first time it is called it returns the first entry;
thereafter, it returns successive entries.
.PP
The
.BR setaliasent ()
function rewinds the file pointer to the beginning of the
aliases database.
.PP
The
.BR endaliasent ()
function closes the aliases database.
.PP
.BR getaliasent_r ()
is the reentrant version of the previous function.
The requested structure
is stored via the first argument but the programmer needs to fill the other
arguments also.
Not providing enough space causes the function to fail.
.PP
The function
.BR getaliasbyname ()
takes the name argument and searches the aliases database.
The entry is returned as a pointer to a
.IR "struct aliasent" .
.PP
.BR getaliasbyname_r ()
is the reentrant version of the previous function.
The requested structure
is stored via the second argument but the programmer needs to fill the other
arguments also.
Not providing enough space causes the function to fail.
.PP
The
.I "struct aliasent"
is defined in
.IR <aliases.h> :
.in +4n
.nf

struct aliasent {
    char    *alias_name;             /* alias name */
    size_t   alias_members_len;
    char   **alias_members;          /* alias name list */
    int      alias_local;
};
.fi
.in
.SH RETURN VALUE
The functions
.BR getaliasent_r ()
and
.BR getaliasbyname_r ()
return a nonzero value on error.
.SH FILES
The default alias database is the file
.IR /etc/aliases .
This can be changed in the
.I /etc/nsswitch.conf
file.
.SH CONFORMING TO
These routines are glibc-specific.
The NeXT system has similar routines:
.in +4n
.nf

#include <aliasdb.h>

void alias_setent(void);
void alias_endent(void);
alias_ent *alias_getent(void);
alias_ent *alias_getbyname(char *name);
.fi
.in
.SH EXAMPLE
The following example compiles with
.IR "gcc example.c \-o example" .
It will dump all names in the alias database.
.sp
.nf
#include <aliases.h>
#include <stdio.h>
#include <stdlib.h>
#include <errno.h>

int
main(void)
{
    struct aliasent *al;
    setaliasent();
    for (;;) {
        al = getaliasent();
        if (al == NULL)
            break;
        printf("Name: %s\\n", al\->alias_name);
    }
    if (errno) {
        perror("reading alias");
        exit(EXIT_FAILURE);
    }
    endaliasent();
    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR getgrent (3),
.BR getpwent (3),
.BR getspent (3),
.BR aliases (5)
.\"
.\" /etc/sendmail/aliases
.\" Yellow Pages
.\" newaliases, postalias
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1980, 1991 Regents of the University of California.
.\" All rights reserved.
.\"
.\" This code is derived from software contributed to Berkeley by
.\" the American National Standards Committee X3, on Information
.\" Processing Systems.
.\"
.\" %%%LICENSE_START(BSD_4_CLAUSE_UCB)
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\" %%%LICENSE_END
.\"
.\"     @(#)setbuf.3	6.10 (Berkeley) 6/29/91
.\"
.\" Converted for Linux, Mon Nov 29 14:55:24 1993, faith@cs.unc.edu
.\" Added section to BUGS, Sun Mar 12 22:28:33 MET 1995,
.\"                   Thomas.Koenig@ciw.uni-karlsruhe.de
.\" Correction,  Sun, 11 Apr 1999 15:55:18,
.\"     Martin Vicente <martin@netadmin.dgac.fr>
.\" Correction,  2000-03-03, Andreas Jaeger <aj@suse.de>
.\" Added return value for setvbuf, aeb,
.\"
.TH SETBUF 3  2015-05-07 "Linux" "Linux Programmer's Manual"
.SH NAME
setbuf, setbuffer, setlinebuf, setvbuf \- stream buffering operations
.SH SYNOPSIS
.nf
.B #include <stdio.h>

.BI "void setbuf(FILE *" stream ", char *" buf );

.BI "void setbuffer(FILE *" stream ", char *" buf ", size_t "  size );

.BI "void setlinebuf(FILE *" stream );

.BI "int setvbuf(FILE *" stream ", char *" buf ", int " mode \
", size_t " size );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR setbuffer (),
.BR setlinebuf ():
_BSD_SOURCE
.SH DESCRIPTION
The three types of buffering available are unbuffered, block buffered, and
line buffered.
When an output stream is unbuffered, information appears on
the destination file or terminal as soon as written; when it is block
buffered many characters are saved up and written as a block; when it is
line buffered characters are saved up until a newline is output or input is
read from any stream attached to a terminal device (typically \fIstdin\fP).
The function
.BR fflush (3)
may be used to force the block out early.
(See
.BR fclose (3).)

Normally all files are block buffered.
If a stream refers to a terminal (as
.I stdout
normally does), it is line buffered.
The standard error stream
.I stderr
is always unbuffered by default.
.PP
The
.BR setvbuf ()
function may be used on any open stream to change its buffer.
The
.I mode
argument must be one of the following three macros:
.RS
.TP
.B _IONBF
unbuffered
.TP
.B _IOLBF
line buffered
.TP
.B _IOFBF
fully buffered
.RE
.PP
Except for unbuffered files, the
.I buf
argument should point to a buffer at least
.I size
bytes long; this buffer will be used instead of the current buffer.
If the argument
.I buf
is NULL,
only the mode is affected; a new buffer will be allocated on the next read
or write operation.
The
.BR setvbuf ()
function may be used only after opening a stream and before any other
operations have been performed on it.
.PP
The other three calls are, in effect, simply aliases for calls to
.BR setvbuf ().
The
.BR setbuf ()
function is exactly equivalent to the call
.PP
.in +4n
setvbuf(stream, buf, buf ? _IOFBF : _IONBF, BUFSIZ);
.in
.PP
The
.BR setbuffer ()
function is the same, except that the size of the buffer is up to the
caller, rather than being determined by the default
.BR BUFSIZ .
The
.BR setlinebuf ()
function is exactly equivalent to the call:
.PP
.in +4n
setvbuf(stream, NULL, _IOLBF, 0);
.in
.SH RETURN VALUE
The function
.BR setvbuf ()
returns 0 on success.
It returns nonzero on failure
.RI ( mode
is invalid or the request cannot be honored).
It may set
.I errno
on failure.

The other functions do not return a value.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw23 lb lb
l l l.
Interface	Attribute	Value
T{
.BR setbuf (),
.BR setbuffer (),
.br
.BR setlinebuf (),
.BR setvbuf ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
The
.BR setbuf ()
and
.BR setvbuf ()
functions conform to C89 and C99.
.SH BUGS
.\" The
.\" .BR setbuffer ()
.\" and
.\" .BR setlinebuf ()
.\" functions are not portable to versions of BSD before 4.2BSD, and
.\" are available under Linux since libc 4.5.21.
.\" On 4.2BSD and 4.3BSD systems,
.\" .BR setbuf ()
.\" always uses a suboptimal buffer size and should be avoided.
.P
You must make sure that the space that
.I buf
points to still exists by the time
.I stream
is closed, which also happens at program termination.
For example, the following is invalid:
.nf
.sp
#include <stdio.h>

int
main(void)
{
    char buf[BUFSIZ];
    setbuf(stdin, buf);
    printf("Hello, world!\\n");
    return 0;
}
.fi
.SH SEE ALSO
.BR fclose (3),
.BR fflush (3),
.BR fopen (3),
.BR fread (3),
.BR malloc (3),
.BR printf (3),
.BR puts (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\" and Copyright (C) 2004, 2007 Michael kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified Sat Jul 24 18:20:58 1993 by Rik Faith (faith@cs.unc.edu)
.\" Modified Fri Feb 14 21:47:50 1997 by Andries Brouwer (aeb@cwi.nl)
.\" Modified 9 Jun 2004, Michael Kerrisk <mtk.manpages@gmail.com>
.\"     Changed unsetenv() prototype; added EINVAL error
.\"     Noted nonstandard behavior of setenv() if name contains '='
.\" 2005-08-12, mtk, glibc 2.3.4 fixed the "name contains '='" bug
.\"
.TH SETENV 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
setenv \- change or add an environment variable
.SH SYNOPSIS
.nf
.B #include <stdlib.h>
.sp
.BI "int setenv(const char *" name ", const char *" value ", int " overwrite );
.sp
.BI "int unsetenv(const char *" name );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR setenv (),
.BR unsetenv ():
.RS 4
_BSD_SOURCE || _POSIX_C_SOURCE\ >=\ 200112L || _XOPEN_SOURCE\ >=\ 600
.RE
.ad b
.SH DESCRIPTION
The
.BR setenv ()
function adds the variable
.I name
to the
environment with the value
.IR value ,
if
.I name
does not
already exist.
If
.I name
does exist in the environment, then
its value is changed to
.IR value
if
.I overwrite
is nonzero;
if
.IR overwrite
is zero, then the value of
.I name
is not changed (and
.BR setenv ()
returns a success status).
This function makes copies of the strings pointed to by
.I name
and
.I value
(by contrast with
.BR putenv (3)).
.PP
The
.BR unsetenv ()
function deletes the variable
.I name
from
the environment.
If
.I name
does not exist in the environment,
then the function succeeds, and the environment is unchanged.
.SH RETURN VALUE
The
.BR setenv ()
function returns zero on success,
or \-1 on error, with
.I errno
set to indicate the cause of the error.

The
.BR unsetenv ()
function returns zero on success,
or \-1 on error, with
.I errno
set to indicate the cause of the error.
.SH ERRORS
.TP
.B EINVAL
.I name
is NULL, points to a string of length 0,
or contains an \(aq=\(aq character.
.TP
.B ENOMEM
Insufficient memory to add a new variable to the environment.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR setenv (),
.BR unsetenv ()
T}	Thread safety	MT-Unsafe const:env
.TE
.SH CONFORMING TO
4.3BSD, POSIX.1-2001.
.SH NOTES
POSIX.1-2001 does not require
.BR setenv ()
or
.BR unsetenv ()
to be reentrant.

Prior to glibc 2.2.2,
.BR unsetenv ()
was prototyped
as returning
.IR void ;
more recent glibc versions follow the
POSIX.1-2001-compliant prototype shown in the SYNOPSIS.
.SH BUGS
POSIX.1-2001 specifies that if
.I name
contains an \(aq=\(aq character, then
.BR setenv ()
should fail with the error
.BR EINVAL ;
however, versions of glibc before 2.3.4 allowed an \(aq=\(aq sign in
.IR name .
.SH SEE ALSO
.BR clearenv (3),
.BR getenv (3),
.BR putenv (3),
.BR environ (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Written Sat Mar  8 10:35:08 MEZ 1997 by
.\" J. "MUFTI" Scheurich (mufti@csv.ica.uni-stuttgart.de)
.\"
.\" %%%LICENSE_START(GPL_NOVERSION_ONELINE)
.\" This page is licensed under the GNU General Public License
.\" %%%LICENSE_END
.\"
.TH __SETFPUCW 3 2012-12-31 "Linux" "Linux Programmer's Manual"
.SH NAME
__setfpucw \- set FPU control word on i386 architecture (obsolete)
.SH SYNOPSIS
.B #include <i386/fpu_control.h>
.sp
.BI "void __setfpucw(unsigned short " control_word );
.SH DESCRIPTION
.BR __setfpucw ()
transfers
.I control_word
to the registers of the FPU (floating-point unit) on the i386 architecture.
This was used to control floating-point precision,
rounding and floating-point exceptions.
.SH CONFORMING TO
This function was a nonstandard GNU extension.
.SH NOTES
As of glibc 2.1 this function does not exist anymore.
There are new functions from C99, with prototypes in
.IR <fenv.h> ,
to control FPU rounding modes, like
.BR fegetround (3),
.BR fesetround (3),
and the floating-point environment, like
.BR fegetenv (3),
.BR feholdexcept (3),
.BR fesetenv (3),
.BR feupdateenv (3),
and FPU exception handling, like
.BR feclearexcept (3),
.BR fegetexceptflag (3),
.BR feraiseexcept (3),
.BR fesetexceptflag (3),
and
.BR fetestexcept (3).
.PP
If direct access to the FPU control word is still needed, the
.B _FPU_GETCW
and
.B _FPU_SETCW
macros from
.I <fpu_control.h>
can be used.
.SH EXAMPLE
.B __setfpucw(0x1372)

Set FPU control word on the i386 architecture to
.br
     \- extended precision
.br
     \- rounding to nearest
.br
     \- exceptions on overflow, zero divide and NaN
.SH SEE ALSO
.BR feclearexcept (3)
.br
.I <fpu_control.h>
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Written by Michael Haardt, Fri Nov 25 14:51:42 MET 1994
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.\" Added sigsetjmp, Sun Mar  2 22:03:05 EST 1997, jrv@vanzandt.mv.com
.\" Modifications, Sun Feb 26 14:39:45 1995, faith@cs.unc.edu
.\" "
.TH SETJMP 3 2015-05-07 "" "Linux Programmer's Manual"
.SH NAME
setjmp, sigsetjmp \- save stack context for nonlocal goto
.SH SYNOPSIS
.B #include <setjmp.h>
.sp
.nf
.BI "int setjmp(jmp_buf " env );

.BI "int sigsetjmp(sigjmp_buf " env ", int " savesigs );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR setjmp ():
see NOTES.
.br
.BR sigsetjmp ():
_POSIX_C_SOURCE\ >=\ 1 || _XOPEN_SOURCE || _POSIX_C_SOURCE
.SH DESCRIPTION
.BR setjmp ()
and
.BR longjmp (3)
are useful for dealing with errors
and interrupts encountered in a low-level subroutine of a program.
.BR setjmp ()
saves the stack context/environment in
.I env
for
later use by
.BR longjmp (3).
The stack context will be invalidated
if the function which called
.BR setjmp ()
returns.
.P
.BR sigsetjmp ()
is similar to
.BR setjmp ().
If, and only if,
.I savesigs
is nonzero,
the process's current signal mask is saved in
.I env
and will be restored if a
.BR siglongjmp (3)
is later performed with this
.IR env .
.SH RETURN VALUE
.BR setjmp ()
and
.BR sigsetjmp ()
return 0 if returning directly, and
nonzero when returning from
.BR longjmp (3)
or
.BR siglongjmp (3)
using the saved context.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw21 lb lb
l l l.
Interface	Attribute	Value
T{
.BR setjmp (),
.BR sigsetjmp ()
T}	Thread safety	MT-Safe
.TE

.SH CONFORMING TO
C89, C99, and POSIX.1-2001 specify
.BR setjmp ().
POSIX.1-2001 specifies
.BR sigsetjmp ().
.SH NOTES
POSIX does not specify whether
.BR setjmp ()
will save the signal mask
(to be later restored during
.BR longjmp (3)).
In System V it will not.
In 4.3BSD it will, and there
is a function
.B _setjmp
that will not.
On Linux with glibc versions before 2.19,
.BR setjmp ()
follows the System V behavior by default,
but the BSD behavior is provided if the
.BR _BSD_SOURCE
feature test macro is defined and none of
.BR _POSIX_SOURCE ,
.BR _POSIX_C_SOURCE ,
.BR _XOPEN_SOURCE ,
.BR _XOPEN_SOURCE_EXTENDED ,
.BR _GNU_SOURCE ,
or
.B _SVID_SOURCE
is defined.
Since glibc 2.19,
.IR <setjmp.h>
exposes only the System V version of
.BR setjmp ().
Programs that need the BSD semantics should replace calls to
.BR setjmp ()
with calls to
.BR sigsetjmp ()
with a nonzero
.I savesigs
argument.

If you want to portably save and restore signal masks, use
.BR sigsetjmp ()
and
.BR siglongjmp (3).
.P
.BR setjmp ()
and
.BR sigsetjmp ()
make programs hard to understand
and maintain.
If possible, an alternative should be used.
.SH SEE ALSO
.BR longjmp (3),
.BR siglongjmp (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1993 by Thomas Koenig (ig25@rz.uni-karlsruhe.de)
.\" and Copyright 1999 by Bruno Haible (haible@clisp.cons.org)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified Sat Jul 24 18:20:12 1993 by Rik Faith (faith@cs.unc.edu)
.\" Modified Tue Jul 15 16:49:10 1997 by Andries Brouwer (aeb@cwi.nl)
.\" Modified Sun Jul  4 14:52:16 1999 by Bruno Haible (haible@clisp.cons.org)
.\" Modified Tue Aug 24 17:11:01 1999 by Andries Brouwer (aeb@cwi.nl)
.\" Modified Tue Feb  6 03:31:55 2001 by Andries Brouwer (aeb@cwi.nl)
.\"
.TH SETLOCALE 3  2015-05-07 "GNU" "Linux Programmer's Manual"
.SH NAME
setlocale \- set the current locale
.SH SYNOPSIS
.nf
.B #include <locale.h>
.sp
.BI "char *setlocale(int " category ", const char *" locale );
.fi
.SH DESCRIPTION
The
.BR setlocale ()
function is used to set or query the program's current locale.
.PP
If
.I locale
is not NULL,
the program's current locale is modified according to the arguments.
The argument
.I category
determines which parts of the program's current locale should be modified.
.TS
lB lB
lB l.
Category	Governs
LC_ALL	All of the locale
LC_ADDRESS	T{
Formatting of addresses and
.br
geography-related items (*)
T}
LC_COLLATE	String collation
LC_CTYPE	Character classification
LC_IDENTIFICATION	Metadata describing the locale (*)
LC_MEASUREMENT	T{
Settings related to measurements
.br
(metric versus US customary) (*)
T}
LC_MESSAGES	Localizable natural-language messages
LC_MONETARY	Formatting of monetary values
LC_NAME	Formatting of salutations for persons (*)
LC_NUMERIC	Formatting of nonmonetary numeric values
LC_PAPER	Settings related to the standard paper size (*)
LC_TELEPHONE	Formats to be used with telephone services (*)
LC_TIME	Formatting of date and time values
.TE
.PP
The categories marked with an asterisk in the above table
are GNU extensions.
For further information on these locale categories, see
.BR locale (7).
.PP
The argument
.I locale
is a pointer to a character string containing the
required setting of
.IR category .
Such a string is either a well-known constant like "C" or "da_DK"
(see below), or an opaque string that was returned by another call of
.BR setlocale ().
.PP
If
.I locale
is an empty string,
.BR """""" ,
each part of the locale that should be modified is set according to the
environment variables.
The details are implementation-dependent.
For glibc, first (regardless of
.IR category ),
the environment variable
.B LC_ALL
is inspected,
next the environment variable with the same name as the category
(see the table above),
and finally the environment variable
.BR LANG .
The first existing environment variable is used.
If its value is not a valid locale specification, the locale
is unchanged, and
.BR setlocale ()
returns NULL.
.PP
The locale
.B """C"""
or
.B """POSIX"""
is a portable locale; its
.B LC_CTYPE
part corresponds to the 7-bit ASCII
character set.
.PP
A locale name is typically of the form
.IR language "[_" territory "][." codeset "][@" modifier "],"
where
.I language
is an ISO 639 language code,
.I territory
is an ISO 3166 country code, and
.I codeset
is a character set or encoding identifier like
.B "ISO-8859-1"
or
.BR "UTF-8" .
For a list of all supported locales, try "locale \-a", cf.\&
.BR locale (1).
.PP
If
.I locale
is NULL, the current locale is only queried, not modified.
.PP
On startup of the main program, the portable
.B """C"""
locale is selected as default.
A program may be made portable to all locales by calling:
.nf

    setlocale(LC_ALL, "");

.fi
after program initialization, by using the values returned
from a
.BR localeconv (3)
call
for locale-dependent information, by using the multibyte and wide
character functions for text processing if
.BR "MB_CUR_MAX > 1" ,
and by using
.BR strcoll (3),
.BR wcscoll (3)
or
.BR strxfrm (3),
.BR wcsxfrm (3)
to compare strings.
.SH RETURN VALUE
A successful call to
.BR setlocale ()
returns an opaque string that corresponds to the locale set.
This string may be allocated in static storage.
The string returned is such that a subsequent call with that string
and its associated category will restore that part of the process's
locale.
The return value is NULL if the request cannot be honored.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lbw26
l l l.
Interface	Attribute	Value
T{
.BR setlocale ()
T}	Thread safety	MT-Unsafe const:locale env
.TE

.SH CONFORMING TO
C89, C99, POSIX.1-2001.
.SH SEE ALSO
.BR locale (1),
.BR localedef (1),
.BR isalpha (3),
.BR localeconv (3),
.BR nl_langinfo (3),
.BR rpmatch (3),
.BR strcoll (3),
.BR strftime (3),
.BR charsets (7),
.BR locale (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2001 Andries Brouwer <aeb@cwi.nl>.
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH SETLOGMASK 3  2015-05-07 "" "Linux Programmer's Manual"
.SH NAME
setlogmask \- set log priority mask
.SH SYNOPSIS
.nf
.B #include <syslog.h>
.sp
.BI "int setlogmask(int " mask );
.fi
.SH DESCRIPTION
A process has a log priority mask that determines which calls to
.BR syslog (3)
may be logged.
All other calls will be ignored.
Logging is enabled for the priorities that have the corresponding
bit set in
.IR mask .
The initial mask is such that logging is enabled for all priorities.
.LP
The
.BR setlogmask ()
function sets this logmask for the calling process,
and returns the previous mask.
If the mask argument is 0, the current logmask is not modified.
.LP
The eight priorities are
.BR LOG_EMERG ,
.BR LOG_ALERT ,
.BR LOG_CRIT ,
.BR LOG_ERR ,
.BR LOG_WARNING ,
.BR LOG_NOTICE ,
.BR LOG_INFO ,
and
.BR LOG_DEBUG .
The bit corresponding to a priority
.I p
is
.IR LOG_MASK(p) .
Some systems also provide a macro
.IR LOG_UPTO(p)
for the mask
of all priorities in the above list up to and including
.IR p .
.SH RETURN VALUE
This function returns the previous log priority mask.
.SH ERRORS
None.
.\" .SH NOTES
.\" The glibc logmask handling was broken in versions before glibc 2.1.1.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lbw22
l l l.
Interface	Attribute	Value
T{
.BR setlogmask ()
T}	Thread safety	MT-Unsafe race:LogMask
.TE

.SH CONFORMING TO
POSIX.1-2001.
Note that the description in POSIX.1-2001 is flawed.
.SH SEE ALSO
.BR closelog (3),
.BR openlog (3),
.BR syslog (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\"  Copyright 2002 walter harms (walter.harms@informatik.uni-oldenburg.de)
.\"
.\" %%%LICENSE_START(GPL_NOVERSION_ONELINE)
.\" Distributed under GPL
.\" %%%LICENSE_END
.\"
.\"  based on glibc infopages
.\" polished - aeb
.\"
.TH SETNETGRENT 3 2015-04-19 "GNU" "Linux Programmer's Manual"
.SH NAME
setnetgrent, endnetgrent, getnetgrent, getnetgrent_r, innetgr \-
handle network group entries
.SH SYNOPSIS
.nf
.B #include <netdb.h>

.BI "int setnetgrent(const char *" netgroup );

.B "void endnetgrent(void);"

.BI "int getnetgrent(char **" host ", char **" user ", char **" domain );

.BI "int getnetgrent_r(char **" host ", char **" user ","
.BI "                  char **" domain ", char *" buf ", size_t " buflen );

.BI "int innetgr(const char *" netgroup ", const char *" host ","
.BI "            const char *" user ", const char *" domain );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR setnetgrent (),
.BR endnetgrent (),
.BR getnetgrent (),
.BR getnetgrent_r (),
.BR innetgr ():
_BSD_SOURCE || _SVID_SOURCE
.ad b
.SH DESCRIPTION
The
.I netgroup
is a SunOS invention.
A netgroup database is a list of string triples
.RI ( hostname ", " username ", " domainname )
or other netgroup names.
Any of the elements in a triple can be empty,
which means that anything matches.
The functions described here allow access to the netgroup databases.
The file
.I /etc/nsswitch.conf
defines what database is searched.
.PP
The
.BR setnetgrent ()
call defines the netgroup that will be searched by subsequent
.BR getnetgrent ()
calls.
The
.BR getnetgrent ()
function retrieves the next netgroup entry, and returns pointers in
.IR host ,
.IR user ,
.IR domain .
A null pointer means that the corresponding entry matches any string.
The pointers are valid only as long as there is no call to other
netgroup-related functions.
To avoid this problem you can use the GNU function
.BR getnetgrent_r ()
that stores the strings in the supplied buffer.
To free all allocated buffers use
.BR endnetgrent ().
.PP
In most cases you want to check only if the triplet
.RI ( hostname ", " username ", " domainname )
is a member of a netgroup.
The function
.BR innetgr ()
can be used for this without calling the above three functions.
Again, a null pointer is a wildcard and matches any string.
The function is thread-safe.
.SH RETURN VALUE
These functions return 1 on success and 0 for failure.
.SH FILES
.I /etc/netgroup
.br
.I /etc/nsswitch.conf
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw16 lb lbw23
l l l.
Interface	Attribute	Value
T{
.BR setnetgrent (),
.br
.BR getnetgrent_r (),
.br
.BR innetgr ()
T}	Thread safety	T{
MT-Unsafe race:netgrent
.br
locale
T}
T{
.BR endnetgrent ()
T}	Thread safety	MT-Unsafe race:netgrent
T{
.BR getnetgrent ()
T}	Thread safety	T{
MT-Unsafe race:netgrent
.br
race:netgrentbuf locale
T}
.TE

In the above table,
.I netgrent
in
.I race:netgrent
signifies that if any of the functions
.BR setnetgrent (3),
.BR getnetgrent_r (3),
.BR innetgr (3),
.BR getnetgrent (3),
or
.BR endnetgrent (3)
are used in parallel in different threads of a program,
then data races could occur.
.SH CONFORMING TO
These functions are not in POSIX.1-2001, but
.BR setnetgrent (),
.BR endnetgrent (),
.BR getnetgrent (),
and
.BR innetgr ()
are available on most UNIX systems.
.BR getnetgrent_r ()
is not widely available on other systems.
.\" getnetgrent_r() is on Solaris 8 and AIX 5.1, but not the BSDs.
.SH NOTES
In the BSD implementation,
.BR setnetgrent ()
returns void.
.SH SEE ALSO
.BR sethostent (3),
.BR setprotoent (3),
.BR setservent (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2002 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" FIXME . Add an example to this page
.TH SHM_OPEN 3 2015-01-22 "Linux" "Linux Programmer's Manual"
.SH NAME
shm_open, shm_unlink \- create/open or unlink POSIX shared memory objects
.SH SYNOPSIS
.B #include <sys/mman.h>
.br
.BR "#include <sys/stat.h>" "        /* For mode constants */"
.br
.BR "#include <fcntl.h>" "           /* For O_* constants */"
.sp
.BI "int shm_open(const char *" name ", int " oflag ", mode_t " mode );
.sp
.BI "int shm_unlink(const char *" name );
.sp
Link with \fI\-lrt\fP.
.SH DESCRIPTION
.BR shm_open ()
creates and opens a new, or opens an existing, POSIX shared memory object.
A POSIX shared memory object is in effect a handle which can
be used by unrelated processes to
.BR mmap (2)
the same region of shared memory.
The
.BR shm_unlink ()
function performs the converse operation,
removing an object previously created by
.BR shm_open ().
.LP
The operation of
.BR shm_open ()
is analogous to that of
.BR open (2).
.I name
specifies the shared memory object to be created or opened.
For portable use,
a shared memory object should be identified by a name of the form
.IR /somename ;
that is, a null-terminated string of up to
.BI NAME_MAX
(i.e., 255) characters consisting of an initial slash,
.\" glibc allows the initial slash to be omitted, and makes
.\" multiple initial slashes equivalent to a single slash.
.\" This differs from the implementation of POSIX message queues.
followed by one or more characters, none of which are slashes.
.\" glibc allows subdirectory components in the name, in which
.\" case the subdirectory must exist under /dev/shm, and allow the
.\" required permissions if a user wants to create a shared memory
.\" object in that subdirectory.
.LP
.I oflag
is a bit mask created by ORing together exactly one of
.B O_RDONLY
or
.B O_RDWR
and any of the other flags listed here:
.TP 1.1i
.B O_RDONLY
Open the object for read access.
A shared memory object opened in this way can be
.BR mmap (2)ed
only for read
.RB ( PROT_READ )
access.
.TP
.B O_RDWR
Open the object for read-write access.
.TP
.B O_CREAT
Create the shared memory object if it does not exist.
The user and group ownership of the object are taken
from the corresponding effective IDs of the calling process,
.\" In truth it is actually the filesystem IDs on Linux, but these
.\" are nearly always the same as the effective IDs.  (MTK, Jul 05)
and the object's
permission bits are set according to the low-order 9 bits of
.IR mode ,
except that those bits set in the process file mode
creation mask (see
.BR umask (2))
are cleared for the new object.
A set of macro constants which can be used to define
.I mode
is listed in
.BR open (2).
(Symbolic definitions of these constants can be obtained by including
.IR <sys/stat.h> .)
.sp
A new shared memory object initially has zero length\(emthe size of the
object can be set using
.BR ftruncate (2).
The newly allocated bytes of a shared memory
object are automatically initialized to 0.
.TP
.B O_EXCL
If
.B O_CREAT
was also specified, and a shared memory object with the given
.I name
already exists, return an error.
The check for the existence of the object, and its creation if it
does not exist, are performed atomically.
.TP
.B O_TRUNC
If the shared memory object already exists, truncate it to zero bytes.
.LP
Definitions of these flag values can be obtained by including
.IR <fcntl.h> .
.LP
On successful completion
.BR shm_open ()
returns a new file descriptor referring to the shared memory object.
This file descriptor is guaranteed to be the lowest-numbered file descriptor
not previously opened within the process.
The
.B FD_CLOEXEC
flag (see
.BR fcntl (2))
is set for the file descriptor.

The file descriptor is normally used in subsequent calls
to
.BR ftruncate (2)
(for a newly created object) and
.BR mmap (2).
After a call to
.BR mmap (2)
the file descriptor may be closed without affecting the memory mapping.

The operation
of
.BR shm_unlink ()
is analogous to
.BR unlink (2):
it removes a shared memory object name, and, once all processes
have unmapped the object, de-allocates and
destroys the contents of the associated memory region.
After a successful
.BR shm_unlink (),
attempts to
.BR shm_open ()
an object with the same
.I name
will fail (unless
.B O_CREAT
was specified, in which case a new, distinct object is created).
.SH RETURN VALUE
On success,
.BR shm_open ()
returns a nonnegative file descriptor.
On failure,
.BR shm_open ()
returns \-1.
.BR shm_unlink ()
returns 0 on success, or \-1 on error.
.SH ERRORS
On failure,
.I errno
is set to indicate the cause of the error.
Values which may appear in
.I errno
include the following:
.TP
.B EACCES
Permission to
.BR shm_unlink ()
the shared memory object was denied.
.TP
.B EACCES
Permission was denied to
.BR shm_open ()
.I name
in the specified
.IR mode ,
or
.B O_TRUNC
was specified and the caller does not have write permission on the object.
.TP
.B EEXIST
Both
.B O_CREAT
and
.B O_EXCL
were specified to
.BR shm_open ()
and the shared memory object specified by
.I name
already exists.
.TP
.B EINVAL
The
.I name
argument to
.BR shm_open ()
was invalid.
.TP
.B EMFILE
The process already has the maximum number of files open.
.TP
.B ENAMETOOLONG
The length of
.I name
exceeds
.BR PATH_MAX .
.TP
.B ENFILE
The limit on the total number of files open on the system has been
reached.
.TP
.B ENOENT
An attempt was made to
.BR shm_open ()
a
.I name
that did not exist, and
.B O_CREAT
was not specified.
.TP
.B ENOENT
An attempt was to made to
.BR shm_unlink ()
a
.I name
that does not exist.
.SH VERSIONS
These functions are provided in glibc 2.2 and later.
.SH CONFORMING TO
POSIX.1-2001.
.LP
POSIX.1-2001 says that the group ownership of a newly created shared
memory object is set to either the calling process's effective group ID
or "a system default group ID".
.SH NOTES
.LP
POSIX leaves the behavior of the combination of
.B O_RDONLY
and
.B O_TRUNC
unspecified.
On Linux, this will successfully truncate an existing
shared memory object\(emthis may not be so on other UNIX systems.
.LP
The POSIX shared memory object implementation on Linux 2.4 makes use
of a dedicated filesystem, which is normally
mounted under
.IR /dev/shm .
.SH SEE ALSO
.BR close (2),
.BR fchmod (2),
.BR fchown (2),
.BR fcntl (2),
.BR fstat (2),
.BR ftruncate (2),
.BR memfd_create (2),
.BR mmap (2),
.BR open (2),
.BR umask (2),
.BR shm_overview (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified Sun Jul 25 10:40:51 1993 by Rik Faith (faith@cs.unc.edu)
.\" Modified Sun Apr 14 16:20:34 1996 by Andries Brouwer (aeb@cwi.nl)
.TH SIGINTERRUPT 3 2015-03-02 "" "Linux Programmer's Manual"
.SH NAME
siginterrupt \- allow signals to interrupt system calls
.SH SYNOPSIS
.nf
.B #include <signal.h>
.sp
.BI "int siginterrupt(int " sig ", int " flag );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR siginterrupt ():
.ad l
.RS 4
_BSD_SOURCE || _XOPEN_SOURCE\ >=\ 500 ||
_XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED
.br
|| /* Since glibc 2.12: */ _POSIX_C_SOURCE\ >=\ 200809L
.RE
.ad
.SH DESCRIPTION
The
.BR siginterrupt ()
function changes the restart behavior when
a system call is interrupted by the signal \fIsig\fP.
If the \fIflag\fP
argument is false (0), then system calls will be restarted if interrupted
by the specified signal \fIsig\fP.
This is the default behavior in Linux.
.PP
If the \fIflag\fP argument is true (1) and no data has been transferred,
then a system call interrupted by the signal \fIsig\fP will return \-1
and \fIerrno\fP will be set to
.BR EINTR .
.PP
If the \fIflag\fP argument is true (1) and data transfer has started,
then the system call will be interrupted and will return the actual
amount of data transferred.
.SH RETURN VALUE
The
.BR siginterrupt ()
function returns 0 on success.
It returns \-1 if the
signal number
.I sig
is invalid, with
.I errno
set to indicate the cause of the error.
.SH ERRORS
.TP
.B EINVAL
The specified signal number is invalid.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR siginterrupt ()
T}	Thread safety	MT-Unsafe const:sigintr
.TE
.SH CONFORMING TO
4.3BSD, POSIX.1-2001.
POSIX.1-2008 marks
.BR siginterrupt ()
as obsolete, recommending the use of
.BR sigaction (2)
with the
.B SA_RESTART
flag instead.
.SH SEE ALSO
.BR signal (2)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 2002 Walter Harms (walter.harms@informatik.uni-oldenburg.de)
.\" and Copyright 2008, Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(GPL_NOVERSION_ONELINE)
.\" Distributed under GPL
.\" %%%LICENSE_END
.\"
.\" Based on glibc infopages, copyright Free Software Foundation
.\"
.TH SIGNBIT 3 2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
signbit \- test sign of a real floating-point number
.SH SYNOPSIS
.B "#include <math.h>"
.sp
.BI  "int signbit(" x ");"
.sp
Link with \fI\-lm\fP.
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR signbit ():
.RS 4
_XOPEN_SOURCE\ >=\ 600 || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.ad
.SH DESCRIPTION
.BR signbit ()
is a generic macro which can work on all real floating-point types.
It returns a nonzero value if the value of
.I x
has its sign bit set.
.PP
This is not the same as
.IR "x < 0.0" ,
because IEEE 754 floating point allows zero to be signed.
The comparison
.IR "-0.0 < 0.0"
is false, but
.IR "signbit(\-0.0)"
will return a nonzero value.

NaNs and infinities have a sign bit.
.SH RETURN VALUE
The
.BR signbit ()
macro returns nonzero if the sign of
.I x
is negative; otherwise it returns zero.
.SH ERRORS
No errors occur.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR signbit ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C99, POSIX.1-2001.
This function is defined in IEC 559 (and the appendix with
recommended functions in IEEE 754/IEEE 854).
.SH SEE ALSO
.BR copysign (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 2002 Walter Harms (walter.harms@informatik.uni-oldenburg.de)
.\"
.\" %%%LICENSE_START(GPL_NOVERSION_ONELINE)
.\" Distributed under GPL
.\" %%%LICENSE_END
.\"
.\" heavily based on glibc infopages, copyright Free Software Foundation
.\"
.TH SIGNIFICAND 3 2015-04-19 "GNU" "Linux Programmer's Manual"
.SH NAME
significand, significandf, significandl \-
get mantissa of floating-point number
.SH SYNOPSIS
.B #include <math.h>
.sp
.BI "double significand(double " x );
.br
.BI "float significandf(float " x );
.br
.BI "long double significandl(long double " x );
.sp
Link with \fI\-lm\fP.
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR significand (),
.BR significandf (),
.BR significandl ():
.RS 4
_SVID_SOURCE || _BSD_SOURCE
.RE
.ad b
.SH DESCRIPTION
These functions return the mantissa of
.I x
scaled to the range [1,2).
They are equivalent to
.sp
.in +4n
scalb(x, (double) \-ilogb(x))
.in
.PP
This function exists mainly for use in certain standardized tests
for IEEE 754 conformance.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR significand (),
.br
.BR significandf (),
.br
.BR significandl ()
T}	Thread safety	MT-Safe
.TE

.SH CONFORMING TO
These functions are nonstandard; the
.I double
version is available on a number of other systems.
.\" .SH HISTORY
.\" This function came from BSD.
.SH SEE ALSO
.BR ilogb (3),
.BR scalb (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2004 Andries Brouwer (aeb@cwi.nl)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH SIGPAUSE 3 2015-03-02 "Linux" "Linux Programmer's Manual"
.SH NAME
sigpause \- atomically release blocked signals and wait for interrupt
.SH SYNOPSIS
.nf
.B #include <signal.h>
.sp
.BI "int sigpause(int " sigmask ");  /* BSD (but see NOTES) */"
.sp
.BI "int sigpause(int " sig ");      /* System V / UNIX 95 */"
.fi
.SH DESCRIPTION
Don't use this function.
Use
.BR sigsuspend (2)
instead.
.LP
The function
.BR sigpause ()
is designed to wait for some signal.
It changes the process's signal mask (set of blocked signals),
and then waits for a signal to arrive.
Upon arrival of a signal, the original signal mask is restored.
.SH RETURN VALUE
If
.BR sigpause ()
returns, it was interrupted by a signal and the return value is \-1
with
.I errno
set to
.BR EINTR .
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR sigpause ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
The System V version of
.BR sigpause ()
is standardized in POSIX.1-2001.
.SH NOTES
.SS History
The classical BSD version of this function appeared in 4.2BSD.
It sets the process's signal mask to
.IR sigmask .
UNIX 95 standardized the incompatible System V version of
this function, which removes only the specified signal
.I sig
from the process's signal mask.
.\" __xpg_sigpause: UNIX 95, spec 1170, SVID, SVr4, XPG
The unfortunate situation with two incompatible functions with the
same name was solved by the
.BR \%sigsuspend (2)
function, that takes a
.I "sigset_t\ *"
argument (instead of an
.IR int ).
.SS Linux notes
On Linux, this routine is a system call only on the Sparc (sparc64)
architecture.

.\" Libc4 and libc5 know only about the BSD version.
.\"
Glibc uses the BSD version if the
.B _BSD_SOURCE
feature test macro is defined and none of
.BR _POSIX_SOURCE ,
.BR _POSIX_C_SOURCE ,
.BR _XOPEN_SOURCE ,
.BR _GNU_SOURCE ,
or
.B _SVID_SOURCE
is defined.
Otherwise, the System V version is used (and
.BR _XOPEN_SOURCE
must be defined to obtain the declaration).
Since glibc 2.19, only the System V version is exposed by
.IR <signal.h> ;
applications that formerly used the BSD
.BR sigpause ()
should be amended to use
.BR sigsuspend (2).
.\"
.\" For the BSD version, one usually uses a zero
.\" .I sigmask
.\" to indicate that no signals are to be blocked.
.SH SEE ALSO
.BR kill (2),
.BR sigaction (2),
.BR sigprocmask (2),
.BR sigsuspend (2),
.BR sigblock (3),
.BR sigvec (3),
.BR feature_test_macros (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2002 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" added note on self-signaling, aeb, 2002-06-07
.\" added note on CAP_KILL, mtk, 2004-06-16
.\"
.TH SIGQUEUE 3 2015-03-02 "Linux" "Linux Programmer's Manual"
.SH NAME
sigqueue \- queue a signal and data to a process
.SH SYNOPSIS
.B #include <signal.h>
.sp
.BI "int sigqueue(pid_t " pid ", int " sig ", const union sigval " value );
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR sigqueue ():
_POSIX_C_SOURCE\ >=\ 199309L
.SH DESCRIPTION
.BR sigqueue ()
sends the signal specified in
.I sig
to the process whose PID is given in
.IR pid .
The permissions required to send a signal are the same as for
.BR kill (2).
As with
.BR kill (2),
the null signal (0) can be used to check if a process with a given
PID exists.
.PP
The
.I value
argument is used to specify an accompanying item of data (either an integer
or a pointer value) to be sent with the signal, and has the following type:
.sp
.in +4n
.nf
union sigval {
    int   sival_int;
    void *sival_ptr;
};
.fi
.in

If the receiving process has installed a handler for this signal using the
.B SA_SIGINFO
flag to
.BR sigaction (2),
then it can obtain this data via the
.I si_value
field of the
.I siginfo_t
structure passed as the second argument to the handler.
Furthermore, the
.I si_code
field of that structure will be set to
.BR SI_QUEUE .
.SH RETURN VALUE
On success,
.BR sigqueue ()
returns 0, indicating that the signal was successfully
queued to the receiving process.
Otherwise, \-1 is returned and
.I errno
is set to indicate the error.
.SH ERRORS
.TP
.B EAGAIN
The limit of signals which may be queued has been reached.
(See
.BR signal (7)
for further information.)
.TP
.B EINVAL
.I sig
was invalid.
.TP
.B EPERM
The process does not have permission to send the signal
to the receiving process.
For the required permissions, see
.BR kill (2).
.TP
.B ESRCH
No process has a PID matching
.IR pid .
.SH VERSIONS
.BR sigqueue ()
and the underlying
.BR rt_sigqueueinfo ()
system call first appeared in Linux 2.2.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR sigqueue ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
POSIX.1-2001.
.SH NOTES
If this function results in the sending of a signal to the process
that invoked it, and that signal was not blocked by the calling thread,
and no other threads were willing to handle this signal (either by
having it unblocked, or by waiting for it using
.BR sigwait (3)),
then at least some signal must be delivered to this thread before this
function returns.
.SS C library/kernel ABI differences
On Linux,
.BR sigqueue ()
is implemented using the
.BR rt_sigqueueinfo (2)
system call.
The system call differs in its third argument, which is the
.I siginfo_t
structure that will be supplied to the receiving process's
signal handler or returned by the receiving process's
.BR sigtimedwait (2)
call.
Inside the glibc
.BR sigqueue ()
wrapper, this argument,
.IR uinfo ,
is initialized as follows:
.in +4n
.nf

uinfo.si_signo = sig;      /* Argument supplied to sigqueue() */
uinfo.si_code = SI_QUEUE;
uinfo.si_pid = getpid();   /* Process ID of sender */
uinfo.si_uid = getuid();   /* Real UID of sender */
uinfo.si_value = val;      /* Argument supplied to sigqueue() */
.fi
.in
.SH SEE ALSO
.BR kill (2),
.BR rt_sigqueueinfo (2),
.BR sigaction (2),
.BR signal (2),
.BR pthread_sigqueue (3),
.BR sigwait (3),
.BR signal (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
'\" t
.\" Copyright (c) 2005 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH SIGSET 3 2015-03-02 "Linux" "Linux Programmer's Manual"
.SH NAME
sigset, sighold, sigrelse, sigignore \- System V signal API
.SH SYNOPSIS
.B #include <signal.h>
.sp
.B typedef void (*sighandler_t)(int);
.sp
.BI "sighandler_t sigset(int " sig ", sighandler_t " disp );
.sp
.BI "int sighold(int " sig );
.sp
.BI "int sigrelse(int " sig );
.sp
.BI "int sigignore(int " sig );
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR sigset (),
.BR sighold (),
.BR sigrelse (),
.BR sigignore ():
.br
.RS 4
_XOPEN_SOURCE\ >=\ 500 ||
_XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED
.RE
.ad
.SH DESCRIPTION
These functions are provided in glibc as a compatibility interface
for programs that make use of the historical System V signal API.
This API is obsolete: new applications should use the POSIX signal API
.RB ( sigaction (2),
.BR sigprocmask (2),
etc.)

The
.BR sigset ()
function modifies the disposition of the signal
.IR sig .
The
.I disp
argument can be the address of a signal handler function,
or one of the following constants:
.TP
.B SIG_DFL
Reset the disposition of
.I sig
to the default.
.TP
.B SIG_IGN
Ignore
.IR sig .
.TP
.B SIG_HOLD
Add
.I sig
to the process's signal mask, but leave the disposition of
.I sig
unchanged.
.PP
If
.I disp
specifies the address of a signal handler, then
.I sig
is added to the process's signal mask during execution of the handler.
.PP
If
.I disp
was specified as a value other than
.BR SIG_HOLD ,
then
.I sig
is removed from the process's signal mask.
.PP
The dispositions for
.B SIGKILL
and
.B SIGSTOP
cannot be changed.
.PP
The
.BR sighold ()
function adds
.I sig
to the calling process's signal mask.

The
.BR sigrelse ()
function removes
.I sig
from the calling process's signal mask.

The
.BR sigignore ()
function sets the disposition of
.I sig
to
.BR SIG_IGN .
.SH RETURN VALUE
On success,
.BR sigset ()
returns
.B SIG_HOLD
if
.I sig
was blocked before the call,
or the signal's previous disposition
if it was not blocked before the call.
On error,
.BR sigset ()
returns \-1, with
.I errno
set to indicate the error.
(But see BUGS below.)

The
.BR sighold (),
.BR sigrelse (),
and
.BR sigignore ()
functions return 0 on success; on error, these functions return \-1 and set
.I errno
to indicate the error.
.SH ERRORS
For
.BR sigset ()
see the ERRORS under
.BR sigaction (2)
and
.BR sigprocmask (2).

For
.BR sighold ()
and
.BR sigrelse ()
see the ERRORS under
.BR sigprocmask (2).

For
.BR sigignore (),
see the errors under
.BR sigaction (2).
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw23 lb lb
l l l.
Interface	Attribute	Value
T{
.BR sigset (),
.BR sighold (),
.br
.BR sigrelse (),
.BR sigignore ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
SVr4, POSIX.1-2001.
These functions are obsolete: do not use them in new programs.
POSIX.1-2008 marks
.BR sighold (),
.BR sigignore (),
.BR sigpause (),
.BR sigrelse (),
and
.BR sigset ()
as obsolete, recommending the use of
.BR sigaction (2),
.BR sigprocmask (2),
.BR pthread_sigmask (3),
and
.BR sigsuspend (2)
instead.
.SH NOTES
These functions appeared in glibc version 2.1.

The
.I sighandler_t
type is a GNU extension; it is used on this page only to make the
.BR sigset ()
prototype more easily readable.

The
.BR sigset ()
function provides reliable signal handling semantics (as when calling
.BR sigaction (2)
with
.I sa_mask
equal to 0).

On System V, the
.BR signal ()
function provides unreliable semantics (as when calling
.BR sigaction (2)
with
.I sa_mask
equal to
.IR "SA_RESETHAND | SA_NODEFER" ).
On BSD,
.BR signal ()
provides reliable semantics.
POSIX.1-2001 leaves these aspects of
.BR signal ()
unspecified.
See
.BR signal (2)
for further details.

In order to wait for a signal,
BSD and System V both provided a function named
.BR sigpause (3),
but this function has a different argument on the two systems.
See
.BR sigpause (3)
for details.
.SH BUGS
In versions of glibc before 2.2,
.BR sigset ()
did not unblock
.I sig
if
.I disp
was specified as a value other than
.BR SIG_HOLD .

In versions of glibc before 2.5,
.BR sigset ()
does not correctly return the previous disposition of the signal
in two cases.
First, if
.I disp
is specified as
.BR SIG_HOLD ,
then a successful
.BR sigset ()
always returns
.BR SIG_HOLD .
Instead, it should return the previous disposition of the signal
(unless the signal was blocked, in which case
.B SIG_HOLD
should be returned).
Second, if the signal is currently blocked, then
the return value of a successful
.BR sigset ()
should be
.BR SIG_HOLD .
Instead, the previous disposition of the signal is returned.
These problems have been fixed since glibc 2.5.
.\" See http://sourceware.org/bugzilla/show_bug.cgi?id=1951
.SH SEE ALSO
.BR kill (2),
.BR pause (2),
.BR sigaction (2),
.BR signal (2),
.BR sigprocmask (2),
.BR raise (3),
.BR sigpause (3),
.BR sigvec (3),
.BR signal (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1994 Mike Battersby
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified by aeb, 960721
.\" 2005-11-21, mtk, added descriptions of sigisemptyset(), sigandset(),
.\"                  and sigorset()
.\" 2007-10-26 mdw   added wording that a sigset_t must be initialized
.\"                  prior to use
.\"
.TH SIGSETOPS 3 2015-03-02 "Linux" "Linux Programmer's Manual"
.SH NAME
sigemptyset, sigfillset, sigaddset, sigdelset, sigismember \- POSIX
signal set operations
.SH SYNOPSIS
.B #include <signal.h>
.sp
.BI "int sigemptyset(sigset_t *" set );
.sp
.BI "int sigfillset(sigset_t *" set );
.sp
.BI "int sigaddset(sigset_t *" set ", int " signum );
.sp
.BI "int sigdelset(sigset_t *" set ", int " signum );
.sp
.BI "int sigismember(const sigset_t *" set ", int " signum );
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR sigemptyset (),
.BR sigfillset (),
.BR sigaddset (),
.BR sigdelset (),
.BR sigismember ():
.RS 4
_POSIX_C_SOURCE\ >=\ 1 || _XOPEN_SOURCE || _POSIX_SOURCE
.RE
.ad b
.SH DESCRIPTION
These functions allow the manipulation of POSIX signal sets.
.PP
.BR sigemptyset ()
initializes the signal set given by
.I set
to empty, with all signals excluded from the set.
.PP
.BR sigfillset ()
initializes
.I set
to full, including all signals.
.PP
.BR sigaddset ()
and
.BR sigdelset ()
add and delete respectively signal
.I signum
from
.IR set .
.PP
.BR sigismember ()
tests whether
.I signum
is a member of
.IR set .
.PP
Objects of type
.I sigset_t
must be initialized by a call to either
.BR sigemptyset ()
or
.BR sigfillset ()
before being passed to the functions
.BR sigaddset (),
.BR sigdelset ()
and
.BR sigismember ()
or the additional glibc functions described below
.RB ( sigisemptyset (),
.BR sigandset (),
and
.BR sigorset ()).
The results are undefined if this is not done.
.SH RETURN VALUE
.BR sigemptyset (),
.BR sigfillset (),
.BR sigaddset (),
and
.BR sigdelset ()
return 0 on success and \-1 on error.
.PP
.BR sigismember ()
returns 1 if
.I signum
is a member of
.IR set ,
0 if
.I signum
is not a member, and \-1 on error.

On error, these functions set
.I errno
to indicate the cause of the error.
.SH ERRORS
.TP
.B EINVAL
.I sig
is not a valid signal.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw31 lb lb
l l l.
Interface	Attribute	Value
T{
.BR sigemptyset (),
.BR sigfillset (),
.br
.BR sigaddset (),
.BR sigdelset (),
.br
.BR sigismember (),
.BR sigisemptyset (),
.br
.BR sigorset (),
.BR sigandset ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
POSIX.1-2001.
.SH NOTES
When creating a filled signal set, the glibc
.BR sigfillset ()
function does not include the two real-time signals used internally
by the NPTL threading implementation.
See
.BR nptl (7)
for details.

.SS Glibc extensions
If the
.B _GNU_SOURCE
feature test macro is defined, then \fI<signal.h>\fP
exposes three other functions for manipulating signal
sets:

.nf
.BI "int sigisemptyset(const sigset_t *" set );
.BI "int sigorset(sigset_t *" dest ", const sigset_t *" left ,
.BI "              const sigset_t *" right );
.BI "int sigandset(sigset_t *" dest ", const sigset_t *" left ,
.BI "              const sigset_t *" right );
.fi

.BR sigisemptyset ()
returns 1 if
.I set
contains no signals, and 0 otherwise.

.BR sigorset ()
places the union of the sets
.I left
and
.I right
in
.IR dest .
.BR sigandset ()
places the intersection of the sets
.I left
and
.I right
in
.IR dest .
Both functions return 0 on success, and \-1 on failure.
.PP
These functions are nonstandard (a few other systems provide similar
functions) and their use should be avoided in portable applications.
.SH SEE ALSO
.BR sigaction (2),
.BR sigpending (2),
.BR sigprocmask (2),
.BR sigsuspend (2)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
'\" t
.\" Copyright (c) 2005 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH SIGVEC 3 2015-03-02 "Linux" "Linux Programmer's Manual"
.SH NAME
sigvec, sigblock, sigsetmask, siggetmask, sigmask \- BSD signal API
.SH SYNOPSIS
.B #include <signal.h>
.sp
.BI "int sigvec(int " sig ", const struct sigvec *" vec ", struct sigvec *" ovec );
.sp
.BI "int sigmask(int " signum );
.sp
.BI "int sigblock(int " mask );
.sp
.BI "int sigsetmask(int " mask );
.sp
.B int siggetmask(void);
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
All functions shown above:
_BSD_SOURCE
.SH DESCRIPTION
These functions are provided in glibc as a compatibility interface
for programs that make use of the historical BSD signal API.
This API is obsolete: new applications should use the POSIX signal API
.RB ( sigaction (2),
.BR sigprocmask (2),
etc.).

The
.BR sigvec ()
function sets and/or gets the disposition of the signal
.I sig
(like the POSIX
.BR sigaction (2)).
If
.I vec
is not NULL, it points to a
.I sigvec
structure that defines the new disposition for
.IR sig .
If
.I ovec
is not NULL, it points to a
.I sigvec
structure that is used to return the previous disposition of
.IR sig .
To obtain the current disposition of
.I sig
without changing it, specify NULL for
.IR vec ,
and a non-null pointer for
.IR ovec .

The dispositions for
.B SIGKILL
and
.B SIGSTOP
cannot be changed.

The
.I sigvec
structure has the following form:
.in +4n
.nf

struct sigvec {
    void (*sv_handler)(int); /* Signal disposition */
    int    sv_mask;          /* Signals to be blocked in handler */
    int    sv_flags;         /* Flags */
};

.fi
.in
The
.I sv_handler
field specifies the disposition of the signal, and is either:
the address of a signal handler function;
.BR SIG_DFL ,
meaning the default disposition applies for the signal; or
.BR SIG_IGN ,
meaning that the signal is ignored.

If
.I sv_handler
specifies the address of a signal handler, then
.I sv_mask
specifies a mask of signals that are to be blocked while
the handler is executing.
In addition, the signal for which the handler is invoked is
also blocked.
Attempts to block
.B SIGKILL
or
.B SIGSTOP
are silently ignored.

If
.I sv_handler
specifies the address of a signal handler, then the
.I sv_flags
field specifies flags controlling what happens when the handler is called.
This field may contain zero or more of the following flags:
.TP
.B SV_INTERRUPT
If the signal handler interrupts a blocking system call,
then upon return from the handler the system call will not be restarted:
instead it will fail with the error
.BR EINTR .
If this flag is not specified, then system calls are restarted
by default.
.TP
.B SV_RESETHAND
Reset the disposition of the signal to the default
before calling the signal handler.
If this flag is not specified, then the handler remains established
until explicitly removed by a later call to
.BR sigvec ()
or until the process performs an
.BR execve (2).
.TP
.B SV_ONSTACK
Handle the signal on the alternate signal stack
(historically established under BSD using the obsolete
.BR sigstack ()
function; the POSIX replacement is
.BR sigaltstack (2)).
.PP
The
.BR sigmask ()
macro constructs and returns a "signal mask" for
.IR signum .
For example, we can initialize the
.I vec.sv_mask
field given to
.BR sigvec ()
using code such as the following:
.nf

    vec.sv_mask = sigmask(SIGQUIT) | sigmask(SIGABRT);
                /* Block SIGQUIT and SIGABRT during
                   handler execution */
.fi
.PP
The
.BR sigblock ()
function adds the signals in
.I mask
to the process's signal mask
(like POSIX
.IR sigprocmask(SIG_BLOCK) ),
and returns the process's previous signal mask.
Attempts to block
.B SIGKILL
or
.B SIGSTOP
are silently ignored.
.PP
The
.BR sigsetmask ()
function sets the process's signal mask to the value given in
.I mask
(like POSIX
.IR sigprocmask(SIG_SETMASK) ),
and returns the process's previous signal mask.
.PP
The
.BR siggetmask ()
function returns the process's current signal mask.
This call is equivalent to
.IR sigblock(0) .
.SH RETURN VALUE
The
.BR sigvec ()
function returns 0 on success; on error, it returns \-1 and sets
.I errno
to indicate the error.

The
.BR sigblock ()
and
.BR sigsetmask ()
functions return the previous signal mask.

The
.BR sigmask ()
macro returns the signal mask for
.IR signum .
.SH ERRORS
See the ERRORS under
.BR sigaction (2)
and
.BR sigprocmask (2).
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw32 lb lb
l l l.
Interface	Attribute	Value
T{
.BR sigvec (),
.BR sigmask (),
.BR sigblock (),
.BR sigsetmask (),
.BR siggetmask ()
T}	Thread safety	MT-Safe
.TE
.SH VERSIONS
Starting with version 2.21, the GNU C library no longer exports the
.BR sigvec ()
function as part of the ABI.
(To ensure backward compatibility,
the glibc symbol versioning scheme continues to export the interface
to binaries linked against older versions of the library.)
.SH CONFORMING TO
All of these functions were in
4.3BSD, except
.BR siggetmask (),
whose origin is unclear.
These functions are obsolete: do not use them in new programs.
.SH NOTES
On 4.3BSD, the
.BR signal ()
function provided reliable semantics (as when calling
.BR sigvec ()
with
.I vec.sv_mask
equal to 0).
On System V,
.BR signal ()
provides unreliable semantics.
POSIX.1-2001 leaves these aspects of
.BR signal ()
unspecified.
See
.BR signal (2)
for further details.

In order to wait for a signal,
BSD and System V both provided a function named
.BR sigpause (3),
but this function has a different argument on the two systems.
See
.BR sigpause (3)
for details.
.SH SEE ALSO
.BR kill (2),
.BR pause (2),
.BR sigaction (2),
.BR signal (2),
.BR sigprocmask (2),
.BR raise (3),
.BR sigpause (3),
.BR sigset (3),
.BR signal (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2008, Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH SIGWAIT 3 2015-03-02 "Linux" "Linux Programmer's Manual"
.SH NAME
sigwait \- wait for a signal
.SH SYNOPSIS
.nf
.B #include <signal.h>

.BI " int sigwait(const sigset_t *" set ", int *" sig );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR sigwait ():
_POSIX_C_SOURCE\ >=\ 1 || _XOPEN_SOURCE || _POSIX_SOURCE
.ad b
.SH DESCRIPTION
The
.BR sigwait ()
function suspends execution of the calling thread until
one of the signals specified in the signal set
.IR set
becomes pending.
The function accepts the signal
(removes it from the pending list of signals),
and returns the signal number in
.IR sig .

The operation of
.BR sigwait ()
is the same as
.BR sigwaitinfo (2),
except that:
.IP * 2
.BR sigwait ()
returns only the signal number, rather than a
.I siginfo_t
structure describing the signal.
.IP *
The return values of the two functions are different.
.SH RETURN VALUE
On success,
.BR sigwait ()
returns 0.
On error, it returns a positive error number (listed in ERRORS).
.SH ERRORS
.TP
.B EINVAL
.\" Does not occur for glibc.
.I set
contains an invalid signal number.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR sigwait ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
POSIX.1-2001.
.SH NOTES
.BR sigwait ()
is implemented using
.BR sigtimedwait (2).

The glibc implementation of
.BR sigwait ()
silently ignores attempts to wait for the two real-time signals that
are used internally by the NPTL threading implementation.
See
.BR nptl (7)
for details.
.SH EXAMPLE
See
.BR pthread_sigmask (3).
.SH SEE ALSO
.BR sigaction (2),
.BR signalfd (2),
.BR sigpending (2),
.BR sigsuspend (2),
.BR sigwaitinfo (2),
.BR sigsetops (3),
.BR signal (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\" and Copyright 2008, Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified 1993-07-24 by Rik Faith (faith@cs.unc.edu)
.\" Modified 2002-07-27 by Walter Harms
.\" 	(walter.harms@informatik.uni-oldenburg.de)
.\"
.TH SIN 3  2015-04-19 "" "Linux Programmer's Manual"
.SH NAME
sin, sinf, sinl \- sine function
.SH SYNOPSIS
.nf
.B #include <math.h>
.sp
.BI "double sin(double " x );
.br
.BI "float sinf(float " x );
.br
.BI "long double sinl(long double " x );
.fi
.sp
Link with \fI\-lm\fP.
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR sinf (),
.BR sinl ():
.RS 4
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE\ >=\ 600 || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.ad
.SH DESCRIPTION
These functions return the sine of
.IR x ,
where
.I x
is
given in radians.
.SH RETURN VALUE
On success, these functions return the sine of
.IR x .

If
.I x
is a NaN, a NaN is returned.

If
.I x
is positive infinity or negative infinity,
a domain error occurs,
and a NaN is returned.
.\"
.\" POSIX.1 allows an optional range error for subnormal x
.\" glibc 2.8 doesn't do this
.SH ERRORS
See
.BR math_error (7)
for information on how to determine whether an error has occurred
when calling these functions.
.PP
The following errors can occur:
.TP
Domain error: \fIx\fP is an infinity
.I errno
is set to
.BR EDOM
(but see BUGS).
An invalid floating-point exception
.RB ( FE_INVALID )
is raised.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw21 lb lb
l l l.
Interface	Attribute	Value
T{
.BR sin (),
.BR sinf (),
.BR sinl ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C99, POSIX.1-2001, POSIX.1-2008.

The variant returning
.I double
also conforms to
SVr4, 4.3BSD, C89.
.SH BUGS
Before version 2.10, the glibc implementation did not set
.\" http://sources.redhat.com/bugzilla/show_bug.cgi?id=6781
.I errno
to
.B EDOM
when a domain error occurred.
.SH SEE ALSO
.BR acos (3),
.BR asin (3),
.BR atan (3),
.BR atan2 (3),
.BR cos (3),
.BR csin (3),
.BR sincos (3),
.BR tan (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 2002 Walter Harms (walter.harms@informatik.uni-oldenburg.de)
.\" and Copyright 2008, Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(GPL_NOVERSION_ONELINE)
.\" Distributed under GPL
.\" %%%LICENSE_END
.\"
.TH SINCOS 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
sincos, sincosf, sincosl \- calculate sin and cos simultaneously
.SH SYNOPSIS
.nf
.BR "#define _GNU_SOURCE" "         /* See feature_test_macros(7) */"
.B #include <math.h>
.sp
.BI "void sincos(double " x ", double *" sin ", double *" cos );
.br
.BI "void sincosf(float " x ", float *" sin ", float *" cos );
.br
.BI "void sincosl(long double " x ", long double *" sin ", long double *" cos );
.fi
.sp
Link with \fI\-lm\fP.
.SH DESCRIPTION
Several applications need sine and cosine of the same angle
.IR x .
These functions compute both at the same time, and store the results in
.I *sin
and
.IR *cos .

If
.I x
is a NaN,
a NaN is returned in
.I *sin
and
.IR *cos .

If
.I x
is positive infinity or negative infinity,
a domain error occurs, and
a NaN is returned in
.I *sin
and
.IR *cos .
.SH RETURN VALUE
These functions return
.IR void .
.SH ERRORS
See
.BR math_error (7)
for information on how to determine whether an error has occurred
when calling these functions.
.PP
The following errors can occur:
.TP
Domain error: \fIx\fP is an infinity
.\" .I errno
.\" is set to
.\" .BR EDOM .
An invalid floating-point exception
.RB ( FE_INVALID )
is raised.
.PP
These functions do not set
.IR errno .
.\" FIXME . Is it intentional that these functions do not set errno?
.\" sin() and cos() also don't set errno; bugs have been raised for
.\" those functions.
.\" See https://www.sourceware.org/bugzilla/show_bug.cgi?id=15467
.SH VERSIONS
These functions first appeared in glibc in version 2.1.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw30 lb lb
l l l.
Interface	Attribute	Value
T{
.BR sincos (),
.BR sincosf (),
.BR sincosl ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
These functions are GNU extensions.
.SH SEE ALSO
.BR cos (3),
.BR sin (3),
.BR tan (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\" and Copyright 2008, Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified 1993-07-24 by Rik Faith (faith@cs.unc.edu)
.\" Modified 1996-06-08 by aeb
.\" Modified 2002-07-27 by Walter Harms
.\" 	(walter.harms@informatik.uni-oldenburg.de)
.\"
.TH SINH 3  2015-04-19 "" "Linux Programmer's Manual"
.SH NAME
sinh, sinhf, sinhl \- hyperbolic sine function
.SH SYNOPSIS
.nf
.B #include <math.h>
.sp
.BI "double sinh(double " x );
.br
.BI "float sinhf(float " x );
.br
.BI "long double sinhl(long double " x );
.fi
.sp
Link with \fI\-lm\fP.
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR sinhf (),
.BR sinhl ():
.RS 4
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE\ >=\ 600 || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.ad
.SH DESCRIPTION
These functions return the hyperbolic sine of
.IR x ,
which
is defined mathematically as:
.nf

    sinh(x) = (exp(x) \- exp(\-x)) / 2
.fi
.SH RETURN VALUE
On success, these functions return the hyperbolic sine of
.IR x .

If
.I x
is a NaN, a NaN is returned.

If
.I x
is +0 (\-0), +0 (\-0) is returned.

If
.I x
is positive infinity (negative infinity),
positive infinity (negative infinity) is returned.

If the result overflows,
a range error occurs,
and the functions return
.BR HUGE_VAL ,
.BR HUGE_VALF ,
or
.BR HUGE_VALL ,
respectively, with the same sign as
.IR x .
.\"
.\" POSIX.1-2001 documents an optional range error (underflow)
.\" for subnormal x;
.\" glibc 2.8 does not do this.
.SH ERRORS
See
.BR math_error (7)
for information on how to determine whether an error has occurred
when calling these functions.
.PP
The following errors can occur:
.TP
Range error: result overflow
.I errno
is set to
.BR ERANGE .
An overflow floating-point exception
.RB ( FE_OVERFLOW )
is raised.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw24 lb lb
l l l.
Interface	Attribute	Value
T{
.BR sinh (),
.BR sinhf (),
.BR sinhl ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C99, POSIX.1-2001, POSIX.1-2008.

The variant returning
.I double
also conforms to
SVr4, 4.3BSD, C89.
.SH SEE ALSO
.BR acosh (3),
.BR asinh (3),
.BR atanh (3),
.BR cosh (3),
.BR csinh (3),
.BR tanh (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1993 by Thomas Koenig (ig25@rz.uni-karlsruhe.de)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified Sat Jul 24 18:16:02 1993 by Rik Faith (faith@cs.unc.edu)
.TH SLEEP 3  2015-05-07 "GNU" "Linux Programmer's Manual"
.SH NAME
sleep \- sleep for the specified number of seconds
.SH SYNOPSIS
.nf
.B #include <unistd.h>
.sp
.BI "unsigned int sleep(unsigned int " "seconds" );
.fi
.SH DESCRIPTION
.BR sleep ()
makes the calling thread sleep until
.I seconds
seconds have elapsed or a signal arrives which is not ignored.
.SH RETURN VALUE
Zero if the requested time has elapsed,
or the number of seconds left to sleep,
if the call was interrupted by a signal handler.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lbw27
l l l.
Interface	Attribute	Value
T{
.BR sleep ()
T}	Thread safety	MT-Unsafe sig:SIGCHLD/linux
.TE

.SH CONFORMING TO
POSIX.1-2001.
.SH BUGS
.BR sleep ()
may be implemented using
.BR SIGALRM ;
mixing calls to
.BR alarm (2)
and
.BR sleep ()
is a bad idea.
.PP
Using
.BR longjmp (3)
from a signal handler or modifying the handling of
.B SIGALRM
while sleeping will cause undefined results.
.SH SEE ALSO
.BR alarm (2),
.BR nanosleep (2),
.BR signal (2),
.BR signal (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2006, Michael Kerrisk (mtk.manpages@gmail.com)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH SOCKATMARK 3 2015-03-02 "Linux" "Linux Programmer's Manual"
.SH NAME
sockatmark \- determine whether socket is at out-of-band mark
.SH SYNOPSIS
.B #include <sys/socket.h>
.sp
.BI "int sockatmark(int " sockfd );
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR sockatmark ():
_POSIX_C_SOURCE\ >=\ 200112L || _XOPEN_SOURCE\ >=\ 600
.ad b
.SH DESCRIPTION
.BR sockatmark ()
returns a value indicating whether or not the socket referred
to by the file descriptor
.I sockfd
is at the out-of-band mark.
If the socket is at the mark, then 1 is returned;
if the socket is not at the mark, 0 is returned.
This function does not remove the out-of-band mark.
.SH RETURN VALUE
A successful call to
.BR sockatmark ()
returns 1 if the socket is at the out-of-band mark, or 0 if it is not.
On error, \-1 is returned and
.I errno
is set to indicate the error.
.SH ERRORS
.TP
.B EBADF
.I sockfd
is not a valid file descriptor.
.TP
.B EINVAL
.\" POSIX.1 says ENOTTY for this case
.I sockfd
is not a file descriptor to which
.BR sockatmark ()
can be applied.
.SH VERSIONS
.BR sockatmark ()
was added to glibc in version 2.2.4.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR sockatmark ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
POSIX.1-2001.
.SH NOTES
If
.BR sockatmark ()
returns 1, then the out-of-band data can be read using the
.B MSG_OOB
flag of
.BR recv (2).

Out-of-band data is supported only on some stream socket protocols.

.BR sockatmark ()
can safely be called from a handler for the
.B SIGURG
signal.

.BR sockatmark ()
is implemented using the
.B SIOCATMARK
.BR ioctl (2)
operation.
.SH BUGS
Prior to glibc 2.4,
.BR sockatmark ()
did not work.
.SH EXAMPLE
The following code can be used after receipt of a
.B SIGURG
signal to read (and discard) all data up to the mark,
and then read the byte of data at the mark:
.nf

    char buf[BUF_LEN];
    char oobdata;
    int atmark, s;

    for (;;) {
        atmark = sockatmark(sockfd);
        if (atmark == \-1) {
            perror("sockatmark");
            break;
        }

        if (atmark)
            break;

        s = read(sockfd, buf, BUF_LEN) <= 0);
        if (s == \-1)
            perror("read");
        if (s <= 0)
            break;
    }

    if (atmark == 1) {
        if (recv(sockfd, &oobdata, 1, MSG_OOB) == \-1) {
            perror("recv");
            ...
        }
    }
.fi
.SH SEE ALSO
.BR fcntl (2),
.BR recv (2),
.BR send (2),
.BR tcp (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\" and Copyright 2008, Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified 1993-07-24 by Rik Faith (faith@cs.unc.edu)
.\" Modified 2002-07-27 by Walter Harms
.\" 	(walter.harms@informatik.uni-oldenburg.de)
.TH SQRT 3  2015-04-19 ""  "Linux Programmer's Manual"
.SH NAME
sqrt, sqrtf, sqrtl \- square root function
.SH SYNOPSIS
.nf
.B #include <math.h>
.sp
.BI "double sqrt(double " x );
.br
.BI "float sqrtf(float " x );
.br
.BI "long double sqrtl(long double " x );
.fi
.sp
Link with \fI\-lm\fP.
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR sqrtf (),
.BR sqrtl ():
.RS 4
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE\ >=\ 600 || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.ad
.SH DESCRIPTION
These functions return the nonnegative square root of
.IR x .
.SH RETURN VALUE
On success, these functions return the square root of
.IR x .

If
.I x
is a NaN, a NaN is returned.

If
.I x
is +0 (\-0), +0 (\-0) is returned.

If
.I x
is positive infinity, positive infinity is returned.

If
.I x
is less than \-0,
a domain error occurs,
and a NaN is returned.
.SH ERRORS
See
.BR math_error (7)
for information on how to determine whether an error has occurred
when calling these functions.
.PP
The following errors can occur:
.TP
Domain error: \fIx\fP less than \-0
.I errno
is set to
.BR EDOM .
An invalid floating-point exception
.RB ( FE_INVALID )
is raised.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw24 lb lb
l l l.
Interface	Attribute	Value
T{
.BR sqrt (),
.BR sqrtf (),
.BR sqrtl ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C99, POSIX.1-2001, POSIX.1-2008.

The variant returning
.I double
also conforms to
SVr4, 4.3BSD, C89.
.SH SEE ALSO
.BR cbrt (3),
.BR csqrt (3),
.BR hypot (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2003 Andries Brouwer (aeb@cwi.nl)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" The pathconf note is from Walter Harms
.\" This is not a system call on Linux
.\"
.\" Modified 2004-06-23 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.TH STATVFS 3 2015-02-21 "Linux" "Linux Programmer's Manual"
.SH NAME
statvfs, fstatvfs \- get filesystem statistics
.SH SYNOPSIS
.B #include <sys/statvfs.h>
.sp
.BI "int statvfs(const char *" path ", struct statvfs *" buf );
.br
.BI "int fstatvfs(int " fd ", struct statvfs *" buf );
.SH DESCRIPTION
The function
.BR statvfs ()
returns information about a mounted filesystem.
.I path
is the pathname of any file within the mounted filesystem.
.I buf
is a pointer to a
.I statvfs
structure defined approximately as follows:

.in +4n
.nf
struct statvfs {
    unsigned long  f_bsize;    /* Filesystem block size */
    unsigned long  f_frsize;   /* Fragment size */
    fsblkcnt_t     f_blocks;   /* Size of fs in f_frsize units */
    fsblkcnt_t     f_bfree;    /* Number of free blocks */
    fsblkcnt_t     f_bavail;   /* Number of free blocks for
                                  unprivileged users */
    fsfilcnt_t     f_files;    /* Number of inodes */
    fsfilcnt_t     f_ffree;    /* Number of free inodes */
    fsfilcnt_t     f_favail;   /* Number of free inodes for
                                  unprivileged users */
    unsigned long  f_fsid;     /* Filesystem ID */
    unsigned long  f_flag;     /* Mount flags */
    unsigned long  f_namemax;  /* Maximum filename length */
};
.fi
.in

Here the types
.I fsblkcnt_t
and
.I fsfilcnt_t
are defined in
.IR <sys/types.h> .
Both used to be
.IR "unsigned long" .

The field
.I f_flag
is a bit mask indicating various options that were employed
when mounting this filesystem.
It contains zero or more of the following flags:
.\" XXX Keep this list in sync with statfs(2)
.TP
.B ST_MANDLOCK
Mandatory locking is permitted on the filesystem (see
.BR fcntl (2)).
.TP
.B ST_NOATIME
Do not update access times; see
.BR mount (2).
.TP
.B ST_NODEV
Disallow access to device special files on this filesystem.
.TP
.B ST_NODIRATIME
Do not update directory access times; see
.BR mount (2).
.TP
.B ST_NOEXEC
Execution of programs is disallowed on this filesystem.
.TP
.B ST_NOSUID
The set-user-ID and set-group-ID bits are ignored by
.BR exec (3)
for executable files on this filesystem
.TP
.B ST_RDONLY
This filesystem is mounted read-only.
.TP
.B ST_RELATIME
Update atime relative to mtime/ctime; see
.BR mount (2).
.TP
.B ST_SYNCHRONOUS
Writes are synched to the filesystem immediately (see the description of
.B O_SYNC
in
.BR open (2)).
.LP
It is unspecified whether all members of the returned struct
have meaningful values on all filesystems.

.BR fstatvfs ()
returns the same information about an open file referenced by descriptor
.IR fd .
.SH RETURN VALUE
On success, zero is returned.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EACCES
.RB ( statvfs ())
Search permission is denied for a component of the path prefix of
.IR path .
(See also
.BR path_resolution (7).)
.TP
.B EBADF
.RB ( fstatvfs ())
.I fd
is not a valid open file descriptor.
.TP
.B EFAULT
.I Buf
or
.I path
points to an invalid address.
.TP
.B EINTR
This call was interrupted by a signal.
.TP
.B EIO
An I/O error occurred while reading from the filesystem.
.TP
.B ELOOP
.RB ( statvfs ())
Too many symbolic links were encountered in translating
.IR path .
.TP
.B ENAMETOOLONG
.RB ( statvfs ())
.I path
is too long.
.TP
.B ENOENT
.RB ( statvfs ())
The file referred to by
.I path
does not exist.
.TP
.B ENOMEM
Insufficient kernel memory was available.
.TP
.B ENOSYS
The filesystem does not support this call.
.TP
.B ENOTDIR
.RB ( statvfs ())
A component of the path prefix of
.I path
is not a directory.
.TP
.B EOVERFLOW
Some values were too large to be represented in the returned struct.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw21 lb lb
l l l.
Interface	Attribute	Value
T{
.BR statvfs (),
.BR fstatvfs ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
POSIX.1-2001.

Only the
.B ST_NOSUID
and
.B ST_RDONLY
flags of the
.I f_flag
field are specified in POSIX.1.
To obtain definitions of the remaining flags, one must define
.BR _GNU_SOURCE .
.SH NOTES
The Linux kernel has system calls
.BR statfs (2)
and
.BR fstatfs (2)
to support this library call.

In glibc versions before 2.13,
.\" glibc commit 3cdaa6adb113a088fdfb87aa6d7747557eccc58d
.BR statvfs ()
populated the bits of the
.IR f_flag
field by scanning the mount options shown in
.IR /proc/mounts .
However, starting with Linux 2.6.36, the underlying
.BR statfs (2)
system call provides the necessary information via the
.IR f_flags
field, and since glibc version 2.13, the
.BR statvfs ()
function will use information from that field rather than scanning
.IR /proc/mounts .

The glibc implementations of
.sp
.nf
   pathconf(path, _PC_REC_XFER_ALIGN);
   pathconf(path, _PC_ALLOC_SIZE_MIN);
   pathconf(path, _PC_REC_MIN_XFER_SIZE);
.fi
.sp
respectively use the
.IR f_frsize ,
.IR f_frsize ,
and
.I f_bsize
fields returned by a call to
.BR statvfs ()
with the argument
.IR path .
.SH SEE ALSO
.BR statfs (2)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1990, 1991 The Regents of the University of California.
.\" All rights reserved.
.\"
.\" This code is derived from software contributed to Berkeley by
.\" the American National Standards Committee X3, on Information
.\" Processing Systems.
.\"
.\" %%%LICENSE_START(BSD_4_CLAUSE_UCB)
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\" %%%LICENSE_END
.\"
.\"	@(#)stdarg.3	6.8 (Berkeley) 6/29/91
.\"
.\" Converted for Linux, Mon Nov 29 15:11:11 1993, faith@cs.unc.edu
.\" Additions, 2001-10-14, aeb
.\"
.TH STDARG 3  2015-03-02 "" "Linux Programmer's Manual"
.SH NAME
stdarg, va_start, va_arg, va_end, va_copy \- variable argument lists
.SH SYNOPSIS
.B #include <stdarg.h>
.sp
.BI "void va_start(va_list " ap ", " last );
.br
.IB type " va_arg(va_list " ap ", " type );
.br
.BI "void va_end(va_list " ap );
.br
.BI "void va_copy(va_list " dest ", va_list " src );
.SH DESCRIPTION
A function may be called with a varying number of arguments of varying
types.
The include file
.I <stdarg.h>
declares a type
.I va_list
and defines three macros for stepping through a list of arguments whose
number and types are not known to the called function.
.PP
The called function must declare an object of type
.I va_list
which is used by the macros
.BR va_start (),
.BR va_arg (),
and
.BR va_end ().
.SS va_start()
The
.BR va_start ()
macro initializes
.I ap
for subsequent use by
.BR va_arg ()
and
.BR va_end (),
and must be called first.
.PP
The argument
.I last
is the name of the last argument before the variable argument list, that is,
the last argument of which the calling function knows the type.
.PP
Because the address of this argument may be used in the
.BR va_start ()
macro, it should not be declared as a register variable,
or as a function or an array type.
.SS va_arg()
The
.BR va_arg ()
macro expands to an expression that has the type and value of the next
argument in the call.
The argument
.I ap
is the
.I va_list
.I ap
initialized by
.BR va_start ().
Each call to
.BR va_arg ()
modifies
.I ap
so that the next call returns the next argument.
The argument
.I type
is a type name specified so that the type of a pointer to an object that
has the specified type can be obtained simply by adding a * to
.IR type .
.PP
The first use of the
.BR va_arg ()
macro after that of the
.BR va_start ()
macro returns the argument after
.IR last .
Successive invocations return the values of the remaining arguments.
.PP
If there is no next argument, or if
.I type
is not compatible with the type of the actual next argument (as promoted
according to the default argument promotions), random errors will occur.
.PP
If
.I ap
is passed to a function that uses
.BI va_arg( ap , type ),
then the value of
.I ap
is undefined after the return of that function.
.SS va_end()
Each invocation of
.BR va_start ()
must be matched by a corresponding invocation of
.BR va_end ()
in the same function.
After the call
.BI va_end( ap )
the variable
.I ap
is undefined.
Multiple traversals of the list, each
bracketed by
.BR va_start ()
and
.BR va_end ()
are possible.
.BR va_end ()
may be a macro or a function.
.SS va_copy()
The
.BR va_copy ()
macro copies the (previously initialized) variable argument list
.I src
to
.IR dest .
The behavior is as if
.BR va_start ()
were applied to
.IR dest
with the same
.I last
argument, followed by the same number of
.BR va_arg ()
invocations that was used to reach the current state of
.IR src .

.\" Proposal from clive@demon.net, 1997-02-28
An obvious implementation would have a
.I va_list
be a pointer to the stack frame of the variadic function.
In such a setup (by far the most common) there seems
nothing against an assignment
.in +4n
.nf

va_list aq = ap;

.fi
.in
Unfortunately, there are also systems that make it an
array of pointers (of length 1), and there one needs
.in +4n
.nf

va_list aq;
*aq = *ap;

.fi
.in
Finally, on systems where arguments are passed in registers,
it may be necessary for
.BR va_start ()
to allocate memory, store the arguments there, and also
an indication of which argument is next, so that
.BR va_arg ()
can step through the list.
Now
.BR va_end ()
can free the allocated memory again.
To accommodate this situation, C99 adds a macro
.BR va_copy (),
so that the above assignment can be replaced by
.in +4n
.nf

va_list aq;
va_copy(aq, ap);
\&...
va_end(aq);

.fi
.in
Each invocation of
.BR va_copy ()
must be matched by a corresponding invocation of
.BR va_end ()
in the same function.
Some systems that do not supply
.BR va_copy ()
have
.B __va_copy
instead, since that was the name used in the draft proposal.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw21 lb lb
l l l.
Interface	Attribute	Value
T{
.BR va_start (),
.BR va_end (),
.BR va_copy ()
T}	Thread safety	MT-Safe
T{
.BR va_arg ()
T}	Thread safety	MT-Safe race:ap
.TE
.SH CONFORMING TO
The
.BR va_start (),
.BR va_arg (),
and
.BR va_end ()
macros conform to C89.
C99 defines the
.BR va_copy ()
macro.
.SH NOTES
These macros are
.I not
compatible with the historic macros they replace.
A backward-compatible version can be found in the include file
.IR <varargs.h> .
.PP
The historic setup is:
.in +4n
.nf

#include <varargs.h>

void
foo(va_alist)
    va_dcl
{
    va_list ap;

    va_start(ap);
    while (...) {
        ...
        x = va_arg(ap, type);
        ...
    }
    va_end(ap);
}

.fi
.in
On some systems,
.I va_end
contains a closing \(aq}\(aq matching a \(aq{\(aq in
.IR va_start ,
so that both macros must occur in the same function, and in a way
that allows this.
.SH BUGS
Unlike the
.B varargs
macros, the
.B stdarg
macros do not permit programmers to code a function with no fixed
arguments.
This problem generates work mainly when converting
.B varargs
code to
.B stdarg
code, but it also creates difficulties for variadic functions that wish to
pass all of their arguments on to a function that takes a
.I va_list
argument, such as
.BR vfprintf (3).
.SH EXAMPLE
The function
.I foo
takes a string of format characters and prints out the argument associated
with each format character based on the type.
.nf

#include <stdio.h>
#include <stdarg.h>

void
foo(char *fmt, ...)
{
    va_list ap;
    int d;
    char c, *s;

    va_start(ap, fmt);
    while (*fmt)
        switch (*fmt++) {
        case \(aqs\(aq:              /* string */
            s = va_arg(ap, char *);
            printf("string %s\en", s);
            break;
        case \(aqd\(aq:              /* int */
            d = va_arg(ap, int);
            printf("int %d\en", d);
            break;
        case \(aqc\(aq:              /* char */
            /* need a cast here since va_arg only
               takes fully promoted types */
            c = (char) va_arg(ap, int);
            printf("char %c\en", c);
            break;
        }
    va_end(ap);
}
.fi
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" From dholland@burgundy.eecs.harvard.edu Tue Mar 24 18:08:15 1998
.\"
.\" This man page was written in 1998 by David A. Holland
.\" Polished a bit by aeb.
.\"
.\" %%%LICENSE_START(PUBLIC_DOMAIN)
.\" Placed in the Public Domain.
.\" %%%LICENSE_END
.\"
.\" 2005-06-16 mtk, mentioned freopen()
.\" 2007-12-08, mtk, Converted from mdoc to man macros
.\"
.TH STDIN 3 2008-07-14 "Linux" "Linux Programmer's Manual"
.SH NAME
stdin, stdout, stderr \- standard I/O streams
.SH SYNOPSIS
.nf
.B #include <stdio.h>

.BI "extern FILE *" stdin ;
.BI "extern FILE *" stdout ;
.BI "extern FILE *" stderr ;
.fi
.SH DESCRIPTION
Under normal circumstances every UNIX program has three streams opened
for it when it starts up, one for input, one for output, and one for
printing diagnostic or error messages.
These are typically attached to
the user's terminal (see
.BR tty (4)
but might instead refer to files or other devices, depending on what
the parent process chose to set up.
(See also the "Redirection" section of
.BR sh (1).)
.PP
The input stream is referred to as "standard input"; the output stream is
referred to as "standard output"; and the error stream is referred to
as "standard error".
These terms are abbreviated to form the symbols
used to refer to these files, namely
.IR stdin ,
.IR stdout ,
and
.IR stderr .

Each of these symbols is a
.BR stdio (3)
macro of type pointer to
.IR FILE ,
and can be used with functions like
.BR fprintf (3)
or
.BR fread (3).
.PP
Since
.IR FILE s
are a buffering wrapper around UNIX file descriptors, the
same underlying files may also be accessed using the raw UNIX file
interface, that is, the functions like
.BR read (2)
and
.BR lseek (2).
.PP
On program startup, the integer file descriptors
associated with the streams
.IR stdin ,
.IR stdout ,
and
.I stderr
are 0, 1, and 2, respectively.
The preprocessor symbols
.BR STDIN_FILENO ,
.BR STDOUT_FILENO ,
and
.B STDERR_FILENO
are defined with these values in
.IR <unistd.h> .
(Applying
.BR freopen (3)
to one of these streams can change the file descriptor number
associated with the stream.)
.PP
Note that mixing use of
.IR FILE s
and raw file descriptors can produce
unexpected results and should generally be avoided.
(For the masochistic among you: POSIX.1, section 8.2.3, describes
in detail how this interaction is supposed to work.)
A general rule is that file descriptors are handled in the kernel,
while stdio is just a library.
This means for example, that after an
.BR exec (3),
the child inherits all open file descriptors, but all old streams
have become inaccessible.
.PP
Since the symbols
.IR stdin ,
.IR stdout ,
and
.I stderr
are specified to be macros, assigning to them is nonportable.
The standard streams can be made to refer to different files
with help of the library function
.BR freopen (3),
specially introduced to make it possible to reassign
.IR stdin ,
.IR stdout ,
and
.IR stderr .
The standard streams are closed by a call to
.BR exit (3)
and by normal program termination.
.SH CONFORMING TO
The
.IR stdin ,
.IR stdout ,
and
.I stderr
macros conform to C89
and this standard also stipulates that these three
streams shall be open at program startup.
.SH NOTES
The stream
.I stderr
is unbuffered.
The stream
.I stdout
is line-buffered when it points to a terminal.
Partial lines will not
appear until
.BR fflush (3)
or
.BR exit (3)
is called, or a newline is printed.
This can produce unexpected
results, especially with debugging output.
The buffering mode of the standard streams (or any other stream)
can be changed using the
.BR setbuf (3)
or
.BR setvbuf (3)
call.
Note that in case
.I stdin
is associated with a terminal, there may also be input buffering
in the terminal driver, entirely unrelated to stdio buffering.
(Indeed, normally terminal input is line buffered in the kernel.)
This kernel input handling can be modified using calls like
.BR tcsetattr (3);
see also
.BR stty (1),
and
.BR termios (3).
.SH SEE ALSO
.BR csh (1),
.BR sh (1),
.BR open (2),
.BR fopen (3),
.BR stdio (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1990, 1991 Regents of the University of California.
.\" All rights reserved.
.\"
.\" %%%LICENSE_START(BSD_4_CLAUSE_UCB)
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\" %%%LICENSE_END
.\"
.\"     @(#)stdio.3	6.5 (Berkeley) 5/6/91
.\"
.\" Converted for Linux, Mon Nov 29 16:07:22 1993, faith@cs.unc.edu
.\" Modified, 2001-12-26, aeb
.\"
.TH STDIO 3  2001-12-26 "" "Linux Programmer's Manual"
.SH NAME
stdio \- standard input/output library functions
.SH SYNOPSIS
.B #include <stdio.h>
.sp
.BI "FILE *" stdin ;
.br
.BI "FILE *" stdout ;
.br
.BI "FILE *" stderr ;
.SH DESCRIPTION
The standard I/O library provides a simple and efficient buffered stream
I/O interface.
Input and output is mapped into logical data streams and the
physical I/O characteristics are concealed.
The functions and macros are
listed below; more information is available from the individual man pages.
.PP
A stream is associated with an external file (which may be a physical
device) by
.I opening
a file, which may involve creating a new file.
Creating an existing file
causes its former contents to be discarded.
If a file can support positioning requests (such as a disk file,
as opposed to a terminal), then a
.I file position indicator
associated with the stream is positioned at the start of the file (byte
zero), unless the file is opened with append mode.
If append mode is used,
it is unspecified whether the position indicator will be placed at the
start or the end of the file.
The position indicator is maintained by
subsequent reads, writes and positioning requests.
All input occurs as if the characters were read by successive calls to the
.BR fgetc (3)
function; all output takes place as if all characters were written by
successive calls to the
.BR fputc (3)
function.
.PP
A file is disassociated from a stream by
.I closing
the file.
Output streams are flushed (any unwritten buffer contents are
transferred to the host environment) before the stream is disassociated from
the file.
The value of a pointer to a
.I FILE
object is indeterminate after a file is closed (garbage).
.PP
A file may be subsequently reopened, by the same or another program
execution, and its contents reclaimed or modified (if it can be
repositioned at the start).
If the main function returns to its original
caller, or the
.BR exit (3)
function is called, all open files are closed (hence all output streams are
flushed) before program termination.
Other methods of program termination,
such as
.BR abort (3)
do not bother about closing files properly.
.PP
At program startup, three text streams are predefined and need not be
opened explicitly:
.I standard input
(for reading conventional input),
.I standard output
(for writing conventional output), and
.I standard error
(for writing diagnostic output).
These streams are abbreviated
.IR stdin , stdout
and
.IR stderr .
When opened, the standard error stream is not fully buffered; the standard
input and output streams are fully buffered if and only if the streams do
not refer to an interactive device.
.PP
Output streams that refer to terminal devices are always line buffered by
default; pending output to such streams is written automatically whenever
an input stream that refers to a terminal device is read.
In cases where a
large amount of computation is done after printing part of a line on an
output terminal, it is necessary to
.BR fflush (3)
the standard output before going off and computing so that the output will
appear.
.PP
The
.I stdio
library is a part of the library
.B libc
and routines are automatically loaded as needed by the compilers
.BR cc (1)
and
.BR pc (1).
The
SYNOPSIS
sections of the following manual pages indicate which include files are to
be used, what the compiler declaration for the function looks like and
which external variables are of interest.
.PP
The following are defined as macros; these names may not be reused without
first removing their current definitions with
.BR #undef :
.BR BUFSIZ ,
.BR EOF ,
.BR FILENAME_MAX ,
.BR FOPEN_MAX ,
.BR L_cuserid ,
.BR L_ctermid ,
.BR L_tmpnam ,
.BR NULL ,
.BR SEEK_END ,
.BR SEEK_SET ,
.BR SEEK_CUR ,
.BR TMP_MAX ,
.BR clearerr ,
.BR feof ,
.BR ferror ,
.BR fileno ,
.\" Not on Linux: .BR fropen ,
.\" Not on Linux: .BR fwopen ,
.BR getc ,
.BR getchar ,
.BR putc ,
.BR putchar ,
.BR stderr ,
.BR stdin ,
.BR stdout .
Function versions of the macro functions
.BR feof ,
.BR ferror ,
.BR clearerr ,
.BR fileno ,
.BR getc ,
.BR getchar ,
.BR putc ,
and
.B putchar
exist and will be used if the macros definitions are explicitly removed.
.SS List of functions
.TS
;
lb lb
lb l.
Function	Description
_
clearerr	check and reset stream status
fclose	close a stream
fdopen	stream open functions
feof	check and reset stream status
ferror	check and reset stream status
fflush	flush a stream
fgetc	get next character or word from input stream
fgetpos	reposition a stream
fgets	get a line from a stream
fileno	return the integer descriptor of the argument stream
fopen	stream open functions
fprintf	formatted output conversion
fpurge	flush a stream
fputc	output a character or word to a stream
fputs	output a line to a stream
fread	binary stream input/output
freopen	stream open functions
fscanf	input format conversion
fseek	reposition a stream
fsetpos	reposition a stream
ftell	reposition a stream
fwrite	binary stream input/output
getc	get next character or word from input stream
getchar	get next character or word from input stream
gets	get a line from a stream
getw	get next character or word from input stream
mktemp	make temporary filename (unique)
perror	system error messages
printf	formatted output conversion
putc	output a character or word to a stream
putchar	output a character or word to a stream
puts	output a line to a stream
putw	output a character or word to a stream
remove	remove directory entry
rewind	reposition a stream
scanf	input format conversion
setbuf	stream buffering operations
setbuffer	stream buffering operations
setlinebuf	stream buffering operations
setvbuf	stream buffering operations
sprintf	formatted output conversion
sscanf	input format conversion
strerror	system error messages
sys_errlist	system error messages
sys_nerr	system error messages
tempnam	temporary file routines
tmpfile	temporary file routines
tmpnam	temporary file routines
ungetc	un-get character from input stream
vfprintf	formatted output conversion
vfscanf	input format conversion
vprintf	formatted output conversion
vscanf	input format conversion
vsprintf	formatted output conversion
vsscanf	input format conversion
.TE
.SH CONFORMING TO
The
.I stdio
library conforms to C89.
.SH SEE ALSO
.BR close (2),
.BR open (2),
.BR read (2),
.BR write (2),
.BR stdout (3),
.BR unlocked_stdio (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2001 Andries Brouwer <aeb@cwi.nl>.
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH STDIO_EXT 3 2015-03-02 "" "Linux Programmer's Manual"
.SH NAME
__fbufsize, __flbf, __fpending, __fpurge, __freadable,
__freading, __fsetlocking, __fwritable, __fwriting, _flushlbf \-
interfaces to stdio FILE structure
.SH SYNOPSIS
.B #include <stdio.h>
.br
.B #include <stdio_ext.h>
.sp
.BI "size_t __fbufsize(FILE *" stream );
.br
.BI "size_t __fpending(FILE *" stream );
.br
.BI "int __flbf(FILE *" stream );
.br
.BI "int __freadable(FILE *" stream );
.br
.BI "int __fwritable(FILE *" stream );
.br
.BI "int __freading(FILE *" stream );
.br
.BI "int __fwriting(FILE *" stream );
.br
.BI "int __fsetlocking(FILE *" stream ", int " type );
.br
.B "void _flushlbf(void);"
.br
.BI "void __fpurge(FILE *" stream );
.SH DESCRIPTION
Solaris introduced routines to allow portable access to the
internals of the
.I FILE
structure, and glibc also implemented these.
.LP
The
.BR __fbufsize ()
function returns the size of the buffer currently used
by the given stream.
.LP
The
.BR __fpending ()
function returns the number of bytes in the output buffer.
For wide-oriented streams the unit is wide characters.
This function is undefined on buffers in reading mode,
or opened read-only.
.LP
The
.BR __flbf ()
function returns a nonzero value if the stream is line-buffered,
and zero otherwise.
.LP
The
.BR __freadable ()
function returns a nonzero value if the stream allows reading,
and zero otherwise.
.LP
The
.BR __fwritable ()
function returns a nonzero value if the stream allows writing,
and zero otherwise.
.LP
The
.BR __freading ()
function returns a nonzero value if the stream is read-only, or
if the last operation on the stream was a read operation,
and zero otherwise.
.LP
The
.BR __fwriting ()
function returns a nonzero value if the stream is write-only (or
append-only), or if the last operation on the stream was a write
operation, and zero otherwise.
.LP
The
.BR __fsetlocking ()
function can be used to select the desired type of locking on the stream.
It returns the current type.
The
.I type
argument can take the following three values:
.TP
.B FSETLOCKING_INTERNAL
Perform implicit locking around every operation on the given stream
(except for the *_unlocked ones).
This is the default.
.TP
.B FSETLOCKING_BYCALLER
The caller will take care of the locking (possibly using
.BR flockfile (3)
in case there is more than one thread), and the stdio routines
will not do locking until the state is reset to
.BR FSETLOCKING_INTERNAL .
.TP
.B FSETLOCKING_QUERY
Don't change the type of locking.
(Only return it.)
.LP
The
.BR _flushlbf ()
function flushes all line-buffered streams.
(Presumably so that
output to a terminal is forced out, say before reading keyboard input.)
.LP
The
.BR __fpurge ()
function discards the contents of the stream's buffer.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw28 lb lb
l l l.
Interface	Attribute	Value
T{
.BR __fbufsize (),
.BR __fpending (),
.br
.BR __fpurge (),
.BR __fsetlocking ()
T}	Thread safety	MT-Safe race:stream
T{
.BR __flbf (),
.BR __freadable (),
.br
.BR __freading (),
.BR __fwritable (),
.br
.BR __fwriting (),
.BR _flushlbf ()
T}	Thread safety	MT-Safe
.TE
.SH SEE ALSO
.BR flockfile (3),
.BR fpurge (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1995 James R. Van Zandt <jrv@vanzandt.mv.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH STPCPY 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
stpcpy \- copy a string returning a pointer to its end
.SH SYNOPSIS
.nf
.B #include <string.h>
.sp
.BI "char *stpcpy(char *" dest ", const char *" src );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR stpcpy ():
.PD 0
.ad l
.RS 4
.TP 4
Since glibc 2.10:
_XOPEN_SOURCE\ >=\ 700 || _POSIX_C_SOURCE\ >=\ 200809L
.TP
Before glibc 2.10:
_GNU_SOURCE
.RE
.ad
.PD
.SH DESCRIPTION
The
.BR stpcpy ()
function copies the string pointed to by
.I src
(including the terminating null byte (\(aq\\0\(aq)) to the array pointed to by
.IR dest .
The strings may not overlap, and the destination string
.I dest
must be large enough to receive the copy.
.SH RETURN VALUE
.BR stpcpy ()
returns a pointer to the
.B end
of the string
.I dest
(that is, the address of the terminating null byte)
rather than the beginning.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR stpcpy ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
This function was added to POSIX.1-2008.
Before that, it was not part of
the C or POSIX.1 standards, nor customary on UNIX systems.
It first appeared at least as early as 1986,
in the Lattice C AmigaDOS compiler,
then in the GNU fileutils and GNU textutils in 1989,
and in the GNU C library by 1992.
It is also present on the BSDs.
.SH BUGS
This function may overrun the buffer
.IR dest .
.SH EXAMPLE
For example, this program uses
.BR stpcpy ()
to concatenate
.B foo
and
.B bar
to produce
.BR foobar ,
which it then prints.
.nf

#define _GNU_SOURCE
#include <string.h>
#include <stdio.h>

int
main(void)
{
    char buffer[20];
    char *to = buffer;

    to = stpcpy(to, "foo");
    to = stpcpy(to, "bar");
    printf("%s\\n", buffer);
}
.fi
.SH SEE ALSO
.BR bcopy (3),
.BR memccpy (3),
.BR memcpy (3),
.BR memmove (3),
.BR stpncpy (3),
.BR strcpy (3),
.BR string (3),
.BR wcpcpy (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) Bruno Haible <haible@clisp.cons.org>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_ONEPARA)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"   GNU glibc-2 source code and manual
.\"
.\" Corrected, aeb, 990824
.TH STPNCPY 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
stpncpy \- copy a fixed-size string, returning a pointer to its end
.SH SYNOPSIS
.nf
.B #include <string.h>
.sp
.BI "char *stpncpy(char *" dest ", const char *" src ", size_t " n );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR stpncpy ():
.PD 0
.ad l
.RS 4
.TP 4
Since glibc 2.10:
_XOPEN_SOURCE\ >=\ 700 || _POSIX_C_SOURCE\ >=\ 200809L
.TP
Before glibc 2.10:
_GNU_SOURCE
.RE
.ad
.PD
.SH DESCRIPTION
The
.BR stpncpy ()
function copies at most
.I n
characters from the string
pointed to by
.IR src ,
including the terminating null byte (\(aq\\0\(aq),
to the array pointed to by
.IR dest .
Exactly
.I n
characters are written at
.IR dest .
If the length
.I strlen(src)
is smaller than
.IR n ,
the
remaining characters in the array pointed to by
.I dest
are filled
with null bytes (\(aq\\0\(aq),
If the length
.I strlen(src)
is greater than or equal to
.IR n ,
the string pointed to by
.I dest
will
not be null-terminated.
.PP
The strings may not overlap.
.PP
The programmer must ensure that there is room for at least
.I n
characters
at
.IR dest .
.SH RETURN VALUE
.BR stpncpy ()
returns a pointer to the terminating null byte
in
.IR dest ,
or, if
.I dest
is not null-terminated,
.IR dest + n .
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR stpncpy ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
This function was added to POSIX.1-2008.
Before that, it was a GNU extension.
It first appeared in version 1.07 of the GNU C library in 1993.
.SH SEE ALSO
.BR strncpy (3),
.BR wcpncpy (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified Sat Jul 24 18:12:45 1993 by Rik Faith (faith@cs.unc.edu)
.TH STRCASECMP 3  2015-04-19 "" "Linux Programmer's Manual"
.SH NAME
strcasecmp, strncasecmp \- compare two strings ignoring case
.SH SYNOPSIS
.nf
.B #include <strings.h>
.sp
.BI "int strcasecmp(const char *" s1 ", const char *" s2 );
.sp
.BI "int strncasecmp(const char *" s1 ", const char *" s2 ", size_t " n );
.fi
.SH DESCRIPTION
The
.BR strcasecmp ()
function performs a byte-by-byte comparison of the strings
.I s1
and
.IR s2 ,
ignoring the case of the characters.
It returns an integer
less than, equal to, or greater than zero if
.I s1
is found,
respectively, to be less than, to match, or be greater than
.IR s2 .
.PP
The
.BR strncasecmp ()
function is similar, except it compares
only the first
.I n
bytes of
.IR s1 .
.SH RETURN VALUE
The
.BR strcasecmp ()
and
.BR strncasecmp ()
functions return
an integer less than, equal to, or greater than zero if
.I s1
(or the first
.I n
bytes thereof) is found, respectively, to be
less than, to match, or be greater than
.IR s2 .
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw27 lb lb
l l l.
Interface	Attribute	Value
T{
.BR strcasecmp (),
.BR strncasecmp ()
T}	Thread safety	MT-Safe locale
.TE
.SH CONFORMING TO
4.4BSD, POSIX.1-2001, POSIX.1-2008.
.SH NOTES
The
.BR strcasecmp ()
and
.BR strncasecmp ()
functions first appeared in 4.4BSD, where they were declared in
.IR <string.h> .
Thus, for reasons of historical compatibility, the glibc
.I <string.h>
header file also declares these functions, if the
.B _DEFAULT_SOURCE
(or, in glibc 2.19 and earlier,
.BR _BSD_SOURCE )
feature test macro is defined.

The POSIX.1-2008 standard says of these functions:

.RS
When the
.B LC_CTYPE
category of the locale being used is from the POSIX locale,
these functions shall behave as if the strings had been converted
to lowercase and then a byte comparison performed.
Otherwise, the results are unspecified.
.RE
.SH SEE ALSO
.BR bcmp (3),
.BR memcmp (3),
.BR strcmp (3),
.BR strcoll (3),
.BR string (3),
.BR strncmp (3),
.BR wcscasecmp (3),
.BR wcsncasecmp (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified Sat Jul 24 18:11:47 1993 by Rik Faith (faith@cs.unc.edu)
.\" 2007-06-15, Marc Boyer <marc.boyer@enseeiht.fr> + mtk
.\"     Improve discussion of strncat().
.TH STRCAT 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
strcat, strncat \- concatenate two strings
.SH SYNOPSIS
.nf
.B #include <string.h>
.sp
.BI "char *strcat(char *" dest ", const char *" src );
.sp
.BI "char *strncat(char *" dest ", const char *" src ", size_t " n );
.fi
.SH DESCRIPTION
The
.BR strcat ()
function appends the
.I src
string to the
.I dest
string,
overwriting the terminating null byte (\(aq\\0\(aq) at the end of
.IR dest ,
and then adds a terminating null byte.
The strings may not overlap, and the
.I dest
string must have
enough space for the result.
If
.I dest
is not large enough, program behavior is unpredictable;
.IR "buffer overruns are a favorite avenue for attacking secure programs" .
.PP
The
.BR strncat ()
function is similar, except that
.IP * 3
it will use at most
.I n
bytes from
.IR src ;
and
.IP *
.I src
does not need to be null-terminated if it contains
.I n
or more bytes.
.PP
As with
.BR strcat (),
the resulting string in
.I dest
is always null-terminated.
.PP
If
.IR src
contains
.I n
or more bytes,
.BR strncat ()
writes
.I n+1
bytes to
.I dest
.RI ( n
from
.I src
plus the terminating null byte).
Therefore, the size of
.I dest
must be at least
.IR "strlen(dest)+n+1" .

A simple implementation of
.BR strncat ()
might be:
.in +4n
.nf

char *
strncat(char *dest, const char *src, size_t n)
{
    size_t dest_len = strlen(dest);
    size_t i;

    for (i = 0 ; i < n && src[i] != \(aq\\0\(aq ; i++)
        dest[dest_len + i] = src[i];
    dest[dest_len + i] = \(aq\\0\(aq;

    return dest;
}
.fi
.in
.SH RETURN VALUE
The
.BR strcat ()
and
.BR strncat ()
functions return a pointer to the resulting string
.IR dest .
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw19 lb lb
l l l.
Interface	Attribute	Value
T{
.BR strcat (),
.BR strncat ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
SVr4, 4.3BSD, C89, C99.
.SH NOTES
Some systems (the BSDs, Solaris, and others) provide the following function:

    size_t strlcat(char *dest, const char *src, size_t size);

This function appends the null-terminated string
.I src
to the string
.IR dest ,
copying at most
.IR "size\-strlen(dest)\-1"
from
.IR src ,
and adds a terminating null byte to the result,
.I unless
.IR size
is less than
.IR strlen(dest) .
This function fixes the buffer overrun problem of
.BR strcat (),
but the caller must still handle the possibility of data loss if
.I size
is too small.
The function returns the length of the string
.BR strlcat ()
tried to create; if the return value is greater than or equal to
.IR size ,
data loss occurred.
If data loss matters, the caller
.I must
either check the arguments before the call, or test the function return value.
.BR strlcat ()
is not present in glibc and is not standardized by POSIX,
.\" https://lwn.net/Articles/506530/
but is available on Linux via the
.IR libbsd
library.
.SH SEE ALSO
.BR bcopy (3),
.BR memccpy (3),
.BR memcpy (3),
.BR strcpy (3),
.BR string (3),
.BR strncpy (3),
.BR wcscat (3),
.BR wcsncat (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified Mon Apr 12 12:51:24 1993, David Metcalfe
.\" 2006-05-19, Justin Pryzby <pryzbyj@justinpryzby.com>
.\"	Document strchrnul(3).
.\"
.TH STRCHR 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
strchr, strrchr, strchrnul \- locate character in string
.SH SYNOPSIS
.nf
.B #include <string.h>
.sp
.BI "char *strchr(const char *" s ", int " c );
.sp
.BI "char *strrchr(const char *" s ", int " c );
.sp
.BR "#define _GNU_SOURCE" "         /* See feature_test_macros(7) */"
.B #include <string.h>
.sp
.BI "char *strchrnul(const char *" s ", int " c );
.fi
.SH DESCRIPTION
The
.BR strchr ()
function returns a pointer to the first occurrence
of the character
.I c
in the string
.IR s .
.PP
The
.BR strrchr ()
function returns a pointer to the last occurrence
of the character
.I c
in the string
.IR s .
.PP
The
.BR strchrnul ()
function is like
.BR strchr ()
except that if
.I c
is not found in
.IR s ,
then it returns a pointer to the null byte
at the end of
.IR s ,
rather than NULL.
.PP
Here "character" means "byte"; these functions do not work with
wide or multibyte characters.
.SH RETURN VALUE
The
.BR strchr ()
and
.BR strrchr ()
functions return a pointer to
the matched character or NULL if the character is not found.
The terminating null byte is considered part of the string,
so that if
.I c
is specified as \(aq\\0\(aq,
these functions return a pointer to the terminator.

The
.BR strchrnul ()
function returns a pointer to
the matched character,
or a pointer to the null
byte at the end of
.I s
(i.e.,
.IR "s+strlen(s)" )
if the character is not found.
.SH VERSIONS
.BR strchrnul ()
first appeared in glibc in version 2.1.1.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw32 lb lb
l l l.
Interface	Attribute	Value
T{
.BR strchr (),
.BR strrchr (),
.BR strchrnul ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
.BR strchr ()
and
.BR strrchr ()
are in SVr4, 4.3BSD, C89, C99.
.BR strchrnul ()
is a GNU extension.
.SH SEE ALSO
.BR index (3),
.BR memchr (3),
.BR rindex (3),
.BR string (3),
.BR strlen (3),
.BR strpbrk (3),
.BR strsep (3),
.BR strspn (3),
.BR strstr (3),
.BR strtok (3),
.BR wcschr (3),
.BR wcsrchr (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified Sat Jul 24 18:08:52 1993 by Rik Faith (faith@cs.unc.edu)
.\" Modified 2001-08-31, aeb
.\"
.TH STRCMP 3  2015-03-02 "" "Linux Programmer's Manual"
.SH NAME
strcmp, strncmp \- compare two strings
.SH SYNOPSIS
.nf
.B #include <string.h>
.sp
.BI "int strcmp(const char *" s1 ", const char *" s2 );
.sp
.BI "int strncmp(const char *" s1 ", const char *" s2 ", size_t " n );
.fi
.SH DESCRIPTION
The
.BR strcmp ()
function compares the two strings
.I s1
and
.IR s2 .
It returns an integer less than, equal to, or greater
than zero if
.I s1
is found, respectively, to be less than,
to match, or be greater than
.IR s2 .
.PP
The
.BR strncmp ()
function is similar, except it compares
only the first (at most)
.IR n
bytes of
.I s1
and
.IR s2 .
.SH RETURN VALUE
The
.BR strcmp ()
and
.BR strncmp ()
functions return an integer
less than, equal to, or greater than zero if
.I s1
(or the first
.I n
bytes thereof) is found, respectively, to be less than, to
match, or be greater than
.IR s2 .
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw19 lb lb
l l l.
Interface	Attribute	Value
T{
.BR strcmp (),
.BR strncmp ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
SVr4, 4.3BSD, C89, C99.
.SH SEE ALSO
.BR bcmp (3),
.BR memcmp (3),
.BR strcasecmp (3),
.BR strcoll (3),
.BR string (3),
.BR strncasecmp (3),
.BR strverscmp (3),
.BR wcscmp (3),
.BR wcsncmp (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified Sun Jul 25 10:40:44 1993 by Rik Faith (faith@cs.unc.edu)
.TH STRCOLL 3  2015-03-29 "GNU" "Linux Programmer's Manual"
.SH NAME
strcoll \- compare two strings using the current locale
.SH SYNOPSIS
.nf
.B #include <string.h>
.sp
.BI "int strcoll(const char *" s1 ", const char *" s2 );
.fi
.SH DESCRIPTION
The
.BR strcoll ()
function compares the two strings
.I s1
and
.IR s2 .
It returns an integer less than, equal to, or greater
than zero if
.I s1
is found, respectively, to be less than,
to match, or be greater than
.IR s2 .
The comparison is based on
strings interpreted as appropriate for the program's current locale
for category
.BR LC_COLLATE .
(See
.BR setlocale (3).)
.SH RETURN VALUE
The
.BR strcoll ()
function returns an integer less than, equal to,
or greater than zero if
.I s1
is found, respectively, to be less
than, to match, or be greater than
.IR s2 ,
when both are interpreted
as appropriate for the current locale.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR strcoll ()
T}	Thread safety	MT-Safe locale
.TE

.SH CONFORMING TO
SVr4, 4.3BSD, C89, C99.
.SH NOTES
In the
.I "POSIX"
or
.I "C"
locales
.BR strcoll ()
is equivalent to
.BR strcmp (3).
.SH SEE ALSO
.BR bcmp (3),
.BR memcmp (3),
.BR setlocale (3),
.BR strcasecmp (3),
.BR strcmp (3),
.BR string (3),
.BR strxfrm (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified Sat Jul 24 18:06:49 1993 by Rik Faith (faith@cs.unc.edu)
.\" Modified Fri Aug 25 23:17:51 1995 by Andries Brouwer (aeb@cwi.nl)
.\" Modified Wed Dec 18 00:47:18 1996 by Andries Brouwer (aeb@cwi.nl)
.\" 2007-06-15, Marc Boyer <marc.boyer@enseeiht.fr> + mtk
.\"     Improve discussion of strncpy().
.\"
.TH STRCPY 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
strcpy, strncpy \- copy a string
.SH SYNOPSIS
.nf
.B #include <string.h>
.sp
.BI "char *strcpy(char *" dest ", const char *" src );
.sp
.BI "char *strncpy(char *" dest ", const char *" src ", size_t " n );
.fi
.SH DESCRIPTION
The
.BR strcpy ()
function copies the string pointed to by
.IR src ,
including the terminating null byte (\(aq\\0\(aq),
to the buffer pointed to by
.IR dest .
The strings may not overlap, and the destination string
.I dest
must be large enough to receive the copy.
.IR "Beware of buffer overruns!"
(See BUGS.)
.PP
The
.BR strncpy ()
function is similar, except that at most
.I n
bytes of
.I src
are copied.
.BR Warning :
If there is no null byte
among the first
.I n
bytes of
.IR src ,
the string placed in
.I dest
will not be null-terminated.
.PP
If the length of
.I src
is less than
.IR n ,
.BR strncpy ()
writes additional null bytes to
.I dest
to ensure that a total of
.I n
bytes are written.
.PP
A simple implementation of
.BR strncpy ()
might be:
.in +4n
.nf

char *
strncpy(char *dest, const char *src, size_t n)
{
    size_t i;

    for (i = 0; i < n && src[i] != \(aq\\0\(aq; i++)
        dest[i] = src[i];
    for ( ; i < n; i++)
        dest[i] = \(aq\\0\(aq;

    return dest;
}
.fi
.in
.SH RETURN VALUE
The
.BR strcpy ()
and
.BR strncpy ()
functions return a pointer to
the destination string
.IR dest .
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw19 lb lb
l l l.
Interface	Attribute	Value
T{
.BR strcpy (),
.BR strncpy ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
SVr4, 4.3BSD, C89, C99.
.SH NOTES
Some programmers consider
.BR strncpy ()
to be inefficient and error prone.
If the programmer knows (i.e., includes code to test!)
that the size of
.I dest
is greater than
the length of
.IR src ,
then
.BR strcpy ()
can be used.

One valid (and intended) use of
.BR strncpy ()
is to copy a C string to a fixed-length buffer
while ensuring both that the buffer is not overflowed
and that unused bytes in the target buffer are zeroed out
(perhaps to prevent information leaks if the buffer is to be
written to media or transmitted to another process via an
interprocess communication technique).

If there is no terminating null byte in the first
.I n
bytes of
.IR src ,
.BR strncpy ()
produces an unterminated string in
.IR dest .
If
.I buf
has length
.IR buflen ,
you can force termination using something like the following:
.in +4n
.nf

strncpy(buf, str, buflen \- 1);
if (buflen > 0)
    buf[buflen \- 1]= \(aq\\0\(aq;
.fi
.in
.PP
(Of course, the above technique ignores the fact that, if
.I src
contains more than
.I "buflen\ \-\ 1"
bytes, information is lost in the copying to
.IR dest .)
.\"
.SS strlcpy()
Some systems (the BSDs, Solaris, and others) provide the following function:

    size_t strlcpy(char *dest, const char *src, size_t size);

.\" http://static.usenix.org/event/usenix99/full_papers/millert/millert_html/index.html
.\"     "strlcpy and strlcat - consistent, safe, string copy and concatenation"
.\"     1999 USENIX Annual Technical Conference
This function is similar to
.BR strncpy (),
but it copies at most
.I size\-1
bytes to
.IR dest ,
always adds a terminating null byte,
and does not pad the target with (further) null bytes.
This function fixes some of the problems of
.BR strcpy ()
and
.BR strncpy (),
but the caller must still handle the possibility of data loss if
.I size
is too small.
The return value of the function is the length of
.IR src ,
which allows truncation to be easily detected:
if the return value is greater than or equal to
.IR size ,
truncation occurred.
If loss of data matters, the caller
.I must
either check the arguments before the call,
or test the function return value.
.BR strlcpy ()
is not present in glibc and is not standardized by POSIX,
.\" https://lwn.net/Articles/506530/
but is available on Linux via the
.IR libbsd
library.
.SH BUGS
If the destination string of a
.BR strcpy ()
is not large enough, then anything might happen.
Overflowing fixed-length string buffers is a favorite cracker technique
for taking complete control of the machine.
Any time a program reads or copies data into a buffer,
the program first needs to check that there's enough space.
This may be unnecessary if you can show that overflow is impossible,
but be careful: programs can get changed over time,
in ways that may make the impossible possible.
.SH SEE ALSO
.BR bcopy (3),
.BR memccpy (3),
.BR memcpy (3),
.BR memmove (3),
.BR stpcpy (3),
.BR stpncpy (3),
.BR strdup (3),
.BR string (3),
.BR wcscpy (3),
.BR wcsncpy (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified Sun Jul 25 10:41:34 1993 by Rik Faith (faith@cs.unc.edu)
.\" Modified Wed Oct 17 01:12:26 2001 by John Levon <moz@compsoc.man.ac.uk>
.TH STRDUP 3  2015-03-29 "GNU" "Linux Programmer's Manual"
.SH NAME
strdup, strndup, strdupa, strndupa \- duplicate a string
.SH SYNOPSIS
.nf
.B #include <string.h>
.sp
.BI "char *strdup(const char *" s );
.sp
.BI "char *strndup(const char *" s ", size_t " n );
.br
.BI "char *strdupa(const char *" s );
.br
.BI "char *strndupa(const char *" s ", size_t " n );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.PD 0
.ad l
.sp
.BR strdup ():
.RS 4
_SVID_SOURCE || _BSD_SOURCE || _XOPEN_SOURCE\ >=\ 500 ||
_XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED
.br
|| /* Since glibc 2.12: */ _POSIX_C_SOURCE\ >=\ 200809L
.RE
.PP
.BR strndup ():
.RS 4
.TP 4
Since glibc 2.10:
_POSIX_C_SOURCE\ >=\ 200809L || _XOPEN_SOURCE\ >=\ 700
.TP
Before glibc 2.10:
_GNU_SOURCE
.RE
.PP
.BR strdupa (),
.BR strndupa ():
_GNU_SOURCE
.ad
.PD
.SH DESCRIPTION
The
.BR strdup ()
function returns a pointer to a new string which
is a duplicate of the string
.IR s .
Memory for the new string is
obtained with
.BR malloc (3),
and can be freed with
.BR free (3).

The
.BR strndup ()
function is similar, but copies at most
.I n
bytes.
If
.I s
is longer than
.IR n ,
only
.I n
bytes are copied, and a terminating null byte (\(aq\\0\(aq) is added.

.BR strdupa ()
and
.BR strndupa ()
are similar, but use
.BR alloca (3)
to allocate the buffer.
They are available only when using the GNU
GCC suite, and suffer from the same limitations described in
.BR alloca (3).
.SH RETURN VALUE
On success, the
.BR strdup ()
function returns a pointer to the duplicated
string.
It returns NULL if insufficient memory was available, with
.I errno
set to indicate the cause of the error.
.SH ERRORS
.TP
.B ENOMEM
Insufficient memory available to allocate duplicate string.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw31 lb lb
l l l.
Interface	Attribute	Value
T{
.BR strdup (),
.BR strndup (),
.BR strdupa (),
.br
.BR strndupa ()
T}	Thread safety	MT-Safe
.TE

.SH CONFORMING TO
.\" 4.3BSD-Reno, not (first) 4.3BSD.
.BR strdup ()
conforms to SVr4, 4.3BSD, POSIX.1-2001.
.BR strndup ()
conforms to POSIX.1-2008.
.BR strdupa ()
and
.BR strndupa ()
are GNU extensions.
.SH SEE ALSO
.BR alloca (3),
.BR calloc (3),
.BR free (3),
.BR malloc (3),
.BR realloc (3),
.BR string (3),
.BR wcsdup (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 1993 David Metcalfe (david@prism.demon.co.uk)
.\" and Copyright (C) 2005, 2014 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified Sat Jul 24 18:05:30 1993 by Rik Faith <faith@cs.unc.edu>
.\" Modified Fri Feb 16 14:25:17 1996 by Andries Brouwer <aeb@cwi.nl>
.\" Modified Sun Jul 21 20:55:44 1996 by Andries Brouwer <aeb@cwi.nl>
.\" Modified Mon Oct 15 21:16:25 2001 by John Levon <moz@compsoc.man.ac.uk>
.\" Modified Tue Oct 16 00:04:43 2001 by Andries Brouwer <aeb@cwi.nl>
.\" Modified Fri Jun 20 03:04:30 2003 by Andries Brouwer <aeb@cwi.nl>
.\" 2005-12-13, mtk, Substantial rewrite of strerror_r() description
.\"         Addition of extra material on portability and standards.
.\"
.TH STRERROR 3  2015-03-02 "" "Linux Programmer's Manual"
.SH NAME
strerror, strerror_r, strerror_l \- return string describing error number
.SH SYNOPSIS
.nf
.B #include <string.h>
.sp
.BI "char *strerror(int " errnum );
.sp
.BI "int strerror_r(int " errnum ", char *" buf ", size_t " buflen );
            /* XSI-compliant */
.sp
.BI "char *strerror_r(int " errnum ", char *" buf ", size_t " buflen );
            /* GNU-specific */

.BI "char *strerror_l(int " errnum ", locale_t " locale );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.ad l
.sp
.BR strerror_r ():
.RS 4
The XSI-compliant version is provided if:
.br
(_POSIX_C_SOURCE\ >=\ 200112L || _XOPEN_SOURCE\ >=\ 600) && !\ _GNU_SOURCE
.br
Otherwise, the GNU-specific version is provided.
.RE
.ad
.SH DESCRIPTION
The
.BR strerror ()
function returns a pointer to a string that describes the error
code passed in the argument
.IR errnum ,
possibly using the
.B LC_MESSAGES
part of the current locale to select the appropriate language.
(For example, if
.I errnum
is
.BR EINVAL ,
the returned description will be "Invalid argument".)
This string must not be modified by the application, but may be
modified by a subsequent call to
.BR strerror ()
or
.BR strerror_l ().
No other library function, including
.BR perror (3),
will modify this string.
.\"
.SS strerror_r()
The
.BR strerror_r ()
function is similar to
.BR strerror (),
but is
thread safe.
This function is available in two versions:
an XSI-compliant version specified in POSIX.1-2001
(available since glibc 2.3.4, but not POSIX-compliant until glibc 2.13),
and a GNU-specific version (available since glibc 2.0).
The XSI-compliant version is provided with the feature test macros
settings shown in the SYNOPSIS;
otherwise the GNU-specific version is provided.
If no feature test macros are explicitly defined,
then (since glibc 2.4)
.B _POSIX_SOURCE
is defined by default with the value
200112L, so that the XSI-compliant version of
.BR strerror_r ()
is provided by default.

The XSI-compliant
.BR strerror_r ()
is preferred for portable applications.
It returns the error string in the user-supplied buffer
.I buf
of length
.IR buflen .

The GNU-specific
.BR strerror_r ()
returns a pointer to a string containing the error message.
This may be either a pointer to a string that the function stores in
.IR buf ,
or a pointer to some (immutable) static string
(in which case
.I buf
is unused).
If the function stores a string in
.IR buf ,
then at most
.I buflen
bytes are stored (the string may be truncated if
.I buflen
is too small and
.I errnum
is unknown).
The string always includes a terminating null byte (\(aq\\0\(aq).
.\"
.SS strerror_l()
.BR strerror_l ()
is like
.BR strerror (),
but maps
.I errnum
to a locale-dependent error message in the locale specified by
.IR locale .
The behavior of
.BR strerror_l ()
is undefined if
.I locale
is the special locale object
.BR LC_GLOBAL_LOCALE
or is not a valid locale object handle.
.SH RETURN VALUE
The
.BR strerror (),
.BR strerror_l (),
and the GNU-specific
.BR strerror_r ()
functions return
the appropriate error description string,
or an "Unknown error nnn" message if the error number is unknown.

The XSI-compliant
.BR strerror_r ()
function returns 0 on success.
On error,
a (positive) error number is returned (since glibc 2.13),
or \-1 is returned and
.I errno
is set to indicate the error (glibc versions before 2.13).

POSIX.1-2001 and POSIX.1-2008 require that a successful call to
.BR strerror ()
or
.BR strerror_l ()
shall leave
.I errno
unchanged, and note that,
since no function return value is reserved to indicate an error,
an application that wishes to check for errors should initialize
.I errno
to zero before the call,
and then check
.I errno
after the call.
.SH ERRORS
.TP
.B EINVAL
The value of
.I errnum
is not a valid error number.
.TP
.B ERANGE
Insufficient storage was supplied to contain the error description string.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw14 lb lb
l l l.
Interface	Attribute	Value
T{
.BR strerror ()
T}	Thread safety	MT-Unsafe race:strerror
T{
.BR strerror_r (),
.br
.BR strerror_l ()
T}	Thread safety	MT-Safe
.TE
.SH VERSIONS
The
.BR strerror_l ()
function first appeared in glibc 2.6.
.SH CONFORMING TO
.BR strerror ()
is specified by POSIX.1-2001, POSIX.1-2008, C89, and C99.
.BR strerror_r ()
is specified by POSIX.1-2001 and POSIX.1-2008.

.BR strerror_l ()
is specified in POSIX.1-2008.

The GNU-specific
.BR strerror_r ()
function is a nonstandard extension.

POSIX.1-2001 permits
.BR strerror ()
to set
.I errno
if the call encounters an error, but does not specify what
value should be returned as the function result in the event of an error.
On some systems,
.\" e.g., Solaris 8, HP-UX 11
.BR strerror ()
returns NULL if the error number is unknown.
On other systems,
.\" e.g., FreeBSD 5.4, Tru64 5.1B
.BR strerror ()
returns a string something like "Error nnn occurred" and sets
.I errno
to
.B EINVAL
if the error number is unknown.
C99 and POSIX.1-2008 require the return value to be non-NULL.
.SH SEE ALSO
.BR err (3),
.BR errno (3),
.BR error (3),
.BR perror (3),
.BR strsignal (3),
.BR locale (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2000 Andries Brouwer (aeb@cwi.nl)
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.TH STRFMON 3  2015-03-02 "Linux" "Linux Programmer's Manual"
.SH NAME
strfmon \- convert monetary value to a string
.SH SYNOPSIS
.B #include <monetary.h>
.sp
.BI "ssize_t strfmon(char *" s ", size_t " max ", const char *" format ,
.B "...);"
.SH DESCRIPTION
The
.BR strfmon ()
function formats the specified amounts
according to the format specification
.I format
and places the
result in the character array
.I s
of size
.IR max .
.PP
Ordinary characters in
.I format
are copied to
.I s
without conversion.
Conversion specifiers are introduced by a \(aq%\(aq
character.
Immediately following it there can be zero or more
of the following flags:
.TP
.BI = f
The single-byte character
.I f
is used as the numeric fill character (to be used with
a left precision, see below).
When not specified, the space character is used.
.TP
.B ^
Do not use any grouping characters that might be defined
for the current locale.
By default, grouping is enabled.
.TP
.BR ( " or " +
The ( flag indicates that negative amounts should be enclosed between
parentheses.
The + flag indicates that signs should be handled
in the default way, that is, amounts are preceded by the locale's
sign indication, for example, nothing for positive, "\-" for negative.
.TP
.B !
Omit the currency symbol.
.TP
.B \-
Left justify all fields.
The default is right justification.
.LP
Next, there may be a field width: a decimal digit string specifying
a minimum field width in bytes.
The default is 0.
A result smaller than this width is padded with spaces
(on the left, unless the left-justify flag was given).
.LP
Next, there may be a left precision of the form "#" followed by
a decimal digit string.
If the number of digits left of the
radix character is smaller than this, the representation is
padded on the left with the numeric fill character.
Grouping characters are not counted in this field width.
.LP
Next, there may be a right precision of the form "." followed by
a decimal digit string.
The amount being formatted is rounded to
the specified number of digits prior to formatting.
The default is specified in the
.I frac_digits
and
.I int_frac_digits
items of the current locale.
If the right precision is 0, no radix character is printed.
(The radix character here is determined by
.BR LC_MONETARY ,
and may differ from that specified by
.BR LC_NUMERIC .)
.LP
Finally, the conversion specification must be ended with a
conversion character.
The three conversion characters are
.TP
.B %
(In this case, the entire specification must be exactly "%%".)
Put a \(aq%\(aq character in the result string.
.TP
.B i
One argument of type
.I double
is converted using the locale's international currency format.
.TP
.B n
One argument of type
.I double
is converted using the locale's national currency format.
.SH RETURN VALUE
The
.BR strfmon ()
function returns the number of characters placed
in the array
.IR s ,
not including the terminating null byte,
provided the string, including the terminating null byte, fits.
Otherwise, it sets
.I errno
to
.BR E2BIG ,
returns \-1, and the contents of the array is undefined.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR strfmon ()
T}	Thread safety	MT-Safe locale
.TE

.SH CONFORMING TO
Not in POSIX.1-2001.
Present on several other systems.
.SH EXAMPLE
The call
.in +4n
.nf

strfmon(buf, sizeof(buf), "[%^=*#6n] [%=*#6i]",
        1234.567, 1234.567);

.fi
.in
outputs
.in +4n

[ fl **1234,57] [ NLG  **1 234,57]

.in
in the Dutch locale (with fl for "florijnen" and NLG for Netherlands Guilders).
The grouping character is very ugly because it takes as much space
as a digit, while it should not take more than half that,
and will no doubt cause confusion.
Surprisingly, the "fl" is preceded and followed by a space,
and "NLG" is preceded by one and followed by two spaces.
This may be a bug in the locale files.
The Italian, Australian, Swiss,
and Portuguese locales yield
.in +4n

[ L. **1235] [ ITL  **1.235]
.br
[ $**1234.57] [ AUD **1,234.57]
.br
[Fr. **1234,57] [CHF  **1.234,57]
.br
[ **1234$57Esc] [ **1.234$57PTE ]
.in
.SH SEE ALSO
.BR setlocale (3),
.BR sprintf (3),
.BR locale (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified Sun Jul 25 10:39:43 1993 by Rik Faith (faith@cs.unc.edu)
.TH STRFRY 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
strfry \- randomize a string
.SH SYNOPSIS
.nf
.BR "#define _GNU_SOURCE" "         /* See feature_test_macros(7) */"
.br
.B #include <string.h>
.sp
.BI "char *strfry(char *" string );
.fi
.SH DESCRIPTION
The
.BR strfry ()
function randomizes the contents of
.I string
by
using
.BR rand (3)
to randomly swap characters in the string.
The result is an anagram of
.IR string .
.SH RETURN VALUE
The
.BR strfry ()
functions returns a pointer to the randomized
string.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR strfry ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
The
.BR strfry ()
function is unique to the
GNU C Library.
.SH SEE ALSO
.BR memfrob (3),
.BR string (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\"     GNU texinfo documentation on glibc date/time functions.
.\" Modified Sat Jul 24 18:03:44 1993 by Rik Faith (faith@cs.unc.edu)
.\" Applied fix by Wolfgang Franke, aeb, 961011
.\" Corrected return value, aeb, 970307
.\" Added Single UNIX Spec conversions and %z, aeb/esr, 990329.
.\" 2005-11-22 mtk, added Glibc Notes covering optional 'flag' and
.\"           'width' components of conversion specifications.
.\"
.TH STRFTIME 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
strftime \- format date and time
.SH SYNOPSIS
.nf
.B #include <time.h>
.sp
.BI "size_t strftime(char *" s ", size_t " max ", const char *" format ,
.BI "                const struct tm *" tm );
.fi
.SH DESCRIPTION
The
.BR strftime ()
function formats the broken-down time
.I tm
according to the format specification
.I format
and places the
result in the character array
.I s
of size
.IR max .
.\" FIXME . POSIX says: Local timezone information is used as though
.\" strftime() called tzset().  But this doesn't appear to be the case
.PP
The format specification is a null-terminated string and may contain
special character sequences called
.IR "conversion specifications",
each of which is introduced by a \(aq%\(aq character and terminated by
some other character known as a
.IR "conversion specifier character".
All other character sequences are
.IR "ordinary character sequences".
.PP
The characters of ordinary character sequences (including the null byte)
are copied verbatim from
.I format
to
.IR s .
However, the characters
of conversion specifications are replaced as follows:
.TP
.B %a
The abbreviated name of the day of the week according to the current locale.
.TP
.B %A
The full name of the day of the week according to the current locale.
.TP
.B %b
The abbreviated month name according to the current locale.
.TP
.B %B
The full month name according to the current locale.
.TP
.B %c
The preferred date and time representation for the current locale.
.TP
.B %C
The century number (year/100) as a 2-digit integer. (SU)
.TP
.B %d
The day of the month as a decimal number (range 01 to 31).
.TP
.B %D
Equivalent to
.BR %m/%d/%y .
(Yecch\(emfor Americans only.
Americans should note that in other countries
.B %d/%m/%y
is rather common.
This means that in international context this format is
ambiguous and should not be used.) (SU)
.TP
.B %e
Like
.BR %d ,
the day of the month as a decimal number, but a leading
zero is replaced by a space. (SU)
.TP
.B %E
Modifier: use alternative format, see below. (SU)
.TP
.B %F
Equivalent to
.B %Y-%m-%d
(the ISO\ 8601 date format). (C99)
.TP
.B %G
The ISO\ 8601 week-based year (see NOTES) with century as a decimal number.
The 4-digit year corresponding to the ISO week number (see
.BR %V ).
This has the same format and value as
.BR %Y ,
except that if the ISO week number belongs to the previous or next year,
that year is used instead. (TZ)
.TP
.B %g
Like
.BR %G ,
but without century, that is, with a 2-digit year (00-99). (TZ)
.TP
.B %h
Equivalent to
.BR %b .
(SU)
.TP
.B %H
The hour as a decimal number using a 24-hour clock (range 00 to 23).
.TP
.B %I
The hour as a decimal number using a 12-hour clock (range 01 to 12).
.TP
.B %j
The day of the year as a decimal number (range 001 to 366).
.TP
.B %k
The hour (24-hour clock) as a decimal number (range 0 to 23);
single digits are preceded by a blank.
(See also
.BR %H .)
(TZ)
.TP
.B %l
The hour (12-hour clock) as a decimal number (range 1 to 12);
single digits are preceded by a blank.
(See also
.BR %I .)
(TZ)
.TP
.B %m
The month as a decimal number (range 01 to 12).
.TP
.B %M
The minute as a decimal number (range 00 to 59).
.TP
.B %n
A newline character. (SU)
.TP
.B %O
Modifier: use alternative format, see below. (SU)
.TP
.B %p
Either "AM" or "PM" according to the given time value, or the
corresponding strings for the current locale.
Noon is treated as "PM" and midnight as "AM".
.TP
.B %P
Like
.B %p
but in lowercase: "am" or "pm" or a corresponding
string for the current locale. (GNU)
.TP
.B %r
The time in a.m. or p.m. notation.
In the POSIX locale this is equivalent to
.BR "%I:%M:%S %p" .
(SU)
.TP
.B %R
The time in 24-hour notation
.RB ( %H:%M ).
(SU)
For a version including the seconds, see
.B %T
below.
.TP
.B %s
The number of seconds since the Epoch, 1970-01-01 00:00:00 +0000 (UTC). (TZ)
.TP
.B %S
The second as a decimal number (range 00 to 60).
(The range is up to 60 to allow for occasional leap seconds.)
.TP
.B %t
A tab character. (SU)
.TP
.B %T
The time in 24-hour notation
.RB ( %H:%M:%S ).
(SU)
.TP
.B %u
The day of the week as a decimal, range 1 to 7, Monday being 1.
See also
.BR %w .
(SU)
.TP
.B %U
The week number of the current year as a decimal number,
range 00 to 53, starting with the first Sunday as the first day
of week 01.
See also
.B %V
and
.BR %W .
.TP
.B %V
The ISO\ 8601 week number (see NOTES) of the current year as a decimal number,
range 01 to 53, where week 1 is the first week that has at least
4 days in the new year.
See also
.B %U
and
.BR %W .
(SU)
.TP
.B %w
The day of the week as a decimal, range 0 to 6, Sunday being 0.
See also
.BR %u .
.TP
.B %W
The week number of the current year as a decimal number,
range 00 to 53, starting with the first Monday as the first day of week 01.
.TP
.B %x
The preferred date representation for the current locale without the time.
.TP
.B %X
The preferred time representation for the current locale without the date.
.TP
.B %y
The year as a decimal number without a century (range 00 to 99).
.TP
.B %Y
The year as a decimal number including the century.
.TP
.B %z
The
.I +hhmm
or
.I -hhmm
numeric timezone (that is, the hour and minute offset from UTC). (SU)
.TP
.B %Z
The timezone name or abbreviation.
.TP
.B %+
.\" Nov 05 -- Not in Linux/glibc, but is in some BSDs (according to
.\" their man pages)
The date and time in
.BR date (1)
format. (TZ)
(Not supported in glibc2.)
.TP
.B %%
A literal \(aq%\(aq character.
.PP
Some conversion specifications can be modified by preceding the
conversion specifier character by the
.B E
or
.B O
.I modifier
to indicate that an alternative format should be used.
If the alternative format or specification does not exist for
the current locale, the behavior will be as if the unmodified
conversion specification were used. (SU)
The Single UNIX Specification mentions
.BR %Ec ,
.BR %EC ,
.BR %Ex ,
.BR %EX ,
.BR %Ey ,
.BR %EY ,
.BR %Od ,
.BR %Oe ,
.BR %OH ,
.BR %OI ,
.BR %Om ,
.BR %OM ,
.BR %OS ,
.BR %Ou ,
.BR %OU ,
.BR %OV ,
.BR %Ow ,
.BR %OW ,
.BR %Oy ,
where the effect of the
.B O
modifier is to use
alternative numeric symbols (say, roman numerals), and that of the
E modifier is to use a locale-dependent alternative representation.
.PP
The broken-down time structure
.I tm
is defined in
.IR <time.h> .
See also
.BR ctime (3).
.SH RETURN VALUE
Provided that the result string,
including the terminating null byte, does not exceed
.I max
bytes,
.BR strftime ()
returns the number of bytes (excluding the terminating null byte)
placed in the array
.IR s .
If the length of the result string (including the terminating null byte)
would exceed
.I max
bytes, then
.BR strftime ()
returns 0, and the contents of the array are undefined.
.\" (This behavior applies since at least libc 4.4.4;
.\" very old versions of libc, such as libc 4.4.1,
.\" would return
.\" .I max
.\" if the array was too small.)
.LP
Note that the return value 0 does not necessarily indicate an error.
For example, in many locales
.B %p
yields an empty string.
An empty
.I format
string will likewise yield an empty string.
.SH ENVIRONMENT
The environment variables
.B TZ
and
.B LC_TIME
are used.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR strftime ()
T}	Thread safety	MT-Safe env locale
.TE
.SH CONFORMING TO
SVr4, C89, C99.
There are strict inclusions between the set of conversions
given in ANSI C (unmarked), those given in the Single UNIX Specification
(marked SU), those given in Olson's timezone package (marked TZ),
and those given in glibc (marked GNU), except that
.B %+
is not supported in glibc2.
On the other hand glibc2 has several more extensions.
POSIX.1 only refers to ANSI C; POSIX.2 describes under
.BR date (1)
several extensions that could apply to
.BR strftime ()
as well.
The
.B %F
conversion is in C99 and POSIX.1-2001.

In SUSv2, the
.B %S
specifier allowed a range of 00 to 61,
to allow for the theoretical possibility of a minute that
included a double leap second
(there never has been such a minute).
.SH NOTES
.SS ISO 8601 week dates
.BR %G ,
.BR %g ,
and
.BR %V
yield values calculated from the week-based year defined by the
ISO\ 8601 standard.
In this system, weeks start on a Monday, and are numbered from 01,
for the first week, up to 52 or 53, for the last week.
Week 1 is the first week where four or more days fall within the
new year (or, synonymously, week 01 is:
the first week of the year that contains a Thursday;
or, the week that has 4 January in it).
When three of fewer days of the first calendar week of the new year fall
within that year,
then the ISO 8601 week-based system counts those days as part of week 53
of the preceding year.
For example, 1 January 2010 is a Friday,
meaning that just three days of that calendar week fall in 2010.
Thus, the ISO\ 8601 week-based system considers these days to be part of
week 53
.RB ( %V )
of the year 2009
.RB ( %G );
week 01 of ISO\ 8601 year 2010 starts on Monday, 4 January 2010.
.SS Glibc notes
Glibc provides some extensions for conversion specifications.
(These extensions are not specified in POSIX.1-2001, but a few other
systems provide similar features.)
.\" HP-UX and Tru64 also have features like this.
Between the \(aq%\(aq character and the conversion specifier character,
an optional
.I flag
and field
.I width
may be specified.
(These precede the
.B E
or
.B O
modifiers, if present.)

The following flag characters are permitted:
.TP
.B _
(underscore)
Pad a numeric result string with spaces.
.TP
.B \-
(dash)
Do not pad a numeric result string.
.TP
.B 0
Pad a numeric result string with zeros even if the conversion
specifier character uses space-padding by default.
.TP
.B ^
Convert alphabetic characters in result string to uppercase.
.TP
.B #
Swap the case of the result string.
(This flag works only with certain conversion specifier characters,
and of these, it is only really useful with
.BR %Z .)
.PP
An optional decimal width specifier may follow the (possibly absent) flag.
If the natural size of the field is smaller than this width,
then the result string is padded (on the left) to the specified width.
.SH BUGS
If the output string would exceed
.I max
bytes,
.I errno
is
.I not
set.
This makes it impossible to distinguish this error case from cases where the
.I format
string legitimately produces a zero-length output string.
POSIX.1-2001
does
.I not
specify any
.I errno
settings for
.BR strftime ().

Some buggy versions of
.BR gcc (1)
complain about the use of
.BR %c :
.IR "warning: `%c' yields only last 2 digits of year in some locales" .
Of course programmers are encouraged to use
.BR %c ,
it gives the preferred date and time representation.
One meets all kinds of strange obfuscations
to circumvent this
.BR gcc (1)
problem.
A relatively clean one is to add an
intermediate function
.in +4n
.nf

size_t
my_strftime(char *s, size_t max, const char *fmt,
            const struct tm *tm)
{
    return strftime(s, max, fmt, tm);
}
.fi
.in

Nowadays,
.BR gcc (1)
provides the
.IR \-Wno\-format\-y2k
option to prevent the warning,
so that the above workaround is no longer required.
.SH EXAMPLE
.BR "RFC\ 2822-compliant date format"
(with an English locale for %a and %b)
.PP
.in +2n
"%a,\ %d\ %b\ %Y\ %T\ %z"
.PP
.BR "RFC\ 822-compliant date format"
(with an English locale for %a and %b)
.PP
.in +2n
"%a,\ %d\ %b\ %y\ %T\ %z"
.SS Example program
The program below can be used to experiment with
.BR strftime ().
.PP
Some examples of the result string produced by the glibc implementation of
.BR strftime ()
are as follows:
.in +4n
.nf

.RB "$" " ./a.out \(aq%m\(aq"
Result string is "11"
.RB "$" " ./a.out \(aq%5m\(aq"
Result string is "00011"
.RB "$" " ./a.out \(aq%_5m\(aq"
Result string is "   11"
.fi
.in
.SS Program source
.nf
#include <time.h>
#include <stdio.h>
#include <stdlib.h>

int
main(int argc, char *argv[])
{
    char outstr[200];
    time_t t;
    struct tm *tmp;

    t = time(NULL);
    tmp = localtime(&t);
    if (tmp == NULL) {
        perror("localtime");
        exit(EXIT_FAILURE);
    }

    if (strftime(outstr, sizeof(outstr), argv[1], tmp) == 0) {
        fprintf(stderr, "strftime returned 0");
        exit(EXIT_FAILURE);
    }

    printf("Result string is \\"%s\\"\\n", outstr);
    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR date (1),
.BR time (2),
.BR ctime (3),
.BR setlocale (3),
.BR sprintf (3),
.BR strptime (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified Sun Jul 25 10:54:31 1993, Rik Faith (faith@cs.unc.edu)
.TH STRING 3  2014-01-04 "" "Linux Programmer's Manual"
.SH NAME
stpcpy, strcasecmp, strcat, strchr, strcmp, strcoll, strcpy, strcspn,
strdup, strfry, strlen, strncat, strncmp, strncpy, strncasecmp, strpbrk,
strrchr, strsep, strspn, strstr, strtok, strxfrm, index, rindex
\- string operations
.SH SYNOPSIS
.B #include <strings.h>
.TP
.BI "int strcasecmp(const char *" s1 ", const char *" s2 );
Compare the strings
.I s1
and
.I s2
ignoring case.
.TP
.BI "int strncasecmp(const char *" s1 ", const char *" s2 ", size_t " n );
Compare the first
.I n
characters of the strings
.I s1
and
.I s2
ignoring case.
.TP
.BI "char *index(const char *" s ", int " c );
Return a pointer to the first occurrence of the character
.I c
in the string
.IR s .
.TP
.BI "char *rindex(const char *" s ", int " c );
Return a pointer to the last occurrence of the character
.I c
in the string
.IR s .
.TP
.B #include <string.h>
.TP
.BI "char *stpcpy(char *" dest ", const char *" src );
Copy a string from
.I src
to
.IR dest ,
returning a pointer to the end of the resulting string at
.IR dest .
.TP
.BI "char *strcat(char *" dest ", const char *" src );
Append the string
.I src
to the string
.IR dest ,
returning a pointer
.IR dest .
.TP
.BI "char *strchr(const char *" s ", int " c );
Return a pointer to the first occurrence of the character
.I c
in the string
.IR s .
.TP
.BI "int strcmp(const char *" s1 ", const char *" s2 );
Compare the strings
.I s1
with
.IR s2 .
.TP
.BI "int strcoll(const char *" s1 ", const char *" s2 );
Compare the strings
.I s1
with
.I s2
using the current locale.
.TP
.BI "char *strcpy(char *" dest ", const char *" src );
Copy the string
.I src
to
.IR dest ,
returning a pointer to the start of
.IR dest .
.TP
.BI "size_t strcspn(const char *" s ", const char *" reject );
Calculate the length of the initial segment of the string
.I s
which does not contain any of bytes in the string
.IR reject ,
.TP
.BI "char *strdup(const char *" s );
Return a duplicate of the string
.I s
in memory allocated using
.BR malloc (3).
.TP
.BI "char *strfry(char *" string );
Randomly swap the characters in
.IR string .
.TP
.BI "size_t strlen(const char *" s );
Return the length of the string
.IR s .
.TP
.BI "char *strncat(char *" dest ", const char *" src ", size_t " n );
Append at most
.I n
characters from the string
.I src
to the string
.IR dest ,
returning a pointer to
.IR dest .
.TP
.BI "int strncmp(const char *" s1 ", const char *" s2 ", size_t " n );
Compare at most
.I n
bytes of the strings
.I s1
and
.IR s2 .
.TP
.BI "char *strncpy(char *" dest ", const char *" src ", size_t " n );
Copy at most
.I n
bytes from string
.I src
to
.IR dest ,
returning a pointer to the start of
.IR dest .
.TP
.BI "char *strpbrk(const char *" s ", const char *" accept );
Return a pointer to the first occurrence in the string
.I s
of one of the bytes in the string
.IR accept .
.TP
.BI "char *strrchr(const char *" s ", int " c );
Return a pointer to the last occurrence of the character
.I c
in the string
.IR s .
.TP
.BI "char *strsep(char **" stringp ", const char *" delim );
Extract the initial token in
.I stringp
that is delimited by one of the bytes in
.IR delim .
.TP
.BI "size_t strspn(const char *" s ", const char *" accept );
Calculate the length of the starting segment in the string
.I s
that consists entirely of bytes in
.IR accept .
.TP
.BI "char *strstr(const char *" haystack ", const char *" needle );
Find the first occurrence of the substring
.I needle
in the string
.IR haystack ,
returning a pointer to the found substring.
.TP
.BI "char *strtok(char *" s ", const char *" delim );
Extract tokens from the string
.I s
that are delimited by one of the bytes in
.IR delim .
.TP
.BI "size_t strxfrm(char *" dest ", const char *" src ", size_t " n );
Transforms
.I src
to the current locale and copies the first
.I n
characters to
.IR dest .
.SH DESCRIPTION
The string functions perform string operations on null-terminated
strings.
See the individual man pages for descriptions of each function.
.SH SEE ALSO
.BR index (3),
.BR rindex (3),
.BR stpcpy (3),
.BR strcasecmp (3),
.BR strcat (3),
.BR strchr (3),
.BR strcmp (3),
.BR strcoll (3),
.BR strcpy (3),
.BR strcspn (3),
.BR strdup (3),
.BR strfry (3),
.BR strlen (3),
.BR strncasecmp (3),
.BR strncat (3),
.BR strncmp (3),
.BR strncpy (3),
.BR strpbrk (3),
.BR strrchr (3),
.BR strsep (3),
.BR strspn (3),
.BR strstr (3),
.BR strtok (3),
.BR strxfrm (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified Sat Jul 24 18:02:26 1993 by Rik Faith (faith@cs.unc.edu)
.TH STRLEN 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
strlen \- calculate the length of a string
.SH SYNOPSIS
.nf
.B #include <string.h>
.sp
.BI "size_t strlen(const char *" s );
.fi
.SH DESCRIPTION
The
.BR strlen ()
function calculates the length of the string
.IR s ,
excluding the terminating null byte (\(aq\\0\(aq).
.SH RETURN VALUE
The
.BR strlen ()
function returns the number of bytes in the string
.IR s .
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR strlen ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
SVr4, 4.3BSD, C89, C99.
.SH SEE ALSO
.BR string (3),
.BR strnlen (3),
.BR wcslen (3),
.BR wcsnlen (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) Bruno Haible <haible@clisp.cons.org>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_ONEPARA)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"   GNU glibc-2 source code and manual
.\"
.TH STRNLEN 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
strnlen \- determine the length of a fixed-size string
.SH SYNOPSIS
.nf
.B #include <string.h>
.sp
.BI "size_t strnlen(const char *" s ", size_t " maxlen );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR strnlen ():
.PD 0
.ad l
.RS 4
.TP 4
Since glibc 2.10:
_XOPEN_SOURCE\ >=\ 700 || _POSIX_C_SOURCE\ >=\ 200809L
.TP
Before glibc 2.10:
_GNU_SOURCE
.RE
.ad
.PD
.SH DESCRIPTION
The
.BR strnlen ()
function returns the number of bytes in the string
pointed to by
.IR s ,
excluding the terminating null byte (\(aq\\0\(aq),
but at most
.IR maxlen .
In doing this,
.BR strnlen ()
looks only at the first
.I maxlen
bytes at
.I s
and never beyond
.IR s+maxlen .
.SH RETURN VALUE
The
.BR strnlen ()
function returns
.IR strlen(s) ,
if that is less than
.IR maxlen ,
or
.I maxlen
if there is no null byte (\(aq\\0\(aq) among the first
.I maxlen
bytes pointed to by
.IR s .
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR strnlen ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
POSIX.1-2008.
.SH SEE ALSO
.BR strlen (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified Sat Jul 24 18:01:24 1993 by Rik Faith (faith@cs.unc.edu)
.TH STRPBRK 3  2015-03-02 "" "Linux Programmer's Manual"
.SH NAME
strpbrk \- search a string for any of a set of bytes
.SH SYNOPSIS
.nf
.B #include <string.h>
.sp
.BI "char *strpbrk(const char *" s ", const char *" accept );
.fi
.SH DESCRIPTION
The
.BR strpbrk ()
function locates the first occurrence in the
string
.I s
of any of the bytes in the string
.IR accept .
.SH RETURN VALUE
The
.BR strpbrk ()
function returns a pointer to the byte in
.I s
that matches one of the bytes in
.IR accept ,
or NULL
if no such byte is found.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR strpbrk ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
SVr4, 4.3BSD, C89, C99.
.SH SEE ALSO
.BR index (3),
.BR memchr (3),
.BR rindex (3),
.BR strchr (3),
.BR string (3),
.BR strsep (3),
.BR strspn (3),
.BR strstr (3),
.BR strtok (3),
.BR wcspbrk (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 Mitchum DSouza <m.dsouza@mrc-apu.cam.ac.uk>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified, jmv@lucifer.dorms.spbu.ru, 1999-11-08
.\" Modified, aeb, 2000-04-07
.\" Updated from glibc docs, C. Scott Ananian, 2001-08-25
.\" Modified, aeb, 2001-08-31
.\" Modified, wharms 2001-11-12, remark on white space and example
.\"
.TH STRPTIME 3 2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
strptime \- convert a string representation of time to a time tm structure
.SH SYNOPSIS
.BR "#define _XOPEN_SOURCE" "       /* See feature_test_macros(7) */"
.br
.B #include <time.h>
.sp
.BI "char *strptime(const char *" s ", const char *" format ,
.BI "struct tm *" tm );
.SH DESCRIPTION
The
.BR strptime ()
function is the converse of
.BR strftime (3);
it converts the character string pointed to by
.I s
to values which are stored in the
"broken-down time"
structure pointed to by
.IR tm ,
using the format specified by
.IR format .

The broken-down time structure
.I tm
is defined in
.IR <time.h>
as follows:
.sp
.in +4n
.nf
struct tm {
    int tm_sec;    /* Seconds (0-60) */
    int tm_min;    /* Minutes (0-59) */
    int tm_hour;   /* Hours (0-23) */
    int tm_mday;   /* Day of the month (1-31) */
    int tm_mon;    /* Month (0-11) */
    int tm_year;   /* Year - 1900 */
    int tm_wday;   /* Day of the week (0-6, Sunday = 0) */
    int tm_yday;   /* Day in the year (0-365, 1 Jan = 0) */
    int tm_isdst;  /* Daylight saving time */
};
.fi
.in

For more details on the
.I tm
structure, see
.BR ctime (3).

The
.I format
argument
is a character string that consists of field descriptors and text characters,
reminiscent of
.BR scanf (3).
Each field descriptor consists of a
.B %
character followed by another character that specifies the replacement
for the field descriptor.
All other characters in the
.I format
string must have a matching character in the input string,
except for whitespace, which matches zero or more
whitespace characters in the input string.
There should be white\%space or other alphanumeric characters
between any two field descriptors.
.PP
The
.BR strptime ()
function processes the input string from left
to right.
Each of the three possible input elements (whitespace,
literal, or format) are handled one after the other.
If the input cannot be matched to the format string, the function stops.
The remainder of the format and input strings are not processed.
.PP
The supported input field descriptors are listed below.
In case a text string (such as the name of a day of the week or a month name)
is to be matched, the comparison is case insensitive.
In case a number is to be matched, leading zeros are
permitted but not required.
.TP
.B %%
The
.B %
character.
.TP
.BR %a " or " %A
The name of the day of the week according to the current locale,
in abbreviated form or the full name.
.TP
.BR %b " or " %B " or " %h
The month name according to the current locale,
in abbreviated form or the full name.
.TP
.B %c
The date and time representation for the current locale.
.TP
.B %C
The century number (0-99).
.TP
.BR %d " or " %e
The day of month (1-31).
.TP
.B %D
Equivalent to
.BR %m/%d/%y .
(This is the American style date, very confusing
to non-Americans, especially since
.B %d/%m/%y
is widely used in Europe.
The ISO 8601 standard format is
.BR %Y-%m-%d .)
.TP
.B %H
The hour (0-23).
.TP
.B %I
The hour on a 12-hour clock (1-12).
.TP
.B %j
The day number in the year (1-366).
.TP
.B %m
The month number (1-12).
.TP
.B %M
The minute (0-59).
.TP
.B %n
Arbitrary whitespace.
.TP
.B %p
The locale's equivalent of AM or PM.
(Note: there may be none.)
.TP
.B %r
The 12-hour clock time (using the locale's AM or PM).
In the POSIX locale equivalent to
.BR "%I:%M:%S %p" .
If
.I t_fmt_ampm
is empty in the
.B LC_TIME
part of the current locale,
then the behavior is undefined.
.TP
.B %R
Equivalent to
.BR %H:%M .
.TP
.B %S
The second (0-60; 60 may occur for leap seconds;
earlier also 61 was allowed).
.TP
.B %t
Arbitrary whitespace.
.TP
.B %T
Equivalent to
.BR %H:%M:%S .
.TP
.B %U
The week number with Sunday the first day of the week (0-53).
The first Sunday of January is the first day of week 1.
.TP
.B %w
The ordinal number of the day of the week (0-6), with Sunday = 0.
.TP
.B %W
The week number with Monday the first day of the week (0-53).
The first Monday of January is the first day of week 1.
.TP
.B %x
The date, using the locale's date format.
.TP
.B %X
The time, using the locale's time format.
.TP
.B %y
The year within century (0-99).
When a century is not otherwise specified, values in the range 69-99 refer
to years in the twentieth century (1969-1999); values in the
range 00-68 refer to years in the twenty-first century (2000-2068).
.TP
.B %Y
The year, including century (for example, 1991).
.LP
Some field descriptors can be modified by the E or O modifier characters
to indicate that an alternative format or specification should be used.
If the
alternative format or specification does not exist in the current locale, the
unmodified field descriptor is used.
.LP
The E modifier specifies that the input string may contain
alternative locale-dependent versions of the date and time representation:
.TP
.B %Ec
The locale's alternative date and time representation.
.TP
.B %EC
The name of the base year (period) in the locale's alternative representation.
.TP
.B %Ex
The locale's alternative date representation.
.TP
.B %EX
The locale's alternative time representation.
.TP
.B %Ey
The offset from
.B %EC
(year only) in the locale's alternative representation.
.TP
.B %EY
The full alternative year representation.
.LP
The O modifier specifies that the numerical input may be in an
alternative locale-dependent format:
.TP
.BR %Od " or " %Oe
The day of the month using the locale's alternative numeric symbols;
leading zeros are permitted but not required.
.TP
.B %OH
The hour (24-hour clock) using the locale's alternative numeric symbols.
.TP
.B %OI
The hour (12-hour clock) using the locale's alternative numeric symbols.
.TP
.B %Om
The month using the locale's alternative numeric symbols.
.TP
.B %OM
The minutes using the locale's alternative numeric symbols.
.TP
.B %OS
The seconds using the locale's alternative numeric symbols.
.TP
.B %OU
The week number of the year (Sunday as the first day of the week)
using the locale's alternative numeric symbols.
.TP
.B %Ow
The ordinal number of the day of the week (Sunday=0),
 using the locale's alternative numeric symbols.
.TP
.B %OW
The week number of the year (Monday as the first day of the week)
using the locale's alternative numeric symbols.
.TP
.B %Oy
The year (offset from
.BR %C )
using the locale's alternative numeric symbols.
.SH RETURN VALUE
The return value of the function is a pointer to the first character
not processed in this function call.
In case the input string
contains more characters than required by the format string, the return
value points right after the last consumed input character.
In case
the whole input string is consumed, the return value points to the null
byte at the end of the string.
If
.BR strptime ()
fails to match all
of the format string and therefore an error occurred, the function
returns NULL.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR strptime ()
T}	Thread safety	MT-Safe env locale
.TE
.SH CONFORMING TO
SUSv2, POSIX.1-2001.
.SH NOTES
.LP
In principle, this function does not initialize
.I tm
but
stores only the values specified.
This means that
.I tm
should be initialized before the call.
Details differ a bit between different UNIX systems.
The glibc implementation does not touch those fields which are not
explicitly specified, except that it recomputes the
.I tm_wday
and
.I tm_yday
field if any of the year, month, or day elements changed.
.\" .PP
.\" This function is available since libc 4.6.8.
.\" Linux libc4 and libc5 includes define the prototype unconditionally;
.\" glibc2 includes provide a prototype only when
.\" .B _XOPEN_SOURCE
.\" or
.\" .B _GNU_SOURCE
.\" are defined.
.\" .PP
.\" Before libc 5.4.13 whitespace
.\" (and the \(aqn\(aq and \(aqt\(aq specifications) was not handled,
.\" no \(aqE\(aq and \(aqO\(aq locale modifier characters were accepted,
.\" and the \(aqC\(aq specification was a synonym for the \(aqc\(aq specification.
.PP
The \(aqy\(aq (year in century) specification is taken to specify a year
.\" in the 20th century by libc4 and libc5.
.\" It is taken to be a year
in the range 1950-2049 by glibc 2.0.
It is taken to be a year in
1969-2068 since glibc 2.1.
.\" In libc4 and libc5 the code for %I is broken (fixed in glibc;
.\" %OI was fixed in glibc 2.2.4).
.SS Glibc notes
For reasons of symmetry, glibc tries to support for
.BR strptime ()
the same format characters as for
.BR strftime (3).
(In most cases, the corresponding fields are parsed, but no field in
.I tm
is changed.)
This leads to
.TP
.B %F
Equivalent to
.BR %Y-%m-%d ,
the ISO 8601 date format.
.TP
.B %g
The year corresponding to the ISO week number, but without the century
(0-99).
.TP
.B %G
The year corresponding to the ISO week number.
(For example, 1991.)
.TP
.B %u
The day of the week as a decimal number (1-7, where Monday = 1).
.TP
.B %V
The ISO 8601:1988 week number as a decimal number (1-53).
If the week (starting on Monday) containing 1 January has four or more days
in the new year, then it is considered week 1.
Otherwise, it is the last week
of the previous year, and the next week is week 1.
.TP
.B %z
An RFC-822/ISO 8601 standard timezone specification.
.TP
.B %Z
The timezone name.
.LP
Similarly, because of GNU extensions to
.BR strftime (3),
.B %k
is accepted as a synonym for
.BR %H ,
and
.B %l
should be accepted
as a synonym for
.BR %I ,
and
.B %P
is accepted as a synonym for
.BR %p .
Finally
.TP
.B %s
The number of seconds since the Epoch, 1970-01-01 00:00:00 +0000 (UTC).
Leap seconds are not counted unless leap second support is available.
.LP
The glibc implementation does not require whitespace between
two field descriptors.
.SH EXAMPLE
The following example demonstrates the use of
.BR strptime ()
and
.BR strftime (3).
.sp
.nf
#define _XOPEN_SOURCE
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

int
main(void)
{
    struct tm tm;
    char buf[255];

    memset(&tm, 0, sizeof(struct tm));
    strptime("2001\-11\-12 18:31:01", "%Y\-%m\-%d %H:%M:%S", &tm);
    strftime(buf, sizeof(buf), "%d %b %Y %H:%M", &tm);
    puts(buf);
    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR time (2),
.BR getdate (3),
.BR scanf (3),
.BR setlocale (3),
.BR strftime (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified Sat Jul 24 18:00:10 1993 by Rik Faith (faith@cs.unc.edu)
.\" Modified Mon Jan 20 12:04:18 1997 by Andries Brouwer (aeb@cwi.nl)
.\" Modified Tue Jan 23 20:23:07 2001 by Andries Brouwer (aeb@cwi.nl)
.\"
.TH STRSEP 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
strsep \- extract token from string
.SH SYNOPSIS
.nf
.B #include <string.h>
.sp
.BI "char *strsep(char **" stringp ", const char *" delim );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR strsep ():
_BSD_SOURCE
.SH DESCRIPTION
If
.I *stringp
is NULL, the
.BR strsep ()
function returns NULL
and does nothing else.
Otherwise, this function finds the first token
in the string
.IR *stringp ,
that is delimited by one of the bytes in the string
.IR delim .
This token is terminated by overwriting the delimiter
with a null byte (\(aq\\0\(aq),
and
.I *stringp
is updated to point past the token.
In case no delimiter was found, the token is taken to be
the entire string
.IR *stringp ,
and
.I *stringp
is made NULL.
.SH RETURN VALUE
The
.BR strsep ()
function returns a pointer to the token,
that is, it returns the original value of
.IR *stringp .
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR strsep ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
4.4BSD.
.SH NOTES
The
.BR strsep ()
function was introduced as a replacement for
.BR strtok (3),
since the latter cannot handle empty fields.
However,
.BR strtok (3)
conforms to C89/C99 and hence is more portable.
.SH BUGS
Be cautious when using this function.
If you do use it, note that:
.IP * 2
This function modifies its first argument.
.IP *
This function cannot be used on constant strings.
.IP *
The identity of the delimiting character is lost.
.SH SEE ALSO
.BR index (3),
.BR memchr (3),
.BR rindex (3),
.BR strchr (3),
.BR string (3),
.BR strpbrk (3),
.BR strspn (3),
.BR strstr (3),
.BR strtok (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified Sat Jul 24 17:59:03 1993 by Rik Faith (faith@cs.unc.edu)
.TH STRSIGNAL 3  2015-05-07 "GNU" "Linux Programmer's Manual"
.SH NAME
strsignal \- return string describing signal
.SH SYNOPSIS
.nf
.B #include <string.h>
.sp
.BI "char *strsignal(int " sig );
.sp
.BI "extern const char * const " sys_siglist [];
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR strsignal ():
.PD 0
.ad l
.RS 4
.TP 4
Since glibc 2.10:
_XOPEN_SOURCE\ >=\ 700 || _POSIX_C_SOURCE\ >=\ 200809L
.TP
Before glibc 2.10:
_GNU_SOURCE
.RE
.ad
.PD
.SH DESCRIPTION
The
.BR strsignal ()
function returns a string describing the signal
number passed in the argument
.IR sig .
The string can be used only until the next call to
.BR strsignal ().
.PP
The array
.I sys_siglist
holds the signal description strings
indexed by signal number.
The
.BR strsignal ()
function should be
used if possible instead of this array.
.SH RETURN VALUE
The
.BR strsignal ()
function returns the appropriate description
string, or an unknown signal message if the signal number is invalid.
On some systems (but not on Linux), NULL may instead be
returned for an invalid signal number.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lbw31
l l l.
Interface	Attribute	Value
T{
.BR strsignal ()
T}	Thread safety	MT-Unsafe race:strsignal locale
.TE

.SH CONFORMING TO
POSIX.1-2008.
Present on Solaris and the BSDs.
.SH SEE ALSO
.BR psignal (3),
.BR strerror (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified Sat Jul 24 17:57:50 1993 by Rik Faith (faith@cs.unc.edu)
.TH STRSPN 3  2015-03-02 "" "Linux Programmer's Manual"
.SH NAME
strspn, strcspn \- get length of a prefix substring
.SH SYNOPSIS
.nf
.B #include <string.h>
.sp
.BI "size_t strspn(const char *" s ", const char *" accept );
.sp
.BI "size_t strcspn(const char *" s ", const char *" reject );
.fi
.SH DESCRIPTION
The
.BR strspn ()
function calculates the length (in bytes) of the initial
segment of
.I s
which consists entirely of bytes in
.IR accept .
.PP
The
.BR strcspn ()
function calculates the length of the initial
segment of
.I s
which consists entirely of bytes not in
.IR reject .
.SH RETURN VALUE
The
.BR strspn ()
function returns the number of bytes in
the initial segment of
.I s
which consist only of bytes
from
.IR accept .
.PP
The
.BR strcspn ()
function returns the number of bytes in
the initial segment of
.I s
which are not in the string
.IR reject .
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw19 lb lb
l l l.
Interface	Attribute	Value
T{
.BR strspn (),
.BR strcspn ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
SVr4, 4.3BSD, C89, C99.
.SH SEE ALSO
.BR index (3),
.BR memchr (3),
.BR rindex (3),
.BR strchr (3),
.BR string (3),
.BR strpbrk (3),
.BR strsep (3),
.BR strstr (3),
.BR strtok (3),
.BR wcscspn (3),
.BR wcsspn (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified Sat Jul 24 17:56:43 1993 by Rik Faith (faith@cs.unc.edu)
.\" Added history, aeb, 980113.
.\" 2005-05-05 mtk: added strcasestr()
.\"
.TH STRSTR 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
strstr, strcasestr \- locate a substring
.SH SYNOPSIS
.nf
.B #include <string.h>
.sp
.BI "char *strstr(const char *" haystack ", const char *" needle );
.sp
.BR "#define _GNU_SOURCE" "         /* See feature_test_macros(7) */"
.sp
.B #include <string.h>
.sp
.BI "char *strcasestr(const char *" haystack ", const char *" needle );
.fi
.SH DESCRIPTION
The
.BR strstr ()
function finds the first occurrence of the substring
.I needle
in the string
.IR haystack .
The terminating null bytes (\(aq\\0\(aq) are not compared.

The
.BR strcasestr ()
function is like
.BR strstr (),
but ignores the case of both arguments.
.SH RETURN VALUE
These functions return a pointer to the beginning of the
located substring, or NULL if the substring is not found.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR strstr ()
T}	Thread safety	MT-Safe
T{
.BR strcasestr ()
T}	Thread safety	MT-Safe locale
.TE
.SH CONFORMING TO
The
.BR strstr ()
function conforms to C89 and C99.
The
.BR strcasestr ()
function is a nonstandard extension.
.\" .SH BUGS
.\" Early versions of Linux libc (like 4.5.26) would not allow
.\" an empty
.\" .I needle
.\" argument for
.\" .BR strstr ().
.\" Later versions (like 4.6.27) work correctly,
.\" and return
.\" .IR haystack
.\" when
.\" .I needle
.\" is empty.
.SH SEE ALSO
.BR index (3),
.BR memchr (3),
.BR memmem (3),
.BR rindex (3),
.BR strcasecmp (3),
.BR strchr (3),
.BR string (3),
.BR strpbrk (3),
.BR strsep (3),
.BR strspn (3),
.BR strtok (3),
.BR wcsstr (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1990, 1991 The Regents of the University of California.
.\" All rights reserved.
.\"
.\" This code is derived from software contributed to Berkeley by
.\" the American National Standards Committee X3, on Information
.\" Processing Systems.
.\"
.\" %%%LICENSE_START(BSD_4_CLAUSE_UCB)
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\" %%%LICENSE_END
.\"
.\"     @(#)strtod.3	5.3 (Berkeley) 6/29/91
.\"
.\" Modified Sun Aug 21 17:16:22 1994 by Rik Faith (faith@cs.unc.edu)
.\" Modified Sat May 04 19:34:31 MET DST 1996 by Michael Haardt
.\"   (michael@cantor.informatik.rwth-aachen.de)
.\" Added strof, strtold, aeb, 2001-06-07
.\"
.TH STRTOD 3 2015-03-02 "Linux" "Linux Programmer's Manual"
.SH NAME
strtod, strtof, strtold \- convert ASCII string to floating-point number
.SH SYNOPSIS
.B #include <stdlib.h>
.sp
.BI "double strtod(const char *" nptr ", char **" endptr );
.br
.BI "float strtof(const char *" nptr ", char **" endptr );
.br
.BI "long double strtold(const char *" nptr ", char **" endptr );
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.ad l
.sp
.BR strtof (),
.BR strtold ():
.RS 4
_XOPEN_SOURCE\ >=\ 600 || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.ad
.SH DESCRIPTION
The
.BR strtod (),
.BR strtof (),
and
.BR strtold ()
functions convert the initial portion of the string pointed to by
.I nptr
to
.IR double ,
.IR float ,
and
.I long double
representation, respectively.

The expected form of the (initial portion of the) string is
optional leading white space as recognized by
.BR isspace (3),
an optional plus (\(aq+\(aq) or minus sign (\(aq\-\(aq) and then either
(i) a decimal number, or (ii) a hexadecimal number,
or (iii) an infinity, or (iv) a NAN (not-a-number).
.LP
A
.I "decimal number"
consists of a nonempty sequence of decimal digits
possibly containing a radix character (decimal point, locale-dependent,
usually \(aq.\(aq), optionally followed by a decimal exponent.
A decimal exponent consists of an \(aqE\(aq or \(aqe\(aq, followed by an
optional plus or minus sign, followed by a nonempty sequence of
decimal digits, and indicates multiplication by a power of 10.
.LP
A
.I "hexadecimal number"
consists of a "0x" or "0X" followed by a nonempty sequence of
hexadecimal digits possibly containing a radix character,
optionally followed by a binary exponent.
A binary exponent
consists of a \(aqP\(aq or \(aqp\(aq, followed by an optional
plus or minus sign, followed by a nonempty sequence of
decimal digits, and indicates multiplication by a power of 2.
At least one of radix character and binary exponent must be present.
.LP
An
.I infinity
is either "INF" or "INFINITY", disregarding case.
.LP
A
.I NAN
is "NAN" (disregarding case) optionally followed by a string,
.IR (n-char-sequence) ,
where
.IR n-char-sequence
specifies in an implementation-dependent
way the type of NAN (see NOTES).
.SH RETURN VALUE
These functions return the converted value, if any.

If
.I endptr
is not NULL,
a pointer to the character after the last character used in the conversion
is stored in the location referenced by
.IR endptr .

If no conversion is performed, zero is returned and the value of
.I nptr
is stored in the location referenced by
.IR endptr .

If the correct value would cause overflow, plus or minus
.B HUGE_VAL
.RB ( HUGE_VALF ,
.BR HUGE_VALL )
is returned (according to the sign of the value), and
.B ERANGE
is stored in
.IR errno .
If the correct value would cause underflow, zero is
returned and
.B ERANGE
is stored in
.IR errno .
.SH ERRORS
.TP
.B ERANGE
Overflow or underflow occurred.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw29 lb lb
l l l.
Interface	Attribute	Value
T{
.BR strtod (),
.BR strtof (),
.BR strtold ()
T}	Thread safety	MT-Safe locale
.TE
.SH CONFORMING TO
C89 describes
.BR strtod (),
C99
describes the other two functions.
.SH NOTES
Since
0 can legitimately be returned
on both success and failure, the calling program should set
.I errno
to 0 before the call,
and then determine if an error occurred by checking whether
.I errno
has a nonzero value after the call.

In the glibc implementation, the
.IR n-char-sequence
that optionally follows "NAN"
is interpreted as an integer number
(with an optional '0' or '0x' prefix to select base 8 or 16)
that is to be placed in the
mantissa component of the returned value.
.\" From glibc 2.8's stdlib/strtod_l.c:
.\"     We expect it to be a number which is put in the
.\"     mantissa of the number.
.\" It looks as though at least FreeBSD (according to the manual) does
.\" something similar.
.\" C11 says: "An implementation may use the n-char sequence to determine
.\"	extra information to be represented in the NaN's significant."
.SH EXAMPLE
See the example on the
.BR strtol (3)
manual page;
the use of the functions described in this manual page is similar.
.SH SEE ALSO
.BR atof (3),
.BR atoi (3),
.BR atol (3),
.BR nan (3),
.BR nanf (3),
.BR nanl (3),
.BR strtol (3),
.BR strtoul (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2003 Andries Brouwer (aeb@cwi.nl)
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.TH STRTOIMAX 3 2015-03-02 "" "Linux Programmer's Manual"
.SH NAME
strtoimax, strtoumax \- convert string to integer
.SH SYNOPSIS
.nf
.B #include <inttypes.h>
.sp
.BI "intmax_t strtoimax(const char *" nptr ", char **" endptr ", int " base );
.br
.BI "uintmax_t strtoumax(const char *" nptr ", char **" endptr ", int " base );
.fi
.SH DESCRIPTION
These functions are just like
.BR strtol (3)
and
.BR strtoul (3),
except that they return a value of type
.I intmax_t
and
.IR uintmax_t ,
respectively.
.SH RETURN VALUE
On success, the converted value is returned.
If nothing was found to convert, zero is returned.
On overflow or underflow
.B INTMAX_MAX
or
.B INTMAX_MIN
or
.B UINTMAX_MAX
is returned, and
.I errno
is set to
.BR ERANGE .
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw24 lb lb
l l l.
Interface	Attribute	Value
T{
.BR strtoimax (),
.BR strtoumax ()
T}	Thread safety	MT-Safe locale
.TE
.SH CONFORMING TO
C99, POSIX.1-2001.
.SH SEE ALSO
.BR imaxabs (3),
.BR imaxdiv (3),
.BR strtol (3),
.BR strtoul (3),
.BR wcstoimax (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2005, 2013 Michael Kerrisk (mtk.manpages@gmail.com)
.\" a few fragments from an earlier (1996) version by
.\" Andries Brouwer (aeb@cwi.nl) remain.
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Rewritten old page, 960210, aeb@cwi.nl
.\" Updated, added strtok_r. 2000-02-13 Nicolás Lichtmaier <nick@debian.org>
.\" 2005-11-17, mtk: Substantial parts rewritten
.\" 2013-05-19, mtk: added much further detail on the operation of strtok()
.\"
.TH STRTOK 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
strtok, strtok_r \- extract tokens from strings
.SH SYNOPSIS
.nf
.B #include <string.h>
.sp
.BI "char *strtok(char *" str ", const char *" delim );
.sp
.BI "char *strtok_r(char *" str ", const char *" delim ", char **" saveptr );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR strtok_r ():
_SVID_SOURCE || _BSD_SOURCE || _POSIX_C_SOURCE\ >=\ 1 ||
_XOPEN_SOURCE || _POSIX_SOURCE
.ad b
.SH DESCRIPTION
The
.BR strtok ()
function breaks a string into a sequence of zero or more nonempty tokens.
On the first call to
.BR strtok ()
the string to be parsed should be
specified in
.IR str .
In each subsequent call that should parse the same string,
.I str
must be NULL.

The
.I delim
argument specifies a set of bytes that
delimit the tokens in the parsed string.
The caller may specify different strings in
.I delim
in successive
calls that parse the same string.

Each call to
.BR strtok ()
returns a pointer to a
null-terminated string containing the next token.
This string does not include the delimiting byte.
If no more tokens are found,
.BR strtok ()
returns NULL.

A sequence of calls to
.BR strtok ()
that operate on the same string maintains a pointer
that determines the point from which to start searching for the next token.
The first call to
.BR strtok ()
sets this pointer to point to the first byte of the string.
The start of the next token is determined by scanning forward
for the next nondelimiter byte in
.IR str .
If such a byte is found, it is taken as the start of the next token.
If no such byte is found,
then there are no more tokens, and
.BR strtok ()
returns NULL.
(A string that is empty or that contains only delimiters
will thus cause
.BR strtok ()
to return NULL on the first call.)

The end of each token is found by scanning forward until either
the next delimiter byte is found or until the
terminating null byte (\(aq\\0\(aq) is encountered.
If a delimiter byte is found, it is overwritten with
a null byte to terminate the current token, and
.BR strtok ()
saves a pointer to the following byte;
that pointer will be used as the starting point
when searching for the next token.
In this case,
.BR strtok ()
returns a pointer to the start of the found token.

From the above description,
it follows that a sequence of two or more contiguous delimiter bytes in
the parsed string is considered to be a single delimiter, and that
delimiter bytes at the start or end of the string are ignored.
Put another way: the tokens returned by
.BR strtok ()
are always nonempty strings.
Thus, for example, given the string "\fIaaa;;bbb,\fP",
successive calls to
.BR strtok ()
that specify the delimiter string "\fI;,\fP"
would return the strings "\fIaaa\fP" and "\fIbbb\fP",
and then a null pointer.

The
.BR strtok_r ()
function is a reentrant version
.BR strtok ().
The
.I saveptr
argument is a pointer to a
.IR "char\ *"
variable that is used internally by
.BR strtok_r ()
in order to maintain context between successive calls that parse the
same string.

On the first call to
.BR strtok_r (),
.I str
should point to the string to be parsed, and the value of
.I saveptr
is ignored.
In subsequent calls,
.I str
should be NULL, and
.I saveptr
should be unchanged since the previous call.

Different strings may be parsed concurrently using sequences of calls to
.BR strtok_r ()
that specify different
.I saveptr
arguments.
.SH RETURN VALUE
The
.BR strtok ()
and
.BR strtok_r ()
functions return a pointer to
the next token, or NULL if there are no more tokens.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR strtok ()
T}	Thread safety	MT-Unsafe race:strtok
T{
.BR strtok_r ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
.TP
.BR strtok ()
SVr4, POSIX.1-2001, 4.3BSD, C89, C99.
.TP
.BR strtok_r ()
POSIX.1-2001.
.SH BUGS
Be cautious when using these functions.
If you do use them, note that:
.IP * 2
These functions modify their first argument.
.IP *
These functions cannot be used on constant strings.
.IP *
The identity of the delimiting byte is lost.
.IP *
The
.BR strtok ()
function uses a static buffer while parsing, so it's not thread safe.
Use
.BR strtok_r ()
if this matters to you.
.SH EXAMPLE
The program below uses nested loops that employ
.BR strtok_r ()
to break a string into a two-level hierarchy of tokens.
The first command-line argument specifies the string to be parsed.
The second argument specifies the delimiter byte(s)
to be used to separate that string into "major" tokens.
The third argument specifies the delimiter byte(s)
to be used to separate the "major" tokens into subtokens.
.PP
An example of the output produced by this program is the following:
.PP
.in +4n
.nf
.RB "$" " ./a.out \(aqa/bbb///cc;xxx:yyy:\(aq \(aq:;\(aq \(aq/\(aq"
1: a/bbb///cc
         \-\-> a
         \-\-> bbb
         \-\-> cc
2: xxx
         \-\-> xxx
3: yyy
         \-\-> yyy
.fi
.in
.SS Program source
\&
.nf
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int
main(int argc, char *argv[])
{
    char *str1, *str2, *token, *subtoken;
    char *saveptr1, *saveptr2;
    int j;

    if (argc != 4) {
        fprintf(stderr, "Usage: %s string delim subdelim\\n",
                argv[0]);
        exit(EXIT_FAILURE);
    }

    for (j = 1, str1 = argv[1]; ; j++, str1 = NULL) {
        token = strtok_r(str1, argv[2], &saveptr1);
        if (token == NULL)
            break;
        printf("%d: %s\\n", j, token);

        for (str2 = token; ; str2 = NULL) {
            subtoken = strtok_r(str2, argv[3], &saveptr2);
            if (subtoken == NULL)
                break;
            printf("\t \-\-> %s\\n", subtoken);
        }
    }

    exit(EXIT_SUCCESS);
}
.fi
.PP
Another example program using
.BR strtok ()
can be found in
.BR getaddrinfo_a (3).
.SH SEE ALSO
.BR index (3),
.BR memchr (3),
.BR rindex (3),
.BR strchr (3),
.BR string (3),
.BR strpbrk (3),
.BR strsep (3),
.BR strspn (3),
.BR strstr (3),
.BR wcstok (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified Sun Jul 25 10:53:39 1993 by Rik Faith (faith@cs.unc.edu)
.\" Added correction due to nsd@bbc.com (Nick Duffek) - aeb, 950610
.TH STRTOL 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
strtol, strtoll, strtoq \- convert a string to a long integer
.SH SYNOPSIS
.nf
.B #include <stdlib.h>
.sp
.BI "long int strtol(const char *" nptr ", char **" endptr ", int " base );
.sp
.BI "long long int strtoll(const char *" nptr ", char **" endptr \
", int " base );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR strtoll ():
.RS 4
_XOPEN_SOURCE\ >=\ 600 || _BSD_SOURCE || _SVID_SOURCE || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.ad
.SH DESCRIPTION
The
.BR strtol ()
function converts the initial part of the string
in
.I nptr
to a long integer value according to the given
.IR base ,
which must be between 2 and 36 inclusive, or be the special value 0.
.PP
The string may begin with an arbitrary amount of white space (as
determined by
.BR isspace (3))
followed by a single optional \(aq+\(aq or \(aq\-\(aq sign.
If
.I base
is zero or 16, the string may then include a
"0x" prefix, and the number will be read in base 16; otherwise, a
zero
.I base
is taken as 10 (decimal) unless the next character
is \(aq0\(aq, in which case it is taken as 8 (octal).
.PP
The remainder of the string is converted to a
.I long int
value
in the obvious manner, stopping at the first character which is not a
valid digit in the given base.
(In bases above 10, the letter \(aqA\(aq in
either uppercase or lowercase represents 10, \(aqB\(aq represents 11, and so
forth, with \(aqZ\(aq representing 35.)
.PP
If
.I endptr
is not NULL,
.BR strtol ()
stores the address of the
first invalid character in
.IR *endptr .
If there were no digits at
all,
.BR strtol ()
stores the original value of
.I nptr
in
.I *endptr
(and returns 0).
In particular, if
.I *nptr
is not \(aq\\0\(aq but
.I **endptr
is \(aq\\0\(aq on return, the entire string is valid.
.PP
The
.BR strtoll ()
function works just like the
.BR strtol ()
function but returns a long long integer value.
.SH RETURN VALUE
The
.BR strtol ()
function returns the result of the conversion,
unless the value would underflow or overflow.
If an underflow occurs,
.BR strtol ()
returns
.BR LONG_MIN .
If an overflow occurs,
.BR strtol ()
returns
.BR LONG_MAX .
In both cases,
.I errno
is set to
.BR ERANGE .
Precisely the same holds for
.BR strtoll ()
(with
.B LLONG_MIN
and
.B LLONG_MAX
instead of
.B LONG_MIN
and
.BR LONG_MAX ).
.SH ERRORS
.TP
.B EINVAL
(not in C99)
The given
.I base
contains an unsupported value.
.TP
.B ERANGE
The resulting value was out of range.
.LP
The implementation may also set
.IR errno
to
.B EINVAL
in case
no conversion was performed (no digits seen, and 0 returned).
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw29 lb lb
l l l.
Interface	Attribute	Value
T{
.BR strtol (),
.BR strtoll (),
.BR strtoq ()
T}	Thread safety	MT-Safe locale
.TE
.SH CONFORMING TO
.BR strtol ()
conforms to SVr4, 4.3BSD, C89, C99, and POSIX.1-2001, and
.BR strtoll ()
to C99 and POSIX.1-2001.
.SH NOTES
Since
.BR strtol ()
can legitimately return 0,
.BR LONG_MAX ,
or
.B LONG_MIN
.RB ( LLONG_MAX
or
.B LLONG_MIN
for
.BR strtoll ())
on both success and failure, the calling program should set
.I errno
to 0 before the call,
and then determine if an error occurred by checking whether
.I errno
has a nonzero value after the call.

According to POSIX.1-2001,
in locales other than the "C" and "POSIX",
these functions may accept other,
implementation-defined numeric strings.
.LP
BSD also has
.sp
.in +4n
.nf
.BI "quad_t strtoq(const char *" nptr ", char **" endptr ", int " base );
.sp
.in
.fi
with completely analogous definition.
Depending on the wordsize of the current architecture, this
may be equivalent to
.BR strtoll ()
or to
.BR strtol ().
.SH EXAMPLE
The program shown below demonstrates the use of
.BR strtol ().
The first command-line argument specifies a string from which
.BR strtol ()
should parse a number.
The second (optional) argument specifies the base to be used for
the conversion.
(This argument is converted to numeric form using
.BR atoi (3),
a function that performs no error checking and
has a simpler interface than
.BR strtol ().)
Some examples of the results produced by this program are the following:
.in +4n
.nf

.RB "$" " ./a.out 123"
strtol() returned 123
.RB "$" " ./a.out \(aq    123\(aq"
strtol() returned 123
.RB "$" " ./a.out 123abc"
strtol() returned 123
Further characters after number: abc
.RB "$" " ./a.out 123abc 55"
strtol: Invalid argument
.RB "$" " ./a.out \(aq\(aq"
No digits were found
.RB "$" " ./a.out 4000000000"
strtol: Numerical result out of range
.fi
.in
.SS Program source
\&
.nf
#include <stdlib.h>
#include <limits.h>
#include <stdio.h>
#include <errno.h>

int
main(int argc, char *argv[])
{
    int base;
    char *endptr, *str;
    long val;

    if (argc < 2) {
        fprintf(stderr, "Usage: %s str [base]\\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    str = argv[1];
    base = (argc > 2) ? atoi(argv[2]) : 10;

    errno = 0;    /* To distinguish success/failure after call */
    val = strtol(str, &endptr, base);

    /* Check for various possible errors */

    if ((errno == ERANGE && (val == LONG_MAX || val == LONG_MIN))
            || (errno != 0 && val == 0)) {
        perror("strtol");
        exit(EXIT_FAILURE);
    }

    if (endptr == str) {
        fprintf(stderr, "No digits were found\\n");
        exit(EXIT_FAILURE);
    }

    /* If we got here, strtol() successfully parsed a number */

    printf("strtol() returned %ld\\n", val);

    if (*endptr != \(aq\\0\(aq)        /* Not necessarily an error... */
        printf("Further characters after number: %s\\n", endptr);

    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR atof (3),
.BR atoi (3),
.BR atol (3),
.BR strtod (3),
.BR strtoul (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified Sun Jul 25 10:54:03 1993 by Rik Faith (faith@cs.unc.edu)
.\" Fixed typo, aeb, 950823
.\" 2002-02-22, joey, mihtjel: Added strtoull()
.\"
.TH STRTOUL 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
strtoul, strtoull, strtouq \- convert a string to an unsigned long integer
.SH SYNOPSIS
.nf
.B #include <stdlib.h>
.sp
.BI "unsigned long int strtoul(const char *" nptr ", char **" endptr \
", int " base );
.sp
.BI "unsigned long long int strtoull(const char *" nptr ", char **" endptr ,
.BI "                                int " base );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR strtoull ():
.RS 4
_XOPEN_SOURCE\ >=\ 600 || _BSD_SOURCE || _SVID_SOURCE || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.ad
.SH DESCRIPTION
The
.BR strtoul ()
function converts the initial part of the string
in
.I nptr
to an
.I "unsigned long int"
value according to the
given
.IR base ,
which must be between 2 and 36 inclusive, or be
the special value 0.
.PP
The string may begin with an arbitrary amount of white space (as
determined by
.BR isspace (3))
followed by a single optional \(aq+\(aq or \(aq\-\(aq
sign.
If
.I base
is zero or 16, the string may then include a
"0x" prefix, and the number will be read in base 16; otherwise, a
zero
.I base
is taken as 10 (decimal) unless the next character
is \(aq0\(aq, in which case it is taken as 8 (octal).
.PP
The remainder of the string is converted to an
.I "unsigned long int"
value in the obvious manner,
stopping at the first character which is not a
valid digit in the given base.
(In bases above 10, the letter \(aqA\(aq in
either uppercase or lowercase represents 10, \(aqB\(aq represents 11, and so
forth, with \(aqZ\(aq representing 35.)
.PP
If
.I endptr
is not NULL,
.BR strtoul ()
stores the address of the
first invalid character in
.IR *endptr .
If there were no digits at
all,
.BR strtoul ()
stores the original value of
.I nptr
in
.I *endptr
(and returns 0).
In particular, if
.I *nptr
is not \(aq\\0\(aq but
.I **endptr
is \(aq\\0\(aq on return, the entire string is valid.
.PP
The
.BR strtoull ()
function works just like the
.BR strtoul ()
function but returns an
.I "unsigned long long int"
value.
.SH RETURN VALUE
The
.BR strtoul ()
function returns either the result of the conversion
or, if there was a leading minus sign, the negation of the result of the
conversion represented as an unsigned value,
unless the original (nonnegated) value would overflow; in
the latter case,
.BR strtoul ()
returns
.B ULONG_MAX
and sets
.I errno
to
.BR ERANGE .
Precisely the same holds for
.BR strtoull ()
(with
.B ULLONG_MAX
instead of
.BR ULONG_MAX ).
.SH ERRORS
.TP
.B EINVAL
(not in C99)
The given
.I base
contains an unsupported value.
.TP
.B ERANGE
The resulting value was out of range.
.LP
The implementation may also set
.IR errno
to
.B EINVAL
in case
no conversion was performed (no digits seen, and 0 returned).
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw32 lb lb
l l l.
Interface	Attribute	Value
T{
.BR strtoul (),
.BR strtoull (),
.BR strtouq ()
T}	Thread safety	MT-Safe locale
.TE
.SH CONFORMING TO
.BR strtoul ()
conforms to SVr4, C89, C99, and POSIX-2001, and
.BR strtoull ()
to C99 and POSIX.1-2001.
.SH NOTES
Since
.BR strtoul ()
can legitimately return 0 or
.B ULONG_MAX
.RB ( ULLONG_MAX
for
.BR strtoull ())
on both success and failure, the calling program should set
.I errno
to 0 before the call,
and then determine if an error occurred by checking whether
.I errno
has a nonzero value after the call.

In locales other than the "C" locale, other strings may be accepted.
(For example, the thousands separator of the current locale may be
supported.)
.LP
BSD also has
.sp
.in +4n
.nf
.BI "u_quad_t strtouq(const char *" nptr ", char **" endptr ", int " base );
.sp
.in -4n
.fi
with completely analogous definition.
Depending on the wordsize of the current architecture, this
may be equivalent to
.BR strtoull ()
or to
.BR strtoul ().

Negative values are considered valid input and are
silently converted to the equivalent
.I "unsigned long int"
value.
.SH EXAMPLE
See the example on the
.BR strtol (3)
manual page;
the use of the functions described in this manual page is similar.
.SH SEE ALSO
.BR atof (3),
.BR atoi (3),
.BR atol (3),
.BR strtod (3),
.BR strtol (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2001 Andries Brouwer <aeb@cwi.nl>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH STRVERSCMP 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
strverscmp \- compare two version strings
.SH SYNOPSIS
.nf
.BR "#define _GNU_SOURCE" "         /* See feature_test_macros(7) */"
.br
.B #include <string.h>
.sp
.BI "int strverscmp(const char *" s1 ", const char *" s2 );
.fi
.SH DESCRIPTION
Often one has files
.IR jan1 ", " jan2 ", ..., " jan9 ", " jan10 ", ..."
and it feels wrong when
.BR ls (1)
orders them
.IR jan1 ", " jan10 ", ..., " jan2 ", ..., " jan9 .
.\" classical solution: "rename jan jan0 jan?"
In order to rectify this, GNU introduced the
.I \-v
option to
.BR ls (1),
which is implemented using
.BR versionsort (3),
which again uses
.BR strverscmp ().

Thus, the task of
.BR strverscmp ()
is to compare two strings and find the "right" order, while
.BR strcmp (3)
finds only the lexicographic order.
This function does not use
the locale category
.BR LC_COLLATE ,
so is meant mostly for situations
where the strings are expected to be in ASCII.

What this function does is the following.
If both strings are equal, return 0.
Otherwise, find the position
between two bytes with the property that before it both strings are equal,
while directly after it there is a difference.
Find the largest consecutive digit strings containing (or starting at,
or ending at) this position.
If one or both of these is empty,
then return what
.BR strcmp (3)
would have returned (numerical ordering of byte values).
Otherwise, compare both digit strings numerically, where digit strings with
one or more leading zeros are interpreted as if they have a decimal point
in front (so that in particular digit strings with more leading zeros
come before digit strings with fewer leading zeros).
Thus, the ordering is
.IR 000 ", " 00 ", " 01 ", " 010 ", " 09 ", " 0 ", " 1 ", " 9 ", " 10 .
.SH RETURN VALUE
The
.BR strverscmp ()
function returns an integer
less than, equal to, or greater than zero if
.I s1
is found, respectively, to be earlier than, equal to,
or later than
.IR s2 .
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR strverscmp ()
.\" FIXME: the following marking is different from which in glibc manual.
.\" strverscmp: MT-Safe locale
.\" glibc manual says strverscmp should have marking locale because it calls
.\" isdigit() multiple times and isdigit() uses locale variable.
.\" But isdigit() has two implementations. With different compiling conditions,
.\" we may call isdigit() in macro, then strverscmp() should not have locale
.\" problem.
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
This function is a GNU extension.
.SH SEE ALSO
.BR rename (1),
.BR strcasecmp (3),
.BR strcmp (3),
.BR strcoll (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified Sun Jul 25 10:41:28 1993 by Rik Faith (faith@cs.unc.edu)
.TH STRXFRM 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
strxfrm \- string transformation
.SH SYNOPSIS
.nf
.B #include <string.h>
.sp
.BI "size_t strxfrm(char *" dest ", const char *" src ", size_t " n );
.fi
.SH DESCRIPTION
The
.BR strxfrm ()
function transforms the
.I src
string into a
form such that the result of
.BR strcmp (3)
on two strings that have
been transformed with
.BR strxfrm ()
is the same as the result of
.BR strcoll (3)
on the two strings before their transformation.
The first
.I n
bytes of the transformed string are placed in
.IR dest .
The transformation is based on the program's current
locale for category
.BR LC_COLLATE .
(See
.BR setlocale (3)).
.SH RETURN VALUE
The
.BR strxfrm ()
function returns the number of bytes required to
store the transformed string in
.I dest
excluding the
terminating null byte (\(aq\\0\(aq).
If the value returned is
.I n
or more, the
contents of
.I dest
are indeterminate.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR strxfrm ()
T}	Thread safety	MT-Safe locale
.TE
.SH CONFORMING TO
SVr4, 4.3BSD, C89, C99.
.SH NOTES
In the
.IR POSIX
or
.IR C
locales
.BR strxfrm ()
is equivalent to
copying the string with
.BR strncpy (3).
.SH SEE ALSO
.BR bcmp (3),
.BR memcmp (3),
.BR setlocale (3),
.BR strcasecmp (3),
.BR strcmp (3),
.BR strcoll (3),
.BR string (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified Sat Jul 24 17:52:15 1993 by Rik Faith (faith@cs.unc.edu)
.\" Modified 2001-12-15, aeb
.TH SWAB 3  2015-03-02 "" "Linux Programmer's Manual"
.SH NAME
swab \- swap adjacent bytes
.SH SYNOPSIS
.nf
.BR "#define _XOPEN_SOURCE" "       /* See feature_test_macros(7) */"
.B #include <unistd.h>
.sp
.BI "void swab(const void *" from ", void *" to ", ssize_t " n );
.fi
.SH DESCRIPTION
The
.BR swab ()
function copies
.I n
bytes from the array pointed
to by
.I from
to the array pointed to by
.IR to ,
exchanging
adjacent even and odd bytes.
This function is used to exchange data
between machines that have different low/high byte ordering.
.LP
This function does nothing when
.I n
is negative.
When
.I n
is positive and odd, it handles
.I n\-1
bytes
as above, and does something unspecified with the last byte.
(In other words,
.I n
should be even.)
.SH RETURN VALUE
The
.BR swab ()
function returns no value.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR swab ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
SVr4, 4.3BSD, POSIX.1-2001.
.SH SEE ALSO
.BR bstring (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1993 by Thomas Koenig (ig25@rz.uni-karlsruhe.de)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified Sat Jul 24 17:51:42 1993 by Rik Faith (faith@cs.unc.edu)
.\" Modified Tue Aug 17 11:42:20 1999 by Ariel Scolnicov (ariels@compugen.co.il)
.TH SYSCONF 3  2015-05-07 "GNU" "Linux Programmer's Manual"
.SH NAME
sysconf \- get configuration information at run time
.SH SYNOPSIS
.nf
.B #include <unistd.h>
.sp
.BI "long sysconf(int " "name" );
.fi
.SH DESCRIPTION
POSIX allows an application to test at compile or run time
whether certain options are supported, or what the value is
of certain configurable constants or limits.
.LP
At compile time this is done by including
.I <unistd.h>
and/or
.I <limits.h>
and testing the value of certain macros.
.LP
At run time, one can ask for numerical values using the present function
.BR sysconf ().
One can ask for numerical values that may depend
on the filesystem a file is in using the calls
.BR fpathconf (3)
and
.BR pathconf (3).
One can ask for string values using
.BR confstr (3).
.LP
The values obtained from these functions are system configuration constants.
They do not change during the lifetime of a process.
.\" except that sysconf(_SC_OPEN_MAX) may change answer after a call
.\" to setrlimit( ) which changes the RLIMIT_NOFILE soft limit
.LP
For options, typically, there is a constant
.B _POSIX_FOO
that may be defined in
.IR <unistd.h> .
If it is undefined, one should ask at run time.
If it is defined to \-1, then the option is not supported.
If it is defined to 0, then relevant functions and headers exist,
but one has to ask at run time what degree of support is available.
If it is defined to a value other than \-1 or 0, then the option is
supported.
Usually the value (such as 200112L) indicates the year and month
of the POSIX revision describing the option.
Glibc uses the value 1
to indicate support as long as the POSIX revision has not been published yet.
.\" and 999 to indicate support for options no longer present in the latest
.\" standard. (?)
The
.BR sysconf ()
argument will be
.BR _SC_FOO .
For a list of options, see
.BR posixoptions (7).
.LP
For variables or limits, typically, there is a constant
.BR _FOO ,
maybe defined in
.IR <limits.h> ,
or
.BR _POSIX_FOO ,
maybe defined in
.IR <unistd.h> .
The constant will not be defined if the limit is unspecified.
If the constant is defined, it gives a guaranteed value, and
a greater value might actually be supported.
If an application wants to take advantage of values which may change
between systems, a call to
.BR sysconf ()
can be made.
The
.BR sysconf ()
argument will be
.BR _SC_FOO .
.SS POSIX.1 variables
We give the name of the variable, the name of the
.BR sysconf ()
argument used to inquire about its value,
and a short description.
.LP
First, the POSIX.1 compatible values.
.\" [for the moment: only the things that are unconditionally present]
.\" .TP
.\" .BR AIO_LISTIO_MAX " - " _SC_AIO_LISTIO_MAX
.\" (if _POSIX_ASYNCHRONOUS_IO)
.\" Maximum number of I/O operations in a single list I/O call.
.\" Must not be less than _POSIX_AIO_LISTIO_MAX.
.\" .TP
.\" .BR AIO_MAX " - " _SC_AIO_MAX
.\" (if _POSIX_ASYNCHRONOUS_IO)
.\" Maximum number of outstanding asynchronous I/O operations.
.\" Must not be less than _POSIX_AIO_MAX.
.\" .TP
.\" .BR AIO_PRIO_DELTA_MAX " - " _SC_AIO_PRIO_DELTA_MAX
.\" (if _POSIX_ASYNCHRONOUS_IO)
.\" The maximum amount by which a process can decrease its
.\" asynchronous I/O priority level from its own scheduling priority.
.\" Must be nonnegative.
.TP
.BR ARG_MAX " - " _SC_ARG_MAX
The maximum length of the arguments to the
.BR exec (3)
family of functions.
Must not be less than
.B _POSIX_ARG_MAX
(4096).
.TP
.BR CHILD_MAX " - " _SC_CHILD_MAX
The maximum number of simultaneous processes per user ID.
Must not be less than
.B _POSIX_CHILD_MAX
(25).
.TP
.BR HOST_NAME_MAX " - " _SC_HOST_NAME_MAX
Maximum length of a hostname, not including the terminating null byte,
as returned by
.BR gethostname (2).
Must not be less than
.B _POSIX_HOST_NAME_MAX
(255).
.TP
.BR LOGIN_NAME_MAX " - " _SC_LOGIN_NAME_MAX
Maximum length of a login name, including the terminating null byte.
Must not be less than
.B _POSIX_LOGIN_NAME_MAX
(9).
.TP
.BR NGROUPS_MAX " - " _SC_NGROUPS_MAX
Maximum number of supplementary group IDs.
.TP
.BR "" "clock ticks - " _SC_CLK_TCK
The number of clock ticks per second.
The corresponding variable is obsolete.
It was of course called
.BR CLK_TCK .
(Note: the macro
.B CLOCKS_PER_SEC
does not give information: it must equal 1000000.)
.TP
.BR OPEN_MAX " - " _SC_OPEN_MAX
The maximum number of files that a process can have open at any time.
Must not be less than
.B _POSIX_OPEN_MAX
(20).
.TP
.BR PAGESIZE " - " _SC_PAGESIZE
Size of a page in bytes.
Must not be less than 1.
(Some systems use PAGE_SIZE instead.)
.TP
.BR RE_DUP_MAX " - " _SC_RE_DUP_MAX
The number of repeated occurrences of a BRE permitted by
.BR regexec (3)
and
.BR regcomp (3).
Must not be less than
.B _POSIX2_RE_DUP_MAX
(255).
.TP
.BR STREAM_MAX " - " _SC_STREAM_MAX
The maximum number of streams that a process can have open at any
time.
If defined, it has the same value as the standard C macro
.BR FOPEN_MAX .
Must not be less than
.B _POSIX_STREAM_MAX
(8).
.TP
.BR SYMLOOP_MAX " - " _SC_SYMLOOP_MAX
The maximum number of symbolic links seen in a pathname before resolution
returns
.BR ELOOP .
Must not be less than
.B _POSIX_SYMLOOP_MAX
(8).
.TP
.BR TTY_NAME_MAX " - " _SC_TTY_NAME_MAX
The maximum length of terminal device name,
including the terminating null byte.
Must not be less than
.B _POSIX_TTY_NAME_MAX
(9).
.TP
.BR TZNAME_MAX " - " _SC_TZNAME_MAX
The maximum number of bytes in a timezone name.
Must not be less than
.B _POSIX_TZNAME_MAX
(6).
.TP
.BR _POSIX_VERSION " - " _SC_VERSION
indicates the year and month the POSIX.1 standard was approved in the
format
.BR YYYYMML ;
the value
.B 199009L
indicates the Sept. 1990 revision.
.SS POSIX.2 variables
Next, the POSIX.2 values, giving limits for utilities.
.TP
.BR BC_BASE_MAX " - " _SC_BC_BASE_MAX
indicates the maximum
.I obase
value accepted by the
.BR bc (1)
utility.
.TP
.BR BC_DIM_MAX " - " _SC_BC_DIM_MAX
indicates the maximum value of elements permitted in an array by
.BR bc (1).
.TP
.BR BC_SCALE_MAX " - " _SC_BC_SCALE_MAX
indicates the maximum
.I scale
value allowed by
.BR bc (1).
.TP
.BR BC_STRING_MAX " - " _SC_BC_STRING_MAX
indicates the maximum length of a string accepted by
.BR bc (1).
.TP
.BR COLL_WEIGHTS_MAX " - " _SC_COLL_WEIGHTS_MAX
indicates the maximum numbers of weights that can be assigned to an
entry of the
.B LC_COLLATE order
keyword in the locale definition file,
.TP
.BR EXPR_NEST_MAX " - " _SC_EXPR_NEST_MAX
is the maximum number of expressions which can be nested within
parentheses by
.BR expr (1).
.TP
.BR LINE_MAX " - " _SC_LINE_MAX
The maximum length of a utility's input line, either from
standard input or from a file.
This includes space for a trailing
newline.
.TP
.BR RE_DUP_MAX " - " _SC_RE_DUP_MAX
The maximum number of repeated occurrences of a regular expression when
the interval notation
.B \e{m,n\e}
is used.
.TP
.BR POSIX2_VERSION " - " _SC_2_VERSION
indicates the version of the POSIX.2 standard in the format of
YYYYMML.
.TP
.BR POSIX2_C_DEV " - " _SC_2_C_DEV
indicates whether the POSIX.2 C language development facilities are
supported.
.TP
.BR POSIX2_FORT_DEV " - " _SC_2_FORT_DEV
indicates whether the POSIX.2 FORTRAN development utilities are
supported.
.TP
.BR POSIX2_FORT_RUN " - " _SC_2_FORT_RUN
indicates whether the POSIX.2 FORTRAN run-time utilities are supported.
.TP
.BR _POSIX2_LOCALEDEF " - " _SC_2_LOCALEDEF
indicates whether the POSIX.2 creation of locates via
.BR localedef (1)
is supported.
.TP
.BR POSIX2_SW_DEV " - " _SC_2_SW_DEV
indicates whether the POSIX.2 software development utilities option is
supported.
.PP
These values also exist, but may not be standard.
.TP
.BR "" " - " _SC_PHYS_PAGES
The number of pages of physical memory.
Note that it is possible
for the product of this value and the value of
.B _SC_PAGESIZE
to overflow.
.TP
.BR "" " - " _SC_AVPHYS_PAGES
The number of currently available pages of physical memory.
.TP
.BR "" " - " _SC_NPROCESSORS_CONF
The number of processors configured.
.TP
.BR "" " - " _SC_NPROCESSORS_ONLN
The number of processors currently online (available).
.SH RETURN VALUE
If
.I name
is invalid, \-1 is returned, and
.I errno
is set to
.BR EINVAL .
Otherwise, the value returned is the value of the system resource and
.I errno
is not changed.
In the case of options, a positive value is returned if a queried option
is available, and \-1 if it is not.
In the case of limits, \-1 means that there is no definite limit.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR sysconf ()
T}	Thread safety	MT-Safe env
.TE

.SH CONFORMING TO
POSIX.1-2001.
.SH BUGS
It is difficult to use
.B ARG_MAX
because it is not specified how much of the argument space for
.BR exec (3)
is consumed by the user's environment variables.
.PP
Some returned values may be huge; they are not suitable for allocating
memory.
.SH SEE ALSO
.BR bc (1),
.BR expr (1),
.BR getconf (1),
.BR locale (1),
.BR confstr (3),
.BR fpathconf (3),
.BR pathconf (3),
.BR posixoptions (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Written  Feb 1994 by Steve Greenland (stevegr@neosoft.com)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Updated 1999.12.19 by Karl M. Hegbloom <karlheg@debian.org>
.\"
.\" Updated 13 Oct 2001, Michael Kerrisk <mtk.manpages@gmail.com>
.\"	Added description of vsyslog
.\"	Added descriptions of LOG_ODELAY and LOG_NOWAIT
.\"	Added brief description of facility and option arguments
.\"	Added CONFORMING TO section
.\" 2001-10-13, aeb, minor changes
.\" Modified 13 Dec 2001, Martin Schulze <joey@infodrom.org>
.\" Modified 3 Jan 2002, Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.TH SYSLOG 3 2015-02-21 "Linux" "Linux Programmer's Manual"
.SH NAME
closelog, openlog, syslog, vsyslog \- send messages to the system logger
.SH SYNOPSIS
.B #include <syslog.h>
.sp
.BI "void openlog(const char *" ident ", int " option ", int " facility );
.br
.BI "void syslog(int " priority ", const char *" format ", ...);"
.br
.B "void closelog(void);"
.sp
.BI "void vsyslog(int " priority ", const char *" format ", va_list " ap );
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR vsyslog ():
_BSD_SOURCE
.SH DESCRIPTION
.BR closelog ()
closes the descriptor being used to write to the system logger.
The use of
.BR closelog ()
is optional.
.sp
.BR openlog ()
opens a connection to the system logger for a program.
The string pointed to by
.I ident
is prepended to every message, and is typically set to the program name.
If
.I ident
is NULL, the program name is used.
(POSIX.1-2008 does not specify the behavior when
.I ident
is NULL.)

The
.I option
argument specifies flags which control the operation of
.BR openlog ()
and subsequent calls to
.BR syslog ().
The
.I facility
argument establishes a default to be used if
none is specified in subsequent calls to
.BR syslog ().
Values for
.I option
and
.I facility
are given below.
The use of
.BR openlog ()
is optional; it will automatically be called by
.BR syslog ()
if necessary, in which case
.I ident
will default to NULL.
.sp
.BR syslog ()
generates a log message, which will be distributed by
.BR syslogd (8).
The
.I priority
argument is formed by ORing the
.I facility
and the
.I level
values (explained below).
The remaining arguments
are a
.IR format ,
as in
.BR printf (3)
and any arguments required by the
.IR format ,
except that the two character sequence
.B %m
will be replaced by
the error message string
.IR strerror ( errno ).
A trailing newline may be added if needed.

The function
.BR vsyslog ()
performs the same task as
.BR syslog ()
with the difference that it takes a set of arguments which have
been obtained using the
.BR stdarg (3)
variable argument list macros.

The subsections below list the parameters used to set the values of
.IR option , " facility" ", and " priority .
.SS option
The
.I option
argument to
.BR openlog ()
is an OR of any of these:
.TP 15
.B LOG_CONS
Write directly to system console if there is an error while sending to
system logger.
.TP
.B LOG_NDELAY
Open the connection immediately (normally, the connection is opened when
the first message is logged).
.TP
.B LOG_NOWAIT
Don't wait for child processes that may have been created while logging
the message.
(The GNU C library does not create a child process, so this
option has no effect on Linux.)
.TP
.B LOG_ODELAY
The converse of
.BR LOG_NDELAY ;
opening of the connection is delayed until
.BR syslog ()
is called.
(This is the default, and need not be specified.)
.TP
.B LOG_PERROR
(Not in POSIX.1-2001 or POSIX.1-2008.)
Print to \fIstderr\fP as well.
.TP
.B LOG_PID
Include PID with each message.
.SS facility
The
.I facility
argument is used to specify what type of program is logging the message.
This lets the configuration file specify that messages from different
facilities will be handled differently.
.TP 15
.B LOG_AUTH
security/authorization messages
.TP
.B LOG_AUTHPRIV
security/authorization messages (private)
.TP
.B LOG_CRON
clock daemon
.RB ( cron " and " at )
.TP
.B LOG_DAEMON
system daemons without separate facility value
.TP
.B LOG_FTP
ftp daemon
.TP
.B LOG_KERN
kernel messages (these can't be generated from user processes)
.\" LOG_KERN has the value 0; if used as a facility, zero translates to:
.\" "use the default facility".
.TP
.BR LOG_LOCAL0 " through " LOG_LOCAL7
reserved for local use
.TP
.B LOG_LPR
line printer subsystem
.TP
.B LOG_MAIL
mail subsystem
.TP
.B LOG_NEWS
USENET news subsystem
.TP
.B LOG_SYSLOG
messages generated internally by
.BR syslogd (8)
.TP
.BR LOG_USER " (default)"
generic user-level messages
.TP
.B LOG_UUCP
UUCP subsystem
.SS level
This determines the importance of the message.
The levels are, in order of decreasing importance:
.TP 15
.B LOG_EMERG
system is unusable
.TP
.B LOG_ALERT
action must be taken immediately
.TP
.B LOG_CRIT
critical conditions
.TP
.B LOG_ERR
error conditions
.TP
.B LOG_WARNING
warning conditions
.TP
.B LOG_NOTICE
normal, but significant, condition
.TP
.B LOG_INFO
informational message
.TP
.B LOG_DEBUG
debug-level message
.LP
The function
.BR setlogmask (3)
can be used to restrict logging to specified levels only.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw21 lb lb
l l l.
Interface	Attribute	Value
T{
.BR openlog (),
.BR closelog ()
T}	Thread safety	MT-Safe
T{
.BR syslog (),
.BR vsyslog ()
T}	Thread safety	MT-Safe env locale
.TE
.SH CONFORMING TO
The functions
.BR openlog (),
.BR closelog (),
and
.BR syslog ()
(but not
.BR vsyslog ())
are specified in SUSv2, POSIX.1-2001, and POSIX.1-2008.
POSIX.1-2001 specifies only the
.B LOG_USER
and
.B LOG_LOCAL*
values for
.IR facility .
However, with the exception of
.B LOG_AUTHPRIV
and
.BR LOG_FTP ,
the other
.I facility
values appear on most UNIX systems.
The
.B LOG_PERROR
value for
.I option
is not specified by POSIX.1-2001 or POSIX.1-2008, but is available
in most versions of UNIX.
.\" .SH HISTORY
.\" A
.\" .BR syslog ()
.\" function call appeared in 4.2BSD.
.\" 4.3BSD documents
.\" .BR openlog (),
.\" .BR syslog (),
.\" .BR closelog (),
.\" and
.\" .BR setlogmask ().
.\" 4.3BSD-Reno also documents
.\" .BR vsyslog ().
.\" Of course early v* functions used the
.\" .I <varargs.h>
.\" mechanism, which is not compatible with
.\" .IR <stdarg.h> .
.SH NOTES
The argument
.I ident
in the call of
.BR openlog ()
is probably stored as-is.
Thus, if the string it points to
is changed,
.BR syslog ()
may start prepending the changed string, and if the string
it points to ceases to exist, the results are undefined.
Most portable is to use a string constant.
.LP
Never pass a string with user-supplied data as a format,
use the following instead:
.nf

    syslog(priority, "%s", string);
.fi
.SH SEE ALSO
.BR logger (1),
.BR setlogmask (3),
.BR syslog.conf (5),
.BR syslogd (8)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1993 by Thomas Koenig (ig25@rz.uni-karlsruhe.de)
.\" and Copyright (c) 2014 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified Sat Jul 24 17:51:15 1993 by Rik Faith (faith@cs.unc.edu)
.\" Modified 11 May 1998 by Joseph S. Myers (jsm28@cam.ac.uk)
.\" Modified 14 May 2001, 23 Sep 2001 by aeb
.\" 2004-12-20, mtk
.\"
.TH SYSTEM 3  2015-03-02 "" "Linux Programmer's Manual"
.SH NAME
system \- execute a shell command
.SH SYNOPSIS
.nf
.B #include <stdlib.h>
.sp
.BI "int system(const char *" "command" );
.fi
.SH DESCRIPTION
The
.BR system ()
library function uses
.BR fork (2)
to create a child process that executes the shell command specified in
.I command
using
.BR execl (3)
as follows:

    execl("/bin/sh", "sh", "-c", command, (char *) 0);

.BR system ()
returns after the command has been completed.

During execution of the command,
.B SIGCHLD
will be blocked, and
.B SIGINT
and
.B SIGQUIT
will be ignored, in the process that calls
.BR system ()
(these signals will be handled according to their defaults inside
the child process that executes
.IR command ).

If
.I command
is NULL, then
.BR system ()
returns a status indicating whether a shell is available on the system
.SH RETURN VALUE
The return value of
.BR system ()
is one of the following:
.IP * 3
If
.I command
is NULL, then a nonzero value if a shell is available,
or 0 if no shell is available.
.IP *
If a child process could not be created,
or its status could not be retrieved,
the return value is \-1.
.IP *
If a shell could not be executed in the child process,
then the return value is as though the child shell terminated by calling
.BR _exit (2)
with the status 127.
.IP *
If all system calls succeed,
then the return value is the termination status of the child shell
used to execute
.IR command .
(The termination status of a shell is the termination status of
the last command it executes.)
.PP
In the last two cases,
the return value is a "wait status" that can be examined using
the macros described in
.BR waitpid (2).
(i.e.,
.BR WIFEXITED ()
.BR WEXITSTATUS ()
and so on).
.PP
.BR system ()
does not affect the wait status of any other children.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR system ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C89, C99, POSIX.1-2001.
.SH NOTES
.BR system ()
provides simplicity and convenience:
it handles all of the details of calling
.BR fork (2),
.BR execl (3),
and
.BR waitpid (2),
as well as the necessary manipulations of signals;
in addition,
the shell performs the usual substitutions and I/O redirections for
.IR command .
The main cost of
.BR system ()
is inefficiency:
additional system calls are required to create the process that
runs the shell and to execute the shell.

If the
.B _XOPEN_SOURCE
feature test macro is defined
(before including
.I any
header files),
then the macros described in
.BR waitpid (2)
.RB ( WEXITSTATUS (),
etc.) are made available when including
.IR <stdlib.h> .
.PP
As mentioned,
.BR system ()
ignores
.B SIGINT
and
.BR SIGQUIT .
This may make programs that call it
from a loop uninterruptible, unless they take care themselves
to check the exit status of the child.
For example:
.br
.nf

    while (something) {
        int ret = system("foo");

        if (WIFSIGNALED(ret) &&
            (WTERMSIG(ret) == SIGINT || WTERMSIG(ret) == SIGQUIT))
                break;
    }
.fi
.PP
Do not use
.BR system ()
from a program with set-user-ID or set-group-ID privileges,
because strange values for some environment variables
might be used to subvert system integrity.
Use the
.BR exec (3)
family of functions instead, but not
.BR execlp (3)
or
.BR execvp (3).
.BR system ()
will not, in fact, work properly from programs with set-user-ID or
set-group-ID privileges on systems on which
.I /bin/sh
is bash version 2, since bash 2 drops privileges on startup.
(Debian uses a modified bash which does not do this when invoked as
.BR sh .)
.PP
In versions of glibc before 2.1.3, the check for the availability of
.I /bin/sh
was not actually performed if
.I command
was NULL; instead it was always assumed to be available, and
.BR system ()
always returned 1 in this case.
Since glibc 2.1.3, this check is performed because, even though
POSIX.1-2001 requires a conforming implementation to provide
a shell, that shell may not be available or executable if
the calling program has previously called
.BR chroot (2)
(which is not specified by POSIX.1-2001).
.PP
It is possible for the shell command to terminate with a status of 127,
which yields a
.BR system ()
return value that is indistinguishable from the case
where a shell could not be executed in the child process.
.SH SEE ALSO
.BR sh (1),
.BR sigaction (2),
.BR sigprocmask (2),
.BR fork (2),
.BR wait (2),
.BR exec (3),
.BR signal (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2007 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH SYSV_SIGNAL 3 2015-03-02 "" "Linux Programmer's Manual"
.SH NAME
sysv_signal \- signal handling with System V semantics
.SH SYNOPSIS
.BR "#define _GNU_SOURCE" "         /* See feature_test_macros(7) */"
.br
.B #include <signal.h>
.sp
.B typedef void (*sighandler_t)(int);
.sp
.BI "sighandler_t sysv_signal(int " signum ", sighandler_t " handler );
.SH DESCRIPTION
The
.BR sysv_signal ()
function takes the same arguments, and performs the same task, as
.BR signal (2).

However
.BR sysv_signal ()
provides the System V unreliable signal semantics, that is:
a) the disposition of the signal is reset to the default
when the handler is invoked;
b) delivery of further instances of the signal is not blocked while
the signal handler is executing; and
c) if the handler interrupts (certain) blocking system calls,
then the system call is not automatically restarted.
.SH RETURN VALUE
The
.BR sysv_signal ()
function returns the previous value of the signal handler, or
.B SIG_ERR
on error.
.SH ERRORS
As for
.BR signal (2).
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR sysv_signal ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
This function is nonstandard.
.SH NOTES
Use of
.BR sysv_signal ()
should be avoided; use
.BR sigaction (2)
instead.

On older Linux systems,
.BR sysv_signal ()
and
.BR signal (2)
were equivalent.
But on newer systems,
.BR signal (2)
provides reliable signal semantics; see
.BR signal (2)
for details.

The use of
.I sighandler_t
is a GNU extension;
this type is defined only if
the
.B _GNU_SOURCE
feature test macro is defined.
.SH SEE ALSO
.BR sigaction (2),
.BR signal (2),
.BR bsd_signal (3),
.BR signal (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\" and Copyright 2008, Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified 1993-07-24 by Rik Faith (faith@cs.unc.edu)
.\" Modified 2002-07-27 by Walter Harms
.\" 	(walter.harms@informatik.uni-oldenburg.de)
.\"
.TH TAN 3 2015-04-19 ""  "Linux Programmer's Manual"
.SH NAME
tan, tanf, tanl \- tangent function
.SH SYNOPSIS
.nf
.B #include <math.h>
.sp
.BI "double tan(double " x );
.br
.BI "float tanf(float " x );
.br
.BI "long double tanl(long double " x );
.fi
.sp
Link with \fI\-lm\fP.
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR tanf (),
.BR tanl ():
.RS 4
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE\ >=\ 600 || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.ad
.SH DESCRIPTION
These functions return the tangent of
.IR x ,
where
.I x
is
given in radians.
.SH RETURN VALUE
On success, these functions return the tangent of
.IR x .

If
.I x
is a NaN, a NaN is returned.

If
.I x
is positive infinity or negative infinity,
a domain error occurs,
and a NaN is returned.

If the correct result would overflow,
a range error occurs,
and the functions return
.BR HUGE_VAL ,
.BR HUGE_VALF ,
or
.BR HUGE_VALL ,
respectively, with the mathematically correct sign.
.\" I think overflow can't occur, because the closest floating-point
.\" representation of pi/2 is still not close enough to pi/2 to
.\" produce a large enough value to overflow.
.\" Testing certainly seems to bear this out.  -- mtk, Jul 08
.\"
.\" POSIX.1 allows an optional underflow error;
.\" glibc 2.8 doesn't do this
.\" POSIX.1 an optional range error for subnormal x;
.\" glibc 2.8 doesn't do this
.SH ERRORS
See
.BR math_error (7)
for information on how to determine whether an error has occurred
when calling these functions.
.PP
The following errors can occur:
.TP
Domain error: \fIx\fP is an infinity
.I errno
is set to
.BR EDOM
(but see BUGS).
An invalid floating-point exception
.RB ( FE_INVALID )
is raised.
.TP
Range error: result overflow
.\" Unable to test this case, since the best approximation of
.\" pi/2 in double precision only yields a tan() value of 1.633e16.
.\" .I errno
.\" is set to
.\" .BR ERANGE .
An overflow floating-point exception
.RB ( FE_OVERFLOW )
is raised.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw21 lb lb
l l l.
Interface	Attribute	Value
T{
.BR tan (),
.BR tanf (),
.BR tanl ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C99, POSIX.1-2001, POSIX.1-2008.

The variant returning
.I double
also conforms to
SVr4, 4.3BSD, C89.
.SH BUGS
Before version 2.10, the glibc implementation did not set
.\" http://sourceware.org/bugzilla/show_bug.cgi?id=6782
.I errno
to
.B EDOM
when a domain error occurred.
.SH SEE ALSO
.BR acos (3),
.BR asin (3),
.BR atan (3),
.BR atan2 (3),
.BR cos (3),
.BR ctan (3),
.BR sin (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\" and Copyright 2008, Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified 1993-07-24 by Rik Faith (faith@cs.unc.edu)
.\" Modified 2002-07-27 by Walter Harms
.\" 	(walter.harms@informatik.uni-oldenburg.de)
.\"
.TH TANH 3 2015-04-19 ""  "Linux Programmer's Manual"
.SH NAME
tanh, tanhf, tanhl \- hyperbolic tangent function
.SH SYNOPSIS
.nf
.B #include <math.h>
.sp
.BI "double tanh(double " x );
.br
.BI "float tanhf(float " x );
.br
.BI "long double tanhl(long double " x );
.fi
.sp
Link with \fI\-lm\fP.
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR tanhf (),
.BR tanhl ():
.RS 4
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE\ >=\ 600 || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.ad
.SH DESCRIPTION
These functions return the hyperbolic tangent of
.IR x ,
which
is defined mathematically as:
.nf

    tanh(x) = sinh(x) / cosh(x)
.fi
.SH RETURN VALUE
On success, these functions return the hyperbolic tangent of
.IR x .

If
.I x
is a NaN, a NaN is returned.

If
.I x
is +0 (\-0), +0 (\-0) is returned.

If
.I x
is positive infinity (negative infinity),
+1 (\-1) is returned.
.\"
.\" POSIX.1-2001 documents an optional range error (underflow)
.\" for subnormal x;
.\" glibc 2.8 does not do this.
.SH ERRORS
No errors occur.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw24 lb lb
l l l.
Interface	Attribute	Value
T{
.BR tanh (),
.BR tanhf (),
.BR tanhl ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C99, POSIX.1-2001, POSIX.1-2008.

The variant returning
.I double
also conforms to
SVr4, 4.3BSD, C89.
.SH SEE ALSO
.BR acosh (3),
.BR asinh (3),
.BR atanh (3),
.BR cosh (3),
.BR ctanh (3),
.BR sinh (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2002 Andries Brouwer <aeb@cwi.nl>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH TCGETPGRP 3 2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
tcgetpgrp, tcsetpgrp \- get and set terminal foreground process group
.SH SYNOPSIS
.B "#include <unistd.h>"
.sp
.BI "pid_t tcgetpgrp(int " fd );
.sp
.BI "int tcsetpgrp(int " fd ", pid_t " pgrp );
.SH DESCRIPTION
The function
.BR tcgetpgrp ()
returns the process group ID of the foreground process group on the
terminal associated to
.IR fd ,
which must be the controlling terminal of the calling process.
.\" The process itself may be a background process.
.LP
The function
.BR tcsetpgrp ()
makes the process group with process group ID
.I pgrp
the foreground process group on the terminal associated to
.IR fd ,
which must be the controlling terminal of the calling process,
and still be associated with its session.
Moreover,
.I pgrp
must be a (nonempty) process group belonging to
the same session as the calling process.
.LP
If
.BR tcsetpgrp ()
is called by a member of a background process group in its session,
and the calling process is not blocking or ignoring
.BR SIGTTOU ,
a
.B SIGTTOU
signal is sent to all members of this background process group.
.SH RETURN VALUE
When
.I fd
refers to the controlling terminal of the calling process,
the function
.BR tcgetpgrp ()
will return the foreground process group ID of that terminal
if there is one, and some value larger than 1 that is not
presently a process group ID otherwise.
When
.I fd
does not refer to the controlling terminal of the calling process,
\-1 is returned, and
.I errno
is set appropriately.
.LP
When successful,
.BR tcsetpgrp ()
returns 0.
Otherwise, it returns \-1, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EBADF
.I fd
is not a valid file descriptor.
.TP
.B EINVAL
.I pgrp
has an unsupported value.
.TP
.B ENOTTY
The calling process does not have a controlling terminal, or
it has one but it is not described by
.IR fd ,
or, for
.BR tcsetpgrp (),
this controlling terminal is no longer associated with the session
of the calling process.
.TP
.B EPERM
.I pgrp
has a supported value, but is not the process group ID of a
process in the same session as the calling process.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw24 lb lb
l l l.
Interface	Attribute	Value
T{
.BR tcgetpgrp (),
.BR tcsetpgrp ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
POSIX.1-2001.
.SH NOTES
These functions are implemented via the
.B TIOCGPGRP
and
.B TIOCSPGRP
ioctls.
.SS History
The ioctls appeared in 4.2BSD.
The functions are POSIX inventions.
.SH SEE ALSO
.BR setpgid (2),
.BR setsid (2),
.BR credentials (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2002 Andries Brouwer <aeb@cwi.nl>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH TCGETSID 3 2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
tcgetsid \- get session ID
.SH SYNOPSIS
.BR "#define _XOPEN_SOURCE 500" "        /* See feature_test_macros(7) */"
.br
.B "#include <termios.h>"
.sp
.BI "pid_t tcgetsid(int " fd );
.SH DESCRIPTION
The function
.BR tcgetsid ()
returns the session ID of the current session that has the
terminal associated to
.I fd
as controlling terminal.
This terminal must be the controlling terminal of the calling process.
.SH RETURN VALUE
When
.I fd
refers to the controlling terminal of our session,
the function
.BR tcgetsid ()
will return the session ID of this session.
Otherwise, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EBADF
.I fd
is not a valid file descriptor.
.TP
.B ENOTTY
The calling process does not have a controlling terminal, or
it has one but it is not described by
.IR fd .
.SH VERSIONS
.BR tcgetsid ()
is provided in glibc since version 2.1.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR tcgetsid ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
POSIX.1-2001.
.SH NOTES
This function is implemented via the
.B TIOCGSID
.BR ioctl (2),
present
since Linux 2.1.71.
.SH SEE ALSO
.BR getsid (2)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified Sat Jul 24 17:48:42 1993 by Rik Faith (faith@cs.unc.edu)
.TH TELLDIR 3  2015-03-02 "" "Linux Programmer's Manual"
.SH NAME
telldir \- return current location in directory stream
.SH SYNOPSIS
.nf
.B #include <dirent.h>
.sp
.BI "long telldir(DIR *" dirp );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR telldir ():
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE
.SH DESCRIPTION
The
.BR telldir ()
function returns the current location associated with
the directory stream \fIdirp\fP.
.SH RETURN VALUE
On success, the
.BR telldir ()
function returns the current location
in the directory stream.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EBADF
Invalid directory stream descriptor \fIdirp\fP.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR telldir ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
4.3BSD, POSIX.1-2001.
.SH NOTES
In glibc up to version 2.1.1, the return type of
.BR telldir ()
was
.IR off_t .
POSIX.1-2001 specifies
.IR long ,
and this is the type used since glibc 2.1.2.

In early filesystems, the value returned by
.BR telldir ()
was a simple file offset within a directory.
Modern filesystems use tree or hash structures, rather than flat tables,
to represent directories.
On such filesystems, the value returned by
.BR telldir ()
(and used internally by
.BR readdir (3))
is a "cookie" that is used by the implementation
to derive a position within a directory.
.\" https://lwn.net/Articles/544298/
Application programs should treat this strictly as an opaque value, making
.I no
assumptions about its contents.
.SH SEE ALSO
.BR closedir (3),
.BR opendir (3),
.BR readdir (3),
.BR rewinddir (3),
.BR scandir (3),
.BR seekdir (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1999 Andries Brouwer (aeb@cwi.nl)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH TEMPNAM 3  2015-03-02 "" "Linux Programmer's Manual"
.SH NAME
tempnam \- create a name for a temporary file
.SH SYNOPSIS
.nf
.B #include <stdio.h>
.sp
.BI "char *tempnam(const char *" dir ", const char *" pfx );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR tempnam ():
_BSD_SOURCE || _SVID_SOURCE
.SH DESCRIPTION
.I "Never use this function."
Use
.BR mkstemp (3)
or
.BR tmpfile (3)
instead.

The
.BR tempnam ()
function returns a pointer to a string that is a valid filename,
and such that a file with this name did not exist when
.BR tempnam ()
checked.
The filename suffix of the pathname generated will start with
.I pfx
in case
.I pfx
is a non-NULL string of at most five bytes.
The directory prefix part of the pathname generated is required to
be "appropriate" (often that at least implies writable).

Attempts to find an appropriate directory go through the following
steps:
.TP 3
a)
In case the environment variable
.B TMPDIR
exists and
contains the name of an appropriate directory, that is used.
.TP
b)
Otherwise, if the
.I dir
argument is non-NULL and appropriate, it is used.
.TP
c)
Otherwise,
.I P_tmpdir
(as defined in
.IR <stdio.h> )
is used when appropriate.
.TP
d)
Finally an implementation-defined directory may be used.
.PP
The string returned by
.BR tempnam ()
is allocated using
.BR malloc (3)
and hence should be freed by
.BR free (3).
.SH RETURN VALUE
On success, the
.BR tempnam ()
function returns a pointer to a unique temporary filename.
It returns NULL if a unique name cannot be generated, with
.I errno
set to indicate the cause of the error.
.SH ERRORS
.TP
.B ENOMEM
Allocation of storage failed.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR tempnam ()
T}	Thread safety	MT-Safe env
.TE
.SH CONFORMING TO
SVr4, 4.3BSD, POSIX.1-2001.
POSIX.1-2008 marks
.BR tempnam ()
as obsolete.
.SH NOTES
Although
.BR tempnam ()
generates names that are difficult to guess,
it is nevertheless possible that between the time that
.BR tempnam ()
returns a pathname, and the time that the program opens it,
another program might create that pathname using
.BR open (2),
or create it as a symbolic link.
This can lead to security holes.
To avoid such possibilities, use the
.BR open (2)
.B O_EXCL
flag to open the pathname.
Or better yet, use
.BR mkstemp (3)
or
.BR tmpfile (3).

SUSv2 does not mention the use of
.BR TMPDIR ;
glibc will use it only
when the program is not set-user-ID.
On SVr4, the directory used under \fBd)\fP is
.I /tmp
(and this is what glibc does).
.LP
Because it dynamically allocates memory used to return the pathname,
.BR tempnam ()
is reentrant, and thus thread safe, unlike
.BR tmpnam (3).
.LP
The
.BR tempnam ()
function generates a different string each time it is called,
up to
.B TMP_MAX
(defined in
.IR <stdio.h> )
times.
If it is called more than
.B TMP_MAX
times,
the behavior is implementation defined.
.LP
.BR tempnam ()
uses at most the first five bytes from
.IR pfx .

The glibc implementation of
.BR tempnam ()
will fail with the error
.B EEXIST
upon failure to find a unique name.
.SH BUGS
The precise meaning of "appropriate" is undefined;
it is unspecified how accessibility of a directory is determined.
.SH SEE ALSO
.BR mkstemp (3),
.BR mktemp (3),
.BR tmpfile (3),
.BR tmpnam (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1993 Michael Haardt
.\" (michael@moria.de)
.\" Fri Apr  2 11:32:09 MET DST 1993
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.\" Modified 1993-07-24 by Rik Faith <faith@cs.unc.edu>
.\" Modified 1995-02-25 by Jim Van Zandt <jrv@vanzandt.mv.com>
.\" Modified 1995-09-02 by Jim Van Zandt <jrv@vanzandt.mv.com>
.\" moved to man3, aeb, 950919
.\" Modified 2001-09-22 by Michael Kerrisk <mtk.manpages@gmail.com>
.\" Modified 2001-12-17, aeb
.\" Modified 2004-10-31, aeb
.\" 2006-12-28, mtk:
.\"     Added .SS headers to give some structure to this page; and a
.\"     small amount of reordering.
.\"     Added a section on canonical and noncanonical mode.
.\"     Enhanced the discussion of "raw" mode for cfmakeraw().
.\"     Document CMSPAR.
.\"
.TH TERMIOS 3 2015-03-02 "Linux" "Linux Programmer's Manual"
.SH NAME
termios, tcgetattr, tcsetattr, tcsendbreak, tcdrain, tcflush, tcflow,
cfmakeraw, cfgetospeed, cfgetispeed, cfsetispeed, cfsetospeed, cfsetspeed \-
get and set terminal attributes, line control, get and set baud rate
.SH SYNOPSIS
.nf
.B #include <termios.h>
.br
.B #include <unistd.h>
.sp
.BI "int tcgetattr(int " fd ", struct termios *" termios_p );
.sp
.BI "int tcsetattr(int " fd ", int " optional_actions ,
.BI "              const struct termios *" termios_p );
.sp
.BI "int tcsendbreak(int " fd ", int " duration );
.sp
.BI "int tcdrain(int " fd );
.sp
.BI "int tcflush(int " fd ", int " queue_selector );
.sp
.BI "int tcflow(int " fd ", int " action );
.sp
.BI "void cfmakeraw(struct termios *" termios_p );
.sp
.BI "speed_t cfgetispeed(const struct termios *" termios_p );
.sp
.BI "speed_t cfgetospeed(const struct termios *" termios_p );
.sp
.BI "int cfsetispeed(struct termios *" termios_p ", speed_t " speed );
.sp
.BI "int cfsetospeed(struct termios *" termios_p ", speed_t " speed );
.sp
.BI "int cfsetspeed(struct termios *" termios_p ", speed_t " speed );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR cfsetspeed (),
.BR cfmakeraw ():
_BSD_SOURCE
.SH DESCRIPTION
The termios functions describe a general terminal interface that is
provided to control asynchronous communications ports.
.SS The termios structure
.LP
Many of the functions described here have a \fItermios_p\fP argument
that is a pointer to a \fItermios\fP structure.
This structure contains at least the following members:
.sp
.in +4n
.nf
tcflag_t c_iflag;      /* input modes */
tcflag_t c_oflag;      /* output modes */
tcflag_t c_cflag;      /* control modes */
tcflag_t c_lflag;      /* local modes */
cc_t     c_cc[NCCS];   /* special characters */
.fi
.in
.PP
The values that may be assigned to these fields are described below.
In the case of the first four bit-mask fields,
the definitions of some of the associated flags that may be set are
exposed only if a specific feature test macro (see
.BR feature_test_macros (7))
is defined, as noted in brackets ("[]").
.PP
In the descriptions below, "not in POSIX" means that the
value is not specified in POSIX.1-2001,
and "XSI" means that the value is specified in POSIX.1-2001
as part of the XSI extension.
.PP
\fIc_iflag\fP flag constants:
.TP
.B IGNBRK
Ignore BREAK condition on input.
.TP
.B BRKINT
If \fBIGNBRK\fP is set, a BREAK is ignored.
If it is not set
but \fBBRKINT\fP is set, then a BREAK causes the input and output
queues to be flushed, and if the terminal is the controlling
terminal of a foreground process group, it will cause a
\fBSIGINT\fP to be sent to this foreground process group.
When neither \fBIGNBRK\fP nor \fBBRKINT\fP are set, a BREAK
reads as a null byte (\(aq\\0\(aq), except when \fBPARMRK\fP is set,
in which case it reads as the sequence \\377 \\0 \\0.
.TP
.B IGNPAR
Ignore framing errors and parity errors.
.TP
.B PARMRK
If \fBIGNPAR\fP is not set, prefix a character with a parity error or
framing error with \\377 \\0.
If neither \fBIGNPAR\fP nor \fBPARMRK\fP
is set, read a character with a parity error or framing error
as \\0.
.TP
.B INPCK
Enable input parity checking.
.TP
.B ISTRIP
Strip off eighth bit.
.TP
.B INLCR
Translate NL to CR on input.
.TP
.B IGNCR
Ignore carriage return on input.
.TP
.B ICRNL
Translate carriage return to newline on input (unless \fBIGNCR\fP is set).
.TP
.B IUCLC
(not in POSIX) Map uppercase characters to lowercase on input.
.TP
.B IXON
Enable XON/XOFF flow control on output.
.TP
.B IXANY
(XSI) Typing any character will restart stopped output.
(The default is to allow just the START character to restart output.)
.TP
.B IXOFF
Enable XON/XOFF flow control on input.
.TP
.B IMAXBEL
(not in POSIX) Ring bell when input queue is full.
Linux does not implement this bit, and acts as if it is always set.
.TP
.BR IUTF8 " (since Linux 2.6.4)"
(not in POSIX) Input is UTF8;
this allows character-erase to be correctly performed in cooked mode.
.PP
.I c_oflag
flag constants:
.TP
.B OPOST
Enable implementation-defined output processing.
.TP
.B OLCUC
(not in POSIX) Map lowercase characters to uppercase on output.
.TP
.B ONLCR
(XSI) Map NL to CR-NL on output.
.TP
.B OCRNL
Map CR to NL on output.
.TP
.B ONOCR
Don't output CR at column 0.
.TP
.B ONLRET
Don't output CR.
.TP
.B OFILL
Send fill characters for a delay, rather than using a timed delay.
.TP
.B OFDEL
Fill character is ASCII DEL (0177).
If unset, fill character is ASCII NUL (\(aq\\0\(aq).
(Not implemented on Linux.)
.TP
.B NLDLY
Newline delay mask.
Values are \fBNL0\fP and \fBNL1\fP.
[requires
.B _BSD_SOURCE
or
.B _SVID_SOURCE
or
.BR _XOPEN_SOURCE ]
.TP
.B CRDLY
Carriage return delay mask.
Values are \fBCR0\fP, \fBCR1\fP, \fBCR2\fP, or \fBCR3\fP.
[requires
.B _BSD_SOURCE
or
.B _SVID_SOURCE
or
.BR _XOPEN_SOURCE ]
.TP
.B TABDLY
Horizontal tab delay mask.
Values are \fBTAB0\fP, \fBTAB1\fP, \fBTAB2\fP, \fBTAB3\fP (or \fBXTABS\fP).
A value of TAB3, that is, XTABS, expands tabs to spaces
(with tab stops every eight columns).
[requires
.B _BSD_SOURCE
or
.B _SVID_SOURCE
or
.BR _XOPEN_SOURCE ]
.TP
.B BSDLY
Backspace delay mask.
Values are \fBBS0\fP or \fBBS1\fP.
(Has never been implemented.)
[requires
.B _BSD_SOURCE
or
.B _SVID_SOURCE
or
.BR _XOPEN_SOURCE ]
.TP
.B VTDLY
Vertical tab delay mask.
Values are \fBVT0\fP or \fBVT1\fP.
.TP
.B FFDLY
Form feed delay mask.
Values are \fBFF0\fP or \fBFF1\fP.
[requires
.B _BSD_SOURCE
or
.B _SVID_SOURCE
or
.BR _XOPEN_SOURCE ]
.PP
\fIc_cflag\fP flag constants:
.TP
.B CBAUD
(not in POSIX) Baud speed mask (4+1 bits).
[requires
.B _BSD_SOURCE
or
.BR _SVID_SOURCE ]
.TP
.B CBAUDEX
(not in POSIX) Extra baud speed mask (1 bit), included in
.BR CBAUD .
[requires
.B _BSD_SOURCE
or
.BR _SVID_SOURCE ]
.sp
(POSIX says that the baud speed is stored in the
.I termios
structure without specifying where precisely, and provides
.BR cfgetispeed ()
and
.BR cfsetispeed ()
for getting at it.
Some systems use bits selected by
.B CBAUD
in
.IR c_cflag ,
other systems use separate fields, for example,
.I sg_ispeed
and
.IR sg_ospeed .)
.TP
.B CSIZE
Character size mask.
Values are \fBCS5\fP, \fBCS6\fP, \fBCS7\fP, or \fBCS8\fP.
.TP
.B CSTOPB
Set two stop bits, rather than one.
.TP
.B CREAD
Enable receiver.
.TP
.B PARENB
Enable parity generation on output and parity checking for input.
.TP
.B PARODD
If set, then parity for input and output is odd;
otherwise even parity is used.
.TP
.B HUPCL
Lower modem control lines after last process closes the device (hang up).
.TP
.B CLOCAL
Ignore modem control lines.
.TP
.B LOBLK
(not in POSIX) Block output from a noncurrent shell layer.
For use by \fBshl\fP (shell layers).  (Not implemented on Linux.)
.TP
.B CIBAUD
(not in POSIX) Mask for input speeds.
The values for the
.B CIBAUD
bits are
the same as the values for the
.B CBAUD
bits, shifted left
.B IBSHIFT
bits.
[requires
.B _BSD_SOURCE
or
.BR _SVID_SOURCE ]
(Not implemented on Linux.)
.TP
.B CMSPAR
(not in POSIX)
Use "stick" (mark/space) parity (supported on certain serial
devices): if
.B PARODD
is set, the parity bit is always 1; if
.B PARODD
is not set, then the parity bit is always 0.
[requires
.B _BSD_SOURCE
or
.BR _SVID_SOURCE ]
.TP
.B CRTSCTS
(not in POSIX) Enable RTS/CTS (hardware) flow control.
[requires
.B _BSD_SOURCE
or
.BR _SVID_SOURCE ]
.PP
\fIc_lflag\fP flag constants:
.TP
.B ISIG
When any of the characters INTR, QUIT, SUSP, or DSUSP are received,
generate the corresponding signal.
.TP
.B ICANON
Enable canonical mode (described below).
.TP
.B XCASE
(not in POSIX; not supported under Linux)
If \fBICANON\fP is also set, terminal is uppercase only.
Input is converted to lowercase, except for characters preceded by \\.
On output, uppercase characters are preceded by \\ and lowercase
characters are converted to uppercase.
[requires
.B _BSD_SOURCE
or
.B _SVID_SOURCE
or
.BR _XOPEN_SOURCE ]
.\" glibc is probably now wrong to allow
.\" Define
.\" .B _XOPEN_SOURCE
.\" to expose
.\" .BR XCASE .
.TP
.B ECHO
Echo input characters.
.TP
.B ECHOE
If \fBICANON\fP is also set, the ERASE character erases the preceding
input character, and WERASE erases the preceding word.
.TP
.B ECHOK
If \fBICANON\fP is also set, the KILL character erases the current line.
.TP
.B ECHONL
If \fBICANON\fP is also set, echo the NL character even if ECHO is not set.
.TP
.B ECHOCTL
(not in POSIX) If \fBECHO\fP is also set,
terminal special characters other than
TAB, NL, START, and STOP are echoed as \fB^X\fP,
where X is the character with
ASCII code 0x40 greater than the special character.
For example, character
0x08 (BS) is echoed as \fB^H\fP.
[requires
.B _BSD_SOURCE
or
.BR _SVID_SOURCE ]
.TP
.B ECHOPRT
(not in POSIX) If \fBICANON\fP and \fBECHO\fP are also set, characters
are printed as they are being erased.
[requires
.B _BSD_SOURCE
or
.BR _SVID_SOURCE ]
.TP
.B ECHOKE
(not in POSIX) If \fBICANON\fP is also set, KILL is echoed by erasing
each character on the line, as specified by \fBECHOE\fP and \fBECHOPRT\fP.
[requires
.B _BSD_SOURCE
or
.BR _SVID_SOURCE ]
.TP
.B DEFECHO
(not in POSIX) Echo only when a process is reading.
(Not implemented on Linux.)
.TP
.B FLUSHO
(not in POSIX; not supported under Linux)
Output is being flushed.
This flag is toggled by typing
the DISCARD character.
[requires
.B _BSD_SOURCE
or
.BR _SVID_SOURCE ]
.TP
.B NOFLSH
Disable flushing the input and output queues when generating signals for the
INT, QUIT, and SUSP characters.
.\" Stevens lets SUSP only flush the input queue
.TP
.B TOSTOP
Send the
.B SIGTTOU
signal to the process group of a background process
which tries to write to its controlling terminal.
.TP
.B PENDIN
(not in POSIX; not supported under Linux)
All characters in the input queue are reprinted when
the next character is read.
.RB ( bash (1)
handles typeahead this way.)
[requires
.B _BSD_SOURCE
or
.BR _SVID_SOURCE ]
.TP
.B IEXTEN
Enable implementation-defined input processing.
This flag, as well as \fBICANON\fP must be enabled for the
special characters EOL2, LNEXT, REPRINT, WERASE to be interpreted,
and for the \fBIUCLC\fP flag to be effective.
.PP
The \fIc_cc\fP array defines the terminal special characters.
The symbolic indices (initial values) and meaning are:
.TP
.B VDISCARD
(not in POSIX; not supported under Linux; 017, SI, Ctrl-O)
Toggle: start/stop discarding pending output.
Recognized when
.B IEXTEN
is set, and then not passed as input.
.TP
.B VDSUSP
(not in POSIX; not supported under Linux; 031, EM, Ctrl-Y)
Delayed suspend character (DSUSP):
send
.B SIGTSTP
signal when the character is read by the user program.
Recognized when
.B IEXTEN
and
.B ISIG
are set, and the system supports
job control, and then not passed as input.
.TP
.B VEOF
(004, EOT, Ctrl-D)
End-of-file character (EOF).
More precisely: this character causes the pending tty buffer to be sent
to the waiting user program without waiting for end-of-line.
If it is the first character of the line, the
.BR read (2)
in the user program returns 0, which signifies end-of-file.
Recognized when
.B ICANON
is set, and then not passed as input.
.TP
.B VEOL
(0, NUL)
Additional end-of-line character (EOL).
Recognized when
.B ICANON
is set.
.TP
.B VEOL2
(not in POSIX; 0, NUL)
Yet another end-of-line character (EOL2).
Recognized when
.B ICANON
is set.
.TP
.B VERASE
(0177, DEL, rubout, or 010, BS, Ctrl-H, or also #)
Erase character (ERASE).
This erases the previous not-yet-erased character,
but does not erase past EOF or beginning-of-line.
Recognized when
.B ICANON
is set, and then not passed as input.
.TP
.B VINTR
(003, ETX, Ctrl-C, or also 0177, DEL, rubout)
Interrupt character (INTR).
Send a
.B SIGINT
signal.
Recognized when
.B ISIG
is set, and then not passed as input.
.TP
.B VKILL
(025, NAK, Ctrl-U, or Ctrl-X, or also @)
Kill character (KILL).
This erases the input since the last EOF or beginning-of-line.
Recognized when
.B ICANON
is set, and then not passed as input.
.TP
.B VLNEXT
(not in POSIX; 026, SYN, Ctrl-V)
Literal next (LNEXT).
Quotes the next input character, depriving it of
a possible special meaning.
Recognized when
.B IEXTEN
is set, and then not passed as input.
.TP
.B VMIN
Minimum number of characters for noncanonical read (MIN).
.TP
.B VQUIT
(034, FS, Ctrl-\e)
Quit character (QUIT).
Send
.B SIGQUIT
signal.
Recognized when
.B ISIG
is set, and then not passed as input.
.TP
.B VREPRINT
(not in POSIX; 022, DC2, Ctrl-R)
Reprint unread characters (REPRINT).
Recognized when
.B ICANON
and
.B IEXTEN
are set, and then not passed as input.
.TP
.B VSTART
(021, DC1, Ctrl-Q)
Start character (START).
Restarts output stopped by the Stop character.
Recognized when
.B IXON
is set, and then not passed as input.
.TP
.B VSTATUS
(not in POSIX; not supported under Linux;
status request: 024, DC4, Ctrl-T).
Status character (STATUS).
Display status information at terminal,
including state of foreground process and amount of CPU time it has consumed.
Also sends a
.BR SIGINFO
signal (not supported on Linux) to the foreground process group.
.TP
.B VSTOP
(023, DC3, Ctrl-S)
Stop character (STOP).
Stop output until Start character typed.
Recognized when
.B IXON
is set, and then not passed as input.
.TP
.B VSUSP
(032, SUB, Ctrl-Z)
Suspend character (SUSP).
Send
.B SIGTSTP
signal.
Recognized when
.B ISIG
is set, and then not passed as input.
.TP
.B VSWTCH
(not in POSIX; not supported under Linux; 0, NUL)
Switch character (SWTCH).
Used in System V to switch shells in
.IR "shell layers" ,
a predecessor to shell job control.
.TP
.B VTIME
Timeout in deciseconds for noncanonical read (TIME).
.TP
.B VWERASE
(not in POSIX; 027, ETB, Ctrl-W)
Word erase (WERASE).
Recognized when
.B ICANON
and
.B IEXTEN
are set, and then not passed as input.
.LP
An individual terminal special character can be disabled by setting
the value of the corresponding
.I c_cc
element to
.BR _POSIX_VDISABLE .
.LP
The above symbolic subscript values are all different, except that
.BR VTIME ,
.B VMIN
may have the same value as
.BR VEOL ,
.BR VEOF ,
respectively.
In noncanonical mode the special character meaning is replaced
by the timeout meaning.
For an explanation of
.B VMIN
and
.BR VTIME ,
see the description of
noncanonical mode below.
.SS Retrieving and changing terminal settings
.PP
.BR tcgetattr ()
gets the parameters associated with the object referred by \fIfd\fP and
stores them in the \fItermios\fP structure referenced by
\fItermios_p\fP.
This function may be invoked from a background process;
however, the terminal attributes may be subsequently changed by a
foreground process.
.LP
.BR tcsetattr ()
sets the parameters associated with the terminal (unless support is
required from the underlying hardware that is not available) from the
\fItermios\fP structure referred to by \fItermios_p\fP.
\fIoptional_actions\fP specifies when the changes take effect:
.IP \fBTCSANOW\fP
the change occurs immediately.
.IP \fBTCSADRAIN\fP
the change occurs after all output written to
.I fd
has been transmitted.
This option should be used when changing
parameters that affect output.
.IP \fBTCSAFLUSH\fP
the change occurs after all output written to the object referred by
.I fd
has been transmitted, and all input that has been received but not read
will be discarded before the change is made.
.SS Canonical and noncanonical mode
The setting of the
.B ICANON
canon flag in
.I c_lflag
determines whether the terminal is operating in canonical mode
.RB ( ICANON
set) or
noncanonical mode
.RB ( ICANON
unset).
By default,
.B ICANON
set.

In canonical mode:
.IP * 2
Input is made available line by line.
An input line is available when one of the line delimiters
is typed (NL, EOL, EOL2; or EOF at the start of line).
Except in the case of EOF, the line delimiter is included
in the buffer returned by
.BR read (2).
.IP * 2
Line editing is enabled (ERASE, KILL;
and if the
.B IEXTEN
flag is set: WERASE, REPRINT, LNEXT).
A
.BR read (2)
returns at most one line of input; if the
.BR read (2)
requested fewer bytes than are available in the current line of input,
then only as many bytes as requested are read,
and the remaining characters will be available for a future
.BR read (2).
.PP
In noncanonical mode input is available immediately (without
the user having to type a line-delimiter character),
no input processing is performed,
and line editing is disabled.
The settings of MIN
.RI ( c_cc[VMIN] )
and TIME
.RI ( c_cc[VTIME] )
determine the circumstances in which a
.BR read (2)
completes; there are four distinct cases:
.TP
MIN == 0, TIME == 0 (polling read)
If data is available,
.BR read (2)
returns immediately, with the lesser of the number of bytes
available, or the number of bytes requested.
If no data is available,
.BR read (2)
returns 0.
.TP
MIN > 0, TIME == 0 (blocking read)
.BR read (2)
blocks until MIN bytes are available,
and returns up to the number of bytes requested.
.TP
MIN == 0, TIME > 0 (read with timeout)
TIME specifies the limit for a timer in tenths of a second.
The timer is started when
.BR read (2)
is called.
.BR read (2)
returns either when at least one byte of data is available,
or when the timer expires.
If the timer expires without any input becoming available,
.BR read (2)
returns 0.
If data is already available at the time of the call to
.BR read (2),
the call behaves as though the data was received immediately after the call.
.TP
MIN > 0, TIME > 0 (read with interbyte timeout)
TIME specifies the limit for a timer in tenths of a second.
Once an initial byte of input becomes available,
the timer is restarted after each further byte is received.
.BR read (2)
returns when any of the following conditions is met:
.RS
.IP * 3
MIN bytes have been received.
.IP *
The interbyte timer expires.
.IP *
The number of bytes requested by
.BR read (2)
has been received.
(POSIX does not specify this termination condition,
and on some other implementations
.\" e.g., Solaris
.BR read (2)
does not return in this case.)
.RE
.IP
Because the timer is started only after the initial byte
becomes available, at least one byte will be read.
If data is already available at the time of the call to
.BR read (2),
the call behaves as though the data was received immediately after the call.
.PP
POSIX
.\" POSIX.1-2008 XBD 11.1.7
does not specify whether the setting of the
.B O_NONBLOCK
file status flag takes precedence over the MIN and TIME settings.
If
.B O_NONBLOCK
is set, a
.BR read (2)
in noncanonical mode may return immediately,
regardless of the setting of MIN or TIME.
Furthermore, if no data is available,
POSIX permits a
.BR read (2)
in noncanonical mode to return either 0, or \-1 with
.I errno
set to
.BR EAGAIN .
.SS Raw mode
.LP
.BR cfmakeraw ()
sets the terminal to something like the
"raw" mode of the old Version 7 terminal driver:
input is available character by character,
echoing is disabled, and all special processing of
terminal input and output characters is disabled.
The terminal attributes are set as follows:
.nf

    termios_p\->c_iflag &= ~(IGNBRK | BRKINT | PARMRK | ISTRIP
                    | INLCR | IGNCR | ICRNL | IXON);
    termios_p\->c_oflag &= ~OPOST;
    termios_p\->c_lflag &= ~(ECHO | ECHONL | ICANON | ISIG | IEXTEN);
    termios_p\->c_cflag &= ~(CSIZE | PARENB);
    termios_p\->c_cflag |= CS8;
.fi
.SS Line control
.LP
.BR tcsendbreak ()
transmits a continuous stream of zero-valued bits for a specific
duration, if the terminal is using asynchronous serial data
transmission.
If \fIduration\fP is zero, it transmits zero-valued bits
for at least 0.25 seconds, and not more that 0.5 seconds.
If \fIduration\fP is not zero, it sends zero-valued bits for some
implementation-defined length of time.
.LP
If the terminal is not using asynchronous serial data transmission,
.BR tcsendbreak ()
returns without taking any action.
.LP
.BR tcdrain ()
waits until all output written to the object referred to by
.I fd
has been transmitted.
.LP
.BR tcflush ()
discards data written to the object referred to by
.I fd
but not transmitted, or data received but not read, depending on the
value of
.IR queue_selector :
.IP \fBTCIFLUSH\fP
flushes data received but not read.
.IP \fBTCOFLUSH\fP
flushes data written but not transmitted.
.IP \fBTCIOFLUSH\fP
flushes both data received but not read, and data written but not
transmitted.
.LP
.BR tcflow ()
suspends transmission or reception of data on the object referred to by
.IR fd ,
depending on the value of
.IR action :
.IP \fBTCOOFF\fP
suspends output.
.IP \fBTCOON\fP
restarts suspended output.
.IP \fBTCIOFF\fP
transmits a STOP character, which stops the terminal device from
transmitting data to the system.
.IP \fBTCION\fP
transmits a START character, which starts the terminal device
transmitting data to the system.
.LP
The default on open of a terminal file is that neither its input nor its
output is suspended.
.SS Line speed
The baud rate functions are provided for getting and setting the values
of the input and output baud rates in the \fItermios\fP structure.
The new values do not take effect
until
.BR tcsetattr ()
is successfully called.

Setting the speed to \fBB0\fP instructs the modem to "hang up".
The actual bit rate corresponding to \fBB38400\fP may be altered with
.BR setserial (8).
.LP
The input and output baud rates are stored in the \fItermios\fP
structure.
.LP
.BR cfgetospeed ()
returns the output baud rate stored in the \fItermios\fP structure
pointed to by
.IR termios_p .
.LP
.BR cfsetospeed ()
sets the output baud rate stored in the \fItermios\fP structure pointed
to by \fItermios_p\fP to \fIspeed\fP, which must be one of these constants:
.nf

.ft B
	B0
	B50
	B75
	B110
	B134
	B150
	B200
	B300
	B600
	B1200
	B1800
	B2400
	B4800
	B9600
	B19200
	B38400
	B57600
	B115200
	B230400
.ft P

.fi
The zero baud rate, \fBB0\fP,
is used to terminate the connection.
If B0 is specified, the modem control lines shall no longer be asserted.
Normally, this will disconnect the line.
\fBCBAUDEX\fP is a mask
for the speeds beyond those defined in POSIX.1 (57600 and above).
Thus, \fBB57600\fP & \fBCBAUDEX\fP is nonzero.
.LP
.BR cfgetispeed ()
returns the input baud rate stored in the \fItermios\fP structure.
.LP
.BR cfsetispeed ()
sets the input baud rate stored in the \fItermios\fP structure to
.IR speed ,
which must be specified as one of the \fBBnnn\fP constants listed above for
.BR cfsetospeed ().
If the input baud rate is set to zero, the input baud rate will be
equal to the output baud rate.
.LP
.BR cfsetspeed ()
is a 4.4BSD extension.
It takes the same arguments as
.BR cfsetispeed (),
and sets both input and output speed.
.SH RETURN VALUE
.LP
.BR cfgetispeed ()
returns the input baud rate stored in the
\fItermios\fP
structure.
.LP
.BR cfgetospeed ()
returns the output baud rate stored in the \fItermios\fP structure.
.LP
All other functions return:
.IP 0
on success.
.IP \-1
on failure and set
.I errno
to indicate the error.
.LP
Note that
.BR tcsetattr ()
returns success if \fIany\fP of the requested changes could be
successfully carried out.
Therefore, when making multiple changes
it may be necessary to follow this call with a further call to
.BR tcgetattr ()
to check that all changes have been performed successfully.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.nh
.ad l
.TS
allbox;
lbw36 lb lb
l l l.
Interface	Attribute	Value
T{
.BR tcgetattr (),
.BR tcsetattr (),
.BR tcdrain (),
.BR tcflush (),
.BR tcflow (),
.BR tcsendbreak (),
.BR cfmakeraw (),
.BR cfgetispeed (),
.BR cfgetospeed (),
.BR cfsetispeed (),
.BR cfsetospeed (),
.BR cfsetspeed ()
T}	Thread safety	MT-Safe
.TE
.ad
.hy
.SH CONFORMING TO
.BR tcgetattr (),
.BR tcsetattr (),
.BR tcsendbreak (),
.BR tcdrain (),
.BR tcflush (),
.BR tcflow (),
.BR cfgetispeed (),
.BR cfgetospeed (),
.BR cfsetispeed (),
and
.BR cfsetospeed ()
are specified in POSIX.1-2001.

.BR cfmakeraw ()
and
.BR cfsetspeed ()
are nonstandard, but available on the BSDs.
.SH NOTES
UNIX\ V7 and several later systems have a list of baud rates
where after the fourteen values B0, ..., B9600 one finds the
two constants EXTA, EXTB ("External A" and "External B").
Many systems extend the list with much higher baud rates.
.LP
The effect of a nonzero \fIduration\fP with
.BR tcsendbreak ()
varies.
SunOS specifies a break of
.I "duration\ *\ N"
seconds, where \fIN\fP is at least 0.25, and not more than 0.5.
Linux, AIX, DU, Tru64 send a break of
.I duration
milliseconds.
FreeBSD and NetBSD and HP-UX and MacOS ignore the value of
.IR duration .
Under Solaris and UnixWare,
.BR tcsendbreak ()
with nonzero
.I duration
behaves like
.BR tcdrain ().
.\" libc4 until 4.7.5, glibc for sysv: EINVAL for duration > 0.
.\" libc4.7.6, libc5, glibc for unix: duration in ms.
.\" glibc for bsd: duration in us
.\" glibc for sunos4: ignore duration
.SH SEE ALSO
.BR reset (1),
.BR setterm (1),
.BR stty (1),
.BR tput (1),
.BR tset (1),
.BR console_ioctl (4),
.BR tty_ioctl (4),
.BR setserial (8)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 2002 Walter Harms (walter.harms@informatik.uni-oldenburg.de)
.\"
.\" %%%LICENSE_START(GPL_NOVERSION_ONELINE)
.\" Distributed under GPL
.\" %%%LICENSE_END
.\"
.\" Based on glibc infopages
.\" and Copyright 2008, Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\" Modified 2004-11-15, fixed error noted by Fabian Kreutz
.\"	 <kreutz@dbs.uni-hannover.de>
.\"
.TH TGAMMA 3 2015-04-19 "GNU" "Linux Programmer's Manual"
.SH NAME
tgamma, tgammaf, tgammal \- true gamma function
.SH SYNOPSIS
.B #include <math.h>
.sp
.BI "double tgamma(double " x );
.br
.BI "float tgammaf(float " x );
.br
.BI "long double tgammal(long double " x );
.sp
Link with \fI\-lm\fP.
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR tgamma (),
.BR tgammaf (),
.BR tgammal ():
.RS 4
_XOPEN_SOURCE\ >=\ 600 || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.ad
.SH DESCRIPTION
These functions calculate the Gamma function of
.IR x .

The Gamma function is defined by
.sp
    Gamma(x) = integral from 0 to infinity of t^(x\-1) e^\-t dt
.sp
It is defined for every real number except for nonpositive integers.
For nonnegative integral
.I m
one has
.sp
    Gamma(m+1) = m!
.sp
and, more generally, for all
.IR x :
.sp
    Gamma(x+1) = x * Gamma(x)
.sp
Furthermore, the following is valid for all values of
.I x
outside the poles:
.sp
    Gamma(x) * Gamma(1 \- x) = PI / sin(PI * x)
.PP
.SH RETURN VALUE
On success, these functions return Gamma(x).

If
.I x
is a NaN, a NaN is returned.

If
.I x
is positive infinity, positive infinity is returned.

If
.I x
is a negative integer, or is negative infinity,
a domain error occurs,
and a NaN is returned.

If the result overflows,
a range error occurs,
and the functions return
.BR HUGE_VAL ,
.BR HUGE_VALF ,
or
.BR HUGE_VALL ,
respectively, with the correct mathematical sign.

If the result underflows,
a range error occurs,
and the functions return 0, with the correct mathematical sign.

If
.I x
is \-0 or +0,
a pole error occurs,
and the functions return
.BR HUGE_VAL ,
.BR HUGE_VALF ,
or
.BR HUGE_VALL ,
respectively, with the same sign as the 0.
.SH ERRORS
See
.BR math_error (7)
for information on how to determine whether an error has occurred
when calling these functions.
.PP
The following errors can occur:
.TP
Domain error: \fIx\fP is a negative integer, or negative infinity
.I errno
is set to
.BR EDOM .
An invalid floating-point exception
.RB ( FE_INVALID )
is raised (but see BUGS).
.TP
Pole error: \fIx\fP is +0 or \-0
.I errno
is set to
.BR ERANGE .
A divide-by-zero floating-point exception
.RB ( FE_DIVBYZERO )
is raised.
.TP
Range error: result overflow
.I errno
is set to
.BR ERANGE .
An overflow floating-point exception
.RB ( FE_OVERFLOW )
is raised.
.PP
glibc also gives the following error which is not specified
in C99 or POSIX.1-2001.
.TP
Range error: result underflow
.\" e.g., tgamma(-172.5) on glibc 2.8/x86-32
.\" .I errno
.\" is set to
.\" .BR ERANGE .
An underflow floating-point exception
.RB ( FE_UNDERFLOW )
is raised.
.IP
.I errno
is not set for this case.
.\" FIXME . Is it intentional that errno is not set:
.\" Bug raised: http://sources.redhat.com/bugzilla/show_bug.cgi?id=6810
.\"
.\" glibc (as at 2.8) also supports and an inexact
.\" exception for various cases.
.SH VERSIONS
These functions first appeared in glibc in version 2.1.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw30 lb lb
l l l.
Interface	Attribute	Value
T{
.BR tgamma (),
.BR tgammaf (),
.BR tgammal ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C99, POSIX.1-2001, POSIX.1-2008.
.SH NOTES
This function had to be called "true gamma function"
since there is already a function
.BR gamma (3)
that returns something else (see
.BR gamma (3)
for details).
.SH BUGS
Before version 2.18, the glibc implementation of these functions did not set
.\" http://sources.redhat.com/bugzilla/show_bug.cgi?id=6809
.I errno
to
.B EDOM
when
.I x
is negative infinity.

In glibc versions 2.3.3 and earlier,
an argument of +0 or \-0 incorrectly produced a domain error
.RI ( errno
set to
.B EDOM
and an
.B FE_INVALID
exception raised), rather than a pole error.
.SH SEE ALSO
.BR gamma (3),
.BR lgamma (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2001 Andries Brouwer <aeb@cwi.nl>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH TIMEGM 3 2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
timegm, timelocal \- inverses of gmtime and localtime
.SH SYNOPSIS
.nf
.B #include <time.h>
.sp
.BI "time_t timelocal(struct tm *" tm );
.sp
.BI "time_t timegm(struct tm *" tm );
.sp
.fi
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR timelocal (),
.BR timegm ():
_BSD_SOURCE || _SVID_SOURCE
.SH DESCRIPTION
The functions
.BR timelocal ()
and
.BR timegm ()
are the inverses of
.BR localtime (3)
and
.BR gmtime (3).
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw21 lb lb
l l l.
Interface	Attribute	Value
T{
.BR timelocal (),
.BR timegm ()
T}	Thread safety	MT-Safe env locale
.TE
.SH CONFORMING TO
These functions are nonstandard GNU extensions
that are also present on the BSDs.
Avoid their use; see NOTES.
.SH NOTES
The
.BR timelocal ()
function is equivalent to the POSIX standard function
.BR mktime (3).
There is no reason to ever use it.
.LP
For a portable version of
.BR timegm (),
set the
.B TZ
environment variable to UTC, call
.BR mktime (3)
and restore the value of
.BR TZ .
Something like

.in +4n
.nf
#include <time.h>
#include <stdlib.h>

time_t
my_timegm(struct tm *tm)
{
    time_t ret;
    char *tz;

    tz = getenv("TZ");
    if (tz)
        tz = strdup(tz);
    setenv("TZ", "", 1);
    tzset();
    ret = mktime(tm);
    if (tz) {
        setenv("TZ", tz, 1);
        free(tz);
    } else
        unsetenv("TZ");
    tzset();
    return ret;
}
.fi
.in
.SH SEE ALSO
.BR gmtime (3),
.BR localtime (3),
.BR mktime (3),
.BR tzset (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2007 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" 2007-07-31, mtk, Created
.\"
.TH TIMERADD 3 2010-02-25 "Linux" "Linux Programmer's Manual"
.SH NAME
timeradd, timersub, timercmp, timerclear, timerisset \- timeval operations
.SH SYNOPSIS
.nf
.B #include <sys/time.h>

.BI "void timeradd(struct timeval *" a ", struct timeval *" b ,
.BI "              struct timeval *" res );

.BI "void timersub(struct timeval *" a ", struct timeval *" b ,
.BI "              struct timeval *" res );

.BI "void timerclear(struct timeval *" tvp );

.BI "int timerisset(struct timeval *" tvp );

.BI "int timercmp(struct timeval *" a ", struct timeval *" b ", " CMP );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
All functions shown above:
_BSD_SOURCE
.SH DESCRIPTION
The macros are provided to operate on
.I timeval
structures, defined in
.I <sys/time.h>
as:
.sp
.in +4n
.nf
struct timeval {
    time_t      tv_sec;     /* seconds */
    suseconds_t tv_usec;    /* microseconds */
};
.fi
.in
.PP
.BR timeradd ()
adds the time values in
.I a
and
.IR b ,
and places the sum in the
.I timeval
pointed to by
.IR res .
The result is normalized such that
.I res\->tv_usec
has a value in the range 0 to 999,999.

.BR timersub ()
subtracts the time value in
.I b
from the time value in
.IR a ,
and places the result in the
.I timeval
pointed to by
.IR res .
The result is normalized such that
.I res\->tv_usec
has a value in the range 0 to 999,999.

.BR timerclear ()
zeros out the
.I timeval
structure pointed to by
.IR tvp ,
so that it represents the Epoch: 1970-01-01 00:00:00 +0000 (UTC).

.BR timerisset ()
returns true (nonzero) if either field of the
.I timeval
structure pointed to by
.I tvp
contains a nonzero value.

.BR timercmp ()
compares the timer values in
.I a
and
.I b
using the comparison operator
.IR CMP ,
and returns true (nonzero) or false (0) depending on
the result of the comparison.
Some systems (but not Linux/glibc),
have a broken
.BR timercmp ()
implementation,
.\" HP-UX, Tru64, Irix have a definition like:
.\"#define timercmp(tvp, uvp, cmp) \
.\"    ((tvp)->tv_sec cmp (uvp)->tv_sec || \
.\"    (tvp)->tv_sec == (uvp)->tv_sec && (tvp)->tv_usec cmp (uvp)->tv_usec)
in which
.I CMP
of
.IR >= ,
.IR <= ,
and
.I ==
do not work;
portable applications can instead use

    !timercmp(..., <)
    !timercmp(..., >)
    !timercmp(..., !=)
.SH RETURN VALUE
.BR timerisset ()
and
.BR timercmp ()
return true (nonzero) or false (0).
.SH ERRORS
No errors are defined.
.SH CONFORMING TO
Not in POSIX.1-2001.
Present on most BSD derivatives.
.SH SEE ALSO
.BR gettimeofday (2),
.BR time (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified Sat Jul 24 17:46:57 1993 by Rik Faith (faith@cs.unc.edu)
.\" Modified 2001-11-17, aeb
.TH TMPFILE 3  2015-03-02 "" "Linux Programmer's Manual"
.SH NAME
tmpfile \- create a temporary file
.SH SYNOPSIS
.nf
.B #include <stdio.h>
.sp
.B FILE *tmpfile(void);
.fi
.SH DESCRIPTION
The
.BR tmpfile ()
function opens a unique temporary file
in binary read/write (w+b) mode.
The file will be automatically deleted when it is closed or the
program terminates.
.SH RETURN VALUE
The
.BR tmpfile ()
function returns a stream descriptor, or NULL if
a unique filename cannot be generated or the unique file cannot be
opened.
In the latter case,
.I errno
is set to indicate the error.
.SH ERRORS
.TP
.B EACCES
Search permission denied for directory in file's path prefix.
.TP
.B EEXIST
Unable to generate a unique filename.
.TP
.B EINTR
The call was interrupted by a signal.
.TP
.B EMFILE
Too many file descriptors in use by the process.
.TP
.B ENFILE
Too many files open in the system.
.TP
.B ENOSPC
There was no room in the directory to add the new filename.
.TP
.B EROFS
Read-only filesystem.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR tmpfile ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
SVr4, 4.3BSD, C89, C99, SUSv2, POSIX.1-2001.
.SH NOTES
POSIX.1-2001 specifies:
an error message may be written to
.I stdout
if the stream
cannot be opened.
.LP
The standard does not specify the directory that
.BR tmpfile ()
will use.
Glibc will try the path prefix
.I P_tmpdir
defined
in
.IR <stdio.h> ,
and if that fails the directory
.IR /tmp .
.SH SEE ALSO
.BR exit (3),
.BR mkstemp (3),
.BR mktemp (3),
.BR tempnam (3),
.BR tmpnam (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1999 Andries Brouwer (aeb@cwi.nl)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" 2003-11-15, aeb, added tmpnam_r
.\"
.TH TMPNAM 3  2015-03-02 "" "Linux Programmer's Manual"
.SH NAME
tmpnam, tmpnam_r \- create a name for a temporary file
.SH SYNOPSIS
.nf
.B #include <stdio.h>
.sp
.BI "char *tmpnam(char *" s );
.fi
.SH DESCRIPTION
.B Note:
Avoid use of
.BR tmpnam ();
use
.BR mkstemp (3)
or
.BR tmpfile (3)
instead.

The
.BR tmpnam ()
function returns a pointer to a string that is a valid filename,
and such that a file with this name did not exist at some point
in time, so that naive programmers may think it
a suitable name for a temporary file.
If the argument
.I s
is NULL, this name is generated in an internal static buffer
and may be overwritten by the next call to
.BR tmpnam ().
If
.I s
is not NULL, the name is copied to the character array (of length
at least
.IR L_tmpnam )
pointed to by
.I s
and the value
.I s
is returned in case of success.
.LP
The pathname that is created, has a directory prefix
.IR P_tmpdir .
(Both
.I L_tmpnam
and
.I P_tmpdir
are defined in
.IR <stdio.h> ,
just like the
.B TMP_MAX
mentioned below.)
.SH RETURN VALUE
The
.BR tmpnam ()
function returns a pointer to a unique temporary
filename, or NULL if a unique name cannot be generated.
.SH ERRORS
No errors are defined.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR tmpnam ()
T}	Thread safety	MT-Unsafe race:tmpnam/!s
T{
.BR tmpnam_r ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
SVr4, 4.3BSD, C89, C99, POSIX.1-2001.
POSIX.1-2008 marks
.BR tmpnam ()
as obsolete.
.SH NOTES
The
.BR tmpnam ()
function generates a different string each time it is called,
up to
.B TMP_MAX
times.
If it is called more than
.B TMP_MAX
times,
the behavior is implementation defined.
.LP
Although
.BR tmpnam ()
generates names that are difficult to guess,
it is nevertheless possible that between the time that
.BR tmpnam ()
returns a pathname, and the time that the program opens it,
another program might create that pathname using
.BR open (2),
or create it as a symbolic link.
This can lead to security holes.
To avoid such possibilities, use the
.BR open (2)
.B O_EXCL
flag to open the pathname.
Or better yet, use
.BR mkstemp (3)
or
.BR tmpfile (3).
.LP
Portable applications that use threads cannot call
.BR tmpnam ()
with a NULL argument if either
.B _POSIX_THREADS
or
.B _POSIX_THREAD_SAFE_FUNCTIONS
is defined.
.LP
A POSIX draft proposed to use a function
.BR tmpnam_r ()
defined by
.sp
.nf
.in +4n
char *
tmpnam_r(char *s)
{
    return s ? tmpnam(s) : NULL;
}
.in
.fi
.sp
apparently as a warning not to use NULL.
A few systems implement it.
To get a glibc prototype for this function from
.IR <stdio.h> ,
define
.B _SVID_SOURCE
or
.B _BSD_SOURCE
(before including
.I any
header file).
.SH BUGS
Never use this function.
Use
.BR mkstemp (3)
or
.BR tmpfile (3)
instead.
.SH SEE ALSO
.BR mkstemp (3),
.BR mktemp (3),
.BR tempnam (3),
.BR tmpfile (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1995 by Jim Van Zandt <jrv@vanzandt.mv.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Added BUGS section, aeb, 950919
.\"
.TH TOASCII 3 2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
toascii \- convert character to ASCII
.SH SYNOPSIS
.nf
.B #include <ctype.h>
.sp
.BI "int toascii(int " "c" );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR toascii ():
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE
.SH DESCRIPTION
.BR toascii ()
converts
.I c
to a 7-bit
.I "unsigned char"
value that fits into the ASCII character set, by clearing the
high-order bits.
.SH RETURN VALUE
The value returned is that of the converted character.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR toascii ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
SVr4, BSD, POSIX.1-2001.
POSIX.1-2008 marks
.BR toascii ()
as obsolete,
noting that it cannot be used portably in a localized application.
.SH BUGS
Many people will be unhappy if you use this function.
This function will convert accented letters into random characters.
.SH SEE ALSO
.BR isascii (3),
.BR tolower (3),
.BR toupper (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1993 by Thomas Koenig (ig25@rz.uni-karlsruhe.de)
.\" and Copyright 2014 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified Sat Jul 24 17:45:39 1993 by Rik Faith (faith@cs.unc.edu)
.\" Modified 2000-02-13 by Nicolás Lichtmaier <nick@debian.org>
.TH TOUPPER 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
toupper, tolower, toupper_l, tolower_l \- convert uppercase or lowercase
.SH SYNOPSIS
.nf
.B #include <ctype.h>
.sp
.BI "int toupper(int " "c" );
.br
.BI "int tolower(int " "c" );

.BI "int toupper_l(int " c ", locale_t " locale );
.BI "int tolower_l(int " c ", locale_t " locale );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR toupper_l (),
.BR tolower_l ():
.PD 0
.RS 4
.TP
Since glibc 2.10:
_XOPEN_SOURCE\ >=\ 700
.TP
Before glibc 2.10:
_GNU_SOURCE
.RE
.PD
.SH DESCRIPTION
These functions convert lowercase letters to uppercase, and vice versa.

If
.I c
is a lowercase letter,
.BR toupper ()
returns its uppercase equivalent,
if an uppercase representation exists in the current locale.
Otherwise, it returns
.IR c .
The
.BR toupper_l ()
function performs the same task,
but uses the locale referred to by the locale handle
.IR locale .

If
.I c
is a uppercase letter,
.BR tolower ()
returns its lowercase equivalent,
if a lowercase representation exists in the current locale.
Otherwise, it returns
.IR c .
The
.BR tolower_l ()
function performs the same task,
but uses the locale referred to by the locale handle
.IR locale .
.PP
If
.I c
is neither an
.I "unsigned char"
value nor
.BR EOF ,
the behavior of these functions
is undefined.

The behavior of
.BR toupper_l ()
and
.BR tolower_l ()
is undefined if
.I locale
is the special locale object
.BR LC_GLOBAL_LOCALE
(see
.BR duplocale (3))
or is not a valid locale object handle.
.SH RETURN VALUE
The value returned is that of the converted letter, or
.I c
if the conversion was not possible.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw24 lb lb
l l l.
Interface	Attribute	Value
T{
.BR toupper (),
.BR tolower (),
.br
.BR toupper_l (),
.BR tolower_l ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
.BR toupper (),
.BR tolower ():
C89, C99, 4.3BSD, POSIX.1-2001, POSIX.1-2008.

.BR toupper_l (),
.BR tolower_l ():
POSIX.1-2008.
.SH NOTES
The details of what constitutes an uppercase or lowercase letter depend
on the locale.
For example, the default
.B """C"""
locale does not know about umlauts, so no conversion is done for them.
.PP
In some non-English locales, there are lowercase letters with no
corresponding uppercase equivalent;
.\" FIXME One day the statement about "sharp s" needs to be reworked,
.\" since there is nowadays a capital "sharp s" that has a codepoint
.\" in Unicode 5.0; see https://en.wikipedia.org/wiki/Capital_%E1%BA%9E
the German sharp s is one example.
.SH SEE ALSO
.BR isalpha (3),
.BR newlocale (3),
.BR setlocale (3),
.BR uselocale (3),
.BR towlower (3),
.BR towupper (3),
.BR locale (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) Bruno Haible <haible@clisp.cons.org>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_ONEPARA)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"   GNU glibc-2 source code and manual
.\"   Dinkumware C library reference http://www.dinkumware.com/
.\"   OpenGroup's Single UNIX specification http://www.UNIX-systems.org/online.html
.\"   ISO/IEC 9899:1999
.\"
.TH TOWCTRANS 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
towctrans \- wide-character transliteration
.SH SYNOPSIS
.nf
.B #include <wctype.h>
.sp
.BI "wint_t towctrans(wint_t " wc ", wctrans_t " desc );
.fi
.SH DESCRIPTION
If
.I wc
is a wide character, the
.BR towctrans ()
function
translates it according to the transliteration descriptor
.IR desc .
If
.IR wc
is
.BR WEOF ,
.B WEOF
is returned.
.PP
.I desc
must be a transliteration descriptor returned by
the
.BR wctrans (3)
function.
.SH RETURN VALUE
The
.BR towctrans ()
function returns the translated wide character,
or
.BR WEOF
if
.I wc
is
.BR WEOF .
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR towctrans ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C99.
.SH NOTES
The behavior of
.BR towctrans ()
depends on the
.B LC_CTYPE
category of the
current locale.
.SH SEE ALSO
.BR towlower (3),
.BR towupper (3),
.BR wctrans (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) Bruno Haible <haible@clisp.cons.org>
.\" and Copyright (C) 2014 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_ONEPARA)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"   GNU glibc-2 source code and manual
.\"   Dinkumware C library reference http://www.dinkumware.com/
.\"   OpenGroup's Single UNIX specification http://www.UNIX-systems.org/online.html
.\"   ISO/IEC 9899:1999
.\"
.TH TOWLOWER 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
towlower, towlower_l \- convert a wide character to lowercase
.SH SYNOPSIS
.nf
.B #include <wctype.h>
.sp
.BI "wint_t towlower(wint_t " wc );

.BI "wint_t towlower_l(wint_t " wc ", locale_t " locale );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR towlower_l ():
.PD 0
.RS 4
.TP
Since glibc 2.10:
_XOPEN_SOURCE\ >=\ 700
.TP
Before glibc 2.10:
_GNU_SOURCE
.RE
.PD
.SH DESCRIPTION
The
.BR towlower ()
function is the wide-character equivalent of the
.BR tolower (3)
function.
If
.I wc
is an uppercase wide character,
and there exists a lowercase equivalent in the current locale,
it returns the lowercase equivalent of
.IR wc .
In all other cases,
.I wc
is returned unchanged.

The
.BR towupper_l ()
function performs the same task,
but performs the conversion based on the character type information in
the locale specified by
.IR locale .
The behavior of
.BR towupper_l ()
is undefined if
.I locale
is the special locale object
.BR LC_GLOBAL_LOCALE
(see
.BR duplocale (3))
or is not a valid locale object handle.

The argument
.I wc
must be representable as a
.IR wchar_t
and be a valid character in the locale or be the value
.BR WEOF .
.SH RETURN VALUE
If
.I wc
was convertible to lowercase,
.BR towlower ()
returns its lowercase equivalent;
otherwise it returns
.IR wc .
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR towlower ()
T}	Thread safety	MT-Safe locale
T{
.BR towlower_l ()
T}	Thread safety	MT-Safe
.TE
.SH VERSIONS
The
.BR towlower_l ()
function first appeared in glibc 2.3.
.SH CONFORMING TO
.BR towlower ():
C99, POSIX.1-2001 (XSI);
present as an XSI extension in POSIX.1-2008, but marked obsolete.

.BR towlower_l ():
POSIX.1-2008.
.SH NOTES
The behavior of these functions depends on the
.B LC_CTYPE
category of the locale.
.PP
These functions are not very appropriate for dealing with Unicode characters,
because Unicode knows about three cases: upper, lower and title case.
.SH SEE ALSO
.BR iswlower (3),
.BR towctrans (3),
.BR towupper (3),
.BR locale (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.

.\" and Copyright (C) 2014 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_ONEPARA)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"   GNU glibc-2 source code and manual
.\"   Dinkumware C library reference http://www.dinkumware.com/
.\"   OpenGroup's Single UNIX specification http://www.UNIX-systems.org/online.html
.\"   ISO/IEC 9899:1999
.\"
.TH TOWUPPER 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
towupper, towupper_l \- convert a wide character to uppercase
.SH SYNOPSIS
.nf
.B #include <wctype.h>
.sp
.BI "wint_t towupper(wint_t " wc );

.BI "wint_t towupper_l(wint_t " wc ", locale_t " locale );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR towupper_l ():
.PD 0
.RS 4
.TP
Since glibc 2.10:
_XOPEN_SOURCE\ >=\ 700
.TP
Before glibc 2.10:
_GNU_SOURCE
.RE
.PD
.SH DESCRIPTION
The
.BR towupper ()
function is the wide-character equivalent of the
.BR toupper (3)
function.
If
.I wc
is a lowercase wide character,
and there exists an uppercase equivalent in the current locale,
it returns the uppercase equivalent of
.IR wc .
In all other cases,
.I wc
is returned unchanged.

The
.BR towupper_l ()
function performs the same task,
but performs the conversion based on the character type information in
the locale specified by
.IR locale .
The behavior of
.BR towupper_l ()
is undefined if
.I locale
is the special locale object
.BR LC_GLOBAL_LOCALE
(see
.BR duplocale (3))
or is not a valid locale object handle.

The argument
.I wc
must be representable as a
.IR wchar_t
and be a valid character in the locale or be the value
.BR WEOF .
.SH RETURN VALUE
If
.I wc
was convertible to uppercase,
.BR towupper ()
returns its uppercase equivalent;
otherwise it returns
.IR wc .
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR towupper ()
T}	Thread safety	MT-Safe locale
T{
.BR towupper_l ()
T}	Thread safety	MT-Safe
.TE
.SH VERSIONS
The
.BR towupper_l ()
function first appeared in glibc 2.3.
.SH CONFORMING TO
.BR towupper ():
C99, POSIX.1-2001 (XSI);
present as an XSI extension in POSIX.1-2008, but marked obsolete.

.BR towupper_l ():
POSIX.1-2008.
.SH NOTES
The behavior of these functions depends on the
.B LC_CTYPE
category of the locale.
.PP
These functions are not very appropriate for dealing with Unicode characters,
because Unicode knows about three cases: upper, lower and title case.
.SH SEE ALSO
.BR iswupper (3),
.BR towctrans (3),
.BR towlower (3),
.BR locale (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2001 Andries Brouwer <aeb@cwi.nl>.
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH TRUNC 3  2015-04-19 "" "Linux Programmer's Manual"
.SH NAME
trunc, truncf, truncl \- round to integer, toward zero
.SH SYNOPSIS
.nf
.B #include <math.h>
.sp
.BI "double trunc(double " x );
.br
.BI "float truncf(float " x );
.br
.BI "long double truncl(long double " x );
.fi
.sp
Link with \fI\-lm\fP.
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR trunc (),
.BR truncf (),
.BR truncl ():
.RS 4
_XOPEN_SOURCE\ >=\ 600 || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.ad
.SH DESCRIPTION
These functions round
.I x
to the nearest integer
not larger in absolute value.
.SH RETURN VALUE
These functions return the rounded integer value.

If
.IR x
is integral, infinite, or NaN,
.I x
itself is returned.
.SH ERRORS
No errors occur.
.SH VERSIONS
These functions first appeared in glibc in version 2.1.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw27 lb lb
l l l.
Interface	Attribute	Value
T{
.BR trunc (),
.BR truncf (),
.BR truncl ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C99, POSIX.1-2001, POSIX.1-2008.
.SH NOTES
The integral value returned by these functions may be too large
to store in an integer type
.RI ( int ,
.IR long ,
etc.).
To avoid an overflow, which will produce undefined results,
an application should perform a range check on the returned value
before assigning it to an integer type.
.SH SEE ALSO
.BR ceil (3),
.BR floor (3),
.BR lrint (3),
.BR nearbyint (3),
.BR rint (3),
.BR round (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1995 by Jim Van Zandt <jrv@vanzandt.mv.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH TSEARCH 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
tsearch, tfind, tdelete, twalk, tdestroy \- manage a binary tree
.SH SYNOPSIS
.nf
.B #include <search.h>
.sp
.BI "void *tsearch(const void *" key ", void **" rootp ,
.BI "                int (*" compar ")(const void *, const void *));"
.sp
.BI "void *tfind(const void *" key ", void *const *" rootp ,
.BI "                int (*" compar ")(const void *, const void *));"
.sp
.BI "void *tdelete(const void *" key ", void **" rootp ,
.BI "                int (*" compar ")(const void *, const void *));"
.sp
.BI "void twalk(const void *" root ", void (*" action ")(const void *" nodep ,
.BI "                                   const VISIT " which ,
.BI "                                   const int " depth "));"
.sp
.BR "#define _GNU_SOURCE" "         /* See feature_test_macros(7) */"
.br
.B #include <search.h>
.sp
.BI "void tdestroy(void *" root ", void (*" free_node ")(void *" nodep ));
.fi
.SH DESCRIPTION
.BR tsearch (),
.BR tfind (),
.BR twalk (),
and
.BR tdelete ()
manage a
binary tree.
They are generalized from Knuth (6.2.2) Algorithm T.
The first field in each node of the tree is a pointer to the
corresponding data item.
(The calling program must store the actual data.)
.IR compar
points to a comparison routine, which takes
pointers to two items.
It should return an integer which is negative,
zero, or positive, depending on whether the first item is less than,
equal to, or greater than the second.
.PP
.BR tsearch ()
searches the tree for an item.
.IR key
points to the item to be searched for.
.IR rootp
points to a variable which points to the root of the tree.
If the tree is empty,
then the variable that
.IR rootp
points to should be set to NULL.
If the item is found in the tree, then
.BR tsearch ()
returns a pointer
to it.
If it is not found, then
.BR tsearch ()
adds it, and returns a
pointer to the newly added item.
.PP
.BR tfind ()
is like
.BR tsearch (),
except that if the item is not
found, then
.BR tfind ()
returns NULL.
.PP
.BR tdelete ()
deletes an item from the tree.
Its arguments are the same as for
.BR tsearch ().
.PP
.BR twalk ()
performs depth-first, left-to-right traversal of a binary
tree.
.IR root
points to the starting node for the traversal.
If that node is not the root, then only part of the tree will be visited.
.BR twalk ()
calls the user function
.IR action
each time a node is
visited (that is, three times for an internal node, and once for a
leaf).
.IR action ,
in turn, takes three arguments.
The first argument is a pointer to the node being visited.
The structure of the node is unspecified,
but it is possible to cast the pointer to a pointer-to-pointer-to-element
in order to access the element stored within the node.
The application must not modify the structure pointed to by this argument.
The second argument is an integer which
takes one of the values
.BR preorder ,
.BR postorder ,
or
.BR endorder
depending on whether this is the first, second, or
third visit to the internal node,
or the value
.BR leaf
if this is the single visit to a leaf node.
(These symbols are defined in
.IR <search.h> .)
The third argument is the depth of the node;
the root node has depth zero.
.PP
(More commonly,
.BR preorder ,
.BR postorder ,
and
.BR endorder
are known as
.BR preorder ,
.BR inorder ,
and
.BR postorder :
before visiting the children, after the first and before the second,
and after visiting the children.
Thus, the choice of name
.BR post\%order
is rather confusing.)
.PP
.BR tdestroy ()
removes the whole tree pointed to by
.IR root ,
freeing all resources allocated by the
.BR tsearch ()
function.
For the data in each tree node the function
.IR free_node
is called.
The pointer to the data is passed as the argument to the function.
If no such work is necessary,
.IR free_node
must point to a function
doing nothing.
.SH RETURN VALUE
.BR tsearch ()
returns a pointer to a matching item in the tree, or to
the newly added item, or NULL if there was insufficient memory
to add the item.
.BR tfind ()
returns a pointer to the item, or
NULL if no match is found.
If there are multiple elements that match the key,
the element returned is unspecified.
.PP
.BR tdelete ()
returns a pointer to the parent of the item deleted, or
NULL if the item was not found.
.PP
.BR tsearch (),
.BR tfind (),
and
.BR tdelete ()
also
return NULL if
.IR rootp
was NULL on entry.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR tsearch (),
.BR tfind (),
.br
.BR tdelete ()
T}	Thread safety	MT-Safe race:rootp
T{
.BR twalk ()
T}	Thread safety	MT-Safe race:root
T{
.BR tdestroy ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
SVr4, POSIX.1-2001.
The function
.BR tdestroy ()
is a GNU extension.
.SH NOTES
.BR twalk ()
takes a pointer to the root, while the other functions
take a pointer to a variable which points to the root.
.PP
.BR tdelete ()
frees the memory required for the node in the tree.
The user is responsible for freeing the memory for the corresponding
data.
.PP
The example program depends on the fact that
.BR twalk ()
makes no
further reference to a node after calling the user function with
argument "endorder" or "leaf".
This works with the GNU library
implementation, but is not in the System V documentation.
.SH EXAMPLE
The following program inserts twelve random numbers into a binary
tree, where duplicate numbers are collapsed, then prints the numbers
in order.
.sp
.nf
#define _GNU_SOURCE     /* Expose declaration of tdestroy() */
#include <search.h>
#include <stdlib.h>
#include <stdio.h>
#include <time.h>

static void *root = NULL;

static void *
xmalloc(unsigned n)
{
    void *p;
    p = malloc(n);
    if (p)
        return p;
    fprintf(stderr, "insufficient memory\\n");
    exit(EXIT_FAILURE);
}

static int
compare(const void *pa, const void *pb)
{
    if (*(int *) pa < *(int *) pb)
        return \-1;
    if (*(int *) pa > *(int *) pb)
        return 1;
    return 0;
}

static void
action(const void *nodep, const VISIT which, const int depth)
{
    int *datap;

    switch (which) {
    case preorder:
        break;
    case postorder:
        datap = *(int **) nodep;
        printf("%6d\\n", *datap);
        break;
    case endorder:
        break;
    case leaf:
        datap = *(int **) nodep;
        printf("%6d\\n", *datap);
        break;
    }
}

int
main(void)
{
    int i, *ptr;
    void *val;

    srand(time(NULL));
    for (i = 0; i < 12; i++) {
        ptr = xmalloc(sizeof(int));
        *ptr = rand() & 0xff;
        val = tsearch((void *) ptr, &root, compare);
        if (val == NULL)
            exit(EXIT_FAILURE);
        else if ((*(int **) val) != ptr)
            free(ptr);
    }
    twalk(root, action);
    tdestroy(root, free);
    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR bsearch (3),
.BR hsearch (3),
.BR lsearch (3),
.BR qsort (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1995 Jim Van Zandt <jrv@vanzandt.mv.com>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.\" Modified 2001-12-13, Martin Schulze <joey@infodrom.org>
.\" Added ttyname_r, aeb, 2002-07-20
.\"
.TH TTYNAME 3 2015-03-02 "Linux" "Linux Programmer's Manual"
.SH NAME
ttyname, ttyname_r \- return name of a terminal
.SH SYNOPSIS
.nf
.B #include <unistd.h>
.sp
.BI "char *ttyname(int " fd );

.BI "int ttyname_r(int " fd ", char *" buf ", size_t " buflen );
.fi
.SH DESCRIPTION
The function
.BR ttyname ()
returns a pointer to the null-terminated pathname of the terminal device
that is open on the file descriptor \fIfd\fP, or NULL on error
(for example, if \fIfd\fP is not connected to a terminal).
The return value may point to static data, possibly overwritten by the
next call.
The function
.BR ttyname_r ()
stores this pathname in the buffer
.I buf
of length
.IR buflen .
.SH RETURN VALUE
The function
.BR ttyname ()
returns a pointer to a pathname on success.
On error, NULL is returned, and
.I errno
is set appropriately.
The function
.BR ttyname_r ()
returns 0 on success, and an error number upon error.
.SH ERRORS
.TP
.B EBADF
Bad file descriptor.
.TP
.B ENOTTY
File descriptor does not refer to a terminal device.
.TP
.B ERANGE
.RB ( ttyname_r ())
.I buflen
was too small to allow storing the pathname.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR ttyname ()
T}	Thread safety	MT-Unsafe race:ttyname
T{
.BR ttyname_r ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
4.2BSD, POSIX.1-2001.
.SH SEE ALSO
.BR fstat (2),
.BR ctermid (3),
.BR isatty (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2002 Andries Brouwer <aeb@cwi.nl>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" This replaces an earlier man page written by Walter Harms
.\" <walter.harms@informatik.uni-oldenburg.de>.
.\"
.TH TTYSLOT 3 2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
ttyslot \- find the slot of the current user's terminal in some file
.SH SYNOPSIS
.BR "#include <unistd.h>"       "    /* on BSD-like systems, and Linux */"
.br
.BR "#include <stdlib.h>"       "    /* on System V-like systems */"
.sp
.B "int ttyslot(void);"
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR ttyslot ():
.RS 4
_BSD_SOURCE ||
.br
_XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_\ <\ 500\ &&\ _XOPEN_SOURCE_EXTENDED
.RE
.ad b
.SH DESCRIPTION
The legacy function
.BR ttyslot ()
returns the index of the current user's entry in some file.
.LP
Now "What file?" you ask.
Well, let's first look at some history.
.SS Ancient history
There used to be a file
.I /etc/ttys
in UNIX\ V6, that was read by the
.BR init (1)
program to find out what to do with each terminal line.
Each line consisted of three characters.
The first character was either \(aq0\(aq or \(aq1\(aq,
where \(aq0\(aq meant "ignore".
The second character denoted the terminal: \(aq8\(aq stood for "/dev/tty8".
The third character was an argument to
.BR getty (8)
indicating the sequence of line speeds to try (\(aq\-\(aq was: start trying
110 baud).
Thus a typical line was "18\-".
A hang on some line was solved by changing the \(aq1\(aq to a \(aq0\(aq,
signaling init, changing back again, and signaling init again.
.LP
In UNIX\ V7 the format was changed: here the second character
was the argument to
.BR getty (8)
indicating the sequence of line speeds to try (\(aq0\(aq was: cycle through
300-1200-150-110 baud; \(aq4\(aq was for the on-line console DECwriter)
while the rest of the line contained the name of the tty.
Thus a typical line was "14console".
.LP
Later systems have more elaborate syntax.
System V-like systems have
.I /etc/inittab
instead.
.SS Ancient history (2)
On the other hand, there is the file
.I /etc/utmp
listing the people currently logged in.
It is maintained by
.BR login (1).
It has a fixed size, and the appropriate index in the file was
determined by
.BR login (1)
using the
.BR ttyslot ()
call to find the number of the line in
.I /etc/ttys
(counting from 1).
.SS The semantics of ttyslot
Thus, the function
.BR ttyslot ()
returns the index of the controlling terminal of the calling process
in the file
.IR /etc/ttys ,
and that is (usually) the same as the index of the entry for the
current user in the file
.IR /etc/utmp .
BSD still has the
.I /etc/ttys
file, but System V-like systems do not, and hence cannot refer to it.
Thus, on such systems the documentation says that
.BR ttyslot ()
returns the current user's index in the user accounting data base.
.SH RETURN VALUE
If successful, this function returns the slot number.
On error (e.g., if none of the file descriptors 0, 1 or 2 is
associated with a terminal that occurs in this data base)
it returns 0 on UNIX\ V6 and V7 and BSD-like systems,
but \-1 on System V-like systems.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR ttyslot ()
T}	Thread safety	MT-Unsafe
.TE
.SH CONFORMING TO
SUSv1; marked as LEGACY in SUSv2; removed in POSIX.1-2001.
SUSv2 requires \-1 on error.
.SH NOTES
The utmp file is found various places on various systems, such as
.IR /etc/utmp ,
.IR /var/adm/utmp ,
.IR /var/run/utmp .
.LP
The glibc2 implementation of this function reads the file
.BR _PATH_TTYS ,
defined in
.I <ttyent.h>
as "/etc/ttys".
It returns 0 on error.
Since Linux systems do not usually have "/etc/ttys", it will
always return 0.
.LP
Minix also has
.IR fttyslot ( fd ).
.\" .SH HISTORY
.\" .BR ttyslot ()
.\" appeared in UNIX V7.
.SH SEE ALSO
.BR getttyent (3),
.BR ttyname (3),
.BR utmp (5)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified Sun Jul 25 11:01:58 1993 by Rik Faith (faith@cs.unc.edu)
.\" Modified 2001-11-13, aeb
.\" Modified 2004-12-01 mtk and Martin Schulze <joey@infodrom.org>
.\"
.TH TZSET 3  2015-03-29 "" "Linux Programmer's Manual"
.SH NAME
tzset, tzname, timezone, daylight \- initialize time conversion information
.SH SYNOPSIS
.nf
.B #include <time.h>
.sp
.B void tzset (void);
.sp
.BI "extern char *" tzname [2];
.BI "extern long " timezone ;
.BI "extern int " daylight ;
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR tzset ():
_POSIX_C_SOURCE\ >=\ 1 || _XOPEN_SOURCE || _POSIX_SOURCE
.br
.IR tzname :
_POSIX_C_SOURCE\ >=\ 1 || _XOPEN_SOURCE || _POSIX_SOURCE
.br
.IR timezone :
_SVID_SOURCE || _XOPEN_SOURCE
.br
.IR daylight :
_SVID_SOURCE || _XOPEN_SOURCE
.SH DESCRIPTION
The
.BR tzset ()
function initializes the \fItzname\fP variable from the
.B TZ
environment variable.
This function is automatically called by the
other time conversion functions that depend on the timezone.
In a System-V-like environment, it will also set the variables \fItimezone\fP
(seconds West of UTC) and \fIdaylight\fP (to 0 if this timezone does not
have any daylight saving time rules, or to nonzero if there is a time during
the year when daylight saving time applies).
.PP
If the
.B TZ
variable does not appear in the environment, the system timezone is used.
The system timezone is configured by copying, or linking, a file in the
.BR tzfile "(5) format to"
.IR /etc/localtime .
A timezone database of these files may be located in the system
timezone directory (see the \fBFILES\fP section below).
.PP
If the
.B TZ
variable does appear in the environment, but its value is empty,
or its value cannot be interpreted using any of the formats specified
below, then Coordinated Universal Time (UTC) is used.
.PP
The value of
.B TZ
can be one of two formats.
The first format is a string of characters that directly represent the
timezone to be used:
.sp
.RS
.IR "std offset" [ dst [ offset ][, start [ /time ], end [ /time ]]]
.RE
.sp
There are no spaces in the specification.
The \fIstd\fP string specifies an abbreviation for the timezone and must be
three or more alphabetic characters.
When enclosed between the less-than (<) and greater-than (>) signs, the
characters set is expanded to include the plus (+) sign, the minus (-)
sign, and digits.
The \fIoffset\fP string immediately
follows \fIstd\fP and specifies the time value to be added to the local
time to get Coordinated Universal Time (UTC).
The \fIoffset\fP is positive
if the local timezone is west of the Prime Meridian and negative if it is
east.
The hour must be between 0 and 24, and the minutes and seconds 00 and 59:
.sp
.RS
.RI [ + | - ] hh [ :mm [ :ss ]]
.RE
.sp
.PP
The \fIdst\fP string and \fIoffset\fP specify the name and offset for the
corresponding daylight saving timezone.
If the offset is omitted,
it defaults to one hour ahead of standard time.
.PP
The \fIstart\fP field specifies when daylight saving time goes into
effect and the \fIend\fP field specifies when the change is made back to
standard time.
These fields may have the following formats:
.TP
J\fIn\fP
This specifies the Julian day with \fIn\fP between 1 and 365.
Leap days are not counted.
In this format, February 29 can't be represented;
February 28 is day 59, and March 1 is always day 60.
.TP
.I n
This specifies the zero-based Julian day with \fIn\fP between 0 and 365.
February 29 is counted in leap years.
.TP
M\fIm\fP.\fIw\fP.\fId\fP
This specifies day \fId\fP (0 <= \fId\fP <= 6) of week \fIw\fP
(1 <= \fIw\fP <= 5) of month \fIm\fP (1 <= \fIm\fP <= 12).
Week 1 is
the first week in which day \fId\fP occurs and week 5 is the last week
in which day \fId\fP occurs.
Day 0 is a Sunday.
.PP
The \fItime\fP fields specify when, in the local time currently in effect,
the change to the other time occurs.
If omitted, the default is 02:00:00.

Here is an example for New Zealand,
where the standard time (NZST) is 12 hours ahead of UTC,
and daylight saving time (NZDT), 13 hours ahead of UTC,
runs from the first Sunday in October to the third Sunday in March,
and the changeovers happen at the default time of 02:00:00:
.nf

    TZ="NZST-12:00:00NZDT-13:00:00,M10.1.0,M3.3.0"
.fi
.PP
The second format specifies that the timezone information should be read
from a file:
.sp
.RS
:[filespec]
.RE
.sp
If the file specification \fIfilespec\fP is omitted, or its value cannot
be interpreted, then Coordinated Universal Time (UTC) is used.
If \fIfilespec\fP is given, it specifies another
.BR tzfile (5)-format
file to read the timezone information from.
If \fIfilespec\fP does not begin with a \(aq/\(aq, the file specification is
relative to the system timezone directory.
If the colon is omitted each
of the above \fBTZ\fP formats will be tried.
.PP
Here's an example, once more for New Zealand:
.nf

    TZ=":Pacific/Auckland"
.fi
.SH ENVIRONMENT
.TP
.B TZ
If this variable is set its value takes precedence over the system
configured timezone.
.TP
.B TZDIR
If this variable is set its value takes precedence over the system
configured timezone database directory path.
.SH FILES
.TP
.I /etc/localtime
The system timezone file.
.TP
.I /usr/share/zoneinfo/
The system timezone database directory.
.TP
.I /usr/share/zoneinfo/posixrules
When a TZ string includes a dst timezone without anything following it,
then this file is used for the start/end rules.
It is in the
.BR tzfile "(5) format."
By default, the zoneinfo Makefile hard links it to the
.IR America/New_York " tzfile."
.PP
Above are the current standard file locations, but they are
configurable when glibc is compiled.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR tzset ()
T}	Thread safety	MT-Safe env locale
.TE
.SH CONFORMING TO
SVr4, POSIX.1-2001, 4.3BSD.
.SH NOTES
Note that the variable \fIdaylight\fP does not indicate that daylight
saving time applies right now.
It used to give the number of some
algorithm (see the variable \fItz_dsttime\fP in
.BR gettimeofday (2)).
It has been obsolete for many years but is required by SUSv2.
.LP
4.3BSD had a function
.BI "char *timezone(" zone ", " dst )
that returned the
name of the timezone corresponding to its first argument (minutes
West of UTC).
If the second argument was 0, the standard name was used,
otherwise the daylight saving time version.
.SH SEE ALSO
.BR date (1),
.BR gettimeofday (2),
.BR time (2),
.BR ctime (3),
.BR getenv (3),
.BR tzfile (5)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2003 Andries Brouwer (aeb@cwi.nl)
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.TH UALARM 3  2015-03-02 "" "Linux Programmer's Manual"
.SH NAME
ualarm \- schedule signal after given number of microseconds
.SH SYNOPSIS
.nf
.B "#include <unistd.h>"
.sp
.BI "useconds_t ualarm(useconds_t " usecs ", useconds_t " interval );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR ualarm ():
.ad l
.RS 4
.PD 0
.TP 4
Since glibc 2.12:
.nf
_BSD_SOURCE ||
    (_XOPEN_SOURCE\ >=\ 500 ||
        _XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED) &&
    !(_POSIX_C_SOURCE\ >=\ 200809L || _XOPEN_SOURCE\ >=\ 700)
.TP 4
.fi
Before glibc 2.12:
_BSD_SOURCE || _XOPEN_SOURCE\ >=\ 500 ||
_XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED
.PD
.RE
.ad b
.SH DESCRIPTION
The
.BR ualarm ()
function causes the signal
.B SIGALRM
to be sent to the invoking process after (not less than)
.I usecs
microseconds.
The delay may be lengthened slightly by any system activity
or by the time spent processing the call or by the
granularity of system timers.
.LP
Unless caught or ignored, the
.B SIGALRM
signal will terminate the process.
.LP
If the
.I interval
argument is nonzero, further
.B SIGALRM
signals will be sent every
.I interval
microseconds after the first.
.SH RETURN VALUE
This function returns the number of microseconds remaining for
any alarm that was previously set, or 0 if no alarm was pending.
.SH ERRORS
.TP
.B EINTR
Interrupted by a signal.
.TP
.B EINVAL
\fIusecs\fP or \fIinterval\fP is not smaller than 1000000.
(On systems where that is considered an error.)
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR ualarm ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
4.3BSD, POSIX.1-2001.
POSIX.1-2001 marks
.BR ualarm ()
as obsolete.
POSIX.1-2008 removes the specification of
.BR ualarm ().
4.3BSD, SUSv2, and POSIX do not define any errors.
.SH NOTES
POSIX.1-2001 does not specify what happens if the
.I usecs
argument is 0.
.\" This case is not documented in HP-US, Solar, FreeBSD, NetBSD, or OpenBSD!
On Linux (and probably most other systems),
the effect is to cancel any pending alarm.

The type
.I useconds_t
is an unsigned integer type capable of holding integers
in the range [0,1000000].
On the original BSD implementation, and in glibc before version 2.1,
the arguments to
.BR ualarm ()
were instead typed as
.IR "unsigned int" .
Programs will be more portable if they never mention
.I useconds_t
explicitly.
.LP
The interaction of this function with
other timer functions such as
.BR alarm (2),
.BR sleep (3),
.BR nanosleep (2),
.BR setitimer (2),
.BR timer_create (2),
.BR timer_delete (2),
.BR timer_getoverrun (2),
.BR timer_gettime (2),
.BR timer_settime (2),
.BR usleep (3)
is unspecified.
.LP
This function is obsolete.
Use
.BR setitimer (2)
or POSIX interval timers
.RB ( timer_create (2),
etc.)
instead.
.SH SEE ALSO
.BR alarm (2),
.BR getitimer (2),
.BR nanosleep (2),
.BR select (2),
.BR setitimer (2),
.BR usleep (3),
.BR time (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 1996 Andries Brouwer (aeb@cwi.nl)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Moved to man3, aeb, 980612
.\"
.TH ULIMIT 3 2015-03-29 "Linux" "Linux Programmer's Manual"
.SH NAME
ulimit \- get and set user limits
.SH SYNOPSIS
.B #include <ulimit.h>
.sp
.BI "long ulimit(int " cmd ", long " newlimit );
.SH DESCRIPTION
Warning: This routine is obsolete.
Use
.BR getrlimit (2),
.BR setrlimit (2),
and
.BR sysconf (3)
instead.
For the shell command
.BR ulimit (),
see
.BR bash (1).

The
.BR ulimit ()
call will get or set some limit for the calling process.
The
.I cmd
argument can have one of the following values.
.TP
.B UL_GETFSIZE
Return the limit on the size of a file, in units of 512 bytes.
.TP
.B UL_SETFSIZE
Set the limit on the size of a file.
.TP
.B 3
(Not implemented for Linux.)
Return the maximum possible address of the data segment.
.TP
.B 4
(Implemented but no symbolic constant provided.)
Return the maximum number of files that the calling process can open.
.SH RETURN VALUE
On success,
.BR ulimit ()
returns a nonnegative value.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EPERM
A unprivileged process tried to increase a limit.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR ulimit ()
T}	Thread safety	MT-Safe
.TE

.SH CONFORMING TO
SVr4, POSIX.1-2001.
POSIX.1-2008 marks
.BR ulimit ()
as obsolete.
.SH SEE ALSO
.BR bash (1),
.BR getrlimit (2),
.BR setrlimit (2),
.BR sysconf (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1995 Jim Van Zandt
.\" From jrv@vanzandt.mv.com Mon Sep  4 21:11:50 1995
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" 1996-11-08, meem@sherilyn.wustl.edu, corrections
.\" 2004-10-31, aeb, changed maintainer address, updated list
.\" 2015-04-20, william@tuffbizz.com, updated list
.\"
.TH UNDOCUMENTED 3 2015-05-07 "Linux" "Linux Programmer's Manual"
.SH NAME
none \- undocumented library functions
.SH SYNOPSIS
Undocumented library functions
.SH DESCRIPTION
This man page mentions those library functions which are implemented in
the standard libraries but not yet documented in man pages.
.SS Solicitation
If you have information about these functions,
please look in the source code, write a man page (using a style
similar to that of the other Linux section 3 man pages), and send it to
.B mtk.manpages@gmail.com
for inclusion in the next man page release.
.SS The list

.BR authdes_create (3),
.BR authdes_getucred (3),
.BR authdes_pk_create (3),
.\" .BR chflags (3),
.BR clntunix_create (3),
.BR creat64 (3),
.BR dn_skipname (3),
.\" .BR fattach (3),
.\" .BR fchflags (3),
.\" .BR fclean (3),
.BR fcrypt (3),
.\" .BR fdetach (3),
.BR fp_nquery (3),
.BR fp_query (3),
.BR fp_resstat (3),
.BR freading (3),
.BR freopen64 (3),
.BR fseeko64 (3),
.BR ftello64 (3),
.BR ftw64 (3),
.BR fwscanf (3),
.BR get_avphys_pages (3),
.BR getdirentries64 (3),
.BR getmsg (3),
.BR getnetname (3),
.BR get_phys_pages (3),
.BR getpublickey (3),
.BR getsecretkey (3),
.BR h_errlist (3),
.BR host2netname (3),
.BR hostalias (3),
.BR inet_nsap_addr (3),
.BR inet_nsap_ntoa (3),
.BR init_des (3),
.BR libc_nls_init (3),
.BR mstats (3),
.BR netname2host (3),
.BR netname2user (3),
.BR nlist (3),
.BR obstack_free (3),
.\" .BR obstack stuff (3),
.BR parse_printf_format (3),
.BR p_cdname (3),
.BR p_cdnname (3),
.BR p_class (3),
.BR p_fqname (3),
.BR p_option (3),
.BR p_query (3),
.BR printf_size (3),
.BR printf_size_info (3),
.BR p_rr (3),
.BR p_time (3),
.BR p_type (3),
.BR putlong (3),
.BR putshort (3),
.BR re_compile_fastmap (3),
.BR re_compile_pattern (3),
.BR register_printf_function (3),
.BR re_match (3),
.BR re_match_2 (3),
.BR re_rx_search (3),
.BR re_search (3),
.BR re_search_2 (3),
.BR re_set_registers (3),
.BR re_set_syntax (3),
.BR res_send_setqhook (3),
.BR res_send_setrhook (3),
.BR ruserpass (3),
.BR setfileno (3),
.BR sethostfile (3),
.BR svc_exit (3),
.BR svcudp_enablecache (3),
.BR tell (3),
.BR tr_break (3),
.BR tzsetwall (3),
.BR ufc_dofinalperm (3),
.BR ufc_doit (3),
.BR user2netname (3),
.BR wcschrnul (3),
.BR wcsftime (3),
.BR wscanf (3),
.BR xdr_authdes_cred (3),
.BR xdr_authdes_verf (3),
.BR xdr_cryptkeyarg (3),
.BR xdr_cryptkeyres (3),
.BR xdr_datum (3),
.BR xdr_des_block (3),
.BR xdr_domainname (3),
.BR xdr_getcredres (3),
.BR xdr_keybuf (3),
.BR xdr_keystatus (3),
.BR xdr_mapname (3),
.BR xdr_netnamestr (3),
.BR xdr_netobj (3),
.BR xdr_passwd (3),
.BR xdr_peername (3),
.BR xdr_rmtcall_args (3),
.BR xdr_rmtcallres (3),
.BR xdr_unixcred (3),
.BR xdr_yp_buf (3),
.BR xdr_yp_inaddr (3),
.BR xdr_ypbind_binding (3),
.BR xdr_ypbind_resp (3),
.BR xdr_ypbind_resptype (3),
.BR xdr_ypbind_setdom (3),
.BR xdr_ypdelete_args (3),
.BR xdr_ypmaplist (3),
.BR xdr_ypmaplist_str (3),
.BR xdr_yppasswd (3),
.BR xdr_ypreq_key (3),
.BR xdr_ypreq_nokey (3),
.BR xdr_ypresp_all (3),
.BR xdr_ypresp_all_seq (3),
.BR xdr_ypresp_key_val (3),
.BR xdr_ypresp_maplist (3),
.BR xdr_ypresp_master (3),
.BR xdr_ypresp_order (3),
.BR xdr_ypresp_val (3),
.BR xdr_ypstat (3),
.BR xdr_ypupdate_args (3),
.BR yp_all (3),
.BR yp_bind (3),
.BR yperr_string (3),
.BR yp_first (3),
.BR yp_get_default_domain (3),
.BR yp_maplist (3),
.BR yp_master (3),
.BR yp_match (3),
.BR yp_next (3),
.BR yp_order (3),
.BR ypprot_err (3),
.BR yp_unbind (3),
.BR yp_update (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) Bruno Haible <haible@clisp.cons.org>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_ONEPARA)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"   GNU glibc-2 source code and manual
.\"   Dinkumware C library reference http://www.dinkumware.com/
.\"   OpenGroup's Single UNIX specification http://www.UNIX-systems.org/online.html
.\"   ISO/IEC 9899:1999
.\"
.TH UNGETWC 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
ungetwc \- push back a wide character onto a FILE stream
.SH SYNOPSIS
.nf
.B #include <wchar.h>
.sp
.BI "wint_t ungetwc(wint_t " wc ", FILE *" stream );
.fi
.SH DESCRIPTION
The
.BR ungetwc ()
function is the wide-character equivalent of the
.BR ungetc (3)
function.
It pushes back a wide character onto
.I stream
and returns it.
.PP
If
.I wc
is
.BR WEOF ,
it returns
.BR WEOF .
If
.I wc
is an invalid wide character,
it sets
.IR errno
to
.B EILSEQ
and returns
.BR WEOF .
.PP
If
.I wc
is a valid wide character, it is pushed back onto the stream
and thus becomes available for future wide-character read operations.
The file-position indicator is decremented by one or more.
The end-of-file
indicator is cleared.
The backing storage of the file is not affected.
.PP
Note:
.I wc
need not be the last wide-character read from the stream;
it can be any other valid wide character.
.PP
If the implementation supports multiple push-back operations in a row, the
pushed-back wide characters will be read in reverse order; however, only one
level of push-back is guaranteed.
.SH RETURN VALUE
The
.BR ungetwc ()
function returns
.IR wc
when successful, or
.B WEOF
upon
failure.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR ungetwc ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C99.
.SH NOTES
The behavior of
.BR ungetwc ()
depends on the
.B LC_CTYPE
category of the
current locale.
.SH SEE ALSO
.BR fgetwc (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2001 Andries Brouwer <aeb@cwi.nl>.
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH UNLOCKED_STDIO 3  2015-04-19 "" "Linux Programmer's Manual"
.SH NAME
getc_unlocked, getchar_unlocked, putc_unlocked,
putchar_unlocked \- nonlocking stdio functions
.SH SYNOPSIS
.nf
.B #include <stdio.h>
.sp
.BI "int getc_unlocked(FILE *" stream );
.B "int getchar_unlocked(void);"
.BI "int putc_unlocked(int " c ", FILE *" stream );
.BI "int putchar_unlocked(int " c );
.sp
.BI "void clearerr_unlocked(FILE *" stream );
.BI "int feof_unlocked(FILE *" stream );
.BI "int ferror_unlocked(FILE *" stream );
.BI "int fileno_unlocked(FILE *" stream );
.BI "int fflush_unlocked(FILE *" stream );
.BI "int fgetc_unlocked(FILE *" stream );
.BI "int fputc_unlocked(int " c ", FILE *" stream );
.BI "size_t fread_unlocked(void *" ptr ", size_t " size ", size_t " n ,
.BI "                      FILE *" stream );
.BI "size_t fwrite_unlocked(const void *" ptr ", size_t " size ", size_t " n ,
.BI "                      FILE *" stream );
.sp
.BI "char *fgets_unlocked(char *" s ", int " n ", FILE *" stream );
.BI "int fputs_unlocked(const char *" s ", FILE *" stream );
.sp
.B #include <wchar.h>
.sp
.BI "wint_t getwc_unlocked(FILE *" stream );
.B "wint_t getwchar_unlocked(void);"
.BI "wint_t fgetwc_unlocked(FILE *" stream );
.BI "wint_t fputwc_unlocked(wchar_t " wc ", FILE *" stream );
.BI "wint_t putwc_unlocked(wchar_t " wc ", FILE *" stream );
.BI "wint_t putwchar_unlocked(wchar_t " wc );
.BI "wchar_t *fgetws_unlocked(wchar_t *" ws ", int " n ", FILE *" stream );
.BI "int fputws_unlocked(const wchar_t *" ws ", FILE *" stream );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.ad l
.in
.sp
.BR getc_unlocked (),
.BR getchar_unlocked (),
.BR putc_unlocked (),
.BR putchar_unlocked ():
.RS 4
_POSIX_C_SOURCE\ >=\ 1 || _XOPEN_SOURCE || _POSIX_SOURCE ||
_BSD_SOURCE || _SVID_SOURCE
.RE
.sp
.BR clearerr_unlocked (),
.BR feof_unlocked (),
.BR ferror_unlocked (),
.BR fileno_unlocked (),
.BR fflush_unlocked (),
.BR fgetc_unlocked (),
.BR fputc_unlocked (),
.BR fread_unlocked (),
.BR fwrite_unlocked ():
.RS 4
_BSD_SOURCE || _SVID_SOURCE
.RE
.sp
.BR fgets_unlocked (),
.BR fputs_unlocked (),
.BR getwc_unlocked (),
.BR getwchar_unlocked (),
.BR fgetwc_unlocked (),
.BR fputwc_unlocked (),
.BR putwchar_unlocked (),
.BR fgetws_unlocked (),
.BR fputws_unlocked ():
.RS 4
_GNU_SOURCE
.RE
.ad b
.SH DESCRIPTION
Each of these functions has the same behavior as its counterpart
without the "_unlocked" suffix, except that they do not use locking
(they do not set locks themselves, and do not test for the presence
of locks set by others) and hence are thread-unsafe.
See
.BR flockfile (3).
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw20 lb lb
l l l.
Interface	Attribute	Value
T{
.BR getc_unlocked (),
.BR putc_unlocked (),
.BR clearerr_unlocked (),
.BR fflush_unlocked (),
.BR fgetc_unlocked (),
.BR fputc_unlocked (),
.BR fread_unlocked (),
.BR fwrite_unlocked (),
.BR fgets_unlocked (),
.BR fputs_unlocked (),
.BR getwc_unlocked (),
.BR fgetwc_unlocked (),
.BR fputwc_unlocked (),
.BR putwc_unlocked (),
.BR fgetws_unlocked (),
.BR fputws_unlocked ()
T}	Thread safety	MT-Safe race:stream
T{
.BR getchar_unlocked (),
.BR getwchar_unlocked ()
T}	Thread safety	MT-Unsafe race:stdin
T{
.BR putchar_unlocked (),
.BR putwchar_unlocked ()
T}	Thread safety	MT-Unsafe race:stdout
T{
.BR feof_unlocked (),
.BR ferror_unlocked (),
.BR fileno_unlocked ()
T}	Thread safety	MT-Safe
.TE

.SH CONFORMING TO
The four functions
.BR getc_unlocked (),
.BR getchar_unlocked (),
.BR putc_unlocked (),
.BR putchar_unlocked ()
are in POSIX.1-2001.

The nonstandard
.BR *_unlocked ()
variants occur on a few UNIX systems, and are available in recent glibc.
.\" E.g., in HP-UX 10.0. In HP-UX 10.30 they are called obsolescent, and
.\" moved to a compatibility library.
.\" Available in HP-UX 10.0: clearerr_unlocked, fclose_unlocked,
.\" feof_unlocked, ferror_unlocked, fflush_unlocked, fgets_unlocked,
.\" fgetwc_unlocked, fgetws_unlocked, fileno_unlocked, fputs_unlocked,
.\" fputwc_unlocked, fputws_unlocked, fread_unlocked, fseek_unlocked,
.\" ftell_unlocked, fwrite_unlocked, getc_unlocked, getchar_unlocked,
.\" getw_unlocked, getwc_unlocked, getwchar_unlocked, putc_unlocked,
.\" putchar_unlocked, puts_unlocked, putws_unlocked, putw_unlocked,
.\" putwc_unlocked, putwchar_unlocked, rewind_unlocked, setvbuf_unlocked,
.\" ungetc_unlocked, ungetwc_unlocked.
They should probably not be used.
.SH SEE ALSO
.BR flockfile (3),
.BR stdio (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" %%%LICENSE_START(PUBLIC_DOMAIN)
.\" This page is in the public domain. - aeb
.\" %%%LICENSE_END
.\"
.TH UNLOCKPT 3 2015-03-02 "" "Linux Programmer's Manual"
.SH NAME
unlockpt \- unlock a pseudoterminal master/slave pair
.SH SYNOPSIS
.nf
.BR "#define _XOPEN_SOURCE" "       /* See feature_test_macros(7) */"
.br
.B #include <stdlib.h>
.sp
.BI "int unlockpt(int " fd ");"
.fi
.SH DESCRIPTION
The
.BR unlockpt ()
function unlocks the slave pseudoterminal device
corresponding to the master pseudoterminal referred to by
.IR fd .
.PP
.BR unlockpt ()
should be called before opening the slave side of a pseudoterminal.
.SH RETURN VALUE
When successful,
.BR unlockpt ()
returns 0.
Otherwise, it returns \-1 and sets
.I errno
appropriately.
.SH ERRORS
.TP
.B EBADF
The
.I fd
argument is not a file descriptor open for writing.
.TP
.B EINVAL
The
.I fd
argument is not associated with a master pseudoterminal.
.SH VERSIONS
.BR unlockpt ()
is provided in glibc since version 2.1.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR unlockpt ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
POSIX.1-2001.
.SH SEE ALSO
.BR grantpt (3),
.BR posix_openpt (3),
.BR ptsname (3),
.BR pts (4),
.BR pty (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1997 Nicolás Lichtmaier <nick@debian.org>
.\" Created Wed Jul  2 23:27:34 ART 1997
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.\" Added info on availability, aeb, 971207
.\" Added -lutil remark, 030718
.\" 2008-07-02, mtk, document updwtmpx()
.\"
.TH UPDWTMP 3  2015-04-19 "GNU" "Linux Programmer's Manual"
.SH NAME
updwtmp, logwtmp \- append an entry to the wtmp file
.SH SYNOPSIS
.nf
.B #include <utmp.h>
.sp
.BI "void updwtmp(const char *" wtmp_file ", const struct utmp *" ut );
.br
.BI "void logwtmp(const char *" line ", const char *" name \
", const char *" host );
.fi

For
.BR logwtmp (),
link with \fI\-lutil\fP.
.SH DESCRIPTION
.BR updwtmp ()
appends the utmp structure
.I ut
to the wtmp file.
.PP
.BR logwtmp ()
constructs a utmp structure using
.IR line ", " name ", " host ,
current time and current process ID.
Then it calls
.BR updwtmp ()
to append the structure to the wtmp file.
.SH FILES
.TP
.I /var/log/wtmp
database of past user logins
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lbw24
l l l.
Interface	Attribute	Value
T{
.BR updwtmp (),
.br
.BR logwtmp ()
T}	Thread safety	MT-Unsafe sig:ALRM timer
.TE

.SH CONFORMING TO
Not in POSIX.1-2001.
Present on Solaris, NetBSD, and perhaps other systems.
.SH NOTES
For consistency with the other "utmpx" functions (see
.BR getutxent (3)),
glibc provides (since version 2.1):
.nf
.sp
.B #include <utmpx.h>
.sp
.BI "void updwtmpx (const char *" wtmpx_file ", const struct utmpx *" utx );
.fi
.PP
This function performs the same task as
.BR updwtmp (),
but differs in that it takes a
.I utmpx
structure as its last argument.
.SH SEE ALSO
.BR getutxent (3),
.BR wtmp (5)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
'\" t
.\" Copyright (C) 2014 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH USELOCALE 3 2014-03-10 "Linux" "Linux Programmer's Manual"
.SH NAME
uselocale \- set/get the locale for the calling thread
.SH SYNOPSIS
.nf
.B #include <locale.h>

.BI "locale_t uselocale(locale_t " newloc );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR uselocale ():
.PD 0
.RS 4
.TP
Since glibc 2.10:
_XOPEN_SOURCE\ >=\ 700
.TP
Before glibc 2.10:
_GNU_SOURCE
.RE
.PD
.SH DESCRIPTION
The
.BR uselocale ()
function sets the current locale for the calling thread,
and returns the thread's previously current locale.
After a successful call to
.BR uselocale (),
any calls by this thread to functions that depend on the locale
will operate as though the locale has been set to
.IR newloc .

The
.I newloc
argument can have one of the following values:
.TP
A handle returned by a call to \fBnewlocale\fP(3) or \fBduplocale\fP(3)
The calling thread's current locale is set to the specified locale.
.TP
The special locale object handle \fBLC_GLOBAL_LOCALE\fP
The calling thread's current locale is set to the global locale determined by
.BR setlocale (3).
.TP
.I "(locale_t) 0"
The calling thread's current locale is left unchanged
(and the current locale is returned as the function result).
.SH RETURN VALUE
On success,
.BR uselocale ()
returns the locale handle that was set by the previous call to
.BR uselocale ()
in this thread, or
.BR LC_GLOBAL_HANDLE
if there was no such previous call.
On error, it returns
.IR "(locale_t)\ 0",
and sets
.I errno
to indicate the cause of the error.
.SH ERRORS
.TP
.B EINVAL
.I newloc
does not refer to a valid locale object.
.SH VERSIONS
The
.BR uselocale ()
function first appeared in version 2.3 of the GNU C library.
.SH CONFORMING TO
POSIX.1-2008.
.SH NOTES
Unlike
.BR setlocale (3),
.BR uselocale ()
does not allow selective replacement of individual locale categories.
To employ a locale that differs in only a few categories from the current
locale, use calls to
.BR duplocale (3)
and
.BR newlocale (3)
to obtain a locale object equivalent to the current locale and
modify the desired categories in that object.
.SH EXAMPLE
See
.BR newlocale (3)
and
.BR duplocale (3).
.SH SEE ALSO
.BR locale (1),
.BR duplocale (3),
.BR freelocale (3),
.BR newlocale (3),
.BR setlocale (3),
.BR locale (5),
.BR locale (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified 1993-07-24 by Rik Faith (faith@cs.unc.edu)
.\" Modified 2001-04-01 by aeb
.\" Modified 2003-07-23 by aeb
.\"
.TH USLEEP 3  2015-03-02 "" "Linux Programmer's Manual"
.SH NAME
usleep \- suspend execution for microsecond intervals
.SH SYNOPSIS
.nf
.B "#include <unistd.h>"
.sp
.BI "int usleep(useconds_t " usec );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR usleep ():
.ad l
.RS 4
.PD 0
.TP 4
Since glibc 2.12:
.nf
_BSD_SOURCE ||
    (_XOPEN_SOURCE\ >=\ 500 ||
        _XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED) &&
    !(_POSIX_C_SOURCE\ >=\ 200809L || _XOPEN_SOURCE\ >=\ 700)
.TP 4
.fi
Before glibc 2.12:
_BSD_SOURCE || _XOPEN_SOURCE\ >=\ 500 ||
_XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED
.PD
.RE
.ad b
.SH DESCRIPTION
The
.BR usleep ()
function suspends execution of the calling thread for
(at least) \fIusec\fP microseconds.
The sleep may be lengthened slightly
by any system activity or by the time spent processing the call or by the
granularity of system timers.
.SH RETURN VALUE
The
.BR usleep ()
function returns 0 on success.
On error, \-1 is returned, with
.I errno
set to indicate the cause of the error.
.SH ERRORS
.TP
.B EINTR
Interrupted by a signal; see
.BR signal (7).
.TP
.B EINVAL
\fIusec\fP is not smaller than 1000000.
(On systems where that is considered an error.)
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR usleep ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
4.3BSD, POSIX.1-2001.
POSIX.1-2001 declares this function obsolete; use
.BR nanosleep (2)
instead.
POSIX.1-2008 removes the specification of
.BR usleep ().

On the original BSD implementation,
and in glibc before version 2.2.2, the return type of this function is
.IR void .
The POSIX version returns
.IR int ,
and this is also the prototype used since glibc 2.2.2.

Only the
.B EINVAL
error return is documented by SUSv2 and POSIX.1-2001.
.SH NOTES
The type
.I useconds_t
is an unsigned integer type capable of holding integers
in the range [0,1000000].
Programs will be more portable
if they never mention this type explicitly.
Use
.in +4n
.nf
.sp
#include <unistd.h>
\&...
    unsigned int usecs;
\&...
    usleep(usecs);
.fi
.in
.LP
The interaction of this function with the
.B SIGALRM
signal, and with other timer functions such as
.BR alarm (2),
.BR sleep (3),
.BR nanosleep (2),
.BR setitimer (2),
.BR timer_create (2),
.BR timer_delete (2),
.BR timer_getoverrun (2),
.BR timer_gettime (2),
.BR timer_settime (2),
.BR ualarm (3)
is unspecified.
.SH SEE ALSO
.BR alarm (2),
.BR getitimer (2),
.BR nanosleep (2),
.BR select (2),
.BR setitimer (2),
.BR sleep (3),
.BR ualarm (3),
.BR time (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) Bruno Haible <haible@clisp.cons.org>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_ONEPARA)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"   GNU glibc-2 source code and manual
.\"   Dinkumware C library reference http://www.dinkumware.com/
.\"   OpenGroup's Single UNIX specification http://www.UNIX-systems.org/online.html
.\"
.TH WCPCPY 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
wcpcpy \- copy a wide-character string, returning a pointer to its end
.SH SYNOPSIS
.nf
.B #include <wchar.h>
.sp
.BI "wchar_t *wcpcpy(wchar_t *" dest ", const wchar_t *" src );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR wcpcpy ():
.PD 0
.ad l
.RS 4
.TP 4
Since glibc 2.10:
_XOPEN_SOURCE\ >=\ 700 || _POSIX_C_SOURCE\ >=\ 200809L
.TP
Before glibc 2.10:
_GNU_SOURCE
.RE
.ad
.PD
.SH DESCRIPTION
The
.BR wcpcpy ()
function is the wide-character equivalent of the
.BR stpcpy (3)
function.
It copies the wide-character string pointed to by
.IR src ,
including the terminating null wide character (L\(aq\\0\(aq),
to the array pointed to by
.IR dest .
.PP
The strings may not overlap.
.PP
The programmer must ensure that there
is room for at least
.IR wcslen(src)+1
wide characters at
.IR dest .
.SH RETURN VALUE
.BR wcpcpy ()
returns a pointer to the end of the wide-character string
.IR dest ,
that is, a pointer to the terminating null wide character.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR wcpcpy ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
POSIX.1-2008.
.SH SEE ALSO
.BR strcpy (3),
.BR wcscpy (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) Bruno Haible <haible@clisp.cons.org>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_ONEPARA)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"   GNU glibc-2 source code and manual
.\"   Dinkumware C library reference http://www.dinkumware.com/
.\"   OpenGroup's Single UNIX specification http://www.UNIX-systems.org/online.html
.\"
.TH WCPNCPY 3 2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
wcpncpy \- copy a fixed-size string of wide characters,
returning a pointer to its end
.SH SYNOPSIS
.nf
.B #include <wchar.h>
.sp
.BI "wchar_t *wcpncpy(wchar_t *" dest ", const wchar_t *" src ", size_t " n );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR wcpncpy ():
.PD 0
.ad l
.RS 4
.TP 4
Since glibc 2.10:
_XOPEN_SOURCE\ >=\ 700 || _POSIX_C_SOURCE\ >=\ 200809L
.TP
Before glibc 2.10:
_GNU_SOURCE
.RE
.ad
.PD
.SH DESCRIPTION
The
.BR wcpncpy ()
function is the wide-character equivalent
of the
.BR stpncpy (3)
function.
It copies at most
.I n
wide characters from the wide-character
string pointed to by
.IR src ,
including the terminating null wide (L\(aq\\0\(aq),
to the array pointed to by
.IR dest .
Exactly
.I n
wide characters are
written at
.IR dest .
If the length
.IR wcslen(src)
is smaller than
.IR n ,
the remaining wide characters in the array pointed to
by
.I dest
are filled with L\(aq\\0\(aq characters.
If the length
.IR wcslen(src)
is greater than or equal
to
.IR n ,
the string pointed to by
.I dest
will
not be L\(aq\\0\(aq terminated.
.PP
The strings may not overlap.
.PP
The programmer must ensure that there is room for at least
.I n
wide
characters at
.IR dest .
.SH RETURN VALUE
.BR wcpncpy ()
returns a pointer to the last wide character written, that is,
.IR dest + n \-1.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR wcpncpy ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
POSIX.1-2008.
.SH SEE ALSO
.BR stpncpy (3),
.BR wcsncpy (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) Bruno Haible <haible@clisp.cons.org>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_ONEPARA)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"   GNU glibc-2 source code and manual
.\"   Dinkumware C library reference http://www.dinkumware.com/
.\"   OpenGroup's Single UNIX specification http://www.UNIX-systems.org/online.html
.\"   ISO/IEC 9899:1999
.\"
.TH WCRTOMB 3  2015-04-19 "GNU" "Linux Programmer's Manual"
.SH NAME
wcrtomb \- convert a wide character to a multibyte sequence
.SH SYNOPSIS
.nf
.B #include <wchar.h>
.sp
.BI "size_t wcrtomb(char *" s ", wchar_t " wc ", mbstate_t *" ps );
.fi
.SH DESCRIPTION
The main case for this function is when
.I s
is
not NULL and
.I wc
is not a null wide character (L\(aq\\0\(aq).
In this case, the
.BR wcrtomb ()
function
converts the wide character
.I wc
to its multibyte representation and stores it
at the beginning of the character
array pointed to by
.IR s .
It updates the shift state
.IR *ps ,
and
returns the length of said multibyte representation,
that is, the number of bytes
written at
.IR s .
.PP
A different case is when
.I s
is not NULL,
but
.I wc
is a null wide character (L\(aq\\0\(aq).
In this case, the
.BR wcrtomb ()
function stores at
the character array pointed to by
.I s
the shift sequence needed to
bring
.I *ps
back to the initial state,
followed by a \(aq\\0\(aq byte.
It updates the shift state
.I *ps
(i.e., brings
it into the initial state),
and returns the length of the shift sequence plus
one, that is, the number of bytes written at
.IR s .
.PP
A third case is when
.I s
is NULL.
In this case,
.I wc
is ignored,
and the function effectively returns

    wcrtomb(buf, L\(aq\\0\(aq, ps)

where
.I buf
is an internal anonymous buffer.
.PP
In all of the above cases, if
.I ps
is NULL, a static anonymous
state known only to the
.BR wcrtomb ()
function is used instead.
.SH RETURN VALUE
The
.BR wcrtomb ()
function returns the number of
bytes that have been or would
have been written to the byte array at
.IR s .
If
.I wc
can not be
represented as a multibyte sequence (according to the current locale),
.I (size_t)\ \-1
is returned, and
.I errno
set to
.BR EILSEQ .
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lbw26
l l l.
Interface	Attribute	Value
T{
.BR wcrtomb ()
T}	Thread safety	MT-Unsafe race:wcrtomb/!ps
.TE

.SH CONFORMING TO
C99.
.SH NOTES
The behavior of
.BR wcrtomb ()
depends on the
.B LC_CTYPE
category of the
current locale.
.PP
Passing NULL as
.I ps
is not multithread safe.
.SH SEE ALSO
.BR mbsinit (3),
.BR wcsrtombs (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) Bruno Haible <haible@clisp.cons.org>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_ONEPARA)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"   GNU glibc-2 source code and manual
.\"   Dinkumware C library reference http://www.dinkumware.com/
.\"   OpenGroup's Single UNIX specification http://www.UNIX-systems.org/online.html
.\"
.TH WCSCASECMP 3 2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
wcscasecmp \- compare two wide-character strings, ignoring case
.SH SYNOPSIS
.nf
.B #include <wchar.h>
.sp
.BI "int wcscasecmp(const wchar_t *" s1 ", const wchar_t *" s2 );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR wcscasecmp ():
.PD 0
.ad l
.RS 4
.TP 4
Since glibc 2.10:
_XOPEN_SOURCE\ >=\ 700 || _POSIX_C_SOURCE\ >=\ 200809L
.TP
Before glibc 2.10:
_GNU_SOURCE
.RE
.ad
.PD
.SH DESCRIPTION
The
.BR wcscasecmp ()
function is the wide-character equivalent of the
.BR strcasecmp (3)
function.
It compares the wide-character string pointed to
by
.I s1
and the wide-character string pointed to by
.IR s2 ,
ignoring
case differences
.RB ( towupper (3),
.BR towlower (3)).
.SH RETURN VALUE
The
.BR wcscasecmp ()
function returns zero if the wide-character strings at
.I s1
and
.I s2
are equal except for case distinctions.
It returns a
positive integer if
.I s1
is greater than
.IR s2 ,
ignoring case.
It
returns a negative integer if
.I s1
is smaller
than
.IR s2 ,
ignoring case.
.SH VERSIONS
The
.BR wcscasecmp ()
function is provided in glibc since version 2.1.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR wcscasecmp ()
T}	Thread safety	MT-Safe locale
.TE
.SH CONFORMING TO
POSIX.1-2008.
This function is not specified in POSIX.1-2001,
and is not widely available on other systems.
.SH NOTES
The behavior of
.BR wcscasecmp ()
depends on the
.B LC_CTYPE
category of the
current locale.
.SH SEE ALSO
.BR strcasecmp (3),
.BR wcscmp (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) Bruno Haible <haible@clisp.cons.org>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_ONEPARA)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"   GNU glibc-2 source code and manual
.\"   Dinkumware C library reference http://www.dinkumware.com/
.\"   OpenGroup's Single UNIX specification http://www.UNIX-systems.org/online.html
.\"   ISO/IEC 9899:1999
.\"
.TH WCSCAT 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
wcscat \- concatenate two wide-character strings
.SH SYNOPSIS
.nf
.B #include <wchar.h>
.sp
.BI "wchar_t *wcscat(wchar_t *" dest ", const wchar_t *" src );
.fi
.SH DESCRIPTION
The
.BR wcscat ()
function is the wide-character equivalent
of the
.BR strcat (3)
function.
It copies the wide-character string pointed to by
.IR src ,
including the terminating null wide character (L\(aq\\0\(aq),
to the end of the wide-character string pointed to by
.IR dest .
.PP
The strings may not overlap.
.PP
The programmer must ensure that there is room for at least
.IR wcslen(dest) + wcslen(src) +1
wide characters at
.IR dest .
.SH RETURN VALUE
.BR wcscat ()
returns
.IR dest .
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR wcscat ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C99.
.SH SEE ALSO
.BR strcat (3),
.BR wcpcpy (3),
.BR wcscpy (3),
.BR wcsncat (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) Bruno Haible <haible@clisp.cons.org>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_ONEPARA)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"   GNU glibc-2 source code and manual
.\"   Dinkumware C library reference http://www.dinkumware.com/
.\"   OpenGroup's Single UNIX specification http://www.UNIX-systems.org/online.html
.\"   ISO/IEC 9899:1999
.\"
.TH WCSCHR 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
wcschr \- search a wide character in a wide-character string
.SH SYNOPSIS
.nf
.B #include <wchar.h>
.sp
.BI "wchar_t *wcschr(const wchar_t *" wcs ", wchar_t " wc );
.fi
.SH DESCRIPTION
The
.BR wcschr ()
function is the wide-character equivalent
of the
.BR strchr (3)
function.
It searches the first occurrence of
.I wc
in the wide-character
string pointed to by
.IR wcs .
.SH RETURN VALUE
The
.BR wcschr ()
function returns a pointer to the first occurrence of
.I wc
in the wide-character string pointed to by
.IR wcs ,
or NULL if
.I wc
does not occur in the string.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR wcschr ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C99.
.SH SEE ALSO
.BR strchr (3),
.BR wcspbrk (3),
.BR wcsrchr (3),
.BR wcsstr (3),
.BR wmemchr (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) Bruno Haible <haible@clisp.cons.org>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_ONEPARA)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"   GNU glibc-2 source code and manual
.\"   Dinkumware C library reference http://www.dinkumware.com/
.\"   OpenGroup's Single UNIX specification http://www.UNIX-systems.org/online.html
.\"   ISO/IEC 9899:1999
.\"
.TH WCSCMP 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
wcscmp \- compare two wide-character strings
.SH SYNOPSIS
.nf
.B #include <wchar.h>
.sp
.BI "int wcscmp(const wchar_t *" s1 ", const wchar_t *" s2 );
.fi
.SH DESCRIPTION
The
.BR wcscmp ()
function is the wide-character equivalent
of the
.BR strcmp (3)
function.
It compares the wide-character string pointed to by
.I s1
and the
wide-character string pointed to by
.IR s2 .
.SH RETURN VALUE
The
.BR wcscmp ()
function returns zero if the wide-character strings at
.I s1
and
.I s2
are equal.
It returns an integer greater than zero if
at the first differing position
.IR i ,
the corresponding wide-character
.I s1[i]
is greater than
.IR s2[i] .
It returns an integer less than zero if
at the first differing position
.IR i ,
the corresponding wide-character
.I s1[i]
is less than
.IR s2[i] .
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR wcscmp ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C99.
.SH SEE ALSO
.BR strcmp (3),
.BR wcscasecmp (3),
.BR wmemcmp (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) Bruno Haible <haible@clisp.cons.org>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_ONEPARA)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"   GNU glibc-2 source code and manual
.\"   Dinkumware C library reference http://www.dinkumware.com/
.\"   OpenGroup's Single UNIX specification http://www.UNIX-systems.org/online.html
.\"   ISO/IEC 9899:1999
.\"
.TH WCSCPY 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
wcscpy \- copy a wide-character string
.SH SYNOPSIS
.nf
.B #include <wchar.h>
.sp
.BI "wchar_t *wcscpy(wchar_t *" dest ", const wchar_t *" src );
.fi
.SH DESCRIPTION
The
.BR wcscpy ()
function is the wide-character equivalent
of the
.BR strcpy (3)
function.
It copies the wide-character string pointed to by
.IR src ,
including the terminating null wide character (L\(aq\\0\(aq),
to the array pointed to by
.IR dest .
.PP
The strings may not overlap.
.PP
The programmer must ensure that there is
room for at least
.IR "wcslen(src)+1"
wide characters at
.IR dest .
.SH RETURN VALUE
.BR wcscpy ()
returns
.IR dest .
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR wcscpy ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C99.
.SH SEE ALSO
.BR strcpy (3),
.BR wcpcpy (3),
.BR wcscat (3),
.BR wcsdup (3),
.BR wmemcpy (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) Bruno Haible <haible@clisp.cons.org>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_ONEPARA)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"   GNU glibc-2 source code and manual
.\"   Dinkumware C library reference http://www.dinkumware.com/
.\"   OpenGroup's Single UNIX specification http://www.UNIX-systems.org/online.html
.\"   ISO/IEC 9899:1999
.\"
.TH WCSCSPN 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
wcscspn \- search a wide-character string for any of a set of wide characters
.SH SYNOPSIS
.nf
.B #include <wchar.h>
.sp
.BI "size_t wcscspn(const wchar_t *" wcs ", const wchar_t *" reject );
.fi
.SH DESCRIPTION
The
.BR wcscspn ()
function is the wide-character equivalent
of the
.BR strcspn (3)
function.
It determines the length of the longest initial segment of
.I wcs
which consists entirely of wide-characters not listed in
.IR reject .
In
other words, it searches for the first occurrence in the wide-character
string
.I wcs
of any of the characters in the wide-character string
.IR reject .
.SH RETURN VALUE
The
.BR wcscspn ()
function returns the number of
wide characters in the longest
initial segment of
.I wcs
which consists entirely of wide-characters not
listed in
.IR reject .
In other words, it returns the position of the first
occurrence in the wide-character string
.I wcs
of any of the characters in
the wide-character string
.IR reject ,
or
.IR wcslen(wcs)
if there is none.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR wcscspn ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C99.
.SH SEE ALSO
.BR strcspn (3),
.BR wcspbrk (3),
.BR wcsspn (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) Bruno Haible <haible@clisp.cons.org>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_ONEPARA)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"   GNU glibc-2 source code and manual
.\"   Dinkumware C library reference http://www.dinkumware.com/
.\"   OpenGroup's Single UNIX specification http://www.UNIX-systems.org/online.html
.\"
.TH WCSDUP 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
wcsdup \- duplicate a wide-character string
.SH SYNOPSIS
.nf
.B #include <wchar.h>
.sp
.BI "wchar_t *wcsdup(const wchar_t *" s );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR wcsdup ():
.PD 0
.ad l
.RS 4
.TP 4
Since glibc 2.10:
_XOPEN_SOURCE\ >=\ 700 || _POSIX_C_SOURCE\ >=\ 200809L
.TP
Before glibc 2.10:
_GNU_SOURCE
.RE
.ad
.PD
.SH DESCRIPTION
The
.BR wcsdup ()
function is the wide-character equivalent
of the
.BR strdup (3)
function.
It allocates and returns a new wide-character string whose initial
contents is a duplicate of the wide-character string pointed to by
.IR s .
.PP
Memory for the new wide-character string is
obtained with
.BR malloc (3),
and should be freed with
.BR free (3).
.SH RETURN VALUE
On success,
.BR wcsdup ()
returns a pointer to the new wide-character string.
On error, it returns \-1, with
.I errno
set to indicate the cause of the error.
.SH ERRORS
.TP
.B ENOMEM
Insufficient memory available to allocate duplicate string.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR wcsdup ()
T}	Thread safety	MT-Safe
.TE

.SH CONFORMING TO
POSIX.1-2008.
This function is not specified in POSIX.1-2001,
and is not widely available on other systems.
.\" present in libc5 and glibc 2.0 and later
.SH SEE ALSO
.BR strdup (3),
.BR wcscpy (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) Bruno Haible <haible@clisp.cons.org>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_ONEPARA)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"   GNU glibc-2 source code and manual
.\"   Dinkumware C library reference http://www.dinkumware.com/
.\"   OpenGroup's Single UNIX specification http://www.UNIX-systems.org/online.html
.\"   ISO/IEC 9899:1999
.\"
.TH WCSLEN 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
wcslen \- determine the length of a wide-character string
.SH SYNOPSIS
.nf
.B #include <wchar.h>
.sp
.BI "size_t wcslen(const wchar_t *" s );
.fi
.SH DESCRIPTION
The
.BR wcslen ()
function is the wide-character equivalent
of the
.BR strlen (3)
function.
It determines the length of the wide-character string pointed to
by
.IR s ,
excluding the terminating null wide character (L\(aq\\0\(aq).
.SH RETURN VALUE
The
.BR wcslen ()
function returns the
number of wide characters in
.IR s .
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR wcslen ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C99.
.SH SEE ALSO
.BR strlen (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) Bruno Haible <haible@clisp.cons.org>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_ONEPARA)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"   GNU glibc-2 source code and manual
.\"   Dinkumware C library reference http://www.dinkumware.com/
.\"   OpenGroup's Single UNIX specification http://www.UNIX-systems.org/online.html
.\"
.TH WCSNCASECMP 3 2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
wcsncasecmp \- compare two fixed-size wide-character strings, ignoring case
.SH SYNOPSIS
.nf
.B #include <wchar.h>
.sp
.BI "int wcsncasecmp(const wchar_t *" s1 ", const wchar_t *" s2 ", size_t " n );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR wcsncasecmp ():
.PD 0
.ad l
.RS 4
.TP 4
Since glibc 2.10:
_XOPEN_SOURCE\ >=\ 700 || _POSIX_C_SOURCE\ >=\ 200809L
.TP
Before glibc 2.10:
_GNU_SOURCE
.RE
.ad
.PD
.SH DESCRIPTION
The
.BR wcsncasecmp ()
function is the wide-character equivalent of the
.BR strncasecmp (3)
function.
It compares the wide-character string pointed to
by
.I s1
and the wide-character string
pointed to by
.IR s2 ,
but at most
.I n
wide characters from each string, ignoring case differences
.RB ( towupper (3),
.BR towlower (3)).
.SH RETURN VALUE
The
.BR wcsncasecmp ()
function returns zero
if the wide-character strings at
.I s1
and
.IR s2 ,
truncated to at most length
.IR n ,
are equal except
for case distinctions.
It returns a positive integer if truncated
.I s1
is
greater than truncated
.IR s2 ,
ignoring case.
It returns a negative integer
if truncated
.I s1
is smaller than truncated
.IR s2 ,
ignoring case.
.SH VERSIONS
The
.BR wcsncasecmp ()
function is provided in glibc since version 2.1.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR wcsncasecmp ()
T}	Thread safety	MT-Safe locale
.TE
.SH CONFORMING TO
POSIX.1-2008.
This function is not specified in POSIX.1-2001,
and is not widely available on other systems.
.SH NOTES
The behavior of
.BR wcsncasecmp ()
depends on the
.B LC_CTYPE
category of the
current locale.
.SH SEE ALSO
.BR strncasecmp (3),
.BR wcsncmp (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) Bruno Haible <haible@clisp.cons.org>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_ONEPARA)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"   GNU glibc-2 source code and manual
.\"   Dinkumware C library reference http://www.dinkumware.com/
.\"   OpenGroup's Single UNIX specification http://www.UNIX-systems.org/online.html
.\"   ISO/IEC 9899:1999
.\"
.TH WCSNCAT 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
wcsncat \- concatenate two wide-character strings
.SH SYNOPSIS
.nf
.B #include <wchar.h>
.sp
.BI "wchar_t *wcsncat(wchar_t *" dest ", const wchar_t *" src ", size_t " n );
.fi
.SH DESCRIPTION
The
.BR wcsncat ()
function is the wide-character equivalent of the
.BR strncat (3)
function.
It copies at most
.I n
wide characters from the wide-character
string pointed to by
.I src
to the end of the wide-character string pointed
to by
.IR dest ,
and adds a terminating null wide character (L\(aq\\0\(aq).
.PP
The strings may not overlap.
.PP
The programmer must ensure that there is room for at least
.IR wcslen(dest) + n +1
wide characters at
.IR dest .
.SH RETURN VALUE
.BR wcsncat ()
returns
.IR dest .
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR wcsncat ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C99.
.SH SEE ALSO
.BR strncat (3),
.BR wcscat (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) Bruno Haible <haible@clisp.cons.org>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_ONEPARA)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"   GNU glibc-2 source code and manual
.\"   Dinkumware C library reference http://www.dinkumware.com/
.\"   OpenGroup's Single UNIX specification http://www.UNIX-systems.org/online.html
.\"   ISO/IEC 9899:1999
.\"
.TH WCSNCMP 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
wcsncmp \- compare two fixed-size wide-character strings
.SH SYNOPSIS
.nf
.B #include <wchar.h>
.sp
.BI "int wcsncmp(const wchar_t *" s1 ", const wchar_t *" s2 ", size_t " n );
.fi
.SH DESCRIPTION
The
.BR wcsncmp ()
function is the wide-character equivalent of the
.BR strncmp (3)
function.
It compares the wide-character string pointed to by
.I s1
and the
wide-character string pointed to by
.IR s2 ,
but at most
.I n
wide
characters from each string.
In each string, the comparison extends only up
to the first occurrence of a null wide character (L\(aq\\0\(aq), if any.
.SH RETURN VALUE
The
.BR wcsncmp ()
function returns zero if the wide-character strings at
.I s1
and
.IR s2 ,
truncated to at most length
.IR n ,
are equal.
It returns an integer greater than zero if at the first differing position
.I i
.RI ( i
<
.IR n ),
the corresponding wide-character
.I s1[i]
is
greater than
.IR s2[i] .
It returns an integer less than zero if at the first
differing position
.I i
.RI (i
<
.IR n ),
the corresponding
wide-character
.I s1[i]
is less than
.IR s2[i] .
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR wcsncmp ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C99.
.SH SEE ALSO
.BR strncmp (3),
.BR wcsncasecmp (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) Bruno Haible <haible@clisp.cons.org>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_ONEPARA)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"   GNU glibc-2 source code and manual
.\"   Dinkumware C library reference http://www.dinkumware.com/
.\"   OpenGroup's Single UNIX specification http://www.UNIX-systems.org/online.html
.\"   ISO/IEC 9899:1999
.\"
.TH WCSNCPY 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
wcsncpy \- copy a fixed-size string of wide characters
.SH SYNOPSIS
.nf
.B #include <wchar.h>
.sp
.BI "wchar_t *wcsncpy(wchar_t *" dest ", const wchar_t *" src ", size_t " n );
.fi
.SH DESCRIPTION
The
.BR wcsncpy ()
function is the wide-character equivalent of the
.BR strncpy (3)
function.
It copies at most
.I n
wide characters from the wide-character
string pointed to by
.IR src ,
including the terminating null wide character (L\(aq\\0\(aq),
to the array pointed to by
.IR dest .
Exactly
.I n
wide characters are
written at
.IR dest .
If the length \fIwcslen(src)\fP is smaller than
.IR n ,
the remaining wide characters in the array
pointed to by
.I dest
are filled
with null wide characters.
If the length \fIwcslen(src)\fP is greater than or equal
to
.IR n ,
the string pointed to by
.I dest
will not be terminated by a null wide character.
.PP
The strings may not overlap.
.PP
The programmer must ensure that there is room for at least
.I n
wide
characters at
.IR dest .
.SH RETURN VALUE
.BR wcsncpy ()
returns
.IR dest .
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR wcsncpy ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C99.
.SH SEE ALSO
.BR strncpy (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) Bruno Haible <haible@clisp.cons.org>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_ONEPARA)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"   GNU glibc-2 source code and manual
.\"   Dinkumware C library reference http://www.dinkumware.com/
.\"   OpenGroup's Single UNIX specification http://www.UNIX-systems.org/online.html
.\"
.TH WCSNLEN 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
wcsnlen \- determine the length of a fixed-size wide-character string
.SH SYNOPSIS
.nf
.B #include <wchar.h>
.sp
.BI "size_t wcsnlen(const wchar_t *" s ", size_t " maxlen );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR wcsnlen ():
.PD 0
.ad l
.RS 4
.TP 4
Since glibc 2.10:
_XOPEN_SOURCE\ >=\ 700 || _POSIX_C_SOURCE\ >=\ 200809L
.TP
Before glibc 2.10:
_GNU_SOURCE
.RE
.ad
.PD
.SH DESCRIPTION
The
.BR wcsnlen ()
function is the wide-character equivalent
of the
.BR strnlen (3)
function.
It returns the number of wide-characters in the string pointed to by
.IR s ,
not including the terminating null wide character (L\(aq\\0\(aq),
but at most
.I maxlen
wide characters (note: this parameter is not a byte count).
In doing this,
.BR wcsnlen ()
looks at only the first
.I maxlen
wide characters at
.I s
and never beyond
.IR s+maxlen .
.SH RETURN VALUE
The
.BR wcsnlen ()
function returns
.IR wcslen(s) ,
if that is less than
.IR maxlen ,
or
.I maxlen
if there is no null wide character among the
first
.I maxlen
wide characters pointed to by
.IR s .
.SH VERSIONS
The
.BR wcsnlen ()
function is provided in glibc since version 2.1.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR wcsnlen ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
POSIX.1-2008.
.SH SEE ALSO
.BR strnlen (3),
.BR wcslen (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) Bruno Haible <haible@clisp.cons.org>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_ONEPARA)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"   GNU glibc-2 source code and manual
.\"   Dinkumware C library reference http://www.dinkumware.com/
.\"   OpenGroup's Single UNIX specification http://www.UNIX-systems.org/online.html
.\"
.TH WCSNRTOMBS 3  2015-04-19 "GNU" "Linux Programmer's Manual"
.SH NAME
wcsnrtombs \- convert a wide-character string to a multibyte string
.SH SYNOPSIS
.nf
.B #include <wchar.h>
.sp
.BI "size_t wcsnrtombs(char *" dest ", const wchar_t **" src ", size_t " nwc ,
.BI "                  size_t " len ", mbstate_t *" ps );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR wcsnrtombs ():
.PD 0
.ad l
.RS 4
.TP 4
Since glibc 2.10:
_XOPEN_SOURCE\ >=\ 700 || _POSIX_C_SOURCE\ >=\ 200809L
.TP
Before glibc 2.10:
_GNU_SOURCE
.RE
.ad
.PD
.SH DESCRIPTION
The
.BR wcsnrtombs ()
function is like the
.BR wcsrtombs (3)
function,
except that the number of wide characters to be converted,
starting at
.IR *src ,
is limited to
.IR nwc .
.PP
If
.I dest
is not NULL,
the
.BR wcsnrtombs ()
function converts
at most
.I nwc
wide characters from
the wide-character string
.I *src
to a multibyte string starting at
.IR dest .
At most
.I len
bytes are written to
.IR dest .
The shift state
.I *ps
is updated.
The conversion is effectively performed by repeatedly
calling
.IR "wcrtomb(dest, *src, ps)" ,
as long as this call succeeds,
and then incrementing
.I dest
by the
number of bytes written and
.I *src
by one.
The conversion can stop for three reasons:
.IP 1. 3
A wide character has been encountered that can not be represented as a
multibyte sequence (according to the current locale).
In this case,
.I *src
is left pointing to the invalid wide character,
.I (size_t)\ \-1
is returned,
and
.I errno
is set to
.BR EILSEQ .
.IP 2.
.I nwc
wide characters have been
converted without encountering a null wide character (L\(aq\\0\(aq),
or the length limit forces a stop.
In this case,
.I *src
is left pointing
to the next wide character to be converted, and the number of bytes written
to
.I dest
is returned.
.IP 3.
The wide-character string has been completely converted, including the
terminating null wide character (which has the side effect of bringing back
.I *ps
to the initial state).
In this case,
.I *src
is set to NULL, and the number
of bytes written to
.IR dest ,
excluding the terminating null byte (\(aq\\0\(aq), is
returned.
.PP
If
.IR dest
is NULL,
.I len
is ignored,
and the conversion proceeds as above,
except that the converted bytes are not written out to memory, and that
no destination length limit exists.
.PP
In both of the above cases,
if
.I ps
is NULL, a static anonymous
state known only to the
.BR wcsnrtombs ()
function is used instead.
.PP
The programmer must ensure that there is room for at least
.I len
bytes
at
.IR dest .
.SH RETURN VALUE
The
.BR wcsnrtombs ()
function returns
the number of bytes that make up the
converted part of multibyte sequence,
not including the terminating null byte.
If a wide character was encountered which
could not be converted,
.I (size_t)\ \-1
is returned, and
.I errno
set to
.BR EILSEQ .
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lbw29
l l l.
Interface	Attribute	Value
T{
.BR wcsnrtombs ()
T}	Thread safety	MT-Unsafe race:wcsnrtombs/!ps
.TE

.SH CONFORMING TO
POSIX.1-2008.
.SH NOTES
The behavior of
.BR wcsnrtombs ()
depends on the
.B LC_CTYPE
category of the
current locale.
.PP
Passing NULL as
.I ps
is not multithread safe.
.SH SEE ALSO
.BR iconv (3),
.BR mbsinit (3),
.BR wcsrtombs (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) Bruno Haible <haible@clisp.cons.org>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_ONEPARA)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"   GNU glibc-2 source code and manual
.\"   Dinkumware C library reference http://www.dinkumware.com/
.\"   OpenGroup's Single UNIX specification http://www.UNIX-systems.org/online.html
.\"   ISO/IEC 9899:1999
.\"
.TH WCSPBRK 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
wcspbrk \- search a wide-character string for any of a set of wide characters
.SH SYNOPSIS
.nf
.B #include <wchar.h>
.sp
.BI "wchar_t *wcspbrk(const wchar_t *" wcs ", const wchar_t *" accept );
.fi
.SH DESCRIPTION
The
.BR wcspbrk ()
function is the wide-character equivalent
of the
.BR strpbrk (3)
function.
It searches for the first occurrence in the wide-character
string pointed to by
.I wcs
of any of the
characters in the wide-character
string pointed to by
.IR accept .
.SH RETURN VALUE
The
.BR wcspbrk ()
function returns a pointer to the first occurrence in
.I wcs
of any of the characters listed in
.IR accept .
If
.I wcs
contains none of these characters, NULL is returned.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR wcspbrk ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C99.
.SH SEE ALSO
.BR strpbrk (3),
.BR wcschr (3),
.BR wcscspn (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) Bruno Haible <haible@clisp.cons.org>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_ONEPARA)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"   GNU glibc-2 source code and manual
.\"   Dinkumware C library reference http://www.dinkumware.com/
.\"   OpenGroup's Single UNIX specification http://www.UNIX-systems.org/online.html
.\"   ISO/IEC 9899:1999
.\"
.TH WCSRCHR 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
wcsrchr \- search a wide character in a wide-character string
.SH SYNOPSIS
.nf
.B #include <wchar.h>
.sp
.BI "wchar_t *wcsrchr(const wchar_t *" wcs ", wchar_t " wc );
.fi
.SH DESCRIPTION
The
.BR wcsrchr ()
function is the wide-character equivalent
of the
.BR strrchr (3)
function.
It searches the last occurrence of
.I wc
in the wide-character
string pointed to by
.IR wcs .
.SH RETURN VALUE
The
.BR wcsrchr ()
function returns a pointer to the last occurrence of
.I wc
in the wide-character string pointed to by
.IR wcs ,
or NULL if
.I wc
does not occur in the string.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR wcsrchr ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C99.
.SH SEE ALSO
.BR strrchr (3),
.BR wcschr (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) Bruno Haible <haible@clisp.cons.org>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_ONEPARA)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"   GNU glibc-2 source code and manual
.\"   Dinkumware C library reference http://www.dinkumware.com/
.\"   OpenGroup's Single UNIX specification http://www.UNIX-systems.org/online.html
.\"   ISO/IEC 9899:1999
.\"
.TH WCSRTOMBS 3  2015-04-19 "GNU" "Linux Programmer's Manual"
.SH NAME
wcsrtombs \- convert a wide-character string to a multibyte string
.SH SYNOPSIS
.nf
.B #include <wchar.h>
.sp
.BI "size_t wcsrtombs(char *" dest ", const wchar_t **" src ,
.BI "                 size_t " len ", mbstate_t *" ps );
.fi
.SH DESCRIPTION
If
.I dest
is not NULL,
the
.BR wcsrtombs ()
function converts
the wide-character string
.I *src
to a multibyte string starting at
.IR dest .
At most
.I len
bytes are written to
.IR dest .
The shift state
.I *ps
is updated.
The conversion is effectively performed by repeatedly
calling
.IR "wcrtomb(dest, *src, ps)" ,
as long as this call succeeds,
and then incrementing
.I dest
by the
number of bytes written and
.I *src
by one.
The conversion can stop for three reasons:
.PP
1. A wide character has been encountered that can not be represented as a
multibyte sequence (according to the current locale).
In this case,
.I *src
is left pointing to the invalid wide character,
.I (size_t)\ \-1
is returned,
and
.I errno
is set to
.BR EILSEQ .
.PP
2. The length limit forces a stop.
In this case,
.I *src
is left pointing
to the next wide character to be converted,
and the number of bytes written to
.I dest
is returned.
.PP
3. The wide-character string has been completely converted, including the
terminating null wide character (L\(aq\\0\(aq),
which has the side effect of bringing back
.I *ps
to the initial state.
In this case,
.I *src
is set to NULL, and the number
of bytes written to
.IR dest ,
excluding the terminating null byte (\(aq\\0\(aq),
is returned.
.PP
If
.IR dest
is NULL,
.I len
is ignored,
and the conversion proceeds as above, except that the converted bytes
are not written out to memory, and that
no length limit exists.
.PP
In both of the above cases,
if
.I ps
is NULL, a static anonymous
state known only to the
.BR wcsrtombs ()
function is used instead.
.PP
The programmer must ensure that there is room for at least
.I len
bytes
at
.IR dest .
.SH RETURN VALUE
The
.BR wcsrtombs ()
function returns
the number of bytes that make up the
converted part of multibyte sequence,
not including the terminating null byte.
If a wide character was encountered
which could not be converted,
.I (size_t)\ \-1
is returned, and
.I errno
set to
.BR EILSEQ .
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lbw28
l l l.
Interface	Attribute	Value
T{
.BR wcsrtombs ()
T}	Thread safety	MT-Unsafe race:wcsrtombs/!ps
.TE

.SH CONFORMING TO
C99.
.SH NOTES
The behavior of
.BR wcsrtombs ()
depends on the
.B LC_CTYPE
category of the
current locale.
.PP
Passing NULL as
.I ps
is not multithread safe.
.SH SEE ALSO
.BR iconv (3),
.BR mbsinit (3),
.BR wcrtomb (3),
.BR wcsnrtombs (3),
.BR wcstombs (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) Bruno Haible <haible@clisp.cons.org>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_ONEPARA)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"   GNU glibc-2 source code and manual
.\"   Dinkumware C library reference http://www.dinkumware.com/
.\"   OpenGroup's Single UNIX specification http://www.UNIX-systems.org/online.html
.\"   ISO/IEC 9899:1999
.\"
.TH WCSSPN 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
wcsspn \- advance in a wide-character string, skipping
any of a set of wide characters
.SH SYNOPSIS
.nf
.B #include <wchar.h>
.sp
.BI "size_t wcsspn(const wchar_t *" wcs ", const wchar_t *" accept );
.fi
.SH DESCRIPTION
The
.BR wcsspn ()
function is the wide-character equivalent of the
.BR strspn (3)
function.
It determines the length of the longest initial segment of
.I wcs
which consists entirely of wide-characters listed in
.IR accept .
In other
words, it searches for the first occurrence in the wide-character string
.I wcs
of a wide-character not contained in the wide-character string
.IR accept .
.SH RETURN VALUE
The
.BR wcsspn ()
function returns the number of
wide characters in the longest
initial segment of
.I wcs
which consists entirely of wide-characters listed
in
.IR accept .
In other words, it returns the position of the first
occurrence in the wide-character string
.I wcs
of a wide-character not
contained in the wide-character string
.IR accept ,
or
.I wcslen(wcs)
if there is none.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR wcsspn ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C99.
.SH SEE ALSO
.BR strspn (3),
.BR wcscspn (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) Bruno Haible <haible@clisp.cons.org>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_ONEPARA)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"   GNU glibc-2 source code and manual
.\"   Dinkumware C library reference http://www.dinkumware.com/
.\"   OpenGroup's Single UNIX specification http://www.UNIX-systems.org/online.html
.\"   ISO/IEC 9899:1999
.\"
.TH WCSSTR 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
wcsstr \- locate a substring in a wide-character string
.SH SYNOPSIS
.nf
.B #include <wchar.h>
.sp
.BI "wchar_t *wcsstr(const wchar_t *" haystack ", const wchar_t *" needle );
.fi
.SH DESCRIPTION
The
.BR wcsstr ()
function is the wide-character equivalent of the
.BR strstr (3)
function.
It searches for the first occurrence of the wide-character string
.I needle
(without its terminating null wide character (L\(aq\\0\(aq))
as a substring in the wide-character string
.IR haystack .
.SH RETURN VALUE
The
.BR wcsstr ()
function returns a pointer to the first occurrence of
.I needle
in
.IR haystack .
It returns NULL if
.I needle
does not occur
as a substring in
.IR haystack .
.PP
Note the special case:
If
.I needle
is the empty wide-character string,
the return value is always
.I haystack
itself.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR wcsstr ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C99.
.SH SEE ALSO
.BR strstr (3),
.BR wcschr (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2003 Andries Brouwer (aeb@cwi.nl)
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.TH WCSTOIMAX 3 2015-03-02 "" "Linux Programmer's Manual"
.SH NAME
wcstoimax, wcstoumax \- convert wide-character string to integer
.SH SYNOPSIS
.nf
.B #include <stddef.h>
.br
.B #include <inttypes.h>
.sp
.BI "intmax_t wcstoimax(const wchar_t *" nptr ", wchar_t **" endptr \
", int " base );
.br
.BI "uintmax_t wcstoumax(const wchar_t *" nptr ", wchar_t **" endptr \
", int " base );
.fi
.SH DESCRIPTION
These functions are just like
.BR wcstol (3)
and
.BR wcstoul (3),
except that they return a value of type
.I intmax_t
and
.IR uintmax_t ,
respectively.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw24 lb lb
l l l.
Interface	Attribute	Value
T{
.BR wcstoimax (),
.BR wcstoumax ()
T}	Thread safety	MT-Safe locale
.TE
.SH CONFORMING TO
C99.
.SH SEE ALSO
.BR imaxabs (3),
.BR imaxdiv (3),
.BR strtoimax (3),
.BR strtoumax (3),
.\" FIXME . the pages referred to by the following xrefs are not yet written
.BR wcstol (3),
.BR wcstoul (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) Bruno Haible <haible@clisp.cons.org>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_ONEPARA)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"   GNU glibc-2 source code and manual
.\"   Dinkumware C library reference http://www.dinkumware.com/
.\"   OpenGroup's Single UNIX specification http://www.UNIX-systems.org/online.html
.\"   ISO/IEC 9899:1999
.\"
.TH WCSTOK 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
wcstok \- split wide-character string into tokens
.SH SYNOPSIS
.nf
.B #include <wchar.h>
.sp
.BI "wchar_t *wcstok(wchar_t *" wcs ", const wchar_t *" delim \
", wchar_t **" ptr );
.fi
.SH DESCRIPTION
The
.BR wcstok ()
function is the wide-character equivalent of the
.BR strtok (3)
function,
with an added argument to make it multithread-safe.
It can be used
to split a wide-character string
.I wcs
into tokens, where a token is
defined as a substring not containing any wide-characters from
.IR delim .
.PP
The search starts at
.IR wcs ,
if
.I wcs
is not NULL,
or at
.IR *ptr ,
if
.I wcs
is NULL.
First, any delimiter wide-characters are skipped, that is, the
pointer is advanced beyond any wide-characters which occur in
.IR delim .
If the end of the wide-character string is now
reached,
.BR wcstok ()
returns NULL, to indicate that no tokens
were found, and stores an appropriate value in
.IR *ptr ,
so that subsequent calls to
.BR wcstok ()
will continue to return NULL.
Otherwise, the
.BR wcstok ()
function recognizes the beginning of a token
and returns a pointer to it, but before doing that, it zero-terminates the
token by replacing the next wide-character which occurs in
.I delim
with
a null wide character (L\(aq\\0\(aq),
and it updates
.I *ptr
so that subsequent calls will
continue searching after the end of recognized token.
.SH RETURN VALUE
The
.BR wcstok ()
function returns a pointer to the next token,
or NULL if no further token was found.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR wcstok ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C99.
.SH NOTES
The original
.I wcs
wide-character string is destructively modified during
the operation.
.SH EXAMPLE
The following code loops over the tokens contained in a wide-character string.
.sp
.nf
wchar_t *wcs = ...;
wchar_t *token;
wchar_t *state;
for (token = wcstok(wcs, " \\t\\n", &state);
    token != NULL;
    token = wcstok(NULL, " \\t\\n", &state)) {
    ...
}
.fi
.SH SEE ALSO
.BR strtok (3),
.BR wcschr (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) Bruno Haible <haible@clisp.cons.org>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_ONEPARA)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"   GNU glibc-2 source code and manual
.\"   Dinkumware C library reference http://www.dinkumware.com/
.\"   OpenGroup's Single UNIX specification http://www.UNIX-systems.org/online.html
.\"   ISO/IEC 9899:1999
.\"
.TH WCSTOMBS 3  2015-03-29 "GNU" "Linux Programmer's Manual"
.SH NAME
wcstombs \- convert a wide-character string to a multibyte string
.SH SYNOPSIS
.nf
.B #include <stdlib.h>
.sp
.BI "size_t wcstombs(char *" dest ", const wchar_t *" src ", size_t " n );
.fi
.SH DESCRIPTION
If
.I dest
is not NULL, the
.BR wcstombs ()
function converts
the wide-character string
.I src
to a multibyte string starting at
.IR dest .
At most
.I n
bytes are written to
.IR dest .
The conversion
starts in the initial state.
The conversion can stop for three reasons:
.PP
1. A wide character has been encountered that can not be represented as a
multibyte sequence (according to the current locale).
In this case,
.I (size_t)\ \-1
is returned.
.PP
2. The length limit forces a stop.
In this case, the number of bytes written to
.I dest
is returned, but the shift state at this point is lost.
.PP
3. The wide-character string has been completely converted, including the
terminating null wide character (L\(aq\\0\(aq).
In this case, the conversion ends in the initial state.
The number of bytes written to
.IR dest ,
excluding the terminating null byte (\(aq\\0\(aq), is returned.
.PP
The programmer must ensure that there is room for at least
.I n
bytes
at
.IR dest .
.PP
If
.IR dest
is NULL,
.I n
is ignored, and the conversion proceeds as
above, except that the converted bytes are not written out to memory,
and no length limit exists.
.PP
In order to avoid the case 2 above, the programmer should make sure
.I n
is greater than or equal to
.IR "wcstombs(NULL,src,0)+1" .
.SH RETURN VALUE
The
.BR wcstombs ()
function returns the number of bytes that make up the
converted part of a multibyte sequence,
not including the terminating null byte.
If a wide character was encountered which could not be
converted,
.I (size_t)\ \-1
is returned.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR wcstombs ()
T}	Thread safety	MT-Safe
.TE

.SH CONFORMING TO
C99.
.SH NOTES
The behavior of
.BR wcstombs ()
depends on the
.B LC_CTYPE
category of the
current locale.
.PP
The function
.BR wcsrtombs (3)
provides a thread safe interface to
the same functionality.
.SH SEE ALSO
.BR mblen (3),
.BR mbtowc (3),
.BR mbstowcs (3),
.BR wcsrtombs (3)
.BR wctom (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) Bruno Haible <haible@clisp.cons.org>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_ONEPARA)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"   GNU glibc-2 source code and manual
.\"   Dinkumware C library reference http://www.dinkumware.com/
.\"   OpenGroup's Single UNIX specification http://www.UNIX-systems.org/online.html
.\"
.TH WCSWIDTH 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
wcswidth \- determine columns needed for a fixed-size wide-character string
.SH SYNOPSIS
.nf
.BR "#define _XOPEN_SOURCE" "             /* See feature_test_macros(7) */"
.B #include <wchar.h>
.sp
.BI "int wcswidth(const wchar_t *" s ", size_t " n );
.fi
.SH DESCRIPTION
The
.BR wcswidth ()
function returns the
number of columns needed to represent
the wide-character string pointed to by
.IR s ,
but at most
.I n
wide
characters.
If a nonprintable wide character occurs among these characters,
\-1 is returned.
.SH RETURN VALUE
The
.BR wcswidth ()
function
returns the number of column positions for the
wide-character string
.IR s ,
truncated to at most length
.IR n .
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR wcswidth ()
T}	Thread safety	MT-Safe locale
.TE
.SH CONFORMING TO
POSIX.1-2001.
.SH NOTES
The behavior of
.BR wcswidth ()
depends on the
.B LC_CTYPE
category of the
current locale.
.SH SEE ALSO
.BR iswprint (3),
.BR wcwidth (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) Bruno Haible <haible@clisp.cons.org>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_ONEPARA)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"   GNU glibc-2 source code and manual
.\"   Dinkumware C library reference http://www.dinkumware.com/
.\"   OpenGroup's Single UNIX specification http://www.UNIX-systems.org/online.html
.\"   ISO/IEC 9899:1999
.\"
.TH WCTOB 3 2015-03-29 "GNU" "Linux Programmer's Manual"
.SH NAME
wctob \- try to represent a wide character as a single byte
.SH SYNOPSIS
.nf
.B #include <wchar.h>
.sp
.BI "int wctob(wint_t " c );
.fi
.SH DESCRIPTION
The
.BR wctob ()
function tests whether
the multibyte representation of the
wide character
.IR c ,
starting in the initial state, consists of a single
byte.
If so, it is returned as an
.IR "unsigned char" .
.PP
Never use this function.
It cannot help you in writing internationalized
programs.
Internationalized programs must never distinguish single-byte and
multibyte characters.
.SH RETURN VALUE
The
.BR wctob ()
function returns the single-byte representation of
.IR c ,
if it exists, of
.B EOF
otherwise.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR wctob ()
T}	Thread safety	MT-Safe
.TE

.SH CONFORMING TO
C99.
.SH NOTES
The behavior of
.BR wctob ()
depends on the
.B LC_CTYPE
category of the
current locale.
.PP
This function should never be used.
Internationalized programs must never
distinguish single-byte and multibyte characters.
Use either
.BR wctomb (3)
or the thread-safe
.BR wcrtomb (3)
instead.
.SH SEE ALSO
.BR btowc (3),
.BR wcrtomb (3),
.BR wctomb (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) Bruno Haible <haible@clisp.cons.org>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_ONEPARA)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"   GNU glibc-2 source code and manual
.\"   Dinkumware C library reference http://www.dinkumware.com/
.\"   OpenGroup's Single UNIX specification http://www.UNIX-systems.org/online.html
.\"   ISO/IEC 9899:1999
.\"
.TH WCTOMB 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
wctomb \- convert a wide character to a multibyte sequence
.SH SYNOPSIS
.nf
.B #include <stdlib.h>
.sp
.BI "int wctomb(char *" s ", wchar_t " wc );
.fi
.SH DESCRIPTION
If
.I s
is not NULL,
the
.BR wctomb ()
function converts the wide character
.I wc
to its multibyte representation and stores it at the beginning of
the character array pointed to by
.IR s .
It updates the shift state, which
is stored in a static anonymous variable
known only to the
.BR wctomb ()
function,
and returns the length of said multibyte representation,
that is, the number of
bytes written at
.IR s .
.PP
The programmer must ensure that there is
room for at least
.B MB_CUR_MAX
bytes at
.IR s .
.PP
If
.I s
is NULL, the
.BR wctomb ()
function
.\" The Dinkumware doc and the Single UNIX specification say this, but
.\" glibc doesn't implement this.
resets the shift state, known only to this function,
to the initial state, and
returns nonzero if the encoding has nontrivial shift state,
or zero if the encoding is stateless.
.SH RETURN VALUE
If
.I s
is not NULL, the
.BR wctomb ()
function
returns the number of bytes
that have been written to the byte array at
.IR s .
If
.I wc
can not be
represented as a multibyte sequence (according
to the current locale), \-1 is returned.
.PP
If
.I s
is NULL, the
.BR wctomb ()
function returns nonzero if the
encoding has nontrivial shift state, or zero if the encoding is stateless.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR wctomb ()
T}	Thread safety	MT-Unsafe race
.TE
.SH CONFORMING TO
C99.
.SH NOTES
The behavior of
.BR wctomb ()
depends on the
.B LC_CTYPE
category of the
current locale.
.PP
The function
.BR wcrtomb (3)
provides
a better interface to the same functionality.
.SH SEE ALSO
.BR MB_CUR_MAX (3),
.BR mblen (3),
.BR mbstowcs (3),
.BR mbtowc (3),
.BR wcrtomb (3),
.BR wcstombs (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) Bruno Haible <haible@clisp.cons.org>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_ONEPARA)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"   GNU glibc-2 source code and manual
.\"   Dinkumware C library reference http://www.dinkumware.com/
.\"   OpenGroup's Single UNIX specification http://www.UNIX-systems.org/online.html
.\"   ISO/IEC 9899:1999
.\"
.TH WCTRANS 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
wctrans \- wide-character translation mapping
.SH SYNOPSIS
.nf
.B #include <wctype.h>
.sp
.BI "wctrans_t wctrans(const char *" name );
.fi
.SH DESCRIPTION
The
.I wctrans_t
type represents a mapping
which can map a wide character to
another wide character.
Its nature is implementation-dependent, but the special
value
.IR "(wctrans_t)\ 0"
denotes an invalid mapping.
Nonzero
.I wctrans_t
values can be passed to the
.BR towctrans (3)
function to actually perform
the wide-character mapping.
.PP
The
.BR wctrans ()
function returns a mapping, given by its name.
The set of
valid names depends on the
.B LC_CTYPE
category of the current locale, but the
following names are valid in all locales.
.nf
  "tolower" \- realizes the \fBtolower\fP(3) mapping
  "toupper" \- realizes the \fBtoupper\fP(3) mapping
.fi
.SH RETURN VALUE
The
.BR wctrans ()
function returns a mapping descriptor if the
.I name
is valid.
Otherwise, it returns
.IR "(wctrans_t)\ 0" .
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR wctrans ()
T}	Thread safety	MT-Safe locale
.TE
.SH CONFORMING TO
C99.
.SH NOTES
The behavior of
.BR wctrans ()
depends on the
.B LC_CTYPE
category of the
current locale.
.SH SEE ALSO
.BR towctrans (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) Bruno Haible <haible@clisp.cons.org>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_ONEPARA)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"   GNU glibc-2 source code and manual
.\"   Dinkumware C library reference http://www.dinkumware.com/
.\"   OpenGroup's Single UNIX specification http://www.UNIX-systems.org/online.html
.\"   ISO/IEC 9899:1999
.\"
.TH WCTYPE 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
wctype \- wide-character classification
.SH SYNOPSIS
.nf
.B #include <wctype.h>
.sp
.BI "wctype_t wctype(const char *" name );
.fi
.SH DESCRIPTION
The
.I wctype_t
type represents a property which a wide character may or
may not have.
In other words, it represents a class of wide characters.
This type's nature is implementation-dependent, but the special value
.I "(wctype_t) 0"
denotes an invalid property.
Nonzero
.I wctype_t
values
can be passed to the
.BR iswctype (3)
function
to actually test whether a given
wide character has the property.
.PP
The
.BR wctype ()
function returns a property, given by its name.
The set of
valid names depends on the
.B LC_CTYPE
category of the current locale, but the
following names are valid in all locales.
.nf
  "alnum" \- realizes the \fBisalnum\fP(3) classification function
  "alpha" \- realizes the \fBisalpha\fP(3) classification function
  "blank" \- realizes the \fBisblank\fP(3) classification function
  "cntrl" \- realizes the \fBiscntrl\fP(3) classification function
  "digit" \- realizes the \fBisdigit\fP(3) classification function
  "graph" \- realizes the \fBisgraph\fP(3) classification function
  "lower" \- realizes the \fBislower\fP(3) classification function
  "print" \- realizes the \fBisprint\fP(3) classification function
  "punct" \- realizes the \fBispunct\fP(3) classification function
  "space" \- realizes the \fBisspace\fP(3) classification function
  "upper" \- realizes the \fBisupper\fP(3) classification function
  "xdigit" \- realizes the \fBisxdigit\fP(3) classification function
.fi
.SH RETURN VALUE
The
.BR wctype ()
function returns a property descriptor
if the
.I name
is valid.
Otherwise, it returns
.IR "(wctype_t) 0" .
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR wctype ()
T}	Thread safety	MT-Safe locale
.TE
.SH CONFORMING TO
C99.
.SH NOTES
The behavior of
.BR wctype ()
depends on the
.B LC_CTYPE
category of the
current locale.
.SH SEE ALSO
.BR iswctype (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) Bruno Haible <haible@clisp.cons.org>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_ONEPARA)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"   GNU glibc-2 source code and manual
.\"   Dinkumware C library reference http://www.dinkumware.com/
.\"   OpenGroup's Single UNIX specification http://www.UNIX-systems.org/online.html
.\"
.TH WCWIDTH 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
wcwidth \- determine columns needed for a wide character
.SH SYNOPSIS
.nf
.BR "#define _XOPEN_SOURCE" "       /* See feature_test_macros(7) */"
.B #include <wchar.h>
.sp
.BI "int wcwidth(wchar_t " c );
.fi
.SH DESCRIPTION
The
.BR wcwidth ()
function returns the number of columns
needed to represent the wide character
.IR c .
If
.I c
is a printable wide character, the value
is at least 0.
If
.I c
is null wide character (L\(aq\\0\(aq), the value is 0.
Otherwise, \-1 is returned.
.SH RETURN VALUE
The
.BR wcwidth ()
function returns the number of
column positions for
.IR c .
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR wcwidth ()
T}	Thread safety	MT-Safe locale
.TE
.SH CONFORMING TO
POSIX.1-2001.

Note that glibc before 2.2.5 used the prototype
.br
.nf
.BI "int wcwidth(wint_t " c );
.fi
.SH NOTES
The behavior of
.BR wcwidth ()
depends on the
.B LC_CTYPE
category of the
current locale.
.SH SEE ALSO
.BR iswprint (3),
.BR wcswidth (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) Bruno Haible <haible@clisp.cons.org>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_ONEPARA)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"   GNU glibc-2 source code and manual
.\"   Dinkumware C library reference http://www.dinkumware.com/
.\"   OpenGroup's Single UNIX specification http://www.UNIX-systems.org/online.html
.\"   ISO/IEC 9899:1999
.\"
.TH WMEMCHR 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
wmemchr \- search a wide character in a wide-character array
.SH SYNOPSIS
.nf
.B #include <wchar.h>
.sp
.BI "wchar_t *wmemchr(const wchar_t *" s ", wchar_t " c ", size_t " n );
.fi
.SH DESCRIPTION
The
.BR wmemchr ()
function is the wide-character equivalent of the
.BR memchr (3)
function.
It searches the
.IR n
wide characters starting at
.I s
for
the first occurrence of the wide character
.IR c .
.SH RETURN VALUE
The
.BR wmemchr ()
function returns a pointer to the first occurrence of
.I c
among the
.IR n
wide characters starting at
.IR s ,
or NULL if
.I c
does
not occur among these.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR wmemchr ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C99.
.SH SEE ALSO
.BR memchr (3),
.BR wcschr (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) Bruno Haible <haible@clisp.cons.org>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_ONEPARA)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"   GNU glibc-2 source code and manual
.\"   Dinkumware C library reference http://www.dinkumware.com/
.\"   OpenGroup's Single UNIX specification http://www.UNIX-systems.org/online.html
.\"
.TH WMEMCMP 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
wmemcmp \- compare two arrays of wide-characters
.SH SYNOPSIS
.nf
.B #include <wchar.h>
.sp
.BI "int wmemcmp(const wchar_t *" s1 ", const wchar_t *" s2 ", size_t " n );
.fi
.SH DESCRIPTION
The
.BR wmemcmp ()
function is the wide-character equivalent of the
.BR memcmp (3)
function.
It compares the
.IR n
wide-characters starting at
.I s1
and the
.I n
wide-characters starting at
.IR s2 .
.SH RETURN VALUE
The
.BR wmemcmp ()
function returns
zero if the wide-character arrays of size
.I n
at
.IR s1
and
.I s2
are equal.
It returns an integer greater than
zero if at the first differing position
.I i
.RI ( i " <"
.IR n ),
the
corresponding wide-character
.I s1[i]
is greater than
.IR s2[i] .
It returns an integer less than zero if
at the first differing position
.I i
.RI ( i
<
.IR n ),
the corresponding
wide-character
.I s1[i]
is less than
.IR s2[i] .
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR wmemcmp ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C99.
.SH SEE ALSO
.BR memcmp (3),
.BR wcscmp (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) Bruno Haible <haible@clisp.cons.org>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_ONEPARA)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"   GNU glibc-2 source code and manual
.\"   Dinkumware C library reference http://www.dinkumware.com/
.\"   OpenGroup's Single UNIX specification http://www.UNIX-systems.org/online.html
.\"   ISO/IEC 9899:1999
.\"
.TH WMEMCPY 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
wmemcpy \- copy an array of wide-characters
.SH SYNOPSIS
.nf
.B #include <wchar.h>
.sp
.BI "wchar_t *wmemcpy(wchar_t *" dest ", const wchar_t *" src ", size_t " n );
.fi
.SH DESCRIPTION
The
.BR wmemcpy ()
function is the wide-character equivalent of the
.BR memcpy (3)
function.
It copies
.I n
wide characters from the array starting at
.I src
to the array starting at
.IR dest .
.PP
The arrays may not overlap; use
.BR wmemmove (3)
to copy between overlapping
arrays.
.PP
The programmer must ensure that there is room for at least
.I n
wide
characters at
.IR dest .
.SH RETURN VALUE
.BR wmemcpy ()
returns
.IR dest .
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR wmemcpy ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C99.
.SH SEE ALSO
.BR memcpy (3),
.BR wcscpy (3),
.BR wmemmove (3),
.BR wmempcpy (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) Bruno Haible <haible@clisp.cons.org>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_ONEPARA)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"   GNU glibc-2 source code and manual
.\"   Dinkumware C library reference http://www.dinkumware.com/
.\"   OpenGroup's Single UNIX specification http://www.UNIX-systems.org/online.html
.\"   ISO/IEC 9899:1999
.\"
.TH WMEMMOVE 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
wmemmove \- copy an array of wide-characters
.SH SYNOPSIS
.nf
.B #include <wchar.h>
.sp
.BI "wchar_t *wmemmove(wchar_t *" dest ", const wchar_t *" src ", size_t " n );
.fi
.SH DESCRIPTION
The
.BR wmemmove ()
function is the wide-character equivalent of the
.BR memmove (3)
function.
It copies
.I n
wide characters from the array
starting at
.I src
to the array starting at
.IR dest .
The arrays may
overlap.
.PP
The programmer must ensure that there is room for at least
.I n
wide
characters at
.IR dest .
.SH RETURN VALUE
.BR wmemmove ()
returns
.IR dest .
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR wmemmove ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C99.
.SH SEE ALSO
.BR memmove (3),
.BR wmemcpy (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) Bruno Haible <haible@clisp.cons.org>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_ONEPARA)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"   GNU glibc-2 source code and manual
.\"   Dinkumware C library reference http://www.dinkumware.com/
.\"   OpenGroup's Single UNIX specification http://www.UNIX-systems.org/online.html
.\"   ISO/IEC 9899:1999
.\"
.TH WMEMSET 3  2015-03-02 "GNU" "Linux Programmer's Manual"
.SH NAME
wmemset \- fill an array of wide-characters with a constant wide character
.SH SYNOPSIS
.nf
.B #include <wchar.h>
.sp
.BI "wchar_t *wmemset(wchar_t *" wcs ", wchar_t " wc ", size_t " n );
.fi
.SH DESCRIPTION
The
.BR wmemset ()
function is the wide-character equivalent of the
.BR memset (3)
function.
It fills the array of
.I n
wide-characters starting at
.I wcs
with
.I n
copies of the wide character
.IR wc .
.SH RETURN VALUE
.BR wmemset ()
returns
.IR wcs .
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR wmemset ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
C99.
.SH SEE ALSO
.BR memset (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2003 Andries Brouwer (aeb@cwi.nl)
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.TH WORDEXP 3 2015-04-19  "" "Linux Programmer's Manual"
.SH NAME
wordexp, wordfree \- perform word expansion like a posix-shell
.SH SYNOPSIS
.B "#include <wordexp.h>"
.sp
.BI "int wordexp(const char *" s ", wordexp_t *" p ", int " flags );
.sp
.BI "void wordfree(wordexp_t *" p );
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR wordexp (),
.BR wordfree ():
_XOPEN_SOURCE
.SH DESCRIPTION
The function
.BR wordexp ()
performs a shell-like expansion of the string
.I s
and returns the result in the structure pointed to by
.IR p .
The data type
.I wordexp_t
is a structure that at least has the fields
.IR we_wordc ,
.IR we_wordv ,
and
.IR we_offs .
The field
.I we_wordc
is a
.I size_t
that gives the number of words in the expansion of
.IR s .
The field
.I we_wordv
is a
.I "char\ **"
that points to the array of words found.
The field
.I we_offs
of type
.I size_t
is sometimes (depending on
.IR flags ,
see below) used to indicate the number of initial elements in the
.I we_wordv
array that should be filled with NULLs.
.LP
The function
.BR wordfree ()
frees the allocated memory again.
More precisely, it does not free
its argument, but it frees the array
.I we_wordv
and the strings that points to.
.SS The string argument
Since the expansion is the same as the expansion by the shell (see
.BR sh (1))
of the parameters to a command, the string
.I s
must not contain characters that would be illegal in shell command
parameters.
In particular, there must not be any unescaped
newline or |, &, ;, <, >, (, ), {, } characters
outside a command substitution or parameter substitution context.
.LP
If the argument
.I s
contains a word that starts with an unquoted comment character #,
then it is unspecified whether that word and all following words
are ignored, or the # is treated as a non-comment character.
.SS The expansion
The expansion done consists of the following stages:
tilde expansion (replacing ~user by user's home directory),
variable substitution (replacing $FOO by the value of the environment
variable FOO), command substitution (replacing $(command) or \`command\`
by the output of command), arithmetic expansion, field splitting,
wildcard expansion, quote removal.
.LP
The result of expansion of special parameters
($@, $*, $#, $?, $\-, $$, $!, $0) is unspecified.
.LP
Field splitting is done using the environment variable $IFS.
If it is not set, the field separators are space, tab and newline.
.SS The output array
The array
.I we_wordv
contains the words found, followed by a NULL.
.SS The flags argument
The
.I flag
argument is a bitwise inclusive OR of the following values:
.TP
.B WRDE_APPEND
Append the words found to the array resulting from a previous call.
.TP
.B WRDE_DOOFFS
Insert
.I we_offs
initial NULLs in the array
.IR we_wordv .
(These are not counted in the returned
.IR we_wordc .)
.TP
.B WRDE_NOCMD
Don't do command substitution.
.TP
.B WRDE_REUSE
The argument
.I p
resulted from a previous call to
.BR wordexp (),
and
.BR wordfree ()
was not called.
Reuse the allocated storage.
.TP
.B WRDE_SHOWERR
Normally during command substitution
.I stderr
is redirected to
.IR /dev/null .
This flag specifies that
.I stderr
is not to be redirected.
.TP
.B WRDE_UNDEF
Consider it an error if an undefined shell variable is expanded.
.SH RETURN VALUE
In case of success 0 is returned.
In case of error
one of the following five values is returned.
.TP
.B WRDE_BADCHAR
Illegal occurrence of newline or one of |, &, ;, <, >, (, ), {, }.
.TP
.B WRDE_BADVAL
An undefined shell variable was referenced, and the
.B WRDE_UNDEF
flag
told us to consider this an error.
.TP
.B WRDE_CMDSUB
Command substitution requested, but the
.B WRDE_NOCMD
flag told us to consider this an error.
.TP
.B WRDE_NOSPACE
Out of memory.
.TP
.B WRDE_SYNTAX
Shell syntax error, such as unbalanced parentheses or
unmatched quotes.
.SH VERSIONS
.BR wordexp ()
and
.BR wordfree ()
are provided in glibc since version 2.1.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lbw30
l l l.
Interface	Attribute	Value
T{
.BR wordexp ()
T}	Thread safety	T{
MT-Unsafe race:utent const:env
.br
env sig:ALRM timer locale
T}
T{
.BR wordfree ()
T}	Thread safety	MT-Safe
.TE

In the above table,
.I utent
in
.I race:utent
signifies that if any of the functions
.BR setutent (3),
.BR getutent (3),
or
.BR endutent (3)
are used in parallel in different threads of a program,
then data races could occur.
.BR wordexp (3)
calls those functions,
so we use race:utent to remind users.
.SH CONFORMING TO
POSIX.1-2001.
.SH EXAMPLE
The output of the following example program
is approximately that of "ls [a-c]*.c".
.LP
.nf
#include <stdio.h>
#include <stdlib.h>
#include <wordexp.h>

int
main(int argc, char **argv)
{
    wordexp_t p;
    char **w;
    int i;

    wordexp("[a\-c]*.c", &p, 0);
    w = p.we_wordv;
    for (i = 0; i < p.we_wordc; i++)
        printf("%s\en", w[i]);
    wordfree(&p);
    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR fnmatch (3),
.BR glob (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) Bruno Haible <haible@clisp.cons.org>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_ONEPARA)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"   GNU glibc-2 source code and manual
.\"   Dinkumware C library reference http://www.dinkumware.com/
.\"   OpenGroup's Single UNIX specification http://www.UNIX-systems.org/online.html
.\"   ISO/IEC 9899:1999
.\"
.TH WPRINTF 3  2015-04-19 "GNU" "Linux Programmer's Manual"
.SH NAME
wprintf, fwprintf, swprintf, vwprintf, vfwprintf, vswprintf \- formatted
wide-character output conversion
.SH SYNOPSIS
.nf
.B #include <stdio.h>
.B #include <wchar.h>
.sp
.BI "int wprintf(const wchar_t *" format ", ...);"
.BI "int fwprintf(FILE *" stream ", const wchar_t *" format ", ...);"
.BI "int swprintf(wchar_t *" wcs ", size_t " maxlen ,
.BI "             const wchar_t *" format ", ...);"
.sp
.BI "int vwprintf(const wchar_t *" format ", va_list " args );
.BI "int vfwprintf(FILE *" stream ", const wchar_t *" format ", va_list " args );
.BI "int vswprintf(wchar_t *" wcs ", size_t " maxlen ,
.BI "              const wchar_t *" format ", va_list " args );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
All functions shown above:
.RS 4
.\" .BR wprintf (),
.\" .BR fwprintf (),
.\" .BR swprintf (),
.\" .BR vwprintf (),
.\" .BR vfwprintf (),
.\" .BR vswprintf ():
_XOPEN_SOURCE\ >=\ 500 || _ISOC99_SOURCE ||
.br
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.ad
.SH DESCRIPTION
The
.BR wprintf ()
family of functions is
the wide-character equivalent of the
.BR printf (3)
family of functions.
It performs formatted output of wide
characters.
.PP
The
.BR wprintf ()
and
.BR vwprintf ()
functions
perform wide-character output to
.IR stdout .
.I stdout
must not be byte oriented; see
.BR fwide (3)
for more information.
.PP
The
.BR fwprintf ()
and
.BR vfwprintf ()
functions
perform wide-character output to
.IR stream .
.I stream
must not be byte oriented; see
.BR fwide (3)
for more information.
.PP
The
.BR swprintf ()
and
.BR vswprintf ()
functions
perform wide-character output
to an array of wide characters.
The programmer must ensure that there is
room for at least
.I maxlen
wide
characters at
.IR wcs .
.PP
These functions are like
the
.BR printf (3),
.BR vprintf (3),
.BR fprintf (3),
.BR vfprintf (3),
.BR sprintf (3),
.BR vsprintf (3)
functions except for the
following differences:
.TP
.B \(bu
The
.I format
string is a wide-character string.
.TP
.B \(bu
The output consists of wide characters, not bytes.
.TP
.B \(bu
.BR swprintf ()
and
.BR vswprintf ()
take a
.I maxlen
argument,
.BR sprintf (3)
and
.BR vsprintf (3)
do not.
.RB ( snprintf (3)
and
.BR vsnprintf (3)
take a
.I maxlen
argument, but these functions do not return \-1 upon
buffer overflow on Linux.)
.PP
The treatment of the conversion characters
.BR c
and
.B s
is different:
.TP
.B c
If no
.B l
modifier is present, the
.I int
argument is converted to a wide character by a call to the
.BR btowc (3)
function, and the resulting wide character is written.
If an
.B l
modifier is present, the
.I wint_t
(wide character) argument is written.
.TP
.B s
If no
.B l
modifier is present: The
.I "const\ char\ *"
argument is expected to be a pointer to an array of character type
(pointer to a string) containing a multibyte character sequence beginning
in the initial shift state.
Characters from the array are converted to
wide characters (each by a call to the
.BR mbrtowc (3)
function with a conversion state starting in the initial state before
the first byte).
The resulting wide characters are written up to
(but not including) the terminating null wide character (L\(aq\\0\(aq).
If a precision is
specified, no more wide characters than the number specified are written.
Note that the precision determines the number of
.I wide characters
written, not the number of
.I bytes
or
.IR "screen positions" .
The array must contain a terminating null byte (\(aq\\0\(aq),
unless a precision is given
and it is so small that the number of converted wide characters reaches it
before the end of the array is reached.
If an
.B l
modifier is present: The
.I "const\ wchar_t\ *"
argument is expected to be a pointer to an array of wide characters.
Wide characters from the array are written up to (but not including) a
terminating null wide character.
If a precision is specified, no more than
the number specified are written.
The array must contain a terminating null
wide character, unless a precision is given and it is smaller than or equal
to the number of wide characters in the array.
.SH RETURN VALUE
The functions return the number of wide characters written, excluding the
terminating null wide character in
case of the functions
.BR swprintf ()
and
.BR vswprintf ().
They return \-1 when an error occurs.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbw24 lb lb
l l l.
Interface	Attribute	Value
T{
.BR wprintf (),
.BR fwprintf (),
.br
.BR swprintf (),
.BR vwprintf (),
.br
.BR vfwprintf (),
.BR vswprintf ()
T}	Thread safety	MT-Safe locale
.TE

.SH CONFORMING TO
C99.
.SH NOTES
The behavior of
.BR wprintf ()
et al. depends
on the
.B LC_CTYPE
category of the
current locale.
.PP
If the
.I format
string contains non-ASCII wide characters, the program
will work correctly only if the
.B LC_CTYPE
category of the current locale at
run time is the same as the
.B LC_CTYPE
category of the current locale at
compile time.
This is because the
.I wchar_t
representation is platform- and locale-dependent.
(The glibc represents
wide characters using their Unicode (ISO-10646) code point, but other
platforms don't do this.
Also, the use of C99 universal character names
of the form \\unnnn does not solve this problem.)
Therefore, in
internationalized programs, the
.I format
string should consist of ASCII
wide characters only, or should be constructed at run time in an
internationalized way (e.g., using
.BR gettext (3)
or
.BR iconv (3),
followed by
.BR mbstowcs (3)).
.SH SEE ALSO
.BR fprintf (3),
.BR fputwc (3),
.BR fwide (3),
.BR printf (3),
.BR snprintf (3)
.\" .BR wscanf (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\"  Copyright 2003 walter harms (walter.harms@informatik.uni-oldenburg.de)
.\"
.\" %%%LICENSE_START(GPL_NOVERSION_ONELINE)
.\"  Distributed under GPL
.\" %%%LICENSE_END
.\"
.\"  this is the 3rd type of interface for cryptographic routines
.\"  1. encrypt() expects a bit field
.\"  2. cbc_crypt() byte values
.\"  3. xencrypt() a hexstring
.\"  to bad to be true :(
.\"
.TH XCRYPT 3 2014-08-19 "" "Linux Programmer's Manual"
.SH NAME
xencrypt, xdecrypt, passwd2des \- RFS password encryption
.SH SYNOPSIS
.B "#include <rpc/des_crypt.h>"
.sp
.BI "void passwd2des(char " *passwd ", char *" key ");"
.sp
.BI "int xencrypt(char *" secret ", char *" passwd ");"
.sp
.BI "int xdecrypt(char *" secret ", char *" passwd ");"
.SH DESCRIPTION
The function
.BR passwd2des ()
takes a character string
.I passwd
of arbitrary length and fills a character array
.I key
of length 8.
The array
.I key
is suitable for use as DES key.
It has odd parity set in bit 0 of each byte.
Both other functions described here use this function to turn their
argument
.I passwd
into a DES key.
.LP
The
.BR xencrypt ()
function takes the ASCII character string
.I secret
given in hex,
.\" (over the alphabet 0123456789abcdefABCDEF),
which must have a length that is a multiple of 16,
encrypts it using the DES key derived from
.I passwd
by
.BR passwd2des (),
and outputs the result again in
.I secret
as a hex string
.\" (over the alphabet 0123456789abcdef)
of the same length.
.LP
The
.BR xdecrypt ()
function performs the converse operation.
.SH RETURN VALUE
The functions
.BR xencrypt ()
and
.BR xdecrypt ()
return 1 on success and 0 on error.
.SH VERSIONS
These functions are available in glibc since version 2.1.
.SH BUGS
The prototypes are missing from the abovementioned include file.
.SH SEE ALSO
.BR cbc_crypt (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" This page was taken from the 4.4BSD-Lite CDROM (BSD license)
.\"
.\" %%%LICENSE_START(BSD_ONELINE_CDROM)
.\" This page was taken from the 4.4BSD-Lite CDROM (BSD license)
.\" %%%LICENSE_END
.\"
.\" @(#)xdr.3n	2.2 88/08/03 4.0 RPCSRC; from 1.16 88/03/14 SMI
.\"
.\" 2007-12-30, mtk, Convert function prototypes to modern C syntax
.\"
.TH XDR 3 2015-03-29 "" "Linux Programmer's Manual"
.SH NAME
xdr \- library routines for external data representation
.SH SYNOPSIS AND DESCRIPTION
.LP
These routines allow C programmers to describe
arbitrary data structures in a machine-independent fashion.
Data for remote procedure calls are transmitted using these
routines.

The prototypes below are declared in
.I <rpc/xdr.h>
and make use of the following types:
.in +4n
.nf

.BI "typedef int " bool_t ;

.BI "typedef bool_t (*" xdrproc_t ") (XDR *, void *,...);"
.fi
.in
.LP
For the declaration of the
.I XDR
type, see
.IR <rpc/xdr.h> .
.LP
.nf
.BI "bool_t xdr_array(XDR *" xdrs ", char **" arrp ", unsigned int *" sizep ,
.BI "                 unsigned int " maxsize ", unsigned int " elsize ,
.BI "                 xdrproc_t " elproc );
.fi
.IP
A filter primitive that translates between variable-length arrays
and their corresponding external representations.
The argument
.I arrp
is the address of the pointer to the array, while
.I sizep
is the address of the element count of the array;
this element count cannot exceed
.IR maxsize .
The argument
.I elsize
is the
.I sizeof
each of the array's elements, and
.I elproc
is an XDR filter that translates between
the array elements' C form, and their external
representation.
This routine returns one if it succeeds, zero otherwise.
.LP
.nf
.BI "bool_t xdr_bool(XDR *" xdrs ", bool_t *" bp );
.fi
.IP
A filter primitive that translates between booleans (C
integers)
and their external representations.
When encoding data, this
filter produces values of either one or zero.
This routine returns one if it succeeds, zero otherwise.
.LP
.nf
.BI "bool_t xdr_bytes(XDR *" xdrs ", char **" sp ", unsigned int *" sizep ,
.BI "                 unsigned int " maxsize );
.fi
.IP
A filter primitive that translates between counted byte
strings and their external representations.
The argument
.I sp
is the address of the string pointer.
The length of the
string is located at address
.IR sizep ;
strings cannot be longer than
.IR maxsize .
This routine returns one if it succeeds, zero otherwise.
.LP
.nf
.BI "bool_t xdr_char(XDR *" xdrs ", char *" cp );
.fi
.IP
A filter primitive that translates between C characters
and their external representations.
This routine returns one if it succeeds, zero otherwise.
Note: encoded characters are not packed, and occupy 4 bytes each.
For arrays of characters, it is worthwhile to
consider
.BR xdr_bytes (),
.BR xdr_opaque ()
or
.BR xdr_string ().
.LP
.nf
.BI "void xdr_destroy(XDR *" xdrs );
.fi
.IP
A macro that invokes the destroy routine associated with the XDR stream,
.IR xdrs .
Destruction usually involves freeing private data structures
associated with the stream.
Using
.I xdrs
after invoking
.BR xdr_destroy ()
is undefined.
.LP
.nf
.BI "bool_t xdr_double(XDR *" xdrs ", double *" dp );
.fi
.IP
A filter primitive that translates between C
.I double
precision numbers and their external representations.
This routine returns one if it succeeds, zero otherwise.
.LP
.nf
.BI "bool_t xdr_enum(XDR *" xdrs ", enum_t *" ep );
.fi
.IP
A filter primitive that translates between C
.IR enum s
(actually integers) and their external representations.
This routine returns one if it succeeds, zero otherwise.
.LP
.nf
.BI "bool_t xdr_float(XDR *" xdrs ", float *" fp );
.fi
.IP
A filter primitive that translates between C
.IR float s
and their external representations.
This routine returns one if it succeeds, zero otherwise.
.LP
.nf
.BI "void xdr_free(xdrproc_t " proc ", char *" objp );
.fi
.IP
Generic freeing routine.
The first argument is the XDR routine for the object being freed.
The second argument is a pointer to the object itself.
Note: the pointer passed to this routine is
.I not
freed, but what it points to
.I is
freed (recursively).
.LP
.nf
.BI "unsigned int xdr_getpos(XDR *" xdrs );
.fi
.IP
A macro that invokes the get-position routine
associated with the XDR stream,
.IR xdrs .
The routine returns an unsigned integer,
which indicates the position of the XDR byte stream.
A desirable feature of XDR
streams is that simple arithmetic works with this number,
although the XDR stream instances need not guarantee this.
.LP
.nf
.BI "long *xdr_inline(XDR *" xdrs ", int " len );
.fi
.IP
A macro that invokes the inline routine associated with the XDR stream,
.IR xdrs .
The routine returns a pointer
to a contiguous piece of the stream's buffer;
.I len
is the byte length of the desired buffer.
Note: pointer is cast to
.IR "long\ *" .
.IP
Warning:
.BR xdr_inline ()
may return NULL (0)
if it cannot allocate a contiguous piece of a buffer.
Therefore the behavior may vary among stream instances;
it exists for the sake of efficiency.
.LP
.nf
.BI "bool_t xdr_int(XDR *" xdrs ", int *" ip );
.fi
.IP
A filter primitive that translates between C integers
and their external representations.
This routine returns one if it succeeds, zero otherwise.
.LP
.nf
.BI "bool_t xdr_long(XDR *" xdrs ", long *" lp );
.fi
.IP
A filter primitive that translates between C
.I long
integers and their external representations.
This routine returns one if it succeeds, zero otherwise.
.LP
.nf
.BI "void xdrmem_create(XDR *" xdrs ", char *" addr ", unsigned int " size ,
.BI "                   enum xdr_op " op );
.fi
.IP
This routine initializes the XDR stream object pointed to by
.IR xdrs .
The stream's data is written to, or read from,
a chunk of memory at location
.I addr
whose length is no more than
.I size
bytes long.
The
.I op
determines the direction of the XDR stream (either
.BR XDR_ENCODE ,
.BR XDR_DECODE ,
or
.BR XDR_FREE ).
.LP
.nf
.BI "bool_t xdr_opaque(XDR *" xdrs ", char *" cp ", unsigned int " cnt );
.fi
.IP
A filter primitive that translates between fixed size opaque data
and its external representation.
The argument
.I cp
is the address of the opaque object, and
.I cnt
is its size in bytes.
This routine returns one if it succeeds, zero otherwise.
.LP
.nf
.BI "bool_t xdr_pointer(XDR *" xdrs ", char **" objpp ,
.BI "                   unsigned int " objsize ", xdrproc_t " xdrobj );
.fi
.IP
Like
.BR xdr_reference ()
except that it serializes null pointers, whereas
.BR xdr_reference ()
does not.
Thus,
.BR xdr_pointer ()
can represent
recursive data structures, such as binary trees or
linked lists.
.LP
.nf
.BI "void xdrrec_create(XDR *" xdrs ", unsigned int " sendsize ,
.BI "                   unsigned int " recvsize ", char *" handle ,
.BI "                   int (*" readit ") (char *, char *, int),"
.BI "                   int (*" writeit ") (char *, char *, int));"
.fi
.IP
This routine initializes the XDR stream object pointed to by
.IR xdrs .
The stream's data is written to a buffer of size
.IR sendsize ;
a value of zero indicates the system should use a suitable default.
The stream's data is read from a buffer of size
.IR recvsize ;
it too can be set to a suitable default by passing a zero value.
When a stream's output buffer is full,
.I writeit
is called.
Similarly, when a stream's input buffer is empty,
.I readit
is called.
The behavior of these two routines is similar to
the system calls
.BR read (2)
and
.BR write (2),
except that
.I handle
is passed to the former routines as the first argument.
Note: the XDR stream's
.I op
field must be set by the caller.
.IP
Warning: To read from an XDR stream created by this API,
you'll need to call
.BR xdrrec_skiprecord (3)
first before calling any other XDR APIs.
This inserts additional bytes in the stream to provide
record boundary information.
Also, XDR streams created with different
.BR xdr*_create
APIs are not compatible for the same reason.
.LP
.nf
.BI "bool_t xdrrec_endofrecord(XDR *" xdrs ", int " sendnow );
.fi
.IP
This routine can be invoked only on streams created by
.BR xdrrec_create ().
The data in the output buffer is marked as a completed record,
and the output buffer is optionally written out if
.I sendnow
is nonzero.
This routine returns one if it succeeds, zero otherwise.
.LP
.nf
.BI "bool_t xdrrec_eof(XDR *" xdrs );
.fi
.IP
This routine can be invoked only on streams created by
.BR xdrrec_create ().
After consuming the rest of the current record in the stream,
this routine returns one if the stream has no more input,
zero otherwise.
.LP
.nf
.BI "bool_t xdrrec_skiprecord(XDR *" xdrs );
.fi
.IP
This routine can be invoked only on
streams created by
.BR xdrrec_create ().
It tells the XDR implementation that the rest of the current record
in the stream's input buffer should be discarded.
This routine returns one if it succeeds, zero otherwise.
.LP
.nf
.BI "bool_t xdr_reference(XDR *" xdrs ", char **" pp ", unsigned int " size ,
.BI "                     xdrproc_t " proc );
.fi
.IP
A primitive that provides pointer chasing within structures.
The argument
.I pp
is the address of the pointer;
.I size
is the
.I sizeof
the structure that
.I *pp
points to; and
.I proc
is an XDR procedure that filters the structure
between its C form and its external representation.
This routine returns one if it succeeds, zero otherwise.
.IP
Warning: this routine does not understand null pointers.
Use
.BR xdr_pointer ()
instead.
.LP
.nf
.BI "xdr_setpos(XDR *" xdrs ", unsigned int " pos );
.fi
.IP
A macro that invokes the set position routine associated with
the XDR stream
.IR xdrs .
The argument
.I pos
is a position value obtained from
.BR xdr_getpos ().
This routine returns one if the XDR stream could be repositioned,
and zero otherwise.
.IP
Warning: it is difficult to reposition some types of XDR
streams, so this routine may fail with one
type of stream and succeed with another.
.LP
.nf
.BI "bool_t xdr_short(XDR *" xdrs ", short *" sp );
.fi
.IP
A filter primitive that translates between C
.I short
integers and their external representations.
This routine returns one if it succeeds, zero otherwise.
.LP
.nf
.BI "void xdrstdio_create(XDR *" xdrs ", FILE *" file ", enum xdr_op " op );
.fi
.IP
This routine initializes the XDR stream object pointed to by
.IR xdrs .
The XDR stream data is written to, or read from, the
.I stdio
stream
.IR file .
The argument
.I op
determines the direction of the XDR stream (either
.BR XDR_ENCODE ,
.BR XDR_DECODE ,
or
.BR XDR_FREE ).
.IP
Warning: the destroy routine associated with such XDR streams calls
.BR fflush (3)
on the
.I file
stream, but never
.BR fclose (3).
.LP
.nf
.BI "bool_t xdr_string(XDR *" xdrs ", char **" sp ", unsigned int " maxsize );
.fi
.IP
A filter primitive that translates between C strings and
their corresponding external representations.
Strings cannot be longer than
.IR maxsize .
Note:
.I sp
is the address of the string's pointer.
This routine returns one if it succeeds, zero otherwise.
.LP
.nf
.BI "bool_t xdr_u_char(XDR *" xdrs ", unsigned char *" ucp );
.fi
.IP
A filter primitive that translates between
.I unsigned
C characters and their external representations.
This routine returns one if it succeeds, zero otherwise.
.LP
.nf
.BI "bool_t xdr_u_int(XDR *" xdrs ", unsigned *" up );
.fi
.IP
A filter primitive that translates between C
.I unsigned
integers and their external representations.
This routine returns one if it succeeds, zero otherwise.
.LP
.nf
.BI "bool_t xdr_u_long(XDR *" xdrs ", unsigned long *" ulp );
.fi
.IP
A filter primitive that translates between C
.I "unsigned long"
integers and their external representations.
This routine returns one if it succeeds, zero otherwise.
.LP
.nf
.BI "bool_t xdr_u_short(XDR *" xdrs ", unsigned short *" usp );
.fi
.IP
A filter primitive that translates between C
.I "unsigned short"
integers and their external representations.
This routine returns one if it succeeds, zero otherwise.
.LP
.nf
.BI "bool_t xdr_union(XDR *" xdrs ", int *" dscmp ", char *" unp ,
.BI "                 struct xdr_discrim *" choices ,
.BI "                 xdrproc_t " defaultarm ");     /* may equal NULL */"
.fi
.IP
A filter primitive that translates between a discriminated C
.I union
and its corresponding external representation.
It first
translates the discriminant of the union located at
.IR dscmp .
This discriminant is always an
.IR enum_t .
Next the union located at
.I unp
is translated.
The argument
.I choices
is a pointer to an array of
.BR xdr_discrim ()
structures.
Each structure contains an ordered pair of
.RI [ value , proc ].
If the union's discriminant is equal to the associated
.IR value ,
then the
.I proc
is called to translate the union.
The end of the
.BR xdr_discrim ()
structure array is denoted by a routine of value NULL.
If the discriminant is not found in the
.I choices
array, then the
.I defaultarm
procedure is called (if it is not NULL).
Returns one if it succeeds, zero otherwise.
.LP
.nf
.BI "bool_t xdr_vector(XDR *" xdrs ", char *" arrp ", unsigned int " size ,
.BI "                  unsigned int " elsize ", xdrproc_t " elproc );
.fi
.IP
A filter primitive that translates between fixed-length arrays
and their corresponding external representations.
The argument
.I arrp
is the address of the pointer to the array, while
.I size
is the element count of the array.
The argument
.I elsize
is the
.I sizeof
each of the array's elements, and
.I elproc
is an XDR filter that translates between
the array elements' C form, and their external
representation.
This routine returns one if it succeeds, zero otherwise.
.LP
.nf
.BI "bool_t xdr_void(void);"
.fi
.IP
This routine always returns one.
It may be passed to RPC routines that require a function argument,
where nothing is to be done.
.LP
.nf
.BI "bool_t xdr_wrapstring(XDR *" xdrs ", char **" sp );
.fi
.IP
A primitive that calls
.B "xdr_string(xdrs, sp,MAXUN.UNSIGNED );"
where
.B MAXUN.UNSIGNED
is the maximum value of an unsigned integer.
.BR xdr_wrapstring ()
is handy because the RPC package passes a maximum of two XDR
routines as arguments, and
.BR xdr_string (),
one of the most frequently used primitives, requires three.
Returns one if it succeeds, zero otherwise.
.SH SEE ALSO
.BR rpc (3)
.LP
The following manuals:
.RS
eXternal Data Representation Standard: Protocol Specification
.br
eXternal Data Representation: Sun Technical Notes
.br
.IR "XDR: External Data Representation Standard" ,
RFC\ 1014, Sun Microsystems, Inc.,
USC-ISI.
.RE
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\" and Copyright 2008, Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified Sat Jul 24 19:08:17 1993 by Rik Faith (faith@cs.unc.edu)
.\" Modified 2002-08-25, aeb
.\" Modified 2004-11-12 as per suggestion by Fabian Kreutz/AEB
.\" 2008-07-24, mtk, created this page, based on material from j0.3.
.\"
.TH Y0 3  2015-04-19 "" "Linux Programmer's Manual"
.SH NAME
y0, y0f, y0l, y1, y1f, y1l, yn, ynf, ynl \-
Bessel functions of the second kind
.SH SYNOPSIS
.nf
.B #include <math.h>
.sp
.BI "double y0(double " x );
.br
.BI "double y1(double " x );
.br
.BI "double yn(int " n ", double " x );
.sp
.BI "float y0f(float " x );
.br
.BI "float y1f(float " x );
.br
.BI "float ynf(int " n ", float " x );
.sp
.BI "long double y0l(long double " x );
.br
.BI "long double y1l(long double " x );
.br
.BI "long double ynl(int " n ", long double " x );
.fi
.sp
Link with \fI\-lm\fP.
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR y0 (),
.BR y1 (),
.BR yn ():
.RS 4
_SVID_SOURCE || _BSD_SOURCE || _XOPEN_SOURCE
.RE
.br
.BR y0f (),
.BR y0l (),
.BR y1f (),
.BR y1l (),
.BR ynf (),
.BR ynl ():
.RS 4
_SVID_SOURCE || _BSD_SOURCE || _XOPEN_SOURCE\ >=\ 600
.\" Also seems to work: -std=c99 -D_XOPEN_SOURCE
.RE
.ad b
.SH DESCRIPTION
.PP
The
.BR y0 ()
and
.BR y1 ()
functions return Bessel functions of
.I x
of the second kind of orders 0 and 1, respectively.
The
.BR yn ()
function
returns the Bessel function of
.I x
of the second kind of order
.IR n .
.PP
The value of
.I x
must be positive.
.PP
The
.BR y0f (),
.BR y1f (),
and
.BR ynf ()
functions are versions that take and return
.I float
values.
The
.BR y0l (),
.BR y1l (),
and
.BR ynl ()
functions are versions that take and return
.I "long double"
values.
.SH RETURN VALUE
On success, these functions return the appropriate
Bessel value of the second kind for
.IR x .

If
.I x
is a NaN, a NaN is returned.

If
.I x
is negative,
a domain error occurs,
and the functions return
.RB - HUGE_VAL ,
.RB - HUGE_VALF ,
or
.RB - HUGE_VALL ,
respectively.
(POSIX.1-2001 also allows a NaN return for this case.)

If
.I x
is 0.0,
a pole error occurs,
and the functions return
.RB - HUGE_VAL ,
.RB - HUGE_VALF ,
or
.RB - HUGE_VALL ,
respectively.

If the result underflows,
a range error occurs,
and the functions return 0.0

If the result overflows,
a range error occurs,
and the functions return
.RB - HUGE_VAL ,
.RB - HUGE_VALF ,
or
.RB - HUGE_VALL ,
respectively.
(POSIX.1-2001 also allows a 0.0 return for this case.)
.SH ERRORS
See
.BR math_error (7)
for information on how to determine whether an error has occurred
when calling these functions.
.PP
The following errors can occur:
.TP
Domain error: \fIx\fP is negative
.I errno
is set to
.BR EDOM .
An invalid floating-point exception
.RB ( FE_INVALID )
is raised.
.TP
Pole error: \fIx\fP is 0.0
.\" Before POSIX.1-2001 TC2, this was (inconsistently) specified
.\" as a range error.
.I errno
is set to
.\" FIXME . y0(0.0) gives EDOM
.BR ERANGE
(but see BUGS).
No
.B FE_DIVBYZERO
exception is returned by
.BR fetestexcept (3)
for this case.
.\" Bug raised: http://sources.redhat.com/bugzilla/show_bug.cgi?id=6808
.TP
Range error: result underflow
.\" e.g., y0(1e33) on glibc 2.8/x86-32
.I errno
is set to
.BR ERANGE .
.\" An underflow floating-point exception
.\" .RB ( FE_UNDERFLOW )
.\" is raised.
.\" FIXME . Is it intentional that these functions do not use FE_*?
.\" Bug raised: http://sources.redhat.com/bugzilla/show_bug.cgi?id=6806
No
.B FE_UNDERFLOW
exception is returned by
.BR fetestexcept (3)
for this case.
.TP
Range error: result overflow
.\" e.g., yn(10, 1e-40) on glibc 2.8/x86-32
.\" .I errno
.\" is set to
.\" .BR ERANGE .
.I errno
is not set for this case.
.\" FIXME . Is it intentional that errno is not set?
.\" Bug raised: http://sources.redhat.com/bugzilla/show_bug.cgi?id=6808
An overflow floating-point exception
.RB ( FE_OVERFLOW )
is raised.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR y0 (),
.BR y0f (),
.BR y0l ()
T}	Thread safety	MT-Safe
T{
.BR y1 (),
.BR y1f (),
.BR y1l ()
T}	Thread safety	MT-Safe
T{
.BR yn (),
.BR ynf (),
.BR ynl ()
T}	Thread safety	MT-Safe
.TE
.SH CONFORMING TO
The functions returning
.I double
conform to SVr4, 4.3BSD,
POSIX.1-2001, POSIX.1-2008.
The others are nonstandard functions that also exist on the BSDs.
.SH BUGS
On a pole error, these functions set
.I errno
to
.BR EDOM ,
instead of
.BR ERANGE
as POSIX.1-2004 requires.
.\" FIXME .
.\" Bug raised: http://sourceware.org/bugzilla/show_bug.cgi?id=6807

In glibc version 2.3.2 and earlier,
.\" FIXME . Actually, 2.3.2 is the earliest test result I have; so yet
.\" to confirm if this error occurs only in 2.3.2.
these functions do not raise an invalid floating-point exception
.RB ( FE_INVALID )
when a domain error occurs.
.SH SEE ALSO
.BR j0 (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
