'\" t
.\" Copyright (c) 2010 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH AIO 7 2015-05-07 "Linux" "Linux Programmer's Manual"
.SH NAME
aio \- POSIX asynchronous I/O overview
.SH DESCRIPTION
The POSIX asynchronous I/O (AIO) interface allows applications
to initiate one or more I/O operations that are performed
asynchronously (i.e., in the background).
The application can elect to be notified of completion of
the I/O operation in a variety of ways:
by delivery of a signal, by instantiation of a thread,
or no notification at all.

The POSIX AIO interface consists of the following functions:
.TP 16
.BR aio_read (3)
Enqueue a read request.
This is the asynchronous analog of
.BR read (2).
.TP
.BR aio_write (3)
Enqueue a write request.
This is the asynchronous analog of
.BR write (2).
.TP
.BR aio_fsync (3)
Enqueue a sync request for the I/O operations on a file descriptor.
This is the asynchronous analog of
.BR fsync (2)
and
.BR fdatasync (2).
.TP
.BR aio_error (3)
Obtain the error status of an enqueued I/O request.
.TP
.BR aio_return (3)
Obtain the return status of a completed I/O request.
.TP
.BR aio_suspend (3)
Suspend the caller until one or more of a specified set of
I/O requests completes.
.TP
.BR aio_cancel (3)
Attempt to cancel outstanding I/O requests on a specified
file descriptor.
.TP
.BR lio_listio (3)
Enqueue multiple I/O requests using a single function call.
.PP
The
.I aiocb
("asynchronous I/O control block") structure defines
parameters that control an I/O operation.
An argument of this type is employed with all of the functions listed above.
This structure has the following form:
.PP
.in +4n
.nf
#include <aiocb.h>

struct aiocb {
    /* The order of these fields is implementation-dependent */

    int             aio_fildes;     /* File descriptor */
    off_t           aio_offset;     /* File offset */
    volatile void  *aio_buf;        /* Location of buffer */
    size_t          aio_nbytes;     /* Length of transfer */
    int             aio_reqprio;    /* Request priority */
    struct sigevent aio_sigevent;   /* Notification method */
    int             aio_lio_opcode; /* Operation to be performed;
                                       lio_listio() only */

    /* Various implementation-internal fields not shown */
};

/* Operation codes for \(aqaio_lio_opcode\(aq: */

enum { LIO_READ, LIO_WRITE, LIO_NOP };

.fi
.in
The fields of this structure are as follows:
.TP 16
.I aio_filedes
The file descriptor on which the I/O operation is to be performed.
.TP
.I aio_offset
This is the file offset at which the I/O operation is to be performed.
.TP
.I aio_buf
This is the buffer used to transfer data for a read or write operation.
.TP
.I aio_nbytes
This is the size of the buffer pointed to by
.IR aio_buf .
.TP
.I aio_reqprio
This field specifies a value that is subtracted
from the calling thread's real-time priority in order to
determine the priority for execution of this I/O request (see
.BR pthread_setschedparam (3)).
The specified value must be between 0 and the value returned by
.IR sysconf(_SC_AIO_PRIO_DELTA_MAX) .
This field is ignored for file synchronization operations.
.TP
.I aio_sigevent
This field is a structure that specifies how the caller is
to be notified when the asynchronous I/O operation completes.
Possible values for
.IR aio_sigevent.sigev_notify
are
.BR SIGEV_NONE ,
.BR SIGEV_SIGNAL ,
and
.BR SIGEV_THREAD .
See
.BR sigevent (7)
for further details.
.TP
.I aio_lio_opcode
The type of operation to be performed; used only for
.BR lio_listio (3).
.PP
In addition to the standard functions listed above,
the GNU C library provides the following extension to the POSIX AIO API:
.TP 16
.BR aio_init (3)
Set parameters for tuning the behavior of the glibc POSIX AIO implementation.
.SH ERRORS
.TP
.B EINVAL
The
.I aio_reqprio
field of the
.I aiocb
structure was less than 0,
or was greater than the limit returned by the call
.IR sysconf(_SC_AIO_PRIO_DELTA_MAX) .
.SH VERSIONS
The POSIX AIO interfaces are provided by glibc since version 2.1.
.SH CONFORMING TO
POSIX.1-2001, POSIX.1-2008.
.SH NOTES
It is a good idea to zero out the control block buffer before use (see
.BR memset (3)).
The control block buffer and the buffer pointed to by
.I aio_buf
must not be changed while the I/O operation is in progress.
These buffers must remain valid until the I/O operation completes.

Simultaneous asynchronous read or write operations using the same
.I aiocb
structure yield undefined results.

The current Linux POSIX AIO implementation is provided in user space by glibc.
This has a number of limitations, most notably that maintaining multiple
threads to perform I/O operations is expensive and scales poorly.
Work has been in progress for some time on a kernel
state-machine-based implementation of asynchronous I/O
(see
.BR io_submit (2),
.BR io_setup (2),
.BR io_cancel (2),
.BR io_destroy (2),
.BR io_getevents (2)),
but this implementation hasn't yet matured to the point where
the POSIX AIO implementation can be completely
reimplemented using the kernel system calls.
.\" http://lse.sourceforge.net/io/aio.html
.\" http://lse.sourceforge.net/io/aionotes.txt
.\" http://lwn.net/Articles/148755/
.SH EXAMPLE
The program below opens each of the files named in its command-line
arguments and queues a request on the resulting file descriptor using
.BR aio_read (3).
The program then loops,
periodically monitoring each of the I/O operations
that is still in progress using
.BR aio_error (3).
Each of the I/O requests is set up to provide notification by delivery
of a signal.
After all I/O requests have completed,
the program retrieves their status using
.BR aio_return (3).

The
.B SIGQUIT
signal (generated by typing control-\\) causes the program to request
cancellation of each of the outstanding requests using
.BR aio_cancel (3).

Here is an example of what we might see when running this program.
In this example, the program queues two requests to standard input,
and these are satisfied by two lines of input containing
"abc" and "x".

.in +4n
.nf
$ \fB./a.out /dev/stdin /dev/stdin\fP
opened /dev/stdin on descriptor 3
opened /dev/stdin on descriptor 4
aio_error():
    for request 0 (descriptor 3): In progress
    for request 1 (descriptor 4): In progress
\fBabc\fP
I/O completion signal received
aio_error():
    for request 0 (descriptor 3): I/O succeeded
    for request 1 (descriptor 4): In progress
aio_error():
    for request 1 (descriptor 4): In progress
\fBx\fP
I/O completion signal received
aio_error():
    for request 1 (descriptor 4): I/O succeeded
All I/O requests completed
aio_return():
    for request 0 (descriptor 3): 4
    for request 1 (descriptor 4): 2
.fi
.in
.SS Program source
\&
.nf
#include <stdlib.h>
#include <unistd.h>
#include <stdio.h>
#include <errno.h>
#include <aio.h>
#include <signal.h>

#define BUF_SIZE 20     /* Size of buffers for read operations */

#define errExit(msg) do { perror(msg); exit(EXIT_FAILURE); } while (0)

#define errMsg(msg)  do { perror(msg); } while (0)

struct ioRequest {      /* Application\-defined structure for tracking
                           I/O requests */
    int           reqNum;
    int           status;
    struct aiocb *aiocbp;
};

static volatile sig_atomic_t gotSIGQUIT = 0;
                        /* On delivery of SIGQUIT, we attempt to
                           cancel all outstanding I/O requests */

static void             /* Handler for SIGQUIT */
quitHandler(int sig)
{
    gotSIGQUIT = 1;
}

#define IO_SIGNAL SIGUSR1   /* Signal used to notify I/O completion */

static void                 /* Handler for I/O completion signal */
aioSigHandler(int sig, siginfo_t *si, void *ucontext)
{
    write(STDOUT_FILENO, "I/O completion signal received\\n", 31);

    /* The corresponding ioRequest structure would be available as
           struct ioRequest *ioReq = si\->si_value.sival_ptr;
       and the file descriptor would then be available via
           ioReq\->aiocbp\->aio_fildes */
}

int
main(int argc, char *argv[])
{
    struct ioRequest *ioList;
    struct aiocb *aiocbList;
    struct sigaction sa;
    int s, j;
    int numReqs;        /* Total number of queued I/O requests */
    int openReqs;       /* Number of I/O requests still in progress */

    if (argc < 2) {
        fprintf(stderr, "Usage: %s <pathname> <pathname>...\\n",
                argv[0]);
        exit(EXIT_FAILURE);
    }

    numReqs = argc \- 1;

    /* Allocate our arrays */

    ioList = calloc(numReqs, sizeof(struct ioRequest));
    if (ioList == NULL)
        errExit("calloc");

    aiocbList = calloc(numReqs, sizeof(struct aiocb));
    if (aiocbList == NULL)
        errExit("calloc");

    /* Establish handlers for SIGQUIT and the I/O completion signal */

    sa.sa_flags = SA_RESTART;
    sigemptyset(&sa.sa_mask);

    sa.sa_handler = quitHandler;
    if (sigaction(SIGQUIT, &sa, NULL) == \-1)
        errExit("sigaction");

    sa.sa_flags = SA_RESTART | SA_SIGINFO;
    sa.sa_sigaction = aioSigHandler;
    if (sigaction(IO_SIGNAL, &sa, NULL) == \-1)
        errExit("sigaction");

    /* Open each file specified on the command line, and queue
       a read request on the resulting file descriptor */

    for (j = 0; j < numReqs; j++) {
        ioList[j].reqNum = j;
        ioList[j].status = EINPROGRESS;
        ioList[j].aiocbp = &aiocbList[j];

        ioList[j].aiocbp\->aio_fildes = open(argv[j + 1], O_RDONLY);
        if (ioList[j].aiocbp\->aio_fildes == \-1)
            errExit("open");
        printf("opened %s on descriptor %d\\n", argv[j + 1],
                ioList[j].aiocbp\->aio_fildes);

        ioList[j].aiocbp\->aio_buf = malloc(BUF_SIZE);
        if (ioList[j].aiocbp\->aio_buf == NULL)
            errExit("malloc");

        ioList[j].aiocbp\->aio_nbytes = BUF_SIZE;
        ioList[j].aiocbp\->aio_reqprio = 0;
        ioList[j].aiocbp\->aio_offset = 0;
        ioList[j].aiocbp\->aio_sigevent.sigev_notify = SIGEV_SIGNAL;
        ioList[j].aiocbp\->aio_sigevent.sigev_signo = IO_SIGNAL;
        ioList[j].aiocbp\->aio_sigevent.sigev_value.sival_ptr =
                                &ioList[j];

        s = aio_read(ioList[j].aiocbp);
        if (s == \-1)
            errExit("aio_read");
    }

    openReqs = numReqs;

    /* Loop, monitoring status of I/O requests */

    while (openReqs > 0) {
        sleep(3);       /* Delay between each monitoring step */

        if (gotSIGQUIT) {

            /* On receipt of SIGQUIT, attempt to cancel each of the
               outstanding I/O requests, and display status returned
               from the cancellation requests */

            printf("got SIGQUIT; canceling I/O requests: \\n");

            for (j = 0; j < numReqs; j++) {
                if (ioList[j].status == EINPROGRESS) {
                    printf("    Request %d on descriptor %d:", j,
                            ioList[j].aiocbp\->aio_fildes);
                    s = aio_cancel(ioList[j].aiocbp\->aio_fildes,
                            ioList[j].aiocbp);
                    if (s == AIO_CANCELED)
                        printf("I/O canceled\\n");
                    else if (s == AIO_NOTCANCELED)
                            printf("I/O not canceled\\n");
                    else if (s == AIO_ALLDONE)
                        printf("I/O all done\\n");
                    else
                        errMsg("aio_cancel");
                }
            }

            gotSIGQUIT = 0;
        }

        /* Check the status of each I/O request that is still
           in progress */

        printf("aio_error():\\n");
        for (j = 0; j < numReqs; j++) {
            if (ioList[j].status == EINPROGRESS) {
                printf("    for request %d (descriptor %d): ",
                        j, ioList[j].aiocbp\->aio_fildes);
                ioList[j].status = aio_error(ioList[j].aiocbp);

                switch (ioList[j].status) {
                case 0:
                    printf("I/O succeeded\\n");
                    break;
                case EINPROGRESS:
                    printf("In progress\\n");
                    break;
                case ECANCELED:
                    printf("Canceled\\n");
                    break;
                default:
                    errMsg("aio_error");
                    break;
                }

                if (ioList[j].status != EINPROGRESS)
                    openReqs\-\-;
            }
        }
    }

    printf("All I/O requests completed\\n");

    /* Check status return of all I/O requests */

    printf("aio_return():\\n");
    for (j = 0; j < numReqs; j++) {
        ssize_t s;

        s = aio_return(ioList[j].aiocbp);
        printf("    for request %d (descriptor %d): %zd\\n",
                j, ioList[j].aiocbp\->aio_fildes, s);
    }

    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.ad l
.nh
.BR io_cancel (2),
.BR io_destroy (2),
.BR io_getevents (2),
.BR io_setup (2),
.BR io_submit (2),
.BR aio_cancel (3),
.BR aio_error (3),
.BR aio_init (3),
.BR aio_read (3),
.BR aio_return (3),
.BR aio_write (3),
.BR lio_listio (3)

"Asynchronous I/O Support in Linux 2.5",
Bhattacharya, Pratt, Pulavarty, and Morgan,
Proceedings of the Linux Symposium, 2003,
.UR https://www.kernel.org/doc/ols/2003/ols2003-pages-351-366.pdf
.UE
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
'\" t -*- coding: UTF-8 -*-
.\" Copyright 2009  Lefteris Dimitroulakis <edimitro at tee.gr>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.TH ARMSCII-8 7 2014-10-02 "Linux" "Linux Programmer's Manual"
.SH NAME
armscii-8 \- Armenian character set encoded in octal, decimal,
and hexadecimal
.SH DESCRIPTION
The Armenian Standard Code for Information Interchange,
8-bit coded character set.
.SS ArmSCII-8 characters
The following table displays the characters in ArmSCII-8, which
are printable and unlisted in the
.BR ascii (7)
manual page.
.TS
l l l c lp-1.
Oct	Dec	Hex	Char	Description
_
240	160	A0	 	NO-BREAK SPACE
242	162	A2	և	ARMENIAN SMALL LIGATURE ECH YIWN
243	163	A3	։	ARMENIAN FULL STOP
244	164	A4	)	RIGHT PARENTHESIS
245	165	A5	(	LEFT PARENTHESIS
246	166	A6	»	RIGHT-POINTING DOUBLE ANGLE QUOTATION MARK
247	167	A7	«	LEFT-POINTING DOUBLE ANGLE QUOTATION MARK
250	168	A8	—	EM DASH
251	169	A9	.	FULL STOP
252	170	AA	՝	ARMENIAN COMMA
253	171	AB	,	COMMA
254	172	AC	-	HYPHEN-MINUS
255	173	AD	֊	ARMENIAN HYPHEN
256	174	AE	…	HORIZONTAL ELLIPSIS
257	175	AF	՜	ARMENIAN EXCLAMATION MARK
260	176	B0	՛	ARMENIAN EMPHASIS MARK
261	177	B1	՞	ARMENIAN QUESTION MARK
262	178	B2	Ա	ARMENIAN CAPITAL LETTER AYB
263	179	B3	ա	ARMENIAN SMALL LETTER AYB
264	180	B4	Բ	ARMENIAN CAPITAL LETTER BEN
265	181	B5	բ	ARMENIAN SMALL LETTER BEN
266	182	B6	Գ	ARMENIAN CAPITAL LETTER GIM
267	183	B7	գ	ARMENIAN SMALL LETTER GIM
270	184	B8	Դ	ARMENIAN CAPITAL LETTER DA
271	185	B9	դ	ARMENIAN SMALL LETTER DA
272	186	BA	Ե	ARMENIAN CAPITAL LETTER ECH
273	187	BB	ե	ARMENIAN SMALL LETTER ECH
274	188	BC	Զ	ARMENIAN CAPITAL LETTER ZA
275	189	BD	զ	ARMENIAN SMALL LETTER ZA
276	190	BE	Է	ARMENIAN CAPITAL LETTER EH
277	191	BF	է	ARMENIAN SMALL LETTER EH
300	192	C0	Ը	ARMENIAN CAPITAL LETTER ET
301	193	C1	ը	ARMENIAN SMALL LETTER ET
302	194	C2	Թ	ARMENIAN CAPITAL LETTER TO
303	195	C3	թ	ARMENIAN SMALL LETTER TO
304	196	C4	Ժ	ARMENIAN CAPITAL LETTER ZHE
305	197	C5	ժ	ARMENIAN SMALL LETTER ZHE
306	198	C6	Ի	ARMENIAN CAPITAL LETTER INI
307	199	C7	ի	ARMENIAN SMALL LETTER INI
310	200	C8	Լ	ARMENIAN CAPITAL LETTER LIWN
311	201	C9	լ	ARMENIAN SMALL LETTER LIWN
312	202	CA	Խ	ARMENIAN CAPITAL LETTER XEH
313	203	CB	խ	ARMENIAN SMALL LETTER XEH
314	204	CC	Ծ	ARMENIAN CAPITAL LETTER CA
315	205	CD	ծ	ARMENIAN SMALL LETTER CA
316	206	CE	Կ	ARMENIAN CAPITAL LETTER KEN
317	207	CF	կ	ARMENIAN SMALL LETTER KEN
320	208	D0	Հ	ARMENIAN CAPITAL LETTER HO
321	209	D1	հ	ARMENIAN SMALL LETTER HO
322	210	D2	Ձ	ARMENIAN CAPITAL LETTER JA
323	211	D3	ձ	ARMENIAN SMALL LETTER JA
324	212	D4	Ղ	ARMENIAN CAPITAL LETTER GHAD
325	213	D5	ղ	ARMENIAN SMALL LETTER GHAD
326	214	D6	Ճ	ARMENIAN CAPITAL LETTER CHEH
327	215	D7	ճ	ARMENIAN SMALL LETTER CHEH
330	216	D8	Մ	ARMENIAN CAPITAL LETTER MEN
331	217	D9	մ	ARMENIAN SMALL LETTER MEN
332	218	DA	Յ	ARMENIAN CAPITAL LETTER YI
333	219	DB	յ	ARMENIAN SMALL LETTER YI
334	220	DC	Ն	ARMENIAN CAPITAL LETTER NOW
335	221	DD	ն	ARMENIAN SMALL LETTER NOW
336	222	DE	Շ	ARMENIAN CAPITAL LETTER SHA
337	223	DF	շ	ARMENIAN SMALL LETTER SHA
340	224	E0	Ո	ARMENIAN CAPITAL LETTER VO
341	225	E1	ո	ARMENIAN SMALL LETTER VO
342	226	E2	Չ	ARMENIAN CAPITAL LETTER CHA
343	227	E3	չ	ARMENIAN SMALL LETTER CHA
344	228	E4	Պ	ARMENIAN CAPITAL LETTER PEH
345	229	E5	պ	ARMENIAN SMALL LETTER PEH
346	230	E6	Ջ	ARMENIAN CAPITAL LETTER JHEH
347	231	E7	ջ	ARMENIAN SMALL LETTER JHEH
350	232	E8	Ռ	ARMENIAN CAPITAL LETTER RA
351	233	E9	ռ	ARMENIAN SMALL LETTER RA
352	234	EA	Ս	ARMENIAN CAPITAL LETTER SEH
353	235	EB	ս	ARMENIAN SMALL LETTER SEH
354	236	EC	Վ	ARMENIAN CAPITAL LETTER VEW
355	237	ED	վ	ARMENIAN SMALL LETTER VEW
356	238	EE	Տ	ARMENIAN CAPITAL LETTER TIWN
357	239	EF	տ	ARMENIAN SMALL LETTER TIWN
360	240	F0	Ր	ARMENIAN CAPITAL LETTER REH
361	241	F1	ր	ARMENIAN SMALL LETTER REH
362	242	F2	Ց	ARMENIAN CAPITAL LETTER CO
363	243	F3	ց	ARMENIAN SMALL LETTER CO
364	244	F4	Ւ	ARMENIAN CAPITAL LETTER YIWN
365	245	F5	ւ	ARMENIAN SMALL LETTER YIWN
366	246	F6	Փ	ARMENIAN CAPITAL LETTER PIWR
367	247	F7	փ	ARMENIAN SMALL LETTER PIWR
370	248	F8	Ք	ARMENIAN CAPITAL LETTER KEH
371	249	F9	ք	ARMENIAN SMALL LETTER KEH
372	250	FA	Օ	ARMENIAN CAPITAL LETTER OH
373	251	FB	օ	ARMENIAN SMALL LETTER OH
374	252	FC	Ֆ	ARMENIAN CAPITAL LETTER FEH
375	253	FD	ֆ	ARMENIAN SMALL LETTER FEH
376	254	FE	՚	ARMENIAN APOSTROPHE
.TE
.SH SEE ALSO
.BR ascii (7),
.BR charsets (7),
.BR utf-8 (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
'\" t
.\" This man page is Copyright (C) 1999 Matthew Wilcox <willy@bofh.ai>.
.\" %%%LICENSE_START(VERBATIM_ONE_PARA)
.\" Permission is granted to distribute possibly modified copies
.\" of this page provided the header is included verbatim,
.\" and in case of nontrivial modification author and date
.\" of the modification is added to the header.
.\" %%%LICENSE_END
.\"
.\" Modified June 1999 Andi Kleen
.\" $Id: arp.7,v 1.10 2000/04/27 19:31:38 ak Exp $
.\"
.TH ARP 7 2008-11-25 "Linux" "Linux Programmer's Manual"
.SH NAME
arp \- Linux ARP kernel module.
.SH DESCRIPTION
This kernel protocol module implements the Address Resolution
Protocol defined in RFC\ 826.
It is used to convert between Layer2 hardware addresses
and IPv4 protocol addresses on directly connected networks.
The user normally doesn't interact directly with this module except to
configure it;
instead it provides a service for other protocols in the kernel.

A user process can receive ARP packets by using
.BR packet (7)
sockets.
There is also a mechanism for managing the ARP cache
in user-space by using
.BR netlink (7)
sockets.
The ARP table can also be controlled via
.BR ioctl (2)
on any
.B AF_INET
socket.

The ARP module maintains a cache of mappings between hardware addresses
and protocol addresses.
The cache has a limited size so old and less
frequently used entries are garbage-collected.
Entries which are marked
as permanent are never deleted by the garbage-collector.
The cache can
be directly manipulated by the use of ioctls and its behavior can be
tuned by the
.I /proc
interfaces described below.

When there is no positive feedback for an existing mapping after some
time (see the
.I /proc
interfaces below), a neighbor cache entry is considered stale.
Positive feedback can be gotten from a higher layer; for example from
a successful TCP ACK.
Other protocols can signal forward progress
using the
.B MSG_CONFIRM
flag to
.BR sendmsg (2).
When there is no forward progress, ARP tries to reprobe.
It first tries to ask a local arp daemon
.B app_solicit
times for an updated MAC address.
If that fails and an old MAC address is known, a unicast probe is sent
.B ucast_solicit
times.
If that fails too, it will broadcast a new ARP
request to the network.
Requests are sent only when there is data queued
for sending.

Linux will automatically add a nonpermanent proxy arp entry when it
receives a request for an address it forwards to and proxy arp is
enabled on the receiving interface.
When there is a reject route for the target, no proxy arp entry is added.
.SS Ioctls
Three ioctls are available on all
.B AF_INET
sockets.
They take a pointer to a
.I struct arpreq
as their argument.

.in +4n
.nf
struct arpreq {
    struct sockaddr arp_pa;      /* protocol address */
    struct sockaddr arp_ha;      /* hardware address */
    int             arp_flags;   /* flags */
    struct sockaddr arp_netmask; /* netmask of protocol address */
    char            arp_dev[16];
};
.fi
.in

.BR SIOCSARP ", " SIOCDARP " and " SIOCGARP
respectively set, delete and get an ARP mapping.
Setting and deleting ARP maps are privileged operations and may
be performed only by a process with the
.B CAP_NET_ADMIN
capability or an effective UID of 0.

.I arp_pa
must be an
.B AF_INET
address and
.I arp_ha
must have the same type as the device which is specified in
.IR arp_dev .
.I arp_dev
is a zero-terminated string which names a device.
.RS
.TS
tab(:) allbox;
c s
l l.
\fIarp_flags\fR
flag:meaning
ATF_COM:Lookup complete
ATF_PERM:Permanent entry
ATF_PUBL:Publish entry
ATF_USETRAILERS:Trailers requested
ATF_NETMASK:Use a netmask
ATF_DONTPUB:Don't answer
.TE
.RE
.PP
If the
.B ATF_NETMASK
flag is set, then
.I arp_netmask
should be valid.
Linux 2.2 does not support proxy network ARP entries, so this
should be set to 0xffffffff, or 0 to remove an existing proxy arp entry.
.B ATF_USETRAILERS
is obsolete and should not be used.
.SS /proc interfaces
ARP supports a range of
.I /proc
interfaces to configure parameters on a global or per-interface basis.
The interfaces can be accessed by reading or writing the
.I /proc/sys/net/ipv4/neigh/*/*
files.
Each interface in the system has its own directory in
.IR /proc/sys/net/ipv4/neigh/ .
The setting in the "default" directory is used for all newly created
devices.
Unless otherwise specified, time-related interfaces are specified
in seconds.
.TP
.IR anycast_delay " (since Linux 2.2)"
.\" Precisely: 2.1.79
The maximum number of jiffies to delay before replying to a
IPv6 neighbor solicitation message.
Anycast support is not yet implemented.
Defaults to 1 second.
.TP
.IR app_solicit " (since Linux 2.2)"
.\" Precisely: 2.1.79
The maximum number of probes to send to the user space ARP daemon via
netlink before dropping back to multicast probes (see
.IR mcast_solicit ).
Defaults to 0.
.TP
.IR base_reachable_time " (since Linux 2.2)"
.\" Precisely: 2.1.79
Once a neighbor has been found, the entry is considered to be valid
for at least a random value between
.IR base_reachable_time "/2 and 3*" base_reachable_time /2.
An entry's validity will be extended if it receives positive feedback
from higher level protocols.
Defaults to 30 seconds.
This file is now obsolete in favor of
.IR base_reachable_time_ms .
.TP
.IR base_reachable_time_ms " (since Linux 2.6.12)"
As for
.IR base_reachable_time ,
but measures time in milliseconds.
Defaults to 30000 milliseconds.
.TP
.IR delay_first_probe_time " (since Linux 2.2)"
.\" Precisely: 2.1.79
Delay before first probe after it has been decided that a neighbor
is stale.
Defaults to 5 seconds.
.TP
.IR gc_interval " (since Linux 2.2)"
.\" Precisely: 2.1.79
How frequently the garbage collector for neighbor entries
should attempt to run.
Defaults to 30 seconds.
.TP
.IR gc_stale_time " (since Linux 2.2)"
.\" Precisely: 2.1.79
Determines how often to check for stale neighbor entries.
When a neighbor entry is considered stale, it is resolved again before
sending data to it.
Defaults to 60 seconds.
.TP
.IR gc_thresh1 " (since Linux 2.2)"
.\" Precisely: 2.1.79
The minimum number of entries to keep in the ARP cache.
The garbage collector will not run if there are fewer than
this number of entries in the cache.
Defaults to 128.
.TP
.IR gc_thresh2 " (since Linux 2.2)"
.\" Precisely: 2.1.79
The soft maximum number of entries to keep in the ARP cache.
The garbage collector will allow the number of entries to exceed
this for 5 seconds before collection will be performed.
Defaults to 512.
.TP
.IR gc_thresh3 " (since Linux 2.2)"
.\" Precisely: 2.1.79
The hard maximum number of entries to keep in the ARP cache.
The garbage collector will always run if there are more than
this number of entries in the cache.
Defaults to 1024.
.TP
.IR locktime " (since Linux 2.2)"
.\" Precisely: 2.1.79
The minimum number of jiffies to keep an ARP entry in the cache.
This prevents ARP cache thrashing if there is more than one potential
mapping (generally due to network misconfiguration).
Defaults to 1 second.
.TP
.IR mcast_solicit " (since Linux 2.2)"
.\" Precisely: 2.1.79
The maximum number of attempts to resolve an address by
multicast/broadcast before marking the entry as unreachable.
Defaults to 3.
.TP
.IR proxy_delay " (since Linux 2.2)"
.\" Precisely: 2.1.79
When an ARP request for a known proxy-ARP address is received, delay up to
.I proxy_delay
jiffies before replying.
This is used to prevent network flooding in some cases.
Defaults to 0.8 seconds.
.TP
.IR proxy_qlen " (since Linux 2.2)"
.\" Precisely: 2.1.79
The maximum number of packets which may be queued to proxy-ARP addresses.
Defaults to 64.
.TP
.IR retrans_time " (since Linux 2.2)"
.\" Precisely: 2.1.79
The number of jiffies to delay before retransmitting a request.
Defaults to 1 second.
This file is now obsolete in favor of
.IR retrans_time_ms .
.TP
.IR retrans_time_ms " (since Linux 2.6.12)"
The number of milliseconds to delay before retransmitting a request.
Defaults to 1000 milliseconds.
.TP
.IR ucast_solicit " (since Linux 2.2)"
.\" Precisely: 2.1.79
The maximum number of attempts to send unicast probes before asking
the ARP daemon (see
.IR app_solicit ).
Defaults to 3.
.TP
.IR unres_qlen " (since Linux 2.2)"
.\" Precisely: 2.1.79
The maximum number of packets which may be queued for each unresolved
address by other network layers.
Defaults to 3.
.SH VERSIONS
The
.I struct arpreq
changed in Linux 2.0 to include the
.I arp_dev
member and the ioctl numbers changed at the same time.
Support for the old ioctls was dropped in Linux 2.2.

Support for proxy arp entries for networks (netmask not equal 0xffffffff)
was dropped in Linux 2.2.
It is replaced by automatic proxy arp setup by
the kernel for all reachable hosts on other interfaces (when
forwarding and proxy arp is enabled for the interface).

The
.I neigh/*
interfaces did not exist before Linux 2.2.
.SH BUGS
Some timer settings are specified in jiffies, which is architecture-
and kernel version-dependent; see
.BR time (7).

There is no way to signal positive feedback from user space.
This means connection-oriented protocols implemented in user space
will generate excessive ARP traffic, because ndisc will regularly
reprobe the MAC address.
The same problem applies for some kernel protocols (e.g., NFS over UDP).

This man page mashes together functionality that is IPv4-specific
with functionality that is shared between IPv4 and IPv6.
.SH SEE ALSO
.BR capabilities (7),
.BR ip (7)
.PP
RFC\ 826 for a description of ARP.
RFC\ 2461 for a description of IPv6 neighbor discovery and the base
algorithms used.
Linux 2.2+ IPv4 ARP uses the IPv6 algorithms when applicable.
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
'\" t
.\" Copyright (c) 1993 Michael Haardt (michael@moria.de)
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.\" Created  1993-04-02 by Michael Haardt (michael@moria.de)
.\" Modified 1993-07-24 by Rik Faith (faith@cs.unc.edu)
.\" Modified 1994-05-15 by Daniel Quinlan (quinlan@yggdrasil.com)
.\" Modified 1994-11-22 by Daniel Quinlan (quinlan@yggdrasil.com)
.\" Modified 1995-07-11 by Daniel Quinlan (quinlan@yggdrasil.com)
.\" Modified 1996-12-18 by Michael Haardt and aeb
.\" Modified 1999-05-31 by Dimitri Papadopoulos (dpo@club-internet.fr)
.\" Modified 1999-08-08 by Michael Haardt (michael@moria.de)
.\" Modified 2004-04-01 by aeb
.\"
.TH ASCII 7 2014-10-02 "Linux" "Linux Programmer's Manual"
.SH NAME
ascii \- ASCII character set encoded in octal, decimal,
and hexadecimal
.SH DESCRIPTION
ASCII is the American Standard Code for Information Interchange.
It is a 7-bit code.
Many 8-bit codes (e.g., ISO 8859-1) contain ASCII as their lower half.
The international counterpart of ASCII is known as ISO 646-IRV.
.LP
The following table contains the 128 ASCII characters.
.LP
C program \f(CW\(aq\eX\(aq\fP escapes are noted.
.if t \{\
.ft CW
\}
.TS
l l l l l l l l.
Oct	Dec	Hex	Char	Oct	Dec	Hex	Char
_
000	0	00	NUL \(aq\e0\(aq (null character)	100	64	40	@
001	1	01	SOH (start of heading)	101	65	41	A
002	2	02	STX (start of text)	102	66	42	B
003	3	03	ETX (end of text)	103	67	43	C
004	4	04	EOT (end of transmission)	104	68	44	D
005	5	05	ENQ (enquiry)	105	69	45	E
006	6	06	ACK (acknowledge)	106	70	46	F
007	7	07	BEL \(aq\ea\(aq (bell)	107	71	47	G
010	8	08	BS  \(aq\eb\(aq (backspace)	110	72	48	H
011	9	09	HT  \(aq\et\(aq (horizontal tab)	111	73	49	I
012	10	0A	LF  \(aq\en\(aq (new line)	112	74	4A	J
013	11	0B	VT  \(aq\ev\(aq (vertical tab)	113	75	4B	K
014	12	0C	FF  \(aq\ef\(aq (form feed)	114	76	4C	L
015	13	0D	CR  \(aq\er\(aq (carriage ret)	115	77	4D	M
016	14	0E	SO  (shift out)	116	78	4E	N
017	15	0F	SI  (shift in)	117	79	4F	O
020	16	10	DLE (data link escape)	120	80	50	P
021	17	11	DC1 (device control 1)	121	81	51	Q
022	18	12	DC2 (device control 2)	122	82	52	R
023	19	13	DC3 (device control 3)	123	83	53	S
024	20	14	DC4 (device control 4)	124	84	54	T
025	21	15	NAK (negative ack.)	125	85	55	U
026	22	16	SYN (synchronous idle)	126	86	56	V
027	23	17	ETB (end of trans. blk)	127	87	57	W
030	24	18	CAN (cancel)	130	88	58	X
031	25	19	EM  (end of medium)	131	89	59	Y
032	26	1A	SUB (substitute)	132	90	5A	Z
033	27	1B	ESC (escape)	133	91	5B	[
034	28	1C	FS  (file separator)	134	92	5C	\e  \(aq\e\e\(aq
035	29	1D	GS  (group separator)	135	93	5D	]
036	30	1E	RS  (record separator)	136	94	5E	^
037	31	1F	US  (unit separator)	137	95	5F	\&_
040	32	20	SPACE	140	96	60	\`
041	33	21	!	141	97	61	a
042	34	22	"	142	98	62	b
043	35	23	#	143	99	63	c
044	36	24	$	144	100	64	d
045	37	25	%	145	101	65	e
046	38	26	&	146	102	66	f
047	39	27	\(aq	147	103	67	g
050	40	28	(	150	104	68	h
051	41	29	)	151	105	69	i
052	42	2A	*	152	106	6A	j
053	43	2B	+	153	107	6B	k
054	44	2C	,	154	108	6C	l
055	45	2D	\-	155	109	6D	m
056	46	2E	.	156	110	6E	n
057	47	2F	/	157	111	6F	o
060	48	30	0	160	112	70	p
061	49	31	1	161	113	71	q
062	50	32	2	162	114	72	r
063	51	33	3	163	115	73	s
064	52	34	4	164	116	74	t
065	53	35	5	165	117	75	u
066	54	36	6	166	118	76	v
067	55	37	7	167	119	77	w
070	56	38	8	170	120	78	x
071	57	39	9	171	121	79	y
072	58	3A	:	172	122	7A	z
073	59	3B	;	173	123	7B	{
074	60	3C	<	174	124	7C	|
075	61	3D	= 	175	125	7D	}
076	62	3E	>	176	126	7E	~
077	63	3F	?	177	127	7F	DEL
.TE
.if t \{\
.in
.ft P
\}
.SS Tables
For convenience, below are more compact tables in hex and decimal.
.sp
.nf
.if t \{\
.in 1i
.ft CW
\}
   2 3 4 5 6 7       30 40 50 60 70 80 90 100 110 120
 -------------      ---------------------------------
0:   0 @ P \` p     0:    (  2  <  F  P  Z  d   n   x
1: ! 1 A Q a q     1:    )  3  =  G  Q  [  e   o   y
2: " 2 B R b r     2:    *  4  >  H  R  \e  f   p   z
3: # 3 C S c s     3: !  +  5  ?  I  S  ]  g   q   {
4: $ 4 D T d t     4: "  ,  6  @  J  T  ^  h   r   |
5: % 5 E U e u     5: #  \-  7  A  K  U  _  i   s   }
6: & 6 F V f v     6: $  .  8  B  L  V  \`  j   t   ~
7: \(aq 7 G W g w     7: %  /  9  C  M  W  a  k   u  DEL
8: ( 8 H X h x     8: &  0  :  D  N  X  b  l   v
9: ) 9 I Y i y     9: \(aq  1  ;  E  O  Y  c  m   w
A: * : J Z j z
B: + ; K [ k {
C: , < L \e l |
D: \- = M ] m }
E: . > N ^ n ~
F: / ? O _ o DEL
.if t \{\
.in
.ft P
\}
.fi
.SH NOTES
.SS History
An
.B ascii
manual page appeared in Version 7 of AT&T UNIX.
.LP
On older terminals, the underscore code is displayed as a left arrow,
called backarrow, the caret is displayed as an up-arrow and the vertical
bar has a hole in the middle.
.LP
Uppercase and lowercase characters differ by just one bit and the
ASCII character 2 differs from the double quote by just one bit, too.
That made it much easier to encode characters mechanically or with a
non-microcontroller-based electronic keyboard and that pairing was found
on old teletypes.
.LP
The ASCII standard was published by the United States of America
Standards Institute (USASI) in 1968.
.\"
.\" ASA was the American Standards Association and X3 was an ASA sectional
.\" committee on computers and data processing.  Its name changed to
.\" American National Standards Committee X3 (ANSC-X3) and now it is known
.\" as Accredited Standards Committee X3 (ASC X3).  It is accredited by ANSI
.\" and administered by ITI.  The subcommittee X3.2 worked on coded
.\" character sets; the task group working on ASCII appears to have been
.\" designated X3.2.4.  In 1966, ASA became the United States of America
.\" Standards Institute (USASI) and published ASCII in 1968.  It became the
.\" American National Standards Institute (ANSI) in 1969 and is the
.\" U.S. member body of ISO; private and nonprofit.
.\"
.SH SEE ALSO
.BR charsets (7),
.BR iso_8859-1 (7),
.BR iso_8859-10 (7),
.BR iso_8859-11 (7),
.BR iso_8859-13 (7),
.BR iso_8859-14 (7),
.BR iso_8859-15 (7),
.BR iso_8859-16 (7),
.BR iso_8859-2 (7),
.BR iso_8859-3 (7),
.BR iso_8859-4 (7),
.BR iso_8859-5 (7),
.BR iso_8859-6 (7),
.BR iso_8859-7 (7),
.BR iso_8859-8 (7),
.BR iso_8859-9 (7),
.BR utf-8 (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2014, Red Hat, Inc
.\"     Written by Alexandre Oliva <aoliva@redhat.com>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.TH ATTRIBUTES 7 2015-03-02 "Linux" "Linux Programmer's Manual"
.SH NAME
attributes \- POSIX safety concepts
.SH DESCRIPTION
.\"
.\"
.IR Note :
the text of this man page is based on the material taken from
the "POSIX Safety Concepts" section of the GNU C Library manual.
Further details on the topics described here can be found in that
manual.

Various function manual pages include a section ATTRIBUTES
that describes the safety of calling the function in various contexts.
This section annotates functions with the following safety markings:
.TP
.I MT-Safe
.I MT-Safe
or
Thread-Safe functions are safe to call in the presence
of other threads.
MT, in MT-Safe, stands for Multi Thread.

Being MT-Safe does not imply a function is atomic, nor that it uses any
of the memory synchronization mechanisms POSIX exposes to users.
It is even possible that calling MT-Safe functions in sequence
does not yield an MT-Safe combination.
For example, having a thread call two MT-Safe
functions one right after the other does not guarantee behavior
equivalent to atomic execution of a combination of both functions,
since concurrent calls in other threads may interfere in a destructive way.

Whole-program optimizations that could inline functions across library
interfaces may expose unsafe reordering, and so performing inlining
across the GNU C Library interface is not recommended.
The documented
MT-Safety status is not guaranteed under whole-program optimization.
However, functions defined in user-visible headers are designed to be
safe for inlining.
.\" .TP
.\" .I AS-Safe
.\" .I AS-Safe
.\" or Async-Signal-Safe functions are safe to call from
.\" asynchronous signal handlers.
.\" AS, in AS-Safe, stands for Asynchronous Signal.
.\"
.\" Many functions that are AS-Safe may set
.\" .IR errno ,
.\" or modify the floating-point environment,
.\" because their doing so does not make them
.\" unsuitable for use in signal handlers.
.\" However, programs could misbehave should asynchronous signal handlers
.\" modify this thread-local state,
.\" and the signal handling machinery cannot be counted on to
.\" preserve it.
.\" Therefore, signal handlers that call functions that may set
.\" .I errno
.\" or modify the floating-point environment
.\" .I must
.\" save their original values, and restore them before returning.
.\" .TP
.\" .I AC-Safe
.\" .I AC-Safe
.\" or Async-Cancel-Safe functions are safe to call when
.\" asynchronous cancellation is enabled.
.\" AC in AC-Safe stands for Asynchronous Cancellation.
.\"
.\" The POSIX standard defines only three functions to be AC-Safe, namely
.\" .BR pthread_cancel (3),
.\" .BR pthread_setcancelstate (3),
.\" and
.\" .BR pthread_setcanceltype (3).
.\" At present the GNU C Library provides no
.\" guarantees beyond these three functions,
.\" but does document which functions are presently AC-Safe.
.\" This documentation is provided for use
.\" by the GNU C Library developers.

.\" Just like signal handlers, cancellation cleanup routines must configure
.\" the floating point environment they require.
.\" The routines cannot assume a floating point environment,
.\" particularly when asynchronous cancellation is enabled.
.\" If the configuration of the floating point
.\" environment cannot be performed atomically then it is also possible that
.\" the environment encountered is internally inconsistent.
.TP
.IR MT-Unsafe \" ", " AS-Unsafe ", " AC-Unsafe
.IR MT-Unsafe \" ", " AS-Unsafe ", " AC-Unsafe
functions are not safe to call in a multithreaded programs.
.\" functions are not
.\" safe to call within the safety contexts described above.
.\" Calling them
.\" within such contexts invokes undefined behavior.
.\"
.\" Functions not explicitly documented as safe in a safety context should
.\" be regarded as Unsafe.
.\" .TP
.\" .I Preliminary
.\" .I Preliminary
.\" safety properties are documented, indicating these
.\" properties may
.\" .I not
.\" be counted on in future releases of
.\" the GNU C Library.
.\"
.\" Such preliminary properties are the result of an assessment of the
.\" properties of our current implementation,
.\" rather than of what is mandated and permitted
.\" by current and future standards.
.\"
.\" Although we strive to abide by the standards, in some cases our
.\" implementation is safe even when the standard does not demand safety,
.\" and in other cases our implementation does not meet the standard safety
.\" requirements.
.\" The latter are most likely bugs; the former, when marked
.\" as
.\" .IR Preliminary ,
.\" should not be counted on: future standards may
.\" require changes that are not compatible with the additional safety
.\" properties afforded by the current implementation.
.\"
.\" Furthermore,
.\" the POSIX standard does not offer a detailed definition of safety.
.\" We assume that, by "safe to call", POSIX means that,
.\" as long as the program does not invoke undefined behavior,
.\" the "safe to call" function behaves as specified,
.\" and does not cause other functions to deviate from their specified behavior.
.\" We have chosen to use its loose
.\" definitions of safety, not because they are the best definitions to use,
.\" but because choosing them harmonizes this manual with POSIX.
.\"
.\" Please keep in mind that these are preliminary definitions and annotations,
.\" and certain aspects of the definitions are still under
.\" discussion and might be subject to clarification or change.
.\"
.\" Over time,
.\" we envision evolving the preliminary safety notes into stable commitments,
.\" as stable as those of our interfaces.
.\" As we do, we will remove the
.\" .I Preliminary
.\" keyword from safety notes.
.\" As long as the keyword remains, however,
.\" they are not to be regarded as a promise of future behavior.
.PP
Other keywords that appear in safety notes are defined in subsequent sections.
.\"
.\"
.\" .SS Unsafe features
.\" Functions that are unsafe to call in certain contexts are annotated with
.\" keywords that document their features that make them unsafe to call.
.\" AS-Unsafe features in this section indicate the functions are never safe
.\" to call when asynchronous signals are enabled.
.\" AC-Unsafe features
.\" indicate they are never safe to call when asynchronous cancellation is
.\" .\" enabled.
.\" There are no MT-Unsafe marks in this section.
.\" .TP
.\" .\" .I code
.\" Functions marked with
.\" .I lock
.\" as an AS-Unsafe feature may be
.\" .\" interrupted by a signal while holding a non-recursive lock.
.\" If the signal handler calls another such function that takes the same lock,
.\" the result is a deadlock.
.\"
.\" Functions annotated with
.\" .I lock
.\" as an AC-Unsafe feature may, if canceled asynchronously,
.\" fail to release a lock that would have been released if their execution
.\" had not been interrupted by asynchronous thread cancellation.
.\" Once a lock is left taken,
.\" attempts to take that lock will block indefinitely.
.\" .TP
.\" .I corrupt
.\" Functions marked with
.\" .\" .I corrupt
.\" as an AS-Unsafe feature may corrupt
.\" data structures and misbehave when they interrupt,
.\" or are interrupted by, another such function.
.\" Unlike functions marked with
.\" .IR lock ,
.\" these take recursive locks to avoid MT-Safety problems,
.\" but this is not enough to stop a signal handler from observing
.\" a partially-updated data structure.
.\" Further corruption may arise from the interrupted function's
.\" failure to notice updates made by signal handlers.
.\"
.\" Functions marked with
.\" .I corrupt
.\" as an AC-Unsafe feature may leave
.\" data structures in a corrupt, partially updated state.
.\" Subsequent uses of the data structure may misbehave.
.\"
.\" .\" A special case, probably not worth documenting separately, involves
.\" .\" reallocing, or even freeing pointers.  Any case involving free could
.\" .\" be easily turned into an ac-safe leak by resetting the pointer before
.\" .\" releasing it; I don't think we have any case that calls for this sort
.\" .\" of fixing.  Fixing the realloc cases would require a new interface:
.\" .\" instead of @code{ptr=realloc(ptr,size)} we'd have to introduce
.\" .\" @code{acsafe_realloc(&ptr,size)} that would modify ptr before
.\" .\" releasing the old memory.  The ac-unsafe realloc could be implemented
.\" .\" in terms of an internal interface with this semantics (say
.\" .\" __acsafe_realloc), but since realloc can be overridden, the function
.\" .\" we call to implement realloc should not be this internal interface,
.\" .\" but another internal interface that calls __acsafe_realloc if realloc
.\" .\" was not overridden, and calls the overridden realloc with async
.\" .\" cancel disabled.  --lxoliva
.\" .TP
.\" .I heap
.\" Functions marked with
.\" .I heap
.\" may call heap memory management functions from the
.\" .BR malloc (3)/ free (3)
.\" family of functions and are only as safe as those functions.
.\" This note is thus equivalent to:
.\"
.\"     | AS-Unsafe lock | AC-Unsafe lock fd mem |
.\" .\" @sampsafety{@asunsafe{@asulock{}}@acunsafe{@aculock{} @acsfd{} @acsmem{}}}
.\" .\"
.\" .\" Check for cases that should have used plugin instead of or in
.\" .\" addition to this.  Then, after rechecking gettext, adjust i18n if
.\" .\" needed.
.\" .TP
.\" .I dlopen
.\" Functions marked with
.\" .I dlopen
.\" use the dynamic loader to load
.\" shared libraries into the current execution image.
.\" This involves opening files, mapping them into memory,
.\" allocating additional memory, resolving symbols,
.\" applying relocations and more,
.\" all of this while holding internal dynamic loader locks.
.\"
.\" The locks are enough for these functions to be AS-Unsafe and AC-Unsafe,
.\" but other issues may arise.
.\" At present this is a placeholder for all
.\" potential safety issues raised by
.\" .BR dlopen (3).
.\"
.\" .\" dlopen runs init and fini sections of the module; does this mean
.\" .\" dlopen always implies plugin?
.\" .TP
.\" .I plugin
.\" Functions annotated with
.\" .I plugin
.\" may run code from plugins that
.\" may be external to the GNU C Library.
.\" Such plugin functions are assumed to be
.\" MT-Safe, AS-Unsafe and AC-Unsafe.
.\" Examples of such plugins are stack unwinding libraries,
.\" name service switch (NSS) and character set conversion (iconv) back-ends.
.\"
.\" Although the plugins mentioned as examples are all brought in by means
.\" of dlopen, the
.\" .I plugin
.\" keyword does not imply any direct
.\" involvement of the dynamic loader or the
.\" .I libdl
.\" interfaces,
.\" those are covered by
.\" .IR dlopen .
.\" For example, if one function loads a module and finds the addresses
.\" of some of its functions,
.\" while another just calls those already-resolved functions,
.\" the former will be marked with
.\" .IR dlopen ,
.\" whereas the latter will get the
.\" .IR plugin .
.\" When a single function takes all of these actions, then it gets both marks.
.\" .TP
.\" .I i18n
.\" Functions marked with
.\" .I i18n
.\" may call internationalization
.\" functions of the
.\" .BR gettext (3)
.\" family and will be only as safe as those
.\" functions.
.\" This note is thus equivalent to:
.\"
.\"     | MT-Safe env | AS-Unsafe corrupt heap dlopen | AC-Unsafe corrupt |
.\"
.\" .\" @sampsafety{@mtsafe{@mtsenv{}}@asunsafe{@asucorrupt{} @ascuheap{} @ascudlopen{}}@acunsafe{@acucorrupt{}}}
.\" .TP
.\" .I timer
.\" Functions marked with
.\" .I timer
.\" use the
.\" .BR alarm (3)
.\" function or
.\" similar to set a time-out for a system call or a long-running operation.
.\" In a multi-threaded program, there is a risk that the time-out signal
.\" will be delivered to a different thread,
.\" thus failing to interrupt the intended thread.
.\" Besides being MT-Unsafe, such functions are always
.\" AS-Unsafe, because calling them in signal handlers may interfere with
.\" timers set in the interrupted code, and AC-Unsafe,
.\" because there is no safe way to guarantee an earlier timer
.\" will be reset in case of asynchronous cancellation.
.\"
.\"
.SS Conditionally safe features
For some features that make functions unsafe to call in certain contexts,
there are known ways to avoid the safety problem other than
refraining from calling the function altogether.
The keywords that follow refer to such features,
and each of their definitions indicates
how the whole program needs to be constrained in order to remove the
safety problem indicated by the keyword.
Only when all the reasons that
make a function unsafe are observed and addressed,
by applying the documented constraints,
does the function become safe to call in a context.
.TP
.I init
Functions marked with
.I init
as an MT-Unsafe feature perform
MT-Unsafe initialization when they are first called.

Calling such a function at least once in single-threaded mode removes
this specific cause for the function to be regarded as MT-Unsafe.
If no other cause for that remains,
the function can then be safely called after other threads are started.

.\" Functions marked with
.\" .I init
.\" as an AS-Unsafe or AC-Unsafe feature use the GNU C Library internal
.\" .I libc_once
.\" machinery or similar to initialize internal data structures.
.\"
.\" If a signal handler interrupts such an initializer,
.\" and calls any function that also performs
.\" .I libc_once
.\" initialization, it will deadlock if the thread library has been loaded.
.\"
.\" Furthermore, if an initializer is partially complete before it is canceled
.\" or interrupted by a signal whose handler requires the same initialization,
.\" some or all of the initialization may be performed more than once,
.\" leaking resources or even resulting in corrupt internal data.
.\"
.\" Applications that need to call functions marked with
.\" .I init
.\" as an AS-Safety or AC-Unsafe feature should ensure
.\" the initialization is performed
.\" before configuring signal handlers or enabling cancellation,
.\" so that the AS-Safety and AC-Safety issues related with
.\" .I libc_once
.\" do not arise.
.\"
.\" .\" We may have to extend the annotations to cover conditions in which
.\" .\" initialization may or may not occur, since an initial call in a safe
.\" .\" context is no use if the initialization doesn't take place at that
.\" .\" time: it doesn't remove the risk for later calls.
.TP
.I race
Functions annotated with
.I race
as an MT-Safety issue operate on
objects in ways that may cause data races or similar forms of
destructive interference out of concurrent execution.
In some cases,
the objects are passed to the functions by users;
in others, they are used by the functions to return values to users;
in others, they are not even exposed to users.

.\" We consider access to objects passed as (indirect) arguments to
.\" functions to be data race free.
.\" The assurance of data race free objects
.\" is the caller's responsibility.
.\" We will not mark a function as MT-Unsafe or AS-Unsafe
.\" if it misbehaves when users fail to take the measures required by
.\" POSIX to avoid data races when dealing with such objects.
.\" As a general rule, if a function is documented as reading from
.\" an object passed (by reference) to it, or modifying it,
.\" users ought to use memory synchronization primitives
.\" to avoid data races just as they would should they perform
.\" the accesses themselves rather than by calling the library function.
.\" Standard I/O
.\" .RI ( "FILE *" )
.\" streams are the exception to the general rule,
.\" in that POSIX mandates the library to guard against data races
.\" in many functions that manipulate objects of this specific opaque type.
.\" We regard this as a convenience provided to users,
.\" rather than as a general requirement whose expectations
.\" should extend to other types.
.\"
.\" In order to remind users that guarding certain arguments is their
.\" responsibility, we will annotate functions that take objects of certain
.\" types as arguments.
.\" We draw the line for objects passed by users as follows:
.\" objects whose types are exposed to users,
.\" and that users are expected to access directly,
.\" such as memory buffers, strings,
.\" and various user-visible structured types, do
.\" .I not
.\" give reason for functions to be annotated with
.\" .IR race .
.\" It would be noisy and redundant with the general requirement,
.\" and not many would be surprised by the library's lack of internal
.\" guards when accessing objects that can be accessed directly by users.
.\"
.\" As for objects that are opaque or opaque-like,
.\" in that they are to be manipulated only by passing them
.\" to library functions (e.g.,
.\" .IR FILE ,
.\" .IR DIR ,
.\" .IR obstack ,
.\" .IR iconv_t ),
.\" there might be additional expectations as to internal coordination
.\" of access by the library.
.\" We will annotate, with
.\" .I race
.\" followed by a colon and the argument name,
.\" functions that take such objects but that do not take
.\" care of synchronizing access to them by default.
.\" For example,
.\" .I FILE
.\" stream
.\" .I unlocked
.\" functions
.\" .RB ( unlocked_stdio (3))
.\" will be annotated,
.\" but those that perform implicit locking on
.\" .I FILE
.\" streams by default will not,
.\" even though the implicit locking may be disabled on a per-stream basis.
.\"
.\" In either case, we will not regard as MT-Unsafe functions that may
.\" access user-supplied objects in unsafe ways should users fail to ensure
.\" the accesses are well defined.
.\" The notion prevails that users are expected to safeguard against
.\" data races any user-supplied objects that the library accesses
.\" on their behalf.
.\"
.\" .\" The above describes @mtsrace; @mtasurace is described below.
.\"
.\" This user responsibility does not apply, however,
.\" to objects controlled by the library itself,
.\" such as internal objects and static buffers used
.\" to return values from certain calls.
.\" When the library doesn't guard them against concurrent uses,
.\" these cases are regarded as MT-Unsafe and AS-Unsafe (although the
.\" .I race
.\" mark under AS-Unsafe will be omitted
.\" as redundant with the one under MT-Unsafe).
.\" As in the case of user-exposed objects,
.\" the mark may be followed by a colon and an identifier.
.\" The identifier groups all functions that operate on a
.\" certain unguarded object; users may avoid the MT-Safety issues related
.\" with unguarded concurrent access to such internal objects by creating a
.\" non-recursive mutex related with the identifier,
.\" and always holding the mutex when calling any function marked
.\" as racy on that identifier,
.\" as they would have to should the identifier be
.\" an object under user control.
.\" The non-recursive mutex avoids the MT-Safety issue,
.\" but it trades one AS-Safety issue for another,
.\" so use in asynchronous signals remains undefined.
.\"
.\" When the identifier relates to a static buffer used to hold return values,
.\" the mutex must be held for as long as the buffer remains in use
.\" by the caller.
.\" Many functions that return pointers to static buffers offer reentrant
.\" variants that store return values in caller-supplied buffers instead.
.\" In some cases, such as
.\" .BR tmpname (3),
.\" the variant is chosen not by calling an alternate entry point,
.\" but by passing a non-NULL pointer to the buffer in which the
.\" returned values are to be stored.
.\" These variants are generally preferable in multi-threaded programs,
.\" although some of them are not MT-Safe because of other internal buffers,
.\" also documented with
.\" .I race
.\" notes.
.TP
.I const
Functions marked with
.I const
as an MT-Safety issue non-atomically
modify internal objects that are better regarded as constant,
because a substantial portion of the GNU C Library accesses them without
synchronization.
Unlike
.IR race ,
which causes both readers and
writers of internal objects to be regarded as MT-Unsafe, \" and AS-Unsafe,
this mark is applied to writers only.
Writers remain \" equally
MT-Unsafe \" and AS-Unsafe
to call,
but the then-mandatory constness of objects they
modify enables readers to be regarded as MT-Safe \" and AS-Safe
(as long as no other reasons for them to be unsafe remain),
since the lack of synchronization is not a problem when the
objects are effectively constant.

The identifier that follows the
.I const
mark will appear by itself as a safety note in readers.
Programs that wish to work around this safety issue,
so as to call writers, may use a non-recursive
read-write lock
associated with the identifier, and guard
.I all
calls to functions marked with
.I const
followed by the identifier with a write lock, and
.I all
calls to functions marked with the identifier
by itself with a read lock.
.\" The non-recursive locking removes the MT-Safety problem,
.\" but it trades one AS-Safety problem for another,
.\" so use in asynchronous signals remains undefined.
.\"
.\" .\" But what if, instead of marking modifiers with const:id and readers
.\" .\" with just id, we marked writers with race:id and readers with ro:id?
.\" .\" Instead of having to define each instance of 'id', we'd have a
.\" .\" general pattern governing all such 'id's, wherein race:id would
.\" .\" suggest the need for an exclusive/write lock to make the function
.\" .\" safe, whereas ro:id would indicate 'id' is expected to be read-only,
.\" .\" but if any modifiers are called (while holding an exclusive lock),
.\" .\" then ro:id-marked functions ought to be guarded with a read lock for
.\" .\" safe operation.  ro:env or ro:locale, for example, seems to convey
.\" .\" more clearly the expectations and the meaning, than just env or
.\" .\" locale.
.TP
.I sig
Functions marked with
.I sig
as a MT-Safety issue
.\" (that implies an identical AS-Safety issue, omitted for brevity)
may temporarily install a signal handler for internal purposes,
which may interfere with other uses of the signal,
identified after a colon.

This safety problem can be worked around by ensuring that no other uses
of the signal will take place for the duration of the call.
Holding a non-recursive mutex while calling all functions that use the same
temporary signal;
blocking that signal before the call and resetting its
handler afterwards is recommended.

.\" There is no safe way to guarantee the original signal handler is
.\" restored in case of asynchronous cancellation,
.\" therefore so-marked functions are also AC-Unsafe.
.\"
.\" .\" fixme: at least deferred cancellation should get it right, and would
.\" .\" obviate the restoring bit below, and the qualifier above.
.\"
.\" Besides the measures recommended to work around the
.\" MT-Safety and AS-Safety problem,
.\" in order to avert the cancellation problem,
.\" disabling asynchronous cancellation
.\" .I and
.\" installing a cleanup handler to restore the signal to the desired state
.\" and to release the mutex are recommended.
.TP
.I term
Functions marked with
.I term
as an MT-Safety issue may change the
terminal settings in the recommended way, namely: call
.BR tcgetattr (3),
modify some flags, and then call
.BR tcsetattr (3),
this creates a window in which changes made by other threads are lost.
Thus, functions marked with
.I term
are MT-Unsafe.
.\" The same window enables changes made by asynchronous signals to be lost.
.\" These functions are also AS-Unsafe,
.\" but the corresponding mark is omitted as redundant.

It is thus advisable for applications using the terminal to avoid
concurrent and reentrant interactions with it,
by not using it in signal handlers or blocking signals that might use it,
and holding a lock while calling these functions and interacting
with the terminal.
This lock should also be used for mutual exclusion with
functions marked with
.IR race:tcattr(fd) ,
where
.I fd
is a file descriptor for the controlling terminal.
The caller may use a single mutex for simplicity,
or use one mutex per terminal,
even if referenced by different file descriptors.

.\" Functions marked with
.\" .I term
.\" as an AC-Safety issue are supposed to
.\" restore terminal settings to their original state,
.\" after temporarily changing them, but they may fail to do so if canceled.
.\"
.\" .\" fixme: at least deferred cancellation should get it right, and would
.\" .\" obviate the restoring bit below, and the qualifier above.
.\"
.\" Besides the measures recommended to work around the
.\" MT-Safety and AS-Safety problem,
.\" in order to avert the cancellation problem,
.\" disabling asynchronous cancellation
.\" .I and
.\" installing a cleanup handler to
.\" restore the terminal settings to the original state and to release the
.\" mutex are recommended.
.\"
.\"
.SS Other safety remarks
Additional keywords may be attached to functions,
indicating features that do not make a function unsafe to call,
but that may need to be taken into account in certain classes of programs:
.TP
.I locale
Functions annotated with
.I locale
as an MT-Safety issue read from
the locale object without any form of synchronization.
Functions
annotated with
.I locale
called concurrently with locale changes may
behave in ways that do not correspond to any of the locales active
during their execution, but an unpredictable mix thereof.

We do not mark these functions as MT-Unsafe, \" or AS-Unsafe,
however,
because functions that modify the locale object are marked with
.I const:locale
and regarded as unsafe.
Being unsafe, the latter are not to be called when multiple threads
are running or asynchronous signals are enabled,
and so the locale can be considered effectively constant
in these contexts,
which makes the former safe.

.\" Should the locking strategy suggested under @code{const} be used,
.\" failure to guard locale uses is not as fatal as data races in
.\" general: unguarded uses will @emph{not} follow dangling pointers or
.\" access uninitialized, unmapped or recycled memory.  Each access will
.\" read from a consistent locale object that is or was active at some
.\" point during its execution.  Without synchronization, however, it
.\" cannot even be assumed that, after a change in locale, earlier
.\" locales will no longer be used, even after the newly-chosen one is
.\" used in the thread.  Nevertheless, even though unguarded reads from
.\" the locale will not violate type safety, functions that access the
.\" locale multiple times may invoke all sorts of undefined behavior
.\" because of the unexpected locale changes.
.TP
.I env
Functions marked with
.I env
as an MT-Safety issue access the
environment with
.BR getenv (3)
or similar, without any guards to ensure
safety in the presence of concurrent modifications.

We do not mark these functions as MT-Unsafe, \" or AS-Unsafe,
however,
because functions that modify the environment are all marked with
.I const:env
and regarded as unsafe.
Being unsafe, the latter are not to be called when multiple threads
are running or asynchronous signals are enabled,
and so the environment can be considered
effectively constant in these contexts,
which makes the former safe.
.TP
.I hostid
The function marked with
.I hostid
as an MT-Safety issue reads from the system-wide data structures that
hold the "host ID" of the machine.
These data structures cannot generally be modified atomically.
Since it is expected that the "host ID" will not normally change,
the function that reads from it
.RB ( gethostid (3))
is regarded as safe,
whereas the function that modifies it
.RB ( sethostid (3))
is marked with
.IR const:hostid ,
indicating it may require special care if it is to be called.
In this specific case,
the special care amounts to system-wide
(not merely intra-process) coordination.
.TP
.I sigintr
Functions marked with
.I sigintr
as an MT-Safety issue access the
GNU C Library
.I _sigintr
internal data structure without any guards to ensure
safety in the presence of concurrent modifications.

We do not mark these functions as MT-Unsafe, \" or AS-Unsafe,
however,
because functions that modify this data structure are all marked with
.I const:sigintr
and regarded as unsafe.
Being unsafe,
the latter are not to be called when multiple threads are
running or asynchronous signals are enabled,
and so the data structure can be considered
effectively constant in these contexts,
which makes the former safe.
.\" .TP
.\" .I fd
.\" Functions annotated with
.\" .I fd
.\" as an AC-Safety issue may leak file
.\" descriptors if asynchronous thread cancellation interrupts their
.\" execution.
.\"
.\" Functions that allocate or deallocate file descriptors will generally be
.\" marked as such.
.\" Even if they attempted to protect the file descriptor
.\" allocation and deallocation with cleanup regions,
.\" allocating a new descriptor and storing its number where the cleanup region
.\" could release it cannot be performed as a single atomic operation.
.\" Similarly,
.\" releasing the descriptor and taking it out of the data structure
.\" normally responsible for releasing it cannot be performed atomically.
.\" There will always be a window in which the descriptor cannot be released
.\" because it was not stored in the cleanup handler argument yet,
.\" or it was already taken out before releasing it.
.\" .\" It cannot be taken out after release:
.\" an open descriptor could mean either that the descriptor still
.\" has to be closed,
.\" or that it already did so but the descriptor was
.\" reallocated by another thread or signal handler.
.\"
.\" Such leaks could be internally avoided, with some performance penalty,
.\" by temporarily disabling asynchronous thread cancellation.
.\" However,
.\" since callers of allocation or deallocation functions would have to do
.\" this themselves, to avoid the same sort of leak in their own layer,
.\" it makes more sense for the library to assume they are taking care of it
.\" than to impose a performance penalty that is redundant when the problem
.\" is solved in upper layers, and insufficient when it is not.
.\"
.\" This remark by itself does not cause a function to be regarded as
.\" AC-Unsafe.
.\" However, cumulative effects of such leaks may pose a
.\" problem for some programs.
.\" If this is the case,
.\" suspending asynchronous cancellation for the duration of calls
.\" to such functions is recommended.
.\" .TP
.\" .I mem
.\" Functions annotated with
.\" .I mem
.\" as an AC-Safety issue may leak
.\" memory if asynchronous thread cancellation interrupts their execution.
.\"
.\" The problem is similar to that of file descriptors: there is no atomic
.\" interface to allocate memory and store its address in the argument to a
.\" cleanup handler,
.\" or to release it and remove its address from that argument,
.\" without at least temporarily disabling asynchronous cancellation,
.\" which these functions do not do.
.\"
.\" This remark does not by itself cause a function to be regarded as
.\" generally AC-Unsafe.
.\" However, cumulative effects of such leaks may be
.\" severe enough for some programs that disabling asynchronous cancellation
.\" for the duration of calls to such functions may be required.
.TP
.I cwd
Functions marked with
.I cwd
as an MT-Safety issue may temporarily
change the current working directory during their execution,
which may cause relative pathnames to be resolved in unexpected ways in
other threads or within asynchronous signal or cancellation handlers.

This is not enough of a reason to mark so-marked functions as MT-Unsafe,
.\" or AS-Unsafe,
but when this behavior is optional (e.g.,
.BR nftw (3)
with
.BR FTW_CHDIR ),
avoiding the option may be a good alternative to
using full pathnames or file descriptor-relative (e.g.,
.BR openat (2))
system calls.
.\" .TP
.\" .I !posix
.\" This remark, as an MT-Safety, AS-Safety or AC-Safety
.\" note to a function,
.\" indicates the safety status of the function is known to differ
.\" from the specified status in the POSIX standard.
.\" For example, POSIX does not require a function to be Safe,
.\" but our implementation is, or vice-versa.
.\"
.\" For the time being, the absence of this remark does not imply the safety
.\" properties we documented are identical to those mandated by POSIX for
.\" the corresponding functions.
.TP
.I :identifier
Annotations may sometimes be followed by identifiers,
intended to group several functions that, for example,
access the data structures in an unsafe way, as in
.I race
and
.IR const ,
or to provide more specific information,
such as naming a signal in a function marked with
.IR sig .
It is envisioned that it may be applied to
.I lock
and
.I corrupt
as well in the future.

In most cases, the identifier will name a set of functions,
but it may name global objects or function arguments,
or identifiable properties or logical components associated with them,
with a notation such as, for example,
.I :buf(arg)
to denote a buffer associated with the argument
.IR arg ,
or
.I :tcattr(fd)
to denote the terminal attributes of a file descriptor
.IR fd .

The most common use for identifiers is to provide logical groups of
functions and arguments that need to be protected by the same
synchronization primitive in order to ensure safe operation in a given
context.
.TP
.I /condition
Some safety annotations may be conditional,
in that they only apply if a boolean expression involving arguments,
global variables or even the underlying kernel evaluates to true.
.\" Such conditions as
.\" .I /hurd
.\" or
.\" .I /!linux!bsd
.\" indicate the preceding marker only
.\" applies when the underlying kernel is the HURD,
.\" or when it is neither Linux nor a BSD kernel, respectively.
For example,
.I /!ps
and
.I /one_per_line
indicate the preceding marker only applies when argument
.I ps
is NULL, or global variable
.I one_per_line
is nonzero.

When all marks that render a function unsafe are
adorned with such conditions,
and none of the named conditions hold,
then the function can be regarded as safe.
.SH SEE ALSO
.BR pthreads (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Written by Oron Peled <oron@actcom.co.il>.
.\"
.\" %%%LICENSE_START(GPL_NOVERSION_ONELINE)
.\" May be distributed subject to the GPL.
.\" %%%LICENSE_END
.\"
.\" I tried to be as much generic in the description as possible:
.\" - General boot sequence is applicable to almost any
.\" OS/Machine (DOS/PC, Linux/PC, Solaris/SPARC, CMS/S390)
.\" - kernel and init(1) is applicable to almost any UNIX/Linux
.\" - boot scripts are applicable to SYSV-R4 based UNIX/Linux
.\"
.\" Modified 2004-11-03 patch from Martin Schulze <joey@infodrom.org>
.\"
.TH BOOT 7 2015-03-11 "Linux" "Linux Programmer's Manual"
.SH NAME
boot \- System bootup process based on UNIX System V Release 4
.SH DESCRIPTION
.LP
The \fBbootup process\fR (or "\fBboot sequence\fR") varies in details
among systems, but can be roughly divided into phases controlled by
the following components:
.IP 1. 4
hardware
.IP 2. 4
operating system (OS) loader
.IP 3. 4
kernel
.IP 4. 4
root user-space process (\fIinit\fR and \fIinittab\fR)
.IP 5. 4
boot scripts
.PP
Each of these is described below in more detail.
.SS Hardware
After power-on or hard reset, control is given
to a program stored in read-only memory (normally
PROM); for historical reasons involving the personal
computer, this program is often called "the \fBBIOS\fR".

This program normally performs a basic self-test of the
machine and accesses nonvolatile memory to read
further parameters.
This memory in the PC is
battery-backed CMOS memory, so most people
refer to it as "the \fBCMOS\fR"; outside
of the PC world, it is usually called "the \fBNVRAM\fR"
(nonvolatile RAM).

The parameters stored in the NVRAM vary among
systems, but as a minimum, they should specify
which device can supply an OS loader, or at least which
devices may be probed for one; such a device is known as "the
\fBboot device\fR".
The hardware boot stage loads the OS loader from a fixed position on
the boot device, and then transfers control to it.
.TP
Note:
The device from which the OS loader is read may be attached via a network, in which
case the details of booting are further specified by protocols such as
DHCP, TFTP, PXE, Etherboot, etc.
.SS OS loader
The main job of the OS loader is to locate the kernel
on some device, load it, and run it.
Most OS loaders allow
interactive use, in order to enable specification of an alternative
kernel (maybe a backup in case the one last compiled
isn't functioning) and to pass optional parameters
to the kernel.

In a traditional PC, the OS loader is located in the initial 512-byte block
of the boot device; this block is known as "the \fBMBR\fR"
(Master Boot Record).

In most systems, the OS loader is very
limited due to various constraints.
Even on non-PC systems,
there are some limitations on the size and complexity
of this loader, but the size limitation of the PC MBR
(512 bytes, including the partition table) makes it
almost impossible to squeeze much functionality into it.

Therefore, most systems split the role of loading the OS between
a primary OS loader and a secondary OS loader; this secondary
OS loader may be located within a larger portion of persistent
storage, such as a disk partition.

In Linux, the OS loader is often either
.BR lilo (8)
or
.BR grub (8).
.SS Kernel
When the kernel is loaded, it initializes various components of
the computer and operating system; each portion of software
responsible for such a task is usually consider "a \fBdriver\fR" for
the applicable component.
The kernel starts the virtual memory
swapper (it is a kernel process, called "kswapd" in a modern Linux
kernel), and mounts some filesystem at the root path,
.IR / .

Some of the parameters that may be passed to the kernel
relate to these activities (for example, the default root filesystem
can be overridden); for further information
on Linux kernel parameters, read
.BR bootparam (7).

Only then does the kernel create the initial userland
process, which is given the number 1 as its
.B PID
(process ID).
Traditionally, this process executes the
program
.IR /sbin/init ,
to which are passed the parameters that haven't already been
handled by the kernel.
.SS Root user-space process
.TP
Note:
The following description applies to an OS based on UNIX System V Release 4.
However, a number of widely used systems have adopted a related but
fundamentally different approach known as
.BR systemd (1),
for which the bootup process is detailed in its associated
.BR bootup (7).
.LP
When
.I /sbin/init
starts, it reads
.I /etc/inittab
for further instructions.
This file defines what should be run when the
.I /sbin/init
program is instructed to enter a particular \fIrun-level\fR, giving
the administrator an easy way to establish an environment
for some usage; each run-level is associated with a set of services
(for example, run-level \fBS\fR is \fIsingle-user\fR mode,
and run-level \fB2\fR entails running most network services).

The administrator may change the current
run-level via
.BR init (1),
and query the current run-level via
.BR runlevel (8).

However, since it is not convenient to manage individual services
by editing this file,
.I /etc/inittab
only bootstraps a set of scripts
that actually start/stop the individual services.
.SS Boot scripts
.TP
Note:
The following description applies to an OS based on UNIX System V Release 4.
However, a number of widely used systems (Slackware Linux, FreeBSD, OpenBSD)
have a somewhat different scheme for boot scripts.
.LP
For each managed service (mail, nfs server, cron, etc.), there is
a single startup script located in a specific directory
.RI ( /etc/init.d
in most versions of Linux).
Each of these scripts accepts as a single argument
the word "start" (causing it to start the service) or the word
\&"stop" (causing it to stop the service).
The script may optionally
accept other "convenience" parameters (e.g., "restart" to stop and then
start, "status" to display the service status, etc.).
Running the script
without parameters displays the possible arguments.
.SS Sequencing directories
To make specific scripts start/stop at specific run-levels and in a
specific order, there are \fIsequencing directories\fR, normally
of the form  \fI/etc/rc[0\-6S].d\fR.
In each of these directories,
there are links (usually symbolic) to the scripts in the \fI/etc/init.d\fR
directory.

A primary script (usually \fI/etc/rc\fR) is called from
.BR inittab (5);
this primary script calls each service's script via a link in the
relevant sequencing directory.
Each link whose name begins with \(aqS\(aq is called with
the argument "start" (thereby starting the service).
Each link whose name begins with \(aqK\(aq is called with
the argument "stop" (thereby stopping the service).

To define the starting or stopping order within the same run-level,
the name of a link contains an \fBorder-number\fR.
Also, for clarity, the name of a link usually
ends with the name of the service to which it refers.
For example,
the link \fI/etc/rc2.d/S80sendmail\fR starts the sendmail service on
runlevel 2.
This happens after \fI/etc/rc2.d/S12syslog\fR is run
but before \fI/etc/rc2.d/S90xfs\fR is run.

To manage these links is to manage the boot order and run-levels;
under many systems, there are tools to help with this task
(e.g.,
.BR chkconfig (8)).
.SS Boot configuration
A program that provides a service is often called a "\fBdaemon\fR".
Usually, a daemon may receive various command-line options
and parameters.
To allow a system administrator to change these
inputs without editing an entire boot script,
some separate configuration file is used, and is located in a specific
directory where an associated boot script may find it
(\fI/etc/sysconfig\fR on older Red Hat systems).

In older UNIX systems, such a file contained the actual command line
options for a daemon, but in modern Linux systems (and also
in HP-UX), it just contains shell variables.
A boot script in \fI/etc/init.d\fR reads and includes its configuration
file (that is, it "\fBsources\fR" its configuration file) and then uses
the variable values.
.SH FILES
.LP
.IR /etc/init.d/ ,
.IR /etc/rc[S0\-6].d/ ,
.I /etc/sysconfig/
.SH SEE ALSO
.BR bootup (7)
.BR systemd (1)
.BR inittab (5),
.BR bootparam (7),
.BR init (1),
.BR runlevel (8),
.BR shutdown (8)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1995,1997 Paul Gortmaker and Andries Brouwer
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.\" This man page written 950814 by aeb, based on Paul Gortmaker's HOWTO
.\" (dated v1.0.1, 15/08/95).
.\" Major update, aeb, 970114.
.\"
.TH BOOTPARAM 7 2015-05-07 "Linux" "Linux Programmer's Manual"
.SH NAME
bootparam \- introduction to boot time parameters of the Linux kernel
.SH DESCRIPTION
The Linux kernel accepts certain 'command-line options' or 'boot time
parameters' at the moment it is started.
In general this is used to
supply the kernel with information about hardware parameters that
the kernel would not be able to determine on its own, or to avoid/override
the values that the kernel would otherwise detect.

When the kernel is booted directly by the BIOS,
you have no opportunity to specify any parameters.
So, in order to take advantage of this possibility you have to
use a boot loader that is able to pass parameters, such as GRUB.
.SS The argument list
The kernel command line is parsed into a list of strings
(boot arguments) separated by spaces.
Most of the boot arguments have the form:

.in +4n
.nf
name[=value_1][,value_2]...[,value_10]
.fi
.in
.LP
where 'name' is a unique keyword that is used to identify what part of
the kernel the associated values (if any) are to be given to.
Note the limit of 10 is real, as the present code handles only 10 comma
separated parameters per keyword.
(However, you can reuse the same
keyword with up to an additional 10 parameters in unusually
complicated situations, assuming the setup function supports it.)

Most of the sorting is coded in the kernel source file
.IR init/main.c .
First, the kernel
checks to see if the argument is any of the special arguments 'root=',
\&'nfsroot=', 'nfsaddrs=', 'ro', 'rw', 'debug' or 'init'.
The meaning of these special arguments is described below.

Then it walks a list of setup functions
to see if the specified argument string (such as 'foo') has
been associated with a setup function ('foo_setup()') for a particular
device or part of the kernel.
If you passed the kernel the line
foo=3,4,5,6 then the kernel would search the bootsetups array to see
if 'foo' was registered.
If it was, then it would call the setup
function associated with 'foo' (foo_setup()) and hand it the arguments
3, 4, 5, and 6 as given on the kernel command line.

Anything of the form 'foo=bar' that is not accepted as a setup function
as described above is then interpreted as an environment variable to
be set.
A (useless?) example would be to use 'TERM=vt100' as a boot
argument.

Any remaining arguments that were not picked up by the kernel and were
not interpreted as environment variables are then passed onto PID 1,
which is usually the
.BR init (1)
program.
The most common argument that
is passed to the
.I init
process is the word 'single' which instructs it
to boot the computer in single user mode, and not launch all the usual
daemons.
Check the manual page for the version of
.BR init (1)
installed on
your system to see what arguments it accepts.
.SS General non-device-specific boot arguments
.TP
.B "'init=...'"
This sets the initial command to be executed by the kernel.
If this is not set, or cannot be found, the kernel will try
.IR /sbin/init ,
then
.IR /etc/init ,
then
.IR /bin/init ,
then
.I /bin/sh
and panic if all of this fails.
.TP
.B "'nfsaddrs=...'"
This sets the NFS boot address to the given string.
This boot address is used in case of a net boot.
.TP
.B "'nfsroot=...'"
This sets the NFS root name to the given string.
If this string
does not begin with '/' or ',' or a digit, then it is prefixed by
\&'/tftpboot/'.
This root name is used in case of a net boot.
.TP
.B "'root=...'"
This argument tells the kernel what device is to be used as the root
filesystem while booting.
The default of this setting is determined
at compile time, and usually is the value of the root device of the
system that the kernel was built on.
To override this value, and
select the second floppy drive as the root device, one would
use 'root=/dev/fd1'.

The root device can be specified symbolically or numerically.
A symbolic specification has the form
.IR /dev/XXYN ,
where XX designates
the device type (e.g., 'hd' for ST-506 compatible hard disk, with Y in
\&'a'-'d'; 'sd' for SCSI compatible disk, with Y in 'a'-'e'),
Y the driver letter or
number, and N the number (in decimal) of the partition on this device.

Note that this has nothing to do with the designation of these
devices on your filesystem.
The '/dev/' part is purely conventional.

The more awkward and less portable numeric specification of the above
possible root devices in major/minor format is also accepted.
(For example,
.I /dev/sda3
is major 8, minor 3, so you could use 'root=0x803' as an
alternative.)
.TP
.BR "'rootdelay='"
This parameter sets the delay (in seconds) to pause before attempting
to mount the root filesystem.
.TP
.BR "'rootflags=...'"
This parameter sets the mount option string for the root filesystem
(see also
.BR fstab (5)).
.TP
.BR "'rootfstype=...'"
The 'rootfstype' option tells the kernel to mount the root filesystem as
if it where of the type specified.
This can be useful (for example) to
mount an ext3 filesystem as ext2 and then remove the journal in the root
filesystem, in fact reverting its format from ext3 to ext2 without the
need to boot the box from alternate media.
.TP
.BR 'ro' " and " 'rw'
The 'ro' option tells the kernel to mount the root filesystem
as 'read-only' so that filesystem consistency check programs (fsck)
can do their work on a quiescent filesystem.
No processes can
write to files on the filesystem in question until it is 'remounted'
as read/write capable, for example, by 'mount \-w \-n \-o remount /'.
(See also
.BR mount (8).)

The 'rw' option tells the kernel to mount the root filesystem read/write.
This is the default.

.TP
.B "'resume=...'"
This tells the kernel the location of the suspend-to-disk data that you want the machine to resume from after hibernation.
Usually, it is the same as your swap partition or file.
Example:

.in +4n
.nf
resume=/dev/hda2
.fi
.in
.TP
.B "'reserve=...'"
This is used to protect I/O port regions from probes.
The form of the command is:

.in +4n
.nf
.BI reserve= iobase,extent[,iobase,extent]...
.fi
.in
.sp
In some machines it may be necessary to prevent device drivers from
checking for devices (auto-probing) in a specific region.
This may be
because of hardware that reacts badly to the probing, or hardware
that would be mistakenly identified, or merely
hardware you don't want the kernel to initialize.

The reserve boot-time argument specifies an I/O port region that
shouldn't be probed.
A device driver will not probe a reserved region,
unless another boot argument explicitly specifies that it do so.

For example, the boot line

.in +4n
.nf
reserve=0x300,32  blah=0x300
.fi
.in
.IP
keeps all device drivers except the driver for 'blah' from probing
0x300\-0x31f.
.TP
.B "'panic=N'"
By default, the kernel will not reboot after a panic, but this option
will cause a kernel reboot after N seconds (if N is greater than zero).
This panic timeout can also be set by

.in +4n
.nf
echo N > /proc/sys/kernel/panic
.fi
.in
.TP
.B "'reboot=[warm|cold][,[bios|hard]]'"
Since Linux 2.0.22, a reboot is by default a cold reboot.
One asks for the old default with 'reboot=warm'.
(A cold reboot may be required to reset certain hardware,
but might destroy not yet written data in a disk cache.
A warm reboot may be faster.)
By default, a reboot is hard, by asking the keyboard controller
to pulse the reset line low, but there is at least one type
of motherboard where that doesn't work.
The option 'reboot=bios' will
instead jump through the BIOS.
.TP
.BR 'nosmp' " and " 'maxcpus=N'
(Only when __SMP__ is defined.)
A command-line option of 'nosmp' or 'maxcpus=0' will disable SMP
activation entirely; an option 'maxcpus=N' limits the maximum number
of CPUs activated in SMP mode to N.
.SS Boot arguments for use by kernel developers
.TP
.B "'debug'"
Kernel messages are handed off to a daemon (e.g.,
.BR klogd (8)
or similar) so that they may be logged to disk.
Messages with a priority above
.I console_loglevel
are also printed on the console.
(For a discussion of log levels, see
.BR syslog (2).)
By default,
.I console_loglevel
is set to log messages at levels higher than
.BR KERN_DEBUG .
This boot argument will cause the kernel to also
print messages logged at level
.BR KERN_DEBUG .
The console loglevel can also be set on a booted system via the
.IR /proc/sys/kernel/printk
file (described in
.BR syslog (2)),
the
.BR syslog (2)
.B SYSLOG_ACTION_CONSOLE_LEVEL
operation, or
.BR dmesg (8).
.TP
.B "'profile=N'"
It is possible to enable a kernel profiling function,
if one wishes to find out where the kernel is spending its CPU cycles.
Profiling is enabled by setting the variable
.I prof_shift
to a nonzero value.
This is done either by specifying
.B CONFIG_PROFILE
at compile time, or by giving the 'profile=' option.
Now the value that
.I prof_shift
gets will be N, when given, or
.BR CONFIG_PROFILE_SHIFT ,
when that is given, or 2, the default.
The significance of this variable is that it
gives the granularity of the profiling: each clock tick, if the
system was executing kernel code, a counter is incremented:

.in +4n
.nf
profile[address >> prof_shift]++;
.fi
.in
.sp
The raw profiling information can be read from
.IR /proc/profile .
Probably you'll want to use a tool such as readprofile.c to digest it.
Writing to
.I /proc/profile
will clear the counters.
.TP
.SS Boot arguments for ramdisk use
(Only if the kernel was compiled with
.BR CONFIG_BLK_DEV_RAM .)
In general it is a bad idea to use a ramdisk under Linux\(emthe
system will use available memory more efficiently itself.
But while booting,
it is often useful to load the floppy contents into a
ramdisk.
One might also have a system in which first
some modules (for filesystem or hardware) must be loaded
before the main disk can be accessed.

In Linux 1.3.48, ramdisk handling was changed drastically.
Earlier, the memory was allocated statically, and there was
a 'ramdisk=N' parameter to tell its size.
(This could also be set in the kernel image at compile time.)
These days ram disks use the buffer cache, and grow dynamically.
For a lot of information on the current ramdisk
setup, see the kernel source file
.IR Documentation/blockdev/ramdisk.txt
.RI ( Documentation/ramdisk.txt
in older kernels).

There are four parameters, two boolean and two integral.
.TP
.B "'load_ramdisk=N'"
If N=1, do load a ramdisk.
If N=0, do not load a ramdisk.
(This is the default.)
.TP
.B "'prompt_ramdisk=N'"
If N=1, do prompt for insertion of the floppy.
(This is the default.)
If N=0, do not prompt.
(Thus, this parameter is never needed.)
.TP
.BR 'ramdisk_size=N' " or (obsolete) " 'ramdisk=N'
Set the maximal size of the ramdisk(s) to N kB.
The default is 4096 (4 MB).
.TP
.B "'ramdisk_start=N'"
Sets the starting block number (the offset on the floppy where
the ramdisk starts) to N.
This is needed in case the ramdisk follows a kernel image.
.TP
.B "'noinitrd'"
(Only if the kernel was compiled with
.B CONFIG_BLK_DEV_RAM
and
.BR CONFIG_BLK_DEV_INITRD .)
These days it is possible to compile the kernel to use initrd.
When this feature is enabled, the boot process will load the kernel
and an initial ramdisk; then the kernel converts initrd into
a "normal" ramdisk, which is mounted read-write as root device;
then
.I /linuxrc
is executed; afterward the "real" root filesystem is mounted,
and the initrd filesystem is moved over to
.IR /initrd ;
finally
the usual boot sequence (e.g., invocation of
.IR /sbin/init )
is performed.

For a detailed description of the initrd feature, see the kernel source file
.IR Documentation/initrd.txt .

The 'noinitrd' option tells the kernel that although it was compiled for
operation with initrd, it should not go through the above steps, but
leave the initrd data under
.IR /dev/initrd .
(This device can be used only once: the data is freed as soon as
the last process that used it has closed
.IR /dev/initrd .)
.SS Boot arguments for SCSI devices
General notation for this section:

.I iobase
-- the first I/O port that the SCSI host occupies.
These are specified in hexadecimal notation,
and usually lie in the range from 0x200 to 0x3ff.

.I irq
-- the hardware interrupt that the card is configured to use.
Valid values will be dependent on the card in question, but will
usually be 5, 7, 9, 10, 11, 12, and 15.
The other values are usually
used for common peripherals like IDE hard disks, floppies, serial
ports, and so on.

.I scsi-id
-- the ID that the host adapter uses to identify itself on the
SCSI bus.
Only some host adapters allow you to change this value, as
most have it permanently specified internally.
The usual default value
is 7, but the Seagate and Future Domain TMC-950 boards use 6.

.I parity
-- whether the SCSI host adapter expects the attached devices
to supply a parity value with all information exchanges.
Specifying a one indicates parity checking is enabled,
and a zero disables parity checking.
Again, not all adapters will support selection of parity
behavior as a boot argument.
.TP
.B "'max_scsi_luns=...'"
A SCSI device can have a number of 'subdevices' contained within
itself.
The most common example is one of the new SCSI CD-ROMs that
handle more than one disk at a time.
Each CD is addressed as a
\&'Logical Unit Number' (LUN) of that particular device.
But most
devices, such as hard disks, tape drives and such are only one device,
and will be assigned to LUN zero.

Some poorly designed SCSI devices cannot handle being probed for
LUNs not equal to zero.
Therefore, if the compile-time flag
.B CONFIG_SCSI_MULTI_LUN
is not set, newer kernels will by default probe only LUN zero.

To specify the number of probed LUNs at boot, one enters
\&'max_scsi_luns=n' as a boot arg, where n is a number between one and
eight.
To avoid problems as described above, one would use n=1 to
avoid upsetting such broken devices.
.TP
.B "SCSI tape configuration"
Some boot time configuration of the SCSI tape driver can be achieved
by using the following:

.in +4n
.nf
.BI st= buf_size[,write_threshold[,max_bufs]]
.fi
.in
.sp
The first two numbers are specified in units of kB.
The default
.I buf_size
is 32kB, and the maximum size that can be specified is a
ridiculous 16384kB.
The
.I write_threshold
is the value at which the buffer is committed to tape, with a
default value of 30kB.
The maximum number of buffers varies
with the number of drives detected, and has a default of two.
An example usage would be:

.in +4n
.nf
st=32,30,2
.fi
.in
.IP
Full details can be found in the file
.I Documentation/scsi/st.txt
(or
.I drivers/scsi/README.st
for older kernels) in the Linux kernel source.
.SS Hard disks
.TP
.B "IDE Disk/CD-ROM Driver Parameters"
The IDE driver accepts a number of parameters, which range from disk
geometry specifications, to support for broken controller chips.
Drive-specific options are specified by using 'hdX=' with X in 'a'-'h'.

Non-drive-specific options are specified with the prefix 'hd='.
Note that using a drive-specific prefix for a non-drive-specific option
will still work, and the option will just be applied as expected.

Also note that 'hd=' can be used to refer to the next unspecified
drive in the (a, ..., h) sequence.
For the following discussions,
the 'hd=' option will be cited for brevity.
See the file
.I Documentation/ide/ide.txt
(or
.I Documentation/ide.txt
.\" Linux 2.0, 2.2, 2.4
in older kernels, or
.I drivers/block/README.ide
in ancient kernels) in the Linux kernel source for more details.
.TP
.B "The 'hd=cyls,heads,sects[,wpcom[,irq]]' options"
These options are used to specify the physical geometry of the disk.
Only the first three values are required.
The cylinder/head/sectors
values will be those used by fdisk.
The write precompensation value
is ignored for IDE disks.
The IRQ value specified will be the IRQ
used for the interface that the drive resides on, and is not really a
drive-specific parameter.
.TP
.B "The 'hd=serialize' option"
The dual IDE interface CMD-640 chip is broken as designed such that
when drives on the secondary interface are used at the same time as
drives on the primary interface, it will corrupt your data.
Using this
option tells the driver to make sure that both interfaces are never
used at the same time.
.TP
.B "The 'hd=noprobe' option"
Do not probe for this drive.
For example,

.in +4n
.nf
hdb=noprobe hdb=1166,7,17
.fi
.in
.IP
would disable the probe, but still specify the drive geometry so
that it would be registered as a valid block device, and hence
usable.
.TP
.B "The 'hd=nowerr' option"
Some drives apparently have the
.B WRERR_STAT
bit stuck on permanently.
This enables a work-around for these broken devices.
.TP
.B "The 'hd=cdrom' option"
This tells the IDE driver that there is an ATAPI compatible CD-ROM
attached in place of a normal IDE hard disk.
In most cases the CD-ROM
is identified automatically, but if it isn't then this may help.
.TP
.B "Standard ST-506 Disk Driver Options ('hd=')"
The standard disk driver can accept geometry arguments for the disks
similar to the IDE driver.
Note however that it expects only three
values (C/H/S); any more or any less and it will silently ignore you.
Also, it accepts only 'hd=' as an argument, that is, 'hda='
and so on are not valid here.
The format is as follows:

.in +4n
.nf
hd=cyls,heads,sects
.fi
.in
.IP
If there are two disks installed, the above is repeated with the
geometry parameters of the second disk.
.SS Ethernet devices
Different drivers make use of different parameters, but they all at
least share having an IRQ, an I/O port base value, and a name.
In its most generic form, it looks something like this:

.in +4n
.nf
ether=irq,iobase[,param_1[,...param_8]],name
.fi
.in

The first nonnumeric argument is taken as the name.
The param_n values (if applicable) usually have different meanings for each
different card/driver.
Typical param_n values are used to specify
things like shared memory address, interface selection, DMA channel
and the like.

The most common use of this parameter is to force probing for a second
ethercard, as the default is to probe only for one.
This can be accomplished with a simple:

.in +4n
.nf
ether=0,0,eth1
.fi
.in

Note that the values of zero for the IRQ and I/O base in the above
example tell the driver(s) to autoprobe.

The Ethernet-HowTo has extensive documentation on using multiple
cards and on the card/driver-specific implementation
of the param_n values where used.
Interested readers should refer to
the section in that document on their particular card.
.SS The floppy disk driver
There are many floppy driver options, and they are all listed in
.I Documentation/blockdev/floppy.txt
(or
.I Documentation/floppy.txt
in oplder kernels, or
.I drivers/block/README.fd
for ancient kernels) in the Linux kernel source.
See that file for the details.
.SS The sound driver
The sound driver can also accept boot arguments to override the compiled-in
values.
This is not recommended, as it is rather complex.
It is described in the Linux kernel source file
.IR Documentation/sound/oss/README.OSS
.RI ( drivers/sound/Readme.linux
in older kernel versions).
It accepts
a boot argument of the form:

.in +4n
.nf
sound=device1[,device2[,device3...[,device10]]]
.fi
.in
.IP
where each deviceN value is of the following format 0xTaaaId and the
bytes are used as follows:

T \- device type: 1=FM, 2=SB, 3=PAS, 4=GUS, 5=MPU401, 6=SB16,
7=SB16-MPU401

aaa \- I/O address in hex.

I \- interrupt line in hex (i.e 10=a, 11=b, ...)

d \- DMA channel.

As you can see, it gets pretty messy, and you are better off to compile
in your own personal values as recommended.
Using a boot argument of
\&'sound=0' will disable the sound driver entirely.
.SS The line printer driver
.TP
.B "'lp='"
.br
Syntax:

.in +4n
.nf
lp=0
lp=auto
lp=reset
lp=port[,port...]
.fi
.in
.IP
You can tell the printer driver what ports to use and what ports not
to use.
The latter comes in handy if you don't want the printer driver
to claim all available parallel ports, so that other drivers
(e.g., PLIP, PPA) can use them instead.

The format of the argument is multiple port names.
For example,
lp=none,parport0 would use the first parallel port for lp1, and
disable lp0.
To disable the printer driver entirely, one can use
lp=0.
.\" .SH AUTHORS
.\" Linus Torvalds (and many others)
.SH SEE ALSO
.BR klogd (8),
.BR mount (8)

For up-to-date information, see the kernel source file
.IR Documentation/kernel-parameters.txt .
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2002 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" 6 Aug 2002 - Initial Creation
.\" Modified 2003-05-23, Michael Kerrisk, <mtk.manpages@gmail.com>
.\" Modified 2004-05-27, Michael Kerrisk, <mtk.manpages@gmail.com>
.\" 2004-12-08, mtk Added O_NOATIME for CAP_FOWNER
.\" 2005-08-16, mtk, Added CAP_AUDIT_CONTROL and CAP_AUDIT_WRITE
.\" 2008-07-15, Serge Hallyn <serue@us.bbm.com>
.\"     Document file capabilities, per-process capability
.\"     bounding set, changed semantics for CAP_SETPCAP,
.\"     and other changes in 2.6.2[45].
.\"     Add CAP_MAC_ADMIN, CAP_MAC_OVERRIDE, CAP_SETFCAP.
.\" 2008-07-15, mtk
.\"     Add text describing circumstances in which CAP_SETPCAP
.\"     (theoretically) permits a thread to change the
.\"     capability sets of another thread.
.\"     Add section describing rules for programmatically
.\"     adjusting thread capability sets.
.\"     Describe rationale for capability bounding set.
.\"     Document "securebits" flags.
.\"     Add text noting that if we set the effective flag for one file
.\"     capability, then we must also set the effective flag for all
.\"     other capabilities where the permitted or inheritable bit is set.
.\" 2011-09-07, mtk/Serge hallyn: Add CAP_SYSLOG
.\"
.TH CAPABILITIES 7 2015-05-07 "Linux" "Linux Programmer's Manual"
.SH NAME
capabilities \- overview of Linux capabilities
.SH DESCRIPTION
For the purpose of performing permission checks,
traditional UNIX implementations distinguish two categories of processes:
.I privileged
processes (whose effective user ID is 0, referred to as superuser or root),
and
.I unprivileged
processes (whose effective UID is nonzero).
Privileged processes bypass all kernel permission checks,
while unprivileged processes are subject to full permission
checking based on the process's credentials
(usually: effective UID, effective GID, and supplementary group list).

Starting with kernel 2.2, Linux divides the privileges traditionally
associated with superuser into distinct units, known as
.IR capabilities ,
which can be independently enabled and disabled.
Capabilities are a per-thread attribute.
.\"
.SS Capabilities list
The following list shows the capabilities implemented on Linux,
and the operations or behaviors that each capability permits:
.TP
.BR CAP_AUDIT_CONTROL " (since Linux 2.6.11)"
Enable and disable kernel auditing; change auditing filter rules;
retrieve auditing status and filtering rules.
.TP
.BR CAP_AUDIT_READ " (since Linux 3.16)"
.\" commit a29b694aa1739f9d76538e34ae25524f9c549d59
.\" commit 3a101b8de0d39403b2c7e5c23fd0b005668acf48
Allow reading the audit log via a multicast netlink socket.
.TP
.BR CAP_AUDIT_WRITE " (since Linux 2.6.11)"
Write records to kernel auditing log.
.TP
.BR CAP_BLOCK_SUSPEND " (since Linux 3.5)"
Employ features that can block system suspend
.RB ( epoll (7)
.BR EPOLLWAKEUP ,
.IR /proc/sys/wake_lock ).
.TP
.B CAP_CHOWN
Make arbitrary changes to file UIDs and GIDs (see
.BR chown (2)).
.TP
.B CAP_DAC_OVERRIDE
Bypass file read, write, and execute permission checks.
(DAC is an abbreviation of "discretionary access control".)
.TP
.B CAP_DAC_READ_SEARCH
.PD 0
.RS
.IP * 2
Bypass file read permission checks and
directory read and execute permission checks;
.IP *
Invoke
.BR open_by_handle_at (2).
.RE
.PD

.TP
.B CAP_FOWNER
.PD 0
.RS
.IP * 2
Bypass permission checks on operations that normally
require the filesystem UID of the process to match the UID of
the file (e.g.,
.BR chmod (2),
.BR utime (2)),
excluding those operations covered by
.B CAP_DAC_OVERRIDE
and
.BR CAP_DAC_READ_SEARCH ;
.IP *
set extended file attributes (see
.BR chattr (1))
on arbitrary files;
.IP *
set Access Control Lists (ACLs) on arbitrary files;
.IP *
ignore directory sticky bit on file deletion;
.IP *
specify
.B O_NOATIME
for arbitrary files in
.BR open (2)
and
.BR fcntl (2).
.RE
.PD
.TP
.B CAP_FSETID
Don't clear set-user-ID and set-group-ID mode
bits when a file is modified;
set the set-group-ID bit for a file whose GID does not match
the filesystem or any of the supplementary GIDs of the calling process.
.TP
.B CAP_IPC_LOCK
.\" FIXME . As at Linux 3.2, there are some strange uses of this capability
.\" in other places; they probably should be replaced with something else.
Lock memory
.RB ( mlock (2),
.BR mlockall (2),
.BR mmap (2),
.BR shmctl (2)).
.TP
.B CAP_IPC_OWNER
Bypass permission checks for operations on System V IPC objects.
.TP
.B CAP_KILL
Bypass permission checks for sending signals (see
.BR kill (2)).
This includes use of the
.BR ioctl (2)
.B KDSIGACCEPT
operation.
.\" FIXME . CAP_KILL also has an effect for threads + setting child
.\"       termination signal to other than SIGCHLD: without this
.\"       capability, the termination signal reverts to SIGCHLD
.\"       if the child does an exec().  What is the rationale
.\"       for this?
.TP
.BR CAP_LEASE " (since Linux 2.4)"
Establish leases on arbitrary files (see
.BR fcntl (2)).
.TP
.B CAP_LINUX_IMMUTABLE
Set the
.B FS_APPEND_FL
and
.B FS_IMMUTABLE_FL
.\" These attributes are now available on ext2, ext3, Reiserfs, XFS, JFS
inode flags (see
.BR chattr (1)).
.TP
.BR CAP_MAC_ADMIN " (since Linux 2.6.25)"
Override Mandatory Access Control (MAC).
Implemented for the Smack Linux Security Module (LSM).
.TP
.BR CAP_MAC_OVERRIDE " (since Linux 2.6.25)"
Allow MAC configuration or state changes.
Implemented for the Smack LSM.
.TP
.BR CAP_MKNOD " (since Linux 2.4)"
Create special files using
.BR mknod (2).
.TP
.B CAP_NET_ADMIN
Perform various network-related operations:
.PD 0
.RS
.IP * 2
interface configuration;
.IP *
administration of IP firewall, masquerading, and accounting;
.IP *
modify routing tables;
.IP *
bind to any address for transparent proxying;
.IP *
set type-of-service (TOS)
.IP *
clear driver statistics;
.IP *
set promiscuous mode;
.IP *
enabling multicasting;
.IP *
use
.BR setsockopt (2)
to set the following socket options:
.BR SO_DEBUG ,
.BR SO_MARK ,
.BR SO_PRIORITY
(for a priority outside the range 0 to 6),
.BR SO_RCVBUFFORCE ,
and
.BR SO_SNDBUFFORCE .
.RE
.PD
.TP
.B CAP_NET_BIND_SERVICE
Bind a socket to Internet domain privileged ports
(port numbers less than 1024).
.TP
.B CAP_NET_BROADCAST
(Unused)  Make socket broadcasts, and listen to multicasts.
.TP
.B CAP_NET_RAW
.PD 0
.RS
.IP * 2
use RAW and PACKET sockets;
.IP *
bind to any address for transparent proxying.
.RE
.PD
.\" Also various IP options and setsockopt(SO_BINDTODEVICE)
.TP
.B CAP_SETGID
Make arbitrary manipulations of process GIDs and supplementary GID list;
forge GID when passing socket credentials via UNIX domain sockets;
write a group ID mapping in a user namespace (see
.BR user_namespaces (7)).
.TP
.BR CAP_SETFCAP " (since Linux 2.6.24)"
Set file capabilities.
.TP
.B CAP_SETPCAP
If file capabilities are not supported:
grant or remove any capability in the
caller's permitted capability set to or from any other process.
(This property of
.B CAP_SETPCAP
is not available when the kernel is configured to support
file capabilities, since
.B CAP_SETPCAP
has entirely different semantics for such kernels.)

If file capabilities are supported:
add any capability from the calling thread's bounding set
to its inheritable set;
drop capabilities from the bounding set (via
.BR prctl (2)
.BR PR_CAPBSET_DROP );
make changes to the
.I securebits
flags.
.TP
.B CAP_SETUID
Make arbitrary manipulations of process UIDs
.RB ( setuid (2),
.BR setreuid (2),
.BR setresuid (2),
.BR setfsuid (2));
forge UID when passing socket credentials via UNIX domain sockets;
write a user ID mapping in a user namespace (see
.BR user_namespaces (7)).
.\" FIXME CAP_SETUID also an effect in exec(); document this.
.TP
.B CAP_SYS_ADMIN
.PD 0
.RS
.IP * 2
Perform a range of system administration operations including:
.BR quotactl (2),
.BR mount (2),
.BR umount (2),
.BR swapon (2),
.BR swapoff (2),
.BR sethostname (2),
and
.BR setdomainname (2);
.IP *
perform privileged
.BR syslog (2)
operations (since Linux 2.6.37,
.BR CAP_SYSLOG
should be used to permit such operations);
.IP *
perform
.B VM86_REQUEST_IRQ
.BR vm86 (2)
command;
.IP *
perform
.B IPC_SET
and
.B IPC_RMID
operations on arbitrary System V IPC objects;
.IP *
override
.B RLIMIT_NPROC
resource limit;
.IP *
perform operations on
.I trusted
and
.I security
Extended Attributes (see
.BR xattr (7));
.IP *
use
.BR lookup_dcookie (2);
.IP *
use
.BR ioprio_set (2)
to assign
.B IOPRIO_CLASS_RT
and (before Linux 2.6.25)
.B IOPRIO_CLASS_IDLE
I/O scheduling classes;
.IP *
forge PID when passing socket credentials via UNIX domain sockets;
.IP *
exceed
.IR /proc/sys/fs/file-max ,
the system-wide limit on the number of open files,
in system calls that open files (e.g.,
.BR accept (2),
.BR execve (2),
.BR open (2),
.BR pipe (2));
.IP *
employ
.B CLONE_*
flags that create new namespaces with
.BR clone (2)
and
.BR unshare (2)
(but, since Linux 3.8,
creating user namespaces does not require any capability);
.IP *
call
.BR perf_event_open (2);
.IP *
access privileged
.I perf
event information;
.IP *
call
.BR setns (2)
(requires
.B CAP_SYS_ADMIN
in the
.I target
namespace);
.IP *
call
.BR fanotify_init (2);
.IP *
perform
.B KEYCTL_CHOWN
and
.B KEYCTL_SETPERM
.BR keyctl (2)
operations;
.IP *
perform
.BR madvise (2)
.B MADV_HWPOISON
operation;
.IP *
employ the
.B TIOCSTI
.BR ioctl (2)
to insert characters into the input queue of a terminal other than
the caller's controlling terminal;
.IP *
employ the obsolete
.BR nfsservctl (2)
system call;
.IP *
employ the obsolete
.BR bdflush (2)
system call;
.IP *
perform various privileged block-device
.BR ioctl (2)
operations;
.IP *
perform various privileged filesystem
.BR ioctl (2)
operations;
.IP *
perform administrative operations on many device drivers.
.RE
.PD
.TP
.B CAP_SYS_BOOT
Use
.BR reboot (2)
and
.BR kexec_load (2).
.TP
.B CAP_SYS_CHROOT
Use
.BR chroot (2).
.TP
.B CAP_SYS_MODULE
Load and unload kernel modules
(see
.BR init_module (2)
and
.BR delete_module (2));
in kernels before 2.6.25:
drop capabilities from the system-wide capability bounding set.
.TP
.B CAP_SYS_NICE
.PD 0
.RS
.IP * 2
Raise process nice value
.RB ( nice (2),
.BR setpriority (2))
and change the nice value for arbitrary processes;
.IP *
set real-time scheduling policies for calling process,
and set scheduling policies and priorities for arbitrary processes
.RB ( sched_setscheduler (2),
.BR sched_setparam (2),
.BR shed_setattr (2));
.IP *
set CPU affinity for arbitrary processes
.RB ( sched_setaffinity (2));
.IP *
set I/O scheduling class and priority for arbitrary processes
.RB ( ioprio_set (2));
.IP *
apply
.BR migrate_pages (2)
to arbitrary processes and allow processes
to be migrated to arbitrary nodes;
.\" FIXME CAP_SYS_NICE also has the following effect for
.\" migrate_pages(2):
.\"     do_migrate_pages(mm, &old, &new,
.\"         capable(CAP_SYS_NICE) ? MPOL_MF_MOVE_ALL : MPOL_MF_MOVE);
.\" Document this.
.IP *
apply
.BR move_pages (2)
to arbitrary processes;
.IP *
use the
.B MPOL_MF_MOVE_ALL
flag with
.BR mbind (2)
and
.BR move_pages (2).
.RE
.PD
.TP
.B CAP_SYS_PACCT
Use
.BR acct (2).
.TP
.B CAP_SYS_PTRACE
.PD 0
.RS
.IP * 3
Trace arbitrary processes using
.BR ptrace (2);
.IP *
apply
.BR get_robust_list (2)
to arbitrary processes;
.IP *
transfer data to or from the memory of arbitrary processes using
.BR process_vm_readv (2)
and
.BR process_vm_writev (2).
.IP *
inspect processes using
.BR kcmp (2).
.RE
.PD
.TP
.B CAP_SYS_RAWIO
.PD 0
.RS
.IP * 2
Perform I/O port operations
.RB ( iopl (2)
and
.BR ioperm (2));
.IP *
access
.IR /proc/kcore ;
.IP *
employ the
.B FIBMAP
.BR ioctl (2)
operation;
.IP *
open devices for accessing x86 model-specific registers (MSRs, see
.BR msr (4))
.IP *
update
.IR /proc/sys/vm/mmap_min_addr ;
.IP *
create memory mappings at addresses below the value specified by
.IR /proc/sys/vm/mmap_min_addr ;
.IP *
map files in
.IR /proc/bus/pci ;
.IP *
open
.IR /dev/mem
and
.IR /dev/kmem ;
.IP *
perform various SCSI device commands;
.IP *
perform certain operations on
.BR hpsa (4)
and
.BR cciss (4)
devices;
.IP *
perform a range of device-specific operations on other devices.
.RE
.PD
.TP
.B CAP_SYS_RESOURCE
.PD 0
.RS
.IP * 2
Use reserved space on ext2 filesystems;
.IP *
make
.BR ioctl (2)
calls controlling ext3 journaling;
.IP *
override disk quota limits;
.IP *
increase resource limits (see
.BR setrlimit (2));
.IP *
override
.B RLIMIT_NPROC
resource limit;
.IP *
override maximum number of consoles on console allocation;
.IP *
override maximum number of keymaps;
.IP *
allow more than 64hz interrupts from the real-time clock;
.IP *
raise
.I msg_qbytes
limit for a System V message queue above the limit in
.I /proc/sys/kernel/msgmnb
(see
.BR msgop (2)
and
.BR msgctl (2));
.IP *
override the
.I /proc/sys/fs/pipe-size-max
limit when setting the capacity of a pipe using the
.B F_SETPIPE_SZ
.BR fcntl (2)
command.
.IP *
use
.BR F_SETPIPE_SZ
to increase the capacity of a pipe above the limit specified by
.IR /proc/sys/fs/pipe-max-size ;
.IP *
override
.I /proc/sys/fs/mqueue/queues_max
limit when creating POSIX message queues (see
.BR mq_overview (7));
.IP *
employ
.BR prctl (2)
.B PR_SET_MM
operation;
.IP *
set
.IR /proc/PID/oom_score_adj
to a value lower than the value last set by a process with
.BR CAP_SYS_RESOURCE .
.RE
.PD
.TP
.B CAP_SYS_TIME
Set system clock
.RB ( settimeofday (2),
.BR stime (2),
.BR adjtimex (2));
set real-time (hardware) clock.
.TP
.B CAP_SYS_TTY_CONFIG
Use
.BR vhangup (2);
employ various privileged
.BR ioctl (2)
operations on virtual terminals.
.TP
.BR CAP_SYSLOG " (since Linux 2.6.37)"
.RS
.PD 0
.IP * 3
Perform privileged
.BR syslog (2)
operations.
See
.BR syslog (2)
for information on which operations require privilege.
.IP *
View kernel addresses exposed via
.I /proc
and other interfaces when
.IR /proc/sys/kernel/kptr_restrict
has the value 1.
(See the discussion of the
.I kptr_restrict
in
.BR proc (5).)
.PD
.RE
.TP
.BR CAP_WAKE_ALARM " (since Linux 3.0)"
Trigger something that will wake up the system (set
.B CLOCK_REALTIME_ALARM
and
.B CLOCK_BOOTTIME_ALARM
timers).
.\"
.SS Past and current implementation
A full implementation of capabilities requires that:
.IP 1. 3
For all privileged operations,
the kernel must check whether the thread has the required
capability in its effective set.
.IP 2.
The kernel must provide system calls allowing a thread's capability sets to
be changed and retrieved.
.IP 3.
The filesystem must support attaching capabilities to an executable file,
so that a process gains those capabilities when the file is executed.
.PP
Before kernel 2.6.24, only the first two of these requirements are met;
since kernel 2.6.24, all three requirements are met.
.\"
.SS Thread capability sets
Each thread has three capability sets containing zero or more
of the above capabilities:
.TP
.IR Permitted :
This is a limiting superset for the effective
capabilities that the thread may assume.
It is also a limiting superset for the capabilities that
may be added to the inheritable set by a thread that does not have the
.B CAP_SETPCAP
capability in its effective set.

If a thread drops a capability from its permitted set,
it can never reacquire that capability (unless it
.BR execve (2)s
either a set-user-ID-root program, or
a program whose associated file capabilities grant that capability).
.TP
.IR Inheritable :
This is a set of capabilities preserved across an
.BR execve (2).
It provides a mechanism for a process to assign capabilities
to the permitted set of the new program during an
.BR execve (2).
.TP
.IR Effective :
This is the set of capabilities used by the kernel to
perform permission checks for the thread.
.PP
A child created via
.BR fork (2)
inherits copies of its parent's capability sets.
See below for a discussion of the treatment of capabilities during
.BR execve (2).
.PP
Using
.BR capset (2),
a thread may manipulate its own capability sets (see below).
.PP
Since Linux 3.2, the file
.I /proc/sys/kernel/cap_last_cap
.\" commit 73efc0394e148d0e15583e13712637831f926720
exposes the numerical value of the highest capability
supported by the running kernel;
this can be used to determine the highest bit
that may be set in a capability set.
.\"
.SS File capabilities
Since kernel 2.6.24, the kernel supports
associating capability sets with an executable file using
.BR setcap (8).
The file capability sets are stored in an extended attribute (see
.BR setxattr (2))
named
.IR "security.capability" .
Writing to this extended attribute requires the
.BR CAP_SETFCAP
capability.
The file capability sets,
in conjunction with the capability sets of the thread,
determine the capabilities of a thread after an
.BR execve (2).

The three file capability sets are:
.TP
.IR Permitted " (formerly known as " forced ):
These capabilities are automatically permitted to the thread,
regardless of the thread's inheritable capabilities.
.TP
.IR Inheritable " (formerly known as " allowed ):
This set is ANDed with the thread's inheritable set to determine which
inheritable capabilities are enabled in the permitted set of
the thread after the
.BR execve (2).
.TP
.IR Effective :
This is not a set, but rather just a single bit.
If this bit is set, then during an
.BR execve (2)
all of the new permitted capabilities for the thread are
also raised in the effective set.
If this bit is not set, then after an
.BR execve (2),
none of the new permitted capabilities is in the new effective set.

Enabling the file effective capability bit implies
that any file permitted or inheritable capability that causes a
thread to acquire the corresponding permitted capability during an
.BR execve (2)
(see the transformation rules described below) will also acquire that
capability in its effective set.
Therefore, when assigning capabilities to a file
.RB ( setcap (8),
.BR cap_set_file (3),
.BR cap_set_fd (3)),
if we specify the effective flag as being enabled for any capability,
then the effective flag must also be specified as enabled
for all other capabilities for which the corresponding permitted or
inheritable flags is enabled.
.\"
.SS Transformation of capabilities during execve()
.PP
During an
.BR execve (2),
the kernel calculates the new capabilities of
the process using the following algorithm:
.in +4n
.nf

P'(permitted) = (P(inheritable) & F(inheritable)) |
                (F(permitted) & cap_bset)

P'(effective) = F(effective) ? P'(permitted) : 0

P'(inheritable) = P(inheritable)    [i.e., unchanged]

.fi
.in
where:
.RS 4
.IP P 10
denotes the value of a thread capability set before the
.BR execve (2)
.IP P'
denotes the value of a capability set after the
.BR execve (2)
.IP F
denotes a file capability set
.IP cap_bset
is the value of the capability bounding set (described below).
.RE
.\"
.SS Capabilities and execution of programs by root
In order to provide an all-powerful
.I root
using capability sets, during an
.BR execve (2):
.IP 1. 3
If a set-user-ID-root program is being executed,
or the real user ID of the process is 0 (root)
then the file inheritable and permitted sets are defined to be all ones
(i.e., all capabilities enabled).
.IP 2.
If a set-user-ID-root program is being executed,
then the file effective bit is defined to be one (enabled).
.PP
The upshot of the above rules,
combined with the capabilities transformations described above,
is that when a process
.BR execve (2)s
a set-user-ID-root program, or when a process with an effective UID of 0
.BR execve (2)s
a program,
it gains all capabilities in its permitted and effective capability sets,
except those masked out by the capability bounding set.
.\" If a process with real UID 0, and nonzero effective UID does an
.\" exec(), then it gets all capabilities in its
.\" permitted set, and no effective capabilities
This provides semantics that are the same as those provided by
traditional UNIX systems.
.SS Capability bounding set
The capability bounding set is a security mechanism that can be used
to limit the capabilities that can be gained during an
.BR execve (2).
The bounding set is used in the following ways:
.IP * 2
During an
.BR execve (2),
the capability bounding set is ANDed with the file permitted
capability set, and the result of this operation is assigned to the
thread's permitted capability set.
The capability bounding set thus places a limit on the permitted
capabilities that may be granted by an executable file.
.IP *
(Since Linux 2.6.25)
The capability bounding set acts as a limiting superset for
the capabilities that a thread can add to its inheritable set using
.BR capset (2).
This means that if a capability is not in the bounding set,
then a thread can't add this capability to its
inheritable set, even if it was in its permitted capabilities,
and thereby cannot have this capability preserved in its
permitted set when it
.BR execve (2)s
a file that has the capability in its inheritable set.
.PP
Note that the bounding set masks the file permitted capabilities,
but not the inherited capabilities.
If a thread maintains a capability in its inherited set
that is not in its bounding set,
then it can still gain that capability in its permitted set
by executing a file that has the capability in its inherited set.
.PP
Depending on the kernel version, the capability bounding set is either
a system-wide attribute, or a per-process attribute.
.PP
.B "Capability bounding set prior to Linux 2.6.25"
.PP
In kernels before 2.6.25, the capability bounding set is a system-wide
attribute that affects all threads on the system.
The bounding set is accessible via the file
.IR /proc/sys/kernel/cap-bound .
(Confusingly, this bit mask parameter is expressed as a
signed decimal number in
.IR /proc/sys/kernel/cap-bound .)

Only the
.B init
process may set capabilities in the capability bounding set;
other than that, the superuser (more precisely: programs with the
.B CAP_SYS_MODULE
capability) may only clear capabilities from this set.

On a standard system the capability bounding set always masks out the
.B CAP_SETPCAP
capability.
To remove this restriction (dangerous!), modify the definition of
.B CAP_INIT_EFF_SET
in
.I include/linux/capability.h
and rebuild the kernel.

The system-wide capability bounding set feature was added
to Linux starting with kernel version 2.2.11.
.\"
.PP
.B "Capability bounding set from Linux 2.6.25 onward"
.PP
From Linux 2.6.25, the
.I "capability bounding set"
is a per-thread attribute.
(There is no longer a system-wide capability bounding set.)

The bounding set is inherited at
.BR fork (2)
from the thread's parent, and is preserved across an
.BR execve (2).

A thread may remove capabilities from its capability bounding set using the
.BR prctl (2)
.B PR_CAPBSET_DROP
operation, provided it has the
.B CAP_SETPCAP
capability.
Once a capability has been dropped from the bounding set,
it cannot be restored to that set.
A thread can determine if a capability is in its bounding set using the
.BR prctl (2)
.B PR_CAPBSET_READ
operation.

Removing capabilities from the bounding set is supported only if file
capabilities are compiled into the kernel.
In kernels before Linux 2.6.33,
file capabilities were an optional feature configurable via the
.B CONFIG_SECURITY_FILE_CAPABILITIES
option.
Since Linux 2.6.33,
.\" commit b3a222e52e4d4be77cc4520a57af1a4a0d8222d1
the configuration option has been removed
and file capabilities are always part of the kernel.
When file capabilities are compiled into the kernel, the
.B init
process (the ancestor of all processes) begins with a full bounding set.
If file capabilities are not compiled into the kernel, then
.B init
begins with a full bounding set minus
.BR CAP_SETPCAP ,
because this capability has a different meaning when there are
no file capabilities.

Removing a capability from the bounding set does not remove it
from the thread's inherited set.
However it does prevent the capability from being added
back into the thread's inherited set in the future.
.\"
.\"
.SS Effect of user ID changes on capabilities
To preserve the traditional semantics for transitions between
0 and nonzero user IDs,
the kernel makes the following changes to a thread's capability
sets on changes to the thread's real, effective, saved set,
and filesystem user IDs (using
.BR setuid (2),
.BR setresuid (2),
or similar):
.IP 1. 3
If one or more of the real, effective or saved set user IDs
was previously 0, and as a result of the UID changes all of these IDs
have a nonzero value,
then all capabilities are cleared from the permitted and effective
capability sets.
.IP 2.
If the effective user ID is changed from 0 to nonzero,
then all capabilities are cleared from the effective set.
.IP 3.
If the effective user ID is changed from nonzero to 0,
then the permitted set is copied to the effective set.
.IP 4.
If the filesystem user ID is changed from 0 to nonzero (see
.BR setfsuid (2)),
then the following capabilities are cleared from the effective set:
.BR CAP_CHOWN ,
.BR CAP_DAC_OVERRIDE ,
.BR CAP_DAC_READ_SEARCH ,
.BR CAP_FOWNER ,
.BR CAP_FSETID ,
.B CAP_LINUX_IMMUTABLE
(since Linux 2.6.30),
.BR CAP_MAC_OVERRIDE ,
and
.B CAP_MKNOD
(since Linux 2.6.30).
If the filesystem UID is changed from nonzero to 0,
then any of these capabilities that are enabled in the permitted set
are enabled in the effective set.
.PP
If a thread that has a 0 value for one or more of its user IDs wants
to prevent its permitted capability set being cleared when it resets
all of its user IDs to nonzero values, it can do so using the
.BR prctl (2)
.B PR_SET_KEEPCAPS
operation or the
.B SECBIT_KEEP_CAPS
securebits flag described below.
.\"
.SS Programmatically adjusting capability sets
A thread can retrieve and change its capability sets using the
.BR capget (2)
and
.BR capset (2)
system calls.
However, the use of
.BR cap_get_proc (3)
and
.BR cap_set_proc (3),
both provided in the
.I libcap
package,
is preferred for this purpose.
The following rules govern changes to the thread capability sets:
.IP 1. 3
If the caller does not have the
.B CAP_SETPCAP
capability,
the new inheritable set must be a subset of the combination
of the existing inheritable and permitted sets.
.IP 2.
(Since Linux 2.6.25)
The new inheritable set must be a subset of the combination of the
existing inheritable set and the capability bounding set.
.IP 3.
The new permitted set must be a subset of the existing permitted set
(i.e., it is not possible to acquire permitted capabilities
that the thread does not currently have).
.IP 4.
The new effective set must be a subset of the new permitted set.
.SS The securebits flags: establishing a capabilities-only environment
.\" For some background:
.\"       see http://lwn.net/Articles/280279/ and
.\"       http://article.gmane.org/gmane.linux.kernel.lsm/5476/
Starting with kernel 2.6.26,
and with a kernel in which file capabilities are enabled,
Linux implements a set of per-thread
.I securebits
flags that can be used to disable special handling of capabilities for UID 0
.RI ( root ).
These flags are as follows:
.TP
.B SECBIT_KEEP_CAPS
Setting this flag allows a thread that has one or more 0 UIDs to retain
its capabilities when it switches all of its UIDs to a nonzero value.
If this flag is not set,
then such a UID switch causes the thread to lose all capabilities.
This flag is always cleared on an
.BR execve (2).
(This flag provides the same functionality as the older
.BR prctl (2)
.B PR_SET_KEEPCAPS
operation.)
.TP
.B SECBIT_NO_SETUID_FIXUP
Setting this flag stops the kernel from adjusting capability sets when
the threads's effective and filesystem UIDs are switched between
zero and nonzero values.
(See the subsection
.IR "Effect of User ID Changes on Capabilities" .)
.TP
.B SECBIT_NOROOT
If this bit is set, then the kernel does not grant capabilities
when a set-user-ID-root program is executed, or when a process with
an effective or real UID of 0 calls
.BR execve (2).
(See the subsection
.IR "Capabilities and execution of programs by root" .)
.PP
Each of the above "base" flags has a companion "locked" flag.
Setting any of the "locked" flags is irreversible,
and has the effect of preventing further changes to the
corresponding "base" flag.
The locked flags are:
.BR SECBIT_KEEP_CAPS_LOCKED ,
.BR SECBIT_NO_SETUID_FIXUP_LOCKED ,
and
.BR SECBIT_NOROOT_LOCKED .
.PP
The
.I securebits
flags can be modified and retrieved using the
.BR prctl (2)
.B PR_SET_SECUREBITS
and
.B PR_GET_SECUREBITS
operations.
The
.B CAP_SETPCAP
capability is required to modify the flags.

The
.I securebits
flags are inherited by child processes.
During an
.BR execve (2),
all of the flags are preserved, except
.B SECBIT_KEEP_CAPS
which is always cleared.

An application can use the following call to lock itself,
and all of its descendants,
into an environment where the only way of gaining capabilities
is by executing a program with associated file capabilities:
.in +4n
.nf

prctl(PR_SET_SECUREBITS,
        SECBIT_KEEP_CAPS_LOCKED |
        SECBIT_NO_SETUID_FIXUP |
        SECBIT_NO_SETUID_FIXUP_LOCKED |
        SECBIT_NOROOT |
        SECBIT_NOROOT_LOCKED);
.fi
.in
.SS Interaction with user namespaces
For a discussion of the interaction of capabilities and user namespaces, see
.BR user_namespaces (7).
.SH CONFORMING TO
.PP
No standards govern capabilities, but the Linux capability implementation
is based on the withdrawn POSIX.1e draft standard; see
.UR http://wt.tuxomania.net\:/publications\:/posix.1e/
.UE .
.SH NOTES
From kernel 2.5.27 to kernel 2.6.26,
.\" commit 5915eb53861c5776cfec33ca4fcc1fd20d66dd27 removed
.\" CONFIG_SECURITY_CAPABILITIES
capabilities were an optional kernel component,
and can be enabled/disabled via the
.B CONFIG_SECURITY_CAPABILITIES
kernel configuration option.

The
.I /proc/PID/task/TID/status
file can be used to view the capability sets of a thread.
The
.I /proc/PID/status
file shows the capability sets of a process's main thread.
Before Linux 3.8, nonexistent capabilities were shown as being
enabled (1) in these sets.
Since Linux 3.8,
.\" 7b9a7ec565505699f503b4fcf61500dceb36e744
all nonexistent capabilities (above
.BR CAP_LAST_CAP )
are shown as disabled (0).

The
.I libcap
package provides a suite of routines for setting and
getting capabilities that is more comfortable and less likely
to change than the interface provided by
.BR capset (2)
and
.BR capget (2).
This package also provides the
.BR setcap (8)
and
.BR getcap (8)
programs.
It can be found at
.br
.UR http://www.kernel.org\:/pub\:/linux\:/libs\:/security\:/linux-privs
.UE .

Before kernel 2.6.24, and from kernel 2.6.24 to kernel 2.6.32 if
file capabilities are not enabled, a thread with the
.B CAP_SETPCAP
capability can manipulate the capabilities of threads other than itself.
However, this is only theoretically possible,
since no thread ever has
.BR CAP_SETPCAP
in either of these cases:
.IP * 2
In the pre-2.6.25 implementation the system-wide capability bounding set,
.IR /proc/sys/kernel/cap-bound ,
always masks out this capability, and this can not be changed
without modifying the kernel source and rebuilding.
.IP *
If file capabilities are disabled in the current implementation, then
.B init
starts out with this capability removed from its per-process bounding
set, and that bounding set is inherited by all other processes
created on the system.
.SH SEE ALSO
.BR capsh (1),
.BR setpriv (1),
.BR prctl (2),
.BR setfsuid (2),
.BR cap_clear (3),
.BR cap_copy_ext (3),
.BR cap_from_text (3),
.BR cap_get_file (3),
.BR cap_get_proc (3),
.BR cap_init (3),
.BR capgetp (3),
.BR capsetp (3),
.BR libcap (3),
.BR credentials (7),
.BR user_namespaces (7),
.BR pthreads (7),
.BR getcap (8),
.BR setcap (8)
.PP
.I include/linux/capability.h
in the Linux kernel source tree
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
'\" t -*- coding: UTF-8 -*-
.\" Copyright (c) 1996 Eric S. Raymond <esr@thyrsus.com>
.\" and Copyright (c) Andries Brouwer <aeb@cwi.nl>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_ONEPARA)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\" %%%LICENSE_END
.\"
.\" This is combined from many sources, including notes by aeb and
.\" research by esr.  Portions derive from a writeup by Roman Czyborra.
.\"
.\" Changes also by David Starner <dstarner98@aasaa.ofe.org>.
.\"
.TH CHARSETS 7 2014-08-19 "Linux" "Linux Programmer's Manual"
.SH NAME
charsets - character set standards and internationalization
.SH DESCRIPTION
This manual page gives an overview on different character set standards
and how they were used on Linux before Unicode became ubiquitous.
Some of this information is still helpful for people working with legacy
systems and documents.
.LP
Standards discussed include such as
ASCII, GB 2312, ISO 8859, JIS, KOI8-R, KS, and Unicode.
.LP
The primary emphasis is on character sets that were actually used by
locale character sets, not the myriad others that could be found in data
from other systems.
.SS ASCII
ASCII (American Standard Code For Information Interchange) is the original
7-bit character set, originally designed for American English.
Also known as US-ASCII.
It is currently described by the ISO 646:1991 IRV
(International Reference Version) standard.
.LP
Various ASCII variants replacing the dollar sign with other currency
symbols and replacing punctuation with non-English alphabetic
characters to cover German, French, Spanish, and others in 7 bits
emerged.
All are deprecated;
glibc does not support locales whose character sets are not true
supersets of ASCII.
.LP
As Unicode, when using UTF-8, is ASCII-compatible, plain ASCII text
still renders properly on modern UTF-8 using systems.
.SS ISO 8859
ISO 8859 is a series of 15 8-bit character sets, all of which have ASCII
in their low (7-bit) half, invisible control characters in positions
128 to 159, and 96 fixed-width graphics in positions 160-255.
.LP
Of these, the most important is ISO 8859-1
("Latin Alphabet No .1" / Latin-1).
It was widely adopted and supported by different systems,
and is gradually being replaced with Unicode.
The ISO 8859-1 characters are also the first 256 characters of Unicode.
.LP
Console support for the other 8859 character sets is available under
Linux through user-mode utilities (such as
.BR setfont (8))
that modify keyboard bindings and the EGA graphics
table and employ the "user mapping" font table in the console
driver.
.LP
Here are brief descriptions of each set:
.TP
8859-1 (Latin-1)
Latin-1 covers many West European languages such as Albanian, Basque,
Danish, English, Faroese, Galician, Icelandic, Irish, Italian,
Norwegian, Portuguese, Spanish, and Swedish.
The lack of the ligatures Dutch Ĳ/ĳ, French œ, and old-style „German“
quotation marks was considered tolerable.
.TP
8859-2 (Latin-2)
Latin-2 supports many Latin-written Central and East European
languages such as Bosnian, Croatian, Czech, German, Hungarian, Polish,
Slovak, and Slovene.
Replacing Romanian ș/ț with ş/ţ was considered tolerable.
.TP
8859-3 (Latin-3)
Latin-3 was designed to cover of Esperanto, Maltese, and Turkish, but
8859-9 later superseded it for Turkish.
.TP
8859-4 (Latin-4)
Latin-4 introduced letters for North European languages such as
Estonian, Latvian, and Lithuanian, but was superseded by 8859-10 and
8859-13.
.TP
8859-5
Cyrillic letters supporting Bulgarian, Byelorussian, Macedonian,
Russian, Serbian, and (almost completely) Ukrainian.
It was never widely used, see the discussion of KOI8-R/KOI8-U below.
.TP
8859-6
Was created for Arabic.
The 8859-6 glyph table is a fixed font of separate
letter forms, but a proper display engine should combine these
using the proper initial, medial, and final forms.
.TP
8859-7
Was created for Modern Greek in 1987, updated in 2003.
.TP
8859-8
Supports Modern Hebrew without niqud (punctuation signs).
Niqud and full-fledged Biblical Hebrew were outside the scope of this
character set.
.TP
8859-9 (Latin-5)
This is a variant of Latin-1 that replaces Icelandic letters with
Turkish ones.
.TP
8859-10 (Latin-6)
Latin-6 added the Inuit (Greenlandic) and Sami (Lappish) letters that were
missing in Latin-4 to cover the entire Nordic area.
.TP
8859-11
Supports the Thai alphabet and is nearly identical to the TIS-620
standard.
.TP
8859-12
This set does not exist.
.TP
8859-13 (Latin-7)
Supports the Baltic Rim languages; in particular, it includes Latvian
characters not found in Latin-4.
.TP
8859-14 (Latin-8)
This is the Celtic character set, covering Old Irish, Manx, Gaelic,
Welsh, Cornish, and Breton.
.TP
8859-15 (Latin-9)
Latin-9 is similar to the widely used Latin-1 but replaces some less
common symbols with the Euro sign and French and Finnish letters that
were missing in Latin-1.
.TP
8859-16 (Latin-10)
This set covers many Southeast European languages, and most
importantly supports Romanian more completely than Latin-2.
.SS KOI8-R / KOI8-U
KOI8-R is a non-ISO character set popular in Russia before Unicode.
The lower half is ASCII;
the upper is a Cyrillic character set somewhat better designed than
ISO 8859-5.
KOI8-U, based on KOI8-R, has better support for Ukrainian.
Neither of these sets are ISO-2022 compatible,
unlike the ISO-8859 series.
.LP
Console support for KOI8-R is available under Linux through user-mode
utilities that modify keyboard bindings and the EGA graphics table,
and employ the "user mapping" font table in the console driver.
.SS GB 2312
GB 2312 is a mainland Chinese national standard character set used
to express simplified Chinese.
Just like JIS X 0208, characters are
mapped into a 94x94 two-byte matrix used to construct EUC-CN.
EUC-CN
is the most important encoding for Linux and includes ASCII and
GB 2312.
Note that EUC-CN is often called as GB, GB 2312, or CN-GB.
.SS Big5
Big5 was a popular character set in Taiwan to express traditional
Chinese.
(Big5 is both a character set and an encoding.)
It is a superset of ASCII.
Non-ASCII characters are expressed in two bytes.
Bytes 0xa1-0xfe are used as leading bytes for two-byte characters.
Big5 and its extension were widely used in Taiwan and Hong Kong.
It is not ISO 2022 compliant.
.\" Thanks to Tomohiro KUBOTA for the following sections about
.\" national standards.
.SS JIS X 0208
JIS X 0208 is a Japanese national standard character set.
Though there are some more Japanese national standard character sets (like
JIS X 0201, JIS X 0212, and JIS X 0213), this is the most important one.
Characters are mapped into a 94x94 two-byte matrix,
whose each byte is in the range 0x21-0x7e.
Note that JIS X 0208 is a character set, not an encoding.
This means that JIS X 0208
itself is not used for expressing text data.
JIS X 0208 is used
as a component to construct encodings such as EUC-JP, Shift_JIS,
and ISO-2022-JP.
EUC-JP is the most important encoding for Linux
and includes ASCII and JIS X 0208.
In EUC-JP, JIS X 0208
characters are expressed in two bytes, each of which is the
JIS X 0208 code plus 0x80.
.SS KS X 1001
KS X 1001 is a Korean national standard character set.
Just as
JIS X 0208, characters are mapped into a 94x94 two-byte matrix.
KS X 1001 is used like JIS X 0208, as a component
to construct encodings such as EUC-KR, Johab, and ISO-2022-KR.
EUC-KR is the most important encoding for Linux and includes
ASCII and KS X 1001.
KS C 5601 is an older name for KS X 1001.
.SS ISO 2022 and ISO 4873
The ISO 2022 and 4873 standards describe a font-control model
based on VT100 practice.
This model is (partially) supported
by the Linux kernel and by
.BR xterm (1).
Several ISO 2022-based character encodings have been defined,
especially for Japanese.
.LP
There are 4 graphic character sets, called G0, G1, G2, and G3,
and one of them is the current character set for codes with
high bit zero (initially G0), and one of them is the current
character set for codes with high bit one (initially G1).
Each graphic character set has 94 or 96 characters, and is
essentially a 7-bit character set.
It uses codes either
040-0177 (041-0176) or 0240-0377 (0241-0376).
G0 always has size 94 and uses codes 041-0176.
.LP
Switching between character sets is done using the shift functions
\fB^N\fP (SO or LS1), \fB^O\fP (SI or LS0), ESC n (LS2), ESC o (LS3),
ESC N (SS2), ESC O (SS3), ESC ~ (LS1R), ESC } (LS2R), ESC | (LS3R).
The function LS\fIn\fP makes character set G\fIn\fP the current one
for codes with high bit zero.
The function LS\fIn\fPR makes character set G\fIn\fP the current one
for codes with high bit one.
The function SS\fIn\fP makes character set G\fIn\fP (\fIn\fP=2 or 3)
the current one for the next character only (regardless of the value
of its high order bit).
.LP
A 94-character set is designated as G\fIn\fP character set
by an escape sequence ESC ( xx (for G0), ESC ) xx (for G1),
ESC * xx (for G2), ESC + xx (for G3), where xx is a symbol
or a pair of symbols found in the ISO 2375 International
Register of Coded Character Sets.
For example, ESC ( @ selects the ISO 646 character set as G0,
ESC ( A selects the UK standard character set (with pound
instead of number sign), ESC ( B selects ASCII (with dollar
instead of currency sign), ESC ( M selects a character set
for African languages, ESC ( ! A selects the Cuban character
set, and so on.
.LP
A 96-character set is designated as G\fIn\fP character set
by an escape sequence ESC \- xx (for G1), ESC . xx (for G2)
or ESC / xx (for G3).
For example, ESC \- G selects the Hebrew alphabet as G1.
.LP
A multibyte character set is designated as G\fIn\fP character set
by an escape sequence ESC $ xx or ESC $ ( xx (for G0),
ESC $ ) xx (for G1), ESC $ * xx (for G2), ESC $ + xx (for G3).
For example, ESC $ ( C selects the Korean character set for G0.
The Japanese character set selected by ESC $ B has a more
recent version selected by ESC & @ ESC $ B.
.LP
ISO 4873 stipulates a narrower use of character sets, where G0
is fixed (always ASCII), so that G1, G2 and G3
can be invoked only for codes with the high order bit set.
In particular, \fB^N\fP and \fB^O\fP are not used anymore, ESC ( xx
can be used only with xx=B, and ESC ) xx, ESC * xx, ESC + xx
are equivalent to ESC \- xx, ESC . xx, ESC / xx, respectively.
.SS TIS-620
TIS-620 is a Thai national standard character set and a superset
of ASCII.
In the same fashion as the ISO 8859 series, Thai characters are mapped into
0xa1-0xfe.
.SS Unicode
Unicode (ISO 10646) is a standard which aims to unambiguously represent
every character in every human language.
Unicode's structure permits 20.1 bits to encode every character.
Since most computers don't include 20.1-bit integers, Unicode is
usually encoded as 32-bit integers internally and either a series of
16-bit integers (UTF-16) (needing two 16-bit integers only when
encoding certain rare characters) or a series of 8-bit bytes (UTF-8).
.LP
Linux represents Unicode using the 8-bit Unicode Transformation Format
(UTF-8).
UTF-8 is a variable length encoding of Unicode.
It uses 1
byte to code 7 bits, 2 bytes for 11 bits, 3 bytes for 16 bits, 4 bytes
for 21 bits, 5 bytes for 26 bits, 6 bytes for 31 bits.
.LP
Let 0,1,x stand for a zero, one, or arbitrary bit.
A byte 0xxxxxxx
stands for the Unicode 00000000 0xxxxxxx which codes the same symbol
as the ASCII 0xxxxxxx.
Thus, ASCII goes unchanged into UTF-8, and
people using only ASCII do not notice any change: not in code, and not
in file size.
.LP
A byte 110xxxxx is the start of a 2-byte code, and 110xxxxx 10yyyyyy
is assembled into 00000xxx xxyyyyyy.
A byte 1110xxxx is the start
of a 3-byte code, and 1110xxxx 10yyyyyy 10zzzzzz is assembled
into xxxxyyyy yyzzzzzz.
(When UTF-8 is used to code the 31-bit ISO 10646
then this progression continues up to 6-byte codes.)
.LP
For most texts in ISO-8859 character sets, this means that the
characters outside of ASCII are now coded with two bytes.
This tends
to expand ordinary text files by only one or two percent.
For Russian
or Greek texts, this expands ordinary text files by 100%, since text in
those languages is mostly outside of ASCII.
For Japanese users this means
that the 16-bit codes now in common use will take three bytes.
While there are algorithmic conversions from some character sets
(especially ISO 8859-1) to Unicode, general conversion requires
carrying around conversion tables, which can be quite large for 16-bit
codes.
.LP
Note that UTF-8 is self-synchronizing: 10xxxxxx is a tail, any other
byte is the head of a code.
Note that the only way ASCII bytes occur
in a UTF-8 stream, is as themselves.
In particular, there are no
embedded NULs (\(aq\\0\(aq) or \(aq/\(aqs that form part of some larger code.
.LP
Since ASCII, and, in particular, NUL and \(aq/\(aq, are unchanged, the
kernel does not notice that UTF-8 is being used.
It does not care at
all what the bytes it is handling stand for.
.LP
Rendering of Unicode data streams is typically handled through
"subfont" tables which map a subset of Unicode to glyphs.
Internally
the kernel uses Unicode to describe the subfont loaded in video RAM.
This means that in the Linux console in UTF-8 mode, one can use a character
set with 512 different symbols.
This is not enough for Japanese, Chinese, and
Korean, but it is enough for most other purposes.
.SH SEE ALSO
.BR iconv (1),
.BR console (4),
.BR ascii (7),
.BR iso_8859-1 (7),
.BR unicode (7),
.BR utf-8 (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 2002 Walter Harms (walter.harms@informatik.uni-oldenburg.de)
.\"
.\" %%%LICENSE_START(GPL_NOVERSION_ONELINE)
.\" Distributed under GPL
.\" %%%LICENSE_END
.\"
.TH COMPLEX 7 2011-09-16 "" "Linux Programmer's Manual"
.SH NAME
complex \- basics of complex mathematics
.SH SYNOPSIS
.B #include <complex.h>
.SH DESCRIPTION
Complex numbers are numbers of the form z = a+b*i, where a and b are
real numbers and i = sqrt(\-1), so that i*i = \-1.
.br
There are other ways to represent that number.
The pair (a,b) of real
numbers may be viewed as a point in the plane, given by X- and
Y-coordinates.
This same point may also be described by giving
the pair of real numbers (r,phi), where r is the distance to the origin O,
and phi the angle between the X-axis and the line Oz.
Now
z = r*exp(i*phi) = r*(cos(phi)+i*sin(phi)).
.PP
The basic operations are defined on z = a+b*i and w = c+d*i as:
.TP
.B addition: z+w = (a+c) + (b+d)*i
.TP
.B multiplication: z*w = (a*c \- b*d) + (a*d + b*c)*i
.TP
.B division: z/w = ((a*c + b*d)/(c*c + d*d)) + ((b*c \- a*d)/(c*c + d*d))*i
.PP
Nearly all math function have a complex counterpart but there are
some complex-only functions.
.SH EXAMPLE
Your C-compiler can work with complex numbers if it supports the C99 standard.
Link with \fI\-lm\fP.
The imaginary unit is represented by I.
.sp
.nf
/* check that exp(i * pi) == \-1 */
#include <math.h>        /* for atan */
#include <stdio.h>
#include <complex.h>

int
main(void)
{
    double pi = 4 * atan(1.0);
    double complex z = cexp(I * pi);
    printf("%f + %f * i\\n", creal(z), cimag(z));
}
.fi
.SH SEE ALSO
.BR cabs (3),
.BR cacos (3),
.BR cacosh (3),
.BR carg (3),
.BR casin (3),
.BR casinh (3),
.BR catan (3),
.BR catanh (3),
.BR ccos (3),
.BR ccosh (3),
.BR cerf (3),
.BR cexp (3),
.BR cexp2 (3),
.BR cimag (3),
.BR clog (3),
.BR clog10 (3),
.BR clog2 (3),
.BR conj (3),
.BR cpow (3),
.BR cproj (3),
.BR creal (3),
.BR csin (3),
.BR csinh (3),
.BR csqrt (3),
.BR ctan (3),
.BR ctanh (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
'\" t -*- coding: UTF-8 -*-
.\" Copyright 2009    Lefteris Dimitroulakis (edimitro@tee.gr)
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.TH CP1251 7 2014-12-31 "Linux" "Linux Programmer's Manual"
.SH NAME
cp1251 \- CP\ 1251 character set encoded in octal, decimal,
and hexadecimal
.SH DESCRIPTION
The Windows Code Pages include several 8-bit extensions to the ASCII
character set (also known as ISO 646-IRV).
CP\ 1251 encodes the
characters used in Cyrillic scripts.
.SS CP\ 1251 characters
The following table displays the characters in CP\ 1251, which
are printable and unlisted in the
.BR ascii (7)
manual page.
.TS
l l l c lp-1.
Oct	Dec	Hex	Char	Description
_
200	128	80	Ђ	CYRILLIC CAPITAL LETTER DJE
201	129	81	Ѓ	CYRILLIC CAPITAL LETTER GJE
202	130	82	‚	SINGLE LOW-9 QUOTATION MARK
203	131	83	ѓ	CYRILLIC SMALL LETTER GJE
204	132	84	„	DOUBLE LOW-9 QUOTATION MARK
205	133	85	…	HORIZONTAL ELLIPSIS
206	134	86	†	DAGGER
207	135	87	‡	DOUBLE DAGGER
210	136	88	€	EURO SIGN
211	137	89	‰	PER MILLE SIGN
212	138	8A	Љ	CYRILLIC CAPITAL LETTER LJE
213	139	8B	‹	SINGLE LEFT-POINTING ANGLE QUOTATION MARK
214	140	8C	Њ	CYRILLIC CAPITAL LETTER NJE
215	141	8D	Ќ	CYRILLIC CAPITAL LETTER KJE
216	142	8E	Ћ	CYRILLIC CAPITAL LETTER TSHE
217	143	8F	Џ	CYRILLIC CAPITAL LETTER DZHE
220	144	90	ђ	CYRILLIC SMALL LETTER DJE
221	145	91	‘	LEFT SINGLE QUOTATION MARK
222	146	92	’	RIGHT SINGLE QUOTATION MARK
223	147	93	“	LEFT DOUBLE QUOTATION MARK
224	148	94	”	RIGHT DOUBLE QUOTATION MARK
225	149	95	•	BULLET
226	150	96	–	EN DASH
227	151	97	—	EM DASH
230	152	98	 	UNDEFINED
231	153	99	™	TRADE MARK SIGN
232	154	9A	љ	CYRILLIC SMALL LETTER LJE
233	155	9B	›	SINGLE RIGHT-POINTING ANGLE QUOTATION MARK
234	156	9C	њ	CYRILLIC SMALL LETTER NJE
235	157	9D	ќ	CYRILLIC SMALL LETTER KJE
236	158	9E	ћ	CYRILLIC SMALL LETTER TSHE
237	159	9F	џ	CYRILLIC SMALL LETTER DZHE
240	160	A0	 	NO-BREAK SPACE
241	161	A1	Ў	CYRILLIC CAPITAL LETTER SHORT U
242	162	A2	ў	CYRILLIC SMALL LETTER SHORT U
243	163	A3	Ј	CYRILLIC CAPITAL LETTER JE
244	164	A4	¤	CURRENCY SIGN
245	165	A5	Ґ	CYRILLIC CAPITAL LETTER GHE WITH UPTURN
246	166	A6	¦	BROKEN BAR
247	167	A7	§	SECTION SIGN
250	168	A8	Ё	CYRILLIC CAPITAL LETTER IO
251	169	A9	©	COPYRIGHT SIGN
252	170	AA	Є	CYRILLIC CAPITAL LETTER UKRAINIAN IE
253	171	AB	«	LEFT-POINTING DOUBLE ANGLE QUOTATION MARK
254	172	AC	¬	NOT SIGN
255	173	AD	­	SOFT HYPHEN
256	174	AE	®	REGISTERED SIGN
257	175	AF	Ї	CYRILLIC CAPITAL LETTER YI
260	176	B0	°	DEGREE SIGN
261	177	B1	±	PLUS-MINUS SIGN
262	178	B2	І	T{
CYRILLIC CAPITAL LETTER
.br
BYELORUSSIAN-UKRAINIAN I
T}
263	179	B3	і	CYRILLIC SMALL LETTER BYELORUSSIAN-UKRAINIAN I
264	180	B4	ґ	CYRILLIC SMALL LETTER GHE WITH UPTURN
265	181	B5	µ	MICRO SIGN
266	182	B6	¶	PILCROW SIGN
267	183	B7	·	MIDDLE DOT
270	184	B8	ё	CYRILLIC SMALL LETTER IO
271	185	B9	№	NUMERO SIGN
272	186	BA	є	CYRILLIC SMALL LETTER UKRAINIAN IE
273	187	BB	»	RIGHT-POINTING DOUBLE ANGLE QUOTATION MARK
274	188	BC	ј	CYRILLIC SMALL LETTER JE
275	189	BD	Ѕ	CYRILLIC CAPITAL LETTER DZE
276	190	BE	ѕ	CYRILLIC SMALL LETTER DZE
277	191	BF	ї	CYRILLIC SMALL LETTER YI
300	192	C0	А	CYRILLIC CAPITAL LETTER A
301	193	C1	Б	CYRILLIC CAPITAL LETTER BE
302	194	C2	В	CYRILLIC CAPITAL LETTER VE
303	195	C3	Г	CYRILLIC CAPITAL LETTER GHE
304	196	C4	Д	CYRILLIC CAPITAL LETTER DE
305	197	C5	Е	CYRILLIC CAPITAL LETTER IE
306	198	C6	Ж	CYRILLIC CAPITAL LETTER ZHE
307	199	C7	З	CYRILLIC CAPITAL LETTER ZE
310	200	C8	И	CYRILLIC CAPITAL LETTER I
311	201	C9	Й	CYRILLIC CAPITAL LETTER SHORT I
312	202	CA	К	CYRILLIC CAPITAL LETTER KA
313	203	CB	Л	CYRILLIC CAPITAL LETTER EL
314	204	CC	М	CYRILLIC CAPITAL LETTER EM
315	205	CD	Н	CYRILLIC CAPITAL LETTER EN
316	206	CE	О	CYRILLIC CAPITAL LETTER O
317	207	CF	П	CYRILLIC CAPITAL LETTER PE
320	208	D0	Р	CYRILLIC CAPITAL LETTER ER
321	209	D1	С	CYRILLIC CAPITAL LETTER ES
322	210	D2	Т	CYRILLIC CAPITAL LETTER TE
323	211	D3	У	CYRILLIC CAPITAL LETTER U
324	212	D4	Ф	CYRILLIC CAPITAL LETTER EF
325	213	D5	Х	CYRILLIC CAPITAL LETTER HA
326	214	D6	Ц	CYRILLIC CAPITAL LETTER TSE
327	215	D7	Ч	CYRILLIC CAPITAL LETTER CHE
330	216	D8	Ш	CYRILLIC CAPITAL LETTER SHA
331	217	D9	Щ	CYRILLIC CAPITAL LETTER SHCHA
332	218	DA	Ъ	CYRILLIC CAPITAL LETTER HARD SIGN
333	219	DB	Ы	CYRILLIC CAPITAL LETTER YERU
334	220	DC	Ь	CYRILLIC CAPITAL LETTER SOFT SIGN
335	221	DD	Э	CYRILLIC CAPITAL LETTER E
336	222	DE	Ю	CYRILLIC CAPITAL LETTER YU
337	223	DF	Я	CYRILLIC CAPITAL LETTER YA
340	224	E0	а	CYRILLIC SMALL LETTER A
341	225	E1	б	CYRILLIC SMALL LETTER BE
342	226	E2	в	CYRILLIC SMALL LETTER VE
343	227	E3	г	CYRILLIC SMALL LETTER GHE
344	228	E4	д	CYRILLIC SMALL LETTER DE
345	229	E5	е	CYRILLIC SMALL LETTER IE
346	230	E6	ж	CYRILLIC SMALL LETTER ZHE
347	231	E7	з	CYRILLIC SMALL LETTER ZE
350	232	E8	и	CYRILLIC SMALL LETTER I
351	233	E9	й	CYRILLIC SMALL LETTER SHORT I
352	234	EA	к	CYRILLIC SMALL LETTER KA
353	235	EB	л	CYRILLIC SMALL LETTER EL
354	236	EC	м	CYRILLIC SMALL LETTER EM
355	237	ED	н	CYRILLIC SMALL LETTER EN
356	238	EE	о	CYRILLIC SMALL LETTER O
357	239	EF	п	CYRILLIC SMALL LETTER PE
360	240	F0	р	CYRILLIC SMALL LETTER ER
361	241	F1	с	CYRILLIC SMALL LETTER ES
362	242	F2	т	CYRILLIC SMALL LETTER TE
363	243	F3	у	CYRILLIC SMALL LETTER U
364	244	F4	ф	CYRILLIC SMALL LETTER EF
365	245	F5	х	CYRILLIC SMALL LETTER HA
366	246	F6	ц	CYRILLIC SMALL LETTER TSE
367	247	F7	ч	CYRILLIC SMALL LETTER CHE
370	248	F8	ш	CYRILLIC SMALL LETTER SHA
371	249	F9	щ	CYRILLIC SMALL LETTER SHCHA
372	250	FA	ъ	CYRILLIC SMALL LETTER HARD SIGN
373	251	FB	ы	CYRILLIC SMALL LETTER YERU
374	252	FC	ь	CYRILLIC SMALL LETTER SOFT SIGN
375	253	FD	э	CYRILLIC SMALL LETTER E
376	254	FE	ю	CYRILLIC SMALL LETTER YU
377	255	FF	я	CYRILLIC SMALL LETTER YA
.TE
.SH NOTES
CP\ 1251 is also known as Windows Cyrillic.
.SH SEE ALSO
.BR ascii (7),
.BR charsets (7),
.BR iso_8859-5 (7),
.BR koi8-r (7),
.BR koi8-u (7),
.BR utf-8 (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
'\" t -*- coding: UTF-8 -*-
.\" Copyright 2014 (C) Marko Myllynen <myllynen@redhat.com>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.TH CP1252 7 2014-10-16 "Linux" "Linux Programmer's Manual"
.SH NAME
cp1252 \- CP\ 1252 character set encoded in octal, decimal,
and hexadecimal
.SH DESCRIPTION
The Windows Code Pages include several 8-bit extensions to the ASCII
character set (also known as ISO 646-IRV).
CP\ 1252 encodes the
characters used in many West European languages.
.SS CP\ 1252 characters
The following table displays the characters in CP\ 1252, which
are printable and unlisted in the
.BR ascii (7)
manual page.
.TS
l l l c lp-1.
Oct	Dec	Hex	Char	Description
_
200	128	80	€	EURO SIGN
202	130	82	‚	SINGLE LOW-9 QUOTATION MARK
203	131	83	ƒ	LATIN SMALL LETTER F WITH HOOK
204	132	84	„	DOUBLE LOW-9 QUOTATION MARK
205	133	85	…	HORIZONTAL ELLIPSIS
206	134	86	†	DAGGER
207	135	87	‡	DOUBLE DAGGER
210	136	88	ˆ	MODIFIER LETTER CIRCUMFLEX ACCENT
211	137	89	‰	PER MILLE SIGN
212	138	8A	Š	LATIN CAPITAL LETTER S WITH CARON
213	139	8B	‹	SINGLE LEFT-POINTING ANGLE QUOTATION MARK
214	140	8C	Œ	LATIN CAPITAL LIGATURE OE
216	142	8E	Ž	LATIN CAPITAL LETTER Z WITH CARON
221	145	91	‘	LEFT SINGLE QUOTATION MARK
222	146	92	’	RIGHT SINGLE QUOTATION MARK
223	147	93	“	LEFT DOUBLE QUOTATION MARK
224	148	94	”	RIGHT DOUBLE QUOTATION MARK
225	149	95	•	BULLET
226	150	96	–	EN DASH
227	151	97	—	EM DASH
230	152	98	˜	SMALL TILDE
231	153	99	™	TRADE MARK SIGN
232	154	9A	š	LATIN SMALL LETTER S WITH CARON
233	155	9B	›	SINGLE RIGHT-POINTING ANGLE QUOTATION MARK
234	156	9C	œ	LATIN SMALL LIGATURE OE
236	158	9E	ž	LATIN SMALL LETTER Z WITH CARON
237	159	9F	Ÿ	LATIN CAPITAL LETTER Y WITH DIAERESIS
240	160	A0	 	NO-BREAK SPACE
241	161	A1	¡	INVERTED EXCLAMATION MARK
242	162	A2	¢	CENT SIGN
243	163	A3	£	POUND SIGN
244	164	A4	¤	CURRENCY SIGN
245	165	A5	¥	YEN SIGN
246	166	A6	¦	BROKEN BAR
247	167	A7	§	SECTION SIGN
250	168	A8	¨	DIAERESIS
251	169	A9	©	COPYRIGHT SIGN
252	170	AA	ª	FEMININE ORDINAL INDICATOR
253	171	AB	«	LEFT-POINTING DOUBLE ANGLE QUOTATION MARK
254	172	AC	¬	NOT SIGN
255	173	AD	­	SOFT HYPHEN
256	174	AE	®	REGISTERED SIGN
257	175	AF	¯	MACRON
260	176	B0	°	DEGREE SIGN
261	177	B1	±	PLUS-MINUS SIGN
262	178	B2	²	SUPERSCRIPT TWO
263	179	B3	³	SUPERSCRIPT THREE
264	180	B4	´	ACUTE ACCENT
265	181	B5	µ	MICRO SIGN
266	182	B6	¶	PILCROW SIGN
267	183	B7	·	MIDDLE DOT
270	184	B8	¸	CEDILLA
271	185	B9	¹	SUPERSCRIPT ONE
272	186	BA	º	MASCULINE ORDINAL INDICATOR
273	187	BB	»	RIGHT-POINTING DOUBLE ANGLE QUOTATION MARK
274	188	BC	¼	VULGAR FRACTION ONE QUARTER
275	189	BD	½	VULGAR FRACTION ONE HALF
276	190	BE	¾	VULGAR FRACTION THREE QUARTERS
277	191	BF	¿	INVERTED QUESTION MARK
300	192	C0	À	LATIN CAPITAL LETTER A WITH GRAVE
301	193	C1	Á	LATIN CAPITAL LETTER A WITH ACUTE
302	194	C2	Â	LATIN CAPITAL LETTER A WITH CIRCUMFLEX
303	195	C3	Ã	LATIN CAPITAL LETTER A WITH TILDE
304	196	C4	Ä	LATIN CAPITAL LETTER A WITH DIAERESIS
305	197	C5	Å	LATIN CAPITAL LETTER A WITH RING ABOVE
306	198	C6	Æ	LATIN CAPITAL LETTER AE
307	199	C7	Ç	LATIN CAPITAL LETTER C WITH CEDILLA
310	200	C8	È	LATIN CAPITAL LETTER E WITH GRAVE
311	201	C9	É	LATIN CAPITAL LETTER E WITH ACUTE
312	202	CA	Ê	LATIN CAPITAL LETTER E WITH CIRCUMFLEX
313	203	CB	Ë	LATIN CAPITAL LETTER E WITH DIAERESIS
314	204	CC	Ì	LATIN CAPITAL LETTER I WITH GRAVE
315	205	CD	Í	LATIN CAPITAL LETTER I WITH ACUTE
316	206	CE	Î	LATIN CAPITAL LETTER I WITH CIRCUMFLEX
317	207	CF	Ï	LATIN CAPITAL LETTER I WITH DIAERESIS
320	208	D0	Ð	LATIN CAPITAL LETTER ETH
321	209	D1	Ñ	LATIN CAPITAL LETTER N WITH TILDE
322	210	D2	Ò	LATIN CAPITAL LETTER O WITH GRAVE
323	211	D3	Ó	LATIN CAPITAL LETTER O WITH ACUTE
324	212	D4	Ô	LATIN CAPITAL LETTER O WITH CIRCUMFLEX
325	213	D5	Õ	LATIN CAPITAL LETTER O WITH TILDE
326	214	D6	Ö	LATIN CAPITAL LETTER O WITH DIAERESIS
327	215	D7	×	MULTIPLICATION SIGN
330	216	D8	Ø	LATIN CAPITAL LETTER O WITH STROKE
331	217	D9	Ù	LATIN CAPITAL LETTER U WITH GRAVE
332	218	DA	Ú	LATIN CAPITAL LETTER U WITH ACUTE
333	219	DB	Û	LATIN CAPITAL LETTER U WITH CIRCUMFLEX
334	220	DC	Ü	LATIN CAPITAL LETTER U WITH DIAERESIS
335	221	DD	Ý	LATIN CAPITAL LETTER Y WITH ACUTE
336	222	DE	Þ	LATIN CAPITAL LETTER THORN
337	223	DF	ß	LATIN SMALL LETTER SHARP S
340	224	E0	à	LATIN SMALL LETTER A WITH GRAVE
341	225	E1	á	LATIN SMALL LETTER A WITH ACUTE
342	226	E2	â	LATIN SMALL LETTER A WITH CIRCUMFLEX
343	227	E3	ã	LATIN SMALL LETTER A WITH TILDE
344	228	E4	ä	LATIN SMALL LETTER A WITH DIAERESIS
345	229	E5	å	LATIN SMALL LETTER A WITH RING ABOVE
346	230	E6	æ	LATIN SMALL LETTER AE
347	231	E7	ç	LATIN SMALL LETTER C WITH CEDILLA
350	232	E8	è	LATIN SMALL LETTER E WITH GRAVE
351	233	E9	é	LATIN SMALL LETTER E WITH ACUTE
352	234	EA	ê	LATIN SMALL LETTER E WITH CIRCUMFLEX
353	235	EB	ë	LATIN SMALL LETTER E WITH DIAERESIS
354	236	EC	ì	LATIN SMALL LETTER I WITH GRAVE
355	237	ED	í	LATIN SMALL LETTER I WITH ACUTE
356	238	EE	î	LATIN SMALL LETTER I WITH CIRCUMFLEX
357	239	EF	ï	LATIN SMALL LETTER I WITH DIAERESIS
360	240	F0	ð	LATIN SMALL LETTER ETH
361	241	F1	ñ	LATIN SMALL LETTER N WITH TILDE
362	242	F2	ò	LATIN SMALL LETTER O WITH GRAVE
363	243	F3	ó	LATIN SMALL LETTER O WITH ACUTE
364	244	F4	ô	LATIN SMALL LETTER O WITH CIRCUMFLEX
365	245	F5	õ	LATIN SMALL LETTER O WITH TILDE
366	246	F6	ö	LATIN SMALL LETTER O WITH DIAERESIS
367	247	F7	÷	DIVISION SIGN
370	248	F8	ø	LATIN SMALL LETTER O WITH STROKE
371	249	F9	ù	LATIN SMALL LETTER U WITH GRAVE
372	250	FA	ú	LATIN SMALL LETTER U WITH ACUTE
373	251	FB	û	LATIN SMALL LETTER U WITH CIRCUMFLEX
374	252	FC	ü	LATIN SMALL LETTER U WITH DIAERESIS
375	253	FD	ý	LATIN SMALL LETTER Y WITH ACUTE
376	254	FE	þ	LATIN SMALL LETTER THORN
377	255	FF	ÿ	LATIN SMALL LETTER Y WITH DIAERESIS
.TE
.SH NOTES
CP\ 1252 is also known as Windows-1252.
.SH SEE ALSO
.BR ascii (7),
.BR charsets (7),
.BR iso_8859-1 (7),
.BR iso_8859-15 (7),
.BR utf-8 (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2008 Silicon Graphics, Inc.
.\"
.\" Author: Paul Jackson (http://oss.sgi.com/projects/cpusets)
.\"
.\" %%%LICENSE_START(GPLv2_MISC)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License
.\" version 2 as published by the Free Software Foundation.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.TH CPUSET 7 2014-05-21 "Linux" "Linux Programmer's Manual"
.SH NAME
cpuset \- confine processes to processor and memory node subsets
.SH DESCRIPTION
The cpuset filesystem is a pseudo-filesystem interface
to the kernel cpuset mechanism,
which is used to control the processor placement
and memory placement of processes.
It is commonly mounted at
.IR /dev/cpuset .
.PP
On systems with kernels compiled with built in support for cpusets,
all processes are attached to a cpuset, and cpusets are always present.
If a system supports cpusets, then it will have the entry
.B nodev cpuset
in the file
.IR /proc/filesystems .
By mounting the cpuset filesystem (see the
.B EXAMPLE
section below),
the administrator can configure the cpusets on a system
to control the processor and memory placement of processes
on that system.
By default, if the cpuset configuration
on a system is not modified or if the cpuset filesystem
is not even mounted, then the cpuset mechanism,
though present, has no affect on the system's behavior.
.PP
A cpuset defines a list of CPUs and memory nodes.
.PP
The CPUs of a system include all the logical processing
units on which a process can execute, including, if present,
multiple processor cores within a package and Hyper-Threads
within a processor core.
Memory nodes include all distinct
banks of main memory; small and SMP systems typically have
just one memory node that contains all the system's main memory,
while NUMA (non-uniform memory access) systems have multiple memory nodes.
.PP
Cpusets are represented as directories in a hierarchical
pseudo-filesystem, where the top directory in the hierarchy
.RI ( /dev/cpuset )
represents the entire system (all online CPUs and memory nodes)
and any cpuset that is the child (descendant) of
another parent cpuset contains a subset of that parent's
CPUs and memory nodes.
The directories and files representing cpusets have normal
filesystem permissions.
.PP
Every process in the system belongs to exactly one cpuset.
A process is confined to run only on the CPUs in
the cpuset it belongs to, and to allocate memory only
on the memory nodes in that cpuset.
When a process
.BR fork (2)s,
the child process is placed in the same cpuset as its parent.
With sufficient privilege, a process may be moved from one
cpuset to another and the allowed CPUs and memory nodes
of an existing cpuset may be changed.
.PP
When the system begins booting, a single cpuset is
defined that includes all CPUs and memory nodes on the
system, and all processes are in that cpuset.
During the boot process, or later during normal system operation,
other cpusets may be created, as subdirectories of this top cpuset,
under the control of the system administrator,
and processes may be placed in these other cpusets.
.PP
Cpusets are integrated with the
.BR sched_setaffinity (2)
scheduling affinity mechanism and the
.BR mbind (2)
and
.BR set_mempolicy (2)
memory-placement mechanisms in the kernel.
Neither of these mechanisms let a process make use
of a CPU or memory node that is not allowed by that process's cpuset.
If changes to a process's cpuset placement conflict with these
other mechanisms, then cpuset placement is enforced
even if it means overriding these other mechanisms.
The kernel accomplishes this overriding by silently
restricting the CPUs and memory nodes requested by
these other mechanisms to those allowed by the
invoking process's cpuset.
This can result in these
other calls returning an error, if for example, such
a call ends up requesting an empty set of CPUs or
memory nodes, after that request is restricted to
the invoking process's cpuset.
.PP
Typically, a cpuset is used to manage
the CPU and memory-node confinement for a set of
cooperating processes such as a batch scheduler job, and these
other mechanisms are used to manage the placement of
individual processes or memory regions within that set or job.
.SH FILES
Each directory below
.I /dev/cpuset
represents a cpuset and contains a fixed set of pseudo-files
describing the state of that cpuset.
.PP
New cpusets are created using the
.BR mkdir (2)
system call or the
.BR mkdir (1)
command.
The properties of a cpuset, such as its flags, allowed
CPUs and memory nodes, and attached processes, are queried and modified
by reading or writing to the appropriate file in that cpuset's directory,
as listed below.
.PP
The pseudo-files in each cpuset directory are automatically created when
the cpuset is created, as a result of the
.BR mkdir (2)
invocation.
It is not possible to directly add or remove these pseudo-files.
.PP
A cpuset directory that contains no child cpuset directories,
and has no attached processes, can be removed using
.BR rmdir (2)
or
.BR rmdir (1).
It is not necessary, or possible,
to remove the pseudo-files inside the directory before removing it.
.PP
The pseudo-files in each cpuset directory are
small text files that may be read and
written using traditional shell utilities such as
.BR cat (1),
and
.BR echo (1),
or from a program by using file I/O library functions or system calls,
such as
.BR open (2),
.BR read (2),
.BR write (2),
and
.BR close (2).
.PP
The pseudo-files in a cpuset directory represent internal kernel
state and do not have any persistent image on disk.
Each of these per-cpuset files is listed and described below.
.\" ====================== tasks ======================
.TP
.I tasks
List of the process IDs (PIDs) of the processes in that cpuset.
The list is formatted as a series of ASCII
decimal numbers, each followed by a newline.
A process may be added to a cpuset (automatically removing
it from the cpuset that previously contained it) by writing its
PID to that cpuset's
.I tasks
file (with or without a trailing newline).

.B Warning:
only one PID may be written to the
.I tasks
file at a time.
If a string is written that contains more
than one PID, only the first one will be used.
.\" =================== notify_on_release ===================
.TP
.I notify_on_release
Flag (0 or 1).
If set (1), that cpuset will receive special handling
after it is released, that is, after all processes cease using
it (i.e., terminate or are moved to a different cpuset)
and all child cpuset directories have been removed.
See the \fBNotify On Release\fR section, below.
.\" ====================== cpus ======================
.TP
.I cpuset.cpus
List of the physical numbers of the CPUs on which processes
in that cpuset are allowed to execute.
See \fBList Format\fR below for a description of the
format of
.IR cpus .

The CPUs allowed to a cpuset may be changed by
writing a new list to its
.I cpus
file.
.\" ==================== cpu_exclusive ====================
.TP
.I cpuset.cpu_exclusive
Flag (0 or 1).
If set (1), the cpuset has exclusive use of
its CPUs (no sibling or cousin cpuset may overlap CPUs).
By default, this is off (0).
Newly created cpusets also initially default this to off (0).

Two cpusets are
.I sibling
cpusets if they share the same parent cpuset in the
.I /dev/cpuset
hierarchy.
Two cpusets are
.I cousin
cpusets if neither is the ancestor of the other.
Regardless of the
.I cpu_exclusive
setting, if one cpuset is the ancestor of another,
and if both of these cpusets have nonempty
.IR cpus ,
then their
.I cpus
must overlap, because the
.I cpus
of any cpuset are always a subset of the
.I cpus
of its parent cpuset.
.\" ====================== mems ======================
.TP
.I cpuset.mems
List of memory nodes on which processes in this cpuset are
allowed to allocate memory.
See \fBList Format\fR below for a description of the
format of
.IR mems .
.\" ==================== mem_exclusive ====================
.TP
.I cpuset.mem_exclusive
Flag (0 or 1).
If set (1), the cpuset has exclusive use of
its memory nodes (no sibling or cousin may overlap).
Also if set (1), the cpuset is a \fBHardwall\fR cpuset (see below).
By default, this is off (0).
Newly created cpusets also initially default this to off (0).

Regardless of the
.I mem_exclusive
setting, if one cpuset is the ancestor of another,
then their memory nodes must overlap, because the memory
nodes of any cpuset are always a subset of the memory nodes
of that cpuset's parent cpuset.
.\" ==================== mem_hardwall ====================
.TP
.IR cpuset.mem_hardwall " (since Linux 2.6.26)"
Flag (0 or 1).
If set (1), the cpuset is a \fBHardwall\fR cpuset (see below).
Unlike \fBmem_exclusive\fR,
there is no constraint on whether cpusets
marked \fBmem_hardwall\fR may have overlapping
memory nodes with sibling or cousin cpusets.
By default, this is off (0).
Newly created cpusets also initially default this to off (0).
.\" ==================== memory_migrate ====================
.TP
.IR cpuset.memory_migrate " (since Linux 2.6.16)"
Flag (0 or 1).
If set (1), then memory migration is enabled.
By default, this is off (0).
See the \fBMemory Migration\fR section, below.
.\" ==================== memory_pressure ====================
.TP
.IR cpuset.memory_pressure " (since Linux 2.6.16)"
A measure of how much memory pressure the processes in this
cpuset are causing.
See the \fBMemory Pressure\fR section, below.
Unless
.I memory_pressure_enabled
is enabled, always has value zero (0).
This file is read-only.
See the
.B WARNINGS
section, below.
.\" ================= memory_pressure_enabled =================
.TP
.IR cpuset.memory_pressure_enabled " (since Linux 2.6.16)"
Flag (0 or 1).
This file is present only in the root cpuset, normally
.IR /dev/cpuset .
If set (1), the
.I memory_pressure
calculations are enabled for all cpusets in the system.
By default, this is off (0).
See the
\fBMemory Pressure\fR section, below.
.\" ================== memory_spread_page ==================
.TP
.IR cpuset.memory_spread_page " (since Linux 2.6.17)"
Flag (0 or 1).
If set (1), pages in the kernel page cache
(filesystem buffers) are uniformly spread across the cpuset.
By default, this is off (0) in the top cpuset,
and inherited from the parent cpuset in
newly created cpusets.
See the \fBMemory Spread\fR section, below.
.\" ================== memory_spread_slab ==================
.TP
.IR cpuset.memory_spread_slab " (since Linux 2.6.17)"
Flag (0 or 1).
If set (1), the kernel slab caches
for file I/O (directory and inode structures) are
uniformly spread across the cpuset.
By defaultBy default, is off (0) in the top cpuset,
and inherited from the parent cpuset in
newly created cpusets.
See the \fBMemory Spread\fR section, below.
.\" ================== sched_load_balance ==================
.TP
.IR cpuset.sched_load_balance " (since Linux 2.6.24)"
Flag (0 or 1).
If set (1, the default) the kernel will
automatically load balance processes in that cpuset over
the allowed CPUs in that cpuset.
If cleared (0) the
kernel will avoid load balancing processes in this cpuset,
.I unless
some other cpuset with overlapping CPUs has its
.I sched_load_balance
flag set.
See \fBScheduler Load Balancing\fR, below, for further details.
.\" ================== sched_relax_domain_level ==================
.TP
.IR cpuset.sched_relax_domain_level " (since Linux 2.6.26)"
Integer, between \-1 and a small positive value.
The
.I sched_relax_domain_level
controls the width of the range of CPUs over which the kernel scheduler
performs immediate rebalancing of runnable tasks across CPUs.
If
.I sched_load_balance
is disabled, then the setting of
.I sched_relax_domain_level
does not matter, as no such load balancing is done.
If
.I sched_load_balance
is enabled, then the higher the value of the
.IR sched_relax_domain_level ,
the wider
the range of CPUs over which immediate load balancing is attempted.
See \fBScheduler Relax Domain Level\fR, below, for further details.
.\" ================== proc cpuset ==================
.PP
In addition to the above pseudo-files in each directory below
.IR /dev/cpuset ,
each process has a pseudo-file,
.IR /proc/<pid>/cpuset ,
that displays the path of the process's cpuset directory
relative to the root of the cpuset filesystem.
.\" ================== proc status ==================
.PP
Also the
.I /proc/<pid>/status
file for each process has four added lines,
displaying the process's
.I Cpus_allowed
(on which CPUs it may be scheduled) and
.I Mems_allowed
(on which memory nodes it may obtain memory),
in the two formats \fBMask Format\fR and \fBList Format\fR (see below)
as shown in the following example:
.PP
.RS
.nf
Cpus_allowed:   ffffffff,ffffffff,ffffffff,ffffffff
Cpus_allowed_list:     0-127
Mems_allowed:   ffffffff,ffffffff
Mems_allowed_list:     0-63
.fi
.RE
.PP
The "allowed" fields were added in Linux 2.6.24;
the "allowed_list" fields were added in Linux 2.6.26.
.\" ================== EXTENDED CAPABILITIES ==================
.SH EXTENDED CAPABILITIES
In addition to controlling which
.I cpus
and
.I mems
a process is allowed to use, cpusets provide the following
extended capabilities.
.\" ================== Exclusive Cpusets ==================
.SS Exclusive cpusets
If a cpuset is marked
.I cpu_exclusive
or
.IR mem_exclusive ,
no other cpuset, other than a direct ancestor or descendant,
may share any of the same CPUs or memory nodes.
.PP
A cpuset that is
.I mem_exclusive
restricts kernel allocations for
buffer cache pages and other internal kernel data pages
commonly shared by the kernel across
multiple users.
All cpusets, whether
.I mem_exclusive
or not, restrict allocations of memory for user space.
This enables configuring a
system so that several independent jobs can share common kernel data,
while isolating each job's user allocation in
its own cpuset.
To do this, construct a large
.I mem_exclusive
cpuset to hold all the jobs, and construct child,
.RI non- mem_exclusive
cpusets for each individual job.
Only a small amount of kernel memory,
such as requests from interrupt handlers, is allowed to be
placed on memory nodes
outside even a
.I mem_exclusive
cpuset.
.\" ================== Hardwall ==================
.SS Hardwall
A cpuset that has
.I mem_exclusive
or
.I mem_hardwall
set is a
.I hardwall
cpuset.
A
.I hardwall
cpuset restricts kernel allocations for page, buffer,
and other data commonly shared by the kernel across multiple users.
All cpusets, whether
.I hardwall
or not, restrict allocations of memory for user space.
.PP
This enables configuring a system so that several independent
jobs can share common kernel data, such as filesystem pages,
while isolating each job's user allocation in its own cpuset.
To do this, construct a large
.I hardwall
cpuset to hold
all the jobs, and construct child cpusets for each individual
job which are not
.I hardwall
cpusets.
.PP
Only a small amount of kernel memory, such as requests from
interrupt handlers, is allowed to be taken outside even a
.I hardwall
cpuset.
.\" ================== Notify On Release ==================
.SS Notify on release
If the
.I notify_on_release
flag is enabled (1) in a cpuset,
then whenever the last process in the cpuset leaves
(exits or attaches to some other cpuset)
and the last child cpuset of that cpuset is removed,
the kernel will run the command
.IR /sbin/cpuset_release_agent ,
supplying the pathname (relative to the mount point of the
cpuset filesystem) of the abandoned cpuset.
This enables automatic removal of abandoned cpusets.
.PP
The default value of
.I notify_on_release
in the root cpuset at system boot is disabled (0).
The default value of other cpusets at creation
is the current value of their parent's
.I notify_on_release
setting.
.PP
The command
.I /sbin/cpuset_release_agent
is invoked, with the name
.RI ( /dev/cpuset
relative path)
of the to-be-released cpuset in
.IR argv[1] .
.PP
The usual contents of the command
.I /sbin/cpuset_release_agent
is simply the shell script:
.in +4n
.nf

#!/bin/sh
rmdir /dev/cpuset/$1
.fi
.in
.PP
As with other flag values below, this flag can
be changed by writing an ASCII
number 0 or 1 (with optional trailing newline)
into the file, to clear or set the flag, respectively.
.\" ================== Memory Pressure ==================
.SS Memory pressure
The
.I memory_pressure
of a cpuset provides a simple per-cpuset running average of
the rate that the processes in a cpuset are attempting to free up in-use
memory on the nodes of the cpuset to satisfy additional memory requests.
.PP
This enables batch managers that are monitoring jobs running in dedicated
cpusets to efficiently detect what level of memory pressure that job
is causing.
.PP
This is useful both on tightly managed systems running a wide mix of
submitted jobs, which may choose to terminate or reprioritize jobs that
are trying to use more memory than allowed on the nodes assigned them,
and with tightly coupled, long-running, massively parallel scientific
computing jobs that will dramatically fail to meet required performance
goals if they start to use more memory than allowed to them.
.PP
This mechanism provides a very economical way for the batch manager
to monitor a cpuset for signs of memory pressure.
It's up to the batch manager or other user code to decide
what action to take if it detects signs of memory pressure.
.PP
Unless memory pressure calculation is enabled by setting the pseudo-file
.IR /dev/cpuset/cpuset.memory_pressure_enabled ,
it is not computed for any cpuset, and reads from any
.I memory_pressure
always return zero, as represented by the ASCII string "0\en".
See the \fBWARNINGS\fR section, below.
.PP
A per-cpuset, running average is employed for the following reasons:
.IP * 3
Because this meter is per-cpuset rather than per-process or per virtual
memory region, the system load imposed by a batch scheduler monitoring
this metric is sharply reduced on large systems, because a scan of
the tasklist can be avoided on each set of queries.
.IP *
Because this meter is a running average rather than an accumulating
counter, a batch scheduler can detect memory pressure with a
single read, instead of having to read and accumulate results
for a period of time.
.IP *
Because this meter is per-cpuset rather than per-process,
the batch scheduler can obtain the key information\(emmemory
pressure in a cpuset\(emwith a single read, rather than having to
query and accumulate results over all the (dynamically changing)
set of processes in the cpuset.
.PP
The
.I memory_pressure
of a cpuset is calculated using a per-cpuset simple digital filter
that is kept within the kernel.
For each cpuset, this filter tracks
the recent rate at which processes attached to that cpuset enter the
kernel direct reclaim code.
.PP
The kernel direct reclaim code is entered whenever a process has to
satisfy a memory page request by first finding some other page to
repurpose, due to lack of any readily available already free pages.
Dirty filesystem pages are repurposed by first writing them
to disk.
Unmodified filesystem buffer pages are repurposed
by simply dropping them, though if that page is needed again, it
will have to be reread from disk.
.PP
The
.I cpuset.memory_pressure
file provides an integer number representing the recent (half-life of
10 seconds) rate of entries to the direct reclaim code caused by any
process in the cpuset, in units of reclaims attempted per second,
times 1000.
.\" ================== Memory Spread ==================
.SS Memory spread
There are two Boolean flag files per cpuset that control where the
kernel allocates pages for the filesystem buffers and related
in-kernel data structures.
They are called
.I cpuset.memory_spread_page
and
.IR cpuset.memory_spread_slab .
.PP
If the per-cpuset Boolean flag file
.I cpuset.memory_spread_page
is set, then
the kernel will spread the filesystem buffers (page cache) evenly
over all the nodes that the faulting process is allowed to use, instead
of preferring to put those pages on the node where the process is running.
.PP
If the per-cpuset Boolean flag file
.I cpuset.memory_spread_slab
is set,
then the kernel will spread some filesystem-related slab caches,
such as those for inodes and directory entries, evenly over all the nodes
that the faulting process is allowed to use, instead of preferring to
put those pages on the node where the process is running.
.PP
The setting of these flags does not affect the data segment
(see
.BR brk (2))
or stack segment pages of a process.
.PP
By default, both kinds of memory spreading are off and the kernel
prefers to allocate memory pages on the node local to where the
requesting process is running.
If that node is not allowed by the
process's NUMA memory policy or cpuset configuration or if there are
insufficient free memory pages on that node, then the kernel looks
for the nearest node that is allowed and has sufficient free memory.
.PP
When new cpusets are created, they inherit the memory spread settings
of their parent.
.PP
Setting memory spreading causes allocations for the affected page or
slab caches to ignore the process's NUMA memory policy and be spread
instead.
However, the effect of these changes in memory placement
caused by cpuset-specified memory spreading is hidden from the
.BR mbind (2)
or
.BR set_mempolicy (2)
calls.
These two NUMA memory policy calls always appear to behave as if
no cpuset-specified memory spreading is in effect, even if it is.
If cpuset memory spreading is subsequently turned off, the NUMA
memory policy most recently specified by these calls is automatically
reapplied.
.PP
Both
.I cpuset.memory_spread_page
and
.I cpuset.memory_spread_slab
are Boolean flag files.
By default, they contain "0", meaning that the feature is off
for that cpuset.
If a "1" is written to that file, that turns the named feature on.
.PP
Cpuset-specified memory spreading behaves similarly to what is known
(in other contexts) as round-robin or interleave memory placement.
.PP
Cpuset-specified memory spreading can provide substantial performance
improvements for jobs that:
.IP a) 3
need to place thread-local data on
memory nodes close to the CPUs which are running the threads that most
frequently access that data; but also
.IP b)
need to access large filesystem data sets that must to be spread
across the several nodes in the job's cpuset in order to fit.
.PP
Without this policy,
the memory allocation across the nodes in the job's cpuset
can become very uneven,
especially for jobs that might have just a single
thread initializing or reading in the data set.
.\" ================== Memory Migration ==================
.SS Memory migration
Normally, under the default setting (disabled) of
.IR cpuset.memory_migrate ,
once a page is allocated (given a physical page
of main memory), then that page stays on whatever node it
was allocated, so long as it remains allocated, even if the
cpuset's memory-placement policy
.I mems
subsequently changes.
.PP
When memory migration is enabled in a cpuset, if the
.I mems
setting of the cpuset is changed, then any memory page in use by any
process in the cpuset that is on a memory node that is no longer
allowed will be migrated to a memory node that is allowed.
.PP
Furthermore, if a process is moved into a cpuset with
.I memory_migrate
enabled, any memory pages it uses that were on memory nodes allowed
in its previous cpuset, but which are not allowed in its new cpuset,
will be migrated to a memory node allowed in the new cpuset.
.PP
The relative placement of a migrated page within
the cpuset is preserved during these migration operations if possible.
For example,
if the page was on the second valid node of the prior cpuset,
then the page will be placed on the second valid node of the new cpuset,
if possible.
.\" ================== Scheduler Load Balancing ==================
.SS Scheduler load balancing
The kernel scheduler automatically load balances processes.
If one CPU is underutilized,
the kernel will look for processes on other more
overloaded CPUs and move those processes to the underutilized CPU,
within the constraints of such placement mechanisms as cpusets and
.BR sched_setaffinity (2).
.PP
The algorithmic cost of load balancing and its impact on key shared
kernel data structures such as the process list increases more than
linearly with the number of CPUs being balanced.
For example, it
costs more to load balance across one large set of CPUs than it does
to balance across two smaller sets of CPUs, each of half the size
of the larger set.
(The precise relationship between the number of CPUs being balanced
and the cost of load balancing depends
on implementation details of the kernel process scheduler, which is
subject to change over time, as improved kernel scheduler algorithms
are implemented.)
.PP
The per-cpuset flag
.I sched_load_balance
provides a mechanism to suppress this automatic scheduler load
balancing in cases where it is not needed and suppressing it would have
worthwhile performance benefits.
.PP
By default, load balancing is done across all CPUs, except those
marked isolated using the kernel boot time "isolcpus=" argument.
(See \fBScheduler Relax Domain Level\fR, below, to change this default.)
.PP
This default load balancing across all CPUs is not well suited to
the following two situations:
.IP * 3
On large systems, load balancing across many CPUs is expensive.
If the system is managed using cpusets to place independent jobs
on separate sets of CPUs, full load balancing is unnecessary.
.IP *
Systems supporting real-time on some CPUs need to minimize
system overhead on those CPUs, including avoiding process load
balancing if that is not needed.
.PP
When the per-cpuset flag
.I sched_load_balance
is enabled (the default setting),
it requests load balancing across
all the CPUs in that cpuset's allowed CPUs,
ensuring that load balancing can move a process (not otherwise pinned,
as by
.BR sched_setaffinity (2))
from any CPU in that cpuset to any other.
.PP
When the per-cpuset flag
.I sched_load_balance
is disabled, then the
scheduler will avoid load balancing across the CPUs in that cpuset,
\fIexcept\fR in so far as is necessary because some overlapping cpuset
has
.I sched_load_balance
enabled.
.PP
So, for example, if the top cpuset has the flag
.I sched_load_balance
enabled, then the scheduler will load balance across all
CPUs, and the setting of the
.I sched_load_balance
flag in other cpusets has no effect,
as we're already fully load balancing.
.PP
Therefore in the above two situations, the flag
.I sched_load_balance
should be disabled in the top cpuset, and only some of the smaller,
child cpusets would have this flag enabled.
.PP
When doing this, you don't usually want to leave any unpinned processes in
the top cpuset that might use nontrivial amounts of CPU, as such processes
may be artificially constrained to some subset of CPUs, depending on
the particulars of this flag setting in descendant cpusets.
Even if such a process could use spare CPU cycles in some other CPUs,
the kernel scheduler might not consider the possibility of
load balancing that process to the underused CPU.
.PP
Of course, processes pinned to a particular CPU can be left in a cpuset
that disables
.I sched_load_balance
as those processes aren't going anywhere else anyway.
.\" ================== Scheduler Relax Domain Level ==================
.SS Scheduler relax domain level
The kernel scheduler performs immediate load balancing whenever
a CPU becomes free or another task becomes runnable.
This load
balancing works to ensure that as many CPUs as possible are usefully
employed running tasks.
The kernel also performs periodic load
balancing off the software clock described in
.BR time (7).
The setting of
.I sched_relax_domain_level
applies only to immediate load balancing.
Regardless of the
.I sched_relax_domain_level
setting, periodic load balancing is attempted over all CPUs
(unless disabled by turning off
.IR sched_load_balance .)
In any case, of course, tasks will be scheduled to run only on
CPUs allowed by their cpuset, as modified by
.BR sched_setaffinity (2)
system calls.
.PP
On small systems, such as those with just a few CPUs, immediate load
balancing is useful to improve system interactivity and to minimize
wasteful idle CPU cycles.
But on large systems, attempting immediate
load balancing across a large number of CPUs can be more costly than
it is worth, depending on the particular performance characteristics
of the job mix and the hardware.
.PP
The exact meaning of the small integer values of
.I sched_relax_domain_level
will depend on internal
implementation details of the kernel scheduler code and on the
non-uniform architecture of the hardware.
Both of these will evolve
over time and vary by system architecture and kernel version.
.PP
As of this writing, when this capability was introduced in Linux
2.6.26, on certain popular architectures, the positive values of
.I sched_relax_domain_level
have the following meanings.
.sp
.PD 0
.IP \fB(1)\fR 4
Perform immediate load balancing across Hyper-Thread
siblings on the same core.
.IP \fB(2)\fR
Perform immediate load balancing across other cores in the same package.
.IP \fB(3)\fR
Perform immediate load balancing across other CPUs
on the same node or blade.
.IP \fB(4)\fR
Perform immediate load balancing across over several
(implementation detail) nodes [On NUMA systems].
.IP \fB(5)\fR
Perform immediate load balancing across over all CPUs
in system [On NUMA systems].
.PD
.PP
The
.I sched_relax_domain_level
value of zero (0) always means
don't perform immediate load balancing,
hence that load balancing is done only periodically,
not immediately when a CPU becomes available or another task becomes
runnable.
.PP
The
.I sched_relax_domain_level
value of minus one (\-1)
always means use the system default value.
The system default value can vary by architecture and kernel version.
This system default value can be changed by kernel
boot-time "relax_domain_level=" argument.
.PP
In the case of multiple overlapping cpusets which have conflicting
.I sched_relax_domain_level
values, then the highest such value
applies to all CPUs in any of the overlapping cpusets.
In such cases,
the value \fBminus one (\-1)\fR is the lowest value, overridden by any
other value, and the value \fBzero (0)\fR is the next lowest value.
.SH FORMATS
The following formats are used to represent sets of
CPUs and memory nodes.
.\" ================== Mask Format ==================
.SS Mask format
The \fBMask Format\fR is used to represent CPU and memory-node bit masks
in the
.I /proc/<pid>/status
file.
.PP
This format displays each 32-bit
word in hexadecimal (using ASCII characters "0" - "9" and "a" - "f");
words are filled with leading zeros, if required.
For masks longer than one word, a comma separator is used between words.
Words are displayed in big-endian
order, which has the most significant bit first.
The hex digits within a word are also in big-endian order.
.PP
The number of 32-bit words displayed is the minimum number needed to
display all bits of the bit mask, based on the size of the bit mask.
.PP
Examples of the \fBMask Format\fR:
.PP
.RS
.nf
00000001                        # just bit 0 set
40000000,00000000,00000000      # just bit 94 set
00000001,00000000,00000000      # just bit 64 set
000000ff,00000000               # bits 32-39 set
00000000,000e3862               # 1,5,6,11-13,17-19 set
.fi
.RE
.PP
A mask with bits 0, 1, 2, 4, 8, 16, 32, and 64 set displays as:
.PP
.RS
.nf
00000001,00000001,00010117
.fi
.RE
.PP
The first "1" is for bit 64, the
second for bit 32, the third for bit 16, the fourth for bit 8, the
fifth for bit 4, and the "7" is for bits 2, 1, and 0.
.\" ================== List Format ==================
.SS List format
The \fBList Format\fR for
.I cpus
and
.I mems
is a comma-separated list of CPU or memory-node
numbers and ranges of numbers, in ASCII decimal.
.PP
Examples of the \fBList Format\fR:
.PP
.RS
.nf
0-4,9           # bits 0, 1, 2, 3, 4, and 9 set
0-2,7,12-14     # bits 0, 1, 2, 7, 12, 13, and 14 set
.fi
.RE
.\" ================== RULES ==================
.SH RULES
The following rules apply to each cpuset:
.IP * 3
Its CPUs and memory nodes must be a (possibly equal)
subset of its parent's.
.IP *
It can be marked
.IR cpu_exclusive
only if its parent is.
.IP *
It can be marked
.IR mem_exclusive
only if its parent is.
.IP *
If it is
.IR cpu_exclusive ,
its CPUs may not overlap any sibling.
.IP *
If it is
.IR memory_exclusive ,
its memory nodes may not overlap any sibling.
.\" ================== PERMISSIONS ==================
.SH PERMISSIONS
The permissions of a cpuset are determined by the permissions
of the directories and pseudo-files in the cpuset filesystem,
normally mounted at
.IR /dev/cpuset .
.PP
For instance, a process can put itself in some other cpuset (than
its current one) if it can write the
.I tasks
file for that cpuset.
This requires execute permission on the encompassing directories
and write permission on the
.I tasks
file.
.PP
An additional constraint is applied to requests to place some
other process in a cpuset.
One process may not attach another to
a cpuset unless it would have permission to send that process
a signal (see
.BR kill (2)).
.PP
A process may create a child cpuset if it can access and write the
parent cpuset directory.
It can modify the CPUs or memory nodes
in a cpuset if it can access that cpuset's directory (execute
permissions on the each of the parent directories) and write the
corresponding
.I cpus
or
.I mems
file.
.PP
There is one minor difference between the manner in which these
permissions are evaluated and the manner in which normal filesystem
operation permissions are evaluated.
The kernel interprets
relative pathnames starting at a process's current working directory.
Even if one is operating on a cpuset file, relative pathnames
are interpreted relative to the process's current working directory,
not relative to the process's current cpuset.
The only ways that
cpuset paths relative to a process's current cpuset can be used are
if either the process's current working directory is its cpuset
(it first did a
.B cd
or
.BR chdir (2)
to its cpuset directory beneath
.IR /dev/cpuset ,
which is a bit unusual)
or if some user code converts the relative cpuset path to a
full filesystem path.
.PP
In theory, this means that user code should specify cpusets
using absolute pathnames, which requires knowing the mount point of
the cpuset filesystem (usually, but not necessarily,
.IR /dev/cpuset ).
In practice, all user level code that this author is aware of
simply assumes that if the cpuset filesystem is mounted, then
it is mounted at
.IR /dev/cpuset .
Furthermore, it is common practice for carefully written
user code to verify the presence of the pseudo-file
.I /dev/cpuset/tasks
in order to verify that the cpuset pseudo-filesystem
is currently mounted.
.\" ================== WARNINGS ==================
.SH WARNINGS
.SS Enabling memory_pressure
By default, the per-cpuset file
.I cpuset.memory_pressure
always contains zero (0).
Unless this feature is enabled by writing "1" to the pseudo-file
.IR /dev/cpuset/cpuset.memory_pressure_enabled ,
the kernel does
not compute per-cpuset
.IR memory_pressure .
.SS Using the echo command
When using the
.B echo
command at the shell prompt to change the values of cpuset files,
beware that the built-in
.B echo
command in some shells does not display an error message if the
.BR write (2)
system call fails.
.\" Gack!  csh(1)'s echo does this
For example, if the command:
.in +4n
.nf

echo 19 > cpuset.mems

.fi
.in
failed because memory node 19 was not allowed (perhaps
the current system does not have a memory node 19), then the
.B echo
command might not display any error.
It is better to use the
.B /bin/echo
external command to change cpuset file settings, as this
command will display
.BR write (2)
errors, as in the example:
.in +4n
.nf

/bin/echo 19 > cpuset.mems
/bin/echo: write error: Invalid argument
.fi
.in
.\" ================== EXCEPTIONS ==================
.SH EXCEPTIONS
.SS Memory placement
Not all allocations of system memory are constrained by cpusets,
for the following reasons.
.PP
If hot-plug functionality is used to remove all the CPUs that are
currently assigned to a cpuset, then the kernel will automatically
update the
.I cpus_allowed
of all processes attached to CPUs in that cpuset
to allow all CPUs.
When memory hot-plug functionality for removing
memory nodes is available, a similar exception is expected to apply
there as well.
In general, the kernel prefers to violate cpuset placement,
rather than starving a process that has had all its allowed CPUs or
memory nodes taken offline.
User code should reconfigure cpusets to refer only to online CPUs
and memory nodes when using hot-plug to add or remove such resources.
.PP
A few kernel-critical, internal memory-allocation requests, marked
GFP_ATOMIC, must be satisfied immediately.
The kernel may drop some
request or malfunction if one of these allocations fail.
If such a request cannot be satisfied within the current process's cpuset,
then we relax the cpuset, and look for memory anywhere we can find it.
It's better to violate the cpuset than stress the kernel.
.PP
Allocations of memory requested by kernel drivers while processing
an interrupt lack any relevant process context, and are not confined
by cpusets.
.SS Renaming cpusets
You can use the
.BR rename (2)
system call to rename cpusets.
Only simple renaming is supported; that is, changing the name of a cpuset
directory is permitted, but moving a directory into
a different directory is not permitted.
.\" ================== ERRORS ==================
.SH ERRORS
The Linux kernel implementation of cpusets sets
.I errno
to specify the reason for a failed system call affecting cpusets.
.PP
The possible
.I errno
settings and their meaning when set on
a failed cpuset call are as listed below.
.TP
.B E2BIG
Attempted a
.BR write (2)
on a special cpuset file
with a length larger than some kernel-determined upper
limit on the length of such writes.
.TP
.B EACCES
Attempted to
.BR write (2)
the process ID (PID) of a process to a cpuset
.I tasks
file when one lacks permission to move that process.
.TP
.B EACCES
Attempted to add, using
.BR write (2),
a CPU or memory node to a cpuset, when that CPU or memory node was
not already in its parent.
.TP
.B EACCES
Attempted to set, using
.BR write (2),
.I cpuset.cpu_exclusive
or
.I cpuset.mem_exclusive
on a cpuset whose parent lacks the same setting.
.TP
.B EACCES
Attempted to
.BR write (2)
a
.I cpuset.memory_pressure
file.
.TP
.B EACCES
Attempted to create a file in a cpuset directory.
.TP
.B EBUSY
Attempted to remove, using
.BR rmdir (2),
a cpuset with attached processes.
.TP
.B EBUSY
Attempted to remove, using
.BR rmdir (2),
a cpuset with child cpusets.
.TP
.B EBUSY
Attempted to remove
a CPU or memory node from a cpuset
that is also in a child of that cpuset.
.TP
.B EEXIST
Attempted to create, using
.BR mkdir (2),
a cpuset that already exists.
.TP
.B EEXIST
Attempted to
.BR rename (2)
a cpuset to a name that already exists.
.TP
.B EFAULT
Attempted to
.BR read (2)
or
.BR write (2)
a cpuset file using
a buffer that is outside the writing processes accessible address space.
.TP
.B EINVAL
Attempted to change a cpuset, using
.BR write (2),
in a way that would violate a
.I cpu_exclusive
or
.I mem_exclusive
attribute of that cpuset or any of its siblings.
.TP
.B EINVAL
Attempted to
.BR write (2)
an empty
.I cpuset.cpus
or
.I cpuset.mems
list to a cpuset which has attached processes or child cpusets.
.TP
.B EINVAL
Attempted to
.BR write (2)
a
.I cpuset.cpus
or
.I cpuset.mems
list which included a range with the second number smaller than
the first number.
.TP
.B EINVAL
Attempted to
.BR write (2)
a
.I cpuset.cpus
or
.I cpuset.mems
list which included an invalid character in the string.
.TP
.B EINVAL
Attempted to
.BR write (2)
a list to a
.I cpuset.cpus
file that did not include any online CPUs.
.TP
.B EINVAL
Attempted to
.BR write (2)
a list to a
.I cpuset.mems
file that did not include any online memory nodes.
.TP
.B EINVAL
Attempted to
.BR write (2)
a list to a
.I cpuset.mems
file that included a node that held no memory.
.TP
.B EIO
Attempted to
.BR write (2)
a string to a cpuset
.I tasks
file that
does not begin with an ASCII decimal integer.
.TP
.B EIO
Attempted to
.BR rename (2)
a cpuset into a different directory.
.TP
.B ENAMETOOLONG
Attempted to
.BR read (2)
a
.I /proc/<pid>/cpuset
file for a cpuset path that is longer than the kernel page size.
.TP
.B ENAMETOOLONG
Attempted to create, using
.BR mkdir (2),
a cpuset whose base directory name is longer than 255 characters.
.TP
.B ENAMETOOLONG
Attempted to create, using
.BR mkdir (2),
a cpuset whose full pathname,
including the mount point (typically "/dev/cpuset/") prefix,
is longer than 4095 characters.
.TP
.B ENODEV
The cpuset was removed by another process at the same time as a
.BR write (2)
was attempted on one of the pseudo-files in the cpuset directory.
.TP
.B ENOENT
Attempted to create, using
.BR mkdir (2),
a cpuset in a parent cpuset that doesn't exist.
.TP
.B ENOENT
Attempted to
.BR access (2)
or
.BR open (2)
a nonexistent file in a cpuset directory.
.TP
.B ENOMEM
Insufficient memory is available within the kernel; can occur
on a variety of system calls affecting cpusets, but only if the
system is extremely short of memory.
.TP
.B ENOSPC
Attempted to
.BR write (2)
the process ID (PID)
of a process to a cpuset
.I tasks
file when the cpuset had an empty
.I cpuset.cpus
or empty
.I cpuset.mems
setting.
.TP
.B ENOSPC
Attempted to
.BR write (2)
an empty
.I cpuset.cpus
or
.I cpuset.mems
setting to a cpuset that
has tasks attached.
.TP
.B ENOTDIR
Attempted to
.BR rename (2)
a nonexistent cpuset.
.TP
.B EPERM
Attempted to remove a file from a cpuset directory.
.TP
.B ERANGE
Specified a
.I cpuset.cpus
or
.I cpuset.mems
list to the kernel which included a number too large for the kernel
to set in its bit masks.
.TP
.B ESRCH
Attempted to
.BR write (2)
the process ID (PID) of a nonexistent process to a cpuset
.I tasks
file.
.\" ================== VERSIONS ==================
.SH VERSIONS
Cpusets appeared in version 2.6.12 of the Linux kernel.
.\" ================== NOTES ==================
.SH NOTES
Despite its name, the
.I pid
parameter is actually a thread ID,
and each thread in a threaded group can be attached to a different
cpuset.
The value returned from a call to
.BR gettid (2)
can be passed in the argument
.IR pid .
.\" ================== BUGS ==================
.SH BUGS
.I cpuset.memory_pressure
cpuset files can be opened
for writing, creation, or truncation, but then the
.BR write (2)
fails with
.I errno
set to
.BR EACCES ,
and the creation and truncation options on
.BR open (2)
have no effect.
.\" ================== EXAMPLE ==================
.SH EXAMPLE
The following examples demonstrate querying and setting cpuset
options using shell commands.
.SS Creating and attaching to a cpuset.
To create a new cpuset and attach the current command shell to it,
the steps are:
.sp
.PD 0
.IP 1) 4
mkdir /dev/cpuset (if not already done)
.IP 2)
mount \-t cpuset none /dev/cpuset (if not already done)
.IP 3)
Create the new cpuset using
.BR mkdir (1).
.IP 4)
Assign CPUs and memory nodes to the new cpuset.
.IP 5)
Attach the shell to the new cpuset.
.PD
.PP
For example, the following sequence of commands will set up a cpuset
named "Charlie", containing just CPUs 2 and 3, and memory node 1,
and then attach the current shell to that cpuset.
.in +4n
.nf

.RB "$" " mkdir /dev/cpuset"
.RB "$" " mount \-t cpuset cpuset /dev/cpuset"
.RB "$" " cd /dev/cpuset"
.RB "$" " mkdir Charlie"
.RB "$" " cd Charlie"
.RB "$" " /bin/echo 2-3 > cpuset.cpus"
.RB "$" " /bin/echo 1 > cpuset.mems"
.RB "$" " /bin/echo $$ > tasks"
# The current shell is now running in cpuset Charlie
# The next line should display '/Charlie'
.RB "$" " cat /proc/self/cpuset"
.fi
.in
.SS Migrating a job to different memory nodes.
To migrate a job (the set of processes attached to a cpuset)
to different CPUs and memory nodes in the system, including moving
the memory pages currently allocated to that job,
perform the following steps.
.sp
.PD 0
.IP 1) 4
Let's say we want to move the job in cpuset
.I alpha
(CPUs 4-7 and memory nodes 2-3) to a new cpuset
.I beta
(CPUs 16-19 and memory nodes 8-9).
.IP 2)
First create the new cpuset
.IR beta .
.IP 3)
Then allow CPUs 16-19 and memory nodes 8-9 in
.IR beta .
.IP 4)
Then enable
.I memory_migration
in
.IR beta .
.IP 5)
Then move each process from
.I alpha
to
.IR beta .
.PD
.PP
The following sequence of commands accomplishes this.
.in +4n
.nf

.RB "$" " cd /dev/cpuset"
.RB "$" " mkdir beta"
.RB "$" " cd beta"
.RB "$" " /bin/echo 16-19 > cpuset.cpus"
.RB "$" " /bin/echo 8-9 > cpuset.mems"
.RB "$" " /bin/echo 1 > cpuset.memory_migrate"
.RB "$" " while read i; do /bin/echo $i; done < ../alpha/tasks > tasks"
.fi
.in
.PP
The above should move any processes in
.I alpha
to
.IR beta ,
and any memory held by these processes on memory nodes 2-3 to memory
nodes 8-9, respectively.
.PP
Notice that the last step of the above sequence did not do:
.in +4n
.nf

.RB "$" " cp ../alpha/tasks tasks"
.fi
.in
.PP
The
.I while
loop, rather than the seemingly easier use of the
.BR cp (1)
command, was necessary because
only one process PID at a time may be written to the
.I tasks
file.
.PP
The same effect (writing one PID at a time) as the
.I while
loop can be accomplished more efficiently, in fewer keystrokes and in
syntax that works on any shell, but alas more obscurely, by using the
.B \-u
(unbuffered) option of
.BR sed (1):
.in +4n

.nf
.RB "$" " sed \-un p < ../alpha/tasks > tasks"
.fi
.in
.\" ================== SEE ALSO ==================
.SH SEE ALSO
.BR taskset (1),
.BR get_mempolicy (2),
.BR getcpu (2),
.BR mbind (2),
.BR sched_getaffinity (2),
.BR sched_setaffinity (2),
.BR sched_setscheduler (2),
.BR set_mempolicy (2),
.BR CPU_SET (3),
.BR proc (5),
.BR numa (7),
.BR sched (7),
.BR migratepages (8),
.BR numactl (8)
.PP
.IR Documentation/cpusets.txt
in the Linux kernel source tree
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2007 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" 2007-06-13 Creation
.\"
.TH CREDENTIALS 7 2015-03-29 "Linux" "Linux Programmer's Manual"
.SH NAME
credentials \- process identifiers
.SH DESCRIPTION
.SS Process ID (PID)
Each process has a unique nonnegative integer identifier
that is assigned when the process is created using
.BR fork (2).
A process can obtain its PID using
.BR getpid (2).
A PID is represented using the type
.I pid_t
(defined in
.IR <sys/types.h> ).

PIDs are used in a range of system calls to identify the process
affected by the call, for example:
.BR kill (2),
.BR ptrace (2),
.BR setpriority (2)
.\" .BR sched_rr_get_interval (2),
.\" .BR sched_getaffinity (2),
.\" .BR sched_setaffinity (2),
.\" .BR sched_getparam (2),
.\" .BR sched_setparam (2),
.\" .BR sched_setscheduler (2),
.\" .BR sched_getscheduler (2),
.BR setpgid (2),
.\" .BR getsid (2),
.BR setsid (2),
.BR sigqueue (3),
and
.BR waitpid (2).
.\" .BR waitid (2),
.\" .BR wait4 (2),

A process's PID is preserved across an
.BR execve (2).
.SS Parent process ID (PPID)
A process's parent process ID identifies the process that created
this process using
.BR fork (2).
A process can obtain its PPID using
.BR getppid (2).
A PPID is represented using the type
.IR pid_t .

A process's PPID is preserved across an
.BR execve (2).
.SS Process group ID and session ID
Each process has a session ID and a process group ID,
both represented using the type
.IR pid_t .
A process can obtain its session ID using
.BR getsid (2),
and its process group ID using
.BR getpgrp (2).

A child created by
.BR fork (2)
inherits its parent's session ID and process group ID.
A process's session ID and process group ID are preserved across an
.BR execve (2).

Sessions and process groups are abstractions devised to support shell
job control.
A process group (sometimes called a "job") is a collection of
processes that share the same process group ID;
the shell creates a new process group for the process(es) used
to execute single command or pipeline (e.g., the two processes
created to execute the command "ls\ |\ wc" are placed in the
same process group).
A process's group membership can be set using
.BR setpgid (2).
The process whose process ID is the same as its process group ID is the
\fIprocess group leader\fP for that group.

A session is a collection of processes that share the same session ID.
All of the members of a process group also have the same session ID
(i.e., all of the members of a process group always belong to the
same session, so that sessions and process groups form a strict
two-level hierarchy of processes.)
A new session is created when a process calls
.BR setsid (2),
which creates a new session whose session ID is the same
as the PID of the process that called
.BR setsid (2).
The creator of the session is called the \fIsession leader\fP.

All of the processes in a session share a
.IR "controlling terminal" .
The controlling terminal is established when the session leader
first opens a terminal (unless the
.BR O_NOCTTY
flag is specified when calling
.BR open (2)).
A terminal may be the controlling terminal of at most one session.

At most one of the jobs in a session may be the
.IR "foreground job" ;
other jobs in the session are
.IR "background jobs" .
Only the foreground job may read from the terminal;
when a process in the background attempts to read from the terminal,
its process group is sent a
.BR SIGTTIN
signal, which suspends the job.
If the
.BR TOSTOP
flag has been set for the terminal (see
.BR termios (3)),
then only the foreground job may write to the terminal;
writes from background job cause a
.BR SIGTTOU
signal to be generated, which suspends the job.
When terminal keys that generate a signal (such as the
.I interrupt
key, normally control-C)
are pressed, the signal is sent to the processes in the foreground job.

Various system calls and library functions
may operate on all members of a process group,
including
.BR kill (2),
.BR killpg (2),
.BR getpriority (2),
.BR setpriority (2),
.BR ioprio_get (2),
.BR ioprio_set (2),
.BR waitid (2),
and
.BR waitpid (2).
See also the discussion of the
.BR F_GETOWN ,
.BR F_GETOWN_EX ,
.BR F_SETOWN ,
and
.BR F_SETOWN_EX
operations in
.BR fcntl (2).
.SS User and group identifiers
Each process has various associated user and groups IDs.
These IDs are integers, respectively represented using the types
.I uid_t
and
.I gid_t
(defined in
.IR <sys/types.h> ).

On Linux, each process has the following user and group identifiers:
.IP * 3
Real user ID and real group ID.
These IDs determine who owns the process.
A process can obtain its real user (group) ID using
.BR getuid (2)
.RB ( getgid (2)).
.IP *
Effective user ID and effective group ID.
These IDs are used by the kernel to determine the permissions
that the process will have when accessing shared resources such
as message queues, shared memory, and semaphores.
On most UNIX systems, these IDs also determine the
permissions when accessing files.
However, Linux uses the filesystem IDs described below
for this task.
A process can obtain its effective user (group) ID using
.BR geteuid (2)
.RB ( getegid (2)).
.IP *
Saved set-user-ID and saved set-group-ID.
These IDs are used in set-user-ID and set-group-ID programs to save
a copy of the corresponding effective IDs that were set when
the program was executed (see
.BR execve (2)).
A set-user-ID program can assume and drop privileges by
switching its effective user ID back and forth between the values
in its real user ID and saved set-user-ID.
This switching is done via calls to
.BR seteuid (2),
.BR setreuid (2),
or
.BR setresuid (2).
A set-group-ID program performs the analogous tasks using
.BR setegid (2),
.BR setregid (2),
or
.BR setresgid (2).
A process can obtain its saved set-user-ID (set-group-ID) using
.BR getresuid (2)
.RB ( getresgid (2)).
.IP *
Filesystem user ID and filesystem group ID (Linux-specific).
These IDs, in conjunction with the supplementary group IDs described
below, are used to determine permissions for accessing files; see
.BR path_resolution (7)
for details.
Whenever a process's effective user (group) ID is changed,
the kernel also automatically changes the filesystem user (group) ID
to the same value.
Consequently, the filesystem IDs normally have the same values
as the corresponding effective ID, and the semantics for file-permission
checks are thus the same on Linux as on other UNIX systems.
The filesystem IDs can be made to differ from the effective IDs
by calling
.BR setfsuid (2)
and
.BR setfsgid (2).
.IP *
Supplementary group IDs.
This is a set of additional group IDs that are used for permission
checks when accessing files and other shared resources.
On Linux kernels before 2.6.4,
a process can be a member of up to 32 supplementary groups;
since kernel 2.6.4,
a process can be a member of up to 65536 supplementary groups.
The call
.I sysconf(_SC_NGROUPS_MAX)
can be used to determine the number of supplementary groups
of which a process may be a member.
.\" Since kernel 2.6.4, the limit is visible via the read-only file
.\" /proc/sys/kernel/ngroups_max.
.\" As at 2.6.22-rc2, this file is still read-only.
A process can obtain its set of supplementary group IDs using
.BR getgroups (2),
and can modify the set using
.BR setgroups (2).
.PP
A child process created by
.BR fork (2)
inherits copies of its parent's user and groups IDs.
During an
.BR execve (2),
a process's real user and group ID and supplementary
group IDs are preserved;
the effective and saved set IDs may be changed, as described in
.BR execve (2).

Aside from the purposes noted above,
a process's user IDs are also employed in a number of other contexts:
.IP * 3
when determining the permissions for sending signals (see
.BR kill (2));
.IP *
when determining the permissions for setting
process-scheduling parameters (nice value, real time
scheduling policy and priority, CPU affinity, I/O priority) using
.BR setpriority (2),
.BR sched_setaffinity (2),
.BR sched_setscheduler (2),
.BR sched_setparam (2),
.BR sched_setattr (2),
and
.BR ioprio_set (2);
.IP *
when checking resource limits (see
.BR getrlimit (2));
.IP *
when checking the limit on the number of inotify instances
that the process may create (see
.BR inotify (7)).
.SH CONFORMING TO
Process IDs, parent process IDs, process group IDs, and session IDs
are specified in POSIX.1-2001.
The real, effective, and saved set user and groups IDs,
and the supplementary group IDs, are specified in POSIX.1-2001.
The filesystem user and group IDs are a Linux extension.
.SH NOTES
The POSIX threads specification requires that
credentials are shared by all of the threads in a process.
However, at the kernel level, Linux maintains separate user and group
credentials for each thread.
The NPTL threading implementation does some work to ensure
that any change to user or group credentials
(e.g., calls to
.BR setuid (2),
.BR setresuid (2))
is carried through to all of the POSIX threads in a process.
See
.BR nptl (7)
for further details.
.SH SEE ALSO
.BR bash (1),
.BR csh (1),
.BR ps (1),
.BR access (2),
.BR execve (2),
.BR faccessat (2),
.BR fork (2),
.BR getgroups (2),
.BR getpgrp (2),
.BR getpid (2),
.BR getppid (2),
.BR getsid (2),
.BR kill (2),
.BR killpg (2),
.BR setegid (2),
.BR seteuid (2),
.BR setfsgid (2),
.BR setfsuid (2),
.BR setgid (2),
.BR setgroups (2),
.BR setresgid (2),
.BR setresuid (2),
.BR setuid (2),
.BR waitpid (2),
.BR euidaccess (3),
.BR initgroups (3),
.BR tcgetpgrp (3),
.BR tcsetpgrp (3),
.BR capabilities (7),
.BR namespaces (7),
.BR path_resolution (7),
.BR pid_namespaces (7),
.BR pthreads (7),
.BR signal (7),
.BR user_namespaces (7),
.BR unix (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" This man page is Copyright (C) 1998 Alan Cox.
.\"
.\" %%%LICENSE_START(VERBATIM_ONE_PARA)
.\" Permission is granted to distribute possibly modified copies
.\" of this page provided the header is included verbatim,
.\" and in case of nontrivial modification author and date
.\" of the modification is added to the header.
.\" %%%LICENSE_END
.\"
.\" $Id: ddp.7,v 1.3 1999/05/13 11:33:22 freitag Exp $
.\"
.TH DDP  7 2008-11-20 "Linux" "Linux Programmer's Manual"
.SH NAME
ddp \- Linux AppleTalk protocol implementation
.SH SYNOPSIS
.B #include <sys/socket.h>
.br
.B #include <netatalk/at.h>
.sp
.IB ddp_socket " = socket(AF_APPLETALK, SOCK_DGRAM, 0);"
.br
.IB raw_socket " = socket(AF_APPLETALK, SOCK_RAW, " protocol ");"
.SH DESCRIPTION
Linux implements the AppleTalk protocols described in
.IR "Inside AppleTalk" .
Only the DDP layer and AARP are present in
the kernel.
They are designed to be used via the
.B netatalk
protocol
libraries.
This page documents the interface for those who wish or need to
use the DDP layer directly.
.PP
The communication between AppleTalk and the user program works using a
BSD-compatible socket interface.
For more information on sockets, see
.BR socket (7).
.PP
An AppleTalk socket is created by calling the
.BR socket (2)
function with a
.B AF_APPLETALK
socket family argument.
Valid socket types are
.B SOCK_DGRAM
to open a
.B ddp
socket or
.B SOCK_RAW
to open a
.B raw
socket.
.I protocol
is the AppleTalk protocol to be received or sent.
For
.B SOCK_RAW
you must specify
.BR ATPROTO_DDP .
.PP
Raw sockets may be opened only by a process with effective user ID 0
or when the process has the
.B CAP_NET_RAW
capability.
.SS Address format
An AppleTalk socket address is defined as a combination of a network number,
a node number, and a port number.
.PP
.in +4n
.nf
struct at_addr {
    unsigned short s_net;
    unsigned char  s_node;
};

struct sockaddr_atalk {
    sa_family_t    sat_family;    /* address family */
    unsigned char  sat_port;      /* port */
    struct at_addr sat_addr;      /* net/node */
};
.fi
.in
.PP
.I sat_family
is always set to
.BR AF_APPLETALK .
.I sat_port
contains the port.
The port numbers below 129 are known as
.IR "reserved ports" .
Only processes with the effective user ID 0 or the
.B CAP_NET_BIND_SERVICE
capability may
.BR bind (2)
to these sockets.
.I sat_addr
is the host address.
The
.I net
member of
.I struct at_addr
contains the host network in network byte order.
The value of
.B AT_ANYNET
is a
wildcard and also implies \(lqthis network.\(rq
The
.I node
member of
.I struct at_addr
contains the host node number.
The value of
.B AT_ANYNODE
is a
wildcard and also implies \(lqthis node.\(rq The value of
.B ATADDR_BCAST
is a link
local broadcast address.
.\" FIXME . this doesn't make sense [johnl]
.SS Socket options
No protocol-specific socket options are supported.
.SS /proc interfaces
IP supports a set of
.I /proc
interfaces to configure some global AppleTalk parameters.
The parameters can be accessed by reading or writing files in the directory
.IR /proc/sys/net/atalk/ .
.TP
.I aarp-expiry-time
The time interval (in seconds) before an AARP cache entry expires.
.TP
.I aarp-resolve-time
The time interval (in seconds) before an AARP cache entry is resolved.
.TP
.I aarp-retransmit-limit
The number of retransmissions of an AARP query before the node is declared
dead.
.TP
.I aarp-tick-time
The timer rate (in seconds) for the timer driving AARP.
.PP
The default values match the specification and should never need to be
changed.
.SS Ioctls
All ioctls described in
.BR socket (7)
apply to DDP.
.\" FIXME . Add a section about multicasting
.SH ERRORS
.\" FIXME . document all errors. We should really fix the kernels to
.\" give more uniform error returns (ENOMEM vs ENOBUFS, EPERM vs
.\" EACCES etc.)
.TP
.B EACCES
The user tried to execute an operation without the necessary permissions.
These include sending to a broadcast address without
having the broadcast flag set,
and trying to bind to a reserved port without effective user ID 0 or
.BR CAP_NET_BIND_SERVICE .
.TP
.B EADDRINUSE
Tried to bind to an address already in use.
.TP
.B EADDRNOTAVAIL
A nonexistent interface was requested or the requested source address was
not local.
.TP
.B EAGAIN
Operation on a nonblocking socket would block.
.TP
.B EALREADY
A connection operation on a nonblocking socket is already in progress.
.TP
.B ECONNABORTED
A connection was closed during an
.BR accept (2).
.TP
.B EHOSTUNREACH
No routing table entry matches the destination address.
.TP
.B EINVAL
Invalid argument passed.
.TP
.B EISCONN
.BR connect (2)
was called on an already connected socket.
.TP
.B EMSGSIZE
Datagram is bigger than the DDP MTU.
.TP
.B ENODEV
Network device not available or not capable of sending IP.
.TP
.B ENOENT
.B SIOCGSTAMP
was called on a socket where no packet arrived.
.TP
.BR ENOMEM " and " ENOBUFS
Not enough memory available.
.TP
.B ENOPKG
A kernel subsystem was not configured.
.TP
.BR ENOPROTOOPT " and " EOPNOTSUPP
Invalid socket option passed.
.TP
.B ENOTCONN
The operation is defined only on a connected socket, but the socket wasn't
connected.
.TP
.B EPERM
User doesn't have permission to set high priority,
make a configuration change,
or send signals to the requested process or group.
.TP
.B EPIPE
The connection was unexpectedly closed or shut down by the other end.
.TP
.B ESOCKTNOSUPPORT
The socket was unconfigured, or an unknown socket type was requested.
.SH VERSIONS
AppleTalk is supported by Linux 2.0 or higher.
The
.I /proc
interfaces exist since Linux 2.2.
.SH NOTES
Be very careful with the
.B SO_BROADCAST
option \- it is not privileged in Linux.
It is easy to overload the network
with careless sending to broadcast addresses.
.SS Compatibility
The basic AppleTalk socket interface is compatible with
.B netatalk
on BSD-derived systems.
Many BSD systems fail to check
.B SO_BROADCAST
when sending broadcast frames; this can lead to compatibility problems.
.PP
The
raw
socket mode is unique to Linux and exists to support the alternative CAP
package and AppleTalk monitoring tools more easily.
.SH BUGS
There are too many inconsistent error values.
.PP
The ioctls used to configure routing tables, devices,
AARP tables and other devices are not yet described.
.SH SEE ALSO
.BR recvmsg (2),
.BR sendmsg (2),
.BR capabilities (7),
.BR socket (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1993 Michael Haardt (michael@moria.de),
.\"   Fri Apr  2 11:32:09 MET DST 1993
.\" and Andries Brouwer (aeb@cwi.nl), Fri Feb 14 21:47:50 1997.
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.\" Modified Sun Jul 25 10:45:30 1993 by Rik Faith (faith@cs.unc.edu)
.\" Modified Sun Jul 21 21:25:26 1996 by Andries Brouwer (aeb@cwi.nl)
.\" Modified Mon Oct 21 17:47:19 1996 by Eric S. Raymond (esr@thyrsus.com)
.\" Modified Wed Aug 27 20:28:58 1997 by Nicolás Lichtmaier (nick@debian.org)
.\" Modified Mon Sep 21 00:00:26 1998 by Andries Brouwer (aeb@cwi.nl)
.\" Modified Wed Jan 24 06:37:24 2001 by Eric S. Raymond (esr@thyrsus.com)
.\" Modified Thu Dec 13 23:53:27 2001 by Martin Schulze <joey@infodrom.org>
.\"
.TH ENVIRON 7 2014-08-19 "Linux" "Linux Programmer's Manual"
.SH NAME
environ \- user environment
.SH SYNOPSIS
.nf
.BI "extern char **" environ ;
.br
.fi
.SH DESCRIPTION
The variable
.I environ
points to an array of pointers to strings called the "environment".
The last pointer in this array has the value NULL.
(This variable must be declared in the user program,
but is declared in the header file
.I <unistd.h>
if the
.B _GNU_SOURCE
feature test macro is defined.)
This array of strings is made available to the process by the
.BR exec (3)
call that started the process.

By convention the strings in
.I environ
have the form "\fIname\fP\fB=\fP\fIvalue\fP".
Common examples are:
.TP
.B USER
The name of the logged-in user (used by some BSD-derived programs).
.TP
.B LOGNAME
The name of the logged-in user (used by some System-V derived programs).
.TP
.B HOME
A user's login directory, set by
.BR login (1)
from the password file
.BR passwd (5).
.TP
.B LANG
The name of a locale to use for locale categories when not overridden
by
.B LC_ALL
or more specific environment variables such as
.BR LC_COLLATE ,
.BR LC_CTYPE ,
.BR LC_MESSAGES ,
.BR LC_MONETARY ,
.BR LC_NUMERIC ,
and
.BR LC_TIME
(see
.BR locale (7)
for further details of the
.BR LC_*
environment variables).
.TP
.B PATH
The sequence of directory prefixes that
.BR sh (1)
and many other
programs apply in searching for a file known by an incomplete pathname.
The prefixes are separated by \(aq\fB:\fP\(aq.
(Similarly one has
.B CDPATH
used by some shells to find the target
of a change directory command,
.B MANPATH
used by
.BR man (1)
to find manual pages, and so on)
.TP
.B PWD
The current working directory.
Set by some shells.
.TP
.B SHELL
The pathname of the user's login shell.
.TP
.B TERM
The terminal type for which output is to be prepared.
.TP
.B PAGER
The user's preferred utility to display text files.
.TP
.BR EDITOR / VISUAL
The user's preferred utility to edit text files.
.\" .TP
.\" .B BROWSER
.\" The user's preferred utility to browse URLs. Sequence of colon-separated
.\" browser commands. See http://www.catb.org/~esr/BROWSER/ .
.PP
Further names may be placed in the environment by the
.I export
command and "name=value" in
.BR sh (1),
or by the
.I setenv
command if you use
.BR csh (1).
Arguments may also be placed in the
environment at the point of an
.BR exec (3).
A C program can manipulate its environment using the functions
.BR getenv (3),
.BR putenv (3),
.BR setenv (3),
and
.BR unsetenv (3).

Note that the behavior of many programs and library routines is
influenced by the presence or value of certain environment variables.
A random collection:
.LP
The variables
.BR LANG ", " LANGUAGE ", " NLSPATH ", " LOCPATH ", "
.BR LC_ALL ", " LC_MESSAGES ", "
and so on influence locale handling; see
.BR catopen (3),
.BR gettext (3),
and
.BR locale (7).
.LP
.B TMPDIR
influences the path prefix of names created by
.BR tmpnam (3)
and other routines, and the temporary directory used by
.BR sort (1)
and other programs.
.LP
.BR LD_LIBRARY_PATH ", " LD_PRELOAD
and other LD_* variables influence
the behavior of the dynamic loader/linker.
.LP
.B POSIXLY_CORRECT
makes certain programs and library routines follow
the prescriptions of POSIX.
.LP
The behavior of
.BR malloc (3)
is influenced by
.B MALLOC_*
variables.
.LP
The variable
.B HOSTALIASES
gives the name of a file containing aliases
to be used with
.BR gethostbyname (3).
.LP
.BR TZ " and " TZDIR
give timezone information used by
.BR tzset (3)
and through that by functions like
.BR ctime (3),
.BR localtime (3),
.BR mktime (3),
.BR strftime (3).
See also
.BR tzselect (8).
.LP
.B TERMCAP
gives information on how to address a given terminal
(or gives the name of a file containing such information).
.LP
.BR COLUMNS " and " LINES
tell applications about the window size, possibly overriding the actual size.
.LP
.BR PRINTER " or " LPDEST
may specify the desired printer to use.
See
.BR lpr (1).
.LP
Etc.
.SH BUGS
Clearly there is a security risk here.
Many a system command has been
tricked into mischief by a user who specified unusual values for
.BR IFS " or " LD_LIBRARY_PATH .

There is also the risk of name space pollution.
Programs like
.I make
and
.I autoconf
allow overriding of default utility names from the
environment with similarly named variables in all caps.
Thus one uses
.B CC
to select the desired C compiler (and similarly
.BR MAKE ,
.BR AR ,
.BR AS ,
.BR FC ,
.BR LD ,
.BR LEX ,
.BR RM ,
.BR YACC ,
etc.).
However, in some traditional uses such an environment variable
gives options for the program instead of a pathname.
Thus, one has
.BR MORE ,
.BR LESS ,
and
.BR GZIP .
Such usage is considered mistaken, and to be avoided in new
programs.
The authors of
.I gzip
should consider renaming their option to
.BR GZIP_OPT .
.SH SEE ALSO
.BR env (1),
.BR bash (1),
.BR csh (1),
.BR login (1),
.BR printenv (1),
.BR sh (1),
.BR tcsh (1),
.BR execve (2),
.BR clearenv (3),
.BR exec (3),
.BR getenv (3),
.BR putenv (3),
.BR setenv (3),
.BR unsetenv (3),
.BR locale (7),
.BR ld.so (8)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\"  Copyright (C) 2003  Davide Libenzi
.\"
.\" %%%LICENSE_START(GPLv2+_SW_3_PARA)
.\"  This program is free software; you can redistribute it and/or modify
.\"  it under the terms of the GNU General Public License as published by
.\"  the Free Software Foundation; either version 2 of the License, or
.\"  (at your option) any later version.
.\"
.\"  This program is distributed in the hope that it will be useful,
.\"  but WITHOUT ANY WARRANTY; without even the implied warranty of
.\"  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\"  GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.\"  Davide Libenzi <davidel@xmailserver.org>
.\"
.TH EPOLL 7 2015-04-19 "Linux" "Linux Programmer's Manual"
.SH NAME
epoll \- I/O event notification facility
.SH SYNOPSIS
.B #include <sys/epoll.h>
.SH DESCRIPTION
The
.B epoll
API performs a similar task to
.BR poll (2):
monitoring multiple file descriptors to see if I/O is possible on any of them.
The
.B epoll
API can be used either as an edge-triggered or a level-triggered
interface and scales well to large numbers of watched file descriptors.
The following system calls are provided to
create and manage an
.B epoll
instance:
.IP * 3
.BR epoll_create (2)
creates an
.B epoll
instance and returns a file descriptor referring to that instance.
(The more recent
.BR epoll_create1 (2)
extends the functionality of
.BR epoll_create (2).)
.IP *
Interest in particular file descriptors is then registered via
.BR epoll_ctl (2).
The set of file descriptors currently registered on an
.B epoll
instance is sometimes called an
.I epoll
set.
.IP *
.BR epoll_wait (2)
waits for I/O events,
blocking the calling thread if no events are currently available.
.SS Level-triggered and edge-triggered
The
.B epoll
event distribution interface is able to behave both as edge-triggered
(ET) and as level-triggered (LT).
The difference between the two mechanisms
can be described as follows.
Suppose that
this scenario happens:
.IP 1. 3
The file descriptor that represents the read side of a pipe
.RI ( rfd )
is registered on the
.B epoll
instance.
.IP 2.
A pipe writer writes 2 kB of data on the write side of the pipe.
.IP 3.
A call to
.BR epoll_wait (2)
is done that will return
.I rfd
as a ready file descriptor.
.IP 4.
The pipe reader reads 1 kB of data from
.IR rfd .
.IP 5.
A call to
.BR epoll_wait (2)
is done.
.PP
If the
.I rfd
file descriptor has been added to the
.B epoll
interface using the
.B EPOLLET
(edge-triggered)
flag, the call to
.BR epoll_wait (2)
done in step
.B 5
will probably hang despite the available data still present in the file
input buffer;
meanwhile the remote peer might be expecting a response based on the
data it already sent.
The reason for this is that edge-triggered mode
delivers events only when changes occur on the monitored file descriptor.
So, in step
.B 5
the caller might end up waiting for some data that is already present inside
the input buffer.
In the above example, an event on
.I rfd
will be generated because of the write done in
.B 2
and the event is consumed in
.BR 3 .
Since the read operation done in
.B 4
does not consume the whole buffer data, the call to
.BR epoll_wait (2)
done in step
.B 5
might block indefinitely.

An application that employs the
.B EPOLLET
flag should use nonblocking file descriptors to avoid having a blocking
read or write starve a task that is handling multiple file descriptors.
The suggested way to use
.B epoll
as an edge-triggered
.RB ( EPOLLET )
interface is as follows:
.RS
.TP 4
.B i
with nonblocking file descriptors; and
.TP
.B ii
by waiting for an event only after
.BR read (2)
or
.BR write (2)
return
.BR EAGAIN .
.RE
.PP
By contrast, when used as a level-triggered interface
(the default, when
.B EPOLLET
is not specified),
.B epoll
is simply a faster
.BR poll (2),
and can be used wherever the latter is used since it shares the
same semantics.

Since even with edge-triggered
.BR epoll ,
multiple events can be generated upon receipt of multiple chunks of data,
the caller has the option to specify the
.B EPOLLONESHOT
flag, to tell
.B epoll
to disable the associated file descriptor after the receipt of an event with
.BR epoll_wait (2).
When the
.B EPOLLONESHOT
flag is specified,
it is the caller's responsibility to rearm the file descriptor using
.BR epoll_ctl (2)
with
.BR EPOLL_CTL_MOD .
.SS Interaction with autosleep
If the system is in
.B autosleep
mode via
.I /sys/power/autosleep
and an event happens which wakes the device from sleep, the device
driver will keep the device awake only until that event is queued.
To keep the device awake until the event has been processed,
it is necessary to use the
.BR epoll (7)
.B EPOLLWAKEUP
flag.

When the
.B EPOLLWAKEUP
flag is set in the
.B events
field for a
.IR "struct epoll_event" ,
the system will be kept awake from the moment the event is queued,
through the
.BR epoll_wait (2)
call which returns the event until the subsequent
.BR epoll_wait (2)
call.
If the event should keep the system awake beyond that time,
then a separate
.I wake_lock
should be taken before the second
.BR epoll_wait (2)
call.
.SS /proc interfaces
The following interfaces can be used to limit the amount of
kernel memory consumed by epoll:
.\" Following was added in 2.6.28, but them removed in 2.6.29
.\" .TP
.\" .IR /proc/sys/fs/epoll/max_user_instances " (since Linux 2.6.28)"
.\" This specifies an upper limit on the number of epoll instances
.\" that can be created per real user ID.
.TP
.IR /proc/sys/fs/epoll/max_user_watches " (since Linux 2.6.28)"
This specifies a limit on the total number of
file descriptors that a user can register across
all epoll instances on the system.
The limit is per real user ID.
Each registered file descriptor costs roughly 90 bytes on a 32-bit kernel,
and roughly 160 bytes on a 64-bit kernel.
Currently,
.\" 2.6.29 (in 2.6.28, the default was 1/32 of lowmem)
the default value for
.I max_user_watches
is 1/25 (4%) of the available low memory,
divided by the registration cost in bytes.
.SS Example for suggested usage
While the usage of
.B epoll
when employed as a level-triggered interface does have the same
semantics as
.BR poll (2),
the edge-triggered usage requires more clarification to avoid stalls
in the application event loop.
In this example, listener is a
nonblocking socket on which
.BR listen (2)
has been called.
The function
.I do_use_fd()
uses the new ready file descriptor until
.B EAGAIN
is returned by either
.BR read (2)
or
.BR write (2).
An event-driven state machine application should, after having received
.BR EAGAIN ,
record its current state so that at the next call to
.I do_use_fd()
it will continue to
.BR read (2)
or
.BR write (2)
from where it stopped before.

.in +4n
.nf
#define MAX_EVENTS 10
struct epoll_event ev, events[MAX_EVENTS];
int listen_sock, conn_sock, nfds, epollfd;

/* Code to set up listening socket, \(aqlisten_sock\(aq,
   (socket(), bind(), listen()) omitted */

epollfd = epoll_create1(0);
if (epollfd == \-1) {
    perror("epoll_create1");
    exit(EXIT_FAILURE);
}

ev.events = EPOLLIN;
ev.data.fd = listen_sock;
if (epoll_ctl(epollfd, EPOLL_CTL_ADD, listen_sock, &ev) == \-1) {
    perror("epoll_ctl: listen_sock");
    exit(EXIT_FAILURE);
}

for (;;) {
    nfds = epoll_wait(epollfd, events, MAX_EVENTS, \-1);
    if (nfds == \-1) {
        perror("epoll_pwait");
        exit(EXIT_FAILURE);
    }

    for (n = 0; n < nfds; ++n) {
        if (events[n].data.fd == listen_sock) {
            conn_sock = accept(listen_sock,
                            (struct sockaddr *) &local, &addrlen);
            if (conn_sock == \-1) {
                perror("accept");
                exit(EXIT_FAILURE);
            }
            setnonblocking(conn_sock);
            ev.events = EPOLLIN | EPOLLET;
            ev.data.fd = conn_sock;
            if (epoll_ctl(epollfd, EPOLL_CTL_ADD, conn_sock,
                        &ev) == \-1) {
                perror("epoll_ctl: conn_sock");
                exit(EXIT_FAILURE);
            }
        } else {
            do_use_fd(events[n].data.fd);
        }
    }
}
.fi
.in

When used as an edge-triggered interface, for performance reasons, it is
possible to add the file descriptor inside the
.B epoll
interface
.RB ( EPOLL_CTL_ADD )
once by specifying
.RB ( EPOLLIN | EPOLLOUT ).
This allows you to avoid
continuously switching between
.B EPOLLIN
and
.B EPOLLOUT
calling
.BR epoll_ctl (2)
with
.BR EPOLL_CTL_MOD .
.SS Questions and answers
.TP 4
.B Q0
What is the key used to distinguish the file descriptors registered in an
.B epoll
set?
.TP
.B A0
The key is the combination of the file descriptor number and
the open file description
(also known as an "open file handle",
the kernel's internal representation of an open file).
.TP
.B Q1
What happens if you register the same file descriptor on an
.B epoll
instance twice?
.TP
.B A1
You will probably get
.BR EEXIST .
However, it is possible to add a duplicate
.RB ( dup (2),
.BR dup2 (2),
.BR fcntl (2)
.BR F_DUPFD )
descriptor to the same
.B epoll
instance.
.\" But a descriptor duplicated by fork(2) can't be added to the
.\" set, because the [file *, fd] pair is already in the epoll set.
.\" That is a somewhat ugly inconsistency.  On the one hand, a child process
.\" cannot add the duplicate file descriptor to the epoll set.  (In every
.\" other case that I can think of, descriptors duplicated by fork have
.\" similar semantics to descriptors duplicated by dup() and friends.)  On
.\" the other hand, the very fact that the child has a duplicate of the
.\" descriptor means that even if the parent closes its descriptor, then
.\" epoll_wait() in the parent will continue to receive notifications for
.\" that descriptor because of the duplicated descriptor in the child.
.\"
.\" See http://thread.gmane.org/gmane.linux.kernel/596462/
.\" "epoll design problems with common fork/exec patterns"
.\"
.\" mtk, Feb 2008
This can be a useful technique for filtering events,
if the duplicate file descriptors are registered with different
.I events
masks.
.TP
.B Q2
Can two
.B epoll
instances wait for the same file descriptor?
If so, are events reported to both
.B epoll
file descriptors?
.TP
.B A2
Yes, and events would be reported to both.
However, careful programming may be needed to do this correctly.
.TP
.B Q3
Is the
.B epoll
file descriptor itself poll/epoll/selectable?
.TP
.B A3
Yes.
If an
.B epoll
file descriptor has events waiting, then it will
indicate as being readable.
.TP
.B Q4
What happens if one attempts to put an
.B epoll
file descriptor into its own file descriptor set?
.TP
.B A4
The
.BR epoll_ctl (2)
call will fail
.RB ( EINVAL ).
However, you can add an
.B epoll
file descriptor inside another
.B epoll
file descriptor set.
.TP
.B Q5
Can I send an
.B epoll
file descriptor over a UNIX domain socket to another process?
.TP
.B A5
Yes, but it does not make sense to do this, since the receiving process
would not have copies of the file descriptors in the
.B epoll
set.
.TP
.B Q6
Will closing a file descriptor cause it to be removed from all
.B epoll
sets automatically?
.TP
.B A6
Yes, but be aware of the following point.
A file descriptor is a reference to an open file description (see
.BR open (2)).
Whenever a descriptor is duplicated via
.BR dup (2),
.BR dup2 (2),
.BR fcntl (2)
.BR F_DUPFD ,
or
.BR fork (2),
a new file descriptor referring to the same open file description is
created.
An open file description continues to exist until all
file descriptors referring to it have been closed.
A file descriptor is removed from an
.B epoll
set only after all the file descriptors referring to the underlying
open file description have been closed
(or before if the descriptor is explicitly removed using
.BR epoll_ctl (2)
.BR EPOLL_CTL_DEL ).
This means that even after a file descriptor that is part of an
.B epoll
set has been closed,
events may be reported for that file descriptor if other file
descriptors referring to the same underlying file description remain open.
.TP
.B Q7
If more than one event occurs between
.BR epoll_wait (2)
calls, are they combined or reported separately?
.TP
.B A7
They will be combined.
.TP
.B Q8
Does an operation on a file descriptor affect the
already collected but not yet reported events?
.TP
.B A8
You can do two operations on an existing file descriptor.
Remove would be meaningless for
this case.
Modify will reread available I/O.
.TP
.B Q9
Do I need to continuously read/write a file descriptor
until
.B EAGAIN
when using the
.B EPOLLET
flag (edge-triggered behavior) ?
.TP
.B A9
Receiving an event from
.BR epoll_wait (2)
should suggest to you that such
file descriptor is ready for the requested I/O operation.
You must consider it ready until the next (nonblocking)
read/write yields
.BR EAGAIN .
When and how you will use the file descriptor is entirely up to you.
.sp
For packet/token-oriented files (e.g., datagram socket,
terminal in canonical mode),
the only way to detect the end of the read/write I/O space
is to continue to read/write until
.BR EAGAIN .
.sp
For stream-oriented files (e.g., pipe, FIFO, stream socket), the
condition that the read/write I/O space is exhausted can also be detected by
checking the amount of data read from / written to the target file
descriptor.
For example, if you call
.BR read (2)
by asking to read a certain amount of data and
.BR read (2)
returns a lower number of bytes, you
can be sure of having exhausted the read I/O space for the file
descriptor.
The same is true when writing using
.BR write (2).
(Avoid this latter technique if you cannot guarantee that
the monitored file descriptor always refers to a stream-oriented file.)
.SS Possible pitfalls and ways to avoid them
.TP
.B o Starvation (edge-triggered)
.PP
If there is a large amount of I/O space,
it is possible that by trying to drain
it the other files will not get processed causing starvation.
(This problem is not specific to
.BR epoll .)
.PP
The solution is to maintain a ready list
and mark the file descriptor as ready
in its associated data structure, thereby allowing the application to
remember which files need to be processed but still round robin amongst
all the ready files.
This also supports ignoring subsequent events you
receive for file descriptors that are already ready.
.TP
.B o If using an event cache...
.PP
If you use an event cache or store all the file descriptors returned from
.BR epoll_wait (2),
then make sure to provide a way to mark
its closure dynamically (i.e., caused by
a previous event's processing).
Suppose you receive 100 events from
.BR epoll_wait (2),
and in event #47 a condition causes event #13 to be closed.
If you remove the structure and
.BR close (2)
the file descriptor for event #13, then your
event cache might still say there are events waiting for that
file descriptor causing confusion.
.PP
One solution for this is to call, during the processing of event 47,
.BR epoll_ctl ( EPOLL_CTL_DEL )
to delete file descriptor 13 and
.BR close (2),
then mark its associated
data structure as removed and link it to a cleanup list.
If you find another
event for file descriptor 13 in your batch processing,
you will discover the file descriptor had been
previously removed and there will be no confusion.
.SH VERSIONS
The
.B epoll
API was introduced in Linux kernel 2.5.44.
.\" Its interface should be finalized in Linux kernel 2.5.66.
Support was added to glibc in version 2.3.2.
.SH CONFORMING TO
The
.B epoll
API is Linux-specific.
Some other systems provide similar
mechanisms, for example, FreeBSD has
.IR kqueue ,
and Solaris has
.IR /dev/poll .
.SH SEE ALSO
.BR epoll_create (2),
.BR epoll_create (2),
.BR epoll_create1 (2),
.BR epoll_ctl (2),
.BR epoll_wait (2),
.BR poll (2),
.BR select (2)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2013, Heinrich Schuchardt <xypron.glpk@gmx.de>
.\" and Copyright (C) 2014, Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of
.\" this manual under the conditions for verbatim copying, provided that
.\" the entire resulting derived work is distributed under the terms of
.\" a permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume.
.\" no responsibility for errors or omissions, or for damages resulting.
.\" from the use of the information contained herein.  The author(s) may.
.\" not have taken the same level of care in the production of this.
.\" manual, which is licensed free of charge, as they might when working.
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.TH FANOTIFY 7 2015-05-07 "Linux" "Linux Programmer's Manual"
.SH NAME
fanotify \- monitoring filesystem events
.SH DESCRIPTION
The fanotify API provides notification and interception of
filesystem events.
Use cases include virus scanning and hierarchical storage management.
Currently, only a limited set of events is supported.
In particular, there is no support for create, delete, and move events.
(See
.BR inotify (7)
for details of an API that does notify those events.)

Additional capabilities compared to the
.BR inotify (7)
API include the ability to monitor all of the objects
in a mounted filesystem,
the ability to make access permission decisions, and the
possibility to read or modify files before access by other applications.

The following system calls are used with this API:
.BR fanotify_init (2),
.BR fanotify_mark (2),
.BR read (2),
.BR write (2),
and
.BR close (2).
.SS fanotify_init(), fanotify_mark(), and notification groups
The
.BR fanotify_init (2)
system call creates and initializes an fanotify notification group
and returns a file descriptor referring to it.
.PP
An fanotify notification group is a kernel-internal object that holds
a list of files, directories, and mount points for which events shall be
created.
.PP
For each entry in an fanotify notification group, two bit masks exist: the
.I mark
mask and the
.I ignore
mask.
The mark mask defines file activities for which an event shall be created.
The ignore mask defines activities for which no event shall be generated.
Having these two types of masks permits a mount point or directory to be
marked for receiving events, while at the same time ignoring events for
specific objects under that mount point or directory.
.PP
The
.BR fanotify_mark (2)
system call adds a file, directory, or mount to a notification group
and specifies which events
shall be reported (or ignored), or removes or modifies such an entry.
.PP
A possible usage of the ignore mask is for a file cache.
Events of interest for a file cache are modification of a file and closing
of the same.
Hence, the cached directory or mount point is to be marked to receive these
events.
After receiving the first event informing that a file has been modified,
the corresponding cache entry will be invalidated.
No further modification events for this file are of interest until the file
is closed.
Hence, the modify event can be added to the ignore mask.
Upon receiving the close event, the modify event can be removed from the
ignore mask and the file cache entry can be updated.
.PP
The entries in the fanotify notification groups refer to files and
directories via their inode number and to mounts via their mount ID.
If files or directories are renamed or moved,
the respective entries survive.
If files or directories are deleted or mounts are unmounted,
the corresponding entries are deleted.
.SS The event queue
As events occur on the filesystem objects monitored by a notification group,
the fanotify system generates events that are collected in a queue.
These events can then be read (using
.BR read (2)
or similar)
from the fanotify file descriptor
returned by
.BR fanotify_init (2).

Two types of events are generated:
.I notification
events and
.I permission
events.
Notification events are merely informative
and require no action to be taken by
the receiving application except for closing the file descriptor passed
in the event (see below).
Permission events are requests to the receiving application to decide
whether permission for a file access shall be granted.
For these events, the recipient must write a response which decides whether
access is granted or not.

An event is removed from the event queue of the fanotify group
when it has been read.
Permission events that have been read are kept in an internal list of the
fanotify group until either a permission decision has been taken by
writing to the fanotify file descriptor or the fanotify file descriptor
is closed.
.SS Reading fanotify events
Calling
.BR read (2)
for the file descriptor returned by
.BR fanotify_init (2)
blocks (if the flag
.B FAN_NONBLOCK
is not specified in the call to
.BR fanotify_init (2))
until either a file event occurs or the call is interrupted by a signal
(see
.BR signal (7)).

After a successful
.BR read (2),
the read buffer contains one or more of the following structures:

.in +4n
.nf
struct fanotify_event_metadata {
    __u32 event_len;
    __u8 vers;
    __u8 reserved;
    __u16 metadata_len;
    __aligned_u64 mask;
    __s32 fd;
    __s32 pid;
};
.fi
.in
.PP
For performance reasons, it is recommended to use a large
buffer size (for example, 4096 bytes),
so that multiple events can be retrieved by a single
.BR read (2).

The return value of
.BR read (2)
is the number of bytes placed in the buffer,
or \-1 in case of an error (but see BUGS).

The fields of the
.I fanotify_event_metadata
structure are as follows:
.TP
.I event_len
This is the length of the data for the current event and the offset
to the next event in the buffer.
In the current implementation, the value of
.I event_len
is always
.BR FAN_EVENT_METADATA_LEN .
However, the API is designed to allow
variable-length structures to be returned in the future.
.TP
.I vers
This field holds a version number for the structure.
It must be compared to
.B FANOTIFY_METADATA_VERSION
to verify that the structures returned at runtime match
the structures defined at compile time.
In case of a mismatch, the application should abandon trying to use the
fanotify file descriptor.
.TP
.I reserved
This field is not used.
.TP
.I metadata_len
This is the length of the structure.
The field was introduced to facilitate the implementation of
optional headers per event type.
No such optional headers exist in the current implementation.
.TP
.I mask
This is a bit mask describing the event (see below).
.TP
.I fd
This is an open file descriptor for the object being accessed, or
.B FAN_NOFD
if a queue overflow occurred.
The file descriptor can be used to access the contents
of the monitored file or directory.
The reading application is responsible for closing this file descriptor.
.IP
When calling
.BR fanotify_init (2),
the caller may specify (via the
.I event_f_flags
argument) various file status flags that are to be set
on the open file description that corresponds to this file descriptor.
In addition, the (kernel-internal)
.B FMODE_NONOTIFY
file status flag is set on the open file description.
This flag suppresses fanotify event generation.
Hence, when the receiver of the fanotify event accesses the notified file or
directory using this file descriptor, no additional events will be created.
.TP
.I pid
This is the ID of the process that caused the event.
A program listening to fanotify events can compare this PID
to the PID returned by
.BR getpid (2),
to determine whether the event is caused by the listener itself,
or is due to a file access by another process.
.PP
The bit mask in
.I mask
indicates which events have occurred for a single filesystem object.
Multiple bits may be set in this mask,
if more than one event occurred for the monitored filesystem object.
In particular,
consecutive events for the same filesystem object and originating from the
same process may be merged into a single event, with the exception that two
permission events are never merged into one queue entry.
.PP
The bits that may appear in
.I mask
are as follows:
.TP
.B FAN_ACCESS
A file or a directory (but see BUGS) was accessed (read).
.TP
.B FAN_OPEN
A file or a directory was opened.
.TP
.B FAN_MODIFY
A file was modified.
.TP
.B FAN_CLOSE_WRITE
A file that was opened for writing
.RB ( O_WRONLY
or
.BR O_RDWR )
was closed.
.TP
.B FAN_CLOSE_NOWRITE
A file or directory that was opened read-only
.RB ( O_RDONLY )
was closed.
.TP
.B FAN_Q_OVERFLOW
The event queue exceeded the limit of 16384 entries.
This limit can be overridden by specifying the
.BR FAN_UNLIMITED_QUEUE
flag when calling
.BR fanotify_init (2).
.TP
.B FAN_ACCESS_PERM
An application wants to read a file or directory, for example using
.BR read (2)
or
.BR readdir (2).
The reader must write a response (as described below)
that determines whether the permission to
access the filesystem object shall be granted.
.TP
.B FAN_OPEN_PERM
An application wants to open a file or directory.
The reader must write a response that determines whether the permission to
open the filesystem object shall be granted.
.PP
To check for any close event, the following bit mask may be used:
.TP
.B FAN_CLOSE
A file was closed.
This is a synonym for:

    FAN_CLOSE_WRITE | FAN_CLOSE_NOWRITE
.PP
The following macros are provided to iterate over a buffer containing
fanotify event metadata returned by a
.BR read (2)
from an fanotify file descriptor:
.TP
.B FAN_EVENT_OK(meta, len)
This macro checks the remaining length
.I len
of the buffer
.I meta
against the length of the metadata structure and the
.I event_len
field of the first metadata structure in the buffer.
.TP
.B FAN_EVENT_NEXT(meta, len)
This macro uses the length indicated in the
.I event_len
field of the metadata structure pointed to by
.IR meta
to calculate the address of the next metadata structure that follows
.IR meta .
.I len
is the number of bytes of metadata that currently remain in the buffer.
The macro returns a pointer to the next metadata structure that follows
.IR meta ,
and reduces
.I len
by the number of bytes in the metadata structure that
has been skipped over (i.e., it subtracts
.IR meta\->event_len
from
.IR len ).
.PP
In addition, there is:
.TP
.B FAN_EVENT_METADATA_LEN
This macro returns the size (in bytes) of the structure
.IR fanotify_event_metadata .
This is the minimum size (and currently the only size) of any event metadata.
.\"
.SS Monitoring an fanotify file descriptor for events
When an fanotify event occurs, the fanotify file descriptor indicates as
readable when passed to
.BR epoll (7),
.BR poll (2),
or
.BR select (2).
.SS Dealing with permission events
For permission events, the application must
.BR write (2)
a structure of the following form to the
fanotify file descriptor:

.in +4n
.nf
struct fanotify_response {
    __s32 fd;
    __u32 response;
};
.fi
.in
.PP
The fields of this structure are as follows:
.TP
.I fd
This is the file descriptor from the structure
.IR fanotify_event_metadata .
.TP
.I response
This field indicates whether or not the permission is to be granted.
Its value must be either
.B FAN_ALLOW
to allow the file operation or
.B FAN_DENY
to deny the file operation.
.PP
If access is denied, the requesting application call will receive an
.BR EPERM
error.
.SS Closing the fanotify file descriptor
.PP
When all file descriptors referring to the fanotify notification group are
closed, the fanotify group is released and its resources
are freed for reuse by the kernel.
Upon
.BR close (2),
outstanding permission events will be set to allowed.
.SS /proc/[pid]/fdinfo
The file
.I /proc/[pid]/fdinfo/[fd]
contains information about fanotify marks for file descriptor
.I fd
of process
.IR pid .
See the kernel source file
.I Documentation/filesystems/proc.txt
for details.
.SH ERRORS
In addition to the usual errors for
.BR read (2),
the following errors can occur when reading from the
fanotify file descriptor:
.TP
.B EINVAL
The buffer is too small to hold the event.
.TP
.B EMFILE
The per-process limit on the number of open files has been reached.
See the description of
.B RLIMIT_NOFILE
in
.BR getrlimit (2).
.TP
.B ENFILE
The system-wide limit on the number of open files has been reached.
See
.I /proc/sys/fs/file-max
in
.BR proc (5).
.TP
.B ETXTBSY
This error is returned by
.BR read (2)
if
.B O_RDWR
or
.B O_WRONLY
was specified in the
.I event_f_flags
argument when calling
.BR fanotify_init (2)
and an event occurred for a monitored file that is currently being executed.
.PP
In addition to the usual errors for
.BR write (2),
the following errors can occur when writing to the fanotify file descriptor:
.TP
.B EINVAL
Fanotify access permissions are not enabled in the kernel configuration
or the value of
.I response
in the response structure is not valid.
.TP
.B ENOENT
The file descriptor
.I fd
in the response structure is not valid.
This may occur when a response for the permission event has already been
written.
.SH VERSIONS
The fanotify API was introduced in version 2.6.36 of the Linux kernel and
enabled in version 2.6.37.
Fdinfo support was added in version 3.8.
.SH CONFORMING TO
The fanotify API is Linux-specific.
.SH NOTES
The fanotify API is available only if the kernel was built with the
.B CONFIG_FANOTIFY
configuration option enabled.
In addition, fanotify permission handling is available only if the
.B CONFIG_FANOTIFY_ACCESS_PERMISSIONS
configuration option is enabled.
.SS Limitations and caveats
Fanotify reports only events that a user-space program triggers through the
filesystem API.
As a result,
it does not catch remote events that occur on network filesystems.
.PP
The fanotify API does not report file accesses and modifications that
may occur because of
.BR mmap (2),
.BR msync (2),
and
.BR munmap (2).
.PP
Events for directories are created only if the directory itself is opened,
read, and closed.
Adding, removing, or changing children of a marked directory does not create
events for the monitored directory itself.
.PP
Fanotify monitoring of directories is not recursive:
to monitor subdirectories under a directory,
additional marks must be created.
(But note that the fanotify API provides no way of detecting when a
subdirectory has been created under a marked directory,
which makes recursive monitoring difficult.)
Monitoring mounts offers the capability to monitor a whole directory tree.
.PP
The event queue can overflow.
In this case, events are lost.
.SH BUGS
Before Linux 3.19,
.BR fallocate (2)
did not generate fanotify events.
Since Linux 3.19,
.\" commit 820c12d5d6c0890bc93dd63893924a13041fdc35
calls to
.BR fallocate (2)
generate
.B FAN_MODIFY
events.

As of Linux 3.17,
the following bugs exist:
.IP * 3
On Linux, a filesystem object may be accessible through multiple paths,
for example, a part of a filesystem may be remounted using the
.IR \-\-bind
option of
.BR mount (8).
A listener that marked a mount will be notified only of events that were
triggered for a filesystem object using the same mount.
Any other event will pass unnoticed.
.IP *
.\" FIXME . A patch was proposed.
When an event is generated,
no check is made to see whether the user ID of the
receiving process has authorization to read or write the file
before passing a file descriptor for that file.
This poses a security risk, when the
.B CAP_SYS_ADMIN
capability is set for programs executed by unprivileged users.
.IP *
If a call to
.BR read (2)
processes multiple events from the fanotify queue and an error occurs,
the return value will be the total length of the events successfully
copied to the user-space buffer before the error occurred.
The return value will not be \-1, and
.I errno
will not be set.
Thus, the reading application has no way to detect the error.
.SH EXAMPLE
The following program demonstrates the usage of the fanotify API.
It marks the mount point passed as a command-line argument
and waits for events of type
.B FAN_PERM_OPEN
and
.BR FAN_CLOSE_WRITE .
When a permission event occurs, a
.B FAN_ALLOW
response is given.
.PP
The following output was recorded while editing the file
.IR /home/user/temp/notes .
Before the file was opened, a
.B FAN_OPEN_PERM
event occurred.
After the file was closed, a
.B FAN_CLOSE_WRITE
event occurred.
Execution of the program ends when the user presses the ENTER key.
.SS Example output
.in +4n
.nf
# ./fanotify_example /home
Press enter key to terminate.
Listening for events.
FAN_OPEN_PERM: File /home/user/temp/notes
FAN_CLOSE_WRITE: File /home/user/temp/notes

Listening for events stopped.
.fi
.in
.SS Program source
.nf
#define _GNU_SOURCE     /* Needed to get O_LARGEFILE definition */
#include <errno.h>
#include <fcntl.h>
#include <limits.h>
#include <poll.h>
#include <stdio.h>
#include <stdlib.h>
#include <sys/fanotify.h>
#include <unistd.h>

/* Read all available fanotify events from the file descriptor 'fd' */

static void
handle_events(int fd)
{
    const struct fanotify_event_metadata *metadata;
    struct fanotify_event_metadata buf[200];
    ssize_t len;
    char path[PATH_MAX];
    ssize_t path_len;
    char procfd_path[PATH_MAX];
    struct fanotify_response response;

    /* Loop while events can be read from fanotify file descriptor */

    for(;;) {

        /* Read some events */

        len = read(fd, (void *) &buf, sizeof(buf));
        if (len == \-1 && errno != EAGAIN) {
            perror("read");
            exit(EXIT_FAILURE);
        }

        /* Check if end of available data reached */

        if (len <= 0)
            break;

        /* Point to the first event in the buffer */

        metadata = buf;

        /* Loop over all events in the buffer */

        while (FAN_EVENT_OK(metadata, len)) {

            /* Check that run\-time and compile\-time structures match */

            if (metadata\->vers != FANOTIFY_METADATA_VERSION) {
                fprintf(stderr,
                        "Mismatch of fanotify metadata version.\\n");
                exit(EXIT_FAILURE);
            }

            /* metadata\->fd contains either FAN_NOFD, indicating a
               queue overflow, or a file descriptor (a nonnegative
               integer). Here, we simply ignore queue overflow. */

            if (metadata\->fd >= 0) {

                /* Handle open permission event */

                if (metadata\->mask & FAN_OPEN_PERM) {
                    printf("FAN_OPEN_PERM: ");

                    /* Allow file to be opened */

                    response.fd = metadata\->fd;
                    response.response = FAN_ALLOW;
                    write(fd, &response,
                          sizeof(struct fanotify_response));
                }

                /* Handle closing of writable file event */

                if (metadata\->mask & FAN_CLOSE_WRITE)
                    printf("FAN_CLOSE_WRITE: ");

                /* Retrieve and print pathname of the accessed file */

                snprintf(procfd_path, sizeof(procfd_path),
                         "/proc/self/fd/%d", metadata\->fd);
                path_len = readlink(procfd_path, path,
                                    sizeof(path) \- 1);
                if (path_len == \-1) {
                    perror("readlink");
                    exit(EXIT_FAILURE);
                }

                path[path_len] = '\\0';
                printf("File %s\\n", path);

                /* Close the file descriptor of the event */

                close(metadata\->fd);
            }

            /* Advance to next event */

            metadata = FAN_EVENT_NEXT(metadata, len);
        }
    }
}

int
main(int argc, char *argv[])
{
    char buf;
    int fd, poll_num;
    nfds_t nfds;
    struct pollfd fds[2];

    /* Check mount point is supplied */

    if (argc != 2) {
        fprintf(stderr, "Usage: %s MOUNT\\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    printf("Press enter key to terminate.\\n");

    /* Create the file descriptor for accessing the fanotify API */

    fd = fanotify_init(FAN_CLOEXEC | FAN_CLASS_CONTENT | FAN_NONBLOCK,
                       O_RDONLY | O_LARGEFILE);
    if (fd == \-1) {
        perror("fanotify_init");
        exit(EXIT_FAILURE);
    }

    /* Mark the mount for:
       \- permission events before opening files
       \- notification events after closing a write\-enabled
         file descriptor */

    if (fanotify_mark(fd, FAN_MARK_ADD | FAN_MARK_MOUNT,
                      FAN_OPEN_PERM | FAN_CLOSE_WRITE, AT_FDCWD,
                      argv[1]) == \-1) {
        perror("fanotify_mark");
        exit(EXIT_FAILURE);
    }

    /* Prepare for polling */

    nfds = 2;

    /* Console input */

    fds[0].fd = STDIN_FILENO;
    fds[0].events = POLLIN;

    /* Fanotify input */

    fds[1].fd = fd;
    fds[1].events = POLLIN;

    /* This is the loop to wait for incoming events */

    printf("Listening for events.\\n");

    while (1) {
        poll_num = poll(fds, nfds, \-1);
        if (poll_num == \-1) {
            if (errno == EINTR)     /* Interrupted by a signal */
                continue;           /* Restart poll() */

            perror("poll");         /* Unexpected error */
            exit(EXIT_FAILURE);
        }

        if (poll_num > 0) {
            if (fds[0].revents & POLLIN) {

                /* Console input is available: empty stdin and quit */

                while (read(STDIN_FILENO, &buf, 1) > 0 && buf != '\\n')
                    continue;
                break;
            }

            if (fds[1].revents & POLLIN) {

                /* Fanotify events are available */

                handle_events(fd);
            }
        }
    }

    printf("Listening for events stopped.\\n");
    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.ad l
.BR fanotify_init (2),
.BR fanotify_mark (2),
.BR inotify (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" This manpage is Copyright (C) 2006, Michael Kerrisk
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH FEATURE_TEST_MACROS 7 2015-03-29 "Linux" "Linux Programmer's Manual"
.SH NAME
feature_test_macros \- feature test macros
.SH SYNOPSIS
.nf
.B #include <features.h>
.fi
.SH DESCRIPTION
Feature test macros allow the programmer to control the definitions that
are exposed by system header files when a program is compiled.

.B NOTE:
In order to be effective, a feature test macro
.IR "must be defined before including any header files" .
This can be done either in the compilation command
.RI ( "cc \-DMACRO=value" )
or by defining the macro within the source code before
including any headers.

Some feature test macros are useful for creating portable applications,
by preventing nonstandard definitions from being exposed.
Other macros can be used to expose nonstandard definitions that
are not exposed by default.
The precise effects of each of the feature test macros described below
can be ascertained by inspecting the
.I <features.h>
header file.
.SS Specification of feature test macro requirements in manual pages
When a function requires that a feature test macro is defined,
the manual page SYNOPSIS typically includes a note of the following form
(this example from the
.BR acct (2)
manual page):
.RS 8
.sp
.B #include <unistd.h>
.sp
.BI "int acct(const char *" filename );
.sp
.nf
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.fi
.in
.sp
.BR acct ():
_BSD_SOURCE || (_XOPEN_SOURCE && _XOPEN_SOURCE\ <\ 500)
.RE
.PP
The
.B ||
means that in order to obtain the declaration of
.BR acct (2)
from
.IR <unistd.h> ,
.I either
of the following macro
definitions must be made before including any header files:
.RS
.nf

#define _BSD_SOURCE
#define _XOPEN_SOURCE        /* or any value < 500 */
.fi
.RE
.PP
Alternatively, equivalent definitions can be included in the
compilation command:
.RS
.nf

cc \-D_BSD_SOURCE
cc \-D_XOPEN_SOURCE           # Or any value < 500
.fi
.RE
.PP
Note that, as described below,
.BR "some feature test macros are defined by default" ,
so that it may not always be necessary to
explicitly specify the feature test macro(s) shown in the
SYNOPSIS.

In a few cases, manual pages use a shorthand for expressing the
feature test macro requirements (this example from
.BR readahead (2)):
.RS
.nf

.B #define _GNU_SOURCE
.B #include <fcntl.h>
.sp
.BI "ssize_t readahead(int " fd ", off64_t *" offset ", size_t " count );
.fi
.RE
.PP
This format is employed in cases where only a single
feature test macro can be used to expose the function
declaration, and that macro is not defined by default.
.SS Feature test macros understood by glibc
The following paragraphs explain how feature test macros are handled
in Linux glibc 2.\fIx\fP,
.I x
> 0.
.\" The details in glibc 2.0 are simpler, but combining a
.\" a description of them with the details in later glibc versions
.\" would make for a complicated description.

Linux glibc understands the following feature test macros:
.TP
.B __STRICT_ANSI__
ISO Standard C.
This macro is implicitly defined by
.BR gcc (1)
when invoked with, for example, the
.I -std=c99
or
.I -ansi
flag.
.TP
.B _POSIX_C_SOURCE
Defining this macro causes header files to expose definitions as follows:
.RS
.IP \(bu 3
The value 1 exposes definitions conforming to POSIX.1-1990 and
ISO C (1990).
.IP \(bu
The value 2 or greater additionally exposes
definitions for POSIX.2-1992.
.IP \(bu
The value 199309L or greater additionally exposes
definitions for POSIX.1b (real-time extensions).
.\" 199506L functionality is available only since glibc 2.1
.IP \(bu
The value 199506L or greater additionally exposes
definitions for POSIX.1c (threads).
.IP \(bu
(Since glibc 2.3.3)
The value 200112L or greater additionally exposes definitions corresponding
to the POSIX.1-2001 base specification (excluding the XSI extension)
and also causes C95 (since glibc 2.12) and
C99 (since glibc 2.10) features to be exposed.
.IP \(bu
(Since glibc 2.10)
The value 200809L or greater additionally exposes definitions corresponding
to the POSIX.1-2008 base specification (excluding the XSI extension).
.RE
.TP
.B _POSIX_SOURCE
Defining this obsolete macro with any value is equivalent to defining
.B _POSIX_C_SOURCE
with the value 1.
.TP
.B _XOPEN_SOURCE
Defining this macro causes header files to expose definitions as follows:
.RS
.IP \(bu 3
Defining with any value exposes
definitions conforming to POSIX.1, POSIX.2, and XPG4.
.IP \(bu
The value 500 or greater additionally exposes
definitions for SUSv2 (UNIX 98).
.IP \(bu
(Since glibc 2.2) The value 600 or greater additionally exposes
definitions for SUSv3 (UNIX 03; i.e., the POSIX.1-2001 base specification
plus the XSI extension) and C99 definitions.
.IP \(bu
(Since glibc 2.10) The value 700 or greater additionally exposes
definitions for SUSv4 (i.e., the POSIX.1-2008 base specification
plus the XSI extension).
.RE
.IP
If
.B __STRICT_ANSI__
is not defined, or
.BR _XOPEN_SOURCE
is defined with a value greater than or equal to 500
.I and
neither
.B _POSIX_SOURCE
not
.B _POSIX_C_SOURCE
is explicitly defined, then
the following macros are implicitly defined:
.RS
.IP \(bu 3
.B _POSIX_SOURCE
is defined with the value 1.
.IP \(bu
.B _POSIX_C_SOURCE
is defined, according to the value of
.BR _XOPEN_SOURCE :
.RS 7
.TP
.BR _XOPEN_SOURCE " < 500"
.B _POSIX_C_SOURCE
is defined with the value 2.
.TP
.RB "500 <= " _XOPEN_SOURCE " < 600"
.B _POSIX_C_SOURCE
is defined with the value 199506L.
.TP
.RB "600 <= " _XOPEN_SOURCE " < 700"
.B _POSIX_C_SOURCE
is defined with the value 200112L.
.TP
.RB "700 <= " _XOPEN_SOURCE " (since glibc 2.10)"
.B _POSIX_C_SOURCE
is defined with the value 200809L.
.RE
.RE
.TP
.B _XOPEN_SOURCE_EXTENDED
If this macro is defined, and
.B _XOPEN_SOURCE
is defined, then expose definitions corresponding to the XPG4v2
(SUSv1) UNIX extensions (UNIX 95).
This macro is also implicitly defined if
.B _XOPEN_SOURCE
is defined with a value of 500 or more.
.TP
.BR _ISOC99_SOURCE " (since glibc 2.1.3)"
Exposes declarations consistent with the ISO C99 standard.

Earlier glibc 2.1.x versions recognized an equivalent macro named
.B _ISOC9X_SOURCE
(because the C99 standard had not then been finalized).
Although the use of this macro is obsolete, glibc continues
to recognize it for backward compatibility.

Defining
.B _ISOC99_SOURCE
also exposes ISO C (1990) Amendment 1 ("C95") definitions.
(The primary change in C95 was support for international character sets.)
.TP
.BR _ISOC11_SOURCE " (since glibc 2.16)"
Exposes declarations consistent with the ISO C11 standard.
Defining this macro also enables C99 and C95 features (like
.BR _ISOC99_SOURCE ).
.TP
.B _LARGEFILE64_SOURCE
Expose definitions for the alternative API specified by the
LFS (Large File Summit) as a "transitional extension" to the
Single UNIX Specification.
(See
.UR http:\:/\:/opengroup.org\:/platform\:/lfs.html
.UE .)
The alternative API consists of a set of new objects
(i.e., functions and types) whose names are suffixed with "64"
(e.g.,
.I off64_t
versus
.IR off_t ,
.BR lseek64 ()
versus
.BR lseek (),
etc.).
New programs should not employ this macro; instead
.I _FILE_OFFSET_BITS=64
should be employed.
.TP
.BR _LARGEFILE_SOURCE
This macro was historically used to expose certain functions (specifically
.BR fseeko (3)
and
.BR ftello (3))
that address limitations of earlier APIs
.RB ( fseek (3)
and
.BR ftell (3))
that use
.IR "long int"
for file offsets.
This macro is implicitly defined if
.BR _XOPEN_SOURCE
is defined with a value greater than or equal to 500.
New programs should not employ this macro;
defining
.BR _XOPEN_SOURCE
as just described or defining
.B _FILE_OFFSET_BITS
with the value 64 is the preferred mechanism to achieve the same result.
.TP
.B _FILE_OFFSET_BITS
Defining this macro with the value 64
automatically converts references to 32-bit functions and data types
related to file I/O and filesystem operations into references to
their 64-bit counterparts.
This is useful for performing I/O on large files (> 2 Gigabytes)
on 32-bit systems.
(Defining this macro permits correctly written programs to use
large files with only a recompilation being required.)

64-bit systems naturally permit file sizes greater than 2 Gigabytes,
and on those systems this macro has no effect.
.TP
.BR _BSD_SOURCE " (deprecated since glibc 2.20)"
Defining this macro with any value causes header files to expose
BSD-derived definitions.

In glibc versions up to and including 2.18,
defining this macro also causes BSD definitions to be preferred in
some situations where standards conflict, unless one or more of
.BR _SVID_SOURCE ,
.BR _POSIX_SOURCE ,
.BR _POSIX_C_SOURCE ,
.BR _XOPEN_SOURCE ,
.BR _XOPEN_SOURCE_EXTENDED ,
or
.B _GNU_SOURCE
is defined, in which case BSD definitions are disfavored.
Since glibc 2.19,
.B _BSD_SOURCE
no longer causes BSD definitions to be preferred in case of conflicts.

Since glibc 2.20, this macro is deprecated.
.\" commit c941736c92fa3a319221f65f6755659b2a5e0a20
.\" commit 498afc54dfee41d33ba519f496e96480badace8e
.\" commit acd7f096d79c181866d56d4aaf3b043e741f1e2c
It now has the same effect as defining
.BR _DEFAULT_SOURCE ,
but generates a compile-time warning (unless
.BR _DEFAULT_SOURCE
.\" commit ade40b10ff5fa59a318cf55b9d8414b758e8df78
is also defined).
Use
.B _DEFAULT_SOURCE
instead.
To allow code that requires
.BR _BSD_SOURCE
in glibc 2.19 and earlier and
.BR _DEFAULT_SOURCE
in glibc 2.20 and later to compile without warnings, define
.I both
.B _BSD_SOURCE
and
.BR _DEFAULT_SOURCE .
.TP
.BR _SVID_SOURCE " (deprecated since glibc 2.20)"
Defining this macro with any value causes header files to expose
System V-derived definitions.
(SVID == System V Interface Definition; see
.BR standards (7).)

Since glibc 2.20, this macro is deprecated in the same fashion as
.BR _BSD_SOURCE .
.TP
.BR _DEFAULT_SOURCE " (since glibc 2.19)"
This macro can be defined to ensure that the "default"
definitions are provided even when the defaults would otherwise
be disabled,
as happens when individual macros are explicitly defined,
or the compiler is invoked in one of its "standard" modes (e.g.,
.IR "cc\ \-std=c99" ).
Defining
.B _DEFAULT_SOURCE
without defining other individual macros
or invoking the compiler in one of its "standard" modes has no effect.

The "default" definitions comprise those required by POSIX.1-2008
as well as various definitions derived from BSD and System V.
On glibc 2.19 and earlier, these defaults were approximately equivalent
to explicitly defining the following:

    cc \-D_BSD_SOURCE \-D_SVID_SOURCE \-D_POSIX_C_SOURCE=200809

.TP
.BR _ATFILE_SOURCE " (since glibc 2.4)"
Defining this macro with any value causes header files to expose
declarations of a range of functions with the suffix "at";
see
.BR openat (2).
Since glibc 2.10, this macro is also implicitly defined if
.BR _POSIX_C_SOURCE
is defined with a value greater than or equal to 200809L.
.TP
.B _GNU_SOURCE
Defining this macro (with any value) implicitly defines
.BR _ATFILE_SOURCE ,
.BR _LARGEFILE64_SOURCE ,
.BR _ISOC99_SOURCE ,
.BR _XOPEN_SOURCE_EXTENDED ,
.BR _POSIX_SOURCE ,
.B _POSIX_C_SOURCE
with the value 200809L
(200112L in glibc versions before 2.10;
199506L in glibc versions before 2.5;
199309L in glibc versions before 2.1)
and
.B _XOPEN_SOURCE
with the value 700
(600 in glibc versions before 2.10;
500 in glibc versions before 2.2).
In addition, various GNU-specific extensions are also exposed.

Since glibc 2.19, defining
.BR _GNU_SOURCE
also has the effect of implicitly defining
.BR _DEFAULT_SOURCE .
In glibc versions before 2.20, defining
.BR _GNU_SOURCE
also had the effect of implicitly defining
.BR _BSD_SOURCE
and
.BR _SVID_SOURCE .
.TP
.B _REENTRANT
Defining this macro exposes definitions of certain reentrant functions.
For multithreaded programs, use
.I "cc\ \-pthread"
instead.
.TP
.B _THREAD_SAFE
Synonym for
.BR _REENTRANT ,
provided for compatibility with some other implementations.
.TP
.BR _FORTIFY_SOURCE " (since glibc 2.3.4)"
.\" For more detail, see:
.\" http://gcc.gnu.org/ml/gcc-patches/2004-09/msg02055.html
.\" [PATCH] Object size checking to prevent (some) buffer overflows
.\" * From: Jakub Jelinek <jakub at redhat dot com>
.\" * To: gcc-patches at gcc dot gnu dot org
.\" * Date: Tue, 21 Sep 2004 04:16:40 -0400
Defining this macro causes some lightweight checks to be performed
to detect some buffer overflow errors when employing
various string and memory manipulation functions (for example,
.BR memcpy (3),
.BR memset (3),
.BR stpcpy (3),
.BR strcpy (3),
.BR strncpy (3),
.BR strcat (3),
.BR strncat (3),
.BR sprintf (3),
.BR snprintf (3),
.BR vsprintf (3),
.BR vsnprintf (3),
.BR gets (3),
and wide character variants thereof).
For some functions, argument consistency is checked;
for example, a check is made that
.BR open (2)
has been supplied with a
.I mode
argument when the specified flags include
.BR O_CREAT .
Not all problems are detected, just some common cases.
.\" Look for __USE_FORTIFY_LEVEL in the header files

If
.B _FORTIFY_SOURCE
is set to 1, with compiler optimization level 1
.RI ( "gcc\ \-O1" )
and above, checks that shouldn't change the behavior of
conforming programs are performed.
With
.B _FORTIFY_SOURCE
set to 2, some more checking is added, but
some conforming programs might fail.
.\" For example, given the following code
.\"        int d;
.\"        char buf[1000], buf[1000];
.\"        strcpy(fmt, "Hello world\n%n");
.\"        snprintf(buf, sizeof(buf), fmt, &d);
.\"
.\" Compiling with "gcc -D_FORTIFY_SOURCE=2 -O1" and then running will
.\" cause the following diagnostic at runtime at the snprintf() call
.\"
.\"        *** %n in writable segment detected ***
.\"        Aborted (core dumped)
.\"

Some of the checks can be performed at compile time
(via macros logic implemented in header files),
and result in compiler warnings;
other checks take place at run time,
and result in a run-time error if the check fails.

Use of this macro requires compiler support, available with
.BR gcc (1)
since version 4.0.
.SS Default definitions, implicit definitions, and combining definitions
.PP
If no feature test macros are explicitly defined,
then the following feature test macros are defined by default:
.BR _BSD_SOURCE
(in glibc 2.19 and earlier),
.BR _SVID_SOURCE
(in glibc 2.19 and earlier),
.BR _DEFAULT_SOURCE
(since glibc 2.19),
.BR _POSIX_SOURCE ,
and
.BR _POSIX_C_SOURCE =200809L
(200112L in glibc versions before 2.10;
199506L in glibc versions before 2.4;
199309L in glibc versions before 2.1).
.PP
If any of
.BR __STRICT_ANSI__ ,
.BR _ISOC99_SOURCE ,
.BR _POSIX_SOURCE ,
.BR _POSIX_C_SOURCE  ,
.BR _XOPEN_SOURCE ,
.BR _XOPEN_SOURCE_EXTENDED ,
.BR _BSD_SOURCE
(in glibc 2.19 and earlier),
or
.B _SVID_SOURCE
(in glibc 2.19 and earlier)
is explicitly defined, then
.BR _BSD_SOURCE ,
.BR _SVID_SOURCE ,
and
.BR _DEFAULT_SOURCE
are not defined by default.

If
.B _POSIX_SOURCE
and
.B _POSIX_C_SOURCE
are not explicitly defined,
and either
.B __STRICT_ANSI__
is not defined or
.B _XOPEN_SOURCE
is defined with a value of 500 or more, then
.IP * 3
.B _POSIX_SOURCE
is defined with the value 1; and
.IP *
.B _POSIX_C_SOURCE
is defined with one of the following values:
.RS 3
.IP \(bu 3
2,
if
.B _XOPEN_SOURCE
is defined with a value less than 500;
.IP \(bu
199506L,
if
.B _XOPEN_SOURCE
is defined with a value greater than or equal to 500 and less than 600;
or
.IP \(bu
(since glibc 2.4) 200112L,
if
.B _XOPEN_SOURCE
is defined with a value greater than or equal to 600 and less than 700.
.IP \(bu
(Since glibc 2.10)
200809L,
if
.B _XOPEN_SOURCE
is defined with a value greater than or equal to 700.
.IP \(bu
Older versions of glibc do not know about the values
200112L and 200809L for
.BR _POSIX_C_SOURCE ,
and the setting of this macro will depend on the glibc version.
.IP \(bu
If
.B _XOPEN_SOURCE
is undefined, then the setting of
.B _POSIX_C_SOURCE
depends on the glibc version:
199506L, in glibc versions before 2.4;
200112L, in glibc 2.4 to 2.9; and
200809L, since glibc 2.10.
.RE
.PP
Multiple macros can be defined; the results are additive.
.SH CONFORMING TO
POSIX.1 specifies
.BR _POSIX_C_SOURCE ,
.BR _POSIX_SOURCE ,
and
.BR _XOPEN_SOURCE .
.B _XOPEN_SOURCE_EXTENDED
was specified by XPG4v2 (aka SUSv1).

.B _FILE_OFFSET_BITS
is not specified by any standard,
but is employed on some other implementations.

.BR _BSD_SOURCE ,
.BR _SVID_SOURCE ,
.BR _DEFAULT_SOURCE ,
.BR _ATFILE_SOURCE ,
.BR _GNU_SOURCE ,
.BR _FORTIFY_SOURCE ,
.BR _REENTRANT ,
and
.B _THREAD_SAFE
are specific to Linux (glibc).
.SH NOTES
.I <features.h>
is a Linux/glibc-specific header file.
Other systems have an analogous file, but typically with a different name.
This header file is automatically included by other header files as
required: it is not necessary to explicitly include it in order to
employ feature test macros.

According to which of the above feature test macros are defined,
.I <features.h>
internally defines various other macros that are checked by
other glibc header files.
These macros have names prefixed by two underscores (e.g.,
.BR __USE_MISC ).
Programs should
.I never
define these macros directly:
instead, the appropriate feature test macro(s) from the
list above should be employed.
.SH EXAMPLE
The program below can be used to explore how the various
feature test macros are set depending on the glibc version
and what feature test macros are explicitly set.
The following shell session, on a system with glibc 2.10,
shows some examples of what we would see:
.in +4n
.nf

$ \fBcc ftm.c\fP
$ \fB./a.out\fP
_POSIX_SOURCE defined
_POSIX_C_SOURCE defined: 200809L
_BSD_SOURCE defined
_SVID_SOURCE defined
_ATFILE_SOURCE defined
$ \fBcc \-D_XOPEN_SOURCE=500 ftm.c\fP
$ \fB./a.out\fP
_POSIX_SOURCE defined
_POSIX_C_SOURCE defined: 199506L
_XOPEN_SOURCE defined: 500
$ \fBcc \-D_GNU_SOURCE ftm.c\fP
$ \fB./a.out\fP
_POSIX_SOURCE defined
_POSIX_C_SOURCE defined: 200809L
_ISOC99_SOURCE defined
_XOPEN_SOURCE defined: 700
_XOPEN_SOURCE_EXTENDED defined
_LARGEFILE64_SOURCE defined
_BSD_SOURCE defined
_SVID_SOURCE defined
_ATFILE_SOURCE defined
_GNU_SOURCE defined
.fi
.in
.SS Program source
\&
.nf
/* ftm.c */

#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>

int
main(int argc, char *argv[])
{
#ifdef _POSIX_SOURCE
    printf("_POSIX_SOURCE defined\\n");
#endif

#ifdef _POSIX_C_SOURCE
    printf("_POSIX_C_SOURCE defined: %ldL\\n", (long) _POSIX_C_SOURCE);
#endif

#ifdef _ISOC99_SOURCE
    printf("_ISOC99_SOURCE defined\\n");
#endif

#ifdef _ISOC11_SOURCE
    printf("_ISOC11_SOURCE defined\\n");
#endif

#ifdef _XOPEN_SOURCE
    printf("_XOPEN_SOURCE defined: %d\\n", _XOPEN_SOURCE);
#endif

#ifdef _XOPEN_SOURCE_EXTENDED
    printf("_XOPEN_SOURCE_EXTENDED defined\\n");
#endif

#ifdef _LARGEFILE64_SOURCE
    printf("_LARGEFILE64_SOURCE defined\\n");
#endif

#ifdef _FILE_OFFSET_BITS
    printf("_FILE_OFFSET_BITS defined: %d\\n", _FILE_OFFSET_BITS);
#endif

#ifdef _BSD_SOURCE
    printf("_BSD_SOURCE defined\\n");
#endif

#ifdef _SVID_SOURCE
    printf("_SVID_SOURCE defined\\n");
#endif

#ifdef _DEFAULT_SOURCE
    printf("_DEFAULT_SOURCE defined\\n");
#endif

#ifdef _ATFILE_SOURCE
    printf("_ATFILE_SOURCE defined\\n");
#endif

#ifdef _GNU_SOURCE
    printf("_GNU_SOURCE defined\\n");
#endif

#ifdef _REENTRANT
    printf("_REENTRANT defined\\n");
#endif

#ifdef _THREAD_SAFE
    printf("_THREAD_SAFE defined\\n");
#endif

#ifdef _FORTIFY_SOURCE
    printf("_FORTIFY_SOURCE defined\\n");
#endif

    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR libc (7),
.BR standards (7)

The section "Feature Test Macros" under
.IR "info libc" .
.\" But beware: the info libc document is out of date (Jul 07, mtk)

.I /usr/include/features.h
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" This man page is Copyright (C) 1999 Claus Fischer.
.\"
.\" %%%LICENSE_START(VERBATIM_ONE_PARA)
.\" Permission is granted to distribute possibly modified copies
.\" of this page provided the header is included verbatim,
.\" and in case of nontrivial modification author and date
.\" of the modification is added to the header.
.\" %%%LICENSE_END
.\"
.\" 990620 - page created - aeb@cwi.nl
.\"
.\" FIXME . Add example programs to this page?
.TH FIFO 7 2008-12-03 "Linux" "Linux Programmer's Manual"
.SH NAME
fifo \- first-in first-out special file, named pipe
.SH DESCRIPTION
A FIFO special file (a named pipe) is similar to a pipe,
except that it is accessed as part of the filesystem.
It can be opened by multiple processes for reading or
writing.
When processes are exchanging data via the FIFO,
the kernel passes all data internally without writing it
to the filesystem.
Thus, the FIFO special file has no
contents on the filesystem; the filesystem entry merely
serves as a reference point so that processes can access
the pipe using a name in the filesystem.
.PP
The kernel maintains exactly one pipe object for each
FIFO special file that is opened by at least one process.
The FIFO must be opened on both ends (reading and writing)
before data can be passed.
Normally, opening the FIFO blocks
until the other end is opened also.
.PP
A process can open a FIFO in nonblocking mode.
In this
case, opening for read-only will succeed even if no-one has
opened on the write side yet, opening for write-only will
fail with
.B ENXIO
(no such device or address) unless the other
end has already been opened.
.PP
Under Linux, opening a FIFO for read and write will succeed
both in blocking and nonblocking mode.
POSIX leaves this
behavior undefined.
This can be used to open a FIFO for
writing while there are no readers available.
A process
that uses both ends of the connection in order to communicate
with itself should be very careful to avoid deadlocks.
.SH NOTES
When a process tries to write to a FIFO that is not opened
for read on the other side, the process is sent a
.B SIGPIPE
signal.

FIFO special files can be created by
.BR mkfifo (3),
and are indicated by
.IR "ls \-l"
with the file type \(aqp\(aq.
.SH SEE ALSO
.BR mkfifo (1),
.BR open (2),
.BR pipe (2),
.BR sigaction (2),
.BR signal (2),
.BR socketpair (2),
.BR mkfifo (3),
.BR pipe (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" This manpage has been automatically generated by docbook2man
.\" from a DocBook document.  This tool can be found at:
.\" <http://shell.ipoline.com/~elmert/comp/docbook2X/>
.\" Please send any bug reports, improvements, comments, patches,
.\" etc. to Steve Cheng <steve@ggi-project.org>.
.\"
.\" %%%LICENSE_START(MIT)
.\" This page is made available under the MIT license.
.\" %%%LICENSE_END
.\"
.TH FUTEX 7 2012-08-05 "Linux" "Linux Programmer's Manual"
.SH NAME
futex \- fast user-space locking
.SH SYNOPSIS
.nf
.B #include <linux/futex.h>
.fi
.SH DESCRIPTION
.PP
The Linux kernel provides futexes ("Fast user-space mutexes")
as a building block for fast user-space
locking and semaphores.
Futexes are very basic and lend themselves well for building higher level
locking abstractions such as POSIX mutexes.
.PP
This page does not set out to document all design decisions
but restricts itself to issues relevant for
application and library development.
Most programmers will in fact not be using futexes directly but
instead rely on system libraries built on them,
such as the NPTL pthreads implementation.
.PP
A futex is identified by a piece of memory which can be
shared between different processes.
In these different processes, it need not have identical addresses.
In its bare form, a futex has semaphore semantics;
it is a counter that can be incremented and decremented atomically;
processes can wait for the value to become positive.
.PP
Futex operation is entirely user space for the noncontended case.
The kernel is involved only to arbitrate the contended case.
As any sane design will strive for noncontention,
futexes are also optimized for this situation.
.PP
In its bare form, a futex is an aligned integer which is
touched only by atomic assembler instructions.
Processes can share this integer using
.BR mmap (2),
via shared memory segments or because they share memory space,
in which case the application is commonly called multithreaded.
.SS Semantics
.PP
Any futex operation starts in user space,
but it may be necessary to communicate with the kernel using the
.BR futex (2)
system call.
.PP
To "up" a futex, execute the proper assembler instructions that
will cause the host CPU to atomically increment the integer.
Afterward, check if it has in fact changed from 0 to 1, in which case
there were no waiters and the operation is done.
This is the noncontended case which is fast and should be common.
.PP
In the contended case, the atomic increment changed the counter
from \-1  (or some other negative number).
If this is detected, there are waiters.
User space should now set the counter to 1 and instruct the
kernel to wake up any waiters using the
.B FUTEX_WAKE
operation.
.PP
Waiting on a futex, to "down" it, is the reverse operation.
Atomically decrement the counter and check if it changed to 0,
in which case the operation is done and the futex was uncontended.
In all other circumstances, the process should set the counter to \-1
and request that the kernel wait for another process to up the futex.
This is done using the
.B FUTEX_WAIT
operation.
.PP
The
.BR futex (2)
system call can optionally be passed a timeout specifying how long
the kernel should
wait for the futex to be upped.
In this case, semantics are more complex and the programmer is referred
to
.BR futex (2)
for
more details.
The same holds for asynchronous futex waiting.
.SH VERSIONS
.PP
Initial futex support was merged in Linux 2.5.7
but with different semantics from those described above.
Current semantics are available from Linux 2.5.40 onward.
.SH NOTES
.PP
To reiterate, bare futexes are not intended as an easy to use
abstraction for end-users.
Implementors are expected to be assembly literate and to have read
the sources of the futex user-space library referenced
below.
.PP
This man page illustrates the most common use of the
.BR futex (2)
primitives: it is by no means the only one.
.\" .SH AUTHORS
.\" .PP
.\" Futexes were designed and worked on by Hubertus Franke
.\" (IBM Thomas J. Watson Research Center),
.\" Matthew Kirkwood, Ingo Molnar (Red Hat) and
.\" Rusty Russell (IBM Linux Technology Center).
.\" This page written by bert hubert.
.SH SEE ALSO
.BR futex (2)

.IR "Fuss, Futexes and Furwocks: Fast Userlevel Locking in Linux"
(proceedings of the Ottawa Linux Symposium 2002),
futex example library, futex-*.tar.bz2
.UR ftp://ftp.kernel.org\:/pub\:/linux\:/kernel\:/people\:/rusty/
.UE .
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1998 Andries Brouwer
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.\" 2003-08-24 fix for / by John Kristoff + joey
.\"
.TH GLOB 7 2012-07-28 "Linux" "Linux Programmer's Manual"
.SH NAME
glob \- globbing pathnames
.SH DESCRIPTION
Long ago, in UNIX\ V6, there was a program
.I /etc/glob
that would expand wildcard patterns.
Soon afterward this became a shell built-in.

These days there is also a library routine
.BR glob (3)
that will perform this function for a user program.

The rules are as follows (POSIX.2, 3.13).
.SS Wildcard matching
A string is a wildcard pattern if it contains one of the
characters \(aq?\(aq, \(aq*\(aq or \(aq[\(aq.
Globbing is the operation
that expands a wildcard pattern into the list of pathnames
matching the pattern.
Matching is defined by:

A \(aq?\(aq (not between brackets) matches any single character.

A \(aq*\(aq (not between brackets) matches any string,
including the empty string.
.PP
.B "Character classes"
.sp
An expression "\fI[...]\fP" where the first character after the
leading \(aq[\(aq is not an \(aq!\(aq matches a single character,
namely any of the characters enclosed by the brackets.
The string enclosed by the brackets cannot be empty;
therefore \(aq]\(aq can be allowed between the brackets, provided
that it is the first character.
(Thus, "\fI[][!]\fP" matches the
three characters \(aq[\(aq, \(aq]\(aq and \(aq!\(aq.)
.PP
.B Ranges
.sp
There is one special convention:
two characters separated by \(aq\-\(aq denote a range.
(Thus, "\fI[A\-Fa\-f0\-9]\fP"
is equivalent to "\fI[ABCDEFabcdef0123456789]\fP".)
One may include \(aq\-\(aq in its literal meaning by making it the
first or last character between the brackets.
(Thus, "\fI[]\-]\fP" matches just the two characters \(aq]\(aq and \(aq\-\(aq,
and "\fI[\-\-0]\fP" matches the
three characters \(aq\-\(aq, \(aq.\(aq, \(aq0\(aq, since \(aq/\(aq
cannot be matched.)
.PP
.B Complementation
.sp
An expression "\fI[!...]\fP" matches a single character, namely
any character that is not matched by the expression obtained
by removing the first \(aq!\(aq from it.
(Thus, "\fI[!]a\-]\fP" matches any
single character except \(aq]\(aq, \(aqa\(aq and \(aq\-\(aq.)

One can remove the special meaning of \(aq?\(aq, \(aq*\(aq and \(aq[\(aq by
preceding them by a backslash, or, in case this is part of
a shell command line, enclosing them in quotes.
Between brackets these characters stand for themselves.
Thus, "\fI[[?*\e]\fP" matches the
four characters \(aq[\(aq, \(aq?\(aq, \(aq*\(aq and \(aq\e\(aq.
.SS Pathnames
Globbing is applied on each of the components of a pathname
separately.
A \(aq/\(aq in a pathname cannot be matched by a \(aq?\(aq or \(aq*\(aq
wildcard, or by a range like "\fI[.\-0]\fP".
A range cannot contain an
explicit \(aq/\(aq character; this would lead to a syntax error.

If a filename starts with a \(aq.\(aq,
this character must be matched explicitly.
(Thus, \fIrm\ *\fP will not remove .profile, and \fItar\ c\ *\fP will not
archive all your files; \fItar\ c\ .\fP is better.)
.SS Empty lists
The nice and simple rule given above: "expand a wildcard pattern
into the list of matching pathnames" was the original UNIX
definition.
It allowed one to have patterns that expand into
an empty list, as in

.nf
    xv \-wait 0 *.gif *.jpg
.fi

where perhaps no *.gif files are present (and this is not
an error).
However, POSIX requires that a wildcard pattern is left
unchanged when it is syntactically incorrect, or the list of
matching pathnames is empty.
With
.I bash
one can force the classical behavior using this command:

    shopt \-s nullglob
.\" In Bash v1, by setting allow_null_glob_expansion=true

(Similar problems occur elsewhere.
For example, where old scripts have

.nf
    rm \`find . \-name "*~"\`
.fi

new scripts require

.nf
    rm \-f nosuchfile \`find . \-name "*~"\`
.fi

to avoid error messages from
.I rm
called with an empty argument list.)
.SH NOTES
.SS Regular expressions
Note that wildcard patterns are not regular expressions,
although they are a bit similar.
First of all, they match
filenames, rather than text, and secondly, the conventions
are not the same: for example, in a regular expression \(aq*\(aq means zero or
more copies of the preceding thing.

Now that regular expressions have bracket expressions where
the negation is indicated by a \(aq^\(aq, POSIX has declared the
effect of a wildcard pattern "\fI[^...]\fP" to be undefined.
.SS Character classes and internationalization
Of course ranges were originally meant to be ASCII ranges,
so that "\fI[\ \-%]\fP" stands for "\fI[\ !"#$%]\fP" and "\fI[a\-z]\fP" stands
for "any lowercase letter".
Some UNIX implementations generalized this so that a range X\-Y
stands for the set of characters with code between the codes for
X and for Y.
However, this requires the user to know the
character coding in use on the local system, and moreover, is
not convenient if the collating sequence for the local alphabet
differs from the ordering of the character codes.
Therefore, POSIX extended the bracket notation greatly,
both for wildcard patterns and for regular expressions.
In the above we saw three types of items that can occur in a bracket
expression: namely (i) the negation, (ii) explicit single characters,
and (iii) ranges.
POSIX specifies ranges in an internationally
more useful way and adds three more types:

(iii) Ranges X\-Y comprise all characters that fall between X
and Y (inclusive) in the current collating sequence as defined
by the
.B LC_COLLATE
category in the current locale.

(iv) Named character classes, like
.nf

[:alnum:]  [:alpha:]  [:blank:]  [:cntrl:]
[:digit:]  [:graph:]  [:lower:]  [:print:]
[:punct:]  [:space:]  [:upper:]  [:xdigit:]

.fi
so that one can say "\fI[[:lower:]]\fP" instead of "\fI[a\-z]\fP", and have
things work in Denmark, too, where there are three letters past \(aqz\(aq
in the alphabet.
These character classes are defined by the
.B LC_CTYPE
category
in the current locale.

(v) Collating symbols, like "\fI[.ch.]\fP" or "\fI[.a-acute.]\fP",
where the string between "\fI[.\fP" and "\fI.]\fP" is a collating
element defined for the current locale.
Note that this may
be a multicharacter element.

(vi) Equivalence class expressions, like "\fI[=a=]\fP",
where the string between "\fI[=\fP" and "\fI=]\fP" is any collating
element from its equivalence class, as defined for the
current locale.
For example, "\fI[[=a=]]\fP" might be equivalent
to "\fI[a\('a\(`a\(:a\(^a]\fP", that is,
to "\fI[a[.a-acute.][.a-grave.][.a-umlaut.][.a-circumflex.]]\fP".
.SH SEE ALSO
.BR sh (1),
.BR fnmatch (3),
.BR glob (3),
.BR locale (7),
.BR regex (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1993 by Thomas Koenig (ig25@rz.uni-karlsruhe.de)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified Sun Jul 25 11:05:58 1993 by Rik Faith (faith@cs.unc.edu)
.\" Modified Sat Feb 10 16:18:03 1996 by Urs Thuermann (urs@isnogud.escape.de)
.\" Modified Mon Jun 16 20:02:00 1997 by Nicolás Lichtmaier <nick@debian.org>
.\" Modified Mon Feb  6 16:41:00 1999 by Nicolás Lichtmaier <nick@debian.org>
.\" Modified Tue Feb  8 16:46:45 2000 by Chris Pepper <pepper@tgg.com>
.\" Modified Fri Sep  7 20:32:45 2001 by Tammy Fox <tfox@redhat.com>
.TH HIER 7 2015-03-29 "Linux" "Linux Programmer's Manual"
.SH NAME
hier \- description of the filesystem hierarchy
.SH DESCRIPTION
A typical Linux system has, among others, the following directories:
.TP
.I /
This is the root directory.
This is where the whole tree starts.
.TP
.I /bin
This directory contains executable programs which are needed in
single user mode and to bring the system up or repair it.
.TP
.I /boot
Contains static files for the boot loader.
This directory holds only
the files which are needed during the boot process.
The map installer
and configuration files should go to
.I /sbin
and
.IR /etc .
The operating system kernel (initrd for example) must be located in either
.I /
or
.IR /boot .
.TP
.I /dev
Special or device files, which refer to physical devices.
See
.BR mknod (1).
.TP
.I /etc
Contains configuration files which are local to the machine.
Some
larger software packages, like X11, can have their own subdirectories
below
.IR /etc .
Site-wide configuration files may be placed here or in
.IR /usr/etc .
Nevertheless, programs should always look for these files in
.I /etc
and you may have links for these files to
.IR /usr/etc .
.TP
.I /etc/opt
Host-specific configuration files for add-on applications installed
in
.IR /opt .
.TP
.I /etc/sgml
This directory contains the configuration files for SGML (optional).
.TP
.I /etc/skel
When a new user account is created, files from this directory are
usually copied into the user's home directory.
.TP
.I /etc/X11
Configuration files for the X11 window system (optional).
.TP
.I /etc/xml
This directory contains the configuration files for XML (optional).
.TP
.I /home
On machines with home directories for users, these are usually beneath
this directory, directly or not.
The structure of this directory
depends on local administration decisions (optional).
.TP
.I /lib
This directory should hold those shared libraries that are necessary
to boot the system and to run the commands in the root filesystem.
.TP
.I /lib<qual>
These directories are variants of
.I /lib
on system which support more than one binary format requiring separate
libraries (optional).
.TP
.I /lib/modules
Loadable kernel modules (optional).
.TP
.I /lost+found
This directory contains items lost in the filesystem.
These items are usually chunks of files mangled as a consequence of
a faulty disk or a system crash.
.TP
.I /media
This directory contains mount points for removable media such as CD
and DVD disks or USB sticks.
On systems where more than one device exists
for mounting a certain type of media,
mount directories can be created by appending a digit
to the name of those available above starting with '0',
but the unqualified name must also exist.
.TP
.I /media/floppy[1\-9]
Floppy drive (optional).
.TP
.I /media/cdrom[1\-9]
CD-ROM drive (optional).
.TP
.I /media/cdrecorder[1\-9]
CD writer (optional).
.TP
.I /media/zip[1\-9]
Zip drive (optional).
.TP
.I /media/usp[1\-9]
USB drive (optional).
.TP
.I /mnt
This directory is a mount point for a temporarily mounted filesystem.
In some distributions,
.I /mnt
contains subdirectories intended to be used as mount points for several
temporary filesystems.
.TP
.I /opt
This directory should contain add-on packages that contain static files.
.TP
.I /proc
This is a mount point for the
.I proc
filesystem, which provides information about running processes and
the kernel.
This pseudo-filesystem is described in more detail in
.BR proc (5).
.TP
.I /root
This directory is usually the home directory for the root user (optional).
.TP
.I /sbin
Like
.IR /bin ,
this directory holds commands needed to boot the system, but which are
usually not executed by normal users.
.TP
.I /srv
This directory contains site-specific data that is served by this system.
.TP
.I /sys
This is a mount point for the sysfs filesystem, which provides information
about the kernel like
.IR /proc ,
but better structured, following the formalism of kobject infrastructure.
.TP
.I /tmp
This directory contains temporary files which may be deleted with no
notice, such as by a regular job or at system boot up.
.TP
.I /usr
This directory is usually mounted from a separate partition.
It should hold only sharable, read-only data, so that it can be mounted
by various machines running Linux.
.TP
.I /usr/X11R6
The X\-Window system, version 11 release 6 (optional).
.TP
.I /usr/X11R6/bin
Binaries which belong to the X\-Window system; often, there is a
symbolic link from the more traditional
.I /usr/bin/X11
to here.
.TP
.I /usr/X11R6/lib
Data files associated with the X\-Window system.
.TP
.I /usr/X11R6/lib/X11
These contain miscellaneous files needed to run X;  Often, there is a
symbolic link from
.I /usr/lib/X11
to this directory.
.TP
.I /usr/X11R6/include/X11
Contains include files needed for compiling programs using the X11
window system.
Often, there is a symbolic link from
.I /usr/include/X11
to this directory.
.TP
.I /usr/bin
This is the primary directory for executable programs.
Most programs
executed by normal users which are not needed for booting or for
repairing the system and which are not installed locally should be
placed in this directory.
.TP
.I /usr/bin/mh
Commands for the MH mail handling system (optional).
.TP
.I /usr/bin/X11
is the traditional place to look for X11 executables; on Linux, it
usually is a symbolic link to
.IR /usr/X11R6/bin .
.TP
.I /usr/dict
Replaced by
.IR /usr/share/dict .
.TP
.I /usr/doc
Replaced by
.IR /usr/share/doc .
.TP
.I /usr/etc
Site-wide configuration files to be shared between several machines
may be stored in this directory.
However, commands should always
reference those files using the
.I /etc
directory.
Links from files in
.I /etc
should point to the appropriate files in
.IR /usr/etc .
.TP
.I /usr/games
Binaries for games and educational programs (optional).
.TP
.I /usr/include
Include files for the C compiler.
.TP
.I /usr/include/bsd
BSD compatibility include files (optional).
.TP
.I /usr/include/X11
Include files for the C compiler and the X\-Window system.
This is
usually a symbolic link to
.IR /usr/X11R6/include/X11 .
.TP
.I /usr/include/asm
Include files which declare some assembler functions.
This used to be a
symbolic link to
.IR /usr/src/linux/include/asm .
.TP
.I /usr/include/linux
This contains information which may change from system release to
system release and used to be a symbolic link to
.I /usr/src/linux/include/linux
to get at operating-system-specific information.

(Note that one should have include files there that work correctly with
the current libc and in user space.
However, Linux kernel source is not
designed to be used with user programs and does not know anything
about the libc you are using.
It is very likely that things will break
if you let
.I /usr/include/asm
and
.I /usr/include/linux
point at a random kernel tree.
Debian systems don't do this
and use headers from a known good kernel
version, provided in the libc*-dev package.)
.TP
.I /usr/include/g++
Include files to use with the GNU C++ compiler.
.TP
.I /usr/lib
Object libraries, including dynamic libraries, plus some executables
which usually are not invoked directly.
More complicated programs may
have whole subdirectories there.
.TP
.I /usr/lib<qual>
These directories are variants of
.I /usr/lib
on system which support more than one binary format requiring separate
libraries, except that the symbolic link
.I /usr/lib<qual>/X11
is not required (optional).
.TP
.I /usr/lib/X11
The usual place for data files associated with X programs, and
configuration files for the X system itself.
On Linux, it usually is
a symbolic link to
.IR /usr/X11R6/lib/X11 .
.TP
.I /usr/lib/gcc-lib
contains executables and include files for the GNU C compiler,
.BR gcc (1).
.TP
.I /usr/lib/groff
Files for the GNU groff document formatting system.
.TP
.I /usr/lib/uucp
Files for
.BR uucp (1).
.TP
.I /usr/local
This is where programs which are local to the site typically go.
.TP
.I /usr/local/bin
Binaries for programs local to the site.
.TP
.I /usr/local/doc
Local documentation.
.TP
.I /usr/local/etc
Configuration files associated with locally installed programs.
.TP
.I /usr/local/games
Binaries for locally installed games.
.TP
.I /usr/local/lib
Files associated with locally installed programs.
.TP
.I /usr/local/lib<qual>
These directories are variants of
.I /usr/local/lib
on system which support more than one binary format requiring separate
libraries (optional).
.TP
.I /usr/local/include
Header files for the local C compiler.
.TP
.I /usr/local/info
Info pages associated with locally installed programs.
.TP
.I /usr/local/man
Man pages associated with locally installed programs.
.TP
.I /usr/local/sbin
Locally installed programs for system administration.
.TP
.I /usr/local/share
Local application data that can be shared among different architectures
of the same OS.
.TP
.I /usr/local/src
Source code for locally installed software.
.TP
.I /usr/man
Replaced by
.IR /usr/share/man .
.TP
.I /usr/sbin
This directory contains program binaries for system administration
which are not essential for the boot process, for mounting
.IR /usr ,
or for system repair.
.TP
.I /usr/share
This directory contains subdirectories with specific application data, that
can be shared among different architectures of the same OS.
Often one finds stuff here that used to live in
.I /usr/doc
or
.I /usr/lib
or
.IR /usr/man .
.TP
.I /usr/share/dict
Contains the word lists used by spell checkers (optional).
.TP
.I /usr/share/dict/words
List of English words (optional).
.TP
.I /usr/share/doc
Documentation about installed programs (optional).
.TP
.I /usr/share/games
Static data files for games in
.I /usr/games
(optional).
.TP
.I /usr/share/info
Info pages go here (optional).
.TP
.I /usr/share/locale
Locale information goes here (optional).
.TP
.I /usr/share/man
Manual pages go here in subdirectories according to the man page sections.
.TP
.I /usr/share/man/<locale>/man[1\-9]
These directories contain manual pages for the
specific locale in source code form.
Systems which use a unique language and code set for all manual pages
may omit the <locale> substring.
.TP
.I /usr/share/misc
Miscellaneous data that can be shared among different architectures of the
same OS.
.TP
.I /usr/share/nls
The message catalogs for native language support go here (optional).
.TP
.I /usr/share/sgml
Files for SGML (optional).
.TP
.I /usr/share/sgml/docbook
DocBook DTD (optional).
.TP
.I /usr/share/sgml/tei
TEI DTD (optional).
.TP
.I /usr/share/sgml/html
HTML DTD (optional).
.TP
.I /usr/share/sgml/mathtml
MathML DTD (optional).
.TP
.I /usr/share/terminfo
The database for terminfo (optional).
.TP
.I /usr/share/tmac
Troff macros that are not distributed with groff (optional).
.TP
.I /usr/share/xml
Files for XML (optional).
.TP
.I /usr/share/xml/docbook
DocBook DTD (optional).
.TP
.I /usr/share/xml/xhtml
XHTML DTD (optional).
.TP
.I /usr/share/xml/mathml
MathML DTD (optional).
.TP
.I /usr/share/zoneinfo
Files for timezone information (optional).
.TP
.I /usr/src
Source files for different parts of the system, included with some packages
for reference purposes.
Don't work here with your own projects, as files
below /usr should be read-only except when installing software (optional).
.TP
.I /usr/src/linux
This was the traditional place for the kernel source.
Some distributions put here the source for the default kernel they ship.
You should probably use another directory when building your own kernel.
.TP
.I /usr/tmp
Obsolete.
This should be a link
to
.IR /var/tmp .
This link is present only for compatibility reasons and shouldn't be used.
.TP
.I /var
This directory contains files which may change in size, such as spool
and log files.
.TP
.I /var/account
Process accounting logs (optional).
.TP
.I /var/adm
This directory is superseded by
.I /var/log
and should be a symbolic link to
.IR /var/log .
.TP
.I /var/backups
Reserved for historical reasons.
.TP
.I /var/cache
Data cached for programs.
.TP
.I /var/cache/fonts
Locally-generated fonts (optional).
.TP
.I /var/cache/man
Locally-formatted man pages (optional).
.TP
.I /var/cache/www
WWW proxy or cache data (optional).
.TP
.I /var/cache/<package>
Package specific cache data (optional).
.TP
.IR /var/catman/cat[1\-9] " or " /var/cache/man/cat[1\-9]
These directories contain preformatted manual pages according to their
man page section.
(The use of preformatted manual pages is deprecated.)
.TP
.I /var/crash
System crash dumps (optional).
.TP
.I /var/cron
Reserved for historical reasons.
.TP
.I /var/games
Variable game data (optional).
.TP
.I /var/lib
Variable state information for programs.
.TP
.I /var/lib/hwclock
State directory for hwclock (optional).
.TP
.I /var/lib/misc
Miscellaneous state data.
.TP
.I /var/lib/xdm
X display manager variable data (optional).
.TP
.I /var/lib/<editor>
Editor backup files and state (optional).
.TP
.I /var/lib/<name>
These directories must be used for all distribution packaging support.
.TP
.I /var/lib/<package>
State data for packages and subsystems (optional).
.TP
.I /var/lib/<pkgtool>
Packaging support files (optional).
.TP
.I /var/local
Variable data for
.IR /usr/local .
.TP
.I /var/lock
Lock files are placed in this directory.
The naming convention for
device lock files is
.I LCK..<device>
where
.I <device>
is the device's name in the filesystem.
The format used is that of HDU UUCP lock files, that is, lock files
contain a PID as a 10-byte ASCII decimal number, followed by a newline
character.
.TP
.I /var/log
Miscellaneous log files.
.TP
.I /var/opt
Variable data for
.IR /opt .
.TP
.I /var/mail
Users' mailboxes.
Replaces
.IR /var/spool/mail .
.TP
.I /var/msgs
Reserved for historical reasons.
.TP
.I /var/preserve
Reserved for historical reasons.
.TP
.I /var/run
Run-time variable files, like files holding process identifiers (PIDs)
and logged user information
.IR (utmp) .
Files in this directory are usually cleared when the system boots.
.TP
.I /var/spool
Spooled (or queued) files for various programs.
.TP
.I /var/spool/at
Spooled jobs for
.BR at (1).
.TP
.I /var/spool/cron
Spooled jobs for
.BR cron (8).
.TP
.I /var/spool/lpd
Spooled files for printing (optional).
.TP
.I /var/spool/lpd/printer
Spools for a specific printer (optional).
.TP
.I /var/spool/mail
Replaced by
.IR /var/mail .
.TP
.I /var/spool/mqueue
Queued outgoing mail (optional).
.TP
.I /var/spool/news
Spool directory for news (optional).
.TP
.I /var/spool/rwho
Spooled files for
.BR rwhod (8)
(optional).
.TP
.I /var/spool/smail
Spooled files for the
.BR smail (1)
mail delivery program.
.TP
.I /var/spool/uucp
Spooled files for
.BR uucp (1)
(optional).
.TP
.I /var/tmp
Like
.IR /tmp ,
this directory holds temporary files stored for an unspecified duration.
.TP
.I /var/yp
Database files for NIS,
formerly known as the Sun Yellow Pages (YP).
.SH CONFORMING TO
The Filesystem Hierarchy Standard, Version 2.3
.UR http://www.pathname.com\:/fhs/
.UE .
.SH BUGS
This list is not exhaustive; different systems may be configured
differently.
.SH SEE ALSO
.BR find (1),
.BR ln (1),
.BR proc (5),
.BR mount (8)

The Filesystem Hierarchy Standard
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1987, 1990, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" %%%LICENSE_START(BSD_4_CLAUSE_UCB)
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\" %%%LICENSE_END
.\"
.\"     @(#)hostname.7	8.2 (Berkeley) 12/30/93
.\" $FreeBSD: src/share/man/man7/hostname.7,v 1.7 2004/07/03 18:29:23 ru Exp $
.\"
.\" 2008-06-11, mtk, Taken from FreeBSD 6.2 and modified for Linux.
.\"
.TH HOSTNAME 7 2010-11-07 "Linux" "Linux Programmer's Manual"
.SH NAME
hostname \- hostname resolution description
.SH DESCRIPTION
Hostnames are domains, where a domain is a hierarchical, dot-separated
list of subdomains; for example, the machine monet, in the Berkeley
subdomain of the EDU domain would be represented as "monet.Berkeley.EDU".

Hostnames are often used with network client and server programs,
which must generally translate the name to an address for use.
(This task is generally performed by either
.BR getaddrinfo (3)
or the obsolete
.BR gethostbyname (3).)
Hostnames are resolved by the Internet name resolver in the following
fashion.

If the name consists of a single component, that is, contains no dot,
and if the environment variable
.B HOSTALIASES
is set to the name of a file,
that file is searched for any string matching the input hostname.
The file should consist of lines made up of two white-space separated strings,
the first of which is the hostname alias,
and the second of which is the complete hostname
to be substituted for that alias.
If a case-insensitive match is found between the hostname to be resolved
and the first field of a line in the file, the substituted name is looked
up with no further processing.

If the input name ends with a trailing dot,
the trailing dot is removed,
and the remaining name is looked up with no further processing.

If the input name does not end with a trailing dot, it is looked up
by searching through a list of domains until a match is found.
The default search list includes first the local domain,
then its parent domains with at least 2 name components (longest first).
For example,
in the domain CS.Berkeley.EDU, the name lithium.CChem will be checked first
as lithium.CChem.CS.Berkeley.EDU and then as lithium.CChem.Berkeley.EDU.
Lithium.CChem.EDU will not be tried, as there is only one component
remaining from the local domain.
The search path can be changed from the default
by a system-wide configuration file (see
.BR resolver (5)).
.SH SEE ALSO
.BR gethostbyname (3),
.BR resolver (5),
.BR mailaddr (7),
.BR named (8)
.\" .SH HISTORY
.\" Hostname appeared in
.\" 4.2BSD.
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" This man page is Copyright (C) 1999 Andi Kleen <ak@muc.de>.
.\"
.\" %%%LICENSE_START(VERBATIM_ONE_PARA)
.\" Permission is granted to distribute possibly modified copies
.\" of this page provided the header is included verbatim,
.\" and in case of nontrivial modification author and date
.\" of the modification is added to the header.
.\" %%%LICENSE_END
.\"
.\" $Id: icmp.7,v 1.6 2000/08/14 08:03:45 ak Exp $
.\"
.TH ICMP 7 2015-04-19 "Linux" "Linux Programmer's Manual"
.SH NAME
icmp \- Linux IPv4 ICMP kernel module.
.SH DESCRIPTION
This kernel protocol module implements the Internet Control
Message Protocol defined in RFC\ 792.
It is used to signal error conditions and for diagnosis.
The user doesn't interact directly with this module;
instead it communicates with the other protocols in the kernel
and these pass the ICMP errors to the application layers.
The kernel ICMP module also answers ICMP requests.
.PP
A user protocol may receive ICMP packets for all local sockets by opening
a raw socket with the protocol
.BR IPPROTO_ICMP .
See
.BR raw (7)
for more information.
The types of ICMP packets passed to the socket can be filtered using the
.B ICMP_FILTER
socket option.
ICMP packets are always processed by the kernel too, even
when passed to a user socket.
.LP
Linux limits the rate of ICMP error packets to each destination.
.B ICMP_REDIRECT
and
.B ICMP_DEST_UNREACH
are also limited by the destination route of the incoming packets.
.SS /proc interfaces
ICMP supports a set of
.I /proc
interfaces to configure some global IP parameters.
The parameters can be accessed by reading or writing files in the directory
.IR /proc/sys/net/ipv4/ .
Most of these parameters are rate limitations for specific ICMP types.
Linux 2.2 uses a token bucket filter to limit ICMPs.
.\" FIXME . better description needed
The value is the timeout in jiffies until the token bucket filter is
cleared after a burst.
A jiffy is a system dependent unit, usually 10ms on i386 and
about 1ms on alpha and ia64.
.TP
.IR icmp_destunreach_rate " (Linux 2.2 to 2.4.9)"
.\" Precisely: from 2.1.102
Maximum rate to send ICMP Destination Unreachable packets.
This limits the rate at which packets are sent to any individual
route or destination.
The limit does not affect sending of
.B ICMP_FRAG_NEEDED
packets needed for path MTU discovery.
.TP
.IR icmp_echo_ignore_all " (since Linux 2.2)"
.\" Precisely: 2.1.68
If this value is nonzero, Linux will ignore all
.B ICMP_ECHO
requests.
.TP
.IR icmp_echo_ignore_broadcasts " (since Linux 2.2)"
.\" Precisely: from 2.1.68
If this value is nonzero, Linux will ignore all
.B ICMP_ECHO
packets sent to broadcast addresses.
.TP
.IR icmp_echoreply_rate " (Linux 2.2 to 2.4.9)"
.\" Precisely: from 2.1.102
Maximum rate for sending
.B ICMP_ECHOREPLY
packets in response to
.B ICMP_ECHOREQUEST
packets.
.TP
.IR icmp_errors_use_inbound_ifaddr " (Boolean; default: disabled; since Linux 2.6.12)"
.\" The following taken from 2.6.28-rc4 Documentation/networking/ip-sysctl.txt
If disabled, ICMP error messages are sent with the primary address of
the exiting interface.

If enabled, the message will be sent with the primary address of
the interface that received the packet that caused the ICMP error.
This is the behavior that many network administrators will expect from
a router.
And it can make debugging complicated network layouts much easier.

Note that if no primary address exists for the interface selected,
then the primary address of the first non-loopback interface that
has one will be used regardless of this setting.
.TP
.IR icmp_ignore_bogus_error_responses " (Boolean; default: disabled; since Linux 2.2)"
.\" precisely: since 2.1.32
.\" The following taken from 2.6.28-rc4 Documentation/networking/ip-sysctl.txt
Some routers violate RFC1122 by sending bogus responses to broadcast frames.
Such violations are normally logged via a kernel warning.
If this parameter is enabled, the kernel will not give such warnings,
which will avoid log file clutter.
.TP
.IR icmp_paramprob_rate " (Linux 2.2 to 2.4.9)"
.\" Precisely: from 2.1.102
Maximum rate for sending
.B ICMP_PARAMETERPROB
packets.
These packets are sent when a packet arrives with an invalid IP header.
.TP
.IR icmp_ratelimit " (integer; default: 1000; since Linux 2.4.10)"
.\" The following taken from 2.6.28-rc4 Documentation/networking/ip-sysctl.txt
Limit the maximum rates for sending ICMP packets whose type matches
.IR icmp_ratemask
(see below) to specific targets.
0 to disable any limiting,
otherwise the minimum space between responses in milliseconds.
.TP
.IR icmp_ratemask " (integer; default: see below; since Linux 2.4.10)"
.\" The following taken from 2.6.28-rc4 Documentation/networking/ip-sysctl.txt
Mask made of ICMP types for which rates are being limited.

Significant bits: IHGFEDCBA9876543210
.br
Default mask:     0000001100000011000 (0x1818)

Bit definitions (see the Linux kernel source file
.IR include/linux/icmp.h ):

.RS 12
.TS
l l.
0 Echo Reply
3 Destination Unreachable *
4 Source Quench *
5 Redirect
8 Echo Request
B Time Exceeded *
C Parameter Problem *
D Timestamp Request
E Timestamp Reply
F Info Request
G Info Reply
H Address Mask Request
I Address Mask Reply
.TE
.RE

The bits marked with an asterisk are rate limited by default
(see the default mask above).
.TP
.IR icmp_timeexceed_rate " (Linux 2.2 to 2.4.9)"
Maximum rate for sending
.B ICMP_TIME_EXCEEDED
packets.
These packets are
sent to prevent loops when a packet has crossed too many hops.
.TP
.IR ping_group_range " (two integers; default: see below; since Linux 2.6.39)"
Range of the group IDs (minimum and maximum group IDs, inclusive)
ithat are allowed to create ICMP Echo sockets.
The default is "1 0", which
means no group is allowed to create ICMP Echo sockets.
.SH VERSIONS
Support for the
.B ICMP_ADDRESS
request was removed in 2.2.
.PP
Support for
.B ICMP_SOURCE_QUENCH
was removed in Linux 2.2.
.SH NOTES
As many other implementations don't support
.B IPPROTO_ICMP
raw sockets, this feature
should not be relied on in portable programs.
.\" not really true ATM
.\" .PP
.\" Linux ICMP should be compliant to RFC 1122.
.PP
.B ICMP_REDIRECT
packets are not sent when Linux is not acting as a router.
They are also accepted only from the old gateway defined in the
routing table and the redirect routes are expired after some time.
.PP
The 64-bit timestamp returned by
.B ICMP_TIMESTAMP
is in milliseconds since the Epoch, 1970-01-01 00:00:00 +0000 (UTC).
.PP
Linux ICMP internally uses a raw socket to send ICMPs.
This raw socket may appear in
.BR netstat (8)
output with a zero inode.
.SH SEE ALSO
.BR ip (7)
.PP
RFC\ 792 for a description of the ICMP protocol.
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
'\" t
.\" Copyright (C) 2006, 2014 Michael Kerrisk <mtk.manpages@gmail.com>
.\" Copyright (C) 2014 Heinrich Schuchardt <xypron.glpk@gmx.de>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH INOTIFY 7 2015-05-07 "Linux" "Linux Programmer's Manual"
.SH NAME
inotify \- monitoring filesystem events
.SH DESCRIPTION
The
.I inotify
API provides a mechanism for monitoring filesystem events.
Inotify can be used to monitor individual files,
or to monitor directories.
When a directory is monitored, inotify will return events
for the directory itself, and for files inside the directory.

The following system calls are used with this API:
.IP * 3
.BR inotify_init (2)
creates an inotify instance and returns a file descriptor
referring to the inotify instance.
The more recent
.BR inotify_init1 (2)
is like
.BR inotify_init (2),
but has a
.IR flags
argument that provides access to some extra functionality.
.IP *
.BR inotify_add_watch (2)
manipulates the "watch list" associated with an inotify instance.
Each item ("watch") in the watch list specifies the pathname of
a file or directory,
along with some set of events that the kernel should monitor for the
file referred to by that pathname.
.BR inotify_add_watch (2)
either creates a new watch item, or modifies an existing watch.
Each watch has a unique "watch descriptor", an integer
returned by
.BR inotify_add_watch (2)
when the watch is created.
.IP *
When events occur for monitored files and directories,
those events are made available to the application as structured data that
can be read from the inotify file descriptor using
.BR read (2)
(see below).
.IP *
.BR inotify_rm_watch (2)
removes an item from an inotify watch list.
.IP *
When all file descriptors referring to an inotify
instance have been closed (using
.BR close (2)),
the underlying object and its resources are
freed for reuse by the kernel;
all associated watches are automatically freed.
.PP
With careful programming,
an application can use inotify to efficiently monitor and cache
the state of a set of filesystem objects.
However, robust applications should allow for the fact that bugs
in the monitoring logic or races of the kind described below
may leave the cache inconsistent with the filesystem state.
It is probably wise to do some consistency checking,
and rebuild the cache when inconsistencies are detected.
.SS Reading events from an inotify file descriptor
To determine what events have occurred, an application
.BR read (2)s
from the inotify file descriptor.
If no events have so far occurred, then,
assuming a blocking file descriptor,
.BR read (2)
will block until at least one event occurs
(unless interrupted by a signal,
in which case the call fails with the error
.BR EINTR ;
see
.BR signal (7)).

Each successful
.BR read (2)
returns a buffer containing one or more of the following structures:
.in +4n
.nf

struct inotify_event {
    int      wd;       /* Watch descriptor */
.\" FIXME . The type of the 'wd' field should probably be "int32_t".
.\" I submitted a patch to fix this.  See the LKML thread
.\" "[patch] Fix type errors in inotify interfaces", 18 Nov 2008
.\" Glibc bug filed: http://sources.redhat.com/bugzilla/show_bug.cgi?id=7040
    uint32_t mask;     /* Mask describing event */
    uint32_t cookie;   /* Unique cookie associating related
                          events (for rename(2)) */
    uint32_t len;      /* Size of \fIname\fP field */
    char     name[];   /* Optional null-terminated name */
};
.fi
.in

.I wd
identifies the watch for which this event occurs.
It is one of the watch descriptors returned by a previous call to
.BR inotify_add_watch (2).

.I mask
contains bits that describe the event that occurred (see below).

.I cookie
is a unique integer that connects related events.
Currently this is used only for rename events, and
allows the resulting pair of
.B IN_MOVED_FROM
and
.B IN_MOVED_TO
events to be connected by the application.
For all other event types,
.I cookie
is set to 0.

The
.I name
field is present only when an event is returned
for a file inside a watched directory;
it identifies the file pathname relative to the watched directory.
This pathname is null-terminated,
and may include further null bytes (\(aq\\0\(aq) to align subsequent reads to a
suitable address boundary.

The
.I len
field counts all of the bytes in
.IR name ,
including the null bytes;
the length of each
.I inotify_event
structure is thus
.IR "sizeof(struct inotify_event)+len" .

The behavior when the buffer given to
.BR read (2)
is too small to return information about the next event depends
on the kernel version: in kernels before 2.6.21,
.BR read (2)
returns 0; since kernel 2.6.21,
.BR read (2)
fails with the error
.BR EINVAL .
Specifying a buffer of size

    sizeof(struct inotify_event) + NAME_MAX + 1

will be sufficient to read at least one event.
.SS inotify events
The
.BR inotify_add_watch (2)
.I mask
argument and the
.I mask
field of the
.I inotify_event
structure returned when
.BR read (2)ing
an inotify file descriptor are both bit masks identifying
inotify events.
The following bits can be specified in
.I mask
when calling
.BR inotify_add_watch (2)
and may be returned in the
.I mask
field returned by
.BR read (2):
.RS 4
.TP
.BR IN_ACCESS " (+)"
File was accessed (e.g.,
.BR read (2),
.BR execve (2)).
.TP
.BR IN_ATTRIB " (*)"
Metadata changed\(emfor example, permissions (e.g.,
.BR chmod (2)),
timestamps (e.g.,
.BR utimensat (2)),
extended attributes
.RB ( setxattr (2)),
link count (since Linux 2.6.25; e.g.,
for the target of
.BR link (2)
and for
.BR unlink (2)),
and user/group ID (e.g.,
.BR chown (2)).
.TP
.BR IN_CLOSE_WRITE " (+)"
File opened for writing was closed.
.TP
.BR IN_CLOSE_NOWRITE " (*)"
File or directory not opened for writing was closed.
.TP
.BR IN_CREATE " (+)"
File/directory created in watched directory (e.g.,
.BR open (2)
.BR O_CREAT ,
.BR mkdir (2),
.BR link (2),
.BR symlink (2),
.BR bind (2)
on a UNIX domain socket).
.TP
.BR IN_DELETE " (+)"
File/directory deleted from watched directory.
.TP
.B IN_DELETE_SELF
Watched file/directory was itself deleted.
(This event also occurs if an object is moved to another filesystem,
since
.BR mv (1)
in effect copies the file to the other filesystem and
then deletes it from the original filesystem.)
In addition, an
.B IN_IGNORED
event will subsequently be generated for the watch descriptor.
.TP
.BR IN_MODIFY " (+)"
File was modified (e.g.,
.BR write (2),
.BR truncate (2)).
.TP
.B IN_MOVE_SELF
Watched file/directory was itself moved.
.TP
.BR IN_MOVED_FROM " (+)"
Generated for the directory containing the old filename
when a file is renamed.
.TP
.BR IN_MOVED_TO " (+)"
Generated for the directory containing the new filename
when a file is renamed.
.TP
.BR IN_OPEN " (*)"
File or directory was opened.
.RE
.PP
When monitoring a directory:
.IP * 3
the events marked above with an asterisk (*) can occur both
for the directory itself and for objects inside the directory; and
.IP *
the events marked with a plus sign (+) occur only for objects
inside the directory (not for the directory itself).
.PP
When events are generated for objects inside a watched directory, the
.I name
field in the returned
.I inotify_event
structure identifies the name of the file within the directory.
.PP
The
.B IN_ALL_EVENTS
macro is defined as a bit mask of all of the above events.
This macro can be used as the
.I mask
argument when calling
.BR inotify_add_watch (2).

Two additional convenience macros are defined:
.RS 4
.TP
.BR IN_MOVE
Equates to
.BR "IN_MOVED_FROM | IN_MOVED_TO" .
.TP
.BR IN_CLOSE
Equates to
.BR "IN_CLOSE_WRITE | IN_CLOSE_NOWRITE" .
.RE
.PP
The following further bits can be specified in
.I mask
when calling
.BR inotify_add_watch (2):
.RS 4
.TP
.BR IN_DONT_FOLLOW " (since Linux 2.6.15)"
Don't dereference
.I pathname
if it is a symbolic link.
.TP
.BR IN_EXCL_UNLINK " (since Linux 2.6.36)"
.\" commit 8c1934c8d70b22ca8333b216aec6c7d09fdbd6a6
By default, when watching events on the children of a directory,
events are generated for children even after they have been unlinked
from the directory.
This can result in large numbers of uninteresting events for
some applications (e.g., if watching
.IR /tmp ,
in which many applications create temporary files whose
names are immediately unlinked).
Specifying
.B IN_EXCL_UNLINK
changes the default behavior,
so that events are not generated for children after
they have been unlinked from the watched directory.
.TP
.B IN_MASK_ADD
If a watch instance already exists for the filesystem object corresponding to
.IR pathname ,
add (OR) the events in
.I mask
to the watch mask (instead of replacing the mask).
.TP
.B IN_ONESHOT
Monitor the filesystem object corresponding to
.I pathname
for one event, then remove from
watch list.
.TP
.BR IN_ONLYDIR " (since Linux 2.6.15)"
Only watch
.I pathname
if it is a directory.
Using this flag provides an application with a race-free way of
ensuring that the monitored object is a directory.
.RE
.PP
The following bits may be set in the
.I mask
field returned by
.BR read (2):
.RS 4
.TP
.B IN_IGNORED
Watch was removed explicitly
.RB ( inotify_rm_watch (2))
or automatically (file was deleted, or filesystem was unmounted).
See also BUGS.
.TP
.B IN_ISDIR
Subject of this event is a directory.
.TP
.B IN_Q_OVERFLOW
Event queue overflowed
.RI ( wd
is \-1 for this event).
.TP
.B IN_UNMOUNT
Filesystem containing watched object was unmounted.
In addition, an
.B IN_IGNORED
event will subsequently be generated for the watch descriptor.
.RE
.SS Examples
Suppose an application is watching the directory
.I dir
and the file
.IR dir/myfile
for all events.
The examples below show some events that will be generated
for these two objects.
.RS 4
.TP
fd = open("dir/myfile", O_RDWR);
Generates
.B IN_OPEN
events for both
.I dir
and
.IR dir/myfile .
.TP
read(fd, buf, count);
Generates
.B IN_ACCESS
events for both
.I dir
and
.IR dir/myfile .
.TP
write(fd, buf, count);
Generates
.B IN_MODIFY
events for both
.I dir
and
.IR dir/myfile .
.TP
fchmod(fd, mode);
Generates
.B IN_ATTRIB
events for both
.I dir
and
.IR dir/myfile .
.TP
close(fd);
Generates
.B IN_CLOSE_WRITE
events for both
.I dir
and
.IR dir/myfile .
.RE
.PP
Suppose an application is watching the directories
.I dir1
and
.IR dir2 ,
and the file
.IR dir1/myfile .
The following examples show some events that may be generated.
.RS 4
.TP
link("dir1/myfile", "dir2/new");
Generates an
.B IN_ATTRIB
event for
.IR myfile
and an
.B IN_CREATE
event for
.IR dir2 .
.TP
rename("dir1/myfile", "dir2/myfile");
Generates an
.B IN_MOVED_FROM
event for
.IR dir1 ,
an
.B IN_MOVED_TO
event for
.IR dir2 ,
and an
.B IN_MOVE_SELF
event for
.IR myfile .
The
.B IN_MOVED_FROM
and
.B IN_MOVED_TO
events will have the same
.I cookie
value.
.RE
.PP
Suppose that
.IR dir1/xx
and
.IR dir2/yy
are (the only) links to the same file, and an application is watching
.IR dir1 ,
.IR dir2 ,
.IR dir1/xx ,
and
.IR dir2/yy .
Executing the following calls in the order given below will generate
the following events:
.RS 4
.TP
unlink("dir2/yy");
Generates an
.BR IN_ATTRIB
event for
.IR xx
(because its link count changes)
and an
.B IN_DELETE
event for
.IR dir2 .
.TP
unlink("dir1/xx");
Generates
.BR IN_ATTRIB ,
.BR IN_DELETE_SELF ,
and
.BR IN_IGNORED
events for
.IR xx ,
and an
.BR IN_DELETE
event for
.IR dir1 .
.RE
.PP
Suppose an application is watching the directory
.IR dir
and (the empty) directory
.IR dir/subdir .
The following examples show some events that may be generated.
.RS 4
.TP
mkdir("dir/new", mode);
Generates an
.B "IN_CREATE | IN_ISDIR"
event for
.IR dir .
.TP
rmdir("dir/subdir");
Generates
.B IN_DELETE_SELF
and
.B IN_IGNORED
events for
.IR subdir ,
and an
.B "IN_DELETE | IN_ISDIR"
event for
.IR dir .
.RE
.SS /proc interfaces
The following interfaces can be used to limit the amount of
kernel memory consumed by inotify:
.TP
.I /proc/sys/fs/inotify/max_queued_events
The value in this file is used when an application calls
.BR inotify_init (2)
to set an upper limit on the number of events that can be
queued to the corresponding inotify instance.
Events in excess of this limit are dropped, but an
.B IN_Q_OVERFLOW
event is always generated.
.TP
.I /proc/sys/fs/inotify/max_user_instances
This specifies an upper limit on the number of inotify instances
that can be created per real user ID.
.TP
.I /proc/sys/fs/inotify/max_user_watches
This specifies an upper limit on the number of watches
that can be created per real user ID.
.SH VERSIONS
Inotify was merged into the 2.6.13 Linux kernel.
The required library interfaces were added to glibc in version 2.4.
.RB ( IN_DONT_FOLLOW ,
.BR IN_MASK_ADD ,
and
.B IN_ONLYDIR
were added in glibc version 2.5.)
.SH CONFORMING TO
The inotify API is Linux-specific.
.SH NOTES
Inotify file descriptors can be monitored using
.BR select (2),
.BR poll (2),
and
.BR epoll (7).
When an event is available, the file descriptor indicates as readable.

Since Linux 2.6.25,
signal-driven I/O notification is available for inotify file descriptors;
see the discussion of
.B F_SETFL
(for setting the
.B O_ASYNC
flag),
.BR F_SETOWN ,
and
.B F_SETSIG
in
.BR fcntl (2).
The
.I siginfo_t
structure (described in
.BR sigaction (2))
that is passed to the signal handler has the following fields set:
.IR si_fd
is set to the inotify file descriptor number;
.IR si_signo
is set to the signal number;
.IR si_code
is set to
.BR POLL_IN ;
and
.B POLLIN
is set in
.IR si_band .

If successive output inotify events produced on the
inotify file descriptor are identical (same
.IR wd ,
.IR mask ,
.IR cookie ,
and
.IR name ),
then they are coalesced into a single event if the
older event has not yet been read (but see BUGS).
This reduces the amount of kernel memory required for the event queue,
but also means that an application can't use inotify to reliably count
file events.

The events returned by reading from an inotify file descriptor
form an ordered queue.
Thus, for example, it is guaranteed that when renaming from
one directory to another, events will be produced in the
correct order on the inotify file descriptor.

The
.B FIONREAD
.BR ioctl (2)
returns the number of bytes available to read from an
inotify file descriptor.
.SS Limitations and caveats
The inotify API provides no information about the user or process that
triggered the inotify event.
In particular, there is no easy
way for a process that is monitoring events via inotify
to distinguish events that it triggers
itself from those that are triggered by other processes.

Inotify reports only events that a user-space program triggers through
the filesystem API.
As a result, it does not catch remote events that occur
on network filesystems.
(Applications must fall back to polling the filesystem
to catch such events.)
Furthermore, various pseudo-filesystems such as
.IR /proc ,
.IR /sys ,
and
.IR /dev/pts
are not monitorable with inotify.

The inotify API does not report file accesses and modifications that
may occur because of
.BR mmap (2),
.BR msync (2),
and
.BR munmap (2).

The inotify API identifies affected files by filename.
However, by the time an application processes an inotify event,
the filename may already have been deleted or renamed.

The inotify API identifies events via watch descriptors.
It is the application's responsibility to cache a mapping
(if one is needed) between watch descriptors and pathnames.
Be aware that directory renamings may affect multiple cached pathnames.

Inotify monitoring of directories is not recursive:
to monitor subdirectories under a directory,
additional watches must be created.
This can take a significant amount time for large directory trees.

If monitoring an entire directory subtree,
and a new subdirectory is created in that tree or an existing directory
is renamed into that tree,
be aware that by the time you create a watch for the new subdirectory,
new files (and subdirectories) may already exist inside the subdirectory.
Therefore, you may want to scan the contents of the subdirectory
immediately after adding the watch (and, if desired,
recursively add watches for any subdirectories that it contains).

Note that the event queue can overflow.
In this case, events are lost.
Robust applications should handle the possibility of
lost events gracefully.
For example, it may be necessary to rebuild part or all of
the application cache.
(One simple, but possibly expensive,
approach is to close the inotify file descriptor, empty the cache,
create a new inotify file descriptor,
and then re-create watches and cache entries
for the objects to be monitored.)
.SS Dealing with rename() events
As noted above, the
.B IN_MOVED_FROM
and
.B IN_MOVED_TO
event pair that is generated by
.BR rename (2)
can be matched up via their shared cookie value.
However, the task of matching has some challenges.

These two events are usually consecutive in the event stream available
when reading from the inotify file descriptor.
However, this is not guaranteed.
If multiple processes are triggering events for monitored objects,
then (on rare occasions) an arbitrary number of
other events may appear between the
.B IN_MOVED_FROM
and
.B IN_MOVED_TO
events.
Furthermore, it is not guaranteed that the event pair is atomically
inserted into the queue: there may be a brief interval where the
.B IN_MOVED_FROM
has appeared, but the
.B IN_MOVED_TO
has not.

Matching up the
.B IN_MOVED_FROM
and
.B IN_MOVED_TO
event pair generated by
.BR rename (2)
is thus inherently racy.
(Don't forget that if an object is renamed outside of a monitored directory,
there may not even be an
.BR IN_MOVED_TO
event.)
Heuristic approaches (e.g., assume the events are always consecutive)
can be used to ensure a match in most cases,
but will inevitably miss some cases,
causing the application to perceive the
.B IN_MOVED_FROM
and
.B IN_MOVED_TO
events as being unrelated.
If watch descriptors are destroyed and re-created as a result,
then those watch descriptors will be inconsistent with
the watch descriptors in any pending events.
(Re-creating the inotify file descriptor and rebuilding the cache may
be useful to deal with this scenario.)

Applications should also allow for the possibility that the
.B IN_MOVED_FROM
event was the last event that could fit in the buffer
returned by the current call to
.BR read (2),
and the accompanying
.B IN_MOVED_TO
event might be fetched only on the next
.BR read (2),
which should be done with a (small) timeout to allow for the fact that
insertion of the
.BR IN_MOVED_FROM - IN_MOVED_TO
event pair is not atomic,
and also the possibility that there may not be any
.B IN_MOVED_TO
event.
.SH BUGS
Before Linux 3.19,
.BR fallocate (2)
did not create any inotify events.
Since Linux 3.19,
.\" commit 820c12d5d6c0890bc93dd63893924a13041fdc35
calls to
.BR fallocate (2)
generate
.B IN_MODIFY
events.

.\" FIXME . kernel commit 611da04f7a31b2208e838be55a42c7a1310ae321
.\" implies that unmount events were buggy 2.6.11 to 2.6.36
.\"
In kernels before 2.6.16, the
.B IN_ONESHOT
.I mask
flag does not work.

As originally designed and implemented, the
.B IN_ONESHOT
flag did not cause an
.B IN_IGNORED
event to be generated when the watch was dropped after one event.
However, as an unintended effect of other changes,
since Linux 2.6.36, an
.B IN_IGNORED
event is generated in this case.

Before kernel 2.6.25,
.\" commit 1c17d18e3775485bf1e0ce79575eb637a94494a2
the kernel code that was intended to coalesce successive identical events
(i.e., the two most recent events could potentially be coalesced
if the older had not yet been read)
instead checked if the most recent event could be coalesced with the
.I oldest
unread event.

When a watch descriptor is removed by calling
.BR inotify_rm_watch (2)
(or because a watch file is deleted or the filesystem
that contains it is unmounted),
any pending unread events for that watch descriptor remain available to read.
As watch descriptors are subsequently allocated with
.BR inotify_add_watch (2),
the kernel cycles through the range of possible watch descriptors (0 to
.BR INT_MAX )
incrementally.
When allocating a free watch descriptor, no check is made to see whether that
watch descriptor number has any pending unread events in the inotify queue.
Thus, it can happen that a watch descriptor is reallocated even
when pending unread events exist for a previous incarnation of
that watch descriptor number, with the result that the application
might then read those events and interpret them as belonging to
the file associated with the newly recycled watch descriptor.
In practice, the likelihood of hitting this bug may be extremely low,
since it requires that an application cycle through
.B INT_MAX
watch descriptors,
release a watch descriptor while leaving unread events for that
watch descriptor in the queue,
and then recycle that watch descriptor.
For this reason, and because there have been no reports
of the bug occurring in real-world applications,
as of Linux 3.15,
.\" FIXME . https://bugzilla.kernel.org/show_bug.cgi?id=77111
no kernel changes have yet been made to eliminate this possible bug.
.SH EXAMPLE
The following program demonstrates the usage of the inotify API.
It marks the directories passed as a command-line arguments
and waits for events of type
.BR IN_OPEN ,
.BR IN_CLOSE_NOWRITE
and
.BR IN_CLOSE_WRITE .
.PP
The following output was recorded while editing the file
.I /home/user/temp/foo
and listing directory
.IR /tmp .
Before the file and the directory were opened,
.B IN_OPEN
events occurred.
After the file was closed, an
.B IN_CLOSE_WRITE
event occurred.
After the directory was closed, an
.B IN_CLOSE_NOWRITE
event occurred.
Execution of the program ended when the user pressed the ENTER key.
.SS Example output
.in +4n
.nf
$ \fB./a.out /tmp /home/user/temp\fP
Press enter key to terminate.
Listening for events.
IN_OPEN: /home/user/temp/foo [file]
IN_CLOSE_WRITE: /home/user/temp/foo [file]
IN_OPEN: /tmp/ [directory]
IN_CLOSE_NOWRITE: /tmp/ [directory]

Listening for events stopped.
.fi
.in
.SS Program source
.nf
#include <errno.h>
#include <poll.h>
#include <stdio.h>
#include <stdlib.h>
#include <sys/inotify.h>
#include <unistd.h>

/* Read all available inotify events from the file descriptor 'fd'.
   wd is the table of watch descriptors for the directories in argv.
   argc is the length of wd and argv.
   argv is the list of watched directories.
   Entry 0 of wd and argv is unused. */

static void
handle_events(int fd, int *wd, int argc, char* argv[])
{
    /* Some systems cannot read integer variables if they are not
       properly aligned. On other systems, incorrect alignment may
       decrease performance. Hence, the buffer used for reading from
       the inotify file descriptor should have the same alignment as
       struct inotify_event. */

    char buf[4096]
        __attribute__ ((aligned(__alignof__(struct inotify_event))));
    const struct inotify_event *event;
    int i;
    ssize_t len;
    char *ptr;

    /* Loop while events can be read from inotify file descriptor. */

    for (;;) {

        /* Read some events. */

        len = read(fd, buf, sizeof buf);
        if (len == \-1 && errno != EAGAIN) {
            perror("read");
            exit(EXIT_FAILURE);
        }

        /* If the nonblocking read() found no events to read, then
           it returns \-1 with errno set to EAGAIN. In that case,
           we exit the loop. */

        if (len <= 0)
            break;

        /* Loop over all events in the buffer */

        for (ptr = buf; ptr < buf + len;
                ptr += sizeof(struct inotify_event) + event\->len) {

            event = (const struct inotify_event *) ptr;

            /* Print event type */

            if (event\->mask & IN_OPEN)
                printf("IN_OPEN: ");
            if (event\->mask & IN_CLOSE_NOWRITE)
                printf("IN_CLOSE_NOWRITE: ");
            if (event\->mask & IN_CLOSE_WRITE)
                printf("IN_CLOSE_WRITE: ");

            /* Print the name of the watched directory */

            for (i = 1; i < argc; ++i) {
                if (wd[i] == event\->wd) {
                    printf("%s/", argv[i]);
                    break;
                }
            }

            /* Print the name of the file */

            if (event\->len)
                printf("%s", event\->name);

            /* Print type of filesystem object */

            if (event\->mask & IN_ISDIR)
                printf(" [directory]\\n");
            else
                printf(" [file]\\n");
        }
    }
}

int
main(int argc, char* argv[])
{
    char buf;
    int fd, i, poll_num;
    int *wd;
    nfds_t nfds;
    struct pollfd fds[2];

    if (argc < 2) {
        printf("Usage: %s PATH [PATH ...]\\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    printf("Press ENTER key to terminate.\\n");

    /* Create the file descriptor for accessing the inotify API */

    fd = inotify_init1(IN_NONBLOCK);
    if (fd == \-1) {
        perror("inotify_init1");
        exit(EXIT_FAILURE);
    }

    /* Allocate memory for watch descriptors */

    wd = calloc(argc, sizeof(int));
    if (wd == NULL) {
        perror("calloc");
        exit(EXIT_FAILURE);
    }

    /* Mark directories for events
       \- file was opened
       \- file was closed */

    for (i = 1; i < argc; i++) {
        wd[i] = inotify_add_watch(fd, argv[i],
                                  IN_OPEN | IN_CLOSE);
        if (wd[i] == \-1) {
            fprintf(stderr, "Cannot watch '%s'\\n", argv[i]);
            perror("inotify_add_watch");
            exit(EXIT_FAILURE);
        }
    }

    /* Prepare for polling */

    nfds = 2;

    /* Console input */

    fds[0].fd = STDIN_FILENO;
    fds[0].events = POLLIN;

    /* Inotify input */

    fds[1].fd = fd;
    fds[1].events = POLLIN;

    /* Wait for events and/or terminal input */

    printf("Listening for events.\\n");
    while (1) {
        poll_num = poll(fds, nfds, \-1);
        if (poll_num == \-1) {
            if (errno == EINTR)
                continue;
            perror("poll");
            exit(EXIT_FAILURE);
        }

        if (poll_num > 0) {

            if (fds[0].revents & POLLIN) {

                /* Console input is available. Empty stdin and quit */

                while (read(STDIN_FILENO, &buf, 1) > 0 && buf != '\\n')
                    continue;
                break;
            }

            if (fds[1].revents & POLLIN) {

                /* Inotify events are available */

                handle_events(fd, wd, argc, argv);
            }
        }
    }

    printf("Listening for events stopped.\\n");

    /* Close inotify file descriptor */

    close(fd);

    free(wd);
    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR inotifywait (1),
.BR inotifywatch (1),
.BR inotify_add_watch (2),
.BR inotify_init (2),
.BR inotify_init1 (2),
.BR inotify_rm_watch (2),
.BR read (2),
.BR stat (2),
.BR fanotify (7)

.IR Documentation/filesystems/inotify.txt
in the Linux kernel source tree
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1993 Michael Haardt
.\" (michael@moria.de), Fri Apr 2 11:32:09 MET DST
.\" 1993
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.\" Modified by Thomas Koenig (ig25@rz.uni-karlsruhe.de) 24 Apr 1993
.\" Modified Sat Jul 24 17:28:08 1993 by Rik Faith (faith@cs.unc.edu)
.TH INTRO 7  2007-10-23 "Linux" "Linux Programmer's Manual"
.SH NAME
intro \- introduction to overview, conventions, and miscellany section
.SH DESCRIPTION
Section 7 of the manual provides overviews on various topics, and
describes conventions and protocols,
character set standards, the standard filesystem layout,
and miscellaneous other things.
.SH NOTES
.SS Authors and copyright conditions
Look at the header of the manual page source for the author(s) and copyright
conditions.
Note that these can be different from page to page!
.SH SEE ALSO
.BR standards (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
'\" t
.\" This man page is Copyright (C) 1999 Andi Kleen <ak@muc.de>.
.\"
.\" %%%LICENSE_START(VERBATIM_ONE_PARA)
.\" Permission is granted to distribute possibly modified copies
.\" of this page provided the header is included verbatim,
.\" and in case of nontrivial modification author and date
.\" of the modification is added to the header.
.\" %%%LICENSE_END
.\"
.\" $Id: ip.7,v 1.19 2000/12/20 18:10:31 ak Exp $
.\"
.\" FIXME The following socket options are yet to be documented
.\" 	IP_XFRM_POLICY (2.5.48)
.\"	    Needs CAP_NET_ADMIN
.\" 	IP_IPSEC_POLICY (2.5.47)
.\"	    Needs CAP_NET_ADMIN
.\" 	IP_PASSSEC (2.6.17)
.\" 	    Boolean
.\"	    commit 2c7946a7bf45ae86736ab3b43d0085e43947945c
.\"	    Author: Catherine Zhang <cxzhang@watson.ibm.com>
.\"	IP_MINTTL (2.6.34)
.\"	    commit d218d11133d888f9745802146a50255a4781d37a
.\"	    Author: Stephen Hemminger <shemminger@vyatta.com>
.\"	MCAST_JOIN_GROUP (2.4.22 / 2.6)
.\"	MCAST_BLOCK_SOURCE (2.4.22 / 2.6)
.\"	MCAST_UNBLOCK_SOURCE (2.4.22 / 2.6)
.\"	MCAST_LEAVE_GROUP (2.4.22 / 2.6)
.\"	MCAST_JOIN_SOURCE_GROUP (2.4.22 / 2.6)
.\"	MCAST_LEAVE_SOURCE_GROUP (2.4.22 / 2.6)
.\"	MCAST_MSFILTER (2.4.22 / 2.6)
.\"	IP_UNICAST_IF (3.4)
.\"	    commit 76e21053b5bf33a07c76f99d27a74238310e3c71
.\"	    Author: Erich E. Hoover <ehoover@mines.edu>
.\"
.TH IP  7 2015-05-07 "Linux" "Linux Programmer's Manual"
.SH NAME
ip \- Linux IPv4 protocol implementation
.SH SYNOPSIS
.B #include <sys/socket.h>
.br
.\" .B #include <net/netinet.h> -- does not exist anymore
.\" .B #include <linux/errqueue.h> -- never include <linux/foo.h>
.B #include <netinet/in.h>
.br
.B #include <netinet/ip.h>        \fR/* superset of previous */
.sp
.IB tcp_socket " = socket(AF_INET, SOCK_STREAM, 0);"
.br
.IB udp_socket " = socket(AF_INET, SOCK_DGRAM, 0);"
.br
.IB raw_socket " = socket(AF_INET, SOCK_RAW, " protocol ");"
.SH DESCRIPTION
Linux implements the Internet Protocol, version 4,
described in RFC\ 791 and RFC\ 1122.
.B ip
contains a level 2 multicasting implementation conforming to RFC\ 1112.
It also contains an IP router including a packet filter.
.\" FIXME . has someone verified that 2.1 is really 1812 compliant?
.PP
The programming interface is BSD-sockets compatible.
For more information on sockets, see
.BR socket (7).
.PP
An IP socket is created using
.BR socket (2):

    socket(AF_INET, socket_type, protocol);

Valid socket types are
.B SOCK_STREAM
to open a
.BR tcp (7)
socket,
.B SOCK_DGRAM
to open a
.BR udp (7)
socket, or
.B SOCK_RAW
to open a
.BR raw (7)
socket to access the IP protocol directly.
.I protocol
is the IP protocol in the IP header to be received or sent.
The only valid values for
.I protocol
are 0 and
.B IPPROTO_TCP
for TCP sockets, and 0 and
.B IPPROTO_UDP
for UDP sockets.
For
.B SOCK_RAW
you may specify a valid IANA IP protocol defined in
RFC\ 1700 assigned numbers.
.PP
When a process wants to receive new incoming packets or connections, it
should bind a socket to a local interface address using
.BR bind (2).
In this case, only one IP socket may be bound to any given local
(address, port) pair.
When
.B INADDR_ANY
is specified in the bind call, the socket will be bound to
.I all
local interfaces.
When
.BR listen (2)
is called on an unbound socket, the socket is automatically bound
to a random free port with the local address set to
.BR INADDR_ANY .
When
.BR connect (2)
is called on an unbound socket, the socket is automatically bound
to a random free port or to a usable shared port with the local address
set to
.BR INADDR_ANY .

A TCP local socket address that has been bound is unavailable for
some time after closing, unless the
.B SO_REUSEADDR
flag has been set.
Care should be taken when using this flag as it makes TCP less reliable.
.SS Address format
An IP socket address is defined as a combination of an IP interface
address and a 16-bit port number.
The basic IP protocol does not supply port numbers, they
are implemented by higher level protocols like
.BR udp (7)
and
.BR tcp (7).
On raw sockets
.I sin_port
is set to the IP protocol.
.PP
.in +4n
.nf
struct sockaddr_in {
    sa_family_t    sin_family; /* address family: AF_INET */
    in_port_t      sin_port;   /* port in network byte order */
    struct in_addr sin_addr;   /* internet address */
};

/* Internet address. */
struct in_addr {
    uint32_t       s_addr;     /* address in network byte order */
};
.fi
.in
.PP
.I sin_family
is always set to
.BR AF_INET .
This is required; in Linux 2.2 most networking functions return
.B EINVAL
when this setting is missing.
.I sin_port
contains the port in network byte order.
The port numbers below 1024 are called
.IR "privileged ports"
(or sometimes:
.IR "reserved ports" ).
Only privileged processes (i.e., those having the
.B CAP_NET_BIND_SERVICE
capability) may
.BR bind (2)
to these sockets.
Note that the raw IPv4 protocol as such has no concept of a
port, they are implemented only by higher protocols like
.BR tcp (7)
and
.BR udp (7).
.PP
.I sin_addr
is the IP host address.
The
.I s_addr
member of
.I struct in_addr
contains the host interface address in network byte order.
.I in_addr
should be assigned one of the
.BR INADDR_*
values (e.g.,
.BR INADDR_ANY )
or set using the
.BR inet_aton (3),
.BR inet_addr (3),
.BR inet_makeaddr (3)
library functions or directly with the name resolver (see
.BR gethostbyname (3)).

IPv4 addresses are divided into unicast, broadcast
and multicast addresses.
Unicast addresses specify a single interface of a host,
broadcast addresses specify all hosts on a network and multicast
addresses address all hosts in a multicast group.
Datagrams to broadcast addresses can be sent or received only when the
.B SO_BROADCAST
socket flag is set.
In the current implementation, connection-oriented sockets are allowed
to use only unicast addresses.
.\" Leave a loophole for XTP @)

Note that the address and the port are always stored in
network byte order.
In particular, this means that you need to call
.BR htons (3)
on the number that is assigned to a port.
All address/port manipulation
functions in the standard library work in network byte order.

There are several special addresses:
.B INADDR_LOOPBACK
(127.0.0.1)
always refers to the local host via the loopback device;
.B INADDR_ANY
(0.0.0.0)
means any address for binding;
.B INADDR_BROADCAST
(255.255.255.255)
means any host and has the same effect on bind as
.B INADDR_ANY
for historical reasons.
.SS Socket options
IP supports some protocol-specific socket options that can be set with
.BR setsockopt (2)
and read with
.BR getsockopt (2).
The socket option level for IP is
.BR IPPROTO_IP .
.\" or SOL_IP on Linux
A boolean integer flag is zero when it is false, otherwise true.

When an invalid socket option is specified,
.BR getsockopt (2)
and
.BR setsockopt (2)
fail with the error
.BR ENOPROTOOPT .
.TP
.BR IP_ADD_MEMBERSHIP " (since Linux 1.2)"
Join a multicast group.
Argument is an
.I ip_mreqn
structure.
.sp
.in +4n
.nf
struct ip_mreqn {
    struct in_addr imr_multiaddr; /* IP multicast group
                                     address */
    struct in_addr imr_address;   /* IP address of local
                                     interface */
    int            imr_ifindex;   /* interface index */
};
.fi
.in
.sp
.I imr_multiaddr
contains the address of the multicast group the application
wants to join or leave.
It must be a valid multicast address
.\" (i.e., within the 224.0.0.0-239.255.255.255 range)
(or
.BR setsockopt (2)
fails with the error
.BR EINVAL ).
.I imr_address
is the address of the local interface with which the system
should join the multicast group; if it is equal to
.BR INADDR_ANY ,
an appropriate interface is chosen by the system.
.I imr_ifindex
is the interface index of the interface that should join/leave the
.I imr_multiaddr
group, or 0 to indicate any interface.
.IP
The
.I ip_mreqn
structure is available only since Linux 2.2.
For compatibility, the old
.I ip_mreq
structure (present since Linux 1.2) is still supported;
it differs from
.I ip_mreqn
only by not including the
.I imr_ifindex
field.
(The kernel determines which structure is being passed based
on the size passed in
.IR optlen .)

.B IP_ADD_MEMBERSHIP
is valid only for
.BR setsockopt (2).
.\"
.TP
.BR IP_ADD_SOURCE_MEMBERSHIP " (since Linux 2.4.22 / 2.5.68)"
Join a multicast group and allow receiving data only
from a specified source.
Argument is an
.I ip_mreq_source
structure.
.sp
.in +4n
.nf
struct ip_mreq_source {
    struct in_addr imr_multiaddr;  /* IP multicast group
                                      address */
    struct in_addr imr_interface;  /* IP address of local
                                      interface */
    struct in_addr imr_sourceaddr; /* IP address of
                                      multicast source */
};
.fi
.in
.sp
The
.I ip_mreq_source
structure is similar to
.I ip_mreqn
described under
.BR IP_ADD_MEMBERSIP .
The
.I imr_multiaddr
field contains the address of the multicast group the application
wants to join or leave.
The
.I imr_interface
field is the address of the local interface with which
the system should join the multicast group.
Finally, the
.I imr_sourceaddr
field contains the address of the source the
application wants to receive data from.
.IP
This option can be used multiple times to allow
receiving data from more than one source.
.TP
.BR IP_BLOCK_SOURCE " (since Linux 2.4.22 / 2.5.68)"
Stop receiving multicast data from a specific source in a given group.
This is valid only after the application has subscribed
to the multicast group using either
.BR IP_ADD_MEMBERSHIP
or
.BR IP_ADD_SOURCE_MEMBERSHIP .
.IP
Argument is an
.I ip_mreq_source
structure as described under
.BR IP_ADD_SOURCE_MEMBERSHIP .
.TP
.BR IP_DROP_MEMBERSHIP " (since Linux 1.2)"
Leave a multicast group.
Argument is an
.I ip_mreqn
or
.I ip_mreq
structure similar to
.BR IP_ADD_MEMBERSHIP .
.TP
.BR IP_DROP_SOURCE_MEMBERSHIP " (since Linux 2.4.22 / 2.5.68)"
Leave a source-specific group\(emthat is, stop receiving data from
a given multicast group that come from a given source.
If the application has subscribed to multiple sources within
the same group, data from the remaining sources will still be delivered.
To stop receiving data from all sources at once, use
.BR IP_LEAVE_GROUP .
.IP
Argument is an
.I ip_mreq_source
structure as described under
.BR IP_ADD_SOURCE_MEMBERSHIP .
.TP
.BR IP_FREEBIND " (since Linux 2.4)"
.\" Precisely: 2.4.0-test10
If enabled, this boolean option allows binding to an IP address
that is nonlocal or does not (yet) exist.
This permits listening on a socket,
without requiring the underlying network interface or the
specified dynamic IP address to be up at the time that
the application is trying to bind to it.
This option is the per-socket equivalent of the
.IR ip_nonlocal_bind
.I /proc
interface described below.
.TP
.BR IP_HDRINCL " (since Linux 2.0)"
If enabled,
the user supplies an IP header in front of the user data.
Valid only for
.B SOCK_RAW
sockets; see
.BR raw (7)
for more information.
When this flag is enabled, the values set by
.BR IP_OPTIONS ,
.BR IP_TTL ,
and
.B IP_TOS
are ignored.
.TP
.BR IP_MSFILTER " (since Linux 2.4.22 / 2.5.68)"
This option provides access to the advanced full-state filtering API.
Argument is an
.I ip_msfilter
structure.
.sp
.in +4n
.nf
struct ip_msfilter {
    struct in_addr imsf_multiaddr; /* IP multicast group
                                      address */
    struct in_addr imsf_interface; /* IP address of local
                                      interface */
    uint32_t       imsf_fmode;     /* Filter-mode */

    uint32_t       imsf_numsrc;    /* Number of sources in
                                      the following array */
    struct in_addr imsf_slist[1];  /* Array of source
                                      addresses */
};
.fi
.in
.sp
There are two macros,
.BR MCAST_INCLUDE
and
.BR MCAST_EXCLUDE ,
which can be used to specify the filtering mode.
Additionally, the
.BR IP_MSFILTER_SIZE (n)
macro exists to determine how much memory is needed to store
.I ip_msfilter
structure with
.I n
sources in the source list.
.IP
For the full description of multicast source filtering
refer to RFC 3376.
.TP
.BR IP_MTU " (since Linux 2.2)"
.\" Precisely: 2.1.124
Retrieve the current known path MTU of the current socket.
Returns an integer.

.B IP_MTU
is valid only for
.BR getsockopt (2)
and can be employed only when the socket has been connected.
.TP
.BR IP_MTU_DISCOVER " (since Linux 2.2)"
.\" Precisely: 2.1.124
Set or receive the Path MTU Discovery setting for a socket.
When enabled, Linux will perform Path MTU Discovery
as defined in RFC\ 1191 on
.B SOCK_STREAM
sockets.
For
.RB non- SOCK_STREAM
sockets,
.B IP_PMTUDISC_DO
forces the don't-fragment flag to be set on all outgoing packets.
It is the user's responsibility to packetize the data
in MTU-sized chunks and to do the retransmits if necessary.
The kernel will reject (with
.BR EMSGSIZE )
datagrams that are bigger than the known path MTU.
.B IP_PMTUDISC_WANT
will fragment a datagram if needed according to the path MTU,
or will set the don't-fragment flag otherwise.

The system-wide default can be toggled between
.B IP_PMTUDISC_WANT
and
.B IP_PMTUDISC_DONT
by writing (respectively, zero and nonzero values) to the
.I /proc/sys/net/ipv4/ip_no_pmtu_disc
file.
.TS
tab(:);
c l
l l.
Path MTU discovery value:Meaning
IP_PMTUDISC_WANT:Use per-route settings.
IP_PMTUDISC_DONT:Never do Path MTU Discovery.
IP_PMTUDISC_DO:Always do Path MTU Discovery.
IP_PMTUDISC_PROBE:Set DF but ignore Path MTU.
.TE

When PMTU discovery is enabled, the kernel automatically keeps track of
the path MTU per destination host.
When it is connected to a specific peer with
.BR connect (2),
the currently known path MTU can be retrieved conveniently using the
.B IP_MTU
socket option (e.g., after an
.B EMSGSIZE
error occurred).
The path MTU may change over time.
For connectionless sockets with many destinations,
the new MTU for a given destination can also be accessed using the
error queue (see
.BR IP_RECVERR ).
A new error will be queued for every incoming MTU update.

While MTU discovery is in progress, initial packets from datagram sockets
may be dropped.
Applications using UDP should be aware of this and not
take it into account for their packet retransmit strategy.

To bootstrap the path MTU discovery process on unconnected sockets, it
is possible to start with a big datagram size
(up to 64K-headers bytes long) and let it shrink by updates of the path MTU.
.\" FIXME . this is an ugly hack

To get an initial estimate of the
path MTU, connect a datagram socket to the destination address using
.BR connect (2)
and retrieve the MTU by calling
.BR getsockopt (2)
with the
.B IP_MTU
option.

It is possible to implement RFC 4821 MTU probing with
.B SOCK_DGRAM
or
.B SOCK_RAW
sockets by setting a value of
.BR IP_PMTUDISC_PROBE
(available since Linux 2.6.22).
This is also particularly useful for diagnostic tools such as
.BR tracepath (8)
that wish to deliberately send probe packets larger than
the observed Path MTU.
.TP
.BR IP_MULTICAST_ALL " (since Linux 2.6.31)"
This option can be used to modify the delivery policy of multicast messages
to sockets bound to the wildcard
.B INADDR_ANY
address.
The argument is a boolean integer (defaults to 1).
If set to 1,
the socket will receive messages from all the groups that have been joined
globally on the whole system.
Otherwise, it will deliver messages only from
the groups that have been explicitly joined (for example via the
.B IP_ADD_MEMBERSHIP
option) on this particular socket.
.TP
.BR IP_MULTICAST_IF " (since Linux 1.2)"
Set the local device for a multicast socket.
The argument for
.BR setsockopt (2)
is an
.I ip_mreqn
or
.\" net: IP_MULTICAST_IF setsockopt now recognizes struct mreq
.\" Commit: 3a084ddb4bf299a6e898a9a07c89f3917f0713f7
(since Linux 3.5)
.I ip_mreq
structure similar to
.BR IP_ADD_MEMBERSHIP ,
or an
.I in_addr
structure.
(The kernel determines which structure is being passed based
on the size passed in
.IR optlen .)
For
.BR getsockopt (2),
the argument is an
.I in_addr
structure.
.TP
.BR IP_MULTICAST_LOOP " (since Linux 1.2)"
Set or read a boolean integer argument that determines whether
sent multicast packets should be looped back to the local sockets.
.TP
.BR IP_MULTICAST_TTL " (since Linux 1.2)"
Set or read the time-to-live value of outgoing multicast packets for this
socket.
It is very important for multicast packets to set the smallest TTL possible.
The default is 1 which means that multicast packets don't leave the local
network unless the user program explicitly requests it.
Argument is an integer.
.TP
.BR IP_NODEFRAG " (since Linux 2.6.36)"
If enabled (argument is nonzero),
the reassembly of outgoing packets is disabled in the netfilter layer.
The argument is an integer.

This option is valid only for
.B SOCK_RAW
sockets.
.TP
.BR IP_OPTIONS " (since Linux 2.0)"
.\" Precisely: 1.3.30
Set or get the IP options to be sent with every packet from this socket.
The arguments are a pointer to a memory buffer containing the options
and the option length.
The
.BR setsockopt (2)
call sets the IP options associated with a socket.
The maximum option size for IPv4 is 40 bytes.
See RFC\ 791 for the allowed options.
When the initial connection request packet for a
.B SOCK_STREAM
socket contains IP options, the IP options will be set automatically
to the options from the initial packet with routing headers reversed.
Incoming packets are not allowed to change options after the connection
is established.
The processing of all incoming source routing options
is disabled by default and can be enabled by using the
.I accept_source_route
.I /proc
interface.
Other options like timestamps are still handled.
For datagram sockets, IP options can be only set by the local user.
Calling
.BR getsockopt (2)
with
.B IP_OPTIONS
puts the current IP options used for sending into the supplied buffer.
.TP
.BR IP_PKTINFO " (since Linux 2.2)"
.\" Precisely: 2.1.68
Pass an
.B IP_PKTINFO
ancillary message that contains a
.I pktinfo
structure that supplies some information about the incoming packet.
This only works for datagram oriented sockets.
The argument is a flag that tells the socket whether the
.B IP_PKTINFO
message should be passed or not.
The message itself can only be sent/retrieved
as control message with a packet using
.BR recvmsg (2)
or
.BR sendmsg (2).
.IP
.in +4n
.nf
struct in_pktinfo {
    unsigned int   ipi_ifindex;  /* Interface index */
    struct in_addr ipi_spec_dst; /* Local address */
    struct in_addr ipi_addr;     /* Header Destination
                                    address */
};
.fi
.in
.IP
.\" FIXME . elaborate on that.
.I ipi_ifindex
is the unique index of the interface the packet was received on.
.I ipi_spec_dst
is the local address of the packet and
.I ipi_addr
is the destination address in the packet header.
If
.B IP_PKTINFO
is passed to
.BR sendmsg (2)
and
.\" This field is grossly misnamed
.I ipi_spec_dst
is not zero, then it is used as the local source address for the routing
table lookup and for setting up IP source route options.
When
.I ipi_ifindex
is not zero, the primary local address of the interface specified by the
index overwrites
.I ipi_spec_dst
for the routing table lookup.
.TP
.BR IP_RECVERR " (since Linux 2.2)"
.\" Precisely: 2.1.15
Enable extended reliable error message passing.
When enabled on a datagram socket, all
generated errors will be queued in a per-socket error queue.
When the user receives an error from a socket operation,
the errors can be received by calling
.BR recvmsg (2)
with the
.B MSG_ERRQUEUE
flag set.
The
.I sock_extended_err
structure describing the error will be passed in an ancillary message with
the type
.B IP_RECVERR
and the level
.BR IPPROTO_IP .
.\" or SOL_IP on Linux
This is useful for reliable error handling on unconnected sockets.
The received data portion of the error queue contains the error packet.
.IP
The
.B IP_RECVERR
control message contains a
.I sock_extended_err
structure:
.IP
.in +4n
.ne 18
.nf
#define SO_EE_ORIGIN_NONE    0
#define SO_EE_ORIGIN_LOCAL   1
#define SO_EE_ORIGIN_ICMP    2
#define SO_EE_ORIGIN_ICMP6   3

struct sock_extended_err {
    uint32_t ee_errno;   /* error number */
    uint8_t  ee_origin;  /* where the error originated */
    uint8_t  ee_type;    /* type */
    uint8_t  ee_code;    /* code */
    uint8_t  ee_pad;
    uint32_t ee_info;    /* additional information */
    uint32_t ee_data;    /* other data */
    /* More data may follow */
};

struct sockaddr *SO_EE_OFFENDER(struct sock_extended_err *);
.fi
.in
.IP
.I ee_errno
contains the
.I errno
number of the queued error.
.I ee_origin
is the origin code of where the error originated.
The other fields are protocol-specific.
The macro
.B SO_EE_OFFENDER
returns a pointer to the address of the network object
where the error originated from given a pointer to the ancillary message.
If this address is not known, the
.I sa_family
member of the
.I sockaddr
contains
.B AF_UNSPEC
and the other fields of the
.I sockaddr
are undefined.
.IP
IP uses the
.I sock_extended_err
structure as follows:
.I ee_origin
is set to
.B SO_EE_ORIGIN_ICMP
for errors received as an ICMP packet, or
.B SO_EE_ORIGIN_LOCAL
for locally generated errors.
Unknown values should be ignored.
.I ee_type
and
.I ee_code
are set from the type and code fields of the ICMP header.
.I ee_info
contains the discovered MTU for
.B EMSGSIZE
errors.
The message also contains the
.I sockaddr_in of the node
caused the error, which can be accessed with the
.B SO_EE_OFFENDER
macro.
The
.I sin_family
field of the
.B SO_EE_OFFENDER
address is
.B AF_UNSPEC
when the source was unknown.
When the error originated from the network, all IP options
.RB ( IP_OPTIONS ", " IP_TTL ", "
etc.) enabled on the socket and contained in the
error packet are passed as control messages.
The payload of the packet causing the error is returned as normal payload.
.\" FIXME . Is it a good idea to document that? It is a dubious feature.
.\" On
.\" .B SOCK_STREAM
.\" sockets,
.\" .B IP_RECVERR
.\" has slightly different semantics. Instead of
.\" saving the errors for the next timeout, it passes all incoming
.\" errors immediately to the user.
.\" This might be useful for very short-lived TCP connections which
.\" need fast error handling. Use this option with care:
.\" it makes TCP unreliable
.\" by not allowing it to recover properly from routing
.\" shifts and other normal
.\" conditions and breaks the protocol specification.
Note that TCP has no error queue;
.B MSG_ERRQUEUE
is not permitted on
.B SOCK_STREAM
sockets.
.B IP_RECVERR
is valid for TCP, but all errors are returned by socket function return or
.B SO_ERROR
only.
.IP
For raw sockets,
.B IP_RECVERR
enables passing of all received ICMP errors to the
application, otherwise errors are only reported on connected sockets
.IP
It sets or retrieves an integer boolean flag.
.B IP_RECVERR
defaults to off.
.TP
.BR IP_RECVOPTS " (since Linux 2.2)"
.\" Precisely: 2.1.15
Pass all incoming IP options to the user in a
.B IP_OPTIONS
control message.
The routing header and other options are already filled in
for the local host.
Not supported for
.B SOCK_STREAM
sockets.
.TP
.BR IP_RECVORIGDSTADDR " (since Linux 2.6.29)"
.\" commit e8b2dfe9b4501ed0047459b2756ba26e5a940a69
This boolean option enables the
.B IP_ORIGDSTADDR
ancillary message in
.BR recvmsg (2),
in which the kernel returns the original destination address
of the datagram being received.
The ancillary message contains a
.IR "struct sockaddr_in" .
.TP
.BR IP_RECVTOS " (since Linux 2.2)"
.\" Precisely: 2.1.68
If enabled, the
.B IP_TOS
ancillary message is passed with incoming packets.
It contains a byte which specifies the Type of Service/Precedence
field of the packet header.
Expects a boolean integer flag.
.TP
.BR IP_RECVTTL " (since Linux 2.2)"
.\" Precisely: 2.1.68
When this flag is set, pass a
.B IP_TTL
control message with the time-to-live
field of the received packet as a byte.
Not supported for
.B SOCK_STREAM
sockets.
.TP
.BR IP_RETOPTS " (since Linux 2.2)"
.\" Precisely: 2.1.15
Identical to
.BR IP_RECVOPTS ,
but returns raw unprocessed options with timestamp and route record
options not filled in for this hop.
.TP
.BR IP_ROUTER_ALERT " (since Linux 2.2)"
.\" Precisely: 2.1.68
Pass all to-be forwarded packets with the
IP Router Alert option set to this socket.
Valid only for raw sockets.
This is useful, for instance, for user-space RSVP daemons.
The tapped packets are not forwarded by the kernel; it is
the user's responsibility to send them out again.
Socket binding is ignored,
such packets are only filtered by protocol.
Expects an integer flag.
.TP
.BR IP_TOS " (since Linux 1.0)"
Set or receive the Type-Of-Service (TOS) field that is sent
with every IP packet originating from this socket.
It is used to prioritize packets on the network.
TOS is a byte.
There are some standard TOS flags defined:
.B IPTOS_LOWDELAY
to minimize delays for interactive traffic,
.B IPTOS_THROUGHPUT
to optimize throughput,
.B IPTOS_RELIABILITY
to optimize for reliability,
.B IPTOS_MINCOST
should be used for "filler data" where slow transmission doesn't matter.
At most one of these TOS values can be specified.
Other bits are invalid and shall be cleared.
Linux sends
.B IPTOS_LOWDELAY
datagrams first by default,
but the exact behavior depends on the configured queueing discipline.
.\" FIXME elaborate on this
Some high-priority levels may require superuser privileges (the
.B CAP_NET_ADMIN
capability).
.\" The priority can also be set in a protocol-independent way by the
.\" .RB ( SOL_SOCKET ", " SO_PRIORITY )
.\" socket option (see
.\" .BR socket (7)).
.TP
.BR IP_TRANSPARENT " (since Linux 2.6.24)"
.\" commit f5715aea4564f233767ea1d944b2637a5fd7cd2e
.\"     This patch introduces the IP_TRANSPARENT socket option: enabling that
.\"     will make the IPv4 routing omit the non-local source address check on
.\"     output. Setting IP_TRANSPARENT requires NET_ADMIN capability.
.\" http://lwn.net/Articles/252545/
Setting this boolean option enables transparent proxying on this socket.
This socket option allows
the calling application to bind to a nonlocal IP address and operate
both as a client and a server with the foreign address as the local endpoint.
NOTE: this requires that routing be set up in a way that
packets going to the foreign address are routed through the TProxy box
(i.e., the system hosting the application that employs the
.B IP_TRANSPARENT
socket option).
Enabling this socket option requires superuser privileges
(the
.BR CAP_NET_ADMIN
capability).
.IP
TProxy redirection with the iptables TPROXY target also requires that
this option be set on the redirected socket.
.TP
.BR IP_TTL " (since Linux 1.0)"
Set or retrieve the current time-to-live field that is used in every packet
sent from this socket.
.TP
.BR IP_UNBLOCK_SOURCE " (since Linux 2.4.22 / 2.5.68)"
Unblock previously blocked multicast source.
Returns
.BR EADDRNOTAVAIL
when given source is not being blocked.
.IP
Argument is an
.I ip_mreq_source
structure as described under
.BR IP_ADD_SOURCE_MEMBERSHIP .
.SS /proc interfaces
The IP protocol
supports a set of
.I /proc
interfaces to configure some global parameters.
The parameters can be accessed by reading or writing files in the directory
.IR /proc/sys/net/ipv4/ .
.\" FIXME As at 2.6.12, 14 Jun 2005, the following are undocumented:
.\"	ip_queue_maxlen
.\"	ip_conntrack_max
Interfaces described as
.I Boolean
take an integer value, with a nonzero value ("true") meaning that
the corresponding option is enabled, and a zero value ("false")
meaning that the option is disabled.
.\"
.TP
.IR ip_always_defrag " (Boolean; since Linux 2.2.13)"
[New with kernel 2.2.13; in earlier kernel versions this feature
was controlled at compile time by the
.B CONFIG_IP_ALWAYS_DEFRAG
option; this option is not present in 2.4.x and later]

When this boolean flag is enabled (not equal 0), incoming fragments
(parts of IP packets
that arose when some host between origin and destination decided
that the packets were too large and cut them into pieces) will be
reassembled (defragmented) before being processed, even if they are
about to be forwarded.

Only enable if running either a firewall that is the sole link
to your network or a transparent proxy; never ever use it for a
normal router or host.
Otherwise, fragmented communication can be disturbed
if the fragments travel over different links.
Defragmentation also has a large memory and CPU time cost.

This is automagically turned on when masquerading or transparent
proxying are configured.
.\"
.TP
.IR ip_autoconfig " (since Linux 2.2 to 2.6.17)"
.\" Precisely: since 2.1.68
.\" FIXME document ip_autoconfig
Not documented.
.\"
.TP
.IR ip_default_ttl " (integer; default: 64; since Linux 2.2)"
.\" Precisely: 2.1.15
Set the default time-to-live value of outgoing packets.
This can be changed per socket with the
.B IP_TTL
option.
.\"
.TP
.IR ip_dynaddr " (Boolean; default: disabled; since Linux 2.0.31)"
Enable dynamic socket address and masquerading entry rewriting on interface
address change.
This is useful for dialup interface with changing IP addresses.
0 means no rewriting, 1 turns it on and 2 enables verbose mode.
.\"
.TP
.IR ip_forward " (Boolean; default: disabled; since Linux 1.2)"
Enable IP forwarding with a boolean flag.
IP forwarding can be also set on a per-interface basis.
.\"
.TP
.IR ip_local_port_range " (since Linux 2.2)"
.\" Precisely: since 2.1.68
This file contains two integers that define the default local port range
allocated to sockets that are not explicitly bound to a port number\(emthat
is, the range used for
.IR "ephemeral ports" .
An ephemeral port is allocated to a socket in the following circumstances:
.RS
.IP * 3
the port number in a socket address is specified as 0 when calling
.BR bind (2);
.IP *
.BR listen (2)
is called on a stream socket that was not previously bound;
.IP *
.BR connect (2)
was called on a socket that was not previously bound;
.IP *
.BR sendto (2)
is called on a datagram socket that was not previously bound.
.RE
.IP
Allocation of ephemeral ports starts with the first number in
.IR ip_local_port_range
and ends with the second number.
If the range of ephemeral ports is exhausted,
then the relevant system call returns an error (but see BUGS).
.IP
Note that the port range in
.IR ip_local_port_range
should not conflict with the ports used by masquerading
(although the case is handled).
Also, arbitrary choices may cause problems with some firewall packet
filters that make assumptions about the local ports in use.
The first number should be at least greater than 1024,
or better, greater than 4096, to avoid clashes
with well known ports and to minimize firewall problems.
.\"
.TP
.IR ip_no_pmtu_disc " (Boolean; default: disabled; since Linux 2.2)"
.\" Precisely: 2.1.15
If enabled, don't do Path MTU Discovery for TCP sockets by default.
Path MTU discovery may fail if misconfigured firewalls (that drop
all ICMP packets) or misconfigured interfaces (e.g., a point-to-point
link where the both ends don't agree on the MTU) are on the path.
It is better to fix the broken routers on the path than to turn off
Path MTU Discovery globally, because not doing it incurs a high cost
to the network.
.\"
.\" The following is from 2.6.12: Documentation/networking/ip-sysctl.txt
.TP
.IR ip_nonlocal_bind " (Boolean; default: disabled; since Linux 2.4)"
.\" Precisely: patch-2.4.0-test10
If set, allows processes to
.BR bind (2)
to nonlocal IP addresses,
which can be quite useful, but may break some applications.
.\"
.\" The following is from 2.6.12: Documentation/networking/ip-sysctl.txt
.TP
.IR ip6frag_time " (integer; default: 30)"
Time in seconds to keep an IPv6 fragment in memory.
.\"
.\" The following is from 2.6.12: Documentation/networking/ip-sysctl.txt
.TP
.IR ip6frag_secret_interval " (integer; default: 600)"
Regeneration interval (in seconds) of the hash secret (or lifetime
for the hash secret) for IPv6 fragments.
.TP
.IR ipfrag_high_thresh " (integer), " ipfrag_low_thresh " (integer)"
If the amount of queued IP fragments reaches
.IR ipfrag_high_thresh ,
the queue is pruned down to
.IR ipfrag_low_thresh .
Contains an integer with the number of bytes.
.TP
.I neigh/*
See
.BR arp (7).
.\" FIXME Document the conf/*/* interfaces
.\"
.\" FIXME Document the route/* interfaces
.SS Ioctls
All ioctls described in
.BR socket (7)
apply to
.BR ip .
.\" 2006-04-02, mtk
.\" commented out the following because ipchains is obsolete
.\" .PP
.\" The ioctls to configure firewalling are documented in
.\" .BR ipfw (4)
.\" from the
.\" .B ipchains
.\" package.
.PP
Ioctls to configure generic device parameters are described in
.BR netdevice (7).
.\" FIXME Add a discussion of multicasting
.SH ERRORS
.\" FIXME document all errors.
.\"     We should really fix the kernels to give more uniform
.\"     error returns (ENOMEM vs ENOBUFS, EPERM vs EACCES etc.)
.TP
.B EACCES
The user tried to execute an operation without the necessary permissions.
These include:
sending a packet to a broadcast address without having the
.B SO_BROADCAST
flag set;
sending a packet via a
.I prohibit
route;
modifying firewall settings without superuser privileges (the
.B CAP_NET_ADMIN
capability);
binding to a privileged port without superuser privileges (the
.B CAP_NET_BIND_SERVICE
capability).
.TP
.B EADDRINUSE
Tried to bind to an address already in use.
.TP
.B EADDRNOTAVAIL
A nonexistent interface was requested or the requested source
address was not local.
.TP
.B EAGAIN
Operation on a nonblocking socket would block.
.TP
.B EALREADY
An connection operation on a nonblocking socket is already in progress.
.TP
.B ECONNABORTED
A connection was closed during an
.BR accept (2).
.TP
.B EHOSTUNREACH
No valid routing table entry matches the destination address.
This error can be caused by a ICMP message from a remote router or
for the local routing table.
.TP
.B EINVAL
Invalid argument passed.
For send operations this can be caused by sending to a
.I blackhole
route.
.TP
.B EISCONN
.BR connect (2)
was called on an already connected socket.
.TP
.B EMSGSIZE
Datagram is bigger than an MTU on the path and it cannot be fragmented.
.TP
.BR ENOBUFS ", " ENOMEM
Not enough free memory.
This often means that the memory allocation is limited by the socket
buffer limits, not by the system memory, but this is not 100% consistent.
.TP
.B ENOENT
.B SIOCGSTAMP
was called on a socket where no packet arrived.
.TP
.B ENOPKG
A kernel subsystem was not configured.
.TP
.BR ENOPROTOOPT " and " EOPNOTSUPP
Invalid socket option passed.
.TP
.B ENOTCONN
The operation is defined only on a connected socket, but the socket wasn't
connected.
.TP
.B EPERM
User doesn't have permission to set high priority, change configuration,
or send signals to the requested process or group.
.TP
.B EPIPE
The connection was unexpectedly closed or shut down by the other end.
.TP
.B ESOCKTNOSUPPORT
The socket is not configured or an unknown socket type was requested.
.PP
Other errors may be generated by the overlaying protocols; see
.BR tcp (7),
.BR raw (7),
.BR udp (7),
and
.BR socket (7).
.SH NOTES
.BR IP_FREEBIND ,
.BR IP_MSFILTER ,
.BR IP_MTU ,
.BR IP_MTU_DISCOVER ,
.BR IP_RECVORIGDSTADDR ,
.BR IP_PKTINFO ,
.BR IP_RECVERR ,
.BR IP_ROUTER_ALERT ,
and
.BR IP_TRANSPARENT
are Linux-specific.
.\" IP_PASSSEC is Linux-specific
.\" IP_XFRM_POLICY is Linux-specific
.\" IP_IPSEC_POLICY is a nonstandard extension, also present on some BSDs

Be very careful with the
.B SO_BROADCAST
option \- it is not privileged in Linux.
It is easy to overload the network
with careless broadcasts.
For new application protocols
it is better to use a multicast group instead of broadcasting.
Broadcasting is discouraged.
.PP
Some other BSD sockets implementations provide
.B IP_RCVDSTADDR
and
.B IP_RECVIF
socket options to get the destination address and the interface of
received datagrams.
Linux has the more general
.B IP_PKTINFO
for the same task.
.PP
Some BSD sockets implementations also provide an
.B IP_RECVTTL
option, but an ancillary message with type
.B IP_RECVTTL
is passed with the incoming packet.
This is different from the
.B IP_TTL
option used in Linux.
.PP
Using
.B SOL_IP
socket options level isn't portable, BSD-based stacks use
.B IPPROTO_IP
level.
.SS Compatibility
For compatibility with Linux 2.0, the obsolete
.BI "socket(AF_INET, SOCK_PACKET, " protocol )
syntax is still supported to open a
.BR packet (7)
socket.
This is deprecated and should be replaced by
.BI "socket(AF_PACKET, SOCK_RAW, " protocol )
instead.
The main difference is the new
.I sockaddr_ll
address structure for generic link layer information instead of the old
.BR sockaddr_pkt .
.SH BUGS
There are too many inconsistent error values.
.PP
The error used to diagnose exhaustion of the ephemeral port range differs
across the various system calls
.RB ( connect (2),
.BR bind (2),
.BR listen (2),
.BR sendto (2))
that can assign ephemeral ports.
.PP
The ioctls to configure IP-specific interface options and ARP tables are
not described.
.\" .PP
.\" Some versions of glibc forget to declare
.\" .IR in_pktinfo .
.\" Workaround currently is to copy it into your program from this man page.
.PP
Receiving the original destination address with
.B MSG_ERRQUEUE
in
.I msg_name
by
.BR recvmsg (2)
does not work in some 2.2 kernels.
.\" .SH AUTHORS
.\" This man page was written by Andi Kleen.
.SH SEE ALSO
.BR recvmsg (2),
.BR sendmsg (2),
.BR byteorder (3),
.BR ipfw (4),
.BR capabilities (7),
.BR icmp (7),
.BR ipv6 (7),
.BR netlink (7),
.BR raw (7),
.BR socket (7),
.BR tcp (7),
.BR udp (7)
.PP
RFC\ 791 for the original IP specification.
RFC\ 1122 for the IPv4 host requirements.
RFC\ 1812 for the IPv4 router requirements.
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" This man page is Copyright (C) 2000 Andi Kleen <ak@muc.de>.
.\"
.\" %%%LICENSE_START(VERBATIM_ONE_PARA)
.\" Permission is granted to distribute possibly modified copies
.\" of this page provided the header is included verbatim,
.\" and in case of nontrivial modification author and date
.\" of the modification is added to the header.
.\" %%%LICENSE_END
.\"
.\" $Id: ipv6.7,v 1.3 2000/12/20 18:10:31 ak Exp $
.\"
.\" The following socket options are undocumented
.\"	All of the folloing are from:
.\"	    commit 333fad5364d6b457c8d837f7d05802d2aaf8a961
.\"	    Author: YOSHIFUJI Hideaki <yoshfuji@linux-ipv6.org>
.\"	    Support several new sockopt / ancillary data in Advanced API (RFC3542).
.\"		IPV6_2292PKTINFO (2.6.14)
.\"		    Formerly IPV6_PKTINFO
.\"		IPV6_2292HOPOPTS (2.6.14)
.\"		    Formerly IPV6_HOPOPTS, which is documented
.\"		IPV6_2292DSTOPTS (2.6.14)
.\"		    Formerly IPV6_DSTOPTS, which is documented
.\"		IPV6_2292RTHDR (2.6.14)
.\"		    Formerly IPV6_RTHDR, which is documented
.\"		IPV6_2292PKTOPTIONS (2.6.14)
.\"		    Formerly IPV6_PKTOPTIONS
.\"		IPV6_2292HOPLIMIT (2.6.14)
.\"		    Formerly IPV6_HOPLIMIT, which is documented
.\"
.\"		IPV6_RECVHOPLIMIT (2.6.14)
.\"		IPV6_RECVHOPOPTS (2.6.14)
.\"		IPV6_RTHDRDSTOPTS (2.6.14)
.\"		IPV6_RECVRTHDR (2.6.14)
.\"		IPV6_RECVDSTOPTS (2.6.14)
.\"
.\"	IPV6_RECVPATHMTU (2.6.35, flag value added in 2.6.14)
.\"	    commit 793b14731686595a741d9f47726ad8b9a235385a
.\"	    Author: Brian Haley <brian.haley@hp.com>
.\"	IPV6_PATHMTU (2.6.35, flag value added in 2.6.14)
.\"	    commit 793b14731686595a741d9f47726ad8b9a235385a
.\"	    Author: Brian Haley <brian.haley@hp.com>
.\"	IPV6_DONTFRAG (2.6.35, flag value added in 2.6.14)
.\"	    commit 793b14731686595a741d9f47726ad8b9a235385a
.\"	    Author: Brian Haley <brian.haley@hp.com>
.\"	    commit 4b340ae20d0e2366792abe70f46629e576adaf5e
.\"	    Author: Brian Haley <brian.haley@hp.com>
.\"
.\"	IPV6_RECVTCLASS (2.6.14)
.\"	    commit 41a1f8ea4fbfcdc4232f023732584aae2220de31
.\"	    Author: YOSHIFUJI Hideaki <yoshfuji@linux-ipv6.org>
.\"		Based on patch from David L Stevens <dlstevens@us.ibm.com>
.\"
.\"	IPV6_CHECKSUM (2.2)
.\"	IPV6_NEXTHOP (2.2)
.\"	IPV6_JOIN_ANYCAST (2.4.21 / 2.6)
.\"	IPV6_LEAVE_ANYCAST (2.4.21 / 2.6)
.\"	IPV6_FLOWLABEL_MGR (2.2.7 / 2.4)
.\"	IPV6_FLOWINFO_SEND (2.2.7 / 2.4)
.\"	IPV6_IPSEC_POLICY (2.6)
.\"	IPV6_XFRM_POLICY (2.6)
.\"	IPV6_TCLASS (2.6)
.\"
.\"	IPV6_ADDR_PREFERENCES (2.6.26)
.\"	    commit 7cbca67c073263c179f605bdbbdc565ab29d801d
.\"	    Author: YOSHIFUJI Hideaki <yoshfuji@linux-ipv6.org>
.\"	IPV6_MINHOPCOUNT (2.6.35)
.\"	    commit e802af9cabb011f09b9c19a82faef3dd315f27eb
.\"	    Author: Stephen Hemminger <shemminger@vyatta.com>
.\"	IPV6_ORIGDSTADDR (2.6.37)
.\"	    Actually a CMSG rather than a sockopt?
.\"	    In header file, we have IPV6_RECVORIGDSTADDR == IPV6_ORIGDSTADDR
.\"	    commit 6c46862280c5f55eda7750391bc65cd7e08c7535
.\"	    Author: Balazs Scheidler <bazsi@balabit.hu>
.\"	IPV6_RECVORIGDSTADDR (2.6.37)
.\"	    commit 6c46862280c5f55eda7750391bc65cd7e08c7535
.\"	    Author: Balazs Scheidler <bazsi@balabit.hu>
.\"	        Support for IPV6_RECVORIGDSTADDR sockopt for UDP sockets
.\"		were contributed by Harry Mason.
.\"	IPV6_TRANSPARENT (2.6.37)
.\"	    commit 6c46862280c5f55eda7750391bc65cd7e08c7535
.\"	    Author: Balazs Scheidler <bazsi@balabit.hu>
.\"	IPV6_UNICAST_IF (3.4)
.\"	    commit c4062dfc425e94290ac427a98d6b4721dd2bc91f
.\"	    Author: Erich E. Hoover <ehoover@mines.edu>
.\"
.TH IPV6 7 2015-03-29 "Linux" "Linux Programmer's Manual"
.SH NAME
ipv6 \- Linux IPv6 protocol implementation
.SH SYNOPSIS
.B #include <sys/socket.h>
.br
.B #include <netinet/in.h>
.sp
.IB tcp6_socket " = socket(AF_INET6, SOCK_STREAM, 0);"
.br
.IB raw6_socket " = socket(AF_INET6, SOCK_RAW, " protocol ");"
.br
.IB udp6_socket " = socket(AF_INET6, SOCK_DGRAM, " protocol ");"
.SH DESCRIPTION
Linux 2.2 optionally implements the Internet Protocol, version 6.
This man page contains a description of the IPv6 basic API as
implemented by the Linux kernel and glibc 2.1.
The interface
is based on the BSD sockets interface; see
.BR socket (7).
.PP
The IPv6 API aims to be mostly compatible with the
IPv4 API (see
.BR ip (7)).
Only differences are described in this man page.
.PP
To bind an
.B AF_INET6
socket to any process, the local address should be copied from the
.I in6addr_any
variable which has
.I in6_addr
type.
In static initializations,
.B IN6ADDR_ANY_INIT
may also be used, which expands to a constant expression.
Both of them are in network byte order.
.PP
The IPv6 loopback address (::1) is available in the global
.I in6addr_loopback
variable.
For initializations,
.B IN6ADDR_LOOPBACK_INIT
should be used.
.PP
IPv4 connections can be handled with the v6 API by using the
v4-mapped-on-v6 address type;
thus a program needs to support only this API type to
support both protocols.
This is handled transparently by the address
handling functions in the C library.
.PP
IPv4 and IPv6 share the local port space.
When you get an IPv4 connection
or packet to a IPv6 socket, its source address will be mapped
to v6 and it will be mapped to v6.
.SS Address format
.in +4n
.nf
struct sockaddr_in6 {
    sa_family_t     sin6_family;   /* AF_INET6 */
    in_port_t       sin6_port;     /* port number */
    uint32_t        sin6_flowinfo; /* IPv6 flow information */
    struct in6_addr sin6_addr;     /* IPv6 address */
    uint32_t        sin6_scope_id; /* Scope ID (new in 2.4) */
};

struct in6_addr {
    unsigned char   s6_addr[16];   /* IPv6 address */
};
.fi
.in
.sp
.I sin6_family
is always set to
.BR AF_INET6 ;
.I sin6_port
is the protocol port (see
.I sin_port
in
.BR ip (7));
.I sin6_flowinfo
is the IPv6 flow identifier;
.I sin6_addr
is the 128-bit IPv6 address.
.I sin6_scope_id
is an ID depending on the scope of the address.
It is new in Linux 2.4.
Linux supports it only for link-local addresses, in that case
.I sin6_scope_id
contains the interface index (see
.BR netdevice (7))
.PP
IPv6 supports several address types: unicast to address a single
host, multicast to address a group of hosts,
anycast to address the nearest member of a group of hosts
(not implemented in Linux), IPv4-on-IPv6 to
address a IPv4 host, and other reserved address types.
.PP
The address notation for IPv6 is a group of 8 4-digit hexadecimal
numbers, separated with a \(aq:\(aq.
\&"::" stands for a string of 0 bits.
Special addresses are ::1 for loopback and ::FFFF:<IPv4 address>
for IPv4-mapped-on-IPv6.
.PP
The port space of IPv6 is shared with IPv4.
.SS Socket options
IPv6 supports some protocol-specific socket options that can be set with
.BR setsockopt (2)
and read with
.BR getsockopt (2).
The socket option level for IPv6 is
.BR IPPROTO_IPV6 .
A boolean integer flag is zero when it is false, otherwise true.
.TP
.B IPV6_ADDRFORM
Turn an
.B AF_INET6
socket into a socket of a different address family.
Only
.B AF_INET
is currently supported for that.
It is allowed only for IPv6 sockets
that are connected and bound to a v4-mapped-on-v6 address.
The argument is a pointer to an integer containing
.BR AF_INET .
This is useful to pass v4-mapped sockets as file descriptors to
programs that don't know how to deal with the IPv6 API.
.TP
.B IPV6_ADD_MEMBERSHIP, IPV6_DROP_MEMBERSHIP
Control membership in multicast groups.
Argument is a pointer to a
.IR "struct ipv6_mreq" .
.TP
.B IPV6_MTU
.BR getsockopt ():
Retrieve the current known path MTU of the current socket.
Only valid when the socket has been connected.
Returns an integer.

.BR setsockopt ():
Set the MTU to be used for the socket.
The MTU is limited by the device
MTU or the path MTU when path MTU discovery is enabled.
Argument is a pointer to integer.
.TP
.B IPV6_MTU_DISCOVER
Control path-MTU discovery on the socket.
See
.B IP_MTU_DISCOVER
in
.BR ip (7)
for details.
.TP
.B IPV6_MULTICAST_HOPS
Set the multicast hop limit for the socket.
Argument is a pointer to an
integer.
\-1 in the value means use the route default, otherwise it should be
between 0 and 255.
.TP
.B IPV6_MULTICAST_IF
Set the device for outgoing multicast packets on the socket.
This is allowed only for
.B SOCK_DGRAM
and
.B SOCK_RAW
socket.
The argument is a pointer to an interface index (see
.BR netdevice (7))
in an integer.
.TP
.B IPV6_MULTICAST_LOOP
Control whether the socket sees multicast packets that it has send itself.
Argument is a pointer to boolean.
.TP
.BR IPV6_RECVPKTINFO " (since Linux 2.6.14)"
Set delivery of the
.B IPV6_PKTINFO
control message on incoming datagrams.
Such control messages contain a
.IR "struct in6_pktinfo" ,
as per RFC 3542.
Only allowed for
.B SOCK_DGRAM
or
.B SOCK_RAW
sockets.
Argument is a pointer to a boolean value in an integer.
.TP
.nh
.B IPV6_RTHDR, IPV6_AUTHHDR, IPV6_DSTOPTS, IPV6_HOPOPTS, IPV6_FLOWINFO, IPV6_HOPLIMIT
.hy
Set delivery of control messages for incoming datagrams containing
extension headers from the received packet.
.B IPV6_RTHDR
delivers the routing header,
.B IPV6_AUTHHDR
delivers the authentication header,
.B IPV6_DSTOPTS
delivers the destination options,
.B IPV6_HOPOPTS
delivers the hop options,
.B IPV6_FLOWINFO
delivers an integer containing the flow ID,
.B IPV6_HOPLIMIT
delivers an integer containing the hop count of the packet.
The control messages have the same type as the socket option.
All these header options can also be set for outgoing packets
by putting the appropriate control message into the control buffer of
.BR sendmsg (2).
Only allowed for
.B SOCK_DGRAM
or
.B SOCK_RAW
sockets.
Argument is a pointer to a boolean value.
.TP
.B IPV6_RECVERR
Control receiving of asynchronous error options.
See
.B IP_RECVERR
in
.BR ip (7)
for details.
Argument is a pointer to boolean.
.TP
.B IPV6_ROUTER_ALERT
Pass forwarded packets containing a router alert hop-by-hop option to
this socket.
Only allowed for
.B SOCK_RAW
sockets.
The tapped packets are not forwarded by the kernel, it is the
user's responsibility to send them out again.
Argument is a pointer to an integer.
A positive integer indicates a router alert option value to intercept.
Packets carrying a router alert option with a value field containing
this integer will be delivered to the socket.
A negative integer disables delivery of packets with router alert options
to this socket.
.TP
.B IPV6_UNICAST_HOPS
Set the unicast hop limit for the socket.
Argument is a pointer to an integer.
\-1 in the value means use the route default,
otherwise it should be between 0 and 255.
.TP
.BR IPV6_V6ONLY " (since Linux 2.4.21 and 2.6)"
.\" See RFC 3493
If this flag is set to true (nonzero), then the socket is restricted
to sending and receiving IPv6 packets only.
In this case, an IPv4 and an IPv6 application can bind
to a single port at the same time.

If this flag is set to false (zero),
then the socket can be used to send and receive packets
to and from an IPv6 address or an IPv4-mapped IPv6 address.

The argument is a pointer to a boolean value in an integer.

The default value for this flag is defined by the contents of the file
.IR /proc/sys/net/ipv6/bindv6only .
The default value for that file is 0 (false).
.\" FLOWLABEL_MGR, FLOWINFO_SEND
.SH ERRORS
.TP
.B ENODEV
The user tried to
.BR bind (2)
to a link-local IPv6 address, but the
.I sin6_scope_id
in the supplied
.I sockaddr_in6
structure is not a valid
interface index.
.SH VERSIONS
Linux 2.4 will break binary compatibility for the
.I sockaddr_in6
for 64-bit
hosts by changing the alignment of
.I in6_addr
and adding an additional
.I sin6_scope_id
field.
The kernel interfaces stay compatible, but a program including
.I sockaddr_in6
or
.I in6_addr
into other structures may not be.
This is not
a problem for 32-bit hosts like i386.
.PP
The
.I sin6_flowinfo
field is new in Linux 2.4.
It is transparently passed/read by the kernel
when the passed address length contains it.
Some programs that pass a longer address buffer and then
check the outgoing address length may break.
.SH NOTES
The
.I sockaddr_in6
structure is bigger than the generic
.IR sockaddr .
Programs that assume that all address types can be stored safely in a
.I struct sockaddr
need to be changed to use
.I struct sockaddr_storage
for that instead.
.PP
.BR SOL_IP ,
.BR SOL_IPV6 ,
.B SOL_ICMPV6
and other
.BR SOL_ *
socket options are nonportable variants of
.BR IPPROTO_ *.
See also
.BR ip (7).
.SH BUGS
The IPv6 extended API as in RFC\ 2292 is currently only partly
implemented;
although the 2.2 kernel has near complete support for receiving options,
the macros for generating IPv6 options are missing in glibc 2.1.
.PP
IPSec support for EH and AH headers is missing.
.PP
Flow label management is not complete and not documented here.
.PP
This man page is not complete.
.SH SEE ALSO
.BR cmsg (3),
.BR ip (7)
.PP
RFC\ 2553: IPv6 BASIC API;
Linux tries to be compliant to this.
RFC\ 2460: IPv6 specification.
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
'\" t -*- coding: UTF-8 -*-
.\" Copyright 2009    Lefteris Dimitroulakis (edimitro@tee.gr)
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.TH ISO_8859-10 7 2014-10-02 "Linux" "Linux Programmer's Manual"
.SH NAME
iso_8859-10 \- ISO 8859-10 character set encoded in octal, decimal,
and hexadecimal
.SH DESCRIPTION
The ISO 8859 standard includes several 8-bit extensions to the ASCII
character set (also known as ISO 646-IRV).
ISO 8859-10 encodes the
characters used in Nordic languages.
.SS ISO 8859 alphabets
The full set of ISO 8859 alphabets includes:
.TS
l l.
ISO 8859-1	West European languages (Latin-1)
ISO 8859-2	Central and East European languages (Latin-2)
ISO 8859-3	Southeast European and miscellaneous languages (Latin-3)
ISO 8859-4	Scandinavian/Baltic languages (Latin-4)
ISO 8859-5	Latin/Cyrillic
ISO 8859-6	Latin/Arabic
ISO 8859-7	Latin/Greek
ISO 8859-8	Latin/Hebrew
ISO 8859-9	Latin-1 modification for Turkish (Latin-5)
ISO 8859-10	Lappish/Nordic/Eskimo languages (Latin-6)
ISO 8859-11	Latin/Thai
ISO 8859-13	Baltic Rim languages (Latin-7)
ISO 8859-14	Celtic (Latin-8)
ISO 8859-15	West European languages (Latin-9)
ISO 8859-16	Romanian (Latin-10)
.TE
.SS ISO 8859-10 characters
The following table displays the characters in ISO 8859-10, which
are printable and unlisted in the
.BR ascii (7)
manual page.
.TS
l l l c lp-1.
Oct	Dec	Hex	Char	Description
_
240	160	A0	 	NO-BREAK SPACE
241	161	A1	Ą	LATIN CAPITAL LETTER A WITH OGONEK
242	162	A2	Ē	LATIN CAPITAL LETTER E WITH MACRON
243	163	A3	Ģ	LATIN CAPITAL LETTER G WITH CEDILLA
244	164	A4	Ī	LATIN CAPITAL LETTER I WITH MACRON
245	165	A5	Ĩ	LATIN CAPITAL LETTER I WITH TILDE
246	166	A6	Ķ	LATIN CAPITAL LETTER K WITH CEDILLA
247	167	A7	§	SECTION SIGN
250	168	A8	Ļ	LATIN CAPITAL LETTER L WITH CEDILLA
251	169	A9	Đ	LATIN CAPITAL LETTER D WITH STROKE
252	170	AA	Š	LATIN CAPITAL LETTER S WITH CARON
253	171	AB	Ŧ	LATIN CAPITAL LETTER T WITH STROKE
254	172	AC	Ž	LATIN CAPITAL LETTER Z WITH CARON
255	173	AD	­	SOFT HYPHEN
256	174	AE	Ū	LATIN CAPITAL LETTER U WITH MACRON
257	175	AF	Ŋ	LATIN CAPITAL LETTER ENG
260	176	B0	°	DEGREE SIGN
261	177	B1	ą	LATIN SMALL LETTER A WITH OGONEK
262	178	B2	ē	LATIN SMALL LETTER E WITH MACRON
263	179	B3	ģ	LATIN SMALL LETTER G WITH CEDILLA
264	180	B4	ī	LATIN SMALL LETTER I WITH MACRON
265	181	B5	ĩ	LATIN SMALL LETTER I WITH TILDE
266	182	B6	ķ	LATIN SMALL LETTER K WITH CEDILLA
267	183	B7	·	MIDDLE DOT
270	184	B8	ļ	LATIN SMALL LETTER L WITH CEDILLA
271	185	B9	đ	LATIN SMALL LETTER D WITH STROKE
272	186	BA	š	LATIN SMALL LETTER S WITH CARON
273	187	BB	ŧ	LATIN SMALL LETTER T WITH STROKE
274	188	BC	ž	LATIN SMALL LETTER Z WITH CARON
275	189	BD	―	HORIZONTAL BAR
276	190	BE	ū	LATIN SMALL LETTER U WITH MACRON
277	191	BF	ŋ	LATIN SMALL LETTER ENG
300	192	C0	Ā	LATIN CAPITAL LETTER A WITH MACRON
301	193	C1	Á	LATIN CAPITAL LETTER A WITH ACUTE
302	194	C2	Â	LATIN CAPITAL LETTER A WITH CIRCUMFLEX
303	195	C3	Ã	LATIN CAPITAL LETTER A WITH TILDE
304	196	C4	Ä	LATIN CAPITAL LETTER A WITH DIAERESIS
305	197	C5	Å	LATIN CAPITAL LETTER A WITH RING ABOVE
306	198	C6	Æ	LATIN CAPITAL LETTER AE
307	199	C7	Į	LATIN CAPITAL LETTER I WITH OGONEK
310	200	C8	Č	LATIN CAPITAL LETTER C WITH CARON
311	201	C9	É	LATIN CAPITAL LETTER E WITH ACUTE
312	202	CA	Ę	LATIN CAPITAL LETTER E WITH OGONEK
312	202	CB	Ë	LATIN CAPITAL LETTER E WITH DIAERESIS
314	204	CC	Ė	LATIN CAPITAL LETTER E WITH DOT ABOVE
315	205	CD	Í	LATIN CAPITAL LETTER I WITH ACUTE
316	206	CE	Î	LATIN CAPITAL LETTER I WITH CIRCUMFLEX
317	207	CF	Ï	LATIN CAPITAL LETTER I WITH DIAERESIS
320	208	D0	Ð	LATIN CAPITAL LETTER ETH
321	209	D1	Ņ	LATIN CAPITAL LETTER N WITH CEDILLA
322	210	D2	Ō	LATIN CAPITAL LETTER O WITH MACRON
323	211	D3	Ó	LATIN CAPITAL LETTER O WITH ACUTE
324	212	D4	Ô	LATIN CAPITAL LETTER O WITH CIRCUMFLEX
325	213	D5	Õ	LATIN CAPITAL LETTER O WITH TILDE
326	214	D6	Ö	LATIN CAPITAL LETTER O WITH DIAERESIS
327	215	D7	Ũ	LATIN CAPITAL LETTER U WITH TILDE
330	216	D8	Ø	LATIN CAPITAL LETTER O WITH STROKE
331	217	D9	Ų	LATIN CAPITAL LETTER U WITH OGONEK
332	218	DA	Ú	LATIN CAPITAL LETTER U WITH ACUTE
333	219	DB	Û	LATIN CAPITAL LETTER U WITH CIRCUMFLEX
334	220	DC	Ü	LATIN CAPITAL LETTER U WITH DIAERESIS
335	221	DD	Ý	LATIN CAPITAL LETTER Y WITH ACUTE
336	222	DE	Þ	LATIN CAPITAL LETTER THORN
337	223	DF	ß	LATIN SMALL LETTER SHARP S
340	224	E0	ā	LATIN SMALL LETTER A WITH MACRON
341	225	E1	á	LATIN SMALL LETTER A WITH ACUTE
342	226	E2	â	LATIN SMALL LETTER A WITH CIRCUMFLEX
343	227	E3	ã	LATIN SMALL LETTER A WITH TILDE
344	228	E4	ä	LATIN SMALL LETTER A WITH DIAERESIS
345	229	E5	å	LATIN SMALL LETTER A WITH RING ABOVE
346	230	E6	æ	LATIN SMALL LETTER AE
347	231	E7	į	LATIN SMALL LETTER I WITH OGONEK
350	232	E8	č	LATIN SMALL LETTER C WITH CARON
351	233	E9	é	LATIN SMALL LETTER E WITH ACUTE
352	234	EA	ę	LATIN SMALL LETTER E WITH OGONEK
353	235	EB	ë	LATIN SMALL LETTER E WITH DIAERESIS
354	236	EC	ė	LATIN SMALL LETTER E WITH DOT ABOVE
355	237	ED	í	LATIN SMALL LETTER I WITH ACUTE
356	238	EE	î	LATIN SMALL LETTER I WITH CIRCUMFLEX
357	239	EF	ï	LATIN SMALL LETTER I WITH DIAERESIS
360	240	F0	ð	LATIN SMALL LETTER ETH
361	241	F1	ņ	LATIN SMALL LETTER N WITH CEDILLA
362	242	F2	ō	LATIN SMALL LETTER O WITH MACRON
363	243	F3	ó	LATIN SMALL LETTER O WITH ACUTE
364	244	F4	ô	LATIN SMALL LETTER O WITH CIRCUMFLEX
365	245	F5	õ	LATIN SMALL LETTER O WITH TILDE
366	246	F6	ö	LATIN SMALL LETTER O WITH DIAERESIS
367	247	F7	ũ	LATIN SMALL LETTER U WITH TILDE
370	248	F8	ø	LATIN SMALL LETTER O WITH STROKE
371	249	F9	ų	LATIN SMALL LETTER U WITH OGONEK
372	250	FA	ú	LATIN SMALL LETTER U WITH ACUTE
373	251	FB	û	LATIN SMALL LETTER U WITH CIRCUMFLEX
374	252	FC	ü	LATIN SMALL LETTER U WITH DIAERESIS
375	253	FD	ý	LATIN SMALL LETTER Y WITH ACUTE
376	254	FE	þ	LATIN SMALL LETTER THORN
377	255	FF	ĸ	LATIN SMALL LETTER KRA
.TE
.SH NOTES
ISO 8859-10 is also known as Latin-6.
.SH SEE ALSO
.BR ascii (7),
.BR charsets (7),
.BR utf-8 (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
'\" t -*- coding: UTF-8 -*-
.\" Copyright 2009 Lefteris Dimitroulakis <edimitro at tee.gr>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.\"Thanomsub Noppaburana <donga.nb@gmail.com> made valuable suggestions.
.\"
.TH ISO_8859-11 7 2014-10-02 "Linux" "Linux Programmer's Manual"
.SH NAME
iso_8859-11 \- ISO 8859-11 character set encoded in octal, decimal,
and hexadecimal
.SH DESCRIPTION
The ISO 8859 standard includes several 8-bit extensions to the ASCII
character set (also known as ISO 646-IRV).
ISO 8859-11 encodes the
characters used in the Thai language.
.SS ISO 8859 alphabets
The full set of ISO 8859 alphabets includes:
.TS
l l.
ISO 8859-1	West European languages (Latin-1)
ISO 8859-2	Central and East European languages (Latin-2)
ISO 8859-3	Southeast European and miscellaneous languages (Latin-3)
ISO 8859-4	Scandinavian/Baltic languages (Latin-4)
ISO 8859-5	Latin/Cyrillic
ISO 8859-6	Latin/Arabic
ISO 8859-7	Latin/Greek
ISO 8859-8	Latin/Hebrew
ISO 8859-9	Latin-1 modification for Turkish (Latin-5)
ISO 8859-10	Lappish/Nordic/Eskimo languages (Latin-6)
ISO 8859-11	Latin/Thai
ISO 8859-13	Baltic Rim languages (Latin-7)
ISO 8859-14	Celtic (Latin-8)
ISO 8859-15	West European languages (Latin-9)
ISO 8859-16	Romanian (Latin-10)
.TE
.SS ISO 8859-11 characters
The following table displays the characters in ISO 8859-11, which
are printable and unlisted in the
.BR ascii (7)
manual page.
.TS
l l l c lp-1.
Oct	Dec	Hex	Char	Description
_
240	160	A0	 	NO-BREAK SPACE
241	161	A1	ก	THAI CHARACTER KO KAI
242	162	A2	ข	THAI CHARACTER KHO KHAI
243	163	A3	ฃ	THAI CHARACTER KHO KHUAT
244	164	A4	ค	THAI CHARACTER KHO KHWAI
245	165	A5	ฅ	THAI CHARACTER KHO KHON
246	166	A6	ฆ	THAI CHARACTER KHO RAKHANG
247	167	A7	ง	THAI CHARACTER NGO NGU
250	168	A8	จ	THAI CHARACTER CHO CHAN
251	169	A9	ฉ	THAI CHARACTER CHO CHING
252	170	AA	ช	THAI CHARACTER CHO CHANG
253	171	AB	ซ	THAI CHARACTER SO SO
254	172	AC	ฌ	THAI CHARACTER CHO CHOE
255	173	AD	ญ	THAI CHARACTER YO YING
256	174	AE	ฎ	THAI CHARACTER DO CHADA
257	175	AF	ฏ	THAI CHARACTER TO PATAK
260	176	B0	ฐ	THAI CHARACTER THO THAN
261	177	B1	ฑ	THAI CHARACTER THO NANGMONTHO
262	178	B2	ฒ	THAI CHARACTER THO PHUTHAO
263	179	B3	ณ	THAI CHARACTER NO NEN
264	180	B4	ด	THAI CHARACTER DO DEK
265	181	B5	ต	THAI CHARACTER TO TAO
266	182	B6	ถ	THAI CHARACTER THO THUNG
267	183	B7	ท	THAI CHARACTER THO THAHAN
270	184	B8	ธ	THAI CHARACTER THO THONG
271	185	B9	น	THAI CHARACTER NO NU
272	186	BA	บ	THAI CHARACTER BO BAIMAI
273	187	BB	ป	THAI CHARACTER PO PLA
274	188	BC	ผ	THAI CHARACTER PHO PHUNG
275	189	BD	ฝ	THAI CHARACTER FO FA
276	190	BE	พ	THAI CHARACTER PHO PHAN
277	191	BF	ฟ	THAI CHARACTER FO FAN
300	192	C0	ภ	THAI CHARACTER PHO SAMPHAO
301	193	C1	ม	THAI CHARACTER MO MA
302	194	C2	ย	THAI CHARACTER YO YAK
303	195	C3	ร	THAI CHARACTER RO RUA
304	196	C4	ฤ	THAI CHARACTER RU
305	197	C5	ล	THAI CHARACTER LO LING
306	198	C6	ฦ	THAI CHARACTER LU
307	199	C7	ว	THAI CHARACTER WO WAEN
310	200	C8	ศ	THAI CHARACTER SO SALA
311	201	C9	ษ	THAI CHARACTER SO RUSI
312	202	CA	ส	THAI CHARACTER SO SUA
313	203	CB	ห	THAI CHARACTER HO HIP
314	204	CC	ฬ	THAI CHARACTER LO CHULA
315	205	CD	อ	THAI CHARACTER O ANG
316	206	CE	ฮ	THAI CHARACTER HO NOKHUK
317	207	CF	ฯ	THAI CHARACTER PAIYANNOI
320	208	D0	ะ	THAI CHARACTER SARA A
321	209	D1	ั 	THAI CHARACTER MAI HAN-AKAT
322	210	D2	า	THAI CHARACTER SARA AA
323	211	D3	ำ	THAI CHARACTER SARA AM
324	212	D4	ิ 	THAI CHARACTER SARA I
325	213	D5	ี 	THAI CHARACTER SARA II
326	214	D6	ึ 	THAI CHARACTER SARA UE
327	215	D7	ื 	THAI CHARACTER SARA UEE
330	216	D8	ุ 	THAI CHARACTER SARA U
331	217	D9	ู 	THAI CHARACTER SARA UU
332	218	DA	ฺ 	THAI CHARACTER PHINTHU
337	223	DF	฿	THAI CURRENCY SYMBOL BAHT
340	224	E0	เ	THAI CHARACTER SARA E
341	225	E1	แ	THAI CHARACTER SARA AE
342	226	E2	โ	THAI CHARACTER SARA O
343	227	E3	ใ	THAI CHARACTER SARA AI MAIMUAN
344	228	E4	ไ	THAI CHARACTER SARA AI MAIMALAI
345	229	E5	ๅ	THAI CHARACTER LAKKHANGYAO
346	230	E6	ๆ	THAI CHARACTER MAIYAMOK
347	231	E7	็ 	THAI CHARACTER MAITAIKHU
350	232	E8	่ 	THAI CHARACTER MAI EK
351	233	E9	้ 	THAI CHARACTER MAI THO
352	234	EA	๊ 	THAI CHARACTER MAI TRI
353	235	EB	๋ 	THAI CHARACTER MAI CHATTAWA
354	236	EC	์ 	THAI CHARACTER THANTHAKHAT
355	237	ED	ํ 	THAI CHARACTER NIKHAHIT
356	238	EE	๎ 	THAI CHARACTER YAMAKKAN
357	239	EF	๏	THAI CHARACTER FONGMAN
360	240	F0	๐	THAI DIGIT ZERO
361	241	F1	๑	THAI DIGIT ONE
362	242	F2	๒	THAI DIGIT TWO
363	243	F3	๓	THAI DIGIT THREE
364	244	F4	๔	THAI DIGIT FOUR
365	245	F5	๕	THAI DIGIT FIVE
366	246	F6	๖	THAI DIGIT SIX
367	247	F7	๗	THAI DIGIT SEVEN
370	248	F8	๘	THAI DIGIT EIGHT
371	249	F9	๙	THAI DIGIT NINE
372	250	FA	๚	THAI CHARACTER ANGKHANKHU
373	251	FB	๛	THAI CHARACTER KHOMUT
.TE
.SH NOTES
ISO 8859-11 is the same as TIS (Thai Industrial Standard) 620-2253,
commonly known as TIS-620, except for the character in position A0:
ISO 8859-11 defines this as NO-BREAK SPACE,
while TIS-620 leaves it undefined.
.SH SEE ALSO
.BR ascii (7),
.BR charsets (7),
.BR utf-8 (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
'\" t -*- coding: UTF-8 -*-
.\" Copyright 2009   Lefteris Dimitroulakis (edimitro@tee.gr)
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.TH ISO_8859-13 7 2014-10-02 "Linux" "Linux Programmer's Manual"
.SH NAME
iso_8859-13 \- ISO 8859-13 character set encoded in octal, decimal,
and hexadecimal
.SH DESCRIPTION
The ISO 8859 standard includes several 8-bit extensions to the ASCII
character set (also known as ISO 646-IRV).
ISO 8859-13 encodes the
characters used in Baltic Rim languages.
.SS ISO 8859 alphabets
The full set of ISO 8859 alphabets includes:
.TS
l l.
ISO 8859-1	West European languages (Latin-1)
ISO 8859-2	Central and East European languages (Latin-2)
ISO 8859-3	Southeast European and miscellaneous languages (Latin-3)
ISO 8859-4	Scandinavian/Baltic languages (Latin-4)
ISO 8859-5	Latin/Cyrillic
ISO 8859-6	Latin/Arabic
ISO 8859-7	Latin/Greek
ISO 8859-8	Latin/Hebrew
ISO 8859-9	Latin-1 modification for Turkish (Latin-5)
ISO 8859-10	Lappish/Nordic/Eskimo languages (Latin-6)
ISO 8859-11	Latin/Thai
ISO 8859-13	Baltic Rim languages (Latin-7)
ISO 8859-14	Celtic (Latin-8)
ISO 8859-15	West European languages (Latin-9)
ISO 8859-16	Romanian (Latin-10)
.TE
.SS ISO 8859-13 characters
The following table displays the characters in ISO 8859-13, which
are printable and unlisted in the
.BR ascii (7)
manual page.
.TS
l l l c lp-1.
Oct	Dec	Hex	Char	Description
_
240	160	A0	 	NO-BREAK SPACE
241	161	A1	”	RIGHT DOUBLE QUOTATION MARK
242	162	A2	¢	CENT SIGN
243	163	A3	£	POUND SIGN
244	164	A4	¤	CURRENCY SIGN
245	165	A5	„	DOUBLE LOW-9 QUOTATION MARK
246	166	A6	¦	BROKEN BAR
247	167	A7	§	SECTION SIGN
250	168	A8	Ø	LATIN CAPITAL LETTER O WITH STROKE
251	169	A9	©	COPYRIGHT SIGN
252	170	AA	Ŗ	LATIN CAPITAL LETTER R WITH CEDILLA
253	171	AB	«	LEFT-POINTING DOUBLE ANGLE QUOTATION MARK
254	172	AC	¬	NOT SIGN
255	173	AD	­	SOFT HYPHEN
256	174	AE	®	REGISTERED SIGN
257	175	AF	Æ	LATIN CAPITAL LETTER AE
260	176	B0	°	DEGREE SIGN
261	177	B1	±	PLUS-MINUS SIGN
262	178	B2	²	SUPERSCRIPT TWO
263	179	B3	³	SUPERSCRIPT THREE
264	180	B4	“	LEFT DOUBLE QUOTATION MARK
265	181	B5	µ	MICRO SIGN
266	182	B6	¶	PILCROW SIGN
267	183	B7	·	MIDDLE DOT
270	184	B8	ø	LATIN SMALL LETTER O WITH STROKE
271	185	B9	¹	SUPERSCRIPT ONE
272	186	BA	ŗ	LATIN SMALL LETTER R WITH CEDILLA
273	187	BB	»	RIGHT-POINTING DOUBLE ANGLE QUOTATION MARK
274	188	BC	¼	VULGAR FRACTION ONE QUARTER
275	189	BD	½	VULGAR FRACTION ONE HALF
276	190	BE	¾	VULGAR FRACTION THREE QUARTERS
277	191	BF	æ	LATIN SMALL LETTER AE
300	192	C0	Ą	LATIN CAPITAL LETTER A WITH OGONEK
301	193	C1	Į	LATIN CAPITAL LETTER I WITH OGONEK
302	194	C2	Ā	LATIN CAPITAL LETTER A WITH MACRON
303	195	C3	Ć	LATIN CAPITAL LETTER C WITH ACUTE
304	196	C4	Ä	LATIN CAPITAL LETTER A WITH DIAERESIS
305	197	C5	Å	LATIN CAPITAL LETTER A WITH RING ABOVE
306	198	C6	Ę	LATIN CAPITAL LETTER E WITH OGONEK
307	199	C7	Ē	LATIN CAPITAL LETTER E WITH MACRON
310	200	C8	Č	LATIN CAPITAL LETTER C WITH CARON
311	201	C9	É	LATIN CAPITAL LETTER E WITH ACUTE
312	202	CA	Ź	LATIN CAPITAL LETTER Z WITH ACUTE
313	203	CB	Ė	LATIN CAPITAL LETTER E WITH DOT ABOVE
314	204	CC	Ģ	LATIN CAPITAL LETTER G WITH CEDILLA
315	205	CD	Ķ	LATIN CAPITAL LETTER K WITH CEDILLA
316	206	CE	Ī	LATIN CAPITAL LETTER I WITH MACRON
317	207	CF	Ļ	LATIN CAPITAL LETTER L WITH CEDILLA
320	208	D0	Š	LATIN CAPITAL LETTER S WITH CARON
321	209	D1	Ń	LATIN CAPITAL LETTER N WITH ACUTE
322	210	D2	Ņ	LATIN CAPITAL LETTER N WITH CEDILLA
323	211	D3	Ó	LATIN CAPITAL LETTER O WITH ACUTE
324	212	D4	Ō	LATIN CAPITAL LETTER O WITH MACRON
325	213	D5	Õ	LATIN CAPITAL LETTER O WITH TILDE
326	214	D6	Ö	LATIN CAPITAL LETTER O WITH DIAERESIS
327	215	D7	×	MULTIPLICATION SIGN
330	216	D8	Ų	LATIN CAPITAL LETTER U WITH OGONEK
331	217	D9	Ł	LATIN CAPITAL LETTER L WITH STROKE
332	218	DA	Ś	LATIN CAPITAL LETTER S WITH ACUTE
333	219	DB	Ū	LATIN CAPITAL LETTER U WITH MACRON
334	220	DC	Ü	LATIN CAPITAL LETTER U WITH DIAERESIS
335	221	DD	Ż	LATIN CAPITAL LETTER Z WITH DOT ABOVE
336	222	DE	Ž	LATIN CAPITAL LETTER Z WITH CARON
337	223	DF	ß	LATIN SMALL LETTER SHARP S
340	224	E0	ą	LATIN SMALL LETTER A WITH OGONEK
341	225	E1	į	LATIN SMALL LETTER I WITH OGONEK
342	226	E2	ā	LATIN SMALL LETTER A WITH MACRON
343	227	E3	ć	LATIN SMALL LETTER C WITH ACUTE
344	228	E4	ä	LATIN SMALL LETTER A WITH DIAERESIS
345	229	E5	å	LATIN SMALL LETTER A WITH RING ABOVE
346	230	E6	ę	LATIN SMALL LETTER E WITH OGONEK
347	231	E7	ē	LATIN SMALL LETTER E WITH MACRON
350	232	E8	č	LATIN SMALL LETTER C WITH CARON
351	233	E9	é	LATIN SMALL LETTER E WITH ACUTE
352	234	EA	ź	LATIN SMALL LETTER Z WITH ACUTE
353	235	EB	ė	LATIN SMALL LETTER E WITH DOT ABOVE
354	236	EC	ģ	LATIN SMALL LETTER G WITH CEDILLA
355	237	ED	ķ	LATIN SMALL LETTER K WITH CEDILLA
356	238	EE	ī	LATIN SMALL LETTER I WITH MACRON
357	239	EF	ļ	LATIN SMALL LETTER L WITH CEDILLA
360	240	F0	š	LATIN SMALL LETTER S WITH CARON
361	241	F1	ń	LATIN SMALL LETTER N WITH ACUTE
362	242	F2	ņ	LATIN SMALL LETTER N WITH CEDILLA
363	243	F3	ó	LATIN SMALL LETTER O WITH ACUTE
364	244	F4	ō	LATIN SMALL LETTER O WITH MACRON
365	245	F5	õ	LATIN SMALL LETTER O WITH TILDE
366	246	F6	ö	LATIN SMALL LETTER O WITH DIAERESIS
367	247	F7	÷	DIVISION SIGN
370	248	F8	ų	LATIN SMALL LETTER U WITH OGONEK
371	249	F9	ł	LATIN SMALL LETTER L WITH STROKE
372	250	FA	ś	LATIN SMALL LETTER S WITH ACUTE
373	251	FB	ū	LATIN SMALL LETTER U WITH MACRON
374	252	FC	ü	LATIN SMALL LETTER U WITH DIAERESIS
375	253	FD	ż	LATIN SMALL LETTER Z WITH DOT ABOVE
376	254	FE	ž	LATIN SMALL LETTER Z WITH CARON
377	255	FF	’	RIGHT SINGLE QUOTATION MARK
.TE
.SH NOTES
ISO 8859-13 is also known as Latin-7.
.SH SEE ALSO
.BR ascii (7),
.BR charsets (7),
.BR utf-8 (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
'\" t -*- coding: UTF-8 -*-
.\" Copyright 2009   Lefteris Dimitroulakis (edimitro@tee.gr)
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.TH ISO_8859-14 7 2014-10-02 "Linux" "Linux Programmer's Manual"
.SH NAME
iso_8859-14 \- ISO 8859-14 character set encoded in octal, decimal,
and hexadecimal
.SH DESCRIPTION
The ISO 8859 standard includes several 8-bit extensions to the ASCII
character set (also known as ISO 646-IRV).
ISO 8859-14 encodes the
characters used in Celtic languages.
.SS ISO 8859 alphabets
The full set of ISO 8859 alphabets includes:
.TS
l l.
ISO 8859-1	West European languages (Latin-1)
ISO 8859-2	Central and East European languages (Latin-2)
ISO 8859-3	Southeast European and miscellaneous languages (Latin-3)
ISO 8859-4	Scandinavian/Baltic languages (Latin-4)
ISO 8859-5	Latin/Cyrillic
ISO 8859-6	Latin/Arabic
ISO 8859-7	Latin/Greek
ISO 8859-8	Latin/Hebrew
ISO 8859-9	Latin-1 modification for Turkish (Latin-5)
ISO 8859-10	Lappish/Nordic/Eskimo languages (Latin-6)
ISO 8859-11	Latin/Thai
ISO 8859-13	Baltic Rim languages (Latin-7)
ISO 8859-14	Celtic (Latin-8)
ISO 8859-15	West European languages (Latin-9)
ISO 8859-16	Romanian (Latin-10)
.TE
.SS ISO 8859-14 characters
The following table displays the characters in ISO 8859-14, which
are printable and unlisted in the
.BR ascii (7)
manual page.
.TS
l l l c lp-1.
Oct	Dec	Hex	Char	Description
_
240	160	A0	 	NO-BREAK SPACE
241	161	A1	Ḃ	LATIN CAPITAL LETTER B WITH DOT ABOVE
242	162	A2	ḃ	LATIN SMALL LETTER B WITH DOT ABOVE
243	163	A3	£	POUND SIGN
244	164	A4	Ċ	LATIN CAPITAL LETTER C WITH DOT ABOVE
245	165	A5	ċ	LATIN SMALL LETTER C WITH DOT ABOVE
246	166	A6	Ḋ	LATIN CAPITAL LETTER D WITH DOT ABOVE
247	167	A7	§	SECTION SIGN
250	168	A8	Ẁ	LATIN CAPITAL LETTER W WITH GRAVE
251	169	A9	©	COPYRIGHT SIGN
252	170	AA	Ẃ	LATIN CAPITAL LETTER W WITH ACUTE
253	171	AB	ḋ	LATIN SMALL LETTER D WITH DOT ABOVE
254	172	AC	Ỳ	LATIN CAPITAL LETTER Y WITH GRAVE
255	173	AD	­	SOFT HYPHEN
256	174	AE	®	REGISTERED SIGN
257	175	AF	Ÿ	LATIN CAPITAL LETTER Y WITH DIAERESIS
260	176	B0	Ḟ	LATIN CAPITAL LETTER F WITH DOT ABOVE
261	177	B1	ḟ	LATIN SMALL LETTER F WITH DOT ABOVE
262	178	B2	Ġ	LATIN CAPITAL LETTER G WITH DOT ABOVE
263	179	B3	ġ	LATIN SMALL LETTER G WITH DOT ABOVE
264	180	B4	Ṁ	LATIN CAPITAL LETTER M WITH DOT ABOVE
265	181	B5	ṁ	LATIN SMALL LETTER M WITH DOT ABOVE
266	182	B6	¶	PILCROW SIGN
267	183	B7	Ṗ	LATIN CAPITAL LETTER P WITH DOT ABOVE
270	184	B8	ẁ	LATIN SMALL LETTER W WITH GRAVE
271	185	B9	ṗ	LATIN SMALL LETTER P WITH DOT ABOVE
272	186	BA	ẃ	LATIN SMALL LETTER W WITH ACUTE
273	187	BB	Ṡ	LATIN CAPITAL LETTER S WITH DOT ABOVE
274	188	BC	ỳ	LATIN SMALL LETTER Y WITH GRAVE
275	189	BD	Ẅ	LATIN CAPITAL LETTER W WITH DIAERESIS
276	190	BE	ẅ	LATIN SMALL LETTER W WITH DIAERESIS
277	191	BF	ṡ	LATIN SMALL LETTER S WITH DOT ABOVE
300	192	C0	À	LATIN CAPITAL LETTER A WITH GRAVE
301	193	C1	Á	LATIN CAPITAL LETTER A WITH ACUTE
302	194	C2	Â	LATIN CAPITAL LETTER A WITH CIRCUMFLEX
303	195	C3	Ã	LATIN CAPITAL LETTER A WITH TILDE
304	196	C4	Ä	LATIN CAPITAL LETTER A WITH DIAERESIS
305	197	C5	Å	LATIN CAPITAL LETTER A WITH RING ABOVE
306	198	C6	Æ	LATIN CAPITAL LETTER AE
307	199	C7	Ç	LATIN CAPITAL LETTER C WITH CEDILLA
310	200	C8	È	LATIN CAPITAL LETTER E WITH GRAVE
311	201	C9	É	LATIN CAPITAL LETTER E WITH ACUTE
312	202	CA	Ê	LATIN CAPITAL LETTER E WITH CIRCUMFLEX
313	203	CB	Ë	LATIN CAPITAL LETTER E WITH DIAERESIS
314	204	CC	Ì	LATIN CAPITAL LETTER I WITH GRAVE
315	205	CD	Í	LATIN CAPITAL LETTER I WITH ACUTE
316	206	CE	Î	LATIN CAPITAL LETTER I WITH CIRCUMFLEX
317	207	CF	Ï	LATIN CAPITAL LETTER I WITH DIAERESIS
320	208	D0	Ŵ	LATIN CAPITAL LETTER W WITH CIRCUMFLEX
321	209	D1	Ñ	LATIN CAPITAL LETTER N WITH TILDE
322	210	D2	Ò	LATIN CAPITAL LETTER O WITH GRAVE
323	211	D3	Ó	LATIN CAPITAL LETTER O WITH ACUTE
324	212	D4	Ô	LATIN CAPITAL LETTER O WITH CIRCUMFLEX
325	213	D5	Õ	LATIN CAPITAL LETTER O WITH TILDE
326	214	D6	Ö	LATIN CAPITAL LETTER O WITH DIAERESIS
327	215	D7	Ṫ	LATIN CAPITAL LETTER T WITH DOT ABOVE
330	216	D8	Ø	LATIN CAPITAL LETTER O WITH STROKE
331	217	D9	Ù	LATIN CAPITAL LETTER U WITH GRAVE
332	218	DA	Ú	LATIN CAPITAL LETTER U WITH ACUTE
333	219	DB	Û	LATIN CAPITAL LETTER U WITH CIRCUMFLEX
334	220	DC	Ü	LATIN CAPITAL LETTER U WITH DIAERESIS
335	221	DD	Ý	LATIN CAPITAL LETTER Y WITH ACUTE
336	222	DE	Ŷ	LATIN CAPITAL LETTER Y WITH CIRCUMFLEX
337	223	DF	ß	LATIN SMALL LETTER SHARP S
340	224	E0	à	LATIN SMALL LETTER A WITH GRAVE
341	225	E1	á	LATIN SMALL LETTER A WITH ACUTE
342	226	E2	â	LATIN SMALL LETTER A WITH CIRCUMFLEX
343	227	E3	ã	LATIN SMALL LETTER A WITH TILDE
344	228	E4	ä	LATIN SMALL LETTER A WITH DIAERESIS
345	229	E5	å	LATIN SMALL LETTER A WITH RING ABOVE
346	230	E6	æ	LATIN SMALL LETTER AE
347	231	E7	ç	LATIN SMALL LETTER C WITH CEDILLA
350	232	E8	è	LATIN SMALL LETTER E WITH GRAVE
351	233	E9	é	LATIN SMALL LETTER E WITH ACUTE
352	234	EA	ê	LATIN SMALL LETTER E WITH CIRCUMFLEX
353	235	EB	ë	LATIN SMALL LETTER E WITH DIAERESIS
354	236	EC	ì	LATIN SMALL LETTER I WITH GRAVE
355	237	ED	í	LATIN SMALL LETTER I WITH ACUTE
356	238	EE	î	LATIN SMALL LETTER I WITH CIRCUMFLEX
357	239	EF	ï	LATIN SMALL LETTER I WITH DIAERESIS
360	240	F0	ŵ	LATIN SMALL LETTER W WITH CIRCUMFLEX
361	241	F1	ñ	LATIN SMALL LETTER N WITH TILDE
362	242	F2	ò	LATIN SMALL LETTER O WITH GRAVE
363	243	F3	ó	LATIN SMALL LETTER O WITH ACUTE
364	244	F4	ô	LATIN SMALL LETTER O WITH CIRCUMFLEX
365	245	F5	õ	LATIN SMALL LETTER O WITH TILDE
366	246	F6	ö	LATIN SMALL LETTER O WITH DIAERESIS
367	247	F7	ṫ	LATIN SMALL LETTER T WITH DOT ABOVE
370	248	F8	ø	LATIN SMALL LETTER O WITH STROKE
371	249	F9	ù	LATIN SMALL LETTER U WITH GRAVE
372	250	FA	ú	LATIN SMALL LETTER U WITH ACUTE
373	251	FB	û	LATIN SMALL LETTER U WITH CIRCUMFLEX
374	252	FC	ü	LATIN SMALL LETTER U WITH DIAERESIS
375	253	FD	ý	LATIN SMALL LETTER Y WITH ACUTE
376	254	FE	ŷ	LATIN SMALL LETTER Y WITH CIRCUMFLEX
377	255	FF	ÿ	LATIN SMALL LETTER Y WITH DIAERESIS
.TE
.SH NOTES
ISO 8859-14 is also known as Latin-8.
.SH SEE ALSO
.BR ascii (7),
.BR charsets (7),
.BR utf-8 (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
'\" t -*- coding: UTF-8 -*-
.\" Copyright 1993-1995 Daniel Quinlan (quinlan@yggdrasil.com)
.\" Copyright 1999      Dimitri Papadopoulos (dpo@club-internet.fr)
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.TH ISO_8859-15 7 2014-10-02 "Linux" "Linux Programmer's Manual"
.SH NAME
iso_8859-15 \- ISO 8859-15 character set encoded in octal, decimal,
and hexadecimal
.SH DESCRIPTION
The ISO 8859 standard includes several 8-bit extensions to the ASCII
character set (also known as ISO 646-IRV).
ISO 8859-15 encodes the
characters used in many West European languages and adds the Euro sign.
.SS ISO 8859 alphabets
The full set of ISO 8859 alphabets includes:
.TS
l l.
ISO 8859-1	West European languages (Latin-1)
ISO 8859-2	Central and East European languages (Latin-2)
ISO 8859-3	Southeast European and miscellaneous languages (Latin-3)
ISO 8859-4	Scandinavian/Baltic languages (Latin-4)
ISO 8859-5	Latin/Cyrillic
ISO 8859-6	Latin/Arabic
ISO 8859-7	Latin/Greek
ISO 8859-8	Latin/Hebrew
ISO 8859-9	Latin-1 modification for Turkish (Latin-5)
ISO 8859-10	Lappish/Nordic/Eskimo languages (Latin-6)
ISO 8859-11	Latin/Thai
ISO 8859-13	Baltic Rim languages (Latin-7)
ISO 8859-14	Celtic (Latin-8)
ISO 8859-15	West European languages (Latin-9)
ISO 8859-16	Romanian (Latin-10)
.TE
.SS ISO 8859-15 characters
The following table displays the characters in ISO 8859-15, which
are printable and unlisted in the
.BR ascii (7)
manual page.
.TS
l l l c lp-1.
Oct	Dec	Hex	Char	Description
_
240	160	A0	 	NO-BREAK SPACE
241	161	A1	¡	INVERTED EXCLAMATION MARK
242	162	A2	¢	CENT SIGN
243	163	A3	£	POUND SIGN
244	164	A4	€	EURO SIGN
245	165	A5	¥	YEN SIGN
246	166	A6	Š	LATIN CAPITAL LETTER S WITH CARON
247	167	A7	§	SECTION SIGN
250	168	A8	š	LATIN SMALL LETTER S WITH CARON
251	169	A9	©	COPYRIGHT SIGN
252	170	AA	ª	FEMININE ORDINAL INDICATOR
253	171	AB	«	LEFT-POINTING DOUBLE ANGLE QUOTATION MARK
254	172	AC	¬	NOT SIGN
255	173	AD	­	SOFT HYPHEN
256	174	AE	®	REGISTERED SIGN
257	175	AF	¯	MACRON
260	176	B0	°	DEGREE SIGN
261	177	B1	±	PLUS-MINUS SIGN
262	178	B2	²	SUPERSCRIPT TWO
263	179	B3	³	SUPERSCRIPT THREE
264	180	B4	Ž	LATIN CAPITAL LETTER Z WITH CARON
265	181	B5	µ	MICRO SIGN
266	182	B6	¶	PILCROW SIGN
267	183	B7	·	MIDDLE DOT
270	184	B8	ž	LATIN SMALL LETTER Z WITH CARON
271	185	B9	¹	SUPERSCRIPT ONE
272	186	BA	º	MASCULINE ORDINAL INDICATOR
273	187	BB	»	RIGHT-POINTING DOUBLE ANGLE QUOTATION MARK
274	188	BC	Œ	LATIN CAPITAL LIGATURE OE
275	189	BD	œ	LATIN SMALL LIGATURE OE
276	190	BE	Ÿ	LATIN CAPITAL LETTER Y WITH DIAERESIS
277	191	BF	¿	INVERTED QUESTION MARK
300	192	C0	À	LATIN CAPITAL LETTER A WITH GRAVE
301	193	C1	Á	LATIN CAPITAL LETTER A WITH ACUTE
302	194	C2	Â	LATIN CAPITAL LETTER A WITH CIRCUMFLEX
303	195	C3	Ã	LATIN CAPITAL LETTER A WITH TILDE
304	196	C4	Ä	LATIN CAPITAL LETTER A WITH DIAERESIS
305	197	C5	Å	LATIN CAPITAL LETTER A WITH RING ABOVE
306	198	C6	Æ	LATIN CAPITAL LETTER AE
307	199	C7	Ç	LATIN CAPITAL LETTER C WITH CEDILLA
310	200	C8	È	LATIN CAPITAL LETTER E WITH GRAVE
311	201	C9	É	LATIN CAPITAL LETTER E WITH ACUTE
312	202	CA	Ê	LATIN CAPITAL LETTER E WITH CIRCUMFLEX
313	203	CB	Ë	LATIN CAPITAL LETTER E WITH DIAERESIS
314	204	CC	Ì	LATIN CAPITAL LETTER I WITH GRAVE
315	205	CD	Í	LATIN CAPITAL LETTER I WITH ACUTE
316	206	CE	Î	LATIN CAPITAL LETTER I WITH CIRCUMFLEX
317	207	CF	Ï	LATIN CAPITAL LETTER I WITH DIAERESIS
320	208	D0	Ð	LATIN CAPITAL LETTER ETH
321	209	D1	Ñ	LATIN CAPITAL LETTER N WITH TILDE
322	210	D2	Ò	LATIN CAPITAL LETTER O WITH GRAVE
323	211	D3	Ó	LATIN CAPITAL LETTER O WITH ACUTE
324	212	D4	Ô	LATIN CAPITAL LETTER O WITH CIRCUMFLEX
325	213	D5	Õ	LATIN CAPITAL LETTER O WITH TILDE
326	214	D6	Ö	LATIN CAPITAL LETTER O WITH DIAERESIS
327	215	D7	×	MULTIPLICATION SIGN
330	216	D8	Ø	LATIN CAPITAL LETTER O WITH STROKE
331	217	D9	Ù	LATIN CAPITAL LETTER U WITH GRAVE
332	218	DA	Ú	LATIN CAPITAL LETTER U WITH ACUTE
333	219	DB	Û	LATIN CAPITAL LETTER U WITH CIRCUMFLEX
334	220	DC	Ü	LATIN CAPITAL LETTER U WITH DIAERESIS
335	221	DD	Ý	LATIN CAPITAL LETTER Y WITH ACUTE
336	222	DE	Þ	LATIN CAPITAL LETTER THORN
337	223	DF	ß	LATIN SMALL LETTER SHARP S
340	224	E0	à	LATIN SMALL LETTER A WITH GRAVE
341	225	E1	á	LATIN SMALL LETTER A WITH ACUTE
342	226	E2	â	LATIN SMALL LETTER A WITH CIRCUMFLEX
343	227	E3	ã	LATIN SMALL LETTER A WITH TILDE
344	228	E4	ä	LATIN SMALL LETTER A WITH DIAERESIS
345	229	E5	å	LATIN SMALL LETTER A WITH RING ABOVE
346	230	E6	æ	LATIN SMALL LETTER AE
347	231	E7	ç	LATIN SMALL LETTER C WITH CEDILLA
350	232	E8	è	LATIN SMALL LETTER E WITH GRAVE
351	233	E9	é	LATIN SMALL LETTER E WITH ACUTE
352	234	EA	ê	LATIN SMALL LETTER E WITH CIRCUMFLEX
353	235	EB	ë	LATIN SMALL LETTER E WITH DIAERESIS
354	236	EC	ì	LATIN SMALL LETTER I WITH GRAVE
355	237	ED	í	LATIN SMALL LETTER I WITH ACUTE
356	238	EE	î	LATIN SMALL LETTER I WITH CIRCUMFLEX
357	239	EF	ï	LATIN SMALL LETTER I WITH DIAERESIS
360	240	F0	ð	LATIN SMALL LETTER ETH
361	241	F1	ñ	LATIN SMALL LETTER N WITH TILDE
362	242	F2	ò	LATIN SMALL LETTER O WITH GRAVE
363	243	F3	ó	LATIN SMALL LETTER O WITH ACUTE
364	244	F4	ô	LATIN SMALL LETTER O WITH CIRCUMFLEX
365	245	F5	õ	LATIN SMALL LETTER O WITH TILDE
366	246	F6	ö	LATIN SMALL LETTER O WITH DIAERESIS
367	247	F7	÷	DIVISION SIGN
370	248	F8	ø	LATIN SMALL LETTER O WITH STROKE
371	249	F9	ù	LATIN SMALL LETTER U WITH GRAVE
372	250	FA	ú	LATIN SMALL LETTER U WITH ACUTE
373	251	FB	û	LATIN SMALL LETTER U WITH CIRCUMFLEX
374	252	FC	ü	LATIN SMALL LETTER U WITH DIAERESIS
375	253	FD	ý	LATIN SMALL LETTER Y WITH ACUTE
376	254	FE	þ	LATIN SMALL LETTER THORN
377	255	FF	ÿ	LATIN SMALL LETTER Y WITH DIAERESIS
.TE
.SH NOTES
ISO 8859-15 is also known as Latin-9 (or sometimes as Latin-0).
.SH SEE ALSO
.BR ascii (7),
.BR charsets (7),
.BR iso_8859-1 (7),
.BR utf-8 (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
'\" t -*- coding: UTF-8 -*-
.\" Copyright 2002 Ionel Mugurel Ciobîcă (IMCiobica@netscape.net)
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.TH ISO_8859-16 7 2014-10-02 "Linux" "Linux Programmer's Manual"
.SH NAME
iso_8859-16 \- ISO 8859-16 character set encoded in octal, decimal,
and hexadecimal
.SH DESCRIPTION
The ISO 8859 standard includes several 8-bit extensions to the ASCII
character set (also known as ISO 646-IRV).
ISO 8859-16 encodes the
Latin characters used in Southeast European languages.
.SS ISO 8859 alphabets
The full set of ISO 8859 alphabets includes:
.TS
l l.
ISO 8859-1	West European languages (Latin-1)
ISO 8859-2	Central and East European languages (Latin-2)
ISO 8859-3	Southeast European and miscellaneous languages (Latin-3)
ISO 8859-4	Scandinavian/Baltic languages (Latin-4)
ISO 8859-5	Latin/Cyrillic
ISO 8859-6	Latin/Arabic
ISO 8859-7	Latin/Greek
ISO 8859-8	Latin/Hebrew
ISO 8859-9	Latin-1 modification for Turkish (Latin-5)
ISO 8859-10	Lappish/Nordic/Eskimo languages (Latin-6)
ISO 8859-11	Latin/Thai
ISO 8859-13	Baltic Rim languages (Latin-7)
ISO 8859-14	Celtic (Latin-8)
ISO 8859-15	West European languages (Latin-9)
ISO 8859-16	Romanian (Latin-10)
.TE
.SS ISO 8859-16 characters
The following table displays the characters in ISO 8859-16, which
are printable and unlisted in the
.BR ascii (7)
manual page.
.TS
l l l c lp-1.
Oct	Dec	Hex	Char	Description
_
240	160	A0	 	NO-BREAK SPACE
241	161	A1	Ą	LATIN CAPITAL LETTER A WITH OGONEK
242	162	A2	ą	LATIN SMALL LETTER A WITH OGONEK
243	163	A3	Ł	LATIN CAPITAL LETTER L WITH STROKE
244	164	A4	€	EURO SIGN
245	165	A5	„	DOUBLE LOW-9 QUOTATION MARK
246	166	A6	Š	LATIN CAPITAL LETTER S WITH CARON
247	167	A7	§	SECTION SIGN
250	168	A8	š	LATIN SMALL LETTER S WITH CARON
251	169	A9	©	COPYRIGHT SIGN
252	170	AA	Ș	LATIN CAPITAL LETTER S WITH COMMA BELOW
253	171	AB	«	LEFT-POINTING DOUBLE ANGLE QUOTATION MARK
254	172	AC	Ź	LATIN CAPITAL LETTER Z WITH ACUTE
255	173	AD	­	SOFT HYPHEN
256	174	AE	ź	LATIN SMALL LETTER Z WITH ACUTE
257	175	AF	Ż	LATIN CAPITAL LETTER Z WITH DOT ABOVE
260	176	B0	°	DEGREE SIGN
261	177	B1	±	PLUS-MINUS SIGN
262	178	B2	Č	LATIN CAPITAL LETTER C WITH CARON
263	179	B3	ł	LATIN SMALL LETTER L WITH STROKE
264	180	B4	Ž	LATIN CAPITAL LETTER Z WITH CARON
265	181	B5	”	LEFT DOUBLE QUOTATION MARK
266	182	B6	¶	PILCROW SIGN
267	183	B7	·	MIDDLE DOT
270	184	B8	ž	LATIN SMALL LETTER Z WITH CARON
271	185	B9	č	LATIN SMALL LETTER C WITH CARON
272	186	BA	ș	LATIN SMALL LETTER S WITH COMMA BELOW
273	187	BB	»	RIGHT-POINTING DOUBLE ANGLE QUOTATION MARK
274	188	BC	Œ	LATIN CAPITAL LIGATURE OE
275	189	BD	œ	LATIN SMALL LIGATURE OE
276	190	BE	Ÿ	LATIN CAPITAL LETTER Y WITH DIAERESIS
277	191	BF	ż	LATIN SMALL LETTER Z WITH DOT ABOVE
300	192	C0	À	LATIN CAPITAL LETTER A WITH GRAVE
301	193	C1	Á	LATIN CAPITAL LETTER A WITH ACUTE
302	194	C2	Â	LATIN CAPITAL LETTER A WITH CIRCUMFLEX
303	195	C3	Ă	LATIN CAPITAL LETTER A WITH BREVE
304	196	C4	Ä	LATIN CAPITAL LETTER A WITH DIAERESIS
305	197	C5	Ć	LATIN CAPITAL LETTER C WITH ACUTE
306	198	C6	Æ	LATIN CAPITAL LETTER AE
307	199	C7	Ç	LATIN CAPITAL LETTER C WITH CEDILLA
310	200	C8	È	LATIN CAPITAL LETTER E WITH GRAVE
311	201	C9	É	LATIN CAPITAL LETTER E WITH ACUTE
312	202	CA	Ê	LATIN CAPITAL LETTER E WITH CIRCUMFLEX
313	203	CB	Ë	LATIN CAPITAL LETTER E WITH DIAERESIS
314	204	CC	Ì	LATIN CAPITAL LETTER I WITH GRAVE
315	205	CD	Í	LATIN CAPITAL LETTER I WITH ACUTE
316	206	CE	Î	LATIN CAPITAL LETTER I WITH CIRCUMFLEX
317	207	CF	Ï	LATIN CAPITAL LETTER I WITH DIAERESIS
320	208	D0	Đ	LATIN CAPITAL LETTER D WITH STROKE
321	209	D1	Ń	LATIN CAPITAL LETTER N WITH ACUTE
322	210	D2	Ò	LATIN CAPITAL LETTER O WITH GRAVE
323	211	D3	Ó	LATIN CAPITAL LETTER O WITH ACUTE
324	212	D4	Ô	LATIN CAPITAL LETTER O WITH CIRCUMFLEX
325	213	D5	Ő	LATIN CAPITAL LETTER O WITH DOUBLE ACUTE
326	214	D6	Ö	LATIN CAPITAL LETTER O WITH DIAERESIS
327	215	D7	Ś	LATIN CAPITAL LETTER S WITH ACUTE
330	216	D8	Ű	LATIN CAPITAL LETTER U WITH DOUBLE ACUTE
331	217	D9	Ù	LATIN CAPITAL LETTER U WITH GRAVE
332	218	DA	Ú	LATIN CAPITAL LETTER U WITH ACUTE
333	219	DB	Û	LATIN CAPITAL LETTER U WITH CIRCUMFLEX
334	220	DC	Ü	LATIN CAPITAL LETTER U WITH DIAERESIS
335	221	DD	Ę	LATIN CAPITAL LETTER E WITH OGONEK
336	222	DE	Ț	LATIN CAPITAL LETTER T WITH COMMA BELOW
337	223	DF	ß	LATIN SMALL LETTER SHARP S
340	224	E0	à	LATIN SMALL LETTER A WITH GRAVE
341	225	E1	á	LATIN SMALL LETTER A WITH ACUTE
342	226	E2	â	LATIN SMALL LETTER A WITH CIRCUMFLEX
343	227	E3	ă	LATIN SMALL LETTER A WITH BREVE
344	228	E4	ä	LATIN SMALL LETTER A WITH DIAERESIS
345	229	E5	ć	LATIN SMALL LETTER C WITH ACUTE
346	230	E6	æ	LATIN SMALL LETTER AE
347	231	E7	ç	LATIN SMALL LETTER C WITH CEDILLA
350	232	E8	è	LATIN SMALL LETTER E WITH GRAVE
351	233	E9	é	LATIN SMALL LETTER E WITH ACUTE
352	234	EA	ê	LATIN SMALL LETTER E WITH CIRCUMFLEX
353	235	EB	ë	LATIN SMALL LETTER E WITH DIAERESIS
354	236	EC	ì	LATIN SMALL LETTER I WITH GRAVE
355	237	ED	í	LATIN SMALL LETTER I WITH ACUTE
356	238	EE	î	LATIN SMALL LETTER I WITH CIRCUMFLEX
357	239	EF	ï	LATIN SMALL LETTER I WITH DIAERESIS
360	240	F0	đ	LATIN SMALL LETTER D WITH STROKE
361	241	F1	ń	LATIN SMALL LETTER N WITH ACUTE
362	242	F2	ò	LATIN SMALL LETTER O WITH GRAVE
363	243	F3	ó	LATIN SMALL LETTER O WITH ACUTE
364	244	F4	ô	LATIN SMALL LETTER O WITH CIRCUMFLEX
365	245	F5	ő	LATIN SMALL LETTER O WITH DOUBLE ACUTE
366	246	F6	ö	LATIN SMALL LETTER O WITH DIAERESIS
367	247	F7	ś	LATIN SMALL LETTER S WITH ACUTE
370	248	F8	ű	LATIN SMALL LETTER U WITH DOUBLE ACUTE
371	249	F9	ù	LATIN SMALL LETTER U WITH GRAVE
372	250	FA	ú	LATIN SMALL LETTER U WITH ACUTE
373	251	FB	û	LATIN SMALL LETTER U WITH CIRCUMFLEX
374	252	FC	ü	LATIN SMALL LETTER U WITH DIAERESIS
375	253	FD	ę	LATIN SMALL LETTER E WITH OGONEK
376	254	FE	ț	LATIN SMALL LETTER T WITH COMMA BELOW
377	255	FF	ÿ	LATIN SMALL LETTER Y WITH DIAERESIS
.TE
.SH NOTES
ISO 8859-16 is also known as Latin-10.
.SH SEE ALSO
.BR ascii (7),
.BR charsets (7),
.BR iso_8859-3 (7),
.BR utf-8 (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
'\" t -*- coding: UTF-8 -*-
.\" Copyright 1993-1995 Daniel Quinlan (quinlan@yggdrasil.com)
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.\" Slightly rearranged, aeb, 950713
.\" Updated, dpo, 990531
.TH ISO_8859-1 7 2014-10-02 "Linux" "Linux Programmer's Manual"
.SH NAME
iso_8859-1 \- ISO 8859-1 character set encoded in octal, decimal,
and hexadecimal
.SH DESCRIPTION
The ISO 8859 standard includes several 8-bit extensions to the ASCII
character set (also known as ISO 646-IRV).
ISO 8859-1 encodes the
characters used in many West European languages.
.SS ISO 8859 alphabets
The full set of ISO 8859 alphabets includes:
.TS
l l.
ISO 8859-1	West European languages (Latin-1)
ISO 8859-2	Central and East European languages (Latin-2)
ISO 8859-3	Southeast European and miscellaneous languages (Latin-3)
ISO 8859-4	Scandinavian/Baltic languages (Latin-4)
ISO 8859-5	Latin/Cyrillic
ISO 8859-6	Latin/Arabic
ISO 8859-7	Latin/Greek
ISO 8859-8	Latin/Hebrew
ISO 8859-9	Latin-1 modification for Turkish (Latin-5)
ISO 8859-10	Lappish/Nordic/Eskimo languages (Latin-6)
ISO 8859-11	Latin/Thai
ISO 8859-13	Baltic Rim languages (Latin-7)
ISO 8859-14	Celtic (Latin-8)
ISO 8859-15	West European languages (Latin-9)
ISO 8859-16	Romanian (Latin-10)
.TE
.SS ISO 8859-1 characters
The following table displays the characters in ISO 8859-1, which
are printable and unlisted in the
.BR ascii (7)
manual page.
.TS
l l l c lp-1.
Oct	Dec	Hex	Char	Description
_
240	160	A0	 	NO-BREAK SPACE
241	161	A1	¡	INVERTED EXCLAMATION MARK
242	162	A2	¢	CENT SIGN
243	163	A3	£	POUND SIGN
244	164	A4	¤	CURRENCY SIGN
245	165	A5	¥	YEN SIGN
246	166	A6	¦	BROKEN BAR
247	167	A7	§	SECTION SIGN
250	168	A8	¨	DIAERESIS
251	169	A9	©	COPYRIGHT SIGN
252	170	AA	ª	FEMININE ORDINAL INDICATOR
253	171	AB	«	LEFT-POINTING DOUBLE ANGLE QUOTATION MARK
254	172	AC	¬	NOT SIGN
255	173	AD	­	SOFT HYPHEN
256	174	AE	®	REGISTERED SIGN
257	175	AF	¯	MACRON
260	176	B0	°	DEGREE SIGN
261	177	B1	±	PLUS-MINUS SIGN
262	178	B2	²	SUPERSCRIPT TWO
263	179	B3	³	SUPERSCRIPT THREE
264	180	B4	´	ACUTE ACCENT
265	181	B5	µ	MICRO SIGN
266	182	B6	¶	PILCROW SIGN
267	183	B7	·	MIDDLE DOT
270	184	B8	¸	CEDILLA
271	185	B9	¹	SUPERSCRIPT ONE
272	186	BA	º	MASCULINE ORDINAL INDICATOR
273	187	BB	»	RIGHT-POINTING DOUBLE ANGLE QUOTATION MARK
274	188	BC	¼	VULGAR FRACTION ONE QUARTER
275	189	BD	½	VULGAR FRACTION ONE HALF
276	190	BE	¾	VULGAR FRACTION THREE QUARTERS
277	191	BF	¿	INVERTED QUESTION MARK
300	192	C0	À	LATIN CAPITAL LETTER A WITH GRAVE
301	193	C1	Á	LATIN CAPITAL LETTER A WITH ACUTE
302	194	C2	Â	LATIN CAPITAL LETTER A WITH CIRCUMFLEX
303	195	C3	Ã	LATIN CAPITAL LETTER A WITH TILDE
304	196	C4	Ä	LATIN CAPITAL LETTER A WITH DIAERESIS
305	197	C5	Å	LATIN CAPITAL LETTER A WITH RING ABOVE
306	198	C6	Æ	LATIN CAPITAL LETTER AE
307	199	C7	Ç	LATIN CAPITAL LETTER C WITH CEDILLA
310	200	C8	È	LATIN CAPITAL LETTER E WITH GRAVE
311	201	C9	É	LATIN CAPITAL LETTER E WITH ACUTE
312	202	CA	Ê	LATIN CAPITAL LETTER E WITH CIRCUMFLEX
313	203	CB	Ë	LATIN CAPITAL LETTER E WITH DIAERESIS
314	204	CC	Ì	LATIN CAPITAL LETTER I WITH GRAVE
315	205	CD	Í	LATIN CAPITAL LETTER I WITH ACUTE
316	206	CE	Î	LATIN CAPITAL LETTER I WITH CIRCUMFLEX
317	207	CF	Ï	LATIN CAPITAL LETTER I WITH DIAERESIS
320	208	D0	Ð	LATIN CAPITAL LETTER ETH
321	209	D1	Ñ	LATIN CAPITAL LETTER N WITH TILDE
322	210	D2	Ò	LATIN CAPITAL LETTER O WITH GRAVE
323	211	D3	Ó	LATIN CAPITAL LETTER O WITH ACUTE
324	212	D4	Ô	LATIN CAPITAL LETTER O WITH CIRCUMFLEX
325	213	D5	Õ	LATIN CAPITAL LETTER O WITH TILDE
326	214	D6	Ö	LATIN CAPITAL LETTER O WITH DIAERESIS
327	215	D7	×	MULTIPLICATION SIGN
330	216	D8	Ø	LATIN CAPITAL LETTER O WITH STROKE
331	217	D9	Ù	LATIN CAPITAL LETTER U WITH GRAVE
332	218	DA	Ú	LATIN CAPITAL LETTER U WITH ACUTE
333	219	DB	Û	LATIN CAPITAL LETTER U WITH CIRCUMFLEX
334	220	DC	Ü	LATIN CAPITAL LETTER U WITH DIAERESIS
335	221	DD	Ý	LATIN CAPITAL LETTER Y WITH ACUTE
336	222	DE	Þ	LATIN CAPITAL LETTER THORN
337	223	DF	ß	LATIN SMALL LETTER SHARP S
340	224	E0	à	LATIN SMALL LETTER A WITH GRAVE
341	225	E1	á	LATIN SMALL LETTER A WITH ACUTE
342	226	E2	â	LATIN SMALL LETTER A WITH CIRCUMFLEX
343	227	E3	ã	LATIN SMALL LETTER A WITH TILDE
344	228	E4	ä	LATIN SMALL LETTER A WITH DIAERESIS
345	229	E5	å	LATIN SMALL LETTER A WITH RING ABOVE
346	230	E6	æ	LATIN SMALL LETTER AE
347	231	E7	ç	LATIN SMALL LETTER C WITH CEDILLA
350	232	E8	è	LATIN SMALL LETTER E WITH GRAVE
351	233	E9	é	LATIN SMALL LETTER E WITH ACUTE
352	234	EA	ê	LATIN SMALL LETTER E WITH CIRCUMFLEX
353	235	EB	ë	LATIN SMALL LETTER E WITH DIAERESIS
354	236	EC	ì	LATIN SMALL LETTER I WITH GRAVE
355	237	ED	í	LATIN SMALL LETTER I WITH ACUTE
356	238	EE	î	LATIN SMALL LETTER I WITH CIRCUMFLEX
357	239	EF	ï	LATIN SMALL LETTER I WITH DIAERESIS
360	240	F0	ð	LATIN SMALL LETTER ETH
361	241	F1	ñ	LATIN SMALL LETTER N WITH TILDE
362	242	F2	ò	LATIN SMALL LETTER O WITH GRAVE
363	243	F3	ó	LATIN SMALL LETTER O WITH ACUTE
364	244	F4	ô	LATIN SMALL LETTER O WITH CIRCUMFLEX
365	245	F5	õ	LATIN SMALL LETTER O WITH TILDE
366	246	F6	ö	LATIN SMALL LETTER O WITH DIAERESIS
367	247	F7	÷	DIVISION SIGN
370	248	F8	ø	LATIN SMALL LETTER O WITH STROKE
371	249	F9	ù	LATIN SMALL LETTER U WITH GRAVE
372	250	FA	ú	LATIN SMALL LETTER U WITH ACUTE
373	251	FB	û	LATIN SMALL LETTER U WITH CIRCUMFLEX
374	252	FC	ü	LATIN SMALL LETTER U WITH DIAERESIS
375	253	FD	ý	LATIN SMALL LETTER Y WITH ACUTE
376	254	FE	þ	LATIN SMALL LETTER THORN
377	255	FF	ÿ	LATIN SMALL LETTER Y WITH DIAERESIS
.TE
.SH NOTES
ISO 8859-1 is also known as Latin-1.
.SH SEE ALSO
.BR ascii (7),
.BR charsets (7),
.BR iso_8859-15 (7),
.BR utf-8 (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
'\" t -*- coding: UTF-8 -*-
.\" Copyright 1999 Roman Maurer (roman.maurer@hermes.si)
.\" Copyright 1993-1995 Daniel Quinlan (quinlan@yggdrasil.com)
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.\" Slightly rearranged, aeb, 950713
.\" Updated, dpo, 990531
.TH ISO_8859-2 7 2014-10-02 "Linux" "Linux Programmer's Manual"
.SH NAME
iso_8859-2 \- ISO 8859-2 character set encoded in octal, decimal,
and hexadecimal
.SH DESCRIPTION
The ISO 8859 standard includes several 8-bit extensions to the ASCII
character set (also known as ISO 646-IRV).
ISO 8859-2 encodes the
Latin characters used in many Central and East European languages.
.SS ISO 8859 alphabets
The full set of ISO 8859 alphabets includes:
.TS
l l.
ISO 8859-1	West European languages (Latin-1)
ISO 8859-2	Central and East European languages (Latin-2)
ISO 8859-3	Southeast European and miscellaneous languages (Latin-3)
ISO 8859-4	Scandinavian/Baltic languages (Latin-4)
ISO 8859-5	Latin/Cyrillic
ISO 8859-6	Latin/Arabic
ISO 8859-7	Latin/Greek
ISO 8859-8	Latin/Hebrew
ISO 8859-9	Latin-1 modification for Turkish (Latin-5)
ISO 8859-10	Lappish/Nordic/Eskimo languages (Latin-6)
ISO 8859-11	Latin/Thai
ISO 8859-13	Baltic Rim languages (Latin-7)
ISO 8859-14	Celtic (Latin-8)
ISO 8859-15	West European languages (Latin-9)
ISO 8859-16	Romanian (Latin-10)
.TE
.SS ISO 8859-2 characters
The following table displays the characters in ISO 8859-2, which
are printable and unlisted in the
.BR ascii (7)
manual page.
.TS
l l l c lp-1.
Oct	Dec	Hex	Char	Description
_
240	160	A0	 	NO-BREAK SPACE
241	161	A1	Ą	LATIN CAPITAL LETTER A WITH OGONEK
242	162	A2	˘	BREVE
243	163	A3	Ł	LATIN CAPITAL LETTER L WITH STROKE
244	164	A4	¤	CURRENCY SIGN
245	165	A5	Ľ	LATIN CAPITAL LETTER L WITH CARON
246	166	A6	Ś	LATIN CAPITAL LETTER S WITH ACUTE
247	167	A7	§	SECTION SIGN
250	168	A8	¨	DIAERESIS
251	169	A9	Š	LATIN CAPITAL LETTER S WITH CARON
252	170	AA	Ş	LATIN CAPITAL LETTER S WITH CEDILLA
253	171	AB	Ť	LATIN CAPITAL LETTER T WITH CARON
254	172	AC	Ź	LATIN CAPITAL LETTER Z WITH ACUTE
255	173	AD	­	SOFT HYPHEN
256	174	AE	Ž	LATIN CAPITAL LETTER Z WITH CARON
257	175	AF	Ż	LATIN CAPITAL LETTER Z WITH DOT ABOVE
260	176	B0	°	DEGREE SIGN
261	177	B1	ą	LATIN SMALL LETTER A WITH OGONEK
262	178	B2	˛	OGONEK
263	179	B3	ł	LATIN SMALL LETTER L WITH STROKE
264	180	B4	´	ACUTE ACCENT
265	181	B5	ľ	LATIN SMALL LETTER L WITH CARON
266	182	B6	ś	LATIN SMALL LETTER S WITH ACUTE
267	183	B7	ˇ	CARON
270	184	B8	¸	CEDILLA
271	185	B9	š	LATIN SMALL LETTER S WITH CARON
272	186	BA	ş	LATIN SMALL LETTER S WITH CEDILLA
273	187	BB	ť	LATIN SMALL LETTER T WITH CARON
274	188	BC	ź	LATIN SMALL LETTER Z WITH ACUTE
275	189	BD	˝	DOUBLE ACUTE ACCENT
276	190	BE	ž	LATIN SMALL LETTER Z WITH CARON
277	191	BF	ż	LATIN SMALL LETTER Z WITH DOT ABOVE
300	192	C0	Ŕ	LATIN CAPITAL LETTER R WITH ACUTE
301	193	C1	Á	LATIN CAPITAL LETTER A WITH ACUTE
302	194	C2	Â	LATIN CAPITAL LETTER A WITH CIRCUMFLEX
303	195	C3	Ă	LATIN CAPITAL LETTER A WITH BREVE
304	196	C4	Ä	LATIN CAPITAL LETTER A WITH DIAERESIS
305	197	C5	Ĺ	LATIN CAPITAL LETTER L WITH ACUTE
306	198	C6	Ć	LATIN CAPITAL LETTER C WITH ACUTE
307	199	C7	Ç	LATIN CAPITAL LETTER C WITH CEDILLA
310	200	C8	Č	LATIN CAPITAL LETTER C WITH CARON
311	201	C9	É	LATIN CAPITAL LETTER E WITH ACUTE
312	202	CA	Ę	LATIN CAPITAL LETTER E WITH OGONEK
313	203	CB	Ë	LATIN CAPITAL LETTER E WITH DIAERESIS
314	204	CC	Ě	LATIN CAPITAL LETTER E WITH CARON
315	205	CD	Í	LATIN CAPITAL LETTER I WITH ACUTE
316	206	CE	Î	LATIN CAPITAL LETTER I WITH CIRCUMFLEX
317	207	CF	Ď	LATIN CAPITAL LETTER D WITH CARON
320	208	D0	Đ	LATIN CAPITAL LETTER D WITH STROKE
321	209	D1	Ń	LATIN CAPITAL LETTER N WITH ACUTE
322	210	D2	Ň	LATIN CAPITAL LETTER N WITH CARON
323	211	D3	Ó	LATIN CAPITAL LETTER O WITH ACUTE
324	212	D4	Ô	LATIN CAPITAL LETTER O WITH CIRCUMFLEX
325	213	D5	Ő	LATIN CAPITAL LETTER O WITH DOUBLE ACUTE
326	214	D6	Ö	LATIN CAPITAL LETTER O WITH DIAERESIS
327	215	D7	×	MULTIPLICATION SIGN
330	216	D8	Ř	LATIN CAPITAL LETTER R WITH CARON
331	217	D9	Ů	LATIN CAPITAL LETTER U WITH RING ABOVE
332	218	DA	Ú	LATIN CAPITAL LETTER U WITH ACUTE
333	219	DB	Ű	LATIN CAPITAL LETTER U WITH DOUBLE ACUTE
334	220	DC	Ü	LATIN CAPITAL LETTER U WITH DIAERESIS
335	221	DD	Ý	LATIN CAPITAL LETTER Y WITH ACUTE
336	222	DE	Ţ	LATIN CAPITAL LETTER T WITH CEDILLA
337	223	DF	ß	LATIN SMALL LETTER SHARP S
340	224	E0	ŕ	LATIN SMALL LETTER R WITH ACUTE
341	225	E1	á	LATIN SMALL LETTER A WITH ACUTE
342	226	E2	â	LATIN SMALL LETTER A WITH CIRCUMFLEX
343	227	E3	ă	LATIN SMALL LETTER A WITH BREVE
344	228	E4	ä	LATIN SMALL LETTER A WITH DIAERESIS
345	229	E5	ĺ	LATIN SMALL LETTER L WITH ACUTE
346	230	E6	ć	LATIN SMALL LETTER C WITH ACUTE
347	231	E7	ç	LATIN SMALL LETTER C WITH CEDILLA
350	232	E8	č	LATIN SMALL LETTER C WITH CARON
351	233	E9	é	LATIN SMALL LETTER E WITH ACUTE
352	234	EA	ę	LATIN SMALL LETTER E WITH OGONEK
353	235	EB	ë	LATIN SMALL LETTER E WITH DIAERESIS
354	236	EC	ě	LATIN SMALL LETTER E WITH CARON
355	237	ED	í	LATIN SMALL LETTER I WITH ACUTE
356	238	EE	î	LATIN SMALL LETTER I WITH CIRCUMFLEX
357	239	EF	ď	LATIN SMALL LETTER D WITH CARON
360	240	F0	đ	LATIN SMALL LETTER D WITH STROKE
361	241	F1	ń	LATIN SMALL LETTER N WITH ACUTE
362	242	F2	ň	LATIN SMALL LETTER N WITH CARON
363	243	F3	ó	LATIN SMALL LETTER O WITH ACUTE
364	244	F4	ô	LATIN SMALL LETTER O WITH CIRCUMFLEX
365	245	F5	ő	LATIN SMALL LETTER O WITH DOUBLE ACUTE
366	246	F6	ö	LATIN SMALL LETTER O WITH DIAERESIS
367	247	F7	÷	DIVISION SIGN
370	248	F8	ř	LATIN SMALL LETTER R WITH CARON
371	249	F9	ů	LATIN SMALL LETTER U WITH RING ABOVE
372	250	FA	ú	LATIN SMALL LETTER U WITH ACUTE
373	251	FB	ű	LATIN SMALL LETTER U WITH DOUBLE ACUTE
374	252	FC	ü	LATIN SMALL LETTER U WITH DIAERESIS
375	253	FD	ý	LATIN SMALL LETTER Y WITH ACUTE
376	254	FE	ţ	LATIN SMALL LETTER T WITH CEDILLA
377	255	FF	˙	DOT ABOVE
.TE
.SH NOTES
ISO 8859-2 is also known as Latin-2.
.SH SEE ALSO
.BR ascii (7),
.BR charsets (7),
.BR iso_8859-1 (7),
.BR iso_8859-16 (7),
.BR utf-8 (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
'\" t -*- coding: UTF-8 -*-
.\" Copyright 2009  Lefteris Dimitroulakis (edimitro@tee.gr)
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.TH ISO_8859-3 7 2014-10-02 "Linux" "Linux Programmer's Manual"
.SH NAME
iso_8859-3 \- ISO 8859-3 character set encoded in octal, decimal,
and hexadecimal
.SH DESCRIPTION
The ISO 8859 standard includes several 8-bit extensions to the ASCII
character set (also known as ISO 646-IRV).
ISO 8859-3 encodes the
characters used in certain Southeast European languages.
.SS ISO 8859 alphabets
The full set of ISO 8859 alphabets includes:
.TS
l l.
ISO 8859-1	West European languages (Latin-1)
ISO 8859-2	Central and East European languages (Latin-2)
ISO 8859-3	Southeast European and miscellaneous languages (Latin-3)
ISO 8859-4	Scandinavian/Baltic languages (Latin-4)
ISO 8859-5	Latin/Cyrillic
ISO 8859-6	Latin/Arabic
ISO 8859-7	Latin/Greek
ISO 8859-8	Latin/Hebrew
ISO 8859-9	Latin-1 modification for Turkish (Latin-5)
ISO 8859-10	Lappish/Nordic/Eskimo languages (Latin-6)
ISO 8859-11	Latin/Thai
ISO 8859-13	Baltic Rim languages (Latin-7)
ISO 8859-14	Celtic (Latin-8)
ISO 8859-15	West European languages (Latin-9)
ISO 8859-16	Romanian (Latin-10)
.TE
.SS ISO 8859-3 characters
The following table displays the characters in ISO 8859-3, which
are printable and unlisted in the
.BR ascii (7)
manual page.
.TS
l l l c lp-1.
Oct	Dec	Hex	Char	Description
_
240	160	A0	 	NO-BREAK SPACE
241	161	A1	Ħ	LATIN CAPITAL LETTER H WITH STROKE
242	162	A2	˘	BREVE
243	163	A3	£	POUND SIGN
244	164	A4	¤	CURRENCY SIGN
246	166	A6	Ĥ	LATIN CAPITAL LETTER H WITH CIRCUMFLEX
247	167	A7	§	SECTION SIGN
250	168	A8	¨	DIAERESIS
251	169	A9	İ	LATIN CAPITAL LETTER I WITH DOT ABOVE
252	170	AA	Ş	LATIN CAPITAL LETTER S WITH CEDILLA
253	171	AB	Ğ	LATIN CAPITAL LETTER G WITH BREVE
254	172	AC	Ĵ	LATIN CAPITAL LETTER J WITH CIRCUMFLEX
255	173	AD	­	SOFT HYPHEN
257	175	AF	Ż	LATIN CAPITAL LETTER Z WITH DOT ABOVE
260	176	B0	°	DEGREE SIGN
261	177	B1	ħ	LATIN SMALL LETTER H WITH STROKE
262	178	B2	²	SUPERSCRIPT TWO
263	179	B3	³	SUPERSCRIPT THREE
264	180	B4	´	ACUTE ACCENT
265	181	B5	µ	MICRO SIGN
266	182	B6	ĥ	LATIN SMALL LETTER H WITH CIRCUMFLEX
267	183	B7	·	MIDDLE DOT
270	184	B8	¸	CEDILLA
271	185	B9	ı	LATIN SMALL LETTER DOTLESS I
272	186	BA	ş	LATIN SMALL LETTER S WITH CEDILLA
273	187	BB	ğ	LATIN SMALL LETTER G WITH BREVE
274	188	BC	ĵ	LATIN SMALL LETTER J WITH CIRCUMFLEX
275	189	BD	½	VULGAR FRACTION ONE HALF
277	191	BF	ż	LATIN SMALL LETTER Z WITH DOT ABOVE
300	192	C0	À	LATIN CAPITAL LETTER A WITH GRAVE
301	193	C1	Á	LATIN CAPITAL LETTER A WITH ACUTE
302	194	C2	Â	LATIN CAPITAL LETTER A WITH CIRCUMFLEX
304	196	C4	Ä	LATIN CAPITAL LETTER A WITH DIAERESIS
305	197	C5	Ċ	LATIN CAPITAL LETTER C WITH DOT ABOVE
306	198	C6	Ĉ	LATIN CAPITAL LETTER C WITH CIRCUMFLEX
307	199	C7	Ç	LATIN CAPITAL LETTER C WITH CEDILLA
310	200	C8	È	LATIN CAPITAL LETTER E WITH GRAVE
311	201	C9	É	LATIN CAPITAL LETTER E WITH ACUTE
312	202	CA	Ê	LATIN CAPITAL LETTER E WITH CIRCUMFLEX
313	203	CB	Ë	LATIN CAPITAL LETTER E WITH DIAERESIS
314	204	CC	Ì	LATIN CAPITAL LETTER I WITH GRAVE
315	205	CD	Í	LATIN CAPITAL LETTER I WITH ACUTE
316	206	CE	Î	LATIN CAPITAL LETTER I WITH CIRCUMFLEX
317	207	CF	Ï	LATIN CAPITAL LETTER I WITH DIAERESIS
321	209	D1	Ñ	LATIN CAPITAL LETTER N WITH TILDE
322	210	D2	Ò	LATIN CAPITAL LETTER O WITH GRAVE
323	211	D3	Ó	LATIN CAPITAL LETTER O WITH ACUTE
324	212	D4	Ô	LATIN CAPITAL LETTER O WITH CIRCUMFLEX
325	213	D5	Ġ	LATIN CAPITAL LETTER G WITH DOT ABOVE
326	214	D6	Ö	LATIN CAPITAL LETTER O WITH DIAERESIS
327	215	D7	×	MULTIPLICATION SIGN
330	216	D8	Ĝ	LATIN CAPITAL LETTER G WITH CIRCUMFLEX
331	217	D9	Ù	LATIN CAPITAL LETTER U WITH GRAVE
332	218	DA	Ú	LATIN CAPITAL LETTER U WITH ACUTE
333	219	DB	Û	LATIN CAPITAL LETTER U WITH CIRCUMFLEX
334	220	DC	Ü	LATIN CAPITAL LETTER U WITH DIAERESIS
335	221	DD	Ŭ	LATIN CAPITAL LETTER U WITH BREVE
336	222	DE	Ŝ	LATIN CAPITAL LETTER S WITH CIRCUMFLEX
337	223	DF	ß	LATIN SMALL LETTER SHARP S
340	224	E0	à	LATIN SMALL LETTER A WITH GRAVE
341	225	E1	á	LATIN SMALL LETTER A WITH ACUTE
342	226	E2	â	LATIN SMALL LETTER A WITH CIRCUMFLEX
344	228	E4	ä	LATIN SMALL LETTER A WITH DIAERESIS
345	229	E5	ċ	LATIN SMALL LETTER C WITH DOT ABOVE
346	230	E6	ĉ	LATIN SMALL LETTER C WITH CIRCUMFLEX
347	231	E7	ç	LATIN SMALL LETTER C WITH CEDILLA
350	232	E8	è	LATIN SMALL LETTER E WITH GRAVE
351	233	E9	é	LATIN SMALL LETTER E WITH ACUTE
352	234	EA	ê	LATIN SMALL LETTER E WITH CIRCUMFLEX
353	235	EB	ë	LATIN SMALL LETTER E WITH DIAERESIS
354	236	EC	ì	LATIN SMALL LETTER I WITH GRAVE
355	237	ED	í	LATIN SMALL LETTER I WITH ACUTE
356	238	EE	î	LATIN SMALL LETTER I WITH CIRCUMFLEX
357	239	EF	ï	LATIN SMALL LETTER I WITH DIAERESIS
361	241	F1	ñ	LATIN SMALL LETTER N WITH TILDE
362	242	F2	ò	LATIN SMALL LETTER O WITH GRAVE
363	243	F3	ó	LATIN SMALL LETTER O WITH ACUTE
364	244	F4	ô	LATIN SMALL LETTER O WITH CIRCUMFLEX
365	245	F5	ġ	LATIN SMALL LETTER G WITH DOT ABOVE
366	246	F6	ö	LATIN SMALL LETTER O WITH DIAERESIS
367	247	F7	÷	DIVISION SIGN
370	248	F8	ĝ	LATIN SMALL LETTER G WITH CIRCUMFLEX
371	249	F9	ù	LATIN SMALL LETTER U WITH GRAVE
372	250	FA	ú	LATIN SMALL LETTER U WITH ACUTE
373	251	FB	û	LATIN SMALL LETTER U WITH CIRCUMFLEX
374	252	FC	ü	LATIN SMALL LETTER U WITH DIAERESIS
375	253	FD	ŭ	LATIN SMALL LETTER U WITH BREVE
376	254	FE	ŝ	LATIN SMALL LETTER S WITH CIRCUMFLEX
377	255	FF	˙	DOT ABOVE
.TE
.SH NOTES
ISO 8859-3 is also known as Latin-3.
.SH SEE ALSO
.BR ascii (7),
.BR charsets (7),
.BR utf-8 (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
'\" t -*- coding: UTF-8 -*-
.\" Copyright 2009  Lefteris Dimitroulakis (edimitro@tee.gr)
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.TH ISO_8859-4 7 2014-10-02 "Linux" "Linux Programmer's Manual"
.SH NAME
iso_8859-4 \- ISO 8859-4 character set encoded in octal, decimal,
and hexadecimal
.SH DESCRIPTION
The ISO 8859 standard includes several 8-bit extensions to the ASCII
character set (also known as ISO 646-IRV).
ISO 8859-4 encodes the
characters used in Scandinavian and Baltic languages.
.SS ISO 8859 alphabets
The full set of ISO 8859 alphabets includes:
.TS
l l.
ISO 8859-1	West European languages (Latin-1)
ISO 8859-2	Central and East European languages (Latin-2)
ISO 8859-3	Southeast European and miscellaneous languages (Latin-3)
ISO 8859-4	Scandinavian/Baltic languages (Latin-4)
ISO 8859-5	Latin/Cyrillic
ISO 8859-6	Latin/Arabic
ISO 8859-7	Latin/Greek
ISO 8859-8	Latin/Hebrew
ISO 8859-9	Latin-1 modification for Turkish (Latin-5)
ISO 8859-10	Lappish/Nordic/Eskimo languages (Latin-6)
ISO 8859-11	Latin/Thai
ISO 8859-13	Baltic Rim languages (Latin-7)
ISO 8859-14	Celtic (Latin-8)
ISO 8859-15	West European languages (Latin-9)
ISO 8859-16	Romanian (Latin-10)
.TE
.SS ISO 8859-4 characters
The following table displays the characters in ISO 8859-4, which
are printable and unlisted in the
.BR ascii (7)
manual page.
.TS
l l l c lp-1.
Oct	Dec	Hex	Char	Description
_
240	160	A0	 	NO-BREAK SPACE
241	161	A1	Ą	LATIN CAPITAL LETTER A WITH OGONEK
242	162	A2	ĸ	LATIN SMALL LETTER KRA (Greenlandic)
243	163	A3	Ŗ	LATIN CAPITAL LETTER R WITH CEDILLA
244	164	A4	¤	CURRENCY SIGN
245	165	A5	Ĩ	LATIN CAPITAL LETTER I WITH TILDE
246	166	A6	Ļ	LATIN CAPITAL LETTER L WITH CEDILLA
247	167	A7	§	SECTION SIGN
250	168	A8	¨	DIAERESIS
251	169	A9	Š	LATIN CAPITAL LETTER S WITH CARON
252	170	AA	Ē	LATIN CAPITAL LETTER E WITH MACRON
253	171	AB	Ģ	LATIN CAPITAL LETTER G WITH CEDILLA
254	172	AC	Ŧ	LATIN CAPITAL LETTER T WITH STROKE
255	173	AD	­	SOFT HYPHEN
256	174	AE	Ž	LATIN CAPITAL LETTER Z WITH CARON
257	175	AF	¯	MACRON
260	176	B0	°	DEGREE SIGN
261	177	B1	ą	LATIN SMALL LETTER A WITH OGONEK
262	178	B2	˛	OGONEK
263	179	B3	ŗ	LATIN SMALL LETTER R WITH CEDILLA
264	180	B4	´	ACUTE ACCENT
265	181	B5	ĩ	LATIN SMALL LETTER I WITH TILDE
266	182	B6	ļ	LATIN SMALL LETTER L WITH CEDILLA
267	183	B7	ˇ	CARON
270	184	B8	¸	CEDILLA
271	185	B9	š	LATIN SMALL LETTER S WITH CARON
272	186	BA	ē	LATIN SMALL LETTER E WITH MACRON
273	187	BB	ģ	LATIN SMALL LETTER G WITH CEDILLA
274	188	BC	ŧ	LATIN SMALL LETTER T WITH STROKE
275	189	BD	Ŋ	LATIN CAPITAL LETTER ENG
276	190	BE	ž	LATIN SMALL LETTER Z WITH CARON
277	191	BF	ŋ	LATIN SMALL LETTER ENG
300	192	C0	Ā	LATIN CAPITAL LETTER A WITH MACRON
301	193	C1	Á	LATIN CAPITAL LETTER A WITH ACUTE
302	194	C2	Â	LATIN CAPITAL LETTER A WITH CIRCUMFLEX
303	195	C3	Ã	LATIN CAPITAL LETTER A WITH TILDE
304	196	C4	Ä	LATIN CAPITAL LETTER A WITH DIAERESIS
305	197	C5	Å	LATIN CAPITAL LETTER A WITH RING ABOVE
306	198	C6	Æ	LATIN CAPITAL LETTER AE
307	199	C7	Į	LATIN CAPITAL LETTER I WITH OGONEK
310	200	C8	Č	LATIN CAPITAL LETTER C WITH CARON
311	201	C9	É	LATIN CAPITAL LETTER E WITH ACUTE
312	202	CA	Ę	LATIN CAPITAL LETTER E WITH OGONEK
313	203	CB	Ë	LATIN CAPITAL LETTER E WITH DIAERESIS
314	204	CC	Ė	LATIN CAPITAL LETTER E WITH DOT ABOVE
315	205	CD	Í	LATIN CAPITAL LETTER I WITH ACUTE
316	206	CE	Î	LATIN CAPITAL LETTER I WITH CIRCUMFLEX
317	207	CF	Ī	LATIN CAPITAL LETTER I WITH MACRON
320	208	D0	Đ	LATIN CAPITAL LETTER D WITH STROKE
321	209	D1	Ņ	LATIN CAPITAL LETTER N WITH CEDILLA
322	210	D2	Ō	LATIN CAPITAL LETTER O WITH MACRON
323	211	D3	Ķ	LATIN CAPITAL LETTER K WITH CEDILLA
324	212	D4	Ô	LATIN CAPITAL LETTER O WITH CIRCUMFLEX
325	213	D5	Õ	LATIN CAPITAL LETTER O WITH TILDE
326	214	D6	Ö	LATIN CAPITAL LETTER O WITH DIAERESIS
327	215	D7	×	MULTIPLICATION SIGN
330	216	D8	Ø	LATIN CAPITAL LETTER O WITH STROKE
331	217	D9	Ų	LATIN CAPITAL LETTER U WITH OGONEK
332	218	DA	Ú	LATIN CAPITAL LETTER U WITH ACUTE
333	219	DB	Û	LATIN CAPITAL LETTER U WITH CIRCUMFLEX
334	220	DC	Ü	LATIN CAPITAL LETTER U WITH DIAERESIS
335	221	DD	Ũ	LATIN CAPITAL LETTER U WITH TILDE
336	222	DE	Ū	LATIN CAPITAL LETTER U WITH MACRON
337	223	DF	ß	LATIN SMALL LETTER SHARP S
340	224	E0	ā	LATIN SMALL LETTER A WITH MACRON
341	225	E1	á	LATIN SMALL LETTER A WITH ACUTE
342	226	E2	â	LATIN SMALL LETTER A WITH CIRCUMFLEX
343	227	E3	ã	LATIN SMALL LETTER A WITH TILDE
344	228	E4	ä	LATIN SMALL LETTER A WITH DIAERESIS
345	229	E5	å	LATIN SMALL LETTER A WITH RING ABOVE
346	230	E6	æ	LATIN SMALL LETTER AE
347	231	E7	į	LATIN SMALL LETTER I WITH OGONEK
350	232	E8	č	LATIN SMALL LETTER C WITH CARON
351	233	E9	é	LATIN SMALL LETTER E WITH ACUTE
352	234	EA	ę	LATIN SMALL LETTER E WITH OGONEK
353	235	EB	ë	LATIN SMALL LETTER E WITH DIAERESIS
354	236	EC	ė	LATIN SMALL LETTER E WITH DOT ABOVE
355	237	ED	í	LATIN SMALL LETTER I WITH ACUTE
356	238	EE	î	LATIN SMALL LETTER I WITH CIRCUMFLEX
357	239	EF	ī	LATIN SMALL LETTER I WITH MACRON
360	240	F0	đ	LATIN SMALL LETTER D WITH STROKE
361	241	F1	ņ	LATIN SMALL LETTER N WITH CEDILLA
362	242	F2	ō	LATIN SMALL LETTER O WITH MACRON
363	243	F3	ķ	LATIN SMALL LETTER K WITH CEDILLA
364	244	F4	ô	LATIN SMALL LETTER O WITH CIRCUMFLEX
365	245	F5	õ	LATIN SMALL LETTER O WITH TILDE
366	246	F6	ö	LATIN SMALL LETTER O WITH DIAERESIS
367	247	F7	÷	DIVISION SIGN
370	248	F8	ø	LATIN SMALL LETTER O WITH STROKE
371	249	F9	ų	LATIN SMALL LETTER U WITH OGONEK
372	250	FA	ú	LATIN SMALL LETTER U WITH ACUTE
373	251	FB	û	LATIN SMALL LETTER U WITH CIRCUMFLEX
374	252	FC	ü	LATIN SMALL LETTER U WITH DIAERESIS
375	253	FD	ũ	LATIN SMALL LETTER U WITH TILDE
376	254	FE	ū	LATIN SMALL LETTER U WITH MACRON
377	255	FF	˙	DOT ABOVE
.TE
.SH NOTES
ISO 8859-4 is also known as Latin-4.
.SH SEE ALSO
.BR ascii (7),
.BR charsets (7),
.BR utf-8 (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
'\" t -*- coding: UTF-8 -*-
.\" Copyright 2009   Lefteris Dimitroulakis (edimitro@tee.gr)
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.TH ISO_8859-5 7 2014-10-02 "Linux" "Linux Programmer's Manual"
.SH NAME
iso_8859-5 \- ISO 8859-5 character set encoded in octal, decimal,
and hexadecimal
.SH DESCRIPTION
The ISO 8859 standard includes several 8-bit extensions to the ASCII
character set (also known as ISO 646-IRV).
ISO 8859-5 encodes the
Cyrillic characters used in many East European languages.
.SS ISO 8859 alphabets
The full set of ISO 8859 alphabets includes:
.TS
l l.
ISO 8859-1	West European languages (Latin-1)
ISO 8859-2	Central and East European languages (Latin-2)
ISO 8859-3	Southeast European and miscellaneous languages (Latin-3)
ISO 8859-4	Scandinavian/Baltic languages (Latin-4)
ISO 8859-5	Latin/Cyrillic
ISO 8859-6	Latin/Arabic
ISO 8859-7	Latin/Greek
ISO 8859-8	Latin/Hebrew
ISO 8859-9	Latin-1 modification for Turkish (Latin-5)
ISO 8859-10	Lappish/Nordic/Eskimo languages (Latin-6)
ISO 8859-11	Latin/Thai
ISO 8859-13	Baltic Rim languages (Latin-7)
ISO 8859-14	Celtic (Latin-8)
ISO 8859-15	West European languages (Latin-9)
ISO 8859-16	Romanian (Latin-10)
.TE
.SS ISO 8859-5 characters
The following table displays the characters in ISO 8859-5, which
are printable and unlisted in the
.BR ascii (7)
manual page.
.TS
l l l c lp-1.
Oct	Dec	Hex	Char	Description
_
240	160	A0	 	NO-BREAK SPACE
241	161	A1	Ё	CYRILLIC CAPITAL LETTER IO
242	162	A2	Ђ	CYRILLIC CAPITAL LETTER DJE
243	163	A3	Ѓ	CYRILLIC CAPITAL LETTER GJE
244	164	A4	Є	CYRILLIC CAPITAL LETTER UKRAINIAN IE
245	165	A5	Ѕ	CYRILLIC CAPITAL LETTER DZE
246	166	A6	І	T{
CYRILLIC CAPITAL LETTER
.br
BYELORUSSIAN-UKRAINIAN I
T}
247	167	A7	Ї	CYRILLIC CAPITAL LETTER YI
250	168	A8	Ј	CYRILLIC CAPITAL LETTER JE
251	169	A9	Љ	CYRILLIC CAPITAL LETTER LJE
252	170	AA	Њ	CYRILLIC CAPITAL LETTER NJE
253	171	AB	Ћ	CYRILLIC CAPITAL LETTER TSHE
254	172	AC	Ќ	CYRILLIC CAPITAL LETTER KJE
255	173	AD	­	SOFT HYPHEN
256	174	AE	Ў	CYRILLIC CAPITAL LETTER SHORT U
257	175	AF	Џ	CYRILLIC CAPITAL LETTER DZHE
260	176	B0	А	CYRILLIC CAPITAL LETTER A
261	177	B1	Б	CYRILLIC CAPITAL LETTER BE
262	178	B2	В	CYRILLIC CAPITAL LETTER VE
263	179	B3	Г	CYRILLIC CAPITAL LETTER GHE
264	180	B4	Д	CYRILLIC CAPITAL LETTER DE
265	181	B5	Е	CYRILLIC CAPITAL LETTER IE
266	182	B6	Ж	CYRILLIC CAPITAL LETTER ZHE
267	183	B7	З	CYRILLIC CAPITAL LETTER ZE
270	184	B8	И	CYRILLIC CAPITAL LETTER I
271	185	B9	Й	CYRILLIC CAPITAL LETTER SHORT I
272	186	BA	К	CYRILLIC CAPITAL LETTER KA
273	187	BB	Л	CYRILLIC CAPITAL LETTER EL
274	188	BC	М	CYRILLIC CAPITAL LETTER EM
275	189	BD	Н	CYRILLIC CAPITAL LETTER EN
276	190	BE	О	CYRILLIC CAPITAL LETTER O
277	191	BF	П	CYRILLIC CAPITAL LETTER PE
300	192	C0	Р	CYRILLIC CAPITAL LETTER ER
301	193	C1	С	CYRILLIC CAPITAL LETTER ES
302	194	C2	Т	CYRILLIC CAPITAL LETTER TE
303	195	C3	У	CYRILLIC CAPITAL LETTER U
304	196	C4	Ф	CYRILLIC CAPITAL LETTER EF
305	197	C5	Х	CYRILLIC CAPITAL LETTER HA
306	198	C6	Ц	CYRILLIC CAPITAL LETTER TSE
307	199	C7	Ч	CYRILLIC CAPITAL LETTER CHE
310	200	C8	Ш	CYRILLIC CAPITAL LETTER SHA
311	201	C9	Щ	CYRILLIC CAPITAL LETTER SHCHA
312	202	CA	Ъ	CYRILLIC CAPITAL LETTER HARD SIGN
313	203	CB	Ы	CYRILLIC CAPITAL LETTER YERU
314	204	CC	Ь	CYRILLIC CAPITAL LETTER SOFT SIGN
315	205	CD	Э	CYRILLIC CAPITAL LETTER E
316	206	CE	Ю	CYRILLIC CAPITAL LETTER YU
317	207	CF	Я	CYRILLIC CAPITAL LETTER YA
320	208	D0	а	CYRILLIC SMALL LETTER A
321	209	D1	б	CYRILLIC SMALL LETTER BE
322	210	D2	в	CYRILLIC SMALL LETTER VE
323	211	D3	г	CYRILLIC SMALL LETTER GHE
324	212	D4	д	CYRILLIC SMALL LETTER DE
325	213	D5	е	CYRILLIC SMALL LETTER IE
326	214	D6	ж	CYRILLIC SMALL LETTER ZHE
327	215	D7	з	CYRILLIC SMALL LETTER ZE
330	216	D8	и	CYRILLIC SMALL LETTER I
331	217	D9	й	CYRILLIC SMALL LETTER SHORT I
332	218	DA	к	CYRILLIC SMALL LETTER KA
333	219	DB	л	CYRILLIC SMALL LETTER EL
334	220	DC	м	CYRILLIC SMALL LETTER EM
335	221	DD	н	CYRILLIC SMALL LETTER EN
336	222	DE	о	CYRILLIC SMALL LETTER O
337	223	DF	п	CYRILLIC SMALL LETTER PE
340	224	E0	р	CYRILLIC SMALL LETTER ER
341	225	E1	с	CYRILLIC SMALL LETTER ES
342	226	E2	т	CYRILLIC SMALL LETTER TE
343	227	E3	у	CYRILLIC SMALL LETTER U
344	228	E4	ф	CYRILLIC SMALL LETTER EF
345	229	E5	х	CYRILLIC SMALL LETTER HA
346	230	E6	ц	CYRILLIC SMALL LETTER TSE
347	231	E7	ч	CYRILLIC SMALL LETTER CHE
350	232	E8	ш	CYRILLIC SMALL LETTER SHA
351	233	E9	щ	CYRILLIC SMALL LETTER SHCHA
352	234	EA	ъ	CYRILLIC SMALL LETTER HARD SIGN
353	235	EB	ы	CYRILLIC SMALL LETTER YERU
354	236	EC	ь	CYRILLIC SMALL LETTER SOFT SIGN
355	237	ED	э	CYRILLIC SMALL LETTER E
356	238	EE	ю	CYRILLIC SMALL LETTER YU
357	239	EF	я	CYRILLIC SMALL LETTER YA
360	240	F0	№	NUMERO SIGN
361	241	F1	ё	CYRILLIC SMALL LETTER IO
362	242	F2	ђ	CYRILLIC SMALL LETTER DJE
363	243	F3	ѓ	CYRILLIC SMALL LETTER GJE
364	244	F4	є	CYRILLIC SMALL LETTER UKRAINIAN IE
365	245	F5	ѕ	CYRILLIC SMALL LETTER DZE
366	246	F6	і	CYRILLIC SMALL LETTER BYELORUSSIAN-UKRAINIAN I
367	247	F7	ї	CYRILLIC SMALL LETTER YI
370	248	F8	ј	CYRILLIC SMALL LETTER JE
371	249	F9	љ	CYRILLIC SMALL LETTER LJE
372	250	FA	њ	CYRILLIC SMALL LETTER NJE
373	251	FB	ј	CYRILLIC SMALL LETTER TSHE
374	252	FC	ќ	CYRILLIC SMALL LETTER KJE
375	253	FD	§	SECTION SIGN
376	254	FE	ў	CYRILLIC SMALL LETTER SHORT U
377	255	FF	џ	CYRILLIC SMALL LETTER DZHE
.TE
.SH SEE ALSO
.BR ascii (7),
.BR charsets (7),
.BR koi8-r (7),
.BR koi8-u (7),
.BR utf-8 (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
'\" t -*- coding: UTF-8 -*-
.\" Copyright 2009  Lefteris Dimitroulakis (edimitro@tee.gr)
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.TH ISO_8859-6 7 2014-10-02 "Linux" "Linux Programmer's Manual"
.SH NAME
iso_8859-6 \- ISO 8859-6 character set encoded in octal, decimal,
and hexadecimal
.SH DESCRIPTION
The ISO 8859 standard includes several 8-bit extensions to the ASCII
character set (also known as ISO 646-IRV).
ISO 8859-6 encodes the
characters used in the Arabic language.
.SS ISO 8859 alphabets
The full set of ISO 8859 alphabets includes:
.TS
l l.
ISO 8859-1	West European languages (Latin-1)
ISO 8859-2	Central and East European languages (Latin-2)
ISO 8859-3	Southeast European and miscellaneous languages (Latin-3)
ISO 8859-4	Scandinavian/Baltic languages (Latin-4)
ISO 8859-5	Latin/Cyrillic
ISO 8859-6	Latin/Arabic
ISO 8859-7	Latin/Greek
ISO 8859-8	Latin/Hebrew
ISO 8859-9	Latin-1 modification for Turkish (Latin-5)
ISO 8859-10	Lappish/Nordic/Eskimo languages (Latin-6)
ISO 8859-11	Latin/Thai
ISO 8859-13	Baltic Rim languages (Latin-7)
ISO 8859-14	Celtic (Latin-8)
ISO 8859-15	West European languages (Latin-9)
ISO 8859-16	Romanian (Latin-10)
.TE
.SS ISO 8859-6 characters
The following table displays the characters in ISO 8859-6, which
are printable and unlisted in the
.BR ascii (7)
manual page.
.TS
l l l c lp-1.
Oct	Dec	Hex	Char	Description
_
240	160	A0	 	NO-BREAK SPACE
244	164	A4	¤	CURRENCY SIGN
254	172	AC	،	ARABIC COMMA
255	173	AD	­	SOFT HYPHEN
273	187	BB	؛	ARABIC SEMICOLON
277	191	BF	؟	ARABIC QUESTION MARK
301	193	C1	ء	ARABIC LETTER HAMZA
302	194	C2	آ	ARABIC LETTER ALEF WITH MADDA ABOVE
303	195	C3	أ	ARABIC LETTER ALEF WITH HAMZA ABOVE
304	196	C4	ؤ	ARABIC LETTER WAW WITH HAMZA ABOVE
305	197	C5	إ	ARABIC LETTER ALEF WITH HAMZA BELOW
306	198	C6	ئ	ARABIC LETTER YEH WITH HAMZA ABOVE
307	199	C7	ا	ARABIC LETTER ALEF
310	200	C8	ب	ARABIC LETTER BEH
311	201	C9	ة	ARABIC LETTER TEH MARBUTA
312	202	CA	ت	ARABIC LETTER TEH
313	203	CB	ث	ARABIC LETTER THEH
314	204	CC	ج	ARABIC LETTER JEEM
315	205	CD	ح	ARABIC LETTER HAH
316	206	CE	خ	ARABIC LETTER KHAH
317	207	CF	د	ARABIC LETTER DAL
320	208	D0	ذ	ARABIC LETTER THAL
321	209	D1	ر	ARABIC LETTER REH
322	210	D2	ز	ARABIC LETTER ZAIN
323	211	D3	س	ARABIC LETTER SEEN
324	212	D4	ش	ARABIC LETTER SHEEN
325	213	D5	ص	ARABIC LETTER SAD
326	214	D6	ض	ARABIC LETTER DAD
327	215	D7	ط	ARABIC LETTER TAH
330	216	D8	ظ	ARABIC LETTER ZAH
331	217	D9	ع	ARABIC LETTER AIN
332	218	DA	غ	ARABIC LETTER GHAIN
340	224	E0	ـ	ARABIC TATWEEL
341	225	E1	ف	ARABIC LETTER FEH
342	226	E2	ق	ARABIC LETTER QAF
343	227	E3	ك	ARABIC LETTER KAF
344	228	E4	ل	ARABIC LETTER LAM
345	229	E5	م	ARABIC LETTER MEEM
346	230	E6	ن	ARABIC LETTER NOON
347	231	E7	ه	ARABIC LETTER HEH
350	232	E8	و	ARABIC LETTER WAW
351	233	E9	ى	ARABIC LETTER ALEF MAKSURA
352	234	EA	ي	ARABIC LETTER YEH
353	235	EB	ً 	ARABIC FATHATAN
354	236	EC	ٌ 	ARABIC DAMMATAN
355	237	ED	ٍ 	ARABIC KASRATAN
356	238	EE	َ 	ARABIC FATHA
357	239	EF	ُ 	ARABIC DAMMA
360	240	F0	ِ 	ARABIC KASRA
361	241	F1	ّ 	ARABIC SHADDA
362	242	F2	ْ 	ARABIC SUKUN
.TE
.SH NOTES
ISO 8859-6 lacks the glyphs required for many related languages,
such as Urdu and Persian (Farsi).
.SH SEE ALSO
.BR ascii (7),
.BR charsets (7),
.BR utf-8 (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
'\" t -*- coding: UTF-8 -*-
.\" Copyright 1999      Dimitri Papadopoulos (dpo@club-internet.fr)
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.TH ISO_8859-7 7 2014-10-02 "Linux" "Linux Programmer's Manual"
.SH NAME
iso_8859-7 \- ISO 8859-7 character set encoded in octal, decimal,
and hexadecimal
.SH DESCRIPTION
The ISO 8859 standard includes several 8-bit extensions to the ASCII
character set (also known as ISO 646-IRV).
ISO 8859-7 encodes the
characters used in modern monotonic Greek.
.SS ISO 8859 alphabets
The full set of ISO 8859 alphabets includes:
.TS
l l.
ISO 8859-1	West European languages (Latin-1)
ISO 8859-2	Central and East European languages (Latin-2)
ISO 8859-3	Southeast European and miscellaneous languages (Latin-3)
ISO 8859-4	Scandinavian/Baltic languages (Latin-4)
ISO 8859-5	Latin/Cyrillic
ISO 8859-6	Latin/Arabic
ISO 8859-7	Latin/Greek
ISO 8859-8	Latin/Hebrew
ISO 8859-9	Latin-1 modification for Turkish (Latin-5)
ISO 8859-10	Lappish/Nordic/Eskimo languages (Latin-6)
ISO 8859-11	Latin/Thai
ISO 8859-13	Baltic Rim languages (Latin-7)
ISO 8859-14	Celtic (Latin-8)
ISO 8859-15	West European languages (Latin-9)
ISO 8859-16	Romanian (Latin-10)
.TE
.SS ISO 8859-7 characters
The following table displays the characters in ISO 8859-7, which
are printable and unlisted in the
.BR ascii (7)
manual page.
.TS
l l l c lp-1.
Oct	Dec	Hex	Char	Description
_
240	160	A0	 	NO-BREAK SPACE
241	161	A1	‘	LEFT SINGLE QUOTATION MARK
242	162	A2	’	RIGHT SINGLE QUOTATION MARK
243	163	A3	£	POUND SIGN
244	164	A4	€	EURO SIGN
245	165	A5	₯	DRACHMA SIGN
246	166	A6	¦	BROKEN BAR
247	167	A7	§	SECTION SIGN
250	168	A8	¨	DIAERESIS
251	169	A9	©	COPYRIGHT SIGN
252	170	AA	ͺ	GREEK YPOGEGRAMMENI
253	171	AB	«	LEFT-POINTING DOUBLE ANGLE QUOTATION MARK
254	172	AC	¬	NOT SIGN
255	173	AD	­	SOFT HYPHEN
257	175	AF	―	HORIZONTAL BAR
260	176	B0	°	DEGREE SIGN
261	177	B1	±	PLUS-MINUS SIGN
262	178	B2	²	SUPERSCRIPT TWO
263	179	B3	³	SUPERSCRIPT THREE
264	180	B4	΄	GREEK TONOS
265	181	B5	΅	GREEK DIALYTIKA TONOS
266	182	B6	Ά	GREEK CAPITAL LETTER ALPHA WITH TONOS
267	183	B7	·	MIDDLE DOT
270	184	B8	Έ	GREEK CAPITAL LETTER EPSILON WITH TONOS
271	185	B9	Ή	GREEK CAPITAL LETTER ETA WITH TONOS
272	186	BA	Ί	GREEK CAPITAL LETTER IOTA WITH TONOS
273	187	BB	»	RIGHT-POINTING DOUBLE ANGLE QUOTATION MARK
274	188	BC	Ό	GREEK CAPITAL LETTER OMICRON WITH TONOS
275	189	BD	½	VULGAR FRACTION ONE HALF
276	190	BE	Ύ	GREEK CAPITAL LETTER UPSILON WITH TONOS
277	191	BF	Ώ	GREEK CAPITAL LETTER OMEGA WITH TONOS
300	192	C0	ΐ	T{
GREEK SMALL LETTER IOTA WITH
.br
DIALYTIKA AND TONOS
T}
301	193	C1	Α	GREEK CAPITAL LETTER ALPHA
302	194	C2	Β	GREEK CAPITAL LETTER BETA
303	195	C3	Γ	GREEK CAPITAL LETTER GAMMA
304	196	C4	Δ	GREEK CAPITAL LETTER DELTA
305	197	C5	Ε	GREEK CAPITAL LETTER EPSILON
306	198	C6	Ζ	GREEK CAPITAL LETTER ZETA
307	199	C7	Η	GREEK CAPITAL LETTER ETA
310	200	C8	Θ	GREEK CAPITAL LETTER THETA
311	201	C9	Ι	GREEK CAPITAL LETTER IOTA
312	202	CA	Κ	GREEK CAPITAL LETTER KAPPA
313	203	CB	Λ	GREEK CAPITAL LETTER LAMBDA
314	204	CC	Μ	GREEK CAPITAL LETTER MU
315	205	CD	Ν	GREEK CAPITAL LETTER NU
316	206	CE	Ξ	GREEK CAPITAL LETTER XI
317	207	CF	Ο	GREEK CAPITAL LETTER OMICRON
320	208	D0	Π	GREEK CAPITAL LETTER PI
321	209	D1	Ρ	GREEK CAPITAL LETTER RHO
323	211	D3	Σ	GREEK CAPITAL LETTER SIGMA
324	212	D4	Τ	GREEK CAPITAL LETTER TAU
325	213	D5	Υ	GREEK CAPITAL LETTER UPSILON
326	214	D6	Φ	GREEK CAPITAL LETTER PHI
327	215	D7	Χ	GREEK CAPITAL LETTER CHI
330	216	D8	Ψ	GREEK CAPITAL LETTER PSI
331	217	D9	Ω	GREEK CAPITAL LETTER OMEGA
332	218	DA	Ϊ	GREEK CAPITAL LETTER IOTA WITH DIALYTIKA
333	219	DB	Ϋ	GREEK CAPITAL LETTER UPSILON WITH DIALYTIKA
334	220	DC	ά	GREEK SMALL LETTER ALPHA WITH TONOS
335	221	DD	έ	GREEK SMALL LETTER EPSILON WITH TONOS
336	222	DE	ή	GREEK SMALL LETTER ETA WITH TONOS
337	223	DF	ί	GREEK SMALL LETTER IOTA WITH TONOS
340	224	E0	ΰ	T{
GREEK SMALL LETTER UPSILON WITH
DIALYTIKA AND TONOS
T}
341	225	E1	α	GREEK SMALL LETTER ALPHA
342	226	E2	β	GREEK SMALL LETTER BETA
343	227	E3	γ	GREEK SMALL LETTER GAMMA
344	228	E4	δ	GREEK SMALL LETTER DELTA
345	229	E5	ε	GREEK SMALL LETTER EPSILON
346	230	E6	ζ	GREEK SMALL LETTER ZETA
347	231	E7	η	GREEK SMALL LETTER ETA
350	232	E8	θ	GREEK SMALL LETTER THETA
351	233	E9	ι	GREEK SMALL LETTER IOTA
352	234	EA	κ	GREEK SMALL LETTER KAPPA
353	235	EB	λ	GREEK SMALL LETTER LAMBDA
354	236	EC	μ	GREEK SMALL LETTER MU
355	237	ED	ν	GREEK SMALL LETTER NU
356	238	EE	ξ	GREEK SMALL LETTER XI
357	239	EF	ο	GREEK SMALL LETTER OMICRON
360	240	F0	π	GREEK SMALL LETTER PI
361	241	F1	ρ	GREEK SMALL LETTER RHO
362	242	F2	ς	GREEK SMALL LETTER FINAL SIGMA
363	243	F3	σ	GREEK SMALL LETTER SIGMA
364	244	F4	τ	GREEK SMALL LETTER TAU
365	245	F5	υ	GREEK SMALL LETTER UPSILON
366	246	F6	φ	GREEK SMALL LETTER PHI
367	247	F7	χ	GREEK SMALL LETTER CHI
370	248	F8	ψ	GREEK SMALL LETTER PSI
371	249	F9	ω	GREEK SMALL LETTER OMEGA
372	250	FA	ϊ	GREEK SMALL LETTER IOTA WITH DIALYTIKA
373	251	FB	ϋ	GREEK SMALL LETTER UPSILON WITH DIALYTIKA
374	252	FC	ό	GREEK SMALL LETTER OMICRON WITH TONOS
375	253	FD	ύ	GREEK SMALL LETTER UPSILON WITH TONOS
376	254	FE	ώ	GREEK SMALL LETTER OMEGA WITH TONOS
.TE
.SH NOTES
ISO 8859-7 was formerly known as ELOT-928 or ECMA-118:1986.
.SH SEE ALSO
.BR ascii (7),
.BR charsets (7),
.BR utf-8 (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
'\" t -*- coding: UTF-8 -*-
.\" Copyright 2009   Lefteris Dimitroulakis (edimitro@tee.gr)
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.\" Eli Zaretskii <eliz@gnu.org> made valuable suggestions
.\"
.TH ISO_8859-8 7 2014-10-02 "Linux" "Linux Programmer's Manual"
.SH NAME
iso_8859-8 \- ISO 8859-8 character set encoded in octal, decimal,
and hexadecimal
.SH DESCRIPTION
The ISO 8859 standard includes several 8-bit extensions to the ASCII
character set (also known as ISO 646-IRV).
ISO 8859-8 encodes the
characters used in Modern Hebrew.
.SS ISO 8859 alphabets
The full set of ISO 8859 alphabets includes:
.TS
l l.
ISO 8859-1	West European languages (Latin-1)
ISO 8859-2	Central and East European languages (Latin-2)
ISO 8859-3	Southeast European and miscellaneous languages (Latin-3)
ISO 8859-4	Scandinavian/Baltic languages (Latin-4)
ISO 8859-5	Latin/Cyrillic
ISO 8859-6	Latin/Arabic
ISO 8859-7	Latin/Greek
ISO 8859-8	Latin/Hebrew
ISO 8859-9	Latin-1 modification for Turkish (Latin-5)
ISO 8859-10	Lappish/Nordic/Eskimo languages (Latin-6)
ISO 8859-11	Latin/Thai
ISO 8859-13	Baltic Rim languages (Latin-7)
ISO 8859-14	Celtic (Latin-8)
ISO 8859-15	West European languages (Latin-9)
ISO 8859-16	Romanian (Latin-10)
.TE
.SS ISO 8859-8 characters
The following table displays the characters in ISO 8859-8, which
are printable and unlisted in the
.BR ascii (7)
manual page.
.TS
l l l c lp-1.
Oct	Dec	Hex	Char	Description
_
240	160	A0	 	NO-BREAK SPACE
242	162	A2	¢	CENT SIGN
243	163	A3	£	POUND SIGN
244	164	A4	¤	CURRENCY SIGN
245	165	A5	¥	YEN SIGN
246	166	A6	¦	BROKEN BAR
247	167	A7	§	SECTION SIGN
250	168	A8	¨	DIAERESIS
251	169	A9	©	COPYRIGHT SIGN
252	170	AA	×	MULTIPLICATION SIGN
253	171	AB	«	LEFT-POINTING DOUBLE ANGLE QUOTATION MARK
254	172	AC	¬	NOT SIGN
255	173	AD	­	SOFT HYPHEN
256	174	AE	®	REGISTERED SIGN
257	175	AF	¯	MACRON
260	176	B0	°	DEGREE SIGN
261	177	B1	±	PLUS-MINUS SIGN
262	178	B2	²	SUPERSCRIPT TWO
263	179	B3	³	SUPERSCRIPT THREE
264	180	B4	´	ACUTE ACCENT
265	181	B5	µ	MICRO SIGN
266	182	B6	¶	PILCROW SIGN
267	183	B7	·	MIDDLE DOT
270	184	B8	¸	CEDILLA
271	185	B9	¹	SUPERSCRIPT ONE
272	186	BA	÷	DIVISION SIGN
273	187	BB	»	RIGHT-POINTING DOUBLE ANGLE QUOTATION MARK
274	188	BC	¼	VULGAR FRACTION ONE QUARTER
275	189	BD	½	VULGAR FRACTION ONE HALF
276	190	BE	¾	VULGAR FRACTION THREE QUARTERS
337	223	DF	‗	DOUBLE LOW LINE
340	224	E0	א	HEBREW LETTER ALEF
341	225	E1	ב	HEBREW LETTER BET
342	226	E2	ג	HEBREW LETTER GIMEL
343	227	E3	ד	HEBREW LETTER DALET
344	228	E4	ה	HEBREW LETTER HE
345	229	E5	ו	HEBREW LETTER VAV
346	230	E6	ז	HEBREW LETTER ZAYIN
347	231	E7	ח	HEBREW LETTER HET
350	232	E8	ט	HEBREW LETTER TET
351	233	E9	י	HEBREW LETTER YOD
352	234	EA	ך	HEBREW LETTER FINAL KAF
353	235	EB	כ	HEBREW LETTER KAF
354	236	EC	ל	HEBREW LETTER LAMED
355	237	ED	ם	HEBREW LETTER FINAL MEM
356	238	EE	מ	HEBREW LETTER MEM
357	239	EF	ן	HEBREW LETTER FINAL NUN
360	240	F0	נ	HEBREW LETTER NUN
361	241	F1	ס	HEBREW LETTER SAMEKH
362	242	F2	ע	HEBREW LETTER AYIN
363	243	F3	ף	HEBREW LETTER FINAL PE
364	244	F4	פ	HEBREW LETTER PE
365	245	F5	ץ	HEBREW LETTER FINAL TSADI
366	246	F6	צ	HEBREW LETTER TSADI
367	247	F7	ק	HEBREW LETTER QOF
370	248	F8	ר	HEBREW LETTER RESH
371	249	F9	ש	HEBREW LETTER SHIN
372	250	FA	ת	HEBREW LETTER TAV
375	253	FD	‎	LEFT-TO-RIGHT MARK
376	254	FE	‏	RIGHT-TO-LEFT MARK
.TE
.SH NOTES
ISO 8859-8 was also known as ISO-IR-138.
ISO 8859-8 includes neither short vowels nor diacritical marks,
and Yiddish is not provided for.
.SH SEE ALSO
.BR ascii (7),
.BR charsets (7),
.BR utf-8 (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
'\" t -*- coding: UTF-8 -*-
.\" Copyright 2002      Dimitri Papadopoulos (dpo@club-internet.fr)
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.TH ISO_8859-9 7 2014-10-02 "Linux" "Linux Programmer's Manual"
.SH NAME
iso_8859-9 \- ISO 8859-9 character set encoded in octal, decimal,
and hexadecimal
.SH DESCRIPTION
The ISO 8859 standard includes several 8-bit extensions to the ASCII
character set (also known as ISO 646-IRV).
ISO 8859-9 encodes the
characters used in Turkish.
.SS ISO 8859 alphabets
The full set of ISO 8859 alphabets includes:
.TS
l l.
ISO 8859-1	West European languages (Latin-1)
ISO 8859-2	Central and East European languages (Latin-2)
ISO 8859-3	Southeast European and miscellaneous languages (Latin-3)
ISO 8859-4	Scandinavian/Baltic languages (Latin-4)
ISO 8859-5	Latin/Cyrillic
ISO 8859-6	Latin/Arabic
ISO 8859-7	Latin/Greek
ISO 8859-8	Latin/Hebrew
ISO 8859-9	Latin-1 modification for Turkish (Latin-5)
ISO 8859-10	Lappish/Nordic/Eskimo languages (Latin-6)
ISO 8859-11	Latin/Thai
ISO 8859-13	Baltic Rim languages (Latin-7)
ISO 8859-14	Celtic (Latin-8)
ISO 8859-15	West European languages (Latin-9)
ISO 8859-16	Romanian (Latin-10)
.TE
.SS ISO 8859-9 characters
The following table displays the characters in ISO 8859-9, which
are printable and unlisted in the
.BR ascii (7)
manual page.
.TS
l l l c lp-1.
Oct	Dec	Hex	Char	Description
_
240	160	A0	 	NO-BREAK SPACE
241	161	A1	¡	INVERTED EXCLAMATION MARK
242	162	A2	¢	CENT SIGN
243	163	A3	£	POUND SIGN
244	164	A4	¤	CURRENCY SIGN
245	165	A5	¥	YEN SIGN
246	166	A6	¦	BROKEN BAR
247	167	A7	§	SECTION SIGN
250	168	A8	¨	DIAERESIS
251	169	A9	©	COPYRIGHT SIGN
252	170	AA	ª	FEMININE ORDINAL INDICATOR
253	171	AB	«	LEFT-POINTING DOUBLE ANGLE QUOTATION MARK
254	172	AC	¬	NOT SIGN
255	173	AD	­	SOFT HYPHEN
256	174	AE	®	REGISTERED SIGN
257	175	AF	¯	MACRON
260	176	B0	°	DEGREE SIGN
261	177	B1	±	PLUS-MINUS SIGN
262	178	B2	²	SUPERSCRIPT TWO
263	179	B3	³	SUPERSCRIPT THREE
264	180	B4	´	ACUTE ACCENT
265	181	B5	µ	MICRO SIGN
266	182	B6	¶	PILCROW SIGN
267	183	B7	·	MIDDLE DOT
270	184	B8	¸	CEDILLA
271	185	B9	¹	SUPERSCRIPT ONE
272	186	BA	º	MASCULINE ORDINAL INDICATOR
273	187	BB	»	RIGHT-POINTING DOUBLE ANGLE QUOTATION MARK
274	188	BC	¼	VULGAR FRACTION ONE QUARTER
275	189	BD	½	VULGAR FRACTION ONE HALF
276	190	BE	¾	VULGAR FRACTION THREE QUARTERS
277	191	BF	¿	INVERTED QUESTION MARK
300	192	C0	À	LATIN CAPITAL LETTER A WITH GRAVE
301	193	C1	Á	LATIN CAPITAL LETTER A WITH ACUTE
302	194	C2	Â	LATIN CAPITAL LETTER A WITH CIRCUMFLEX
303	195	C3	Ã	LATIN CAPITAL LETTER A WITH TILDE
304	196	C4	Ä	LATIN CAPITAL LETTER A WITH DIAERESIS
305	197	C5	Å	LATIN CAPITAL LETTER A WITH RING ABOVE
306	198	C6	Æ	LATIN CAPITAL LETTER AE
307	199	C7	Ç	LATIN CAPITAL LETTER C WITH CEDILLA
310	200	C8	È	LATIN CAPITAL LETTER E WITH GRAVE
311	201	C9	É	LATIN CAPITAL LETTER E WITH ACUTE
312	202	CA	Ê	LATIN CAPITAL LETTER E WITH CIRCUMFLEX
313	203	CB	Ë	LATIN CAPITAL LETTER E WITH DIAERESIS
314	204	CC	Ì	LATIN CAPITAL LETTER I WITH GRAVE
315	205	CD	Í	LATIN CAPITAL LETTER I WITH ACUTE
316	206	CE	Î	LATIN CAPITAL LETTER I WITH CIRCUMFLEX
317	207	CF	Ï	LATIN CAPITAL LETTER I WITH DIAERESIS
320	208	D0	Ğ	LATIN CAPITAL LETTER G WITH BREVE
321	209	D1	Ñ	LATIN CAPITAL LETTER N WITH TILDE
322	210	D2	Ò	LATIN CAPITAL LETTER O WITH GRAVE
323	211	D3	Ó	LATIN CAPITAL LETTER O WITH ACUTE
324	212	D4	Ô	LATIN CAPITAL LETTER O WITH CIRCUMFLEX
325	213	D5	Õ	LATIN CAPITAL LETTER O WITH TILDE
326	214	D6	Ö	LATIN CAPITAL LETTER O WITH DIAERESIS
327	215	D7	×	MULTIPLICATION SIGN
330	216	D8	Ø	LATIN CAPITAL LETTER O WITH STROKE
331	217	D9	Ù	LATIN CAPITAL LETTER U WITH GRAVE
332	218	DA	Ú	LATIN CAPITAL LETTER U WITH ACUTE
333	219	DB	Û	LATIN CAPITAL LETTER U WITH CIRCUMFLEX
334	220	DC	Ü	LATIN CAPITAL LETTER U WITH DIAERESIS
335	221	DD	İ	LATIN CAPITAL LETTER I WITH DOT ABOVE
336	222	DE	Ş	LATIN CAPITAL LETTER S WITH CEDILLA
337	223	DF	ß	LATIN SMALL LETTER SHARP S
340	224	E0	à	LATIN SMALL LETTER A WITH GRAVE
341	225	E1	á	LATIN SMALL LETTER A WITH ACUTE
342	226	E2	â	LATIN SMALL LETTER A WITH CIRCUMFLEX
343	227	E3	ã	LATIN SMALL LETTER A WITH TILDE
344	228	E4	ä	LATIN SMALL LETTER A WITH DIAERESIS
345	229	E5	å	LATIN SMALL LETTER A WITH RING ABOVE
346	230	E6	æ	LATIN SMALL LETTER AE
347	231	E7	ç	LATIN SMALL LETTER C WITH CEDILLA
350	232	E8	è	LATIN SMALL LETTER E WITH GRAVE
351	233	E9	é	LATIN SMALL LETTER E WITH ACUTE
352	234	EA	ê	LATIN SMALL LETTER E WITH CIRCUMFLEX
353	235	EB	ë	LATIN SMALL LETTER E WITH DIAERESIS
354	236	EC	ì	LATIN SMALL LETTER I WITH GRAVE
355	237	ED	í	LATIN SMALL LETTER I WITH ACUTE
356	238	EE	î	LATIN SMALL LETTER I WITH CIRCUMFLEX
357	239	EF	ï	LATIN SMALL LETTER I WITH DIAERESIS
360	240	F0	ğ	LATIN SMALL LETTER G WITH BREVE
361	241	F1	ñ	LATIN SMALL LETTER N WITH TILDE
362	242	F2	ò	LATIN SMALL LETTER O WITH GRAVE
363	243	F3	ó	LATIN SMALL LETTER O WITH ACUTE
364	244	F4	ô	LATIN SMALL LETTER O WITH CIRCUMFLEX
365	245	F5	õ	LATIN SMALL LETTER O WITH TILDE
366	246	F6	ö	LATIN SMALL LETTER O WITH DIAERESIS
367	247	F7	÷	DIVISION SIGN
370	248	F8	ø	LATIN SMALL LETTER O WITH STROKE
371	249	F9	ù	LATIN SMALL LETTER U WITH GRAVE
372	250	FA	ú	LATIN SMALL LETTER U WITH ACUTE
373	251	FB	û	LATIN SMALL LETTER U WITH CIRCUMFLEX
374	252	FC	ü	LATIN SMALL LETTER U WITH DIAERESIS
375	253	FD	ı	LATIN SMALL LETTER DOTLESS I
376	254	FE	ş	LATIN SMALL LETTER S WITH CEDILLA
377	255	FF	ÿ	LATIN SMALL LETTER Y WITH DIAERESIS
.TE
.SH NOTES
ISO 8859-9 is also known as Latin-5.
.SH SEE ALSO
.BR ascii (7),
.BR charsets (7),
.BR utf-8 (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
'\" t -*- coding: UTF-8 -*-
.\" Copyright 2001      Alexey Mahotkin <alexm@hsys.msk.ru>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.TH KOI8-R 7 2014-10-02 "Linux" "Linux Programmer's Manual"
.SH NAME
koi8-r \- Russian character set encoded in octal, decimal,
and hexadecimal
.SH DESCRIPTION
RFC\ 1489 defines an 8-bit character set, KOI8-R.
KOI8-R encodes the
characters used in Russian.
.SS KOI8-R characters
The following table displays the characters in KOI8-R, which
are printable and unlisted in the
.BR ascii (7)
manual page.
.TS
l l l c lp-1.
Oct	Dec	Hex	Char	Description
_
200	128	80	─	BOX DRAWINGS LIGHT HORIZONTAL
201	129	81	│	BOX DRAWINGS LIGHT VERTICAL
202	130	82	┌	BOX DRAWINGS LIGHT DOWN AND RIGHT
203	131	83	┐	BOX DRAWINGS LIGHT DOWN AND LEFT
204	132	84	└	BOX DRAWINGS LIGHT UP AND RIGHT
205	133	85	┘	BOX DRAWINGS LIGHT UP AND LEFT
206	134	86	├	BOX DRAWINGS LIGHT VERTICAL AND RIGHT
207	135	87	┤	BOX DRAWINGS LIGHT VERTICAL AND LEFT
210	136	88	┬	BOX DRAWINGS LIGHT DOWN AND HORIZONTAL
211	137	89	┴	BOX DRAWINGS LIGHT UP AND HORIZONTAL
212	138	8A	┼	BOX DRAWINGS LIGHT VERTICAL AND HORIZONTAL
213	139	8B	▀	UPPER HALF BLOCK
214	140	8C	▄	LOWER HALF BLOCK
215	141	8D	█	FULL BLOCK
216	142	8E	▌	LEFT HALF BLOCK
217	143	8F	▐	RIGHT HALF BLOCK
220	144	90	░	LIGHT SHADE
221	145	91	▒	MEDIUM SHADE
222	146	92	▓	DARK SHADE
223	147	93	⌠	TOP HALF INTEGRAL
224	148	94	■	BLACK SQUARE
225	149	95	∙	BULLET OPERATOR
226	150	96	√	SQUARE ROOT
227	151	97	≈	ALMOST EQUAL TO
230	152	98	≤	LESS-THAN OR EQUAL TO
231	153	99	≥	GREATER-THAN OR EQUAL TO
232	154	9A	 	NO-BREAK SPACE
233	155	9B	⌡	BOTTOM HALF INTEGRAL
234	156	9C	°	DEGREE SIGN
235	157	9D	²	SUPERSCRIPT TWO
236	158	9E	·	MIDDLE DOT
237	159	9F	÷	DIVISION SIGN
240	160	A0	═	BOX DRAWINGS DOUBLE HORIZONTAL
241	161	A1	║	BOX DRAWINGS DOUBLE VERTICAL
242	162	A2	╒	BOX DRAWINGS DOWN SINGLE AND RIGHT DOUBLE
243	163	A3	ё	CYRILLIC SMALL LETTER IO
244	164	A4	╓	BOX DRAWINGS DOWN DOUBLE AND RIGHT SINGLE
245	165	A5	╔	BOX DRAWINGS DOUBLE DOWN AND RIGHT
246	166	A6	╕	BOX DRAWINGS DOWN SINGLE AND LEFT DOUBLE
247	167	A7	╖	BOX DRAWINGS DOWN DOUBLE AND LEFT SINGLE
250	168	A8	╗	BOX DRAWINGS DOUBLE DOWN AND LEFT
251	169	A9	╘	BOX DRAWINGS UP SINGLE AND RIGHT DOUBLE
252	170	AA	╙	BOX DRAWINGS UP DOUBLE AND RIGHT SINGLE
253	171	AB	╚	BOX DRAWINGS DOUBLE UP AND RIGHT
254	172	AC	╛	BOX DRAWINGS UP SINGLE AND LEFT DOUBLE
255	173	AD	╜	BOX DRAWINGS UP DOUBLE AND LEFT SINGLE
256	174	AE	╝	BOX DRAWINGS DOUBLE UP AND LEFT
257	175	AF	╞	BOX DRAWINGS VERTICAL SINGLE AND RIGHT DOUBLE
260	176	B0	╟	BOX DRAWINGS VERTICAL DOUBLE AND RIGHT SINGLE
261	177	B1	╠	BOX DRAWINGS DOUBLE VERTICAL AND RIGHT
262	178	B2	╡	BOX DRAWINGS VERTICAL SINGLE AND LEFT DOUBLE
263	179	B3	Ё	CYRILLIC CAPITAL LETTER IO
264	180	B4	╢	BOX DRAWINGS VERTICAL DOUBLE AND LEFT SINGLE
265	181	B5	╣	BOX DRAWINGS DOUBLE VERTICAL AND LEFT
266	182	B6	╤	BOX DRAWINGS DOWN SINGLE AND HORIZONTAL DOUBLE
267	183	B7	╥	BOX DRAWINGS DOWN DOUBLE AND HORIZONTAL SINGLE
270	184	B8	╦	BOX DRAWINGS DOUBLE DOWN AND HORIZONTAL
271	185	B9	╧	BOX DRAWINGS UP SINGLE AND HORIZONTAL DOUBLE
272	186	BA	╨	BOX DRAWINGS UP DOUBLE AND HORIZONTAL SINGLE
273	187	BB	╩	BOX DRAWINGS DOUBLE UP AND HORIZONTAL
274	188	BC	╪	T{
BOX DRAWINGS VERTICAL SINGLE
.br
AND HORIZONTAL DOUBLE
T}
275	189	BD	╫	T{
BOX DRAWINGS VERTICAL DOUBLE
.br
AND HORIZONTAL SINGLE
T}
276	190	BE	╬	BOX DRAWINGS DOUBLE VERTICAL AND HORIZONTAL
277	191	BF	©	COPYRIGHT SIGN
300	192	C0	ю	CYRILLIC SMALL LETTER YU
301	193	C1	а	CYRILLIC SMALL LETTER A
302	194	C2	б	CYRILLIC SMALL LETTER BE
303	195	C3	ц	CYRILLIC SMALL LETTER TSE
304	196	C4	д	CYRILLIC SMALL LETTER DE
305	197	C5	е	CYRILLIC SMALL LETTER IE
306	198	C6	ф	CYRILLIC SMALL LETTER EF
307	199	C7	г	CYRILLIC SMALL LETTER GHE
310	200	C8	х	CYRILLIC SMALL LETTER HA
311	201	C9	и	CYRILLIC SMALL LETTER I
312	202	CA	й	CYRILLIC SMALL LETTER SHORT I
313	203	CB	к	CYRILLIC SMALL LETTER KA
314	204	CC	л	CYRILLIC SMALL LETTER EL
315	205	CD	м	CYRILLIC SMALL LETTER EM
316	206	CE	н	CYRILLIC SMALL LETTER EN
317	207	CF	о	CYRILLIC SMALL LETTER O
320	208	D0	п	CYRILLIC SMALL LETTER PE
321	209	D1	я	CYRILLIC SMALL LETTER YA
322	210	D2	р	CYRILLIC SMALL LETTER ER
323	211	D3	с	CYRILLIC SMALL LETTER ES
324	212	D4	т	CYRILLIC SMALL LETTER TE
325	213	D5	у	CYRILLIC SMALL LETTER U
326	214	D6	ж	CYRILLIC SMALL LETTER ZHE
327	215	D7	в	CYRILLIC SMALL LETTER VE
330	216	D8	ь	CYRILLIC SMALL LETTER SOFT SIGN
331	217	D9	ы	CYRILLIC SMALL LETTER YERU
332	218	DA	з	CYRILLIC SMALL LETTER ZE
333	219	DB	ш	CYRILLIC SMALL LETTER SHA
334	220	DC	э	CYRILLIC SMALL LETTER E
335	221	DD	щ	CYRILLIC SMALL LETTER SHCHA
336	222	DE	ч	CYRILLIC SMALL LETTER CHE
337	223	DF	ъ	CYRILLIC SMALL LETTER HARD SIGN
340	224	E0	Ю	CYRILLIC CAPITAL LETTER YU
341	225	E1	А	CYRILLIC CAPITAL LETTER A
342	226	E2	Б	CYRILLIC CAPITAL LETTER BE
343	227	E3	Ц	CYRILLIC CAPITAL LETTER TSE
344	228	E4	Д	CYRILLIC CAPITAL LETTER DE
345	229	E5	Е	CYRILLIC CAPITAL LETTER IE
346	230	E6	Ф	CYRILLIC CAPITAL LETTER EF
347	231	E7	Г	CYRILLIC CAPITAL LETTER GHE
350	232	E8	Х	CYRILLIC CAPITAL LETTER HA
351	233	E9	И	CYRILLIC CAPITAL LETTER I
352	234	EA	Й	CYRILLIC CAPITAL LETTER SHORT I
353	235	EB	К	CYRILLIC CAPITAL LETTER KA
354	236	EC	Л	CYRILLIC CAPITAL LETTER EL
355	237	ED	М	CYRILLIC CAPITAL LETTER EM
356	238	EE	Н	CYRILLIC CAPITAL LETTER EN
357	239	EF	О	CYRILLIC CAPITAL LETTER O
360	240	F0	П	CYRILLIC CAPITAL LETTER PE
361	241	F1	Я	CYRILLIC CAPITAL LETTER YA
362	242	F2	Р	CYRILLIC CAPITAL LETTER ER
363	243	F3	С	CYRILLIC CAPITAL LETTER ES
364	244	F4	Т	CYRILLIC CAPITAL LETTER TE
365	245	F5	У	CYRILLIC CAPITAL LETTER U
366	246	F6	Ж	CYRILLIC CAPITAL LETTER ZHE
367	247	F7	В	CYRILLIC CAPITAL LETTER VE
370	248	F8	Ь	CYRILLIC CAPITAL LETTER SOFT SIGN
371	249	F9	Ы	CYRILLIC CAPITAL LETTER YERU
372	250	FA	З	CYRILLIC CAPITAL LETTER ZE
373	251	FB	Ш	CYRILLIC CAPITAL LETTER SHA
374	252	FC	Э	CYRILLIC CAPITAL LETTER E
375	253	FD	Щ	CYRILLIC CAPITAL LETTER SHCHA
376	254	FE	Ч	CYRILLIC CAPITAL LETTER CHE
377	255	FF	Ъ	CYRILLIC CAPITAL LETTER HARD SIGN
.TE
.SH NOTES
The differences with KOI8-U are in the hex positions
A4, A6, A7, AD, B4, B6, B7, and BD.
.SH SEE ALSO
.BR ascii (7),
.BR charsets (7),
.BR iso_8859-5 (7),
.BR koi8-u (7),
.BR utf-8 (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
'\" t -*- coding: UTF-8 -*-
.\" Copyright 2009  Lefteris Dimitroulakis <edimitro at tee.gr>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.\" 2009-01-15, mtk, Some edits
.\"
.TH KOI8-U 7 2014-10-02 "Linux" "Linux Programmer's Manual"
.SH NAME
koi8-u \- Ukrainian character set encoded in octal, decimal,
and hexadecimal
.SH DESCRIPTION
RFC\ 2310 defines an 8-bit character set, KOI8-U.
KOI8-U encodes the
characters used in Ukrainian and Byelorussian.
.SS KOI8-U characters
The following table displays the characters in KOI8-U, which
are printable and unlisted in the
.BR ascii (7)
manual page.
.TS
l l l c lp-1.
Oct	Dec	Hex	Char	Description
_
200	128	80	─	BOX DRAWINGS LIGHT HORIZONTAL
201	129	81	│	BOX DRAWINGS LIGHT VERTICAL
202	130	82	┌	BOX DRAWINGS LIGHT DOWN AND RIGHT
203	131	83	┐	BOX DRAWINGS LIGHT DOWN AND LEFT
204	132	84	└	BOX DRAWINGS LIGHT UP AND RIGHT
205	133	85	┘	BOX DRAWINGS LIGHT UP AND LEFT
206	134	86	├	BOX DRAWINGS LIGHT VERTICAL AND RIGHT
207	135	87	┤	BOX DRAWINGS LIGHT VERTICAL AND LEFT
210	136	88	┬	BOX DRAWINGS LIGHT DOWN AND HORIZONTAL
211	137	89	┴	BOX DRAWINGS LIGHT UP AND HORIZONTAL
212	138	8A	┼	BOX DRAWINGS LIGHT VERTICAL AND HORIZONTAL
213	139	8B	▀	UPPER HALF BLOCK
214	140	8C	▄	LOWER HALF BLOCK
215	141	8D	█	FULL BLOCK
216	142	8E	▌	LEFT HALF BLOCK
217	143	8F	▐	RIGHT HALF BLOCK
220	144	90	░	LIGHT SHADE
221	145	91	▒	MEDIUM SHADE
222	146	92	▓	DARK SHADE
223	147	93	⌠	TOP HALF INTEGRAL
224	148	94	■	BLACK SQUARE
225	149	95	∙	BULLET OPERATOR
226	150	96	√	SQUARE ROOT
227	151	97	≈	ALMOST EQUAL TO
230	152	98	≤	LESS-THAN OR EQUAL TO
231	153	99	≥	GREATER-THAN OR EQUAL TO
232	154	9A	 	NO-BREAK SPACE
233	155	9B	⌡	BOTTOM HALF INTEGRAL
234	156	9C	°	DEGREE SIGN
235	157	9D	²	SUPERSCRIPT TWO
236	158	9E	·	MIDDLE DOT
237	159	9F	÷	DIVISION SIGN
240	160	A0	═	BOX DRAWINGS DOUBLE HORIZONTAL
241	161	A1	║	BOX DRAWINGS DOUBLE VERTICAL
242	162	A2	╒	BOX DRAWINGS DOWN SINGLE AND RIGHT DOUBLE
243	163	A3	ё	CYRILLIC SMALL LETTER IO
244	164	A4	є	CYRILLIC SMALL LETTER UKRAINIAN IE
245	165	A5	╔	BOX DRAWINGS DOUBLE DOWN AND RIGHT
246	166	A6	і	T{
CYRILLIC SMALL LETTER
.br
BYELORUSSIAN-UKRAINIAN I
T}
247	167	A7	ї	CYRILLIC SMALL LETTER YI (Ukrainian)
250	168	A8	╗	BOX DRAWINGS DOUBLE DOWN AND LEFT
251	169	A9	╘	BOX DRAWINGS UP SINGLE AND RIGHT DOUBLE
252	170	AA	╙	BOX DRAWINGS UP DOUBLE AND RIGHT SINGLE
253	171	AB	╚	BOX DRAWINGS DOUBLE UP AND RIGHT
254	172	AC	╛	BOX DRAWINGS UP SINGLE AND LEFT DOUBLE
255	173	AD	ґ	CYRILLIC SMALL LETTER GHE WITH UPTURN
256	174	AE	╝	BOX DRAWINGS DOUBLE UP AND LEFT
257	175	AF	╞	BOX DRAWINGS VERTICAL SINGLE AND RIGHT DOUBLE
260	176	B0	╟	BOX DRAWINGS VERTICAL DOUBLE AND RIGHT SINGLE
261	177	B1	╠	BOX DRAWINGS DOUBLE VERTICAL AND RIGHT
262	178	B2	╡	BOX DRAWINGS VERTICAL SINGLE AND LEFT DOUBLE
263	179	B3	Ё	CYRILLIC CAPITAL LETTER IO
264	180	B4	Є	CYRILLIC CAPITAL LETTER UKRAINIAN IE
265	181	B5	╣	BOX DRAWINGS DOUBLE VERTICAL AND LEFT
266	182	B6	І	T{
CYRILLIC CAPITAL LETTER
.br
BYELORUSSIAN-UKRAINIAN I
T}
267	183	B7	Ї	CYRILLIC CAPITAL LETTER YI (Ukrainian)
270	184	B8	╦	BOX DRAWINGS DOUBLE DOWN AND HORIZONTAL
271	185	B9	╧	BOX DRAWINGS UP SINGLE AND HORIZONTAL DOUBLE
272	186	BA	╨	BOX DRAWINGS UP DOUBLE AND HORIZONTAL SINGLE
273	187	BB	╩	BOX DRAWINGS DOUBLE UP AND HORIZONTAL
274	188	BC	╪	T{
BOX DRAWINGS VERTICAL SINGLE
.br
AND HORIZONTAL DOUBLE
T}
275	189	BD	Ґ	CYRILLIC CAPITAL LETTER GHE WITH UPTURN
276	190	BE	╬	BOX DRAWINGS DOUBLE VERTICAL AND HORIZONTAL
277	191	BF	©	COPYRIGHT SIGN
300	192	C0	ю	CYRILLIC SMALL LETTER YU
301	193	C1	а	CYRILLIC SMALL LETTER A
302	194	C2	б	CYRILLIC SMALL LETTER BE
303	195	C3	ц	CYRILLIC SMALL LETTER TSE
304	196	C4	д	CYRILLIC SMALL LETTER DE
305	197	C5	е	CYRILLIC SMALL LETTER IE
306	198	C6	ф	CYRILLIC SMALL LETTER EF
307	199	C7	г	CYRILLIC SMALL LETTER GHE
310	200	C8	х	CYRILLIC SMALL LETTER HA
311	201	C9	и	CYRILLIC SMALL LETTER I
312	202	CA	й	CYRILLIC SMALL LETTER SHORT I
313	203	CB	к	CYRILLIC SMALL LETTER KA
314	204	CC	л	CYRILLIC SMALL LETTER EL
315	205	CD	м	CYRILLIC SMALL LETTER EM
316	206	CE	н	CYRILLIC SMALL LETTER EN
317	207	CF	о	CYRILLIC SMALL LETTER O
320	208	D0	п	CYRILLIC SMALL LETTER PE
321	209	D1	я	CYRILLIC SMALL LETTER YA
322	210	D2	р	CYRILLIC SMALL LETTER ER
323	211	D3	с	CYRILLIC SMALL LETTER ES
324	212	D4	т	CYRILLIC SMALL LETTER TE
325	213	D5	у	CYRILLIC SMALL LETTER U
326	214	D6	ж	CYRILLIC SMALL LETTER ZHE
327	215	D7	в	CYRILLIC SMALL LETTER VE
330	216	D8	ь	CYRILLIC SMALL LETTER SOFT SIGN
331	217	D9	ы	CYRILLIC SMALL LETTER YERU
332	218	DA	з	CYRILLIC SMALL LETTER ZE
333	219	DB	ш	CYRILLIC SMALL LETTER SHA
334	220	DC	э	CYRILLIC SMALL LETTER E
335	221	DD	щ	CYRILLIC SMALL LETTER SHCHA
336	222	DE	ч	CYRILLIC SMALL LETTER CHE
337	223	DF	ъ	CYRILLIC SMALL LETTER HARD SIGN
340	224	E0	Ю	CYRILLIC CAPITAL LETTER YU
341	225	E1	А	CYRILLIC CAPITAL LETTER A
342	226	E2	Б	CYRILLIC CAPITAL LETTER BE
343	227	E3	Ц	CYRILLIC CAPITAL LETTER TSE
344	228	E4	Д	CYRILLIC CAPITAL LETTER DE
345	229	E5	Е	CYRILLIC CAPITAL LETTER IE
346	230	E6	Ф	CYRILLIC CAPITAL LETTER EF
347	231	E7	Г	CYRILLIC CAPITAL LETTER GHE
350	232	E8	Х	CYRILLIC CAPITAL LETTER HA
351	233	E9	И	CYRILLIC CAPITAL LETTER I
352	234	EA	Й	CYRILLIC CAPITAL LETTER SHORT I
353	235	EB	К	CYRILLIC CAPITAL LETTER KA
354	236	EC	Л	CYRILLIC CAPITAL LETTER EL
355	237	ED	М	CYRILLIC CAPITAL LETTER EM
356	238	EE	Н	CYRILLIC CAPITAL LETTER EN
357	239	EF	О	CYRILLIC CAPITAL LETTER O
360	240	F0	П	CYRILLIC CAPITAL LETTER PE
361	241	F1	Я	CYRILLIC CAPITAL LETTER YA
362	242	F2	Р	CYRILLIC CAPITAL LETTER ER
363	243	F3	С	CYRILLIC CAPITAL LETTER ES
364	244	F4	Т	CYRILLIC CAPITAL LETTER TE
365	245	F5	У	CYRILLIC CAPITAL LETTER U
366	246	F6	Ж	CYRILLIC CAPITAL LETTER ZHE
367	247	F7	В	CYRILLIC CAPITAL LETTER VE
370	248	F8	Ь	CYRILLIC CAPITAL LETTER SOFT SIGN
371	249	F9	Ы	CYRILLIC CAPITAL LETTER YERU
372	250	FA	З	CYRILLIC CAPITAL LETTER ZE
373	251	FB	Ш	CYRILLIC CAPITAL LETTER SHA
374	252	FC	Э	CYRILLIC CAPITAL LETTER E
375	253	FD	Щ	CYRILLIC CAPITAL LETTER SHCHA
376	254	FE	Ч	CYRILLIC CAPITAL LETTER CHE
377	255	FF	Ъ	CYRILLIC CAPITAL LETTER HARD SIGN
.TE
.SH NOTES
The differences from KOI8-R are in the hex positions
A4, A6, A7, AD, B4, B6, B7, and BD.
.SH SEE ALSO
.BR ascii (7),
.BR charsets (7),
.BR iso_8859-5 (7),
.BR koi8-r (7),
.BR utf-8 (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2009 Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH LIBC 7 2014-07-08 "Linux" "Linux Programmer's Manual"
.SH NAME
libc \- overview of standard C libraries on Linux
.SH DESCRIPTION
The term "libc" is commonly used as a shorthand for
the "standard C library",
a library of standard functions that can be used by all C programs
(and sometimes by programs in other languages).
Because of some history (see below), use of the term "libc"
to refer to the standard C library is somewhat ambiguous on Linux.
.SS glibc
By far the most widely used C library on Linux is the GNU C Library
.UR http://www.gnu.org\:/software\:/libc/
.UE ,
often referred to as
.IR glibc .
This is the C library that is nowadays used in all
major Linux distributions.
It is also the C library whose details are documented
in the relevant pages of the
.I man-pages
project (primarily in Section 3 of the manual).
Documentation of glibc is also available in the glibc manual,
available via the command
.IR "info libc" .
Release 1.0 of glibc was made in September 1992.
(There were earlier 0.x releases.)
The next major release of glibc was 2.0, at the beginning of 1997.

The pathname
.I /lib/libc.so.6
(or something similar) is normally a symbolic link that
points to the location of the glibc library,
and executing this pathname will cause glibc to display
various information about the version installed on your system.
.SS Linux libc
In the early to mid 1990s, there was for a while
.IR "Linux libc" ,
a fork of glibc 1.x created by Linux developers who felt that glibc
development at the time was not sufficing for the needs of Linux.
Often, this library was referred to (ambiguously) as just "libc".
Linux libc released major versions 2, 3, 4, and 5
(as well as many minor versions of those releases).
For a while,
Linux libc was the standard C library in many Linux distributions.

However, notwithstanding the original motivations of the Linux libc effort,
by the time glibc 2.0 was released (in 1997),
it was clearly superior to Linux libc,
and all major Linux distributions that had been using Linux libc
soon switched back to glibc.
Since this switch occurred long ago,
.I man-pages
no longer takes care to document Linux libc details.
Nevertheless, the history is visible in vestiges of information
about Linux libc that remain in some manual pages,
in particular, references to
.IR libc4
and
.IR libc5 .
.SS Other C libraries
There are various other less widely used C libraries for Linux.
These libraries are generally smaller than glibc,
both in terms of features and memory footprint,
and often intended for building small binaries,
perhaps targeted at development for embedded Linux systems.
Among such libraries are
.UR http://www.uclibc.org/
.I uClibc
.UE ,
.UR http://www.fefe.de/dietlibc/
.I dietlibc
.UE ,
and
.UR http://www.musl-libc.org/
.I "musl libc"
.UE .
Details of these libraries are covered by the
.I man-pages
project, where they are known.
.SH SEE ALSO
.BR syscalls (2),
.BR getauxval (3),
.BR proc (5),
.BR feature_test_macros (7),
.BR man-pages (7),
.BR standards (7),
.BR vdso (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1993 by Thomas Koenig (ig25@rz.uni-karlsruhe.de)
.\" and Copyright (C) 2014 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified Sat Jul 24 17:28:34 1993 by Rik Faith <faith@cs.unc.edu>
.\" Modified Sun Jun 01 17:16:34 1997 by Jochen Hein
.\"   <jochen.hein@delphi.central.de>
.\" Modified Thu Apr 25 00:43:19 2002 by Bruno Haible <bruno@clisp.org>
.\"
.TH LOCALE 7  2014-12-31 "Linux" "Linux Programmer's Manual"
.SH NAME
locale \- description of multilanguage support
.SH SYNOPSIS
.nf
.B #include <locale.h>
.fi
.SH DESCRIPTION
A locale is a set of language and cultural rules.
These cover aspects
such as language for messages, different character sets, lexicographic
conventions, and so on.
A program needs to be able to determine its locale
and act accordingly to be portable to different cultures.
.PP
The header
.I <locale.h>
declares data types, functions and macros which are useful in this
task.
.PP
The functions it declares are
.BR setlocale (3)
to set the current locale, and
.BR localeconv (3)
to get information about number formatting.
.PP
There are different categories for locale information a program might
need; they are declared as macros.
Using them as the first argument
to the
.BR setlocale (3)
function, it is possible to set one of these to the desired locale:
.TP
.BR LC_ADDRESS " (GNU extension, since glibc 2.2)"
.\" See ISO/IEC Technical Report 14652
Change settings that describe the formats (e.g., postal addresses)
used to describe locations and geography-related items.
Applications that need this information can use
.BR nl_langinfo (3)
to retrieve nonstandard elements, such as
.B _NL_ADDRESS_COUNTRY_NAME
(country name, in the language of the locale)
and
.B _NL_ADDRESS_LANG_NAME
(language name, in the language of the locale),
which return strings such as "Deutschland" and "Deutsch"
(for German-language locales).
(Other element names are listed in
.IR <langinfo.h> .)
.TP
.B LC_COLLATE
This category governs the collation rules used for
sorting and regular expressions,
including character equivalence classes and
multicharacter collating elements.
This locale category changes the behavior of the functions
.BR strcoll (3)
and
.BR strxfrm (3),
which are used to compare strings in the local alphabet.
For example,
the German sharp s is sorted as "ss".
.TP
.B LC_CTYPE
This category determines the interpretation of byte sequences as characters
(e.g., single versus multibyte characters), character classifications
(e.g., alphabetic or digit), and the behavior of character classes.
It changes the behavior of the character handling and
classification functions, such as
.BR isupper (3)
and
.BR toupper (3),
and the multibyte character functions such as
.BR mblen (3)
or
.BR wctomb (3).
.TP
.BR LC_IDENTIFICATION " (GNU extension, since glibc 2.2)"
.\" See ISO/IEC Technical Report 14652
Change settings that relate to the metadata for the locale.
Applications that need this information can use
.BR nl_langinfo (3)
to retrieve nonstandard elements, such as
.B _NL_IDENTIFICATION_TITLE
(title of this locale document)
and
.B _NL_IDENTIFICATION_TERRITORY
(geographical territory to which this locale document applies),
which might return strings such as "English locale for the USA"
and "USA".
(Other element names are listed in
.IR <langinfo.h> .)
.TP
.B LC_MONETARY
This category determines the formatting used for
monetary-related numeric values.
This changes the information returned by
.BR localeconv (3),
which describes the way numbers are usually printed, with details such
as decimal point versus decimal comma.
This information is internally
used by the function
.BR strfmon (3).
.TP
.B LC_MESSAGES
This category affects the language in which messages are displayed
and what an affirmative or negative answer looks like.
The GNU C library contains the
.BR gettext (3),
.BR ngettext (3),
and
.BR rpmatch (3)
functions to ease the use of this information.
The GNU gettext family of
functions also obey the environment variable
.BR LANGUAGE
(containing a colon-separated list of locales)
if the category is set to a valid locale other than
.BR """C""" .
This category also affects the behavior of
.BR catopen (3).
.TP
.BR LC_MEASUREMENT " (GNU extension, since glibc 2.2)"
Change the settings relating to the measurement system in the locale
(i.e., metric versus US customary units).
Applications can use
.BR nl_langinfo (3)
to retrieve the nonstandard
.B _NL_MEASUREMENT_MEASUREMENT
element, which returns a pointer to a character
that has the value 1 (metric) or 2 (US customary units).
.TP
.BR LC_NAME " (GNU extension, since glibc 2.2)"
.\" See ISO/IEC Technical Report 14652
Change settings that describe the formats used to address persons.
Applications that need this information can use
.BR nl_langinfo (3)
to retrieve nonstandard elements, such as
.B _NL_NAME_NAME_MR
(general salutation for men)
and
.B _NL_NAME_NAME_MS
(general salutation for women)
elements, which return strings such as "Herr" and "Frau"
(for German-language locales).
(Other element names are listed in
.IR <langinfo.h> .)
.TP
.B LC_NUMERIC
This category determines the formatting rules used for nonmonetary
numeric values\(emfor example,
the thousands separator and the radix character
(a period in most English-speaking countries,
but a comma in many other regions).
It affects functions such as
.BR printf (3),
.BR scanf (3),
and
.BR strtod (3).
This information can also be read with the
.BR localeconv (3)
function.
.TP
.BR LC_PAPER " (GNU extension, since glibc 2.2)"
.\" See ISO/IEC Technical Report 14652
Change the settings relating to the dimensions of the standard paper size
(e.g., US letter versus A4).
Applications that need the dimensions can obtain them by using
.BR nl_langinfo (3)
to retrieve the nonstandard
.B _NL_PAPER_WIDTH
and
.B _NL_PAPER_HEIGHT
elements, which return
.I int
values specifying the dimensions in millimeters.
.TP
.BR LC_TELEPHONE " (GNU extension, since glibc 2.2)"
.\" See ISO/IEC Technical Report 14652
Change settings that describe the formats to be used with telephone services.
Applications that need this information can use
.BR nl_langinfo (3)
to retrieve nonstandard elements, such as
.B _NL_TELEPHONE_INT_PREFIX
(international prefix used to call numbers in this locale),
which returns a string such as "49" (for Germany).
(Other element names are listed in
.IR <langinfo.h> .)
.TP
.B LC_TIME
This category governs the formatting used for date and time values.
For example, most of Europe uses a 24-hour clock versus the
12-hour clock used in the United States.
The setting of this category affects the behavior of functions such as
.BR strftime (3)
and
.BR strptime (3).
.TP
.B LC_ALL
All of the above.
.PP
If the second argument to
.BR setlocale (3)
is an empty string,
.BR """""" ,
for the default locale, it is determined using the following steps:
.IP 1.
If there is a non-null environment variable
.BR LC_ALL ,
the value of
.B LC_ALL
is used.
.IP 2.
If an environment variable with the same name as one of the categories
above exists and is non-null, its value is used for that category.
.IP 3.
If there is a non-null environment variable
.BR LANG ,
the value of
.B LANG
is used.
.PP
Values about local numeric formatting is made available in a
.I struct lconv
returned by the
.BR localeconv (3)
function, which has the following declaration:
.in +2n
.nf

struct lconv {

    /* Numeric (nonmonetary) information */

    char *decimal_point;     /* Radix character */
    char *thousands_sep;     /* Separator for digit groups to left
                                of radix character */
    char *grouping; /* Each element is the number of digits in a
                       group; elements with higher indices are
                       further left.  An element with value CHAR_MAX
                       means that no further grouping is done.  An
                       element with value 0 means that the previous
                       element is used for all groups further left. */

    /* Remaining fields are for monetary information */

    char *int_curr_symbol;   /* First three chars are a currency symbol
                                from ISO 4217.  Fourth char is the
                                separator.  Fifth char is \(aq\\0\(aq. */
    char *currency_symbol;   /* Local currency symbol */
    char *mon_decimal_point; /* Radix character */
    char *mon_thousands_sep; /* Like \fIthousands_sep\fP above */
    char *mon_grouping;      /* Like \fIgrouping\fP above */
    char *positive_sign;     /* Sign for positive values */
    char *negative_sign;     /* Sign for negative values */
    char  int_frac_digits;   /* International fractional digits */
    char  frac_digits;       /* Local fractional digits */
    char  p_cs_precedes;     /* 1 if currency_symbol precedes a
                                positive value, 0 if succeeds */
    char  p_sep_by_space;    /* 1 if a space separates currency_symbol
                                from a positive value */
    char  n_cs_precedes;     /* 1 if currency_symbol precedes a
                                negative value, 0 if succeeds */
    char  n_sep_by_space;    /* 1 if a space separates currency_symbol
                                from a negative value */
    /* Positive and negative sign positions:
       0 Parentheses surround the quantity and currency_symbol.
       1 The sign string precedes the quantity and currency_symbol.
       2 The sign string succeeds the quantity and currency_symbol.
       3 The sign string immediately precedes the currency_symbol.
       4 The sign string immediately succeeds the currency_symbol. */
    char  p_sign_posn;
    char  n_sign_posn;
};
.fi
.in
.SS POSIX.1-2008 extensions to the locale API
POSIX.1-2008 standardized a number of extensions to the locale API,
based on implementations that first appeared in version 2.3
of the GNU C library.
These extensions are designed to address the problem that
the traditional locale APIs do not mix well with multithreaded applications
and with applications that must deal with multiple locales.

The extensions take the form of new functions for creating and
manipulating locale objects
.RB ( newlocale (3),
.BR freelocale (3),
.BR duplocale (3),
and
.BR uselocale (3))
and various new library functions with the suffix "_l" (e.g.,
.BR toupper_l (3))
that extend the traditional locale-dependent APIs (e.g.,
.BR toupper (3))
to allow the specification of a locale object that should apply when
executing the function.
.SH ENVIRONMENT
The following environment variable is used by
.BR newlocale (3)
and
.BR setlocale (3),
and thus affects all unprivileged localized programs:
.TP
.B LOCPATH
A list of pathnames, separated by colons (\(aq:\(aq),
that should be used to find locale data.
If this variable is set,
only the individual compiled locale data files from
.I LOCPATH
and the system default locale data path are used;
any available locale archives are not used (see
.BR localedef (1)).
The individual compiled locale data files are searched for under
subdirectories which depend on the currently used locale.
For example, when
.I en_GB.UTF-8
is used for a category, the following subdirectories are searched for,
in this order:
.IR en_GB.UTF-8 ,
.IR en_GB.utf8 ,
.IR en_GB ,
.IR en.UTF-8 ,
.IR en.utf8 ,
and
.IR en .
.SH FILES
.TP
.I /usr/lib/locale/locale-archive
Usual default locale archive location.
.TP
.I /usr/lib/locale
Usual default path for compiled individual locale files.
.SH CONFORMING TO
POSIX.1-2001.
.\"
.\" The GNU gettext functions are specified in LI18NUX2000.
.SH SEE ALSO
.BR locale (1),
.BR localedef (1),
.BR catopen (3),
.BR gettext (3),
.BR localeconv (3),
.BR mbstowcs (3),
.BR newlocale (3),
.BR ngettext (3),
.BR nl_langinfo (3),
.BR rpmatch (3),
.BR setlocale (3),
.BR strcoll (3),
.BR strfmon (3),
.BR strftime (3),
.BR strxfrm (3),
.BR uselocale (3),
.BR wcstombs (3),
.BR locale (5),
.BR charsets (7),
.BR unicode (7),
.BR utf-8 (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1983, 1987 The Regents of the University of California.
.\" All rights reserved.
.\"
.\"	@(#)mailaddr.7	6.5 (Berkeley) 2/14/89
.\"
.\" Extensively rewritten by Arnt Gulbrandsen <agulbra@troll.no>.  My
.\" changes are placed under the same copyright as the original BSD page.
.\"
.\" Adjusted by Arnt Gulbrandsen <arnt@gulbrandsen.priv.no> in 2004 to
.\" account for changes since 1995. Route-addrs are now even less
.\" common, etc. Some minor wording improvements. Same copyright.
.\"
.\" %%%LICENSE_START(PERMISSIVE_MISC)
.\" Redistribution and use in source and binary forms are permitted
.\" provided that the above copyright notice and this paragraph are
.\" duplicated in all such forms and that any documentation,
.\" advertising materials, and other materials related to such
.\" distribution and use acknowledge that the software was developed
.\" by the University of California, Berkeley.  The name of the
.\" University may not be used to endorse or promote products derived
.\" from this software without specific prior written permission.
.\" THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
.\" %%%LICENSE_END
.\"
.TH MAILADDR 7 2004-09-15 "Linux" "Linux User's Manual"
.UC 5
.SH NAME
mailaddr \- mail addressing description
.SH DESCRIPTION
.nh
This manual page gives a brief introduction to SMTP mail addresses, as
used on the Internet.
These addresses are in the general format
.PP
	user@domain
.PP
where a domain is a hierarchical dot-separated list of subdomains.
These examples are valid forms of the same address:
.PP
	eric@monet.berkeley.edu
.br
	Eric Allman <eric@monet.berkeley.edu>
.br
        eric@monet.berkeley.edu (Eric Allman)
.PP
The domain part ("monet.berkeley.edu") is a mail-accepting domain.
It can be a host and in the past it usually was, but it doesn't have to be.
The domain part is not case sensitive.
.PP
The local part ("eric") is often a username, but its meaning is
defined by the local software.
Sometimes it is case sensitive,
although that is unusual.
If you see a local-part that looks like
garbage, it is usually because of a gateway between an internal e-mail
system and the net, here are some examples:
.PP
	"surname/admd=telemail/c=us/o=hp/prmd=hp"@some.where
.br
	USER%SOMETHING@some.where
.br
	machine!machine!name@some.where
.br
	I2461572@some.where
.PP
(These are, respectively, an X.400 gateway, a gateway to an arbitrary
internal mail system that lacks proper internet support, an UUCP
gateway, and the last one is just boring username policy.)
.PP
The real-name part ("Eric Allman") can either be placed before
<>, or in () at the end.
(Strictly speaking the two aren't the same,
but the difference is beyond the scope of this page.)
The name may have to be quoted using "", for example, if it contains ".":
.PP
	"Eric P. Allman" <eric@monet.berkeley.edu>
.SS Abbreviation.
.PP
Many mail systems let users abbreviate the domain name.
For instance,
users at berkeley.edu may get away with "eric@monet" to send mail to
Eric Allman.
.I "This behavior is deprecated."
Sometimes it works, but you should not depend on it.
.SS Route-addrs.
.PP
In the past, sometimes one had to route a message through
several hosts to get it to its final destination.
Addresses which
show these relays are termed "route-addrs".
These use the syntax:
.PP
	<@hosta,@hostb:user@hostc>
.PP
This specifies that the message should be sent to hosta, from there
to hostb, and finally to hostc.
Many hosts disregard route-addrs
and send directly to hostc.
.PP
Route-addrs are very unusual now.
They occur sometimes in old mail
archives.
It is generally possible to ignore all but the "user@hostc"
part of the address to determine the actual address.
.SS Postmaster.
.PP
Every site is required to have a user or user alias designated
"postmaster" to which problems with the mail system may be
addressed.
The "postmaster" address is not case sensitive.
.SH FILES
.I /etc/aliases
.br
.I ~/.forward
.SH SEE ALSO
.BR binmail (1),
.BR mail (1),
.BR mconnect (1),
.BR aliases (5),
.BR forward (5),
.BR sendmail (8),
.BR vrfy (8)

RFC\ 2822 (Internet Message Format)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" (C) Copyright 1992-1999 Rickard E. Faith and David A. Wheeler
.\" (faith@cs.unc.edu and dwheeler@ida.org)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified Sun Jul 25 11:06:05 1993 by Rik Faith (faith@cs.unc.edu)
.\" Modified Sat Jun  8 00:39:52 1996 by aeb
.\" Modified Wed Jun 16 23:00:00 1999 by David A. Wheeler (dwheeler@ida.org)
.\" Modified Thu Jul 15 12:43:28 1999 by aeb
.\" Modified Sun Jan  6 18:26:25 2002 by Martin Schulze <joey@infodrom.org>
.\" Modified Tue Jul 27 20:12:02 2004 by Colin Watson <cjwatson@debian.org>
.\" 2007-05-30, mtk: various rewrites and moved much text to new man-pages.7.
.\"
.TH MAN 7 2012-08-05 "Linux" "Linux Programmer's Manual"
.SH NAME
man \- macros to format man pages
.SH SYNOPSIS
.B groff \-Tascii \-man
.I file
\&...
.LP
.B groff \-Tps \-man
.I file
\&...
.LP
.B man
.RI [ section ]
.I title
.SH DESCRIPTION
This manual page explains the
.B "groff an.tmac"
macro package (often called the
.B man
macro package).
This macro package should be used by developers when
writing or porting man pages for Linux.
It is fairly compatible with other
versions of this macro package, so porting man pages should not be a major
problem (exceptions include the NET-2 BSD release, which uses a totally
different macro package called mdoc; see
.BR mdoc (7)).
.PP
Note that NET-2 BSD mdoc man pages can be used with
.B groff
simply by specifying the
.B \-mdoc
option instead of the
.B \-man
option.
Using the
.B \-mandoc
option is, however, recommended, since this will automatically detect which
macro package is in use.
.PP
For conventions that should be employed when writing man pages
for the Linux \fIman-pages\fP package, see
.BR man-pages (7).
.SS Title line
The first command in a man page (after comment lines,
that is, lines that start with \fB.\\"\fP) should be
.RS
.sp
.B \&.TH
.I "title section date source manual"
.sp
.RE
For details of the arguments that should be supplied to the
.B TH
command, see
.BR man-pages (7).
.PP
Note that BSD mdoc-formatted pages begin with the
.B Dd
command, not the
.B TH
command.
.SS Sections
Sections are started with
.B \&.SH
followed by the heading name.
.\" The following doesn't seem to be required (see Debian bug 411303),
.\" If the name contains spaces and appears
.\" on the same line as
.\" .BR \&.SH ,
.\" then place the heading in double quotes.

The only mandatory heading is NAME, which should be the first section and
be followed on the next line by a one-line description of the program:
.RS
.sp
\&.SH NAME
.br
item \\- description
.sp
.RE
It is extremely important that this format is followed, and that there is a
backslash before the single dash which follows the item name.
This syntax is used by the
.BR mandb (8)
program to create a database of short descriptions for the
.BR whatis (1)
and
.BR apropos (1)
commands.
(See
.BR lexgrog (1)
for further details on the syntax of the NAME section.)
.PP
For a list of other sections that might appear in a manual page, see
.BR man-pages (7).
.SS Fonts
The commands to select the type face are:
.TP 4
.B \&.B
Bold
.TP
.B \&.BI
Bold alternating with italics
(especially useful for function specifications)
.TP
.B \&.BR
Bold alternating with Roman
(especially useful for referring to other
manual pages)
.TP
.B \&.I
Italics
.TP
.B \&.IB
Italics alternating with bold
.TP
.B \&.IR
Italics alternating with Roman
.TP
.B \&.RB
Roman alternating with bold
.TP
.B \&.RI
Roman alternating with italics
.TP
.B \&.SB
Small alternating with bold
.TP
.B \&.SM
Small (useful for acronyms)
.LP
Traditionally, each command can have up to six arguments, but the GNU
implementation removes this limitation (you might still want to limit
yourself to 6 arguments for portability's sake).
Arguments are delimited by spaces.
Double quotes can be used to specify an argument which contains spaces.
All of the arguments will be printed next to each other without
intervening spaces, so that the
.B \&.BR
command can be used to specify a word in bold followed by a mark of
punctuation in Roman.
If no arguments are given, the command is applied to the following line
of text.
.SS Other macros and strings
.PP
Below are other relevant macros and predefined strings.
Unless noted otherwise, all macros
cause a break (end the current line of text).
Many of these macros set or use the "prevailing indent."
The "prevailing indent" value is set by any macro with the parameter
.I i
below;
macros may omit
.I i
in which case the current prevailing indent will be used.
As a result, successive indented paragraphs can use the same indent without
respecifying the indent value.
A normal (nonindented) paragraph resets the prevailing indent value
to its default value (0.5 inches).
By default, a given indent is measured in ens;
try to use ens or ems as units for
indents, since these will automatically adjust to font size changes.
The other key macro definitions are:
.SS Normal paragraphs
.TP 9m
.B \&.LP
Same as
.B \&.PP
(begin a new paragraph).
.TP
.B \&.P
Same as
.B \&.PP
(begin a new paragraph).
.TP
.B \&.PP
Begin a new paragraph and reset prevailing indent.
.SS Relative margin indent
.TP 9m
.BI \&.RS " i"
Start relative margin indent: moves the left margin
.I i
to the right (if
.I i
is omitted, the prevailing indent value is used).
A new prevailing indent is set to 0.5 inches.
As a result, all following paragraph(s) will be
indented until the corresponding
.BR \&.RE .
.TP
.B \&.RE
End relative margin indent and
restores the previous value of the prevailing indent.
.SS Indented paragraph macros
.TP 9m
.BI \&.HP " i"
Begin paragraph with a hanging indent
(the first line of the paragraph is at the left margin of
normal paragraphs, and the rest of the paragraph's lines are indented).
.TP
.BI \&.IP " x i"
Indented paragraph with optional hanging tag.
If the tag
.I x
is omitted, the entire following paragraph is indented by
.IR i .
If the tag
.I x
is provided, it is hung at the left margin
before the following indented paragraph
(this is just like
.B \&.TP
except the tag is included with the command instead of being on the
following line).
If the tag is too long, the text after the tag will be moved down to the
next line (text will not be lost or garbled).
For bulleted lists, use this macro with \e(bu (bullet) or \e(em (em dash)
as the tag, and for numbered lists, use the number or letter followed by
a period as the tag;
this simplifies translation to other formats.
.TP
.BI \&.TP " i"
Begin paragraph with hanging tag.
The tag is given on the next line, but
its results are like those of the
.B \&.IP
command.
.SS Hypertext link macros
(Feature supported with
.B groff
only.)
In order to use hypertext link macros, it is necessary to load the
.B www.tmac
macro package.
Use the request
.B .mso www.tmac
to do this.
.TP 9m
.BI \&.URL " url link trailer"
Inserts a hypertext link to the URI (URL)
.IR url ,
with
.I link
as the text of the link.
The
.I trailer
will be printed immediately afterward.
When generating HTML this should translate into the HTML command
\fB<A HREF="\fP\fIurl\fP\fB">\fIlink\fP\fB</A>\fP\fItrailer\fP.
.\" The following is a kludge to get a paragraph into the listing.
.TP
.B " "
This and other related macros are new, and
many tools won't do anything with them, but
since many tools (including troff) will simply ignore undefined macros
(or at worst insert their text) these are safe to insert.
.\" The following is a kludge to get a paragraph into the listing.
.TP
.B " "
It can be useful to define your own
.B URL
macro in manual pages for the benefit of those viewing it with a roff
viewer other than
.BR groff .
That way, the URL, link text, and trailer text (if any) are still visible.
.\" The following is a kludge to get a paragraph into the listing.
.TP
.B " "
Here's an example:
.RS 1.5i
\&.de URL
.br
\\\\$2 \\(laURL: \\\\$1 \\(ra\\\\$3
.br
\&..
.br
\&.if \\n[.g] .mso www.tmac
.br
\&.TH
.I ...
.br
.I (later in the page)
.br
This software comes from the
.br
\&.URL "http://www.gnu.org/" "GNU Project" " of the"
.br
\&.URL "http://www.fsf.org/" "Free Software Foundation" .
.RE
.\" The following is a kludge to get a paragraph into the listing.
.TP
.B " "
In the above, if
.B groff
is being used, the
.B www.tmac
macro package's definition of the URL macro will supersede the locally
defined one.
.PP
A number of other link macros are available.
See
.BR groff_www (7)
for more details.
.SS Miscellaneous macros
.TP 9m
.B \&.DT
Reset tabs to default tab values (every 0.5 inches);
does not cause a break.
.TP
.BI \&.PD " d"
Set inter-paragraph vertical distance to d
(if omitted, d=0.4v);
does not cause a break.
.TP
.BI \&.SS " t"
Subheading
.I t
(like
.BR \&.SH ,
but used for a subsection inside a section).
.SS Predefined strings
The
.B man
package has the following predefined strings:
.IP \e*R
Registration Symbol: \*R
.IP \e*S
Change to default font size
.IP \e*(Tm
Trademark Symbol: \*(Tm
.IP \e*(lq
Left angled double quote: \*(lq
.IP \e*(rq
Right angled double quote: \*(rq
.SS Safe subset
Although technically
.B man
is a troff macro package, in reality a large number of other tools
process man page files that don't implement all of troff's abilities.
Thus, it's best to avoid some of troff's more exotic abilities
where possible to permit these other tools to work correctly.
Avoid using the various troff preprocessors
(if you must, go ahead and use
.BR tbl (1),
but try to use the
.B IP
and
.B TP
commands instead for two-column tables).
Avoid using computations; most other tools can't process them.
Use simple commands that are easy to translate to other formats.
The following troff macros are believed to be safe (though in many cases
they will be ignored by translators):
.BR \e" ,
.BR . ,
.BR ad ,
.BR bp ,
.BR br ,
.BR ce ,
.BR de ,
.BR ds ,
.BR el ,
.BR ie ,
.BR if ,
.BR fi ,
.BR ft ,
.BR hy ,
.BR ig ,
.BR in ,
.BR na ,
.BR ne ,
.BR nf ,
.BR nh ,
.BR ps ,
.BR so ,
.BR sp ,
.BR ti ,
.BR tr .
.PP
You may also use many troff escape sequences (those sequences beginning
with \e).
When you need to include the backslash character as normal text,
use \ee.
Other sequences you may use, where x or xx are any characters and N
is any digit, include:
.BR \e' ,
.BR \e` ,
.BR \e- ,
.BR \e. ,
.BR \e" ,
.BR \e% ,
.BR \e*x ,
.BR \e*(xx ,
.BR \e(xx ,
.BR \e$N ,
.BR \enx ,
.BR \en(xx ,
.BR \efx ,
and
.BR \ef(xx .
Avoid using the escape sequences for drawing graphics.
.PP
Do not use the optional parameter for
.B bp
(break page).
Use only positive values for
.B sp
(vertical space).
Don't define a macro
.RB ( de )
with the same name as a macro in this or the
mdoc macro package with a different meaning; it's likely that
such redefinitions will be ignored.
Every positive indent
.RB ( in )
should be paired with a matching negative indent
(although you should be using the
.B RS
and
.B RE
macros instead).
The condition test
.RB ( if,ie )
should only have \(aqt\(aq or \(aqn\(aq as the condition.
Only translations
.RB ( tr )
that can be ignored should be used.
Font changes
.RB ( ft
and the \fB\ef\fP escape sequence)
should only have the values 1, 2, 3, 4, R, I, B, P, or CW
(the ft command may also have no parameters).
.PP
If you use capabilities beyond these, check the
results carefully on several tools.
Once you've confirmed that the additional capability is safe,
let the maintainer of this
document know about the safe command or sequence
that should be added to this list.
.SH FILES
.IR /usr/share/groff/ [*/] tmac/an.tmac
.br
.I /usr/man/whatis
.SH NOTES
.PP
By all means include full URLs (or URIs) in the text itself;
some tools such as
.BR man2html (1)
can automatically turn them into hypertext links.
You can also use the new
.B URL
macro to identify links to related information.
If you include URLs, use the full URL
(e.g.,
.UR http://www.kernelnotes.org
.UE )
to ensure that tools can automatically find the URLs.
.PP
Tools processing these files should open the file and examine the first
nonwhitespace character.
A period (.) or single quote (') at the beginning
of a line indicates a troff-based file (such as man or mdoc).
A left angle bracket (<) indicates an SGML/XML-based
file (such as HTML or Docbook).
Anything else suggests simple ASCII
text (e.g., a "catman" result).
.PP
Many man pages begin with \fB\'\e"\fP followed by a
space and a list of characters,
indicating how the page is to be preprocessed.
For portability's sake to non-troff translators we recommend
that you avoid using anything other than
.BR tbl (1),
and Linux can detect that automatically.
However, you might want to include this information so your man page
can be handled by other (less capable) systems.
Here are the definitions of the preprocessors invoked by these characters:
.TP 3
.B e
eqn(1)
.TP
.B g
grap(1)
.TP
.B p
pic(1)
.TP
.B r
refer(1)
.TP
.B t
tbl(1)
.TP
.B v
vgrind(1)
.SH BUGS
.PP
Most of the macros describe formatting (e.g., font type and spacing) instead
of marking semantic content (e.g., this text is a reference to another page),
compared to formats like mdoc and DocBook (even HTML has more semantic
markings).
This situation makes it harder to vary the
.B man
format for different media,
to make the formatting consistent for a given media, and to automatically
insert cross-references.
By sticking to the safe subset described above, it should be easier to
automate transitioning to a different reference page format in the future.
.LP
The Sun macro
.B TX
is not implemented.
.\" .SH AUTHORS
.\" .IP \(em 3m
.\" James Clark (jjc@jclark.com) wrote the implementation of the macro package.
.\" .IP \(em
.\" Rickard E. Faith (faith@cs.unc.edu) wrote the initial version of
.\" this manual page.
.\" .IP \(em
.\" Jens Schweikhardt (schweikh@noc.fdn.de) wrote the Linux Man-Page Mini-HOWTO
.\" (which influenced this manual page).
.\" .IP \(em
.\" David A. Wheeler (dwheeler@ida.org) heavily modified this
.\" manual page, such as adding detailed information on sections and macros.
.SH SEE ALSO
.BR apropos (1),
.BR groff (1),
.BR lexgrog (1),
.BR man (1),
.BR man2html (1),
.BR whatis (1),
.BR groff_man (7),
.BR groff_www (7),
.BR man-pages (7),
.BR mdoc (7),
.BR mdoc.samples (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" (C) Copyright 1992-1999 Rickard E. Faith and David A. Wheeler
.\" (faith@cs.unc.edu and dwheeler@ida.org)
.\" and (C) Copyright 2007 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" 2007-05-30 created by mtk, using text from old man.7 plus
.\" rewrites and additional text.
.\"
.TH MAN-PAGES 7 2015-03-02 "Linux" "Linux Programmer's Manual"
.SH NAME
man-pages \- conventions for writing Linux man pages
.SH SYNOPSIS
.B man
.RI [ section ]
.I title
.SH DESCRIPTION
This page describes the conventions that should be employed
when writing man pages for the Linux \fIman-pages\fP project,
which documents the user-space API provided by the Linux kernel
and the GNU C library.
The project thus provides most of the pages in Section 2,
as well as many of the pages that appear
in Sections 3, 4, 5, and 7 of the man pages on a Linux system.
The conventions described on this page may also be useful
for authors writing man pages for other projects.
.SS Sections of the manual pages
.PP
The manual Sections are traditionally defined as follows:
.TP 10
.B 1 User commands (Programs)
Those commands that can be executed by the user from within
a shell.
.TP
.B 2 System calls
Those functions which wrap operations performed by the kernel.
.TP
.B 3 Library calls
All library functions excluding the system call wrappers
(Most of the
.I libc
functions).
.TP
.B 4 Special files (devices)
Files found in
.I /dev
which allow to access to devices through the kernel.
.TP
.B 5 File formats and configuration files
Describes various human-readable file formats and configuration files.
.TP
.B 6 Games
Games and funny little programs available on the system.
.TP
.B 7 Overview, conventions, and miscellaneous
Overviews or descriptions of various topics, conventions and protocols,
character set standards, the standard filesystem layout, and miscellaneous
other things.
.TP
.B 8 System management commands
Commands like
.BR mount (8),
many of which only root can execute.
.\" .TP
.\" .B 9 Kernel routines
.\" This is an obsolete manual section.
.\" Once it was thought a good idea to document the Linux kernel here,
.\" but in fact very little has been documented, and the documentation
.\" that exists is outdated already.
.\" There are better sources of
.\" information for kernel developers.
.SS Macro package
New manual pages should be marked up using the
.B groff an.tmac
package described in
.BR man (7).
This choice is mainly for consistency: the vast majority of
existing Linux manual pages are marked up using these macros.
.SS Conventions for source file layout
Please limit source code line length to no more than about 75 characters
wherever possible.
This helps avoid line-wrapping in some mail clients when patches are
submitted inline.

New sentences should be started on new lines.
This makes it easier to see the effect of patches,
which often operate at the level of individual sentences.
.SS Title line
The first command in a man page should be a
.B TH
command:
.RS
.sp
.B \&.TH
.I "title section date source manual"
.sp
.RE
where:
.RS
.TP 10
.I title
The title of the man page, written in all caps (e.g.,
.IR MAN-PAGES ).
.TP
.I section
The section number in which the man page should be placed (e.g.,
.IR 7 ).
.TP
.I date
The date of the last nontrivial change that was made to the man page.
(Within the
.I man-pages
project, the necessary updates to these timetamps are handled
automatically by scripts, so there is no need to manually update
them as part of a patch.)
Dates should be written in the form YYYY-MM-DD.
.TP
.I source
The source of the command, function, or system call.

For those few \fIman-pages\fP pages in Sections 1 and 8,
probably you just want to write
.IR GNU .

For system calls, just write
.IR "Linux" .
(An earlier practice was to write the version number
of the kernel from which the manual page was being written/checked.
However, this was never done consistently, and so was
probably worse than including no version number.
Henceforth, avoid including a version number.)

For library calls that are part of glibc or one of the
other common GNU libraries, just use
.IR "GNU C Library" ", " GNU ,
or an empty string.

For Section 4 pages, use
.IR "Linux" .

In cases of doubt, just write
.IR Linux ", or " GNU .
.TP
.I manual
The title of the manual (e.g., for Section 2 and 3 pages in
the \fIman-pages\fP package, use
.IR "Linux Programmer's Manual" ).
.RE
.SS Sections within a manual page
The list below shows conventional or suggested sections.
Most manual pages should include at least the
.B highlighted
sections.
Arrange a new manual page so that sections
are placed in the order shown in the list.
.in +0.5i
.nf

\fBNAME\fP
\fBSYNOPSIS\fP
CONFIGURATION      [Normally only in Section 4]
\fBDESCRIPTION\fP
OPTIONS            [Normally only in Sections 1, 8]
EXIT STATUS        [Normally only in Sections 1, 8]
RETURN VALUE       [Normally only in Sections 2, 3]
.\" May 07: Few current man pages have an ERROR HANDLING section,,,
.\" ERROR HANDLING,
ERRORS             [Typically only in Sections 2, 3]
.\" May 07: Almost no current man pages have a USAGE section,,,
.\" USAGE,
.\" DIAGNOSTICS,
.\" May 07: Almost no current man pages have a SECURITY section,,,
.\" SECURITY,
ENVIRONMENT
FILES
VERSIONS           [Normally only in Sections 2, 3]
ATTRIBUTES         [Normally only in Sections 2, 3]
CONFORMING TO
NOTES
BUGS
EXAMPLE
.\" AUTHORS sections are discouraged
.\" AUTHORS             [Discouraged]
\fBSEE ALSO\fP

.fi
.in
.IR "Where a traditional heading would apply" ", " "please use it" ;
this kind of consistency can make the information easier to understand.
If you must, you can create your own
headings if they make things easier to understand (this can
be especially useful for pages in Sections 4 and 5).
However, before doing this, consider whether you could use the
traditional headings, with some subsections (\fI.SS\fP) within
those sections.

The following list elaborates on the contents of each of
the above sections.
.TP 14
.B NAME
The name of this manual page.

See
.BR man (7)
for important details of the line(s) that should follow the
\fB.SH NAME\fP command.
All words in this line (including the word immediately
following the "\\\-") should be in lowercase,
except where English or technical terminological convention
dictates otherwise.
.TP
.B SYNOPSIS
A brief summary of the command or function's interface.

For commands, this shows the syntax of the command and its arguments
(including options);
boldface is used for as-is text and italics are used to
indicate replaceable arguments.
Brackets ([]) surround optional arguments, vertical bars (|)
separate choices, and ellipses (\&...) can be repeated.
For functions, it shows any required data declarations or
.B #include
directives, followed by the function declaration.

Where a feature test macro must be defined in order to obtain
the declaration of a function (or a variable) from a header file,
then the SYNOPSIS should indicate this, as described in
.BR feature_test_macros (7).
.\" FIXME . Say something here about compiler options
.TP
.B CONFIGURATION
Configuration details for a device.

This section normally appears only in Section 4 pages.
.TP
.B DESCRIPTION
An explanation of what the program, function, or format does.

Discuss how it interacts with files and standard input, and what it
produces on standard output or standard error.
Omit internals and implementation details unless they're critical for
understanding the interface.
Describe the usual case;
for information on command-line options of a program use the
.B OPTIONS
section.
.\" If there is some kind of input grammar or complex set of subcommands,
.\" consider describing them in a separate
.\" .B USAGE
.\" section (and just place an overview in the
.\" .B DESCRIPTION
.\" section).

When describing new behavior or new flags for
a system call or library function,
be careful to note the kernel or C library version
that introduced the change.
The preferred method of noting this information for flags is as part of a
.B .TP
list, in the following form (here, for a new system call flag):
.RS 22
.TP
.BR XYZ_FLAG " (since Linux 3.7)"
Description of flag...
.RE
.IP
Including version information is especially useful to users
who are constrained to using older kernel or C library versions
(which is typical in embedded systems, for example).
.TP
.B OPTIONS
A description of the command-line options accepted by a
program and how they change its behavior.

This section should appear only for Section 1 and 8 manual pages.
.\" .TP
.\" .B USAGE
.\" describes the grammar of any sublanguage this implements.
.TP
.B EXIT STATUS
A list of the possible exit status values of a program and
the conditions that cause these values to be returned.

This section should appear only for Section 1 and 8 manual pages.
.TP
.B RETURN VALUE
For Section 2 and 3 pages, this section gives a
list of the values the library routine will return to the caller
and the conditions that cause these values to be returned.
.TP
.B ERRORS
For Section 2 and 3 manual pages, this is a list of the
values that may be placed in
.I errno
in the event of an error, along with information about the cause
of the errors.

.IR "The error list should be in alphabetical order" .
.TP
.B ENVIRONMENT
A list of all environment variables that affect the program or function
and how they affect it.
.TP
.B FILES
A list of the files the program or function uses, such as
configuration files, startup files,
and files the program directly operates on.

Give the full pathname of these files, and use the installation
process to modify the directory part to match user preferences.
For many programs, the default installation location is in
.IR /usr/local ,
so your base manual page should use
.I /usr/local
as the base.
.\" May 07: Almost no current man pages have a DIAGNOSTICS section;
.\"         "RETURN VALUE" or "EXIT STATUS" is preferred.
.\" .TP
.\" .B DIAGNOSTICS
.\" gives an overview of the most common error messages and how to
.\" cope with them.
.\" You don't need to explain system error messages
.\" or fatal signals that can appear during execution of any program
.\" unless they're special in some way to the program.
.\"
.\" May 07: Almost no current man pages have a SECURITY section.
.\".TP
.\".B SECURITY
.\"discusses security issues and implications.
.\"Warn about configurations or environments that should be avoided,
.\"commands that may have security implications, and so on, especially
.\"if they aren't obvious.
.\"Discussing security in a separate section isn't necessary;
.\"if it's easier to understand, place security information in the
.\"other sections (such as the
.\" .B DESCRIPTION
.\" or
.\" .B USAGE
.\" section).
.\" However, please include security information somewhere!
.TP
.B ATTRIBUTES
A summary of various attributes of the function(s) documented on this page.
See
.BR attributes (7)
for further details.
.TP
.B VERSIONS
A brief summary of the Linux kernel or glibc versions where a
system call or library function appeared,
or changed significantly in its operation.

As a general rule, every new interface should
include a VERSIONS section in its manual page.
Unfortunately,
many existing manual pages don't include this information
(since there was no policy to do so when they were written).
Patches to remedy this are welcome,
but, from the perspective of programmers writing new code,
this information probably matters only in the case of kernel
interfaces that have been added in Linux 2.4 or later
(i.e., changes since kernel 2.2),
and library functions that have been added to glibc since version 2.1
(i.e., changes since glibc 2.0).

The
.BR syscalls (2)
manual page also provides information about kernel versions
in which various system calls first appeared.
.TP
.B CONFORMING TO
A description of any standards or conventions that relate to the function
or command described by the manual page.

The preferred terms to use for the various standards are listed as
headings in
.BR standards (7).

For a page in Section 2 or 3,
this section should note the POSIX.1
version(s) that the call conforms to,
and also whether the call is specified in C99.
(Don't worry too much about other standards like SUS, SUSv2, and XPG,
or the SVr4 and 4.xBSD implementation standards,
unless the call was specified in those standards,
but isn't in the current version of POSIX.1.)

If the call is not governed by any standards but commonly
exists on other systems, note them.
If the call is Linux-specific, note this.

If this section consists of just a list of standards
(which it commonly does),
terminate the list with a period (\(aq.\(aq).
.TP
.B NOTES
Miscellaneous notes.

For Section 2 and 3 man pages you may find it useful to include
subsections (\fBSS\fP) named \fILinux Notes\fP and \fIGlibc Notes\fP.

In Section 2, use the heading
.I "C library/kernel ABI differences"
to mark off notes that describe the differences (if any) between
the C library wrapper function for a system call and
the raw system call interface provided by the kernel.
.TP
.B BUGS
A list of limitations, known defects or inconveniences,
and other questionable activities.
.TP
.B EXAMPLE
One or more examples demonstrating how this function, file or
command is used.

For details on writing example programs,
see \fIExample Programs\fP below.
.TP
.B AUTHORS
A list of authors of the documentation or program.

\fBUse of an AUTHORS section is strongly discouraged\fP.
Generally, it is better not to clutter every page with a list
of (over time potentially numerous) authors;
if you write or significantly amend a page,
add a copyright notice as a comment in the source file.
If you are the author of a device driver and want to include
an address for reporting bugs, place this under the BUGS section.
.TP
.B SEE ALSO
A comma-separated list of related man pages, possibly followed by
other related pages or documents.

The list should be ordered by section number and
then alphabetically by name
Do not terminate this list with a period.
.IP
Where the SEE ALSO list contains many long manual page names,
to improve the visual result of the output, it may be useful to employ the
.I .ad l
(don't right justify)
and
.I .nh
(don't hyphenate)
directives.
Hyphenation of individual page names can be prevented
by preceding words with the string "\\%".

Given the distributed, autonomous nature of FOSS projects
and their documentation, it is sometimes necessary\(emand in many cases
desirable\(emthat the SEE ALSO section includes references to
manual pages provided by other projects.
.SH STYLE GUIDE
The following subsections describe the preferred style for the
.IR man-pages
project.
For details not covered below, the Chicago Manual of Style
is usually a good source;
try also grepping for preexisting usage in the project source tree.
.SS Use of gender-neutral language
As far as possible, use gender-neutral language in the text of man
pages.
Use of "they" ("them", "themself", "their") as a gender-neutral singular
pronoun is acceptable.
.SS Font conventions
.PP
For functions, the arguments are always specified using italics,
.IR "even in the SYNOPSIS section" ,
where the rest of the function is specified in bold:
.PP
.BI "    int myfunction(int " argc ", char **" argv );
.PP
Variable names should, like argument names, be specified in italics.
.PP
Filenames (whether pathnames, or references to header files)
are always in italics (e.g.,
.IR <stdio.h> ),
except in the SYNOPSIS section, where included files are in bold (e.g.,
.BR "#include <stdio.h>" ).
When referring to a standard header file include,
specify the header file surrounded by angle brackets,
in the usual C way (e.g.,
.IR <stdio.h> ).
.PP
Special macros, which are usually in uppercase, are in bold (e.g.,
.BR MAXINT ).
Exception: don't boldface NULL.
.PP
When enumerating a list of error codes, the codes are in bold (this list
usually uses the
.B \&.TP
macro).
.PP
Complete commands should, if long,
be written as an indented line on their own,
with a blank line before and after the command, for example
.in +4n
.nf

man 7 man-pages

.fi
.in
If the command is short, then it can be included inline in the text,
in italic format, for example,
.IR "man 7 man-pages" .
In this case, it may be worth using nonbreaking spaces
("\e\ ") at suitable places in the command.
Command options should be written in italics (e.g.,
.IR \-l ).
.PP
Expressions, if not written on a separate indented line, should
be specified in italics.
Again, the use of nonbreaking spaces may be appropriate
if the expression is inlined with normal text.
.PP
Any reference to the subject of the current manual page
should be written with the name in bold.
If the subject is a function (i.e., this is a Section 2 or 3 page),
then the name should be followed by a pair of parentheses
in Roman (normal) font.
For example, in the
.BR fcntl (2)
man page, references to the subject of the page would be written as:
.BR fcntl ().
The preferred way to write this in the source file is:
.nf

    .BR fcntl ()

.fi
(Using this format, rather than the use of "\\fB...\\fP()"
makes it easier to write tools that parse man page source files.)
.PP
Any reference to another man page
should be written with the name in bold,
.I always
followed by the section number,
formatted in Roman (normal) font, without any
separating spaces (e.g.,
.BR intro (2)).
The preferred way to write this in the source file is:
.nf

    .BR intro (2)

.fi
(Including the section number in cross references lets tools like
.BR man2html (1)
create properly hyperlinked pages.)

Control characters should be written in bold face,
with no quotes; for example,
.BR ^X .
.SS Spelling
Starting with release 2.59,
.I man-pages
follows American spelling conventions
(previously, there was a random mix of British and American spellings);
please write all new pages and patches according to these conventions.

Aside from the well-known spelling differences,
there are a few other subtleties to watch for:
.IP * 3
American English tends to use the forms "backward", "upward", "toward",
and so on
rather than the British forms "backwards", "upwards", "towards", and so on.
.SS BSD version numbers
The classical scheme for writing BSD version numbers is
.IR x.yBSD ,
where
.I x.y
is the version number (e.g., 4.2BSD).
Avoid forms such as
.IR "BSD 4.3" .
.SS Capitalization
In subsection ("SS") headings,
capitalize the first word in the heading, but otherwise use lowercase,
except where English usage (e.g., proper nouns) or programming
language requirements (e.g., identifier names) dictate otherwise.
For example:

    .SS Unicode under Linux

.SS Indentation of structure definitions, shell session logs, and so on
When structure definitions, shell session logs, and so on are included
in running text, indent them by 4 spaces (i.e., a block enclosed by
.I ".in\ +4n"
and
.IR ".in" ).
.SS Preferred terms
The following table lists some preferred terms to use in man pages,
mainly to ensure consistency across pages.
.TS
l l l
---
l l l.
Term	Avoid using	Notes

bit mask	bitmask
built-in	builtin
Epoch	epoch	T{
For the UNIX Epoch (00:00:00, 1 Jan 1970 UTC)
T}
filename	file name
filesystem	file system
hostname	host name
inode	i-node
lowercase	lower case, lower-case
pathname	path name
pseudoterminal	pseudo-terminal
privileged port	T{
reserved port,
system port
T}
real-time	T{
realtime,
real time
T}
run time	runtime
saved set-group-ID	T{
saved group ID,
saved set-GID
T}
saved set-user-ID	T{
saved user ID,
saved set-UID
T}
set-group-ID	set-GID, setgid
set-user-ID	set-UID, setuid
superuser	T{
super user,
super-user
T}
superblock	T{
super block,
super-block
T}
timestamp	time stamp
timezone	time zone
uppercase	upper case, upper-case
usable	useable
user space	userspace
username	user name
zeros	zeroes
.TE
.PP
See also the discussion
.IR "Hyphenation of attributive compounds"
below.
.SS Terms to avoid
The following table lists some terms to avoid using in man pages,
along with some suggested alternatives,
mainly to ensure consistency across pages.
.TS
l l l
---
l l l.
Avoid	Use instead	Notes

32bit	32-bit	T{
same for 8-bit, 16-bit, etc.
T}
current process	calling process	T{
A common mistake made by kernel programmers when writing man pages
T}
manpage	T{
man page, manual page
T}
minus infinity	negative infinity
non-root	unprivileged user
non-superuser	unprivileged user
nonprivileged	unprivileged
OS	operating system
plus infinity	positive infinity
pty	pseudoterminal
tty	terminal
Unices	UNIX systems
Unixes	UNIX systems
.TE
.SS Trademarks
Use the correct spelling and case for trademarks.
The following is a list of the correct spellings of various
relevant trademarks that are sometimes misspelled:

     DG/UX
     HP-UX
     UNIX
     UnixWare
.SS NULL, NUL, null pointer, and null character
A
.IR "null pointer"
is a pointer that points to nothing,
and is normally indicated by the constant
.IR NULL .
On the other hand,
.I NUL
is the
.IR "null byte",
a byte with the value 0, represented in C via the character constant
.IR \(aq\e0\(aq .

The preferred term for the pointer is "null pointer" or simply "NULL";
avoid writing "NULL pointer".

The preferred term for the byte is "null byte".
Avoid writing "NUL", since it is too easily confused with "NULL".
Avoid also the terms "zero byte" and "null character".
The byte that terminates a C string should be described
as "the terminating null byte";
strings may be described as "null-terminated",
but avoid the use of "NUL-terminated".
.SS Hyperlinks
For hyperlinks, use the
.IR .UR / .UE
macro pair
(see
.BR groff_man (7)).
This produces proper hyperlinks that can be used in a web browser,
when rendering a page with, say:

     BROWSER=firefox man -H pagename
.SS Use of e.g., i.e., etc., a.k.a., and similar
In general, the use of abbreviations such as "e.g.", "i.e.", "etc.", "a.k.a."
should be avoided, in favor of suitable full wordings
("for example", "that is", "and so on", "also known as").

The only place where such abbreviations may be acceptable is in
.I short
parenthetical asides (e.g., like this one).

Always include periods in such abbreviations, as shown here.
In addition, "e.g." and "i.e." should always be followed by a comma.
.SS Em-dashes
The way to write an em-dash\(emthe glyph that appears
at either end of this subphrase\(emin *roff is with the macro "\\(em".
(On an ASCII terminal, an em-dash typically renders as two hyphens,
but in other typographical contexts it renders as a long dash.)
Em-dashes should be written
.I without
surrounding spaces.
.SS Hyphenation of attributive compounds
Compound terms should be hyphenated when used attributively
(i.e., to qualify a following noun). Some examples:

    32-bit value
    command-line argument
    floating-point number
    run-time check
    user-space function
    wide-character string
.SS Hyphenation with multi, non, pre, re, sub, and so on
The general tendency in modern English is not to hyphenate
after prefixes such as "multi", "non", "pre", "re", "sub", and so on.
Manual pages should generally follow this rule when these prefixes are
used in natural English constructions with simple suffixes.
The following list gives some examples of the preferred forms:

    interprocess
    multithreaded
    multiprocess
    nonblocking
    nondefault
    nonempty
    noninteractive
    nonnegative
    nonportable
    nonzero
    preallocated
    precreate
    prerecorded
    reestablished
    reinitialize
    rearm
    reread
    subcomponent
    subdirectory
    subsystem

Hyphens should be retained when the prefixes are used in nonstandard
English words, with trademarks, proper nouns, acronyms, or compound terms.
Some examples:

    non-ASCII
    non-English
    non-NULL
    non-real-time

Finally, note that "re-create" and "recreate" are two different verbs,
and the former is probably what you want.
.SS Real minus character
Where a real minus character is required (e.g., for numbers such as \-1,
or when writing options that have a leading dash, such as in
.IR "ls\ \-l"),
use the following form in the man page source:

    \\-

This guideline applies also to code examples.
.SS Character constants
To produce single quotes that render well in both ASCII and UTF-8,
use the following form for character constants in the man page source:

    \\(aqC\\(aq

where
.I C
is the quoted character.
This guideline applies also to character constants used in code examples.
.SS Example programs and shell sessions
Manual pages may include example programs demonstrating how to
use a system call or library function.
However, note the following:
.IP * 3
Example programs should be written in C.
.IP *
An example program is necessary and useful only if it demonstrates
something beyond what can easily be provided in a textual
description of the interface.
An example program that does nothing
other than call an interface usually serves little purpose.
.IP *
Example programs should be fairly short (preferably less than 100 lines;
ideally less than 50 lines).
.IP *
Example programs should do error checking after system calls and
library function calls.
.IP *
Example programs should be complete, and compile without
warnings when compiled with \fIcc\ \-Wall\fP.
.IP *
Where possible and appropriate, example programs should allow
experimentation, by varying their behavior based on inputs
(ideally from command-line arguments, or alternatively, via
input read by the program).
.IP *
Example programs should be laid out according to Kernighan and
Ritchie style, with 4-space indents.
(Avoid the use of TAB characters in source code!)
The following command can be used to format your source code to
something close to the preferred style:

    indent \-npro \-kr \-i4 \-ts4 \-sob \-l72 \-ss \-nut \-psl prog.c
.IP *
For consistency, all example programs should terminate using either of:

     exit(EXIT_SUCCESS);
     exit(EXIT_FAILURE);

Avoid using the following forms to terminate a program:

    exit(0);
    exit(1);
    return n;
.IP *
If there is extensive explanatory text before the
program source code, mark off the source code
with a subsection heading
.IR "Program source" ,
as in:

    .SS Program source

Always do this if the explanatory text includes a shell session log.
.PP
If you include a shell session log demonstrating the use of a program
or other system feature:
.IP * 3
Place the session log above the source code listing
.IP *
Indent the session log by four spaces.
.IP *
Boldface the user input text,
to distinguish it from output produced by the system.
.PP
For some examples of what example programs should look like, see
.BR wait (2)
and
.BR pipe (2).
.SH EXAMPLE
For canonical examples of how man pages in the
.I man-pages
package should look, see
.BR pipe (2)
and
.BR fcntl (2).
.SH SEE ALSO
.BR man (1),
.BR man2html (1),
.BR attributes (7),
.BR groff (7),
.BR groff_man (7),
.BR man (7),
.BR mdoc (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2008, Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH MATH_ERROR 7 2008-08-11 "Linux" "Linux Programmer's Manual"
.SH NAME
math_error \- detecting errors from mathematical functions
.SH SYNOPSIS
.nf
.B #include <math.h>
.B #include <errno.h>
.B #include <fenv.h>
.fi
.SH DESCRIPTION
When an error occurs,
most library functions indicate this fact by returning a special value
(e.g., \-1 or NULL).
Because they typically return a floating-point number,
the mathematical functions declared in
.IR <math.h>
indicate an error using other mechanisms.
There are two error-reporting mechanisms:
the older one sets
.IR errno ;
the newer one uses the floating-point exception mechanism (the use of
.BR feclearexcept (3)
and
.BR fetestexcept (3),
as outlined below)
described in
.BR fenv (3).

A portable program that needs to check for an error from a mathematical
function should set
.I errno
to zero, and make the following call
.in +4n
.nf

feclearexcept(FE_ALL_EXCEPT);

.fi
.in
before calling a mathematical function.

Upon return from the mathematical function, if
.I errno
is nonzero, or the following call (see
.BR fenv (3))
returns nonzero
.in +4n
.nf

fetestexcept(FE_INVALID | FE_DIVBYZERO | FE_OVERFLOW |
             FE_UNDERFLOW);

.fi
.in
.\" enum
.\" {
.\" FE_INVALID = 0x01,
.\" __FE_DENORM = 0x02,
.\" FE_DIVBYZERO = 0x04,
.\" FE_OVERFLOW = 0x08,
.\" FE_UNDERFLOW = 0x10,
.\" FE_INEXACT = 0x20
.\" };
then an error occurred in the mathematical function.

The error conditions that can occur for mathematical functions
are described below.
.SS Domain error
A
.I domain error
occurs when a mathematical function is supplied with an argument whose
value falls outside the domain for which the function
is defined (e.g., giving a negative argument to
.BR log (3)).
When a domain error occurs,
math functions commonly return a NaN
(though some functions return a different value in this case);
.I errno
is set to
.BR EDOM ,
and an "invalid"
.RB ( FE_INVALID )
floating-point exception is raised.
.SS Pole error
A
.I pole error
occurs when the mathematical result of a function is an exact infinity
(e.g., the logarithm of 0 is negative infinity).
When a pole error occurs,
the function returns the (signed) value
.BR HUGE_VAL ,
.BR HUGE_VALF ,
or
.BR HUGE_VALL ,
depending on whether the function result type is
.IR double ,
.IR float ,
or
.IR "long double" .
The sign of the result is that which is mathematically correct for
the function.
.I errno
is set to
.BR ERANGE ,
and a "divide-by-zero"
.RB ( FE_DIVBYZERO )
floating-point exception is raised.
.SS Range error
A
.I range error
occurs when the magnitude of the function result means that it
cannot be represented in the result type of the function.
The return value of the function depends on whether the range error
was an overflow or an underflow.

A floating result
.I overflows
if the result is finite,
but is too large to represented in the result type.
When an overflow occurs,
the function returns the value
.BR HUGE_VAL ,
.BR HUGE_VALF ,
or
.BR HUGE_VALL ,
depending on whether the function result type is
.IR double ,
.IR float ,
or
.IR "long double" .
.I errno
is set to
.BR ERANGE ,
and an "overflow"
.RB ( FE_OVERFLOW )
floating-point exception is raised.

A floating result
.I underflows
if the result is too small to be represented in the result type.
If an underflow occurs,
a mathematical function typically returns 0.0
(C99 says a function shall return "an implementation-defined value
whose magnitude is no greater than the smallest normalized
positive number in the specified type").
.I errno
may be set to
.BR ERANGE ,
and an "overflow"
.RB ( FE_UNDERFLOW )
floating-point exception may be raised.

Some functions deliver a range error if the supplied argument value,
or the correct function result, would be
.IR subnormal .
A subnormal value is one that is nonzero,
but with a magnitude that is so small that
it can't be presented in normalized form
(i.e., with a 1 in the most significant bit of the significand).
The representation of a subnormal number will contain one
or more leading zeros in the significand.
.SH NOTES
The
.I math_errhandling
identifier specified by C99 and POSIX.1-2001 is not supported by glibc.
.\" See CONFORMANCE in the glibc 2.8 (and earlier) source.
This identifier is supposed to indicate which of the two
error-notification mechanisms
.RI ( errno ,
exceptions retrievable via
.BR fettestexcept (3))
is in use.
The standards require that at least one be in use,
but permit both to be available.
The current (version 2.8) situation under glibc is messy.
Most (but not all) functions raise exceptions on errors.
Some also set
.IR errno .
A few functions set
.IR errno ,
but don't raise an exception.
A very few functions do neither.
See the individual manual pages for details.

To avoid the complexities of using
.I errno
and
.BR fetestexcept (3)
for error checking,
it is often advised that one should instead check for bad argument
values before each call.
.\" http://www.securecoding.cert.org/confluence/display/seccode/FLP32-C.+Prevent+or+detect+domain+and+range+errors+in+math+functions
For example, the following code ensures that
.BR log (3)'s
argument is not a NaN and is not zero (a pole error) or
less than zero (a domain error):
.in +4n
.nf

double x, r;

if (isnan(x) || islessequal(x, 0)) {
    /* Deal with NaN / pole error / domain error */
}

r = log(x);

.fi
.in
The discussion on this page does not apply to the complex
mathematical functions (i.e., those declared by
.IR <complex.h> ),
which in general are not required to return errors by C99
and POSIX.1-2001.

The
.BR gcc (1)
.I "-fno-math-errno"
option causes the executable to employ implementations of some
mathematical functions that are faster than the standard
implementations, but do not set
.I errno
on error.
(The
.BR gcc (1)
.I "-ffast-math"
option also enables
.IR "-fno-math-errno" .)
An error can still be tested for using
.BR fetestexcept (3).
.SH SEE ALSO
.BR gcc (1),
.BR errno (3),
.BR fenv (3),
.BR fpclassify (3),
.BR INFINITY (3),
.BR isgreater (3),
.BR matherr (3),
.BR nan (3)

.I "info libc"
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" %%%LICENSE_START(BSD_4_CLAUSE_UCB)
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\" %%%LICENSE_END
.\"
.\"	@(#)mdoc.7	8.2 (Berkeley) 12/30/93
.\"	$Id: mdoc.7,v 1.8 1998/12/04 00:51:17 jkoshy Exp $
.\"
.\" The December 30, 1993 version
.\" Modified by David A. Wheeler (dwheeler@ida.org) on 1999-07-11
.\" to conform to Linux.
.\"
.\"
.Dd July 11, 1999
.Dt MDOC 7
.Os Linux
.Sh NAME
.Nm mdoc
.Nd quick reference guide for the
.Nm \-mdoc
macro package
.Sh SYNOPSIS
.Nm groff
.Fl m Ns Ar doc
.Ar files ...
.Sh DESCRIPTION
The
.Nm \-mdoc
package is a set of content-based and domain-based macros
used to format the
.Bx
man pages.
The macro names and their meanings are
listed below for quick reference; for
a detailed explanation on using the package,
see the tutorial sampler
.Xr mdoc.samples 7 .
.Pp
Note that this is not the usual macro package for Linux documentation,
although it is used for documentation of several widely used programs;
see
.Xr man 7 .
.Pp
The macros are described in two groups, the first
includes the structural and physical page layout macros.
The second contains the manual and general text domain
macros which differentiate the
.Nm \-mdoc
package from other
.Xr troff
formatting packages.
.Sh PAGE STRUCTURE DOMAIN
.Ss Title Macros
To create a valid manual page, these three macros, in this order,
are required:
.Bl -tag -width "xxxx.Os OPERATINGxSYSTEM [version/release]" -compact
.It Li "\&.Dd  " Ar "Month day, year"
Document date.
.It Li "\&.Dt  " Ar "DOCUMENT_TITLE [section] [volume]"
Title, in uppercase.
.It Li "\&.Os  " Ar "OPERATING_SYSTEM [version/release]"
Operating system
.Pq Tn BSD .
.El
.Ss Page Layout Macros
Section headers, paragraph breaks, lists and displays.
.Bl -tag -width flag -compact
.It Li \&.Sh
Section Headers.
Valid headers, in the order of presentation:
.Bl -tag -width "RETURN VALUE" -compact
.It Ar NAME
Name section, should include the
.Ql \&.Nm
or
.Ql \&.Fn
and the
.Ql \&.Nd
macros.
.It Ar SYNOPSIS
Usage.
.It Ar DESCRIPTION
General description, should include
options and parameters.
.It Ar RETURN VALUE
Sections two and three function calls.
.It Ar ENVIRONMENT
Describe environment variables.
.It Ar FILES
Files associated with the subject.
.It Ar EXAMPLES
Examples and suggestions.
.It Ar DIAGNOSTICS
Normally used for section four device interface diagnostics.
.It Ar ERRORS
Sections two and three error and signal
handling.
.It Ar SEE ALSO
Cross references and citations.
.It Ar CONFORMING TO
Conformance to standards if applicable.
.It Ar HISTORY
If a standard is not applicable, the history
of the subject should be given.
.It Ar BUGS
Gotchas and caveats.
.It Ar other
Customized headers may be added at
the authors discretion.
.El
.It Li \&.Ss
Subsection Headers.
.It Li \&.Pp
Paragraph Break.
Vertical space (one line).
.It Li \&.D1
(D-one) Display-one
Indent and display one text line.
.It Li \&.Dl
(D-ell) Display-one literal.
Indent and display one line of literal text.
.It Li \&.Bd
Begin-display block.
Display options:
.Bl -tag -width "xoffset string " -compact
.It Fl ragged
Unjustified (ragged edges).
.It Fl filled
Justified.
.It Fl literal
Literal text or code.
.It Fl file Ar name
Read in named
.Ar file
and display.
.It Fl offset Ar string
Offset display.
Acceptable
.Ar string
values:
.Bl -tag -width indent-two -compact
.It Ar left
Align block on left (default).
.It Ar center
Approximate center margin.
.It Ar indent
Six constant width spaces (a tab).
.It Ar indent-two
Two tabs.
.It Ar right
Left aligns block 2 inches from
right.
.It Ar xx Ns Cm n
Where
.Ar xx
is a number from
.No \&4 Ns Cm n
to
.No \&9\&9 Ns Cm n .
.It Ar Aa
Where
.Ar Aa
is a callable macro name.
.It Ar string
The width of
.Ar string
is used.
.El
.El
.It Li \&.Ed
End-display (matches \&.Bd).
.It Li \&.Bl
Begin-list.
Create lists or columns.
Options:
.Bl -tag -width flag -compact
.It Ar List-types
.Bl -column ".Fl bullet" -compact
.It Fl bullet Ta "Bullet Item List"
.It Fl item Ta "Unlabeled List"
.It Fl enum Ta "Enumerated List"
.It Fl tag Ta "Tag Labeled List"
.It Fl diag Ta "Diagnostic List"
.It Fl hang Ta "Hanging Labeled List"
.It Fl ohang Ta "Overhanging Labeled List"
.It Fl inset Ta "Inset or Run-on Labeled List"
.El
.It List-parameters
.Bl -tag -width "xcompact " -compact
.It Fl offset
(All lists.) See
.Ql \&.Bd
begin-display above.
.It Fl width
.Pf ( Fl tag
and
.Fl hang
lists only.)
See
.Ql \&.Bd .
.It Fl compact
(All lists.)
Suppresses blank lines.
.El
.El
.It Li \&.El
End-list.
.It Li \&.It
List item.
.El
.Sh MANUAL AND GENERAL TEXT DOMAIN MACROS
The manual and general text domain macros are special in that
most of them are parsed for callable macros
for example:
.Bl -tag -width ".Op Fl s Ar filex" -offset indent
.It Li "\&.Op Fl s Ar file"
Produces
.Op Fl s Ar file
.El
.Pp
In this example, the option enclosure macro
.Ql \&.Op
is parsed, and calls the callable content macro
.Ql \&Fl
which operates on the argument
.Ql s
and then calls the callable content macro
.Ql \&Ar
which operates on the argument
.Ql file .
Some macros may be callable, but are not parsed and vice versa.
These macros are indicated in the
.Em parsed
and
.Em callable
columns below.
.Pp
Unless stated, manual domain macros share a common syntax:
.Pp
.Dl \&.Va argument [\ .\ ,\ ;\ :\ (\ )\ [\ ]\ argument \...\ ]
.Pp
.Sy Note :
Opening and closing
punctuation characters are recognized as such only if they are presented
one at a time.
The string
.Ql "),"
is not recognized as punctuation and will be output with a leading white
space and in what ever font the calling macro uses.
The
argument list
.Ql "] ) ,"
is recognized as three sequential closing punctuation characters
and a leading white space is not output between the characters
and the previous argument (if any).
The special meaning of a punctuation character may be escaped
with the string
.Ql \e& .
For example the following string,
.Bl -tag -width "&.Ar file1\ , file2\ , file3\ )\ ." -offset indent
.It Li "\&.Ar file1\ , file2\ , file3\ )\ ."
Produces
.Ar file1 , file2 , file3 ) .
.El
.ne 1i
.Ss Manual Domain Macros
.Bl -column "Name" "Parsed" Callable" -compact
.It Em "Name	Parsed	Callable	Description"
.It Li \&Ad Ta Yes Ta Yes Ta "Address. (This macro may be deprecated.)"
.It Li \&An Ta Yes Ta Yes Ta "Author name."
.It Li \&Ar Ta Yes Ta Yes Ta "Command-line argument."
.It Li \&Cd Ta \&No Ta \&No Ta "Configuration declaration (section four only)."
.It Li \&Cm Ta Yes Ta Yes Ta "Command-line argument modifier."
.It Li \&Dv Ta Yes Ta Yes Ta "Defined variable (source code)."
.It Li \&Er Ta Yes Ta Yes Ta "Error number (source code)."
.It Li \&Ev Ta Yes Ta Yes Ta "Environment variable."
.It Li \&Fa Ta Yes Ta Yes Ta "Function argument."
.It Li \&Fd Ta Yes Ta Yes Ta "Function declaration."
.It Li \&Fn Ta Yes Ta Yes Ta "Function call (also .Fo and .Fc)."
.It Li \&Ic Ta Yes Ta Yes Ta "Interactive command."
.It Li \&Li Ta Yes Ta Yes Ta "Literal text."
.It Li \&Nm Ta Yes Ta Yes Ta "Command name."
.It Li \&Op Ta Yes Ta Yes Ta "Option (also .Oo and .Oc)."
.It Li \&Ot Ta Yes Ta Yes Ta "Old style function type (Fortran only)."
.It Li \&Pa Ta Yes Ta Yes Ta "Pathname or filename."
.It Li \&St Ta Yes Ta Yes Ta "Standards (\-p1003.2, \-p1003.1 or \-ansiC)"
.It Li \&Va Ta Yes Ta Yes Ta "Variable name."
.It Li \&Vt Ta Yes Ta Yes Ta "Variable type (Fortran only)."
.It Li \&Xr Ta Yes Ta Yes Ta "Manual Page Cross Reference."
.El
.Ss General Text Domain Macros
.Bl -column "Name" "Parsed" Callable" -compact
.It Em "Name	Parsed	Callable	Description"
.It Li \&%A Ta Yes Ta \&No Ta "Reference author."
.It Li \&%B Ta Yes Ta Yes Ta "Reference book title."
.It Li \&%\&C Ta \&No Ta \&No Ta "Reference place of publishing (city)."
.It Li \&%\&D Ta \&No Ta \&No Ta "Reference date."
.It Li \&%J Ta Yes Ta Yes Ta "Reference journal title."
.It Li \&%N Ta \&No Ta \&No Ta "Reference issue number."
.It Li \&%\&O Ta \&No Ta \&No Ta "Reference optional information."
.It Li \&%P Ta \&No Ta \&No Ta "Reference page number(s)."
.It Li \&%R Ta \&No Ta \&No Ta "Reference report Name."
.It Li \&%T Ta Yes Ta Yes Ta "Reference article title."
.It Li \&%V Ta \&No Ta \&No Ta "Reference volume."
.It Li \&Ac Ta Yes Ta Yes Ta "Angle close quote."
.It Li \&Ao Ta Yes Ta Yes Ta "Angle open quote."
.It Li \&Ap Ta Yes Ta Yes Ta "Apostrophe."
.It Li \&Aq Ta Yes Ta Yes Ta "Angle quote."
.It Li \&At Ta \&No Ta \&No Ta Tn "AT&T UNIX"
.It Li \&Bc Ta Yes Ta Yes Ta "Bracket close quote."
.It Li \&Bf Ta \&No Ta \&No Ta "Begin font mode."
.It Li \&Bo Ta Yes Ta Yes Ta "Bracket open quote."
.It Li \&Bq Ta Yes Ta Yes Ta "Bracket quote."
.It Li \&Bx Ta Yes Ta Yes Ta Bx .
.It Li \&Db Ta \&No Ta \&No Ta "Debug (default is \*qoff\*q)"
.It Li \&Dc Ta Yes Ta Yes Ta "Double close quote."
.It Li \&Do Ta Yes Ta Yes Ta "Double open quote."
.It Li \&Dq Ta Yes Ta Yes Ta "Double quote."
.It Li \&Ec Ta Yes Ta Yes Ta "Enclose string close quote."
.It Li \&Ef Ta \&No Ta \&No Ta "End font mode."
.It Li \&Em Ta Yes Ta Yes Ta "Emphasis (traditional English)."
.It Li \&Eo Ta Yes Ta Yes Ta "Enclose string open quote."
.It Li \&Fx Ta \&No Ta \&No Ta Tn "FreeBSD operating system"
.It Li \&No Ta Yes Ta Yes Ta "Normal text (no-op)."
.It Li \&Ns Ta Yes Ta Yes Ta "No space."
.It Li \&Pc Ta Yes Ta Yes Ta "Parenthesis close quote."
.It Li \&Pf Ta Yes Ta \&No Ta "Prefix string."
.It Li \&Po Ta Yes Ta Yes Ta "Parenthesis open quote."
.It Li \&Pq Ta Yes Ta Yes Ta "Parentheses quote."
.It Li \&Qc Ta Yes Ta Yes Ta "Straight Double close quote."
.It Li \&Ql Ta Yes Ta Yes Ta "Quoted literal."
.It Li \&Qo Ta Yes Ta Yes Ta "Straight Double open quote."
.It Li \&Qq Ta Yes Ta Yes Ta "Straight Double quote."
.It Li \&Re Ta \&No Ta \&No Ta "Reference end."
.It Li \&Rs Ta \&No Ta \&No Ta "Reference start."
.It Li \&Rv Ta \&No Ta \&No Ta "Return values (sections two and three only)."
.It Li \&Sc Ta Yes Ta Yes Ta "Single close quote."
.It Li \&So Ta Yes Ta Yes Ta "Single open quote."
.It Li \&Sq Ta Yes Ta Yes Ta "Single quote."
.It Li \&Sm Ta \&No Ta \&No Ta "Space mode (default is \\*qon\\*q)"
.It Li \&Sx Ta Yes Ta Yes Ta "Section Cross Reference."
.It Li \&Sy Ta Yes Ta Yes Ta "Symbolic (traditional English)."
.It Li \&Tn Ta Yes Ta Yes Ta "Trade or type name (small Caps)."
.It Li \&Ux Ta Yes Ta Yes Ta Ux
.It Li \&Xc Ta Yes Ta Yes Ta "Extend argument list close."
.It Li \&Xo Ta Yes Ta Yes Ta "Extend argument list open."
.El
.\" .It Sy \&Hf Ta \&No Ta \&No Ta "Include file with header"
.Pp
Macro names ending in
.Ql q
quote remaining items on the argument list.
Macro names ending in
.Ql o
begin a quote which may span more than one line of input and
are close quoted with the matching macro name ending in
.Ql c .
Enclosure macros may be nested and are limited to
eight arguments.
.Pp
Note: the extended argument list macros
.Pf ( Ql \&.Xo ,
.Ql \&.Xc )
and the function enclosure macros
.Pf ( Ql \&.Fo ,
.Ql \&.Fc )
are irregular.
The extended list macros are used when the number of macro arguments
would exceed the
.Xr troff
limitation of nine arguments.
.Pp
The macros UR (starting a URI/URL hypertext reference), UE (ending one),
and UN (identifying a target for a reference) are also available.
See
.Xr man 7
for more information on these macros.
.\" The following does not apply on Linux:
.\" .Sh CONFIGURATION
.\" For site specific configuration of the macro package,
.\" see the file
.\" .Pa /usr/src/share/tmac/README .
.Sh FILES
.Bl -tag -width "tmac.doc-ditroff" -compact
.It Pa doc.tmac
Manual and general text domain macros.
.It Pa tmac/doc-common
Common structural macros and definitions.
.It Pa tmac/doc-nroff
Site dependent
.Xr nroff
style file.
.It Pa tmac/doc-ditroff
Site dependent
.Xr troff
style file.
.It Pa tmac/doc-syms
Special defines (such as the standards macro).
.El
.Sh "SEE ALSO"
.Xr groff_mdoc 7 ,
.Xr mdoc.samples 7 ,
.Xr man 7 ,
.Xr man-pages 7
.Sh COLOPHON
This page is part of release 4.00 of the Linux
.Em man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1990, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" %%%LICENSE_START(BSD_4_CLAUSE_UCB)
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\" %%%LICENSE_END
.\"
.\"     @(#)mdoc.samples.7	8.2 (Berkeley) 12/30/93
.\"	$Id: mdoc.samples.7,v 1.17 1998/12/03 03:38:45 jkoshy Exp $
.\"
.\" This tutorial sampler invokes every macro in the package several
.\" times and is guaranteed to give a worst case performance
.\" for an already extremely slow package.
.\"
.\" String \*(Pu was not defined, probably means punctuation
.ds Pu "[ .,:;()[]?! ]
.Dd December 30, 1993
.Os
.Dt MDOC.SAMPLES 7
.Sh NAME
.Nm mdoc.samples
.Nd tutorial sampler for writing
.Bx
manuals with
.Nm \-mdoc
.Sh SYNOPSIS
.Nm man mdoc.samples
.Sh DESCRIPTION
A tutorial sampler for writing
.Bx
manual pages with the
.Nm \-mdoc
macro package, a
.Em content Ns \-based
and
.Em domain Ns \-based
formatting
package for
.Xr troff 1 .
Its predecessor, the
.Xr \-man 7
package,
addressed page layout leaving the
manipulation of fonts and other
typesetting details to the individual author.
In
.Nm \-mdoc ,
page layout macros
make up the
.Em "page structure domain"
which consists of macros for titles, section headers, displays
and lists.
Essentially items which affect the physical position
of text on a formatted page.
In addition to the page structure domain, there are two more domains,
the manual domain and the general text domain.
The general text domain is defined as macros which
perform tasks such as quoting or emphasizing pieces of text.
The manual domain is defined as macros that are a subset of the
day to day informal language used to describe commands, routines
and related
.Bx
files.
Macros in the manual domain handle
command names, command-line arguments and options, function names,
function parameters, pathnames, variables, cross
references to other manual pages, and so on.
These domain
items have value
for both the author and the future user of the manual page.
It is hoped the consistency gained
across the manual set will provide easier
translation to future documentation tools.
.Pp
Throughout the
.Ux
manual pages, a manual entry
is simply referred
to as a man page, regardless of actual length and without
sexist intention.
.Sh GETTING STARTED
Since a tutorial document is normally read when a person
desires to use the material immediately, the assumption has
been made that the user of this document may be impatient.
The material presented in the remained of this document is
outlined as follows:
.Bl -enum -offset indent
.It
.Tn "TROFF IDIOSYNCRASIES"
.Bl -tag -width flag -compact -offset indent
.It "Macro Usage" .
.It "Passing Space Characters in an Argument" .
.It "Trailing Blank Space Characters (a warning)" .
.It "Escaping Special Characters" .
.El
.It
.Tn "THE ANATOMY OF A MAN PAGE"
.Bl -tag -width flag -compact -offset indent
.It "A manual page template" .
.El
.It
.Tn "TITLE MACROS" .
.It
.Tn "INTRODUCTION OF MANUAL AND GENERAL TEXT DOMAINS" .
.Bl -tag -width flag -compact -offset indent
.It "What's in a name..." .
.It "General Syntax" .
.El
.It
.Tn "MANUAL DOMAIN"
.Bl -tag -width flag -compact -offset indent
.It "Addresses" .
.It "Author name" .
.It "Arguments" .
.It "Configuration Declarations (section four only)" .
.It "Command Modifier" .
.It "Defined Variables" .
.It "Errno's (Section two only)" .
.It "Environment Variables" .
.It "Function Argument" .
.It "Function Declaration" .
.It "Flags" .
.It "Functions (library routines)" .
.It "Function Types" .
.\" .It "Header File (including source code)" .
.It "Interactive Commands" .
.It "Names" .
.It "Options" .
.It "Pathnames" .
.It "Variables" .
.It "Cross References" .
.El
.It
.Tn "GENERAL TEXT DOMAIN"
.Bl -tag -width flag -compact -offset indent
.It "AT&T Macro" .
.It "BSD Macro" .
.It "FreeBSD Macro" .
.It "UNIX Macro" .
.It "Enclosure/Quoting Macros"
.Bl -tag -width flag -compact -offset indent
.It "Angle Bracket Quote/Enclosure" .
.It "Bracket Quotes/Enclosure" .
.It "Double Quote macro/Enclosure" .
.It "Parenthesis Quote/Enclosure" .
.It "Single Quotes/Enclosure" .
.It "Prefix Macro" .
.El
.It "No\-Op or Normal Text Macro" .
.It "No Space Macro" .
.It "Section Cross References" .
.It "References and Citations" .
.It "Return Values (sections two and three only)"
.It "Trade Names (Acronyms and Type Names)" .
.It "Extended  Arguments" .
.El
.It
.Tn "PAGE STRUCTURE DOMAIN"
.Bl -tag -width flag -compact -offset indent
.It "Section Headers" .
.It "Paragraphs and Line Spacing" .
.It "Keeps" .
.It "Displays" .
.It "Font Modes (Emphasis, Literal, and Symbolic)" .
.It "Lists and Columns" .
.El
.It
.Tn "PREDEFINED STRINGS"
.It
.Tn "DIAGNOSTICS"
.It
.Tn "FORMATTING WITH GROFF, TROFF AND NROFF"
.It
.Tn "BUGS"
.El
.ne 7
.Sh TROFF IDIOSYNCRASIES
The
.Nm \-mdoc
package attempts to simplify the process of writing a man page.
Theoretically, one should not have to learn the dirty details of
.Xr troff 1
to use
.Nm \-mdoc ;
however, there are a few
limitations which are unavoidable and best gotten out
of the way.
And, too, be forewarned, this package is
.Em not
fast.
.Ss Macro Usage
As in
.Xr troff 1 ,
a macro is called by placing a
.Ql \&\.
(dot character)
at the beginning of
a line followed by the two character name for the macro.
Arguments may follow the macro separated by spaces.
It is the dot character at the beginning of the line which causes
.Xr troff 1
to interpret the next two characters as a macro name.
To place a
.Ql \&\.
(dot character)
at the beginning of a line in some context other than
a macro invocation, precede the
.Ql \&\.
(dot) with the
.Ql \e&
escape sequence.
The
.Ql \e&
translates literally to a zero width space, and is never displayed in the
output.
.Pp
In general,
.Xr troff 1
macros accept up to nine arguments, any
extra arguments are ignored.
Most macros in
.Nm \-mdoc
accept nine arguments and,
in limited cases, arguments may be continued or extended
on the
next line (See
.Sx Extensions ) .
A few macros handle quoted arguments (see
.Sx Passing Space Characters in an Argument
below).
.Pp
Most of the
.Nm \-mdoc
general text domain and manual domain macros are special
in that their argument lists are
.Em parsed
for callable macro names.
This means an argument on the argument list which matches
a general text or manual domain macro name and is determined
to be callable will be executed
or called when it is processed.
In this case,
the argument, although the name of a macro,
is not preceded by a
.Ql \&\.
(dot).
It is in this manner that many macros are nested; for
example
the option macro,
.Ql \&.Op ,
may
.Em call
the flag and argument macros,
.Ql \&Fl
and
.Ql \&Ar ,
to specify an optional flag with an argument:
.Bl -tag -width "\&.Op \&Fl s \&Ar bytes" -offset indent
.It Op Fl s Ar bytes
is produced by
.Li \&.Op \&Fl s \&Ar bytes
.El
.Pp
To prevent a two character
string from being interpreted as a macro name, precede
the string with the
escape sequence
.Ql \e& :
.Bl -tag -width "\&.Op \&Fl s \&Ar bytes" -offset indent
.It Op \&Fl s \&Ar bytes
is produced by
.Li \&.Op \e&Fl s \e&Ar bytes
.El
.Pp
Here the strings
.Ql \&Fl
and
.Ql \&Ar
are not interpreted as macros.
Macros whose argument lists are parsed for callable arguments
are referred to
as parsed and macros which may be called from an argument
list are referred to as callable
throughout this document and in the companion quick reference
manual
.Xr mdoc 7 .
This is a technical
.Em faux pas
as almost all of the macros in
.Nm \-mdoc
are parsed, but as it was cumbersome to constantly refer to macros
as being callable and being able to call other macros,
the term parsed has been used.
.Ss Passing Space Characters in an Argument
Sometimes it is desirable to give as one argument a string
containing one or more blank space characters.
This may be necessary
to defeat the nine argument limit or to specify arguments to macros
which expect particular arrangement of items in the argument list.
For example,
the function macro
.Ql \&.Fn
expects the first argument to be the name of a function and any
remaining arguments to be function parameters.
As
.Tn "ANSI C"
stipulates the declaration of function parameters in the
parenthesized parameter list, each parameter is guaranteed
to be at minimum a two word string.
For example,
.Fa int foo .
.Pp
There are two possible ways to pass an argument which contains
an embedded space.
.Em Implementation note :
Unfortunately, the most convenient way
of passing spaces in between quotes by reassigning individual
arguments before parsing was fairly expensive speed wise
and space wise to implement in all the macros for
.Tn AT&T
.Xr troff .
It is not expensive for
.Xr groff
but for the sake of portability, has been limited
to the following macros which need
it the most:
.Pp
.Bl -tag -width 4n -offset indent -compact
.It Li \&Cd
Configuration declaration (section 4
.Sx SYNOPSIS )
.It Li \&Bl
Begin list (for the width specifier).
.It Li \&Em
Emphasized text.
.It Li \&Fn
Functions (sections two and four).
.It Li \&It
List items.
.It Li \&Li
Literal text.
.It Li \&Sy
Symbolic text.
.It Li \&%B
Book titles.
.It Li \&%J
Journal names.
.It Li \&%O
Optional notes for a reference.
.It Li \&%R
Report title (in a reference).
.It Li \&%T
Title of article in a book or journal.
.El
.Pp
One way of passing a string
containing blank spaces is to use the hard or unpaddable space character
.Ql \e\  ,
that is, a blank space preceded by the escape character
.Ql \e .
This method may be used with any macro but has the side effect
of interfering with the adjustment of text
over the length of a line.
.Xr Troff
sees the hard space as if it were any other printable character and
cannot split the string into blank or newline separated pieces as one
would expect.
The method is useful for strings which are not expected
to overlap a line boundary.
For example:
.Bl -tag -width "fetch(char *str)" -offset indent
.It Fn fetch char\ *str
is created by
.Ql \&.Fn fetch char\e *str
.It Fn fetch "char *str"
can also be created by
.Ql \&.Fn fetch "\\*qchar *str\\*q"
.El
.Pp
If the
.Ql \e
or quotes
were omitted,
.Ql \&.Fn
would see three arguments and
the result would be:
.Pp
.Dl Fn fetch char *str
.Pp
For an example of what happens when the parameter list overlaps
a newline boundary, see the
.Sx BUGS
section.
.Ss Trailing Blank Space Characters
.Xr Troff
can be confused by blank space characters at the end of a line.
It
is a wise preventive measure to globally remove all blank spaces
from <blank-space><end-of-line> character sequences.
Should the need
arise to force a blank character at the end of a line,
it may be forced with an unpaddable space and the
.Ql \e&
escape character.
For example,
.Ql string\e\ \e& .
.Ss Escaping Special Characters
Special characters
like the newline character
.Ql \en ,
are handled by replacing the
.Ql \e
with
.Ql \ee
(e.g.,
.Ql \een )
to preserve
the backslash.
.Sh THE ANATOMY OF A MAN PAGE
The body of a man page is easily constructed from a basic
template found in the file
.Pa /usr/share/misc/mdoc.template .
Several example man pages can also be found
in
.Pa /usr/share/examples/mdoc .
.Pp
.Ss A manual page template
.Bd -literal -offset indent
\&.\e" The following requests are required for all man pages.
\&.Dd Month day, year
\&.Os OPERATING_SYSTEM [version/release]
\&.Dt DOCUMENT_TITLE [section number] [volume]
\&.Sh NAME
\&.Nm name
\&.Nd one line description of name
\&.Sh SYNOPSIS
\&.Sh DESCRIPTION
\&.\e" The following requests should be uncommented and
\&.\e" used where appropriate.  This next request is
\&.\e" for sections 2 and 3 function return values only.
\&.\e" .Sh RETURN VALUE
\&.\e" This next request is for sections 1, 6, 7 & 8 only
\&.\e" .Sh ENVIRONMENT
\&.\e" .Sh FILES
\&.\e" .Sh EXAMPLES
\&.\e" This next request is for sections 1, 6, 7 & 8 only
\&.\e"     (command return values (to shell) and
\&.\e"	  fprintf/stderr type diagnostics)
\&.\e" .Sh DIAGNOSTICS
\&.\e" The next request is for sections 2 and 3 error
\&.\e" and signal handling only.
\&.\e" .Sh ERRORS
\&.\e" .Sh SEE ALSO
\&.\e" .Sh CONFORMING TO
\&.\e" .Sh HISTORY
\&.\e" .Sh AUTHORS
\&.\e" .Sh BUGS
.Ed
.Pp
The first items in the template are the macros
.Pq Li \&.Dd , \&.Os , \&.Dt ;
the document date,
the operating system the man page or subject source is developed
or modified for,
and the man page title
.Pq Em in uppercase
along with the section of the manual the page
belongs in.
These macros identify the page,
and are discussed below in
.Sx TITLE MACROS .
.Pp
The remaining items in the template are section headers
.Pq Li \&.Sh ;
of which
.Sx NAME ,
.Sx SYNOPSIS
and
.Sx DESCRIPTION
are mandatory.
The
headers are
discussed in
.Sx PAGE STRUCTURE DOMAIN ,
after
presentation of
.Sx MANUAL DOMAIN .
Several content macros are used to demonstrate page layout macros;
reading about content macros before page layout macros is
recommended.
.Sh TITLE MACROS
The title macros are the first portion of the page structure
domain, but are presented first and separate for someone who
wishes to start writing a man page yesterday.
Three header macros designate the document title or manual page title,
the operating system,
and the date of authorship.
These macros are one called once at the very beginning of the document
and are used to construct the headers and footers only.
.Bl -tag -width 6n
.It Li \&.Dt DOCUMENT_TITLE section# [volume]
The document title is the
subject of the man page and must be in
.Tn CAPITALS
due to troff
limitations.
The section number may be 1,\ ...,\ 8,
and if it is specified,
the volume title may be omitted.
A volume title may be arbitrary or one of the following:
.\" .Cl
.\" USD	UNIX User's Supplementary Documents
.\" .Cl
.\" PS1	UNIX Programmer's Supplementary Documents
.Pp
.Bl -column SMM -offset indent -compact
.It Li "AMD	UNIX Ancestral Manual Documents"
.It Li "SMM	UNIX System Manager's Manual"
.It Li "URM	UNIX Reference Manual"
.It Li "PRM	UNIX Programmer's Manual"
.El
.Pp
The default volume labeling is
.Li URM
for sections 1, 6, and 7;
.Li SMM
for section 8;
.Li PRM
for sections 2, 3, 4, and 5.
.\" .Cl
.\" MMI	UNIX Manual Master Index
.\" .Cl
.\" CON	UNIX Contributed Software Manual
.\" .Cl
.\" LOC	UNIX Local Manual
.It Li \&.Os operating_system release#
The name of the operating system
should be the common acronym, for example,
.Tn BSD
or
.Tn FreeBSD
or
.Tn ATT .
The release should be the standard release
nomenclature for the system specified, for example, 4.3, 4.3+Tahoe, V.3,
V.4.
Unrecognized arguments are displayed as given in the page footer.
For instance, a typical footer might be:
.Pp
.Dl \&.Os 4.3BSD
.Pp
or
.Dl \&.Os FreeBSD 2.2
.Pp
or for a locally produced set
.Pp
.Dl \&.Os CS Department
.Pp
The Berkeley default,
.Ql \&.Os
without an argument, has been defined as
.Tn BSD
in the
site-specific file
.Pa /usr/share/tmac/mdoc/doc-common .
It really should default to
.Tn LOCAL .
Note, if the
.Ql \&.Os
macro is not present, the bottom left corner of the page
will be ugly.
.It Li \&.Dd month day, year
The date should be written formally:
.Pp
.ne 5
.Dl January 25, 1989
.El
.Sh INTRODUCTION OF MANUAL AND GENERAL TEXT DOMAINS
.Ss What's in a name...
The manual domain macro names are derived from the day to day
informal language used to describe commands, subroutines and related
files.
Slightly different variations of this language are used to describe
the three different aspects of writing a man page.
First, there is the description of
.Nm \-mdoc
macro request usage.
Second is the description of a
.Ux
command
.Em with
.Nm \-mdoc
macros and third,
the description of a command to a user in the verbal sense;
that is, discussion of a command in the text of a man page.
.Pp
In the first case,
.Xr troff 1
macros are themselves a type of command;
the general syntax for a troff command is:
.Bd -filled -offset indent
\&.Va argument1 argument2 ... argument9
.Ed
.Pp
The
.Ql \&.Va
is a macro command or request, and anything following it is an argument to
be processed.
In the second case,
the description of a
.Ux
command using the content macros is a
bit more involved;
a typical
.Sx SYNOPSIS
command line might be displayed as:
.Bd -filled -offset indent
.Nm filter
.Op Fl flag
.Ar infile outfile
.Ed
.Pp
Here,
.Nm filter
is the command name and the
bracketed string
.Fl flag
is a
.Em flag
argument designated as optional by the option brackets.
In
.Nm \-mdoc
terms,
.Ar infile
and
.Ar outfile
are
called
.Em arguments .
The macros which formatted the above example:
.Bd -literal -offset indent
\&.Nm filter
\&.Op \&Fl flag
\&.Ar infile outfile
.Ed
.Pp
In the third case, discussion of commands and command syntax
includes both examples above, but may add more detail.
The
arguments
.Ar infile
and
.Ar outfile
from the example above might be referred to as
.Em operands
or
.Em file arguments .
Some command-line argument lists are quite long:
.Bl -tag -width make -offset indent
.It Nm make
.Op Fl eiknqrstv
.Op Fl D Ar variable
.Op Fl d Ar flags
.Op Fl f Ar makefile
.Bk -words
.Op Fl I Ar directory
.Ek
.Op Fl j Ar max_jobs
.Op Ar variable=value
.Bk -words
.Op Ar target ...
.Ek
.El
.Pp
Here one might talk about the command
.Nm make
and qualify the argument
.Ar makefile ,
as an argument to the flag,
.Fl f ,
or discuss the optional
file
operand
.Ar target .
In the verbal context, such detail can prevent confusion,
however the
.Nm \-mdoc
package
does not have a macro for an argument
.Em to
a flag.
Instead the
.Ql \&Ar
argument macro is used for an operand or file argument like
.Ar target
as well as an argument to a flag like
.Ar variable .
The make command line was produced from:
.Bd -literal -offset indent
\&.Nm make
\&.Op Fl eiknqrstv
\&.Op Fl D Ar variable
\&.Op Fl d Ar flags
\&.Op Fl f Ar makefile
\&.Op Fl I Ar directory
\&.Op Fl j Ar max_jobs
\&.Op Ar variable=value
\&.Bk -words
\&.Op Ar target ...
\&.Ek
.Ed
.Pp
The
.Ql \&.Bk
and
.Ql \&.Ek
macros are explained in
.Sx Keeps .
.Ss General Syntax
The manual domain and general text domain macros share a similar
syntax with a few minor deviations:
.Ql \&.Ar ,
.Ql \&.Fl ,
.Ql \&.Nm ,
and
.Ql \&.Pa
differ only when called without arguments;
.Ql \&.Fn
and
.Ql \&.Xr
impose an order on their argument lists
and the
.Ql \&.Op
and
.Ql \&.Fn
macros
have nesting limitations.
All content macros
are capable of recognizing and properly handling punctuation,
provided each punctuation character is separated by a leading space.
If a request is given:
.Pp
.Dl \&.Li sptr, ptr),
.Pp
The result is:
.Pp
.Dl Li sptr, ptr),
.Pp
The punctuation is not recognized and all is output in the
literal font. If the punctuation is separated by a leading
white space:
.Pp
.Dl \&.Li "sptr , ptr ) ,"
.Pp
The result is:
.Pp
.Dl Li sptr , ptr ) ,
.Pp
The punctuation is now recognized and is output in the
default font distinguishing it from the strings in literal font.
.Pp
To remove the special meaning from a punctuation character
escape it with
.Ql \e& .
.Xr Troff
is limited as a macro language, and has difficulty
when presented with a string containing
a member of the mathematical, logical or
quotation set:
.Bd -literal -offset indent-two
\&{+,\-,/,*,\&%,<,>,<=,>=,=,==,&,`,',"}
.Ed
.Pp
The problem is that
.Xr troff
may assume it is supposed to actually perform the operation
or evaluation suggested by the characters.
To prevent the accidental evaluation of these characters,
escape them with
.Ql \e& .
Typical syntax is shown in the first content macro displayed
below,
.Ql \&.Ad .
.Sh MANUAL DOMAIN
.Ss Address Macro
The address macro identifies an address construct
of the form addr1[,addr2[,addr3]].
.Pp
.Dl Usage: .Ad address ... \*(Pu
.Bl -tag -width "\&.Ad f1 , f2 , f3 :" -compact -offset 14n
.It Li \&.Ad addr1
.Ad addr1
.It Li \&.Ad addr1\ .
.Ad addr1 .
.It Li \&.Ad addr1\ , file2
.Ad addr1 , file2
.It Li \&.Ad f1\ , f2\ , f3\ :
.Ad f1 , f2 , f3 :
.It Li \&.Ad addr\ )\ )\ ,
.Ad addr ) ) ,
.El
.Pp
It is an error to call
.Ql \&.Ad
without arguments.
.Ql \&.Ad
is callable by other macros and is parsed.
.Ss Author Name
The
.Ql \&.An
macro is used to specify the name of the author of the item being
documented, or the name of the author of the actual manual page.
Any remaining arguments after the name information are assumed
to be punctuation.
.Pp
.Dl Usage: .An author_name \*(Pu
.Bl -tag -width "\&.An Joe Author ) ) ," -compact -offset 14n
.It Li \&.An Joe\ Author
.An Joe Author
.It Li \&.An Joe\ Author\ ,
.An Joe\ Author ,
.It Li \&.An Joe\ Author\ \&Aq\ nobody@FreeBSD.ORG
.An Joe Author Aq nobody@FreeBSD.ORG
.It Li \&.An Joe\ Author\ )\ )\ ,
.An Joe Author ) ) ,
.El
.Pp
The
.Ql \&.An
macro is parsed and is callable.
It is an error to call
.Ql \&.An
without
any arguments.
.Ss Argument Macro
The
.Ql \&.Ar
argument macro may be used whenever
a command-line argument is referenced.
.Pp
.Dl Usage: .Ar argument ... \*(Pu
.Bl -tag -width "\&.Ar file1 file2" -compact -offset 15n
.It Li \&.Ar
.Ar
.It Li \&.Ar file1
.Ar file1
.It Li \&.Ar file1\ .
.Ar file1 .
.It Li \&.Ar file1 file2
.Ar file1 file2
.It Li \&.Ar f1 f2 f3\ :
.Ar f1 f2 f3 :
.It Li \&.Ar file\ )\ )\ ,
.Ar file ) ) ,
.El
.Pp
If
.Ql \&.Ar
is called without arguments,
.Ql \&Ar
is assumed.
The
.Ql \&.Ar
macro is parsed and is callable.
.Ss Configuration Declaration (section four only)
The
.Ql \&.Cd
macro is used to demonstrate a
.Xr config 8
declaration for a device interface in a section four manual.
This macro accepts quoted arguments (double quotes only).
.Pp
.Bl -tag -width "device le0 at scode?" -offset indent
.It Cd "device le0 at scode?"
produced by:
.Ql ".Cd device le0 at scode?" .
.El
.Ss Command Modifier
The command modifier is identical to the
.Ql \&.Fl
(flag) command with the exception
the
.Ql \&.Cm
macro does not assert a dash
in front of every argument.
Traditionally flags are marked by the
preceding dash, some commands or subsets of commands do not use them.
Command modifiers may also be specified in conjunction with interactive
commands such as editor commands.
See
.Sx Flags .
.Ss Defined Variables
A variable which is defined in an include file is specified
by the macro
.Ql \&.Dv .
.Pp
.Dl Usage: .Dv defined_variable ... \*(Pu
.Bl -tag -width "\&.Dv MAXHOSTNAMELEN" -compact -offset 14n
.It Li ".Dv MAXHOSTNAMELEN"
.Dv MAXHOSTNAMELEN
.It Li ".Dv TIOCGPGRP )"
.Dv TIOCGPGRP )
.El
.Pp
It is an error to call
.Ql \&.Dv
without arguments.
.Ql \&.Dv
is parsed and is callable.
.Ss Errno's (Section two only)
The
.Ql \&.Er
errno macro specifies the error return value
for section two library routines.
The second example
below shows
.Ql \&.Er
used with the
.Ql \&.Bq
general text domain macro, as it would be used in
a section two manual page.
.Pp
.Dl Usage: .Er ERRNOTYPE ... \*(Pu
.Bl -tag -width "\&.Bq Er ENOTDIR" -compact -offset 14n
.It Li \&.Er ENOENT
.Er ENOENT
.It Li \&.Er ENOENT\ )\ ;
.Er ENOENT ) ;
.It Li \&.Bq \&Er ENOTDIR
.Bq Er ENOTDIR
.El
.Pp
It is an error to call
.Ql \&.Er
without arguments.
The
.Ql \&.Er
macro is parsed and is callable.
.Ss Environment Variables
The
.Ql \&.Ev
macro specifies an environment variable.
.Pp
.Dl Usage: .Ev argument ... \*(Pu
.Bl -tag -width "\&.Ev PRINTER ) ) ," -compact -offset 14n
.It Li \&.Ev DISPLAY
.Ev  DISPLAY
.It Li \&.Ev PATH\ .
.Ev PATH .
.It Li \&.Ev PRINTER\ )\ )\ ,
.Ev PRINTER ) ) ,
.El
.Pp
It is an error to call
.Ql \&.Ev
without arguments.
The
.Ql \&.Ev
macro is parsed and is callable.
.Ss Function Argument
The
.Ql \&.Fa
macro is used to refer to function arguments (parameters)
outside of the
.Sx SYNOPSIS
section of the manual or inside
the
.Sx SYNOPSIS
section should a parameter list be too
long for the
.Ql \&.Fn
macro and the enclosure macros
.Ql \&.Fo
and
.Ql \&.Fc
must be used.
.Ql \&.Fa
may also be used to refer to structure members.
.Pp
.Dl Usage: .Fa function_argument ... \*(Pu
.Bl -tag -width "\&.Fa d_namlen\ )\ )\ ," -compact -offset 14n
.It Li \&.Fa d_namlen\ )\ )\ ,
.Fa d_namlen ) ) ,
.It Li \&.Fa iov_len
.Fa iov_len
.El
.Pp
It is an error to call
.Ql \&.Fa
without arguments.
.Ql \&.Fa
is parsed and is callable.
.Ss Function Declaration
The
.Ql \&.Fd
macro is used in the
.Sx SYNOPSIS
section with section two or three
functions.
The
.Ql \&.Fd
macro does not call other macros and is not callable by other
macros.
.Pp
.Dl Usage: .Fd include_file (or defined variable)
.Pp
In the
.Sx SYNOPSIS
section a
.Ql \&.Fd
request causes a line break if a function has already been presented
and a break has not occurred.
This leaves a nice vertical space
in between the previous function call and the declaration for the
next function.
.Ss Flags
The
.Ql \&.Fl
macro handles command-line flags.
It prepends
a dash,
.Ql \- ,
to the flag.
For interactive command flags, which
are not prepended with a dash, the
.Ql \&.Cm
(command modifier)
macro is identical, but without the dash.
.Pp
.Dl Usage: .Fl argument ... \*(Pu
.Bl -tag -width "\&.Fl \-s \-t \-v" -compact -offset 14n
.It Li \&.Fl
.Fl
.It Li \&.Fl cfv
.Fl cfv
.It Li \&.Fl cfv\ .
.Fl cfv .
.It Li \&.Fl s v t
.Fl s v t
.It Li \&.Fl -\ ,
.Fl - ,
.It Li \&.Fl xyz\ )\ ,
.Fl xyz ) ,
.El
.Pp
The
.Ql \&.Fl
macro without any arguments results
in a dash representing \fIstdin\fP/\fIstdout\fP.
Note that giving
.Ql \&.Fl
a single dash, will result in two dashes.
The
.Ql \&.Fl
macro is parsed and is callable.
.Ss Functions (library routines)
The .Fn macro is modeled on ANSI C conventions.
.Bd -literal
Usage: .Fn [type] function [[type] parameters ... \*(Pu]
.Ed
.Bl -tag -width "\&.Fn _int align_ _const * char *sptrsxx" -compact
.It Li "\&.Fn getchar"
.Fn getchar
.It Li "\&.Fn strlen ) ,"
.Fn strlen ) ,
.It Li \&.Fn "\\*qint align\\*q" "\\*qconst * char *sptrs\\*q" ,
.Fn "int align" "const * char *sptrs" ,
.El
.Pp
It is an error to call
.Ql \&.Fn
without any arguments.
The
.Ql \&.Fn
macro
is parsed and is callable,
note that any call to another macro signals the end of
the
.Ql \&.Fn
call (it will close-parenthesis at that point).
.Pp
For functions that have more than eight parameters (and this
is rare), the
macros
.Ql \&.Fo
(function open)
and
.Ql \&.Fc
(function close)
may be used with
.Ql \&.Fa
(function argument)
to get around the limitation.
For example:
.Bd -literal -offset indent
\&.Fo "int res_mkquery"
\&.Fa "int op"
\&.Fa "char *dname"
\&.Fa "int class"
\&.Fa "int type"
\&.Fa "char *data"
\&.Fa "int datalen"
\&.Fa "struct rrec *newrr"
\&.Fa "char *buf"
\&.Fa "int buflen"
\&.Fc
.Ed
.Pp
Produces:
.Bd -filled -offset indent
.Fo "int res_mkquery"
.Fa "int op"
.Fa "char *dname"
.Fa "int class"
.Fa "int type"
.Fa "char *data"
.Fa "int datalen"
.Fa "struct rrec *newrr"
.Fa "char *buf"
.Fa "int buflen"
.Fc
.Ed
.Pp
The
.Ql \&.Fo
and
.Ql \&.Fc
macros are parsed and are callable.
In the
.Sx SYNOPSIS
section, the function will always begin at
the beginning of line.
If there is more than one function
presented in the
.Sx SYNOPSIS
section and a function type has not been
given, a line break will occur, leaving a nice vertical space
between the current function name and the one prior.
At the moment,
.Ql \&.Fn
does not check its word boundaries
against troff line lengths and may split across a newline
ungracefully.
This will be fixed in the near future.
.Ss Function Type
This macro is intended for the
.Sx SYNOPSIS
section.
It may be used
anywhere else in the man page without problems, but its main purpose
is to present the function type in kernel normal form for the
.Sx SYNOPSIS
of sections two and three
(it causes a line break allowing the function name to appear
on the next line).
.Pp
.Dl Usage: .Ft type ... \*(Pu
.Bl -tag -width "\&.Ft struct stat" -offset 14n -compact
.It Li \&.Ft struct stat
.Ft struct stat
.El
.Pp
The
.Ql \&.Ft
request is not callable by other macros.
.Ss Interactive Commands
The
.Ql \&.Ic
macro designates an interactive or internal command.
.Pp
.Dl Usage: .Ic argument ... \*(Pu
.Bl -tag -width "\&.Ic setenv , unsetenvxx" -compact -offset 14n
.It Li \&.Ic :wq
.Ic :wq
.It Li \&.Ic do while {...}
.Ic do while {...}
.It Li \&.Ic setenv\ , unsetenv
.Ic setenv , unsetenv
.El
.Pp
It is an error to call
.Ql \&.Ic
without arguments.
The
.Ql \&.Ic
macro is parsed and is callable.
.Ss Name Macro
The
.Ql \&.Nm
macro is used for the document title or subject name.
It has the peculiarity of remembering the first
argument it was called with, which should
always be the subject name of the page.
When called without
arguments,
.Ql \&.Nm
regurgitates this initial name for the sole purpose
of making less work for the author.
Note:
a section two
or three document function name is addressed with the
.Ql \&.Nm
in the
.Sx NAME
section, and with
.Ql \&.Fn
in the
.Sx SYNOPSIS
and remaining sections.
For interactive commands, such as the
.Ql while
command keyword in
.Xr csh 1 ,
the
.Ql \&.Ic
macro should be used.
While the
.Ql \&.Ic
is nearly identical
to
.Ql \&.Nm ,
it can not recall the first argument it was invoked with.
.Pp
.Dl Usage: .Nm argument ... \*(Pu
.Bl -tag -width "\&.Nm mdoc.sample" -compact -offset 14n
.It Li \&.Nm mdoc.sample
.Nm mdoc.sample
.It Li \&.Nm \e-mdoc
.Nm \-mdoc .
.It Li \&.Nm foo\ )\ )\ ,
.Nm foo ) ) ,
.It Li \&.Nm
.Nm
.El
.Pp
The
.Ql \&.Nm
macro is parsed and is callable.
.Ss Options
The
.Ql \&.Op
macro
places option brackets around the any remaining arguments on the command
line, and places any
trailing punctuation outside the brackets.
The macros
.Ql \&.Oc
and
.Ql \&.Oo
may be used across one or more lines.
.Pp
.Dl Usage: .Op options ... \*(Pu
.Bl -tag -width "\&.Op Fl c Ar objfil Op Ar corfil ," -compact -offset indent
.It Li \&.Op
.Op
.It Li ".Op Fl k"
.Op Fl k
.It Li ".Op Fl k ) ."
.Op Fl k ) .
.It Li ".Op Fl k Ar kookfile"
.Op Fl k Ar kookfile
.It Li ".Op Fl k Ar kookfile ,"
.Op Fl k Ar kookfile ,
.It Li ".Op Ar objfil Op Ar corfil"
.Op Ar objfil Op Ar corfil
.It Li ".Op Fl c Ar objfil Op Ar corfil ,"
.Op Fl c Ar objfil Op Ar corfil ,
.It Li \&.Op word1 word2
.Op word1 word2
.El
.Pp
The
.Ql \&.Oc
and
.Ql \&.Oo
macros:
.Bd -literal -offset indent
\&.Oo
\&.Op \&Fl k \&Ar kilobytes
\&.Op \&Fl i \&Ar interval
\&.Op \&Fl c \&Ar count
\&.Oc
.Ed
.Pp
Produce:
.Oo
.Op Fl k Ar kilobytes
.Op Fl i Ar interval
.Op Fl c Ar count
.Oc
.Pp
The macros
.Ql \&.Op ,
.Ql \&.Oc
and
.Ql \&.Oo
are parsed and are callable.
.Ss Pathnames
The
.Ql \&.Pa
macro formats pathnames or filenames.
.Pp
.Dl Usage: .Pa pathname \*(Pu
.Bl -tag -width "\&.Pa /tmp/fooXXXXX ) ." -compact -offset 14n
.It Li \&.Pa /usr/share
.Pa /usr/share
.It Li \&.Pa /tmp/fooXXXXX\ )\ .
.Pa /tmp/fooXXXXX ) .
.El
.Pp
The
.Ql \&.Pa
macro is parsed and is callable.
.Ss Variables
Generic variable reference:
.Pp
.Dl Usage: .Va variable ... \*(Pu
.Bl -tag -width "\&.Va char s ] ) ) ," -compact -offset 14n
.It Li \&.Va count
.Va count
.It Li \&.Va settimer ,
.Va settimer ,
.It Li \&.Va int\ *prt\ )\ :
.Va int\ *prt ) :
.It Li \&.Va char\ s\ ]\ )\ )\ ,
.Va char\ s ] ) ) ,
.El
.Pp
It is an error to call
.Ql \&.Va
without any arguments.
The
.Ql \&.Va
macro is parsed and is callable.
.Ss Manual Page Cross References
The
.Ql \&.Xr
macro expects the first argument to be
a manual page name, and the second argument, if it exists,
to be either a section page number or punctuation.
Any
remaining arguments are assumed to be punctuation.
.Pp
.Dl Usage: .Xr man_page [1,...,8] \*(Pu
.Bl -tag -width "\&.Xr mdoc 7 ) ) ," -compact -offset 14n
.It Li \&.Xr mdoc
.Xr mdoc
.It Li \&.Xr mdoc\ ,
.Xr mdoc ,
.It Li \&.Xr mdoc 7
.Xr mdoc 7
.It Li \&.Xr mdoc 7\ )\ )\ ,
.Xr mdoc 7 ) ) ,
.El
.Pp
The
.Ql \&.Xr
macro is parsed and is callable.
It is an error to call
.Ql \&.Xr
without
any arguments.
.Sh GENERAL TEXT DOMAIN
.Ss AT&T Macro
.Bd -literal -offset indent -compact
Usage: .At [v6 | v7 | 32v | V.1 | V.4] ... \*(Pu
.Ed
.Bl -tag -width "\&.At v6 ) ," -compact -offset 14n
.It Li ".At"
.At
.It Li ".At v6 ."
.At v6 .
.El
.Pp
The
.Ql \&.At
macro is
.Em not
parsed and
.Em not
callable
It accepts at most two arguments.
.Ss BSD Macro
.Dl Usage: .Bx [Version/release] ... \*(Pu
.Bl -tag -width "\&.Bx 4.3 ) ," -compact -offset 14n
.It Li ".Bx"
.Bx
.It Li ".Bx 4.3 ."
.Bx 4.3 .
.El
.Pp
The
.Ql \&.Bx
macro is parsed and is callable.
.Ss FreeBSD Macro
.Bd -literal -offset indent -compact
Usage: .Fx Version.release ... \*(Pu
.Ed
.Bl -tag -width "\&.Fx 2.2 ) ," -compact -offset 14n
.It Li ".Fx 2.2 ."
.Fx 2.2 .
.El
.Pp
The
.Ql \&.Fx
macro is
.Em not
parsed and
.Em not
callable
It accepts at most two arguments.
.Ss UNIX Macro
.Dl Usage: .Ux ... \*(Pu
.Bl -tag -width "\&.Ux 4.3 ) ," -compact -offset 14n
.It Li ".Ux"
.Ux
.El
.Pp
The
.Ql \&.Ux
macro is parsed and is callable.
.Ss Enclosure and Quoting Macros
The concept of enclosure is similar to quoting.
The object being to enclose one or more strings between
a pair of characters like quotes or parentheses.
The terms quoting and enclosure are used
interchangeably throughout this document.
Most of the
one line enclosure macros end
in small letter
.Ql q
to give a hint of quoting, but there are a few irregularities.
For each enclosure macro
there is also a pair of open and close macros which end
in small letters
.Ql o
and
.Ql c
respectively.
These can be used across one or more lines of text
and while they have nesting limitations, the one line quote macros
can be used inside
of them.
.Pp
.ne 5
.Bd -filled -offset indent
.Bl -column "quote " "close " "open " "Enclose Stringx(in XX) " XXstringXX
.Em " Quote	 Close	 Open	Function	Result"
\&.Aq	.Ac	.Ao	Angle Bracket Enclosure	<string>
\&.Bq	.Bc	.Bo	Bracket Enclosure	[string]
\&.Dq	.Dc	.Do	Double Quote	``string''
	.Ec	.Eo	Enclose String (in XX)	XXstringXX
\&.Pq	.Pc	.Po	Parenthesis Enclosure	(string)
\&.Ql			Quoted Literal	`st' or string
\&.Qq	.Qc	.Qo	Straight Double Quote	"string"
\&.Sq	.Sc	.So	Single Quote	`string'
.El
.Ed
.Pp
Except for the irregular macros noted below, all
of the quoting macros are parsed and callable.
All handle punctuation properly, as long as it
is presented one character at a time and separated by spaces.
The quoting macros examine opening and closing punctuation
to determine whether it comes before or after the
enclosing string
This makes some nesting possible.
.Bl -tag -width xxx,xxxx
.It Li \&.Ec , \&.Eo
These macros expect the first argument to be the
opening and closing strings respectively.
.It Li \&.Ql
The quoted literal macro behaves differently for
.Xr troff
than
.Xr nroff .
If formatted with
.Xr nroff ,
a quoted literal is always quoted.
If formatted with
troff, an item is quoted only if the width
of the item is less than three constant width characters.
This is to make short strings more visible where the font change
to literal (constant width) is less noticeable.
.It Li \&.Pf
The prefix macro is not callable, but it is parsed:
.Bl -tag -width "(namexx" -offset indent
.It Li ".Pf ( Fa name2"
becomes
.Pf ( Fa name2 .
.El
.Pp
The
.Ql \&.Ns
(no space) macro performs the analogous suffix function.
.El
.Pp
.ne 4
Examples of quoting:
.Bl -tag -width "\&.Aq Pa ctype.h ) ,xxxxxxxx" -compact -offset indent
.It Li \&.Aq
.Aq
.It Li \&.Aq \&Ar ctype.h\ )\ ,
.Aq Ar ctype.h ) ,
.It Li \&.Bq
.Bq
.It Li \&.Bq \&Em Greek \&, French \&.
.Bq Em Greek , French .
.It Li \&.Dq
.Dq
.It Li ".Dq string abc ."
.Dq string abc .
.It Li ".Dq \'^[A-Z]\'"
.Dq \'^[A-Z]\'
.It Li "\&.Ql man mdoc"
.Ql man mdoc
.It Li \&.Qq
.Qq
.It Li "\&.Qq string ) ,"
.Qq string ) ,
.It Li "\&.Qq string Ns ),"
.Qq string Ns ),
.It Li \&.Sq
.Sq
.It Li "\&.Sq string
.Sq string
.El
.Pp
For a good example of nested enclosure macros, see the
.Ql \&.Op
option macro.
It was created from the same
underlying enclosure macros as those presented in the list
above.
The
.Ql \&.Xo
and
.Ql \&.Xc
extended argument list macros
were also built from the same underlying routines and are a good
example of
.Nm \-mdoc
macro usage at its worst.
.Ss No\-Op or Normal Text Macro
The macro
.Ql \&.No
is
a hack for words in a macro command line which should
.Em not
be formatted and follows the conventional syntax
for content macros.
.Ss No Space Macro
The
.Ql \&.Ns
macro eliminates unwanted spaces in between macro requests.
It is useful for old style argument lists where there is no space
between the flag and argument:
.Bl -tag -width "\&.Op Fl I Ns Ar directoryxx" -offset indent
.It Li ".Op Fl I Ns Ar directory"
produces
.Op Fl I Ns Ar directory
.El
.Pp
Note: the
.Ql \&.Ns
macro always invokes the
.Ql \&.No
macro after eliminating the space unless another macro name
follows it.
The macro
.Ql \&.Ns
is parsed and is callable.
.Ss Section Cross References
The
.Ql \&.Sx
macro designates a reference to a section header
within the same document.
It is parsed and is callable.
.Pp
.Bl -tag -width "Li \&.Sx FILES" -offset 14n
.It Li \&.Sx FILES
.Sx FILES
.El
.Ss References and Citations
The following macros make a modest attempt to handle references.
At best, the macros make it convenient to manually drop in a subset of
refer style references.
.Pp
.Bl -tag -width 6n -offset indent -compact
.It Li ".Rs"
Reference Start.
Causes a line break and begins collection
of reference information until the
reference end macro is read.
.It Li ".Re"
Reference End.
The reference is printed.
.It Li ".%A"
Reference author name, one name per invocation.
.It Li ".%B"
Book title.
.It Li ".\&%C"
City/place.
.It Li ".\&%D"
Date.
.It Li ".%J"
Journal name.
.It Li ".%N"
Issue number.
.It Li ".%O"
Optional information.
.It Li ".%P"
Page number.
.It Li ".%R"
Report name.
.It Li ".%T"
Title of article.
.It Li ".%V"
Volume(s).
.El
.Pp
The macros beginning with
.Ql %
are not callable, and are parsed only for the trade name macro which
returns to its caller.
(And not very predictably at the moment either.)
The purpose is to allow trade names
to be pretty printed in
.Xr troff Ns / Ns Xr ditroff
output.
.Ss Return Values
The
.Ql \&.Rv
macro generates text for use in the
.Sx RETURN VALUE
section.
.Pp
.Dl Usage: .Rv [-std function]
.Pp
.Ql \&.Rv -std atexit
will generate the following text:
.Pp
.\" fake section 3 to avoid error message from Rv
.\".ds cH 3
.ds section 3
.Rv -std atexit
.\" and back to 7 again
.\".ds cH 7
.ds section 7
.Pp
The
.Fl std
option is valid only for manual page sections 2 and 3.
.Ss Trade Names (or Acronyms and Type Names)
The trade name macro is generally a small caps macro for
all uppercase words longer than two characters.
.Pp
.Dl Usage: .Tn symbol ... \*(Pu
.Bl -tag -width "\&.Tn ASCII" -compact -offset 14n
.It Li \&.Tn DEC
.Tn DEC
.It Li \&.Tn ASCII
.Tn ASCII
.El
.Pp
The
.Ql \&.Tn
macro
is parsed and is callable by other macros.
.Ss Extended  Arguments
The
.Ql \&.Xo
and
.Ql \&.Xc
macros allow one to extend an argument list
on a macro boundary.
Argument lists cannot
be extended within a macro
which expects all of its arguments on one line such
as
.Ql \&.Op .
.Pp
Here is an example of
.Ql \&.Xo
using the space mode macro to turn spacing off:
.Bd -literal -offset indent
\&.Sm off
\&.It Xo Sy I Ar operation
\&.No \een Ar count No \een
\&.Xc
\&.Sm on
.Ed
.Pp
Produces
.Bd -filled -offset indent
.Bl -tag -width flag -compact
.Sm off
.It Xo Sy I Ar operation
.No \en Ar count No \en
.Xc
.Sm on
.El
.Ed
.Pp
Another one:
.Bd -literal -offset indent
\&.Sm off
\&.It Cm S No \&/ Ar old_pattern Xo
\&.No \&/ Ar new_pattern
\&.No \&/ Op Cm g
\&.Xc
\&.Sm on
.Ed
.Pp
Produces
.Bd -filled -offset indent
.Bl -tag -width flag -compact
.Sm off
.It Cm S No \&/ Ar old_pattern Xo
.No \&/ Ar new_pattern
.No \&/ Op Cm g
.Xc
.Sm on
.El
.Ed
.Pp
Another example of
.Ql \&.Xo
and using enclosure macros:
Test the value of a variable.
.Bd -literal -offset indent
\&.It Xo
\&.Ic .ifndef
\&.Oo \e&! Oc Ns Ar variable
\&.Op Ar operator variable ...
\&.Xc
.Ed
.Pp
Produces
.Bd -filled -offset indent
.Bl -tag -width flag -compact
.It Xo
.Ic .ifndef
.Oo \&! Oc Ns Ar variable
.Op Ar operator variable ...
.Xc
.El
.Ed
.Pp
All of the above examples have used the
.Ql \&.Xo
macro on the argument list of the
.Ql \&.It
(list-item)
macro.
The extend macros are not used very often, and when they are
it is usually to extend the list-item argument list.
Unfortunately, this is also where the extend macros are the
most finicky.
In the first two examples, spacing was turned off;
in the third, spacing was desired in part of the output but
not all of it.
To make these macros work in this situation make sure
the
.Ql \&.Xo
and
.Ql \&.Xc
macros are placed as shown in the third example.
If the
.Ql \&.Xo
macro is not alone on the
.Ql \&.It
argument list, spacing will be unpredictable.
The
.Ql \&.Ns
(no space macro)
must not occur as the first or last macro on a line
in this situation.
Out of 900 manual pages (about 1500 actual pages)
currently released with
.Bx
only fifteen use the
.Ql \&.Xo
macro.
.Sh PAGE STRUCTURE DOMAIN
.Ss Section Headers
The first three
.Ql \&.Sh
section header macros
list below are required in every
man page.
The remaining section headers
are recommended at the discretion of the author
writing the manual page.
The
.Ql \&.Sh
macro can take up to nine arguments.
It is parsed and but is not callable.
.Bl -tag -width "\&.Sh SYNOPSIS"
.It \&.Sh NAME
The
.Ql \&.Sh NAME
macro is mandatory.
If not specified,
the headers, footers and page layout defaults
will not be set and things will be rather unpleasant.
The
.Sx NAME
section consists of at least three items.
The first is the
.Ql \&.Nm
name macro naming the subject of the man page.
The second is the Name Description macro,
.Ql \&.Nd ,
which separates the subject
name from the third item, which is the description.
The
description should be the most terse and lucid possible,
as the space available is small.
.It \&.Sh SYNOPSIS
The
.Sx SYNOPSIS
section describes the typical usage of the
subject of a man page.
The macros required
are either
.Ql ".Nm" ,
.Ql ".Cd" ,
.Ql ".Fn" ,
(and possibly
.Ql ".Fo" ,
.Ql ".Fc" ,
.Ql ".Fd" ,
.Ql ".Ft"
macros).
The function name
macro
.Ql ".Fn"
is required
for manual page sections 2 and 3, the command and general
name macro
.Ql \&.Nm
is required for sections 1, 5, 6, 7, 8.
Section 4 manuals require a
.Ql ".Nm" ,
.Ql ".Fd"
or a
.Ql ".Cd"
configuration device usage macro.
Several other macros may be necessary to produce
the synopsis line as shown below:
.El
.Pp
.Bd -filled -offset indent
.Nm cat
.Op Fl benstuv
.Op Fl
.Ar
.Ed
.Pp
The following macros were used:
.Pp
.Dl \&.Nm cat
.Dl \&.Op \&Fl benstuv
.Dl \&.Op \&Fl
.Dl \&.Ar
.Pp
.Sy Note :
The macros
.Ql \&.Op ,
.Ql \&.Fl ,
and
.Ql \&.Ar
recognize the pipe bar character
.Ql \*(Ba ,
so a command line such as:
.Pp
.Dl ".Op Fl a | Fl b"
.Pp
will not go orbital.
.Xr Troff
normally interprets a \*(Ba as a special operator.
See
.Sx PREDEFINED STRINGS
for a usable \*(Ba
character in other situations.
.Bl -tag
.It \&.Sh DESCRIPTION
In most cases the first text in the
.Sx DESCRIPTION
section
is a brief paragraph on the command, function or file,
followed by a lexical list of options and respective
explanations.
To create such a list, the
.Ql \&.Bl
begin-list,
.Ql \&.It
list-item and
.Ql \&.El
end-list
macros are used (see
.Sx Lists and Columns
below).
.El
.Pp
The following
.Ql \&.Sh
section headers are part of the
preferred manual page layout and must be used appropriately
to maintain consistency.
They are listed in the order
in which they would be used.
.Bl -tag -width SYNOPSIS
.It \&.Sh ENVIRONMENT
The
.Sx ENVIRONMENT
section should reveal any related
environment
variables and clues to their behavior and/or usage.
.It \&.Sh EXAMPLES
There are several ways to create examples.
See
the
.Sx EXAMPLES
section below
for details.
.It \&.Sh FILES
Files which are used or created by the man page subject
should be listed via the
.Ql \&.Pa
macro in the
.Sx FILES
section.
.It \&.Sh SEE ALSO
References to other material on the man page topic and
cross references to other relevant man pages should
be placed in the
.Sx SEE ALSO
section.
Cross references
are specified using the
.Ql \&.Xr
macro.
Cross references in the
.Sx SEE ALSO
section should be sorted by section number, and then
placed in alphabetical order and comma separated.  For example:
.Pp
.Xr ls 1 ,
.Xr ps 1 ,
.Xr group 5 ,
.Xr passwd 5 .
.Pp
At this time
.Xr refer 1
style references are not accommodated.
.It \&.Sh CONFORMING TO
If the command, library function or file adheres to a
specific implementation such as
.St -p1003.2
or
.St -ansiC
this should be noted here.
If the
command does not adhere to any standard, its history
should be noted in the
.Sx HISTORY
section.
.It \&.Sh HISTORY
Any command which does not adhere to any specific standards
should be outlined historically in this section.
.It \&.Sh AUTHORS
Credits, if need be, should be placed here.
.It \&.Sh DIAGNOSTICS
Diagnostics from a command should be placed in this section.
.It \&.Sh ERRORS
Specific error handling, especially from library functions
(man page sections 2 and 3) should go here.
The
.Ql \&.Er
macro is used to specify an errno.
.It \&.Sh BUGS
Blatant problems with the topic go here...
.El
.Pp
User specified
.Ql \&.Sh
sections may be added,
for example, this section was set with:
.Bd -literal -offset 14n
\&.Sh PAGE STRUCTURE DOMAIN
.Ed
.Ss Paragraphs and Line Spacing.
.Bl -tag -width 6n
.It \&.Pp
The
.Ql \&.Pp
paragraph command may
be used to specify a line space where necessary.
The macro is not necessary after a
.Ql \&.Sh
or
.Ql \&.Ss
macro or before
a
.Ql \&.Bl
macro.
(The
.Ql \&.Bl
macro asserts a vertical distance unless the -compact flag is given).
.El
.\" This worked with version one, need to redo for version three
.\" .Pp
.\" .Ds I
.\" .Cw (ax+bx+c) \ is\ produced\ by\ \&
.\" .\".Cw (ax+bx+c) \&.Va_by_) \&_and_\& \&[?/]m_b1_e1_f1[?/]\&
.\" .Cl Cx \t\t
.\" .Li \&.Cx\ (
.\" .Cx
.\" .Cl Cx \t\t
.\" .Li \&.Va ax
.\" .Cx
.\" .Cl Cx \t\t
.\" .Li \&.Sy \+
.\" .Cx
.\" .Cl Cx \&(\&
.\" .Va ax
.\" .Cx +
.\" .Va by
.\" .Cx +
.\" .Va c )
.\" .Cx \t
.\" .Em is produced by
.\" .Cx \t
.\" .Li \&.Va by
.\" .Cx
.\" .Cl Cx \t\t
.\" .Li \&.Sy \+
.\" .Cx
.\" .Cl Cx \t\t
.\" .Li \&.Va c )
.\" .Cx
.\" .Cl Cx \t\t
.\" .Li \&.Cx
.\" .Cx
.\" .Cw
.\" .De
.\" .Pp
.\" This example shows the same equation in a different format.
.\" The spaces
.\" around the
.\" .Li \&+
.\" signs were forced with
.\" .Li \e :
.\" .Pp
.\" .Ds I
.\" .Cw (ax\ +\ bx\ +\ c) \ is\ produced\ by\ \&
.\" .\".Cw (ax+bx+c) \&.Va_by_) \&_and_\& \&[?/]m_b1_e1_f1[?/]\&
.\" .Cl Cx \t\t
.\" .Li \&.Cx\ (
.\" .Cx
.\" .Cl Cx \t\t
.\" .Li \&.Va a
.\" .Cx
.\" .Cl Cx \t\t
.\" .Li \&.Sy x
.\" .Cx
.\" .Cl Cx \t\t
.\" .Li \&.Cx \e\ +\e\ \e&
.\" .Cx
.\" .Cl Cx \&(\&
.\" .Va a
.\" .Sy x
.\" .Cx \ +\ \&
.\" .Va b
.\" .Sy y
.\" .Cx \ +\ \&
.\" .Va c )
.\" .Cx \t
.\" .Em is produced by
.\" .Cl Cx \t\t
.\" .Li \&.Va b
.\" .Cx
.\" .Cl Cx \t\t
.\" .Li \&.Sy y
.\" .Cx
.\" .Cl Cx \t\t
.\" .Li \&.Cx \e\ +\e\ \e&
.\" .Cx
.\" .Cl Cx \t\t
.\" .Li \&.Va c )
.\" .Cx
.\" .Cl Cx \t\t
.\" .Li \&.Cx
.\" .Cx
.\" .Cw
.\" .De
.\" .Pp
.\" The incantation below was
.\" lifted from the
.\" .Xr adb 1
.\" manual page:
.\" .Pp
.\" .Ds I
.\" .Cw \&[?/]m_b1_e1_f1[?/]\& is\ produced\ by
.\" .Cl Cx \t\t
.\" .Li \&.Cx Op Sy ?/
.\" .Cx
.\" .Cl Cx \t\t
.\" .Li \&.Nm m
.\" .Cx
.\" .Cl Cx Op Sy ?/
.\" .Nm m
.\" .Ad \ b1 e1 f1
.\" .Op Sy ?/
.\" .Cx \t
.\" .Em is produced by
.\" .Cx \t
.\" .Li \&.Ar \e\ b1 e1 f1
.\" .Cx
.\" .Cl Cx \t\t
.\" .Li \&.Op Sy ?/
.\" .Cx
.\" .Cl Cx \t\t
.\" .Li \&.Cx
.\" .Cx
.\" .Cw
.\" .De
.\" .Pp
.Ss Keeps
The only keep that is implemented at this time is for words.
The macros are
.Ql \&.Bk
(begin-keep)
and
.Ql \&.Ek
(end-keep).
The only option that
.Ql \&.Bk
accepts is
.Fl words
and is useful for preventing line breaks in the middle of options.
In the example for the make command-line arguments (see
.Sx What's in a name ) ,
the keep prevented
.Xr nroff
from placing up the
flag and the argument
on separate lines.
(Actually, the option macro used to prevent this from occurring,
but was dropped when the decision (religious) was made to force
right justified margins in
.Xr troff
as options in general look atrocious when spread across a sparse
line.
More work needs to be done with the keep macros, a
.Fl line
option needs to be added.)
.Ss Examples and Displays
There are five types of displays, a quickie one line indented display
.Ql \&.D1 ,
a quickie one line literal display
.Ql \&.Dl ,
and a block literal, block filled and block ragged which use
the
.Ql \&.Bd
begin-display
and
.Ql \&.Ed
end-display macros.
.Pp
.Bl -tag -width \&.Dlxx
.It Li \&.D1
(D-one) Display one line of indented text.
This macro is parsed, but it is not callable.
.Pp
.Dl Fl ldghfstru
.Pp
The above was produced by:
.Li \&.Dl Fl ldghfstru .
.It Li \&.Dl
(D-ell)
Display one line of indented
.Em literal
text.
The
.Ql \&.Dl
example macro has been used throughout this
file.
It allows
the indent (display) of one line of text.
Its default font is set to
constant width (literal) however
it is parsed and will recognized other macros.
It is not callable however.
.Pp
.Dl % ls -ldg /usr/local/bin
.Pp
The above was produced by
.Li \&.Dl % ls -ldg /usr/local/bin .
.It Li \&.Bd
Begin-display.
The
.Ql \&.Bd
display must be ended with the
.Ql \&.Ed
macro.
Displays may be nested within displays and
lists.
.Ql \&.Bd
has the following syntax:
.Pp
.Dl ".Bd display-type [-offset offset_value] [-compact]"
.Pp
The display-type must be one of the following four types and
may have an offset specifier for indentation:
.Ql \&.Bd .
.El
.Pp
.Bl -tag -width "file file_name  " -compact
.It Fl ragged
Display a block of text as typed,
right (and left) margin edges are left ragged.
.It Fl filled
Display a filled (formatted) block.
The block of text is formatted (the edges are filled \-
not left unjustified).
.It Fl literal
Display a literal block, useful for source code or
simple tabbed or spaced text.
.It Fl file Ar file_name
The filename following the
.Fl file
flag is read and displayed.
Literal mode is
asserted and tabs are set at 8 constant width character
intervals, however any
.Xr troff/ Ns Nm \-mdoc
commands in file will be processed.
.It Fl offset Ar string
If
.Fl offset
is specified with one of the following strings, the string
is interpreted to indicate the level of indentation for the
forthcoming block of text:
.Pp
.Bl -tag -width "indent-two" -compact
.It Ar left
Align block on the current left margin,
this is the default mode of
.Ql \&.Bd .
.It Ar center
Supposedly center the block.
At this time
unfortunately, the block merely gets
left aligned about an imaginary center margin.
.It Ar indent
Indents by one default indent value or tab.
The default
indent value is also used for the
.Ql \&.D1
display so one is guaranteed the two types of displays
will line up.
This indent is normally set to 6n or about two
thirds of an inch (six constant width characters).
.It Ar indent-two
Indents two times the default indent value.
.It Ar right
This
.Em left
aligns the block about two inches from
the right side of the page.
This macro needs
work and perhaps may never do the right thing by
.Xr troff .
.El
.It ".Ed"
End-display.
.El
.Ss Font Modes
There are five macros for changing the appearance of the manual page text:
.Bl -tag -width \&.Emxx
.It \&.Em
Text may be stressed or emphasized with the
.Ql \&.Em
macro.
The usual font for emphasis is italic.
.Pp
.Dl Usage: .Em argument ... \*(Pu
.Bl -tag -width "\&.Em vide infra ) ) ," -compact -offset 14n
.It Li ".Em does not"
.Em does not
.It Li ".Em exceed 1024 ."
.Em exceed 1024 .
.It Li ".Em vide infra ) ) ,"
.Em vide infra ) ) ,
.El
.Pp
The
.Ql \&.Em
macro is parsed and is callable.
It is an error to call
.Ql \&.Em
without arguments.
.It \&.Li
The
.Ql \&.Li
literal macro may be used for special characters,
variable constants, anything which should be displayed as it
would be typed.
.Pp
.Dl Usage: .Li argument ... \*(Pu
.Bl -tag -width "\&.Li cntrl-D ) ,"  -compact -offset 14n
.It Li \&.Li \een
.Li \en
.It Li \&.Li M1 M2 M3\ ;
.Li M1 M2 M3 ;
.It Li \&.Li cntrl-D\ )\ ,
.Li cntrl-D ) ,
.It Li \&.Li 1024\ ...
.Li 1024 ...
.El
.Pp
The
.Ql \&.Li
macro is parsed and is callable.
.It \&.Sy
The symbolic emphasis macro is generally a boldface macro in
either the symbolic sense or the traditional English usage.
.Pp
.Dl Usage: .Sy symbol ... \*(Pu
.Bl -tag -width "\&.Sy Important Noticex" -compact -offset 14n
.It Li \&.Sy Important Notice
.Sy Important Notice
.Pp
The
.Ql \&.Sy
macro is parsed and is callable.
Arguments to
.Ql \&.Sy
may be quoted.
.El
.It Li \&.Bf
Begin font mode.
The
.Ql \&.Bf
font mode must be ended with the
.Ql \&.Ef
macro.
Font modes may be nested within other font modes.
.Ql \&.Bf
has the following syntax:
.Pp
.Dl ".Bf font-mode"
.Pp
The font-mode must be one of the following three types:
.Ql \&.Bf .
.Pp
.Bl -tag -width "file file_name  " -compact
.It Sy \&Em | Fl emphasis
Same as if the
.Ql \&.Em
macro was used for the entire block of text.
.It Sy \&Li | Fl literal
Same as if the
.Ql \&.Li
macro was used for the entire block of text.
.It Sy \&Sy | Fl symbolic
Same as if the
.Ql \&.Sy
macro was used for the entire block of text.
.El
.It ".Ef"
End font mode.
.El
.Ss Tagged Lists and Columns
There are several types of lists which may be initiated with the
.Ql ".Bl"
begin-list macro.
Items within the list
are specified with the
.Ql ".It"
item macro and
each list must end with the
.Ql ".El"
macro.
Lists may be nested within themselves and within displays.
Columns may be used inside of lists, but lists are unproven
inside of columns.
.Pp
In addition, several list attributes may be specified such as
the width of a tag, the list offset, and compactness
(blank lines between items allowed or disallowed).
Most of this document has been formatted with a tag style list
.Pq Fl tag .
For a change of pace, the list-type used to present the list-types
is an over-hanging list
.Pq Fl ohang .
This type of list is quite popular with
.Tn TeX
users, but might look a bit funny after having read many pages of
tagged lists.
The following list types are accepted by
.Ql ".Bl" :
.Pp
.Bl -ohang -compact
.It Fl bullet
.It Fl item
.It Fl enum
These three are the simplest types of lists.
Once the
.Ql ".Bl"
macro has been given, items in the list are merely
indicated by a line consisting solely of the
.Ql ".It"
macro.
For example, the source text for a simple enumerated list
would look like:
.Bd -literal -offset indent-two
\&.Bl -enum -compact
\&.It
\&Item one goes here.
\&.It
\&And item two here.
\&.It
\&Lastly item three goes here.
\&.El
.Ed
.El
.Pp
The results:
.Pp
.Bl -enum -offset indent-two -compact
.It
Item one goes here.
.It
And item two here.
.It
Lastly item three goes here.
.El
.Pp
A simple bullet list construction:
.Bd -literal -offset indent-two
\&.Bl -bullet -compact
\&.It
\&Bullet one goes here.
\&.It
\&Bullet two here.
\&.El
.Ed
.Pp
Produces:
.Bl -bullet -offset indent-two -compact
.It
Bullet one goes here.
.It
Bullet two here.
.El
.Pp
.Bl -ohang -compact
.It Fl tag
.It Fl diag
.It Fl hang
.It Fl ohang
.It Fl inset
These list-types collect arguments specified with the
.Ql \&.It
macro and create a label which may be
.Em inset
into the forthcoming text,
.Em hanged
from the forthcoming text,
.Em overhanged
from above and not indented or
.Em tagged .
This
list was constructed with the
.Ql \&Fl ohang
list-type.
The
.Ql \&.It
macro is parsed only for the inset, hang
and tag list-types and is not callable.
Here is an example of inset labels:
.El
.Bl -inset -offset indent
.It Em Tag
The tagged list (also called a tagged paragraph) is the
most common type of list used in the Berkeley manuals.
.It Em Diag
Diag lists create section four diagnostic lists
and are similar to inset lists except callable
macros are ignored.
.It Em Hang
Hanged labels are a matter of taste.
.It Em Ohang
Overhanging labels are nice when space is constrained.
.It Em Inset
Inset labels are useful for controlling blocks of
paragraphs and are valuable for converting
.Nm \-mdoc
manuals to other formats.
.El
.Pp
Here is the source text which produced the above example:
.Bd -literal -offset indent
\&.Bl -inset -offset indent
\&.It Em Tag
\&The tagged list (also called a tagged paragraph) is the
\&most common type of list used in the Berkeley manuals.
\&.It Em Diag
\&Diag lists create section four diagnostic lists
\&and are similar to inset lists except callable
\&macros are ignored.
\&.It Em Hang
\&Hanged labels are a matter of taste.
\&.It Em Ohang
\&Overhanging labels are nice when space is constrained.
\&.It Em Inset
\&Inset labels are useful for controlling blocks of
\&paragraphs and are valuable for converting
\&.Nm \-mdoc
\&manuals to other formats.
\&.El
.Ed
.Pp
Here is a hanged list with two items:
.Bl -hang -offset indent
.It Em Hanged
labels appear similar to tagged lists when the
label is smaller than the label width.
.It Em Longer hanged list labels
blend in to the paragraph unlike
tagged paragraph labels.
.El
.Pp
And the unformatted text which created it:
.Bd -literal -offset indent
\&.Bl -hang -offset indent
\&.It Em Hanged
\&labels appear similar to tagged lists when the
\&label is smaller than the label width.
\&.It Em Longer hanged list labels
\&blend in to the paragraph unlike
\&tagged paragraph labels.
\&.El
.Ed
.Pp
The tagged list which follows uses an optional width specifier to control
the width of the tag.
.Pp
.Bl -tag -width "PAGEIN" -compact -offset indent
.It SL
sleep time of the process (seconds blocked)
.It PAGEIN
number of disk
.Tn I/O Ns 's
resulting from references
by the process to pages not loaded in core.
.It UID
numerical user-id of process owner
.It PPID
numerical ID of parent of process process priority
(nonpositive when in noninterruptible wait)
.El
.Pp
The raw text:
.Bd -literal -offset indent
\&.Bl -tag -width "PAGEIN" -compact -offset indent
\&.It SL
\&sleep time of the process (seconds blocked)
\&.It PAGEIN
\&number of disk
\&.Tn I/O Ns 's
\&resulting from references
\&by the process to pages not loaded in core.
\&.It UID
\&numerical user ID of process owner
\&.It PPID
\&numerical ID of parent of process process priority
\&(nonpositive when in noninterruptible wait)
\&.El
.Ed
.Pp
Acceptable width specifiers:
.Bl -tag -width Ar -offset indent
.It Fl width Ar "\&Fl"
sets the width to the default width for a flag.
All callable
macros have a default width value.
The
.Ql \&.Fl ,
value is presently
set to ten constant width characters or about five sixth of
an inch.
.It Fl width Ar "24n"
sets the width to 24 constant width characters or about two
inches.
The
.Ql n
is absolutely necessary for the scaling to work correctly.
.It Fl width Ar "ENAMETOOLONG"
sets width to the constant width length of the
string given.
.It Fl width  Ar "\\*qint mkfifo\\*q"
again, the width is set to the constant width of the string
given.
.El
.Pp
If a width is not specified for the tag list type, the first
time
.Ql \&.It
is invoked, an attempt is made to determine an appropriate
width.
If the first argument to
.Ql ".It"
is a callable macro, the default width for that macro will be used
as if the macro name had been supplied as the width.
However,
if another item in the list is given with a different callable
macro name, a new and nested list is assumed.
.Sh PREDEFINED STRINGS
The following strings are predefined as may be used by
preceding with the troff string interpreting sequence
.Ql \&\e*(xx
where
.Em xx
is the name of the defined string or as
.Ql \&\e*x
where
.Em x
is the name of the string.
The interpreting sequence may be used any where in the text.
.Pp
.Bl -column "String " "Nroff " "Troff " -offset indent
.It Sy "String	Nroff	Troff"
.It Li "<=" Ta \&<\&= Ta \*(<=
.It Li ">=" Ta \&>\&= Ta \*(>=
.It Li "Rq" Ta "''" Ta \*(Rq
.It Li "Lq" Ta "``" Ta \*(Lq
.It Li "ua" Ta ^ Ta \*(ua
.It Li "aa" Ta ' Ta \*(aa
.It Li "ga" Ta \` Ta \*(ga
.\" .It Li "sL" Ta ` Ta \*(sL
.\" .It Li "sR" Ta ' Ta \*(sR
.It Li "q" Ta \&" Ta \*q
.It Li "Pi" Ta pi Ta \*(Pi
.It Li "Ne" Ta != Ta \*(Ne
.It Li "Le" Ta <= Ta \*(Le
.It Li "Ge" Ta >= Ta \*(Ge
.It Li "Lt" Ta < Ta \*(Gt
.It Li "Gt" Ta > Ta \*(Lt
.It Li "Pm" Ta +- Ta \*(Pm
.It Li "If" Ta infinity Ta \*(If
.It Li "Na" Ta \fINaN\fP Ta \*(Na
.It Li "Ba" Ta \fR\&|\fP Ta \*(Ba
.El
.Pp
.Sy Note :
The string named
.Ql q
should be written as
.Ql \e*q
since it is only one char.
.Sh DIAGNOSTICS
The debugging facilities for
.Nm \-mdoc
are limited, but can help detect subtle errors such
as the collision of an argument name with an internal
register or macro name.
(A what?)
A register is an arithmetic storage class for
.Xr troff
with a one or two character name.
All registers internal to
.Nm \-mdoc
for
.Xr troff
and
.Xr ditroff
are two characters and
of the form <upper_case><lower_case> such as
.Ql \&Ar ,
<lower_case><upper_case> as
.Ql \&aR
or
<upper or lower letter><digit> as
.Ql \&C\&1 .
And adding to the muddle,
.Xr troff
has its own internal registers all of which are either
two lowercase characters or a dot plus a letter or metacharacter
character.
In one of the introduction examples, it was shown how to
prevent the interpretation of a macro name with the escape sequence
.Ql \e& .
This is sufficient for the internal register names also.
.Pp
.\" Every callable macro name has a corresponding register
.\" of the same name (<upper_case><lower_case>).
.\" There are also specific registers which have
.\" been used for stacks and arrays and are listed in the
.\" .Sx Appendix .
.\" .Bd -ragged -offset 4n
.\" [A-Z][a-z]	registers corresponding to macro names (example ``Ar'')
.\" [a-z][A-Z]	registers corresponding to macro names (example ``aR'')
.\" C[0-9]		argument types (example C1)
.\" O[0-9]		offset stack (displays)
.\" h[0-9]		horizontal spacing stack (lists)
.\" o[0-9]		offset (stack) (lists)
.\" t[0-9]		tag stack (lists)
.\" v[0-9]		vertical spacing stack (lists)
.\" w[0-9]		width tag/label stack
.\" .Ed
.\" .Pp
If a nonescaped register name is given in the argument list of a request,
unpredictable behavior will occur.
In general, any time huge portions
of text do not appear where expected in the output, or small strings
such as list tags disappear, chances are there is a misunderstanding
about an argument type in the argument list.
Your mother never intended for you to remember this evil stuff - so here
is a way to find out whether or not your arguments are valid: The
.Ql \&.Db
(debug)
macro displays the interpretation of the argument list for most
macros.
Macros such as the
.Ql \&.Pp
(paragraph)
macro do not contain debugging information.
All of the callable macros do,
and it is strongly advised whenever in doubt,
turn on the
.Ql \&.Db
macro.
.Pp
.Dl Usage: \&.Db [on | off]
.Pp
An example of a portion of text with
the debug macro placed above and below an
artificially created problem (a flag argument
.Ql \&aC
which should be
.Ql \e&aC
in order to work):
.Bd -literal -offset indent
\&.Db on
\&.Op Fl aC Ar file )
\&.Db off
.Ed
.Pp
The resulting output:
.Bd -literal -offset indent
DEBUGGING ON
DEBUG(argv) MACRO: `.Op'  Line #: 2
	Argc: 1  Argv: `Fl'  Length: 2
	Space: `'  Class: Executable
	Argc: 2  Argv: `aC'  Length: 2
	Space: `'  Class: Executable
	Argc: 3  Argv: `Ar'  Length: 2
	Space: `'  Class: Executable
	Argc: 4  Argv: `file'  Length: 4
	Space: ` '  Class: String
	Argc: 5  Argv: `)'  Length: 1
	Space: ` '  Class: Closing Punctuation or suffix
	MACRO REQUEST: .Op Fl aC Ar file )
DEBUGGING OFF
.Ed
.Pp
The first line of information tells the name of the calling
macro, here
.Ql \&.Op ,
and the line number it appears on.
If one or more files are involved
(especially if text from another file is included), the line number
may be bogus.
If there is only one file, it should be accurate.
The second line gives the argument count, the argument
.Pq Ql \&Fl
and its length.
If the length of an argument is two characters, the
argument is tested to see if it is executable (unfortunately, any
register which contains a nonzero value appears executable).
The third line gives the space allotted for a class, and the
class type.
The problem here is the argument aC should not be
executable.
The four types of classes are string, executable, closing
punctuation and opening punctuation.
The last line shows the entire
argument list as it was read.
In this next example, the offending
.Ql \&aC
is escaped:
.Bd -literal -offset indent
\&.Db on
\&.Em An escaped \e&aC
\&.Db off
.Ed
.Bd -literal -offset indent
DEBUGGING ON
DEBUG(fargv) MACRO: `.Em'  Line #: 2
	Argc: 1  Argv: `An'  Length: 2
	Space: ` '  Class: String
	Argc: 2  Argv: `escaped'  Length: 7
	Space: ` '  Class: String
	Argc: 3  Argv: `aC'  Length: 2
	Space: ` '  Class: String
	MACRO REQUEST: .Em An escaped &aC
DEBUGGING OFF
.Ed
.Pp
The argument
.Ql \e&aC
shows up with the same length of 2 as the
.Ql \e&
sequence produces a zero width, but a register
named
.Ql \e&aC
was not found and the type classified as string.
.Pp
Other diagnostics consist of usage statements and are self explanatory.
.Sh GROFF, TROFF AND NROFF
The
.Nm \-mdoc
package does not need compatibility mode with
.Xr groff .
.Pp
The package inhibits page breaks, and the headers and footers
which normally occur at those breaks with
.Xr nroff ,
to make the manual more efficient for viewing on-line.
At the moment,
.Xr groff
with
.Fl T Ns Ar ascii
does eject the imaginary remainder of the page at end of file.
The inhibiting of the page breaks makes
.Xr nroff Ns 'd
files unsuitable for hardcopy.
There is a register named
.Ql \&cR
which can be set to zero in the site dependent style file
.Pa /usr/src/share/tmac/doc-nroff
to restore the old style behavior.
.Sh FILES
.Bl -tag -width /usr/share/man0/template.doc -compact
.It Pa /usr/share/tmac/doc.tmac
manual macro package
.It Pa /usr/share/misc/mdoc.template
template for writing a man page
.It Pa /usr/share/examples/mdoc/*
several example man pages
.El
.Sh BUGS
Undesirable hyphenation on the dash of a flag
argument is not yet resolved, and causes
occasional mishaps in the
.Sx DESCRIPTION
section.
(line break on the hyphen).
.Pp
Predefined strings are not declared in documentation.
.Pp
Section 3f has not been added to the header routines.
.Pp
.Ql \&.Nm
font should be changed in
.Sx NAME
section.
.Pp
.Ql \&.Fn
needs to have a check to prevent splitting up
if the line length is too short.
Occasionally it
separates the last parenthesis, and sometimes
looks ridiculous if a line is in fill mode.
.Pp
The method used to prevent header and footer page
breaks (other than the initial header and footer) when using
nroff occasionally places an unsightly partially filled line (blank)
at the would be bottom of the page.
.Pp
The list and display macros to not do any keeps
and certainly should be able to.
.\" Note what happens if the parameter list overlaps a newline
.\" boundary.
.\" to make sure a line boundary is crossed:
.\" .Bd -literal
.\" \&.Fn struct\e\ dictionarytable\e\ *dictionarylookup struct\e\ dictionarytable\e\ *tab[]
.\" .Ed
.\" .Pp
.\" produces, nudge nudge,
.\" .Fn struct\ dictionarytable\ *dictionarylookup char\ *h struct\ dictionarytable\ *tab[] ,
.\" .Fn struct\ dictionarytable\ *dictionarylookup char\ *h struct\ dictionarytable\ *tab[] ,
.\" nudge
.\" .Fn struct\ dictionarytable\ *dictionarylookup char\ *h struct\ dictionarytable\ *tab[] .
.\" .Pp
.\" If double quotes are used, for example:
.\" .Bd -literal
.\" \&.Fn \*qstruct dictionarytable *dictionarylookup\*q \*qchar *h\*q \*qstruct dictionarytable *tab[]\*q
.\" .Ed
.\" .Pp
.\" produces, nudge nudge,
.\" .Fn "struct dictionarytable *dictionarylookup" "char *h" "struct dictionarytable *tab[]" ,
.\" nudge
.\" .Fn "struct dictionarytable *dictionarylookup" "char *h" "struct dictionarytable *tab[]" ,
.\" nudge
.\" .Fn "struct dictionarytable *dictionarylookup" "char *h" "struct dictionarytable *tab[]" .
.\" .Pp
.\" Not a pretty sight...
.\" In a paragraph, a long parameter containing unpaddable spaces as
.\" in the former example will cause
.\" .Xr troff
.\" to break the line and spread
.\" the remaining words out.
.\" The latter example will adjust nicely to
.\" justified margins, but may break in between an argument and its
.\" declaration.
.\" In
.\" .Xr nroff
.\" the right margin adjustment is normally ragged and the problem is
.\" not as severe.
.Sh SEE ALSO
.Xr man 1 ,
.Xr troff 1 ,
.Xr groff_mdoc 7 ,
.Xr mdoc 7
.Sh COLOPHON
This page is part of release 4.00 of the Linux
.Em man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
'\" t
.\" Copyright (C) 2006 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH MQ_OVERVIEW 7 2014-09-21 "Linux" "Linux Programmer's Manual"
.SH NAME
mq_overview \- overview of POSIX message queues
.SH DESCRIPTION
POSIX message queues allow processes to exchange data in
the form of messages.
This API is distinct from that provided by System V message queues
.RB ( msgget (2),
.BR msgsnd (2),
.BR msgrcv (2),
etc.), but provides similar functionality.

Message queues are created and opened using
.BR mq_open (3);
this function returns a
.I message queue descriptor
.RI ( mqd_t ),
which is used to refer to the open message queue in later calls.
Each message queue is identified by a name of the form
.IR /somename ;
that is, a null-terminated string of up to
.BI NAME_MAX
(i.e., 255) characters consisting of an initial slash,
followed by one or more characters, none of which are slashes.
Two processes can operate on the same queue by passing the same name to
.BR mq_open (3).

Messages are transferred to and from a queue using
.BR mq_send (3)
and
.BR mq_receive (3).
When a process has finished using the queue, it closes it using
.BR mq_close (3),
and when the queue is no longer required, it can be deleted using
.BR mq_unlink (3).
Queue attributes can be retrieved and (in some cases) modified using
.BR mq_getattr (3)
and
.BR mq_setattr (3).
A process can request asynchronous notification
of the arrival of a message on a previously empty queue using
.BR mq_notify (3).

A message queue descriptor is a reference to an
.I "open message queue description"
(cf.
.BR open (2)).
After a
.BR fork (2),
a child inherits copies of its parent's message queue descriptors,
and these descriptors refer to the same open message queue descriptions
as the corresponding descriptors in the parent.
Corresponding descriptors in the two processes share the flags
.RI ( mq_flags )
that are associated with the open message queue description.

Each message has an associated
.IR priority ,
and messages are always delivered to the receiving process
highest priority first.
Message priorities range from 0 (low) to
.I sysconf(_SC_MQ_PRIO_MAX)\ -\ 1
(high).
On Linux,
.I sysconf(_SC_MQ_PRIO_MAX)
returns 32768, but POSIX.1-2001 requires only that
an implementation support at least priorities in the range 0 to 31;
some implementations provide only this range.
.PP
The remainder of this section describes some specific details
of the Linux implementation of POSIX message queues.
.SS Library interfaces and system calls
In most cases the
.BR mq_* ()
library interfaces listed above are implemented
on top of underlying system calls of the same name.
Deviations from this scheme are indicated in the following table:
.RS
.TS
lB lB
l l.
Library interface	System call
mq_close(3)	close(2)
mq_getattr(3)	mq_getsetattr(2)
mq_notify(3)	mq_notify(2)
mq_open(3)	mq_open(2)
mq_receive(3)	mq_timedreceive(2)
mq_send(3)	mq_timedsend(2)
mq_setattr(3)	mq_getsetattr(2)
mq_timedreceive(3)	mq_timedreceive(2)
mq_timedsend(3)	mq_timedsend(2)
mq_unlink(3)	mq_unlink(2)
.TE
.RE
.SS Versions
POSIX message queues have been supported on Linux since kernel 2.6.6.
Glibc support has been provided since version 2.3.4.
.SS Kernel configuration
Support for POSIX message queues is configurable via the
.B CONFIG_POSIX_MQUEUE
kernel configuration option.
This option is enabled by default.
.SS Persistence
POSIX message queues have kernel persistence:
if not removed by
.BR mq_unlink (3),
a message queue will exist until the system is shut down.
.SS Linking
Programs using the POSIX message queue API must be compiled with
.I cc \-lrt
to link against the real-time library,
.IR librt .
.SS /proc interfaces
The following interfaces can be used to limit the amount of
kernel memory consumed by POSIX message queues and to set
the default attributes for new message queues:
.TP
.IR /proc/sys/fs/mqueue/msg_default " (since Linux 3.5)"
This file defines the value used for a new queue's
.I mq_maxmsg
setting when the queue is created with a call to
.BR mq_open (3)
where
.I attr
is specified as NULL.
The default value for this file is 10.
The minimum and maximum are as for
.IR /proc/sys/fs/mqueue/msg_max .
A new queue's default
.I mq_maxmsg
value will be the smaller of
.IR msg_default
and
.IR msg_max .
Up until Linux 2.6.28, the default
.I mq_maxmsg
was 10;
from Linux 2.6.28 to Linux 3.4, the default was the value defined for the
.I msg_max
limit.
.TP
.I /proc/sys/fs/mqueue/msg_max
This file can be used to view and change the ceiling value for the
maximum number of messages in a queue.
This value acts as a ceiling on the
.I attr\->mq_maxmsg
argument given to
.BR mq_open (3).
The default value for
.I msg_max
is 10.
The minimum value is 1 (10 in kernels before 2.6.28).
The upper limit is
.BR HARD_MSGMAX .
The
.I msg_max
limit is ignored for privileged processes
.RB ( CAP_SYS_RESOURCE ),
but the
.BR HARD_MSGMAX
ceiling is nevertheless imposed.

The definition of
.BR HARD_MSGMAX
has changed across kernel versions:
.RS
.IP * 3
Up to Linux 2.6.32:
.IR "131072\ /\ sizeof(void\ *)"
.IP *
Linux 2.6.33 to 3.4:
.IR "(32768\ *\ sizeof(void\ *) / 4)"
.IP *
Since Linux 3.5:
.\" commit 5b5c4d1a1440e94994c73dddbad7be0676cd8b9a
65,536
.RE
.TP
.IR /proc/sys/fs/mqueue/msgsize_default " (since Linux 3.5)"
This file defines the value used for a new queue's
.I mq_msgsize
setting when the queue is created with a call to
.BR mq_open (3)
where
.I attr
is specified as NULL.
The default value for this file is 8192 (bytes).
The minimum and maximum are as for
.IR /proc/sys/fs/mqueue/msgsize_max .
If
.IR msgsize_default
exceeds
.IR msgsize_max ,
a new queue's default
.I mq_msgsize
value is capped to the
.I msgsize_max
limit.
Up until Linux 2.6.28, the default
.I mq_msgsize
was 8192;
from Linux 2.6.28 to Linux 3.4, the default was the value defined for the
.I msgsize_max
limit.
.TP
.I /proc/sys/fs/mqueue/msgsize_max
This file can be used to view and change the ceiling on the
maximum message size.
This value acts as a ceiling on the
.I attr\->mq_msgsize
argument given to
.BR mq_open (3).
The default value for
.I msgsize_max
is 8192 bytes.
The minimum value is 128 (8192 in kernels before 2.6.28).
The upper limit for
.I msgsize_max
has varied across kernel versions:
.RS
.IP * 3
Before Linux 2.6.28, the upper limit is
.BR INT_MAX .
.IP *
From Linux 2.6.28 to 3.4, the limit is 1,048,576.
.IP *
Since Linux 3.5, the limit is 16,777,216
.RB ( HARD_MSGSIZEMAX ).
.RE
.IP
The
.I msgsize_max
limit is ignored for privileged process
.RB ( CAP_SYS_RESOURCE ),
but, since Linux 3.5, the
.BR HARD_MSGSIZEMAX
ceiling is enforced for privileged processes.
.TP
.I /proc/sys/fs/mqueue/queues_max
This file can be used to view and change the system-wide limit on the
number of message queues that can be created.
The default value for
.I queues_max
is 256.
No ceiling is imposed on the
.I queues_max
limit; privileged processes
.RB ( CAP_SYS_RESOURCE )
can exceed the limit (but see BUGS).
.SS Resource limit
The
.B RLIMIT_MSGQUEUE
resource limit, which places a limit on the amount of space
that can be consumed by all of the message queues
belonging to a process's real user ID, is described in
.BR getrlimit (2).
.SS Mounting the message queue filesystem
On Linux, message queues are created in a virtual filesystem.
(Other implementations may also provide such a feature,
but the details are likely to differ.)
This filesystem can be mounted (by the superuser) using the following
commands:
.in +4n
.nf

.RB "#" " mkdir /dev/mqueue"
.RB "#" " mount \-t mqueue none /dev/mqueue"

.fi
.in
The sticky bit is automatically enabled on the mount directory.

After the filesystem has been mounted, the message queues on the system
can be viewed and manipulated using the commands usually used for files
(e.g.,
.BR ls (1)
and
.BR rm (1)).

The contents of each file in the directory consist of a single line
containing information about the queue:
.in +4n
.nf

.RB "$" " cat /dev/mqueue/mymq"
QSIZE:129     NOTIFY:2    SIGNO:0    NOTIFY_PID:8260

.fi
.in
These fields are as follows:
.TP
.B QSIZE
Number of bytes of data in all messages in the queue.
.TP
.B NOTIFY_PID
If this is nonzero, then the process with this PID has used
.BR mq_notify (3)
to register for asynchronous message notification,
and the remaining fields describe how notification occurs.
.TP
.B NOTIFY
Notification method:
0 is
.BR SIGEV_SIGNAL ;
1 is
.BR SIGEV_NONE ;
and
2 is
.BR SIGEV_THREAD .
.TP
.B SIGNO
Signal number to be used for
.BR SIGEV_SIGNAL .
.SS Polling message queue descriptors
On Linux, a message queue descriptor is actually a file descriptor,
and can be monitored using
.BR select (2),
.BR poll (2),
or
.BR epoll (7).
This is not portable.
.SS IPC namespaces
For a discussion of the interaction of System V IPC objects and
IPC namespaces, see
.BR namespaces (7).
.SH CONFORMING TO
POSIX.1-2001.
.SH NOTES
System V message queues
.RB ( msgget (2),
.BR msgsnd (2),
.BR msgrcv (2),
etc.) are an older API for exchanging messages between processes.
POSIX message queues provide a better designed interface than
System V message queues;
on the other hand POSIX message queues are less widely available
(especially on older systems) than System V message queues.

Linux does not currently (2.6.26) support the use of access control
lists (ACLs) for POSIX message queues.
.SH EXAMPLE
An example of the use of various message queue functions is shown in
.BR mq_notify (3).
.SH BUGS
In Linux versions 3.5 to 3.14, the kernel imposed a ceiling of 1024
.RB ( HARD_QUEUESMAX )
on the value to which the
.I queues_max
limit could be raised,
and the ceiling was enforced even for privileged processes.
This ceiling value was removed in Linux 3.14,
and patches to stable kernels 3.5.x to 3.13.x also removed the ceiling.
.SH SEE ALSO
.BR getrlimit (2),
.BR mq_getsetattr (2),
.BR poll (2),
.BR select (2),
.BR mq_close (3),
.BR mq_getattr (3),
.BR mq_notify (3),
.BR mq_open (3),
.BR mq_receive (3),
.BR mq_send (3),
.BR mq_unlink (3),
.BR epoll (7),
.BR namespaces (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2013 by Michael Kerrisk <mtk.manpages@gmail.com>
.\" and Copyright (c) 2012 by Eric W. Biederman <ebiederm@xmission.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\"
.TH NAMESPACES 7 2014-09-21 "Linux" "Linux Programmer's Manual"
.SH NAME
namespaces \- overview of Linux namespaces
.SH DESCRIPTION
A namespace wraps a global system resource in an abstraction that
makes it appear to the processes within the namespace that they
have their own isolated instance of the global resource.
Changes to the global resource are visible to other processes
that are members of the namespace, but are invisible to other processes.
One use of namespaces is to implement containers.

Linux provides the following namespaces:
.TS
lB lB lB
l lB l.
Namespace	Constant	Isolates
IPC	CLONE_NEWIPC	System V IPC, POSIX message queues
Network	CLONE_NEWNET	Network devices, stacks, ports, etc.
Mount	CLONE_NEWNS	Mount points
PID	CLONE_NEWPID	Process IDs
User	CLONE_NEWUSER	User and group IDs
UTS	CLONE_NEWUTS	Hostname and NIS domain name
.TE

This page describes the various namespaces and the associated
.I /proc
files, and summarizes the APIs for working with namespaces.
.\"
.\" ==================== The namespaces API ====================
.\"
.SS The namespaces API
As well as various
.I /proc
files described below,
the namespaces API includes the following system calls:
.TP
.BR clone (2)
The
.BR clone (2)
system call creates a new process.
If the
.I flags
argument of the call specifies one or more of the
.B CLONE_NEW*
flags listed below, then new namespaces are created for each flag,
and the child process is made a member of those namespaces.
(This system call also implements a number of features
unrelated to namespaces.)
.TP
.BR setns (2)
The
.BR setns (2)
system call allows the calling process to join an existing namespace.
The namespace to join is specified via a file descriptor that refers to
one of the
.IR /proc/[pid]/ns
files described below.
.TP
.BR unshare (2)
The
.BR unshare (2)
system call moves the calling process to a new namespace.
If the
.I flags
argument of the call specifies one or more of the
.B CLONE_NEW*
flags listed below, then new namespaces are created for each flag,
and the calling process is made a member of those namespaces.
(This system call also implements a number of features
unrelated to namespaces.)
.PP
Creation of new namespaces using
.BR clone (2)
and
.BR unshare (2)
in most cases requires the
.BR CAP_SYS_ADMIN
capability.
User namespaces are the exception: since Linux 3.8,
no privilege is required to create a user namespace.
.\"
.\" ==================== The /proc/[pid]/ns/ directory ====================
.\"
.SS The /proc/[pid]/ns/ directory
Each process has a
.IR /proc/[pid]/ns/
.\" See commit 6b4e306aa3dc94a0545eb9279475b1ab6209a31f
subdirectory containing one entry for each namespace that
supports being manipulated by
.BR setns (2):

.in +4n
.nf
$ \fBls -l /proc/$$/ns\fP
total 0
lrwxrwxrwx. 1 mtk mtk 0 Jan 14 01:20 ipc -> ipc:[4026531839]
lrwxrwxrwx. 1 mtk mtk 0 Jan 14 01:20 mnt -> mnt:[4026531840]
lrwxrwxrwx. 1 mtk mtk 0 Jan 14 01:20 net -> net:[4026531956]
lrwxrwxrwx. 1 mtk mtk 0 Jan 14 01:20 pid -> pid:[4026531836]
lrwxrwxrwx. 1 mtk mtk 0 Jan 14 01:20 user -> user:[4026531837]
lrwxrwxrwx. 1 mtk mtk 0 Jan 14 01:20 uts -> uts:[4026531838]
.fi
.in

Bind mounting (see
.BR mount (2))
one of the files in this directory
to somewhere else in the filesystem keeps
the corresponding namespace of the process specified by
.I pid
alive even if all processes currently in the namespace terminate.

Opening one of the files in this directory
(or a file that is bind mounted to one of these files)
returns a file handle for
the corresponding namespace of the process specified by
.IR pid .
As long as this file descriptor remains open,
the namespace will remain alive,
even if all processes in the namespace terminate.
The file descriptor can be passed to
.BR setns (2).

In Linux 3.7 and earlier, these files were visible as hard links.
Since Linux 3.8, they appear as symbolic links.
If two processes are in the same namespace, then the inode numbers of their
.IR /proc/[pid]/ns/xxx
symbolic links will be the same; an application can check this using the
.I stat.st_ino
field returned by
.BR stat (2).
The content of this symbolic link is a string containing
the namespace type and inode number as in the following example:

.in +4n
.nf
$ \fBreadlink /proc/$$/ns/uts\fP
uts:[4026531838]
.fi
.in

The files in this subdirectory are as follows:
.TP
.IR /proc/[pid]/ns/ipc " (since Linux 3.0)"
This file is a handle for the IPC namespace of the process.
.TP
.IR /proc/[pid]/ns/mnt " (since Linux 3.8)"
This file is a handle for the mount namespace of the process.
.TP
.IR /proc/[pid]/ns/net " (since Linux 3.0)"
This file is a handle for the network namespace of the process.
.TP
.IR /proc/[pid]/ns/pid " (since Linux 3.8)"
This file is a handle for the PID namespace of the process.
.TP
.IR /proc/[pid]/ns/user " (since Linux 3.8)"
This file is a handle for the user namespace of the process.
.TP
.IR /proc/[pid]/ns/uts " (since Linux 3.0)"
This file is a handle for the UTS namespace of the process.
.\"
.\" ==================== IPC namespaces ====================
.\"
.SS IPC namespaces (CLONE_NEWIPC)
IPC namespaces isolate certain IPC resources,
namely, System V IPC objects (see
.BR svipc (7))
and (since Linux 2.6.30)
.\" commit 7eafd7c74c3f2e67c27621b987b28397110d643f
.\" https://lwn.net/Articles/312232/
POSIX message queues (see
.BR mq_overview (7)).
The common characteristic of these IPC mechanisms is that IPC
objects are identified by mechanisms other than filesystem
pathnames.

Each IPC namespace has its own set of System V IPC identifiers and
its own POSIX message queue filesystem.
Objects created in an IPC namespace are visible to all other processes
that are members of that namespace,
but are not visible to processes in other IPC namespaces.

The following
.I /proc
interfaces are distinct in each IPC namespace:
.IP * 3
The POSIX message queue interfaces in
.IR /proc/sys/fs/mqueue .
.IP *
The System V IPC interfaces in
.IR /proc/sys/kernel ,
namely:
.IR msgmax ,
.IR msgmnb  ,
.IR msgmni ,
.IR sem ,
.IR shmall ,
.IR shmmax ,
.IR shmmni ,
and
.IR shm_rmid_forced .
.IP *
The System V IPC interfaces in
.IR /proc/sysvipc .
.PP
When an IPC namespace is destroyed
(i.e., when the last process that is a member of the namespace terminates),
all IPC objects in the namespace are automatically destroyed.

Use of IPC namespaces requires a kernel that is configured with the
.B CONFIG_IPC_NS
option.
.\"
.\" ==================== Network namespaces ====================
.\"
.SS Network namespaces (CLONE_NEWNET)
Network namespaces provide isolation of the system resources associated
with networking: network devices, IPv4 and IPv6 protocol stacks,
IP routing tables, firewalls, the
.I /proc/net
directory, the
.I /sys/class/net
directory, port numbers (sockets), and so on.
A physical network device can live in exactly one
network namespace.
A virtual network device ("veth") pair provides a pipe-like abstraction
.\" FIXME Add pointer to veth(4) page when it is eventually completed
that can be used to create tunnels between network namespaces,
and can be used to create a bridge to a physical network device
in another namespace.

When a network namespace is freed
(i.e., when the last process in the namespace terminates),
its physical network devices are moved back to the
initial network namespace (not to the parent of the process).

Use of network namespaces requires a kernel that is configured with the
.B CONFIG_NET_NS
option.
.\"
.\" ==================== Mount namespaces ====================
.\"
.SS Mount namespaces (CLONE_NEWNS)
Mount namespaces isolate the set of filesystem mount points,
meaning that processes in different mount namespaces can
have different views of the filesystem hierarchy.
The set of mounts in a mount namespace is modified using
.BR mount (2)
and
.BR umount (2).

The
.IR /proc/[pid]/mounts
file (present since Linux 2.4.19)
lists all the filesystems currently mounted in the
process's mount namespace.
The format of this file is documented in
.BR fstab (5).
Since kernel version 2.6.15, this file is pollable:
after opening the file for reading, a change in this file
(i.e., a filesystem mount or unmount) causes
.BR select (2)
to mark the file descriptor as readable, and
.BR poll (2)
and
.BR epoll_wait (2)
mark the file as having an error condition.

The
.IR /proc/[pid]/mountstats
file (present since Linux 2.6.17)
exports information (statistics, configuration information)
about the mount points in the process's mount namespace.
This file is readable only by the owner of the process.
Lines in this file have the form:
.RS
.in 12
.nf

device /dev/sda7 mounted on /home with fstype ext3 [statistics]
(       1      )            ( 2 )             (3 ) (4)
.fi
.in

The fields in each line are:
.TP 5
(1)
The name of the mounted device
(or "nodevice" if there is no corresponding device).
.TP
(2)
The mount point within the filesystem tree.
.TP
(3)
The filesystem type.
.TP
(4)
Optional statistics and configuration information.
Currently (as at Linux 2.6.26), only NFS filesystems export
information via this field.
.RE
.\"
.\" ==================== PID namespaces ====================
.\"
.SS PID namespaces (CLONE_NEWPID)
See
.BR pid_namespaces (7).
.\"
.\" ==================== User namespaces ====================
.\"
.SS User namespaces (CLONE_NEWUSER)
See
.BR user_namespaces (7).
.\"
.\" ==================== UTS namespaces ====================
.\"
.SS UTS namespaces (CLONE_NEWUTS)
UTS namespaces provide isolation of two system identifiers:
the hostname and the NIS domain name.
These identifiers are set using
.BR sethostname (2)
and
.BR setdomainname (2),
and can be retrieved using
.BR uname (2),
.BR gethostname (2),
and
.BR getdomainname (2).

Use of UTS namespaces requires a kernel that is configured with the
.B CONFIG_UTS_NS
option.
.SH CONFORMING TO
Namespaces are a Linux-specific feature.
.SH EXAMPLE
See
.BR user_namespaces (7).
.SH SEE ALSO
.BR nsenter (1),
.BR readlink (1),
.BR unshare (1),
.BR clone (2),
.BR setns (2),
.BR unshare (2),
.BR proc (5),
.BR credentials (7),
.BR capabilities (7),
.BR pid_namespaces (7),
.BR user_namespaces (7),
.BR switch_root (8)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
'\" t
.\" This man page is Copyright (C) 1999 Andi Kleen <ak@muc.de>.
.\"
.\" %%%LICENSE_START(VERBATIM_ONE_PARA)
.\" Permission is granted to distribute possibly modified copies
.\" of this page provided the header is included verbatim,
.\" and in case of nontrivial modification author and date
.\" of the modification is added to the header.
.\" %%%LICENSE_END
.\"
.\" $Id: netdevice.7,v 1.10 2000/08/17 10:09:54 ak Exp $
.\"
.\" Modified, 2004-11-25, mtk, formatting and a few wording fixes
.\"
.\" Modified, 2011-11-02, <bidulock@openss7.org>, added many basic
.\"  but missing ioctls, such as SIOCGIFADDR.
.\"
.TH NETDEVICE  7 2014-01-24 "Linux" "Linux Programmer's Manual"
.SH NAME
netdevice \- low-level access to Linux network devices
.SH SYNOPSIS
.B "#include <sys/ioctl.h>"
.br
.B "#include <net/if.h>"
.SH DESCRIPTION
This man page describes the sockets interface which is used to configure
network devices.

Linux supports some standard ioctls to configure network devices.
They can be used on any socket's file descriptor regardless of the
family or type.
Most of them pass an
.I ifreq
structure:

.in +4n
.nf
struct ifreq {
    char ifr_name[IFNAMSIZ]; /* Interface name */
    union {
        struct sockaddr ifr_addr;
        struct sockaddr ifr_dstaddr;
        struct sockaddr ifr_broadaddr;
        struct sockaddr ifr_netmask;
        struct sockaddr ifr_hwaddr;
        short           ifr_flags;
        int             ifr_ifindex;
        int             ifr_metric;
        int             ifr_mtu;
        struct ifmap    ifr_map;
        char            ifr_slave[IFNAMSIZ];
        char            ifr_newname[IFNAMSIZ];
        char           *ifr_data;
    };
};
.fi
.in

Normally, the user specifies which device to affect by setting
.I ifr_name
to the name of the interface.
All other members of the structure may
share memory.
.SS Ioctls
If an ioctl is marked as privileged, then using it requires an effective
user ID of 0 or the
.B CAP_NET_ADMIN
capability.
If this is not the case,
.B EPERM
will be returned.
.TP
.B SIOCGIFNAME
Given the
.IR ifr_ifindex ,
return the name of the interface in
.IR ifr_name .
This is the only ioctl which returns its result in
.IR ifr_name .
.TP
.B SIOCGIFINDEX
Retrieve the interface index of the interface into
.IR ifr_ifindex .
.TP
.BR SIOCGIFFLAGS ", " SIOCSIFFLAGS
Get or set the active flag word of the device.
.I ifr_flags
contains a bit mask of the following values:
.\" Do not right adjust text blocks in tables
.na
.TS
tab(:);
c s
l l.
Device flags
IFF_UP:Interface is running.
IFF_BROADCAST:Valid broadcast address set.
IFF_DEBUG:Internal debugging flag.
IFF_LOOPBACK:Interface is a loopback interface.
IFF_POINTOPOINT:Interface is a point-to-point link.
IFF_RUNNING:Resources allocated.
IFF_NOARP:T{
No arp protocol, L2 destination address not set.
T}
IFF_PROMISC:Interface is in promiscuous mode.
IFF_NOTRAILERS:Avoid use of trailers.
IFF_ALLMULTI:Receive all multicast packets.
IFF_MASTER:Master of a load balancing bundle.
IFF_SLAVE:Slave of a load balancing bundle.
IFF_MULTICAST:Supports multicast
IFF_PORTSEL:Is able to select media type via ifmap.
IFF_AUTOMEDIA:Auto media selection active.
IFF_DYNAMIC:T{
The addresses are lost when the interface goes down.
T}
IFF_LOWER_UP:Driver signals L1 up (since Linux 2.6.17)
IFF_DORMANT:Driver signals dormant (since Linux 2.6.17)
IFF_ECHO:Echo sent packets (since Linux 2.6.25)

.TE
.ad
Setting the active flag word is a privileged operation, but any
process may read it.
.TP
.BR SIOCGIFPFLAGS ", " SIOCSIFPFLAGS
Get or set extended (private) flags for the device.
.I ifr_flags
contains a bit mask of the following values:
.TS
tab(:);
c s
l l.
Private flags
IFF_802_1Q_VLAN:Interface is 802.1Q VLAN device.
IFF_EBRIDGE:Interface is Ethernet bridging device.
IFF_SLAVE_INACTIVE:Interface is inactive bonding slave.
IFF_MASTER_8023AD:Interface is 802.3ad bonding master.
IFF_MASTER_ALB:Interface is balanced-alb bonding master.
IFF_BONDING:Interface is a bonding master or slave.
IFF_SLAVE_NEEDARP:Interface needs ARPs for validation.
IFF_ISATAP:Interface is RFC4214 ISATAP interface.
.TE
.sp
Setting the extended (private) interface flags is a privileged operation.
.TP
.BR SIOCGIFADDR ", " SIOCSIFADDR
Get or set the address of the device using
.IR ifr_addr .
Setting the interface address is a privileged operation.
For compatibility, only
.B AF_INET
addresses are accepted or returned.
.TP
.BR SIOCGIFDSTADDR ", " SIOCSIFDSTADDR
Get or set the destination address of a point-to-point device using
.IR ifr_dstaddr .
For compatibility, only
.B AF_INET
addresses are accepted or returned.
Setting the destination address is a privileged operation.
.TP
.BR SIOCGIFBRDADDR ", " SIOCSIFBRDADDR
Get or set the broadcast address for a device using
.IR ifr_brdaddr .
For compatibility, only
.B AF_INET
addresses are accepted or returned.
Setting the broadcast address is a privileged operation.
.TP
.BR SIOCGIFNETMASK ", " SIOCSIFNETMASK
Get or set the network mask for a device using
.IR ifr_netmask .
For compatibility, only
.B AF_INET
addresses are accepted or returned.
Setting the network mask is a privileged operation.
.TP
.BR SIOCGIFMETRIC ", " SIOCSIFMETRIC
Get or set the metric of the device using
.IR ifr_metric .
This is currently not implemented; it sets
.I ifr_metric
to 0 if you attempt to read it and returns
.B EOPNOTSUPP
if you attempt to set it.
.TP
.BR SIOCGIFMTU ", " SIOCSIFMTU
Get or set the MTU (Maximum Transfer Unit) of a device using
.IR ifr_mtu .
Setting the MTU is a privileged operation.
Setting the MTU to
too small values may cause kernel crashes.
.TP
.BR SIOCGIFHWADDR ", " SIOCSIFHWADDR
Get or set the hardware address of a device using
.IR ifr_hwaddr .
The hardware address is specified in a struct
.IR sockaddr .
.I sa_family
contains the ARPHRD_* device type,
.I sa_data
the L2 hardware address starting from byte 0.
Setting the hardware address is a privileged operation.
.TP
.B SIOCSIFHWBROADCAST
Set the hardware broadcast address of a device from
.IR ifr_hwaddr .
This is a privileged operation.
.TP
.BR SIOCGIFMAP ", " SIOCSIFMAP
Get or set the interface's hardware parameters using
.IR ifr_map .
Setting the parameters is a privileged operation.

.in +4n
.nf
struct ifmap {
    unsigned long   mem_start;
    unsigned long   mem_end;
    unsigned short  base_addr;
    unsigned char   irq;
    unsigned char   dma;
    unsigned char   port;
};
.fi
.in

The interpretation of the ifmap structure depends on the device driver
and the architecture.
.TP
.BR SIOCADDMULTI ", " SIOCDELMULTI
Add an address to or delete an address from the device's link layer
multicast filters using
.IR ifr_hwaddr .
These are privileged operations.
See also
.BR packet (7)
for an alternative.
.TP
.BR SIOCGIFTXQLEN ", " SIOCSIFTXQLEN
Get or set the transmit queue length of a device using
.IR ifr_qlen .
Setting the transmit queue length is a privileged operation.
.TP
.B SIOCSIFNAME
Changes the name of the interface specified in
.I ifr_name
to
.IR ifr_newname .
This is a privileged operation.
It is allowed only when the interface
is not up.
.TP
.B SIOCGIFCONF
Return a list of interface (transport layer) addresses.
This currently
means only addresses of the
.B AF_INET
(IPv4) family for compatibility.
Unlike the others, this ioctl passes an
.I ifconf
structure:

.in +4n
.nf
struct ifconf {
    int                 ifc_len; /* size of buffer */
    union {
        char           *ifc_buf; /* buffer address */
        struct ifreq   *ifc_req; /* array of structures */
    };
};
.fi
.in

If
.I ifc_req
is NULL,
.B SIOCGIFCONF
returns the necessary buffer size in bytes
for receiving all available addresses in
.IR ifc_len .
Otherwise,
.I ifc_req
contains a pointer to an array of
.I ifreq
structures to be filled with all currently active L3 interface addresses.
.I ifc_len
contains the size of the array in bytes.
Within each
.I ifreq
structure,
.I ifr_name
will receive the interface name, and
.I ifr_addr
the address.
The actual number of bytes transferred is returned in
.IR ifc_len .

If the size specified by
.I ifc_len
is insufficient to store all the addresses,
the kernel will skip the exceeding ones and return success.
There is no reliable way of detecting this condition once it has occurred.
It is therefore recommended to either determine the necessary buffer size
beforehand by calling
.B SIOCGIFCONF
with
.I ifc_req
set to NULL, or to retry the call with a bigger buffer whenever
.I ifc_len
upon return differs by less than
.I sizeof(struct ifreq)
from its original value.

If an error occurs accessing the
.I ifconf
or
.I ifreq
structures,
.B EFAULT
will be returned.
.\" Slaving isn't supported in 2.2
.\" .
.\" .TP
.\" .BR SIOCGIFSLAVE ", " SIOCSIFSLAVE
.\" Get or set the slave device using
.\" .IR ifr_slave .
.\" Setting the slave device is a privileged operation.
.\" .PP
.\" FIXME . add amateur radio stuff.
.PP
Most protocols support their own ioctls to configure protocol-specific
interface options.
See the protocol man pages for a description.
For configuring IP addresses, see
.BR ip (7).
.PP
In addition, some devices support private ioctls.
These are not described here.
.SH NOTES
Strictly speaking,
.B SIOCGIFCONF
and the other ioctls that accept or return only
.B AF_INET
socket addresses,
are IP-specific and belong in
.BR ip (7).
.LP
The names of interfaces with no addresses or that don't have the
.B IFF_RUNNING
flag set can be found via
.IR /proc/net/dev .
.LP
Local IPv6 IP addresses can be found via
.I /proc/net
or via
.BR rtnetlink (7).
.SH BUGS
glibc 2.1 is missing the
.I ifr_newname
macro in
.IR <net/if.h> .
Add the following to your program as a workaround:
.sp
.in +4n
.nf
#ifndef ifr_newname
#define ifr_newname     ifr_ifru.ifru_slave
#endif
.fi
.in
.SH SEE ALSO
.BR proc (5),
.BR capabilities (7),
.BR ip (7),
.BR rtnetlink (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
'\" t
.\" This man page is Copyright (c) 1998 by Andi Kleen.
.\"
.\" %%%LICENSE_START(GPL_NOVERSION_ONELINE)
.\" Subject to the GPL.
.\" %%%LICENSE_END
.\"
.\" Based on the original comments from Alexey Kuznetsov
.\" Modified 2005-12-27 by Hasso Tepper <hasso@estpak.ee>
.\" $Id: netlink.7,v 1.8 2000/06/22 13:23:00 ak Exp $
.TH NETLINK  7 2015-01-10 "Linux" "Linux Programmer's Manual"
.SH NAME
netlink \- communication between kernel and user space (AF_NETLINK)
.SH SYNOPSIS
.nf
.B #include <asm/types.h>
.B #include <sys/socket.h>
.B #include <linux/netlink.h>

.BI "netlink_socket = socket(AF_NETLINK, " socket_type ", " netlink_family );
.fi
.SH DESCRIPTION
Netlink is used to transfer information between kernel and
user-space processes.
It consists of a standard sockets-based interface for user space
processes and an internal kernel API for kernel modules.
The internal kernel interface is not documented in this manual page.
There is also an obsolete netlink interface
via netlink character devices; this interface is not documented here
and is provided only for backward compatibility.

Netlink is a datagram-oriented service.
Both
.B SOCK_RAW
and
.B SOCK_DGRAM
are valid values for
.IR socket_type .
However, the netlink protocol does not distinguish between datagram
and raw sockets.

.I netlink_family
selects the kernel module or netlink group to communicate with.
The currently assigned netlink families are:
.TP
.B NETLINK_ROUTE
Receives routing and link updates and may be used to modify the routing
tables (both IPv4 and IPv6), IP addresses, link parameters,
neighbor setups, queueing disciplines, traffic classes and
packet classifiers (see
.BR rtnetlink (7)).
.TP
.B NETLINK_W1
Messages from 1-wire subsystem.
.TP
.B NETLINK_USERSOCK
Reserved for user-mode socket protocols.
.TP
.B NETLINK_FIREWALL
Transport IPv4 packets from netfilter to user space.
Used by
.I ip_queue
kernel module.
.TP
.B NETLINK_INET_DIAG
.\" FIXME More details on NETLINK_INET_DIAG needed.
INET socket monitoring.
.TP
.B NETLINK_NFLOG
Netfilter/iptables ULOG.
.TP
.B NETLINK_XFRM
.\" FIXME More details on NETLINK_XFRM needed.
IPsec.
.TP
.B NETLINK_SELINUX
SELinux event notifications.
.TP
.B NETLINK_ISCSI
.\" FIXME More details on NETLINK_ISCSI needed.
Open-iSCSI.
.TP
.B NETLINK_AUDIT
.\" FIXME More details on NETLINK_AUDIT needed.
Auditing.
.TP
.B NETLINK_FIB_LOOKUP
.\" FIXME More details on NETLINK_FIB_LOOKUP needed.
Access to FIB lookup from user space.
.TP
.B NETLINK_CONNECTOR
Kernel connector.
See
.I Documentation/connector/*
in the Linux kernel source tree for further information.
.TP
.B NETLINK_NETFILTER
.\" FIXME More details on NETLINK_NETFILTER needed.
Netfilter subsystem.
.TP
.B NETLINK_IP6_FW
Transport IPv6 packets from netfilter to user space.
Used by
.I ip6_queue
kernel module.
.TP
.B NETLINK_DNRTMSG
DECnet routing messages.
.TP
.B NETLINK_KOBJECT_UEVENT
.\" FIXME More details on NETLINK_KOBJECT_UEVENT needed.
Kernel messages to user space.
.TP
.B NETLINK_GENERIC
Generic netlink family for simplified netlink usage.
.TP
.BR NETLINK_CRYPTO " (since Linux 3.2)"
.\" commit a38f7907b926e4c6c7d389ad96cc38cec2e5a9e9
.\" Author: Steffen Klassert <steffen.klassert@secunet.com>
Netlink interface to request information about ciphers registered
with the kernel crypto API as well as allow configuration of the
kernel crypto API.
.PP
Netlink messages consist of a byte stream with one or multiple
.I nlmsghdr
headers and associated payload.
The byte stream should be accessed only with the standard
.B NLMSG_*
macros.
See
.BR netlink (3)
for further information.

In multipart messages (multiple
.I nlmsghdr
headers with associated payload in one byte stream) the first and all
following headers have the
.B NLM_F_MULTI
flag set, except for the last header which has the type
.BR NLMSG_DONE .

After each
.I nlmsghdr
the payload follows.

.in +4n
.nf
struct nlmsghdr {
    __u32 nlmsg_len;    /* Length of message including header. */
    __u16 nlmsg_type;   /* Type of message content. */
    __u16 nlmsg_flags;  /* Additional flags. */
    __u32 nlmsg_seq;    /* Sequence number. */
    __u32 nlmsg_pid;    /* Sender port ID. */
};
.fi
.in

.I nlmsg_type
can be one of the standard message types:
.B NLMSG_NOOP
message is to be ignored,
.B NLMSG_ERROR
message signals an error and the payload contains an
.I nlmsgerr
structure,
.B NLMSG_DONE
message terminates a multipart message.

.in +4n
.nf
struct nlmsgerr {
    int error;        /* Negative errno or 0 for acknowledgements */
    struct nlmsghdr msg;  /* Message header that caused the error */
};
.fi
.in

A netlink family usually specifies more message types, see the
appropriate manual pages for that, for example,
.BR rtnetlink (7)
for
.BR NETLINK_ROUTE .
.TS
tab(:);
l s
lB l.
Standard flag bits in \fInlmsg_flags\fP
_
NLM_F_REQUEST:Must be set on all request messages.
NLM_F_MULTI:T{
The message is part of a multipart message terminated by
.BR NLMSG_DONE .
T}
NLM_F_ACK:Request for an acknowledgment on success.
NLM_F_ECHO:Echo this request.
.TE
.sp 1
.\" No right adjustment for text blocks in tables
.TS
tab(:);
l s
lB l.
Additional flag bits for GET requests
_
NLM_F_ROOT:Return the complete table instead of a single entry.
NLM_F_MATCH:T{
Return all entries matching criteria passed in message content.
Not implemented yet.
T}
.\" FIXME NLM_F_ATOMIC is not used anymore?
NLM_F_ATOMIC:Return an atomic snapshot of the table.
NLM_F_DUMP:T{
Convenience macro; equivalent to
.br
(NLM_F_ROOT|NLM_F_MATCH).
T}
.TE
.sp 1
Note that
.B NLM_F_ATOMIC
requires the
.B CAP_NET_ADMIN
capability or an effective UID of 0.
.TS
tab(:);
l s
lB l.
Additional flag bits for NEW requests
_
NLM_F_REPLACE:Replace existing matching object.
NLM_F_EXCL:Don't replace if the object already exists.
NLM_F_CREATE:Create object if it doesn't already exist.
NLM_F_APPEND:Add to the end of the object list.
.TE
.sp 1
.I nlmsg_seq
and
.I nlmsg_pid
are used to track messages.
.I nlmsg_pid
shows the origin of the message.
Note that there isn't a 1:1 relationship between
.I nlmsg_pid
and the PID of the process if the message originated from a netlink
socket.
See the
.B ADDRESS FORMATS
section for further information.

Both
.I nlmsg_seq
and
.I nlmsg_pid
.\" FIXME Explain more about nlmsg_seq and nlmsg_pid.
are opaque to netlink core.

Netlink is not a reliable protocol.
It tries its best to deliver a message to its destination(s),
but may drop messages when an out-of-memory condition or
other error occurs.
For reliable transfer the sender can request an
acknowledgement from the receiver by setting the
.B NLM_F_ACK
flag.
An acknowledgment is an
.B NLMSG_ERROR
packet with the error field set to 0.
The application must generate acknowledgements for
received messages itself.
The kernel tries to send an
.B NLMSG_ERROR
message for every failed packet.
A user process should follow this convention too.

However, reliable transmissions from kernel to user are impossible
in any case.
The kernel can't send a netlink message if the socket buffer is full:
the message will be dropped and the kernel and the user-space process will
no longer have the same view of kernel state.
It is up to the application to detect when this happens (via the
.B ENOBUFS
error returned by
.BR recvmsg (2))
and resynchronize.
.SS Address formats
The
.I sockaddr_nl
structure describes a netlink client in user space or in the kernel.
A
.I sockaddr_nl
can be either unicast (only sent to one peer) or sent to
netlink multicast groups
.RI ( nl_groups
not equal 0).

.in +4n
.nf
struct sockaddr_nl {
    sa_family_t     nl_family;  /* AF_NETLINK */
    unsigned short  nl_pad;     /* Zero. */
    pid_t           nl_pid;     /* Port ID. */
    __u32           nl_groups;  /* Multicast groups mask. */
};
.fi
.in

.I nl_pid
is the unicast address of netlink socket.
It's always 0 if the destination is in the kernel.
For a user-space process,
.I nl_pid
is usually the PID of the process owning the destination socket.
However,
.I nl_pid
identifies a netlink socket, not a process.
If a process owns several netlink
sockets, then
.I nl_pid
can be equal to the process ID only for at most one socket.
There are two ways to assign
.I nl_pid
to a netlink socket.
If the application sets
.I nl_pid
before calling
.BR bind (2),
then it is up to the application to make sure that
.I nl_pid
is unique.
If the application sets it to 0, the kernel takes care of assigning it.
The kernel assigns the process ID to the first netlink socket the process
opens and assigns a unique
.I nl_pid
to every netlink socket that the process subsequently creates.

.I nl_groups
is a bit mask with every bit representing a netlink group number.
Each netlink family has a set of 32 multicast groups.
When
.BR bind (2)
is called on the socket, the
.I nl_groups
field in the
.I sockaddr_nl
should be set to a bit mask of the groups which it wishes to listen to.
The default value for this field is zero which means that no multicasts
will be received.
A socket may multicast messages to any of the multicast groups by setting
.I nl_groups
to a bit mask of the groups it wishes to send to when it calls
.BR sendmsg (2)
or does a
.BR connect (2).
Only processes with an effective UID of 0 or the
.B CAP_NET_ADMIN
capability may send or listen to a netlink multicast group.
Since Linux 2.6.13,
.\" commit d629b836d151d43332492651dd841d32e57ebe3b
messages can't be broadcast to multiple groups.
Any replies to a message received for a multicast group should be
sent back to the sending PID and the multicast group.
Some Linux kernel subsystems may additionally allow other users
to send and/or receive messages.
As at Linux 3.0, the
.BR NETLINK_KOBJECT_UEVENT ,
.BR NETLINK_GENERIC ,
.BR NETLINK_ROUTE ,
and
.BR NETLINK_SELINUX
groups allow other users to receive messages.
No groups allow other users to send messages.
.SH VERSIONS
The socket interface to netlink is a new feature of Linux 2.2.

Linux 2.0 supported a more primitive device-based netlink interface
(which is still available as a compatibility option).
This obsolete interface is not described here.

NETLINK_SELINUX appeared in Linux 2.6.4.

NETLINK_AUDIT appeared in Linux 2.6.6.

NETLINK_KOBJECT_UEVENT appeared in Linux 2.6.10.

NETLINK_W1 and NETLINK_FIB_LOOKUP appeared in Linux 2.6.13.

NETLINK_INET_DIAG, NETLINK_CONNECTOR and NETLINK_NETFILTER appeared in
Linux 2.6.14.

NETLINK_GENERIC and NETLINK_ISCSI appeared in Linux 2.6.15.
.SH NOTES
It is often better to use netlink via
.I libnetlink
or
.I libnl
than via the low-level kernel interface.
.SH BUGS
This manual page is not complete.
.SH EXAMPLE
The following example creates a
.B NETLINK_ROUTE
netlink socket which will listen to the
.B RTMGRP_LINK
(network interface create/delete/up/down events) and
.B RTMGRP_IPV4_IFADDR
(IPv4 addresses add/delete events) multicast groups.

.in +4n
.nf
struct sockaddr_nl sa;

memset(&sa, 0, sizeof(sa));
sa.nl_family = AF_NETLINK;
sa.nl_groups = RTMGRP_LINK | RTMGRP_IPV4_IFADDR;

fd = socket(AF_NETLINK, SOCK_RAW, NETLINK_ROUTE);
bind(fd, (struct sockaddr *) &sa, sizeof(sa));
.fi
.in

The next example demonstrates how to send a netlink message to the
kernel (pid 0).
Note that the application must take care of message sequence numbers
in order to reliably track acknowledgements.

.in +4n
.nf
struct nlmsghdr *nh;    /* The nlmsghdr with payload to send. */
struct sockaddr_nl sa;
struct iovec iov = { nh, nh\->nlmsg_len };
struct msghdr msg;

msg = { &sa, sizeof(sa), &iov, 1, NULL, 0, 0 };
memset(&sa, 0, sizeof(sa));
sa.nl_family = AF_NETLINK;
nh\->nlmsg_pid = 0;
nh\->nlmsg_seq = ++sequence_number;
/* Request an ack from kernel by setting NLM_F_ACK. */
nh\->nlmsg_flags |= NLM_F_ACK;

sendmsg(fd, &msg, 0);
.fi
.in

And the last example is about reading netlink message.

.in +4n
.nf
int len;
char buf[4096];
struct iovec iov = { buf, sizeof(buf) };
struct sockaddr_nl sa;
struct msghdr msg;
struct nlmsghdr *nh;

msg = { &sa, sizeof(sa), &iov, 1, NULL, 0, 0 };
len = recvmsg(fd, &msg, 0);

for (nh = (struct nlmsghdr *) buf; NLMSG_OK (nh, len);
     nh = NLMSG_NEXT (nh, len)) {
    /* The end of multipart message. */
    if (nh\->nlmsg_type == NLMSG_DONE)
        return;

    if (nh\->nlmsg_type == NLMSG_ERROR)
        /* Do some error handling. */
    ...

    /* Continue with parsing payload. */
    ...
}
.fi
.in
.SH SEE ALSO
.BR cmsg (3),
.BR netlink (3),
.BR capabilities (7),
.BR rtnetlink (7)

.UR ftp://ftp.inr.ac.ru\:/ip-routing\:/iproute2*
information about libnetlink
.UE

.UR http://people.suug.ch\:/~tgr\:/libnl/
information about libnl
.UE

RFC 3549 "Linux Netlink as an IP Services Protocol"
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2015 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\"
.TH NPTL 7 2015-04-19 "Linux" "Linux Programmer's Manual"
.SH NAME
nptl \- Native POSIX Threads Library
.SH DESCRIPTION
NPTL (Native POSIX Threads Library)
is the GNU C library POSIX threads implementation that is used on modern
Linux systems.
.\"
.SS NPTL and signals
NPTL makes internal use of the first two real-time signals
(signal numbers 32 and 33).
One of these signals is used to support thread cancellation and POSIX timers
(see
.BR timer_create (2));
the other is used as part of a mechanism that ensures all threads in
a process always have the same UIDs and GIDs, as required by POSIX.
These signals cannot be used in applications.

To prevent accidental use of these signals in applications,
which might interfere with the operation of the NPTL implementation,
various glibc library functions and system call wrapper functions
attempt to hide these signals from applications,
as follows:
.IP * 3
.B SIGRTMIN
is defined with the value 34 (rather than 32).
.IP *
The
.BR sigwaitinfo (2),
.BR sigtimedwait (2),
and
.BR sigwait (3)
interfaces silently ignore requests to wait for these two signals
if they are specified in the signal set argument of these calls.
.IP *
The
.BR sigprocmask (2)
and
.BR pthread_sigmask (3)
interfaces silently ignore attempts to block these two signals.
.IP *
The
.BR sigaction (2),
.BR pthread_kill (3),
and
.BR pthread_sigqueue (3)
interfaces fail with the error
.B EINVAL
(indicating an invalid signal number) if these signals are specified.
.IP *
.BR sigfillset (3)
does not include these two signals when it creates a full signal set.
.\"
.SS NPTL and process credential changes
At the Linux kernel level,
credentials (user and group IDs) are a per-thread attribute.
However, POSIX requires that all of the POSIX threads in a process
have the same credentials.
To accommodate this requirement,
the NPTL implementation wraps all of the system calls that
change process credentials with functions that,
in addition to invoking the underlying system call,
arrange for all other threads in the process to also change their credentials.

The implementation of each of these system calls involves the use of
a real-time signal that is sent (using
.BR tgkill (2))
to each of the other threads that must change its credentials.
Before sending these signals, the thread that is changing credentials
saves the new credential(s) and records the system call being employed
in a global buffer.
A signal handler in the receiving thread(s) fetches this information and
then uses the same system call to change its credentials.

Wrapper functions employing this technique are provided for
.BR setgid (2),
.BR setuid (2),
.BR setegid (2),
.BR seteuid (2),
.BR setregid (2),
.BR setreuid (2),
.BR setresgid (2),
.BR setresuid (2),
and
.BR setgroups (2).
.SH CONFORMING TO
For details of the conformance of NPTL to the POSIX standard, see
.BR pthreads (7).
.SH SEE ALSO
.BR credentials (7),
.BR pthreads (7),
.BR signal (7),
.BR standards (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2008, Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\" and Copyright 2003,2004 Andi Kleen, SuSE Labs.
.\" numa_maps material Copyright (c) 2005 Silicon Graphics Incorporated.
.\"     Christoph Lameter, <cl@linux-foundation.org>.
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH NUMA 7 2012-08-05 "Linux" "Linux Programmer's Manual"
.SH NAME
numa \- overview of Non-Uniform Memory Architecture
.SH DESCRIPTION
Non-Uniform Memory Access (NUMA) refers to multiprocessor systems
whose memory is divided into multiple memory nodes.
The access time of a memory node depends on
the relative locations of the accessing CPU and the accessed node.
(This contrasts with a symmetric multiprocessor system,
where the access time for all of the memory is the same for all CPUs.)
Normally, each CPU on a NUMA system has a local memory node whose
contents can be accessed faster than the memory in
the node local to another CPU
or the memory on a bus shared by all CPUs.
.SS NUMA system calls
The Linux kernel implements the following NUMA-related system calls:
.BR get_mempolicy (2),
.BR mbind (2),
.BR migrate_pages (2),
.BR move_pages (2),
and
.BR set_mempolicy (2).
However, applications should normally use the interface provided by
.IR libnuma ;
see "Library Support" below.
.SS /proc/[number]/numa_maps  (since Linux 2.6.14)
.\" See also Changelog-2.6.14
This file displays information about a process's
NUMA memory policy and allocation.

Each line contains information about a memory range used by the process,
displaying\(emamong other information\(emthe effective memory policy for
that memory range and on which nodes the pages have been allocated.

.I numa_maps
is a read-only file.
When
.I /proc/<pid>/numa_maps
is read, the kernel will scan the virtual address space of the
process and report how memory is used.
One line is displayed for each unique memory range of the process.

The first field of each line shows the starting address of the memory range.
This field allows a correlation with the contents of the
.I /proc/<pid>/maps
file,
which contains the end address of the range and other information,
such as the access permissions and sharing.

The second field shows the memory policy currently in effect for the
memory range.
Note that the effective policy is not necessarily the policy
installed by the process for that memory range.
Specifically, if the process installed a "default" policy for that range,
the effective policy for that range will be the process policy,
which may or may not be "default".

The rest of the line contains information about the pages allocated in
the memory range, as follows:
.TP
.I N<node>=<nr_pages>
The number of pages allocated on
.IR <node> .
.I <nr_pages>
includes only pages currently mapped by the process.
Page migration and memory reclaim may have temporarily unmapped pages
associated with this memory range.
These pages may show up again only after the process has
attempted to reference them.
If the memory range represents a shared memory area or file mapping,
other processes may currently have additional pages mapped in a
corresponding memory range.
.TP
.I file=<filename>
The file backing the memory range.
If the file is mapped as private, write accesses may have generated
COW (Copy-On-Write) pages in this memory range.
These pages are displayed as anonymous pages.
.TP
.I heap
Memory range is used for the heap.
.TP
.I stack
Memory range is used for the stack.
.TP
.I huge
Huge memory range.
The page counts shown are huge pages and not regular sized pages.
.TP
.I anon=<pages>
The number of anonymous page in the range.
.TP
.I dirty=<pages>
Number of dirty pages.
.TP
.I mapped=<pages>
Total number of mapped pages, if different from
.IR dirty
and
.I anon
pages.
.TP
.I mapmax=<count>
Maximum mapcount (number of processes mapping a single page) encountered
during the scan.
This may be used as an indicator of the degree of sharing occurring in a
given memory range.
.TP
.I swapcache=<count>
Number of pages that have an associated entry on a swap device.
.TP
.I active=<pages>
The number of pages on the active list.
This field is shown only if different from the number of pages in this range.
This means that some inactive pages exist in the memory range that may be
removed from memory by the swapper soon.
.TP
.I writeback=<pages>
Number of pages that are currently being written out to disk.
.SH CONFORMING TO
No standards govern NUMA interfaces.
.SH NOTES
The Linux NUMA system calls and
.I /proc
interface are available only
if the kernel was configured and built with the
.BR CONFIG_NUMA
option.
.SS Library support
Link with \fI\-lnuma\fP
to get the system call definitions.
.I libnuma
and the required
.I <numaif.h>
header are available in the
.I numactl
package.

However, applications should not use these system calls directly.
Instead, the higher level interface provided by the
.BR numa (3)
functions in the
.I numactl
package is recommended.
The
.I numactl
package is available at
.UR ftp://oss.sgi.com\:/www\:/projects\:/libnuma\:/download/
.UE .
The package is also included in some Linux distributions.
Some distributions include the development library and header
in the separate
.I numactl-devel
package.
.SH SEE ALSO
.BR get_mempolicy (2),
.BR mbind (2),
.BR move_pages (2),
.BR set_mempolicy (2),
.BR numa (3),
.BR cpuset (7),
.BR numactl (8)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1989, 1990, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" %%%LICENSE_START(BSD_3_CLAUSE_UCB)
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\" %%%LICENSE_END
.\"
.\"	@(#)operator.7	8.1 (Berkeley) 6/9/93
.\"
.\" Copied shamelessly from FreeBSD with minor changes. 2003-05-21
.\"     Brian M. Carlson <sandals@crustytoothpaste.ath.cx>
.\"
.\" Restored automatic formatting from FreeBSD.  2003-08-24
.\"	Martin Schulze <joey@infodrom.org>
.\"
.\" 2007-12-08, mtk, Converted from mdoc to man macros
.\"
.TH OPERATOR 7 2011-09-09 "Linux" "Linux Programmer's Manual"
.SH NAME
operator \- C operator precedence and order of evaluation
.SH DESCRIPTION
This manual page lists C operators and their precedence in evaluation.
.nf

.B "Operator                             Associativity"
() [] \-> .                           left to right
! ~ ++ \-\- + \- (type) * & sizeof      right to left
* / %                                left to right
+ \-                                  left to right
<< >>                                left to right
< <= > >=                            left to right
== !=                                left to right
&                                    left to right
^                                    left to right
|                                    left to right
&&                                   left to right
||                                   left to right
?:                                   right to left
= += \-= *= /= %= <<= >>= &= ^= |=    right to left
,                                    left to right
.fi
.\"
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" This man page is Copyright (C) 1999 Andi Kleen <ak@muc.de>.
.\"
.\" %%%LICENSE_START(VERBATIM_ONE_PARA)
.\" Permission is granted to distribute possibly modified copies
.\" of this page provided the header is included verbatim,
.\" and in case of nontrivial modification author and date
.\" of the modification is added to the header.
.\" %%%LICENSE_END
.\"
.\" $Id: packet.7,v 1.13 2000/08/14 08:03:45 ak Exp $
.\"
.TH PACKET  7 2015-05-07 "Linux" "Linux Programmer's Manual"
.SH NAME
packet \- packet interface on device level
.SH SYNOPSIS
.nf
.B #include <sys/socket.h>
.br
.B #include <linux/if_packet.h>
.br
.B #include <net/ethernet.h>     /* the L2 protocols */
.sp
.BI "packet_socket = socket(AF_PACKET, int " socket_type ", int "protocol );
.fi
.SH DESCRIPTION
Packet sockets are used to receive or send raw packets at the device driver
(OSI Layer 2) level.
They allow the user to implement protocol modules in user space
on top of the physical layer.

The
.I socket_type
is either
.B SOCK_RAW
for raw packets including the link-level header or
.B SOCK_DGRAM
for cooked packets with the link-level header removed.
The link-level header information is available in a common format in a
.IR sockaddr_ll
structure.
.I protocol
is the IEEE 802.3 protocol number in network byte order.
See the
.I <linux/if_ether.h>
include file for a list of allowed protocols.
When protocol
is set to
.BR htons(ETH_P_ALL) ,
then all protocols are received.
All incoming packets of that protocol type will be passed to the packet
socket before they are passed to the protocols implemented in the kernel.

Only processes with the
.B CAP_NET_RAW
capability may open packet sockets.

.B SOCK_RAW
packets are passed to and from the device driver without any changes in
the packet data.
When receiving a packet, the address is still parsed and
passed in a standard
.I sockaddr_ll
address structure.
When transmitting a packet, the user-supplied buffer
should contain the physical-layer header.
That packet is then
queued unmodified to the network driver of the interface defined by the
destination address.
Some device drivers always add other headers.
.B SOCK_RAW
is similar to but not compatible with the obsolete
.B AF_INET/SOCK_PACKET
of Linux 2.0.

.B SOCK_DGRAM
operates on a slightly higher level.
The physical header is removed before the packet is passed to the user.
Packets sent through a
.B SOCK_DGRAM
packet socket get a suitable physical-layer header based on the
information in the
.I sockaddr_ll
destination address before they are queued.

By default, all packets of the specified protocol type
are passed to a packet socket.
To get packets only from a specific interface use
.BR bind (2)
specifying an address in a
.I struct sockaddr_ll
to bind the packet socket to an interface.
Only the
.I sll_protocol
and the
.I sll_ifindex
address fields are used for purposes of binding.

The
.BR connect (2)
operation is not supported on packet sockets.

When the
.B MSG_TRUNC
flag is passed to
.BR recvmsg (2),
.BR recv (2),
or
.BR recvfrom (2),
the real length of the packet on the wire is always returned,
even when it is longer than the buffer.
.SS Address types
The
.I sockaddr_ll
structure is a device-independent physical-layer address.

.in +4n
.nf
struct sockaddr_ll {
    unsigned short sll_family;   /* Always AF_PACKET */
    unsigned short sll_protocol; /* Physical-layer protocol */
    int            sll_ifindex;  /* Interface number */
    unsigned short sll_hatype;   /* ARP hardware type */
    unsigned char  sll_pkttype;  /* Packet type */
    unsigned char  sll_halen;    /* Length of address */
    unsigned char  sll_addr[8];  /* Physical-layer address */
};
.fi
.in

The fields of this structure are as follows:
.IP * 3
.I sll_protocol
is the standard ethernet protocol type in network byte order as defined
in the
.I <linux/if_ether.h>
include file.
It defaults to the socket's protocol.
.IP *
.I sll_ifindex
is the interface index of the interface
(see
.BR netdevice (7));
0 matches any interface (only permitted for binding).
.I sll_hatype
is an ARP type as defined in the
.I <linux/if_arp.h>
include file.
.IP *
.I sll_pkttype
contains the packet type.
Valid types are
.B PACKET_HOST
for a packet addressed to the local host,
.B PACKET_BROADCAST
for a physical-layer broadcast packet,
.B PACKET_MULTICAST
for a packet sent to a physical-layer multicast address,
.B PACKET_OTHERHOST
for a packet to some other host that has been caught by a device driver
in promiscuous mode, and
.B PACKET_OUTGOING
for a packet originating from the local host that is looped back to a packet
socket.
These types make sense only for receiving.
.IP *
.I sll_addr
and
.I sll_halen
contain the physical-layer (e.g., IEEE 802.3) address and its length.
The exact interpretation depends on the device.
.PP
When you send packets, it is enough to specify
.IR sll_family ,
.IR sll_addr ,
.IR sll_halen ,
.IR sll_ifindex ,
and
.IR sll_protocol .
The other fields should be 0.
.I sll_hatype
and
.I sll_pkttype
are set on received packets for your information.
For bind, only
.I sll_protocol
and
.I sll_ifindex
are used.
.SS Socket options
Packet socket options are configured by calling
.BR setsockopt (2)
with level
.BR SOL_PACKET .
.TP
.BR PACKET_ADD_MEMBERSHIP
.PD 0
.TP
.BR PACKET_DROP_MEMBERSHIP
.PD
Packet sockets can be used to configure physical-layer multicasting
and promiscuous mode.
.B PACKET_ADD_MEMBERSHIP
adds a binding and
.B PACKET_DROP_MEMBERSHIP
drops it.
They both expect a
.I packet_mreq
structure as argument:

.in +4n
.nf
struct packet_mreq {
    int            mr_ifindex;    /* interface index */
    unsigned short mr_type;       /* action */
    unsigned short mr_alen;       /* address length */
    unsigned char  mr_address[8]; /* physical-layer address */
};
.fi
.in

.I mr_ifindex
contains the interface index for the interface whose status
should be changed.
The
.I mr_type
field specifies which action to perform.
.B PACKET_MR_PROMISC
enables receiving all packets on a shared medium (often known as
"promiscuous mode"),
.B PACKET_MR_MULTICAST
binds the socket to the physical-layer multicast group specified in
.I mr_address
and
.IR mr_alen ,
and
.B PACKET_MR_ALLMULTI
sets the socket up to receive all multicast packets arriving at
the interface.

In addition, the traditional ioctls
.BR SIOCSIFFLAGS ,
.BR SIOCADDMULTI ,
.B SIOCDELMULTI
can be used for the same purpose.
.TP
.BR PACKET_AUXDATA " (since Linux 2.6.21)"
.\" commit 8dc4194474159660d7f37c495e3fc3f10d0db8cc
If this binary option is enabled, the packet socket passes a metadata
structure along with each packet in the
.BR recvmsg (2)
control field.
The structure can be read with
.BR cmsg (3).
It is defined as

.in +4n
.nf
struct tpacket_auxdata {
    __u32 tp_status;
    __u32 tp_len;      /* packet length */
    __u32 tp_snaplen;  /* captured length */
    __u16 tp_mac;
    __u16 tp_net;
    __u16 tp_vlan_tci;
    __u16 tp_padding;
};
.fi
.in
.TP
.BR PACKET_FANOUT " (since Linux 3.1)"
.\" commit dc99f600698dcac69b8f56dda9a8a00d645c5ffc
To scale processing across threads, packet sockets can form a fanout
group.
In this mode, each matching packet is enqueued onto only one
socket in the group.
A socket joins a fanout group by calling
.BR setsockopt (2)
with level
.B SOL_PACKET
and option
.BR PACKET_FANOUT .
Each network namespace can have up to 65536 independent groups.
A socket selects a group by encoding the ID in the first 16 bits of
the integer option value.
The first packet socket to join a group implicitly creates it.
To successfully join an existing group, subsequent packet sockets
must have the same protocol, device settings, fanout mode and
flags (see below).
Packet sockets can leave a fanout group only by closing the socket.
The group is deleted when the last socket is closed.

Fanout supports multiple algorithms to spread traffic between sockets,
as follows:
.RS
.IP * 3
The default mode,
.BR PACKET_FANOUT_HASH ,
sends packets from the same flow to the same socket to maintain
per-flow ordering.
For each packet, it chooses a socket by taking the packet flow hash
modulo the number of sockets in the group, where a flow hash is a hash
over network-layer address and optional transport-layer port fields.
.IP *
The load-balance mode
.BR PACKET_FANOUT_LB
implements a round-robin algorithm.
.IP *
.BR PACKET_FANOUT_CPU
selects the socket based on the CPU that the packet arrived on.
.IP *
.BR PACKET_FANOUT_ROLLOVER
processes all data on a single socket, moving to the next when one
becomes backlogged.
.IP *
.BR PACKET_FANOUT_RND
selects the socket using a pseudo-random number generator.
.IP *
.BR PACKET_FANOUT_QM
.\" commit 2d36097d26b5991d71a2cf4a20c1a158f0f1bfcd
(available since Linux 3.14)
selects the socket using the recorded queue_mapping of the received skb.
.RE
.IP
Fanout modes can take additional options.
IP fragmentation causes packets from the same flow to have different
flow hashes.
The flag
.BR PACKET_FANOUT_FLAG_DEFRAG ,
if set, causes packets to be defragmented before fanout is applied, to
preserve order even in this case.
Fanout mode and options are communicated in the second 16 bits of the
integer option value.
The flag
.BR PACKET_FANOUT_FLAG_ROLLOVER
enables the roll over mechanism as a backup strategy: if the
original fanout algorithm selects a backlogged socket, the packet
rolls over to the next available one.
.TP
.BR PACKET_LOSS " (with " PACKET_TX_RING )
When a malformed packet is encountered on a transmit ring,
the default is to reset its
.I tp_status
to
.BR TP_STATUS_WRONG_FORMAT
and abort the transmission immediately.
The malformed packet blocks itself and subsequently enqueued packets from
being sent.
The format error must be fixed, the associated
.I tp_status
reset to
.BR TP_STATUS_SEND_REQUEST ,
and the transmission process restarted via
.BR send (2).
However, if
.BR PACKET_LOSS
is set, any malformed packet will be skipped, its
.I tp_status
reset to
.BR TP_STATUS_AVAILABLE ,
and the transmission process continued.
.TP
.BR PACKET_RESERVE " (with " PACKET_RX_RING )
By default, a packet receive ring writes packets immediately following the
metadata structure and alignment padding.
This integer option reserves additional headroom.
.TP
.BR PACKET_RX_RING
Create a memory-mapped ring buffer for asynchronous packet reception.
The packet socket reserves a contiguous region of application address
space, lays it out into an array of packet slots and copies packets
(up to
.IR tp_snaplen )
into subsequent slots.
Each packet is preceded by a metadata structure similar to
.IR tpacket_auxdata .
The protocol fields encode the offset to the data
from the start of the metadata header.
.I tp_net
stores the offset to the network layer.
If the packet socket is of type
.BR SOCK_DGRAM ,
then
.I tp_mac
is the same.
If it is of type
.BR SOCK_RAW ,
then that field stores the offset to the link-layer frame.
Packet socket and application communicate the head and tail of the ring
through the
.I tp_status
field.
The packet socket owns all slots with
.I tp_status
equal to
.BR TP_STATUS_KERNEL .
After filling a slot, it changes the status of the slot to transfer
ownership to the application.
During normal operation, the new
.I tp_status
value has at least the
.BR TP_STATUS_USER
bit set to signal that a received packet has been stored.
When the application has finished processing a packet, it transfers
ownership of the slot back to the socket by setting
.I tp_status
equal to
.BR TP_STATUS_KERNEL .

Packet sockets implement multiple variants of the packet ring.
The implementation details are described in
.IR Documentation/networking/packet_mmap.txt
in the Linux kernel source tree.
.TP
.BR PACKET_STATISTICS
Retrieve packet socket statistics in the form of a structure

.in +4n
.nf
struct tpacket_stats {
    unsigned int tp_packets;  /* Total packet count */
    unsigned int tp_drops;    /* Dropped packet count */
};
.fi
.in

Receiving statistics resets the internal counters.
The statistics structure differs when using a ring of variant
.BR TPACKET_V3 .
.TP
.BR PACKET_TIMESTAMP " (with " PACKET_RX_RING "; since Linux 2.6.36)"
.\" commit 614f60fa9d73a9e8fdff3df83381907fea7c5649
The packet receive ring always stores a timestamp in the metadata header.
By default, this is a software generated timestamp generated when the
packet is copied into the ring.
This integer option selects the type of timestamp.
Besides the default, it support the two hardware formats described in
.IR Documentation/networking/timestamping.txt
in the Linux kernel source tree.
.TP
.BR PACKET_TX_RING " (since Linux 2.6.31)"
.\" commit 69e3c75f4d541a6eb151b3ef91f34033cb3ad6e1
Create a memory-mapped ring buffer for packet transmission.
This option is similar to
.BR PACKET_RX_RING
and takes the same arguments.
The application writes packets into slots with
.I tp_status
equal to
.BR TP_STATUS_AVAILABLE
and schedules them for transmission by changing
.I tp_status
to
.BR TP_STATUS_SEND_REQUEST .
When packets are ready to be transmitted, the application calls
.BR send (2)
or a variant thereof.
The
.I buf
and
.I len
fields of this call are ignored.
If an address is passed using
.BR sendto (2)
or
.BR sendmsg (2),
then that overrides the socket default.
On successful transmission, the socket resets
.I tp_status
to
.BR TP_STATUS_AVAILABLE .
It immediately aborts the transmission on error unless
.BR PACKET_LOSS
is set.
.TP
.BR PACKET_VERSION " (with " PACKET_RX_RING "; since Linux 2.6.27)"
.\" commit bbd6ef87c544d88c30e4b762b1b61ef267a7d279
By default,
.BR PACKET_RX_RING
creates a packet receive ring of variant
.BR TPACKET_V1 .
To create another variant, configure the desired variant by setting this
integer option before creating the ring.
.TP
.BR PACKET_QDISC_BYPASS " (since Linux 3.14)"
.\" commit d346a3fae3ff1d99f5d0c819bf86edf9094a26a1
By default, packets sent through packet sockets pass through the kernel's
qdisc (traffic control) layer, which is fine for the vast majority of use
cases.
For traffic generator appliances using packet sockets
that intend to brute-force flood the network\(emfor example,
to test devices under load in a similar
fashion to pktgen\(emthis layer can be bypassed by setting
this integer option to 1.
A side effect is that packet buffering in the qdisc layer is avoided,
which will lead to increased drops when network
device transmit queues are busy;
therefore, use at your own risk.
.SS Ioctls
.B SIOCGSTAMP
can be used to receive the timestamp of the last received packet.
Argument is a
.I struct timeval
variable.
.\" FIXME Document SIOCGSTAMPNS

In addition, all standard ioctls defined in
.BR netdevice (7)
and
.BR socket (7)
are valid on packet sockets.
.SS Error handling
Packet sockets do no error handling other than errors occurred
while passing the packet to the device driver.
They don't have the concept of a pending error.
.SH ERRORS
.TP
.B EADDRNOTAVAIL
Unknown multicast group address passed.
.TP
.B EFAULT
User passed invalid memory address.
.TP
.B EINVAL
Invalid argument.
.TP
.B EMSGSIZE
Packet is bigger than interface MTU.
.TP
.B ENETDOWN
Interface is not up.
.TP
.B ENOBUFS
Not enough memory to allocate the packet.
.TP
.B ENODEV
Unknown device name or interface index specified in interface address.
.TP
.B ENOENT
No packet received.
.TP
.B ENOTCONN
No interface address passed.
.TP
.B ENXIO
Interface address contained an invalid interface index.
.TP
.B EPERM
User has insufficient privileges to carry out this operation.
.PP
In addition, other errors may be generated by the low-level driver.
.SH VERSIONS
.B AF_PACKET
is a new feature in Linux 2.2.
Earlier Linux versions supported only
.BR SOCK_PACKET .
.PP
.SH NOTES
For portable programs it is suggested to use
.B AF_PACKET
via
.BR pcap (3);
although this covers only a subset of the
.B AF_PACKET
features.

The
.B SOCK_DGRAM
packet sockets make no attempt to create or parse the IEEE 802.2 LLC
header for a IEEE 802.3 frame.
When
.B ETH_P_802_3
is specified as protocol for sending the kernel creates the
802.3 frame and fills out the length field; the user has to supply the LLC
header to get a fully conforming packet.
Incoming 802.3 packets are not multiplexed on the DSAP/SSAP protocol
fields; instead they are supplied to the user as protocol
.B ETH_P_802_2
with the LLC header prefixed.
It is thus not possible to bind to
.BR ETH_P_802_3 ;
bind to
.B ETH_P_802_2
instead and do the protocol multiplex yourself.
The default for sending is the standard Ethernet DIX
encapsulation with the protocol filled in.

Packet sockets are not subject to the input or output firewall chains.
.SS Compatibility
In Linux 2.0, the only way to get a packet socket was with the call:

    socket(AF_INET, SOCK_PACKET, protocol)

This is still supported, but deprecated and strongly discouraged.
The main difference between the two methods is that
.B SOCK_PACKET
uses the old
.I struct sockaddr_pkt
to specify an interface, which doesn't provide physical-layer
independence.

.in +4n
.nf
struct sockaddr_pkt {
    unsigned short spkt_family;
    unsigned char  spkt_device[14];
    unsigned short spkt_protocol;
};
.fi
.in

.I spkt_family
contains
the device type,
.I spkt_protocol
is the IEEE 802.3 protocol type as defined in
.I <sys/if_ether.h>
and
.I spkt_device
is the device name as a null-terminated string, for example, eth0.

This structure is obsolete and should not be used in new code.
.SH BUGS
The IEEE 802.2/803.3 LLC handling could be considered as a bug.

Socket filters are not documented.

The
.B MSG_TRUNC
.BR recvmsg (2)
extension is an ugly hack and should be replaced by a control message.
There is currently no way to get the original destination address of
packets via
.BR SOCK_DGRAM .
.\" .SH CREDITS
.\" This man page was written by Andi Kleen with help from Matthew Wilcox.
.\" AF_PACKET in Linux 2.2 was implemented
.\" by Alexey Kuznetsov, based on code by Alan Cox and others.
.SH SEE ALSO
.BR socket (2),
.BR pcap (3),
.BR capabilities (7),
.BR ip (7),
.BR raw (7),
.BR socket (7)

RFC\ 894 for the standard IP Ethernet encapsulation.
RFC\ 1700 for the IEEE 802.3 IP encapsulation.

The
.I <linux/if_ether.h>
include file for physical-layer protocols.

The Linux kernel source tree.
.IR /Documentation/networking/filter.txt
describes how to apply Berkeley Packet Filters to packet sockets.
.IR /tools/testing/selftests/net/psock_tpacket.c
contains example source code for all available versions of
.BR PACKET_RX_RING
and
.BR PACKET_TX_RING .
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2003 Andries Brouwer (aeb@cwi.nl)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH PATH_RESOLUTION 7 2009-12-05 "Linux" "Linux Programmer's Manual"
.SH NAME
path_resolution \- how a pathname is resolved to a file
.SH DESCRIPTION
Some UNIX/Linux system calls have as parameter one or more filenames.
A filename (or pathname) is resolved as follows.
.SS Step 1: start of the resolution process
If the pathname starts with the \(aq/\(aq character,
the starting lookup directory
is the root directory of the calling process.
(A process inherits its
root directory from its parent.
Usually this will be the root directory
of the file hierarchy.
A process may get a different root directory
by use of the
.BR chroot (2)
system call.
A process may get an entirely private mount namespace in case
it\(emor one of its ancestors\(emwas started by an invocation of the
.BR clone (2)
system call that had the
.B CLONE_NEWNS
flag set.)
This handles the \(aq/\(aq part of the pathname.

If the pathname does not start with the \(aq/\(aq character, the
starting lookup directory of the resolution process is the current working
directory of the process.
(This is also inherited from the parent.
It can be changed by use of the
.BR chdir (2)
system call.)

Pathnames starting with a \(aq/\(aq character are called absolute pathnames.
Pathnames not starting with a \(aq/\(aq are called relative pathnames.
.SS Step 2: walk along the path
Set the current lookup directory to the starting lookup directory.
Now, for each nonfinal component of the pathname, where a component
is a substring delimited by \(aq/\(aq characters, this component is looked up
in the current lookup directory.

If the process does not have search permission on
the current lookup directory,
an
.B EACCES
error is returned ("Permission denied").

If the component is not found, an
.B ENOENT
error is returned
("No such file or directory").

If the component is found, but is neither a directory nor a symbolic link,
an
.B ENOTDIR
error is returned ("Not a directory").

If the component is found and is a directory, we set the
current lookup directory to that directory, and go to the
next component.

If the component is found and is a symbolic link (symlink), we first
resolve this symbolic link (with the current lookup directory
as starting lookup directory).
Upon error, that error is returned.
If the result is not a directory, an
.B ENOTDIR
error is returned.
If the resolution of the symlink is successful and returns a directory,
we set the current lookup directory to that directory, and go to
the next component.
Note that the resolution process here involves recursion.
In order to protect the kernel against stack overflow, and also
to protect against denial of service, there are limits on the
maximum recursion depth, and on the maximum number of symbolic links
followed.
An
.B ELOOP
error is returned when the maximum is
exceeded ("Too many levels of symbolic links").
.\"
.\" presently: max recursion depth during symlink resolution: 5
.\" max total number of symbolic links followed: 40
.\" _POSIX_SYMLOOP_MAX is 8
.SS Step 3: find the final entry
The lookup of the final component of the pathname goes just like
that of all other components, as described in the previous step,
with two differences: (i) the final component need not be a
directory (at least as far as the path resolution process is
concerned\(emit may have to be a directory, or a nondirectory, because of
the requirements of the specific system call), and (ii) it
is not necessarily an error if the component is not found\(emmaybe
we are just creating it.
The details on the treatment
of the final entry are described in the manual pages of the specific
system calls.
.SS . and ..
By convention, every directory has the entries "." and "..",
which refer to the directory itself and to its parent directory,
respectively.

The path resolution process will assume that these entries have
their conventional meanings, regardless of whether they are
actually present in the physical filesystem.

One cannot walk down past the root: "/.." is the same as "/".
.SS Mount points
After a "mount dev path" command, the pathname "path" refers to
the root of the filesystem hierarchy on the device "dev", and no
longer to whatever it referred to earlier.

One can walk out of a mounted filesystem: "path/.." refers to
the parent directory of "path",
outside of the filesystem hierarchy on "dev".
.SS Trailing slashes
If a pathname ends in a \(aq/\(aq, that forces resolution of the preceding
component as in Step 2: it has to exist and resolve to a directory.
Otherwise, a trailing \(aq/\(aq is ignored.
(Or, equivalently, a pathname with a trailing \(aq/\(aq is equivalent to
the pathname obtained by appending \(aq.\(aq to it.)
.SS Final symlink
If the last component of a pathname is a symbolic link, then it
depends on the system call whether the file referred to will be
the symbolic link or the result of path resolution on its contents.
For example, the system call
.BR lstat (2)
will operate on the symlink, while
.BR stat (2)
operates on the file pointed to by the symlink.
.SS Length limit
There is a maximum length for pathnames.
If the pathname (or some
intermediate pathname obtained while resolving symbolic links)
is too long, an
.B ENAMETOOLONG
error is returned ("Filename too long").
.SS Empty pathname
In the original UNIX, the empty pathname referred to the current directory.
Nowadays POSIX decrees that an empty pathname must not be resolved
successfully.
Linux returns
.B ENOENT
in this case.
.SS Permissions
The permission bits of a file consist of three groups of three bits, cf.\&
.BR chmod (1)
and
.BR stat (2).
The first group of three is used when the effective user ID of
the calling process equals the owner ID of the file.
The second group
of three is used when the group ID of the file either equals the
effective group ID of the calling process, or is one of the
supplementary group IDs of the calling process (as set by
.BR setgroups (2)).
When neither holds, the third group is used.

Of the three bits used, the first bit determines read permission,
the second write permission, and the last execute permission
in case of ordinary files, or search permission in case of directories.

Linux uses the fsuid instead of the effective user ID in permission checks.
Ordinarily the fsuid will equal the effective user ID, but the fsuid can be
changed by the system call
.BR setfsuid (2).

(Here "fsuid" stands for something like "filesystem user ID".
The concept was required for the implementation of a user space
NFS server at a time when processes could send a signal to a process
with the same effective user ID.
It is obsolete now.
Nobody should use
.BR setfsuid (2).)

Similarly, Linux uses the fsgid ("filesystem group ID")
instead of the effective group ID.
See
.BR setfsgid (2).
.\" FIXME . say something about filesystem mounted read-only ?
.SS Bypassing permission checks: superuser and capabilities
On a traditional UNIX system, the superuser
.RI ( root ,
user ID 0) is all-powerful, and bypasses all permissions restrictions
when accessing files.
.\" (but for exec at least one x bit must be set) -- AEB
.\" but there is variation across systems on this point: for
.\" example, HP-UX and Tru64 are as described by AEB.  However,
.\" on some implementations (e.g., Solaris, FreeBSD),
.\" access(X_OK) by superuser will report success, regardless
.\" of the file's execute permission bits. -- MTK (Oct 05)

On Linux, superuser privileges are divided into capabilities (see
.BR capabilities (7)).
Two capabilities are relevant for file permissions checks:
.B CAP_DAC_OVERRIDE
and
.BR CAP_DAC_READ_SEARCH .
(A process has these capabilities if its fsuid is 0.)

The
.B CAP_DAC_OVERRIDE
capability overrides all permission checking,
but grants execute permission only when at least one
of the file's three execute permission bits is set.

The
.B CAP_DAC_READ_SEARCH
capability grants read and search permission
on directories, and read permission on ordinary files.
.\" FIXME . say something about immutable files
.\" FIXME . say something about ACLs
.SH SEE ALSO
.BR readlink (2),
.BR capabilities (7),
.BR credentials (7),
.BR symlink (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2013 by Michael Kerrisk <mtk.manpages@gmail.com>
.\" and Copyright (c) 2012 by Eric W. Biederman <ebiederm@xmission.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\"
.TH PID_NAMESPACES 7 2015-01-10 "Linux" "Linux Programmer's Manual"
.SH NAME
pid_namespaces \- overview of Linux PID namespaces
.SH DESCRIPTION
For an overview of namespaces, see
.BR namespaces (7).

PID namespaces isolate the process ID number space,
meaning that processes in different PID namespaces can have the same PID.
PID namespaces allow containers to provide functionality
such as suspending/resuming the set of processes in the container and
migrating the container to a new host
while the processes inside the container maintain the same PIDs.

PIDs in a new PID namespace start at 1,
somewhat like a standalone system, and calls to
.BR fork (2),
.BR vfork (2),
or
.BR clone (2)
will produce processes with PIDs that are unique within the namespace.

Use of PID namespaces requires a kernel that is configured with the
.B CONFIG_PID_NS
option.
.\"
.\" ============================================================
.\"
.SS The namespace "init" process
The first process created in a new namespace
(i.e., the process created using
.BR clone (2)
with the
.BR CLONE_NEWPID
flag, or the first child created by a process after a call to
.BR unshare (2)
using the
.BR CLONE_NEWPID
flag) has the PID 1, and is the "init" process for the namespace (see
.BR init (1)).
A child process that is orphaned within the namespace will be reparented
to this process rather than
.BR init (1)
(unless one of the ancestors of the child
in the same PID namespace employed the
.BR prctl (2)
.B PR_SET_CHILD_SUBREAPER
command to mark itself as the reaper of orphaned descendant processes).

If the "init" process of a PID namespace terminates,
the kernel terminates all of the processes in the namespace via a
.BR SIGKILL
signal.
This behavior reflects the fact that the "init" process
is essential for the correct operation of a PID namespace.
In this case, a subsequent
.BR fork (2)
into this PID namespace will fail with the error
.BR ENOMEM ;
it is not possible to create a new processes in a PID namespace whose "init"
process has terminated.
Such scenarios can occur when, for example,
a process uses an open file descriptor for a
.I /proc/[pid]/ns/pid
file corresponding to a process that was in a namespace to
.BR setns (2)
into that namespace after the "init" process has terminated.
Another possible scenario can occur after a call to
.BR unshare (2):
if the first child subsequently created by a
.BR fork (2)
terminates, then subsequent calls to
.BR fork (2)
will fail with
.BR ENOMEM .

Only signals for which the "init" process has established a signal handler
can be sent to the "init" process by other members of the PID namespace.
This restriction applies even to privileged processes,
and prevents other members of the PID namespace from
accidentally killing the "init" process.

Likewise, a process in an ancestor namespace
can\(emsubject to the usual permission checks described in
.BR kill (2)\(emsend
signals to the "init" process of a child PID namespace only
if the "init" process has established a handler for that signal.
(Within the handler, the
.I siginfo_t
.I si_pid
field described in
.BR sigaction (2)
will be zero.)
.B SIGKILL
or
.B SIGSTOP
are treated exceptionally:
these signals are forcibly delivered when sent from an ancestor PID namespace.
Neither of these signals can be caught by the "init" process,
and so will result in the usual actions associated with those signals
(respectively, terminating and stopping the process).

Starting with Linux 3.4, the
.BR reboot (2)
system call causes a signal to be sent to the namespace "init" process.
See
.BR reboot (2)
for more details.
.\"
.\" ============================================================
.\"
.SS Nesting PID namespaces
PID namespaces can be nested:
each PID namespace has a parent,
except for the initial ("root") PID namespace.
The parent of a PID namespace is the PID namespace of the process that
created the namespace using
.BR clone (2)
or
.BR unshare (2).
PID namespaces thus form a tree,
with all namespaces ultimately tracing their ancestry to the root namespace.

A process is visible to other processes in its PID namespace,
and to the processes in each direct ancestor PID namespace
going back to the root PID namespace.
In this context, "visible" means that one process
can be the target of operations by another process using
system calls that specify a process ID.
Conversely, the processes in a child PID namespace can't see
processes in the parent and further removed ancestor namespaces.
More succinctly: a process can see (e.g., send signals with
.BR kill (2),
set nice values with
.BR setpriority (2),
etc.) only processes contained in its own PID namespace
and in descendants of that namespace.

A process has one process ID in each of the layers of the PID
namespace hierarchy in which is visible,
and walking back though each direct ancestor namespace
through to the root PID namespace.
System calls that operate on process IDs always
operate using the process ID that is visible in the
PID namespace of the caller.
A call to
.BR getpid (2)
always returns the PID associated with the namespace in which
the process was created.

Some processes in a PID namespace may have parents
that are outside of the namespace.
For example, the parent of the initial process in the namespace
(i.e., the
.BR init (1)
process with PID 1) is necessarily in another namespace.
Likewise, the direct children of a process that uses
.BR setns (2)
to cause its children to join a PID namespace are in a different
PID namespace from the caller of
.BR setns (2).
Calls to
.BR getppid (2)
for such processes return 0.

While processes may freely descend into child PID namespaces
(e.g., using
.BR setns (2)
with
.BR CLONE_NEWPID ),
they may not move in the other direction.
That is to say, processes may not enter any ancestor namespaces
(parent, grandparent, etc.).
Changing PID namespaces is a one way operation.
.\"
.\" ============================================================
.\"
.SS setns(2) and unshare(2) semantics
Calls to
.BR setns (2)
that specify a PID namespace file descriptor
and calls to
.BR unshare (2)
with the
.BR CLONE_NEWPID
flag cause children subsequently created
by the caller to be placed in a different PID namespace from the caller.
These calls do not, however,
change the PID namespace of the calling process,
because doing so would change the caller's idea of its own PID
(as reported by
.BR getpid ()),
which would break many applications and libraries.

To put things another way:
a process's PID namespace membership is determined when the process is created
and cannot be changed thereafter.
Among other things, this means that the parental relationship
between processes mirrors the parental relationship between PID namespaces:
the parent of a process is either in the same namespace
or resides in the immediate parent PID namespace.
.SS Compatibility of CLONE_NEWPID with other CLONE_* flags
.BR CLONE_NEWPID
can't be combined with some other
.BR CLONE_*
flags:
.IP * 3
.B CLONE_THREAD
requires being in the same PID namespace in order that
the threads in a process can send signals to each other.
Similarly, it must be possible to see all of the threads
of a processes in the
.BR proc (5)
filesystem.
.IP *
.BR CLONE_SIGHAND
requires being in the same PID namespace;
otherwise the process ID of the process sending a signal
could not be meaningfully encoded when a signal is sent
(see the description of the
.I siginfo_t
type in
.BR sigaction (2)).
A signal queue shared by processes in multiple PID namespaces
will defeat that.
.IP *
.BR CLONE_VM
requires all of the threads to be in the same PID namespace,
because, from the point of view of a core dump,
if two processes share the same address space then they are threads and will
be core dumped together.
When a core dump is written, the PID of each
thread is written into the core dump.
Writing the process IDs could not meaningfully succeed
if some of the process IDs were in a parent PID namespace.
.PP
To summarize: there is a technical requirement for each of
.BR CLONE_THREAD ,
.BR CLONE_SIGHAND ,
and
.BR CLONE_VM
to share a PID namespace.
(Note furthermore that in
.BR clone (2)
requires
.BR CLONE_VM
to be specified if
.BR CLONE_THREAD
or
.BR CLONE_SIGHAND
is specified.)
Thus, call sequences such as the following will fail (with the error
.BR EINVAL ):

.nf
    unshare(CLONE_NEWPID);
    clone(..., CLONE_VM, ...);    /* Fails */

    setns(fd, CLONE_NEWPID);
    clone(..., CLONE_VM, ...);    /* Fails */

    clone(..., CLONE_VM, ...);
    setns(fd, CLONE_NEWPID);      /* Fails */

    clone(..., CLONE_VM, ...);
    unshare(CLONE_NEWPID);        /* Fails */
.fi
.\"
.\" ============================================================
.\"
.SS /proc and PID namespaces
A
.I /proc
filesystem shows (in the
.I /proc/PID
directories) only processes visible in the PID namespace
of the process that performed the mount, even if the
.I /proc
filesystem is viewed from processes in other namespaces.

After creating a new PID namespace,
it is useful for the child to change its root directory
and mount a new procfs instance at
.I /proc
so that tools such as
.BR ps (1)
work correctly.
If a new mount namespace is simultaneously created by including
.BR CLONE_NEWNS
in the
.IR flags
argument of
.BR clone (2)
or
.BR unshare (2),
then it isn't necessary to change the root directory:
a new procfs instance can be mounted directly over
.IR /proc .

From a shell, the command to mount
.I /proc
is:

    $ mount -t proc proc /proc

Calling
.BR readlink (2)
on the path
.I /proc/self
yields the process ID of the caller in the PID namespace of the procfs mount
(i.e., the PID namespace of the process that mounted the procfs).
This can be useful for introspection purposes,
when a process wants to discover its PID in other namespaces.
.\"
.\" ============================================================
.\"
.SS Miscellaneous
When a process ID is passed over a UNIX domain socket to a
process in a different PID namespace (see the description of
.B SCM_CREDENTIALS
in
.BR unix (7)),
it is translated into the corresponding PID value in
the receiving process's PID namespace.
.SH CONFORMING TO
Namespaces are a Linux-specific feature.
.SH EXAMPLE
See
.BR user_namespaces (7).
.SH SEE ALSO
.BR clone (2),
.BR setns (2),
.BR unshare (2),
.BR proc (5),
.BR credentials (7),
.BR capabilities (7),
.BR user_namespaces (7),
.BR switch_root (8)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2005 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH PIPE 7 2014-07-08 "Linux" "Linux Programmer's Manual"
.SH NAME
pipe \- overview of pipes and FIFOs
.SH DESCRIPTION
Pipes and FIFOs (also known as named pipes)
provide a unidirectional interprocess communication channel.
A pipe has a
.I read end
and a
.IR "write end" .
Data written to the write end of a pipe can be read
from the read end of the pipe.

A pipe is created using
.BR pipe (2),
which creates a new pipe and returns two file descriptors,
one referring to the read end of the pipe,
the other referring to the write end.
Pipes can be used to create a communication channel between related
processes; see
.BR pipe (2)
for an example.

A FIFO (short for First In First Out) has a name within the filesystem
(created using
.BR mkfifo (3)),
and is opened using
.BR open (2).
Any process may open a FIFO, assuming the file permissions allow it.
The read end is opened using the
.B O_RDONLY
flag; the write end is opened using the
.B O_WRONLY
flag.
See
.BR fifo (7)
for further details.
.IR Note :
although FIFOs have a pathname in the filesystem,
I/O on FIFOs does not involve operations on the underlying device
(if there is one).
.SS I/O on pipes and FIFOs
The only difference between pipes and FIFOs is the manner in which
they are created and opened.
Once these tasks have been accomplished,
I/O on pipes and FIFOs has exactly the same semantics.

If a process attempts to read from an empty pipe, then
.BR read (2)
will block until data is available.
If a process attempts to write to a full pipe (see below), then
.BR write (2)
blocks until sufficient data has been read from the pipe
to allow the write to complete.
Nonblocking I/O is possible by using the
.BR fcntl (2)
.B F_SETFL
operation to enable the
.B O_NONBLOCK
open file status flag.

The communication channel provided by a pipe is a
.IR "byte stream" :
there is no concept of message boundaries.

If all file descriptors referring to the write end of a pipe
have been closed, then an attempt to
.BR read (2)
from the pipe will see end-of-file
.RB ( read (2)
will return 0).
If all file descriptors referring to the read end of a pipe
have been closed, then a
.BR write (2)
will cause a
.B SIGPIPE
signal to be generated for the calling process.
If the calling process is ignoring this signal, then
.BR write (2)
fails with the error
.BR EPIPE .
An application that uses
.BR pipe (2)
and
.BR fork (2)
should use suitable
.BR close (2)
calls to close unnecessary duplicate file descriptors;
this ensures that end-of-file and
.BR SIGPIPE / EPIPE
are delivered when appropriate.

It is not possible to apply
.BR lseek (2)
to a pipe.
.SS Pipe capacity
A pipe has a limited capacity.
If the pipe is full, then a
.BR write (2)
will block or fail, depending on whether the
.B O_NONBLOCK
flag is set (see below).
Different implementations have different limits for the pipe capacity.
Applications should not rely on a particular capacity:
an application should be designed so that a reading process consumes data
as soon as it is available,
so that a writing process does not remain blocked.

In Linux versions before 2.6.11, the capacity of a pipe was the same as
the system page size (e.g., 4096 bytes on i386).
Since Linux 2.6.11, the pipe capacity is 65536 bytes.
Since Linux 2.6.35, the default pipe capacity is 65536 bytes,
but the capacity can be queried and set using the
.BR fcntl (2)
.BR F_GETPIPE_SZ
and
.BR F_SETPIPE_SZ
operations.
See
.BR fcntl (2)
for more information.

.SS PIPE_BUF
POSIX.1-2001 says that
.BR write (2)s
of less than
.B PIPE_BUF
bytes must be atomic: the output data is written to the pipe as a
contiguous sequence.
Writes of more than
.B PIPE_BUF
bytes may be nonatomic: the kernel may interleave the data
with data written by other processes.
POSIX.1-2001 requires
.B PIPE_BUF
to be at least 512 bytes.
(On Linux,
.B PIPE_BUF
is 4096 bytes.)
The precise semantics depend on whether the file descriptor is nonblocking
.RB ( O_NONBLOCK ),
whether there are multiple writers to the pipe, and on
.IR n ,
the number of bytes to be written:
.TP
\fBO_NONBLOCK\fP disabled, \fIn\fP <= \fBPIPE_BUF\fP
All
.I n
bytes are written atomically;
.BR write (2)
may block if there is not room for
.I n
bytes to be written immediately
.TP
\fBO_NONBLOCK\fP enabled, \fIn\fP <= \fBPIPE_BUF\fP
If there is room to write
.I n
bytes to the pipe, then
.BR write (2)
succeeds immediately, writing all
.I n
bytes; otherwise
.BR write (2)
fails, with
.I errno
set to
.BR EAGAIN .
.TP
\fBO_NONBLOCK\fP disabled, \fIn\fP > \fBPIPE_BUF\fP
The write is nonatomic: the data given to
.BR write (2)
may be interleaved with
.BR write (2)s
by other process;
the
.BR write (2)
blocks until
.I n
bytes have been written.
.TP
\fBO_NONBLOCK\fP enabled, \fIn\fP > \fBPIPE_BUF\fP
If the pipe is full, then
.BR write (2)
fails, with
.I errno
set to
.BR EAGAIN .
Otherwise, from 1 to
.I n
bytes may be written (i.e., a "partial write" may occur;
the caller should check the return value from
.BR write (2)
to see how many bytes were actually written),
and these bytes may be interleaved with writes by other processes.
.SS Open file status flags
The only open file status flags that can be meaningfully applied to
a pipe or FIFO are
.B O_NONBLOCK
and
.BR O_ASYNC .

Setting the
.B O_ASYNC
flag for the read end of a pipe causes a signal
.RB ( SIGIO
by default) to be generated when new input becomes available on the pipe
(see
.BR fcntl (2)
for details).
On Linux,
.B O_ASYNC
is supported for pipes and FIFOs only since kernel 2.6.
.SS Portability notes
On some systems (but not Linux), pipes are bidirectional:
data can be transmitted in both directions between the pipe ends.
According to POSIX.1-2001, pipes need only need be unidirectional.
Portable applications should avoid reliance on
bidirectional pipe semantics.
.SH SEE ALSO
.BR dup (2),
.BR fcntl (2),
.BR open (2),
.BR pipe (2),
.BR poll (2),
.BR select (2),
.BR socketpair (2),
.BR stat (2),
.BR mkfifo (3),
.BR epoll (7),
.BR fifo (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2003 Andries Brouwer (aeb@cwi.nl)
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.TH POSIXOPTIONS 7 2007-12-21 "" "Linux Programmer's Manual"
.SH NAME
posixoptions \- optional parts of the POSIX standard
.SH DESCRIPTION
The POSIX standard (the information below is from POSIX.1-2001)
describes a set of behaviors and interfaces for a compliant system.
However, many interfaces are optional and there are feature test macros
to test the availability of interfaces at compile time, and functions
.BR sysconf (3),
.BR fpathconf (3),
.BR pathconf (3),
.BR confstr (3)
to do this at run time.
From shell scripts one can use
.BR getconf (1).
For more detail, see
.BR sysconf (3).
.LP
We give the name of the POSIX abbreviation, the option, the name of the
.BR sysconf (3)
parameter used to inquire about the option, and possibly
a very short description.
Much more precise detail can be found in the POSIX standard itself,
versions of which can nowadays be accessed freely on the web.
.SS ADV - _POSIX_ADVISORY_INFO - _SC_ADVISORY_INFO
The following advisory functions are present:
.br
.nf
.in +4

.IR posix_fadvise (),
.IR posix_fallocate (),
.IR posix_memalign (),
.IR posix_madvise ().
.br
.in -4
.fi
.SS AIO - _POSIX_ASYNCHRONOUS_IO - _SC_ASYNCHRONOUS_IO
The header
.I <aio.h>
is present.
The following functions are present:
.br
.nf
.in +4

.IR aio_cancel (),
.IR aio_error (),
.IR aio_fsync (),
.IR aio_read (),
.IR aio_return (),
.IR aio_suspend (),
.IR aio_write (),
.IR lio_listio ().
.br
.in -4
.fi
.SS BAR - _POSIX_BARRIERS - _SC_BARRIERS
This option implies the
.B _POSIX_THREADS
and
.B _POSIX_THREAD_SAFE_FUNCTIONS
options.
The following functions are present:
.br
.nf
.in +4

.IR pthread_barrier_destroy (),
.IR pthread_barrier_init (),
.IR pthread_barrier_wait (),
.IR pthread_barrierattr_destroy (),
.IR pthread_barrierattr_init ().
.in -4
.br
.fi
.\" .SS BE
.\" Batch environment.
.\" .SS CD
.\" C development.
.SS --- - POSIX_CHOWN_RESTRICTED
If this option is in effect (as it always is under POSIX.1-2001),
then only root may change the owner of a file, and nonroot can
set the group of a file only to one of the groups it belongs to.
This affects the functions
.IR chown (),
.IR fchown ().
.\" What about lchown() ?
.SS CS - _POSIX_CLOCK_SELECTION - _SC_CLOCK_SELECTION
This option implies the
.B _POSIX_TIMERS
option.
The following functions are present:
.br
.nf
.in +4

.IR pthread_condattr_getclock (),
.IR pthread_condattr_setclock (),
.IR clock_nanosleep ().
.in -4

.fi
If
.B CLOCK_REALTIME
is changed by the function
.IR clock_settime (),
then this affects all timers set for an absolute time.
.SS CPT - _POSIX_CPUTIME - _SC_CPUTIME
The clockID CLOCK_PROCESS_CPUTIME_ID is supported.
The initial value of this clock is 0 for each process.
This option implies the
.B _POSIX_TIMERS
option.
The function
.IR clock_getcpuclockid ()
is present.
.\" .SS FD
.\" Fortran development
.\" .SS FR
.\" Fortran runtime
.SS --- - _POSIX_FILE_LOCKING - _SC_FILE_LOCKING
This option has been deleted.
Not in final XPG6.
.SS FSC - _POSIX_FSYNC - _SC_FSYNC
The function
.IR fsync ()
is present.
.SS IP6 - _POSIX_IPV6 - _SC_IPV6
Internet Protocol Version 6 is supported.
.SS --- - _POSIX_JOB_CONTROL - _SC_JOB_CONTROL
If this option is in effect (as it always is under POSIX.1-2001),
then the system implements POSIX-style job control,
and the following functions are present:
.br
.nf
.in +4

.IR setpgid (),
.IR tcdrain (),
.IR tcflush (),
.IR tcgetpgrp (),
.IR tcsendbreak (),
.IR tcsetattr (),
.IR tcsetpgrp ().
.in -4
.fi
.SS MF - _POSIX_MAPPED_FILES - _SC_MAPPED_FILES
Shared memory is supported.
The include file
.I <sys/mman.h>
is present.
The following functions are present:
.IR mmap (),
.IR msync (),
.IR munmap ().
.SS ML - _POSIX_MEMLOCK - _SC_MEMLOCK
Shared memory can be locked into core.
The functions
.IR mlockall (),
.IR munlockall ()
are present.
.SS MR/MLR - _POSIX_MEMLOCK_RANGE - _SC_MEMLOCK_RANGE
More precisely, ranges can be locked into core.
The functions
.IR mlock (),
.IR munlock ()
are present.
.SS MPR - _POSIX_MEMORY_PROTECTION - _SC_MEMORY_PROTECTION
The function
.IR mprotect ()
is present.
.SS MSG - _POSIX_MESSAGE_PASSING - _SC_MESSAGE_PASSING
The include file
.I <mqueue.h>
is present.
The following functions are present:
.br
.nf
.in +4

.IR mq_close (),
.IR mq_getattr (),
.IR mq_notify (),
.IR mq_open (),
.IR mq_receive (),
.IR mq_send (),
.IR mq_setattr (),
.IR mq_unlink ().
.br
.in -4
.fi
.SS MON - _POSIX_MONOTONIC_CLOCK - _SC_MONOTONIC_CLOCK
.B CLOCK_MONOTONIC
is supported.
This option implies the
.B _POSIX_TIMERS
option.
Affected functions are
.nf
.in +4

.IR aio_suspend (),
.IR clock_getres (),
.IR clock_gettime (),
.IR clock_settime (),
.IR timer_create ().
.in -4
.fi
.SS --- - _POSIX_MULTI_PROCESS - _SC_MULTI_PROCESS
This option has been deleted.
Not in final XPG6.
.\" .SS MX
.\" IEC 60559 Floating-Point Option.
.SS --- - _POSIX_NO_TRUNC
If this option is in effect (as it always is under POSIX.1-2001)
then pathname components longer than
.B NAME_MAX
are not truncated,
but give an error.
This property may be dependent on the path prefix of the component.
.SS PIO - _POSIX_PRIORITIZED_IO - _SC_PRIORITIZED_IO
This option says that one can specify priorities for asynchronous I/O.
This affects the functions
.br
.nf
.in +4

.IR aio_read (),
.IR aio_write ().
.in -4
.fi
.SS PS - _POSIX_PRIORITY_SCHEDULING - _SC_PRIORITY_SCHEDULING
The include file
.I <sched.h>
is present.
The following functions are present:
.br
.nf
.in +4

.IR sched_get_priority_max (),
.IR sched_get_priority_min (),
.IR sched_getparam (),
.IR sched_getscheduler (),
.IR sched_rr_get_interval (),
.IR sched_setparam (),
.IR sched_setscheduler (),
.IR sched_yield ().
.in -4

.fi
If also
.B _POSIX_SPAWN
is in effect, then the following functions are present:
.br
.nf
.in +4

.IR posix_spawnattr_getschedparam (),
.IR posix_spawnattr_getschedpolicy (),
.IR posix_spawnattr_setschedparam (),
.IR posix_spawnattr_setschedpolicy ().
.in -4
.fi
.SS RS - _POSIX_RAW_SOCKETS
Raw sockets are supported.
Affected functions are
.IR getsockopt (),
.IR setsockopt ().
.SS --- - _POSIX_READER_WRITER_LOCKS - _SC_READER_WRITER_LOCKS
This option implies the
.B _POSIX_THREADS
option.
Conversely,
under POSIX.1-2001 the
.B _POSIX_THREADS
option implies this option.
.nf
The following functions are present:
.in +4

.IR pthread_rwlock_destroy (),
.IR pthread_rwlock_init (),
.IR pthread_rwlock_rdlock (),
.IR pthread_rwlock_tryrdlock (),
.IR pthread_rwlock_trywrlock (),
.IR pthread_rwlock_unlock (),
.IR pthread_rwlock_wrlock (),
.IR pthread_rwlockattr_destroy (),
.IR pthread_rwlockattr_init ().
.in -4
.fi
.SS RTS - _POSIX_REALTIME_SIGNALS - _SC_REALTIME_SIGNALS
Realtime signals are supported.
The following functions are present:
.br
.nf
.in +4

.IR sigqueue (),
.IR sigtimedwait (),
.IR sigwaitinfo ().
.br
.in -4
.fi
.SS --- - _POSIX_REGEXP - _SC_REGEXP
If this option is in effect (as it always is under POSIX.1-2001)
then POSIX regular expressions are supported
and the following functions are present:
.br
.nf
.in +4

.IR regcomp (),
.IR regerror (),
.IR regexec (),
.IR regfree ().
.br
.in -4
.fi
.SS --- - _POSIX_SAVED_IDS - _SC_SAVED_IDS
If this option is in effect (as it always is under POSIX.1-2001),
then a process has a saved set-user-ID and a saved set-group-ID.
Affected functions are
.br
.nf
.in +4

.IR exec (),
.IR kill (),
.IR seteuid (),
.IR setegid (),
.IR setgid (),
.IR setuid ().
.br
.in -4
.fi
.\" .SS SD
.\" Software development
.SS SEM - _POSIX_SEMAPHORES - _SC_SEMAPHORES
The include file
.I <semaphore.h>
is present.
The following functions are present:
.br
.nf
.in +4

.IR sem_close (),
.IR sem_destroy (),
.IR sem_getvalue (),
.IR sem_init (),
.IR sem_open (),
.IR sem_post (),
.IR sem_trywait (),
.IR sem_unlink (),
.IR sem_wait ().
.br
.in -4
.fi
.SS SHM - _POSIX_SHARED_MEMORY_OBJECTS - _SC_SHARED_MEMORY_OBJECTS
The following functions are present:
.br
.nf
.in +4

.IR mmap (),
.IR munmap (),
.IR shm_open (),
.IR shm_unlink ().
.br
.in -4
.fi
.SS --- - _POSIX_SHELL - _SC_SHELL
If this option is in effect (as it always is under POSIX.1-2001),
the function
.IR system ()
is present.
.SS SPN - _POSIX_SPAWN - _SC_SPAWN
This option describes support for process creation in a context where
it is difficult or impossible to use
.IR fork (),
for example, because no MMU is present.
If
.B _POSIX_SPAWN
is in effect, then the include file
.I <spawn.h>
and the following functions are present:
.br
.nf
.in +4

.IR posix_spawn (),
.IR posix_spawn_file_actions_addclose (),
.IR posix_spawn_file_actions_adddup2 (),
.IR posix_spawn_file_actions_addopen (),
.IR posix_spawn_file_actions_destroy (),
.IR posix_spawn_file_actions_init (),
.IR posix_spawnattr_destroy (),
.IR posix_spawnattr_getsigdefault (),
.IR posix_spawnattr_getflags (),
.IR posix_spawnattr_getpgroup (),
.IR posix_spawnattr_getsigmask (),
.IR posix_spawnattr_init (),
.IR posix_spawnattr_setsigdefault (),
.IR posix_spawnattr_setflags (),
.IR posix_spawnattr_setpgroup (),
.IR posix_spawnattr_setsigmask (),
.IR posix_spawnp ().
.in -4
.br
.fi
If also
.B _POSIX_PRIORITY_SCHEDULING
is in effect, then
the following functions are present:
.br
.nf
.in +4

.IR posix_spawnattr_getschedparam (),
.IR posix_spawnattr_getschedpolicy (),
.IR posix_spawnattr_setschedparam (),
.IR posix_spawnattr_setschedpolicy ().
.in -4
.fi
.SS SPI - _POSIX_SPIN_LOCKS - _SC_SPIN_LOCKS
This option implies the
.B _POSIX_THREADS
and
.B _POSIX_THREAD_SAFE_FUNCTIONS
options.
The following functions are present:
.br
.nf
.in +4

.IR pthread_spin_destroy (),
.IR pthread_spin_init (),
.IR pthread_spin_lock (),
.IR pthread_spin_trylock (),
.IR pthread_spin_unlock ().
.in -4
.br
.fi
.SS SS - _POSIX_SPORADIC_SERVER - _SC_SPORADIC_SERVER
The scheduling policy
.B SCHED_SPORADIC
is supported.
This option implies the
.B _POSIX_PRIORITY_SCHEDULING
option.
Affected functions are
.br
.nf
.in +4

.IR sched_setparam (),
.IR sched_setscheduler ().
.in -4
.br
.fi
.SS SIO - _POSIX_SYNCHRONIZED_IO - _SC_SYNCHRONIZED_IO
Affected functions are
.IR open (),
.IR msync (),
.IR fsync (),
.IR fdatasync ().
.SS TSA - _POSIX_THREAD_ATTR_STACKADDR - _SC_THREAD_ATTR_STACKADDR
Affected functions are
.br
.nf
.in +4

.IR pthread_attr_getstack (),
.IR pthread_attr_getstackaddr (),
.IR pthread_attr_setstack (),
.IR pthread_attr_setstackaddr ().
.in -4
.br
.fi
.SS TSS - _POSIX_THREAD_ATTR_STACKSIZE - _SC_THREAD_ATTR_STACKSIZE
Affected functions are
.br
.nf
.in +4

.IR pthread_attr_getstack (),
.IR pthread_attr_getstacksize (),
.IR pthread_attr_setstack (),
.IR pthread_attr_setstacksize ().
.in -4
.br
.fi
.SS TCT - _POSIX_THREAD_CPUTIME - _SC_THREAD_CPUTIME
The clockID CLOCK_THREAD_CPUTIME_ID is supported.
This option implies the
.B _POSIX_TIMERS
option.
Affected functions are
.br
.nf
.in +4

.IR pthread_getcpuclockid (),
.IR clock_getres (),
.IR clock_gettime (),
.IR clock_settime (),
.IR timer_create ().
.in -4
.br
.fi
.SS TPI - _POSIX_THREAD_PRIO_INHERIT - _SC_THREAD_PRIO_INHERIT
Affected functions are
.br
.nf
.in +4

.IR pthread_mutexattr_getprotocol (),
.IR pthread_mutexattr_setprotocol ().
.in -4
.br
.fi
.SS TPP - _POSIX_THREAD_PRIO_PROTECT - _SC_THREAD_PRIO_PROTECT
Affected functions are
.br
.nf
.in +4

.IR pthread_mutex_getprioceiling (),
.IR pthread_mutex_setprioceiling (),
.IR pthread_mutexattr_getprioceiling (),
.IR pthread_mutexattr_getprotocol (),
.IR pthread_mutexattr_setprioceiling (),
.IR pthread_mutexattr_setprotocol ().
.in -4
.br
.fi
.SS TPS - _POSIX_THREAD_PRIORITY_SCHEDULING - _SC_THREAD_PRIORITY_SCHEDULING
If this option is in effect, the different threads inside a process
can run with different priorities and/or different schedulers.
Affected functions are
.br
.nf
.in +4

.IR pthread_attr_getinheritsched (),
.IR pthread_attr_getschedpolicy (),
.IR pthread_attr_getscope (),
.IR pthread_attr_setinheritsched (),
.IR pthread_attr_setschedpolicy (),
.IR pthread_attr_setscope (),
.IR pthread_getschedparam (),
.IR pthread_setschedparam (),
.IR pthread_setschedprio ().
.in -4
.br
.fi
.SS TSH - _POSIX_THREAD_PROCESS_SHARED - _SC_THREAD_PROCESS_SHARED
Affected functions are
.br
.nf
.in +4

.IR pthread_barrierattr_getpshared (),
.IR pthread_barrierattr_setpshared (),
.IR pthread_condattr_getpshared (),
.IR pthread_condattr_setpshared (),
.IR pthread_mutexattr_getpshared (),
.IR pthread_mutexattr_setpshared (),
.IR pthread_rwlockattr_getpshared (),
.IR pthread_rwlockattr_setpshared ().
.in -4
.br
.fi
.SS TSF - _POSIX_THREAD_SAFE_FUNCTIONS - _SC_THREAD_SAFE_FUNCTIONS
Affected functions are
.br
.nf
.in +4

.IR readdir_r (),
.IR getgrgid_r (),
.IR getgrnam_r (),
.IR getpwnam_r (),
.IR getpwuid_r (),
.IR flockfile (),
.IR ftrylockfile (),
.IR funlockfile (),
.IR getc_unlocked (),
.IR getchar_unlocked (),
.IR putc_unlocked (),
.IR putchar_unlocked (),
.IR rand_r (),
.IR strerror_r (),
.IR strtok_r (),
.IR asctime_r (),
.IR ctime_r (),
.IR gmtime_r (),
.IR localtime_r ().
.in -4
.br
.fi
.SS TSP - _POSIX_THREAD_SPORADIC_SERVER - _SC_THREAD_SPORADIC_SERVER
This option implies the
.B _POSIX_THREAD_PRIORITY_SCHEDULING
option.
Affected functions are
.br
.nf
.in +4

.IR sched_getparam (),
.IR sched_setparam (),
.IR sched_setscheduler ().
.in -4
.br
.fi
.SS THR - _POSIX_THREADS - _SC_THREADS
Basic support for POSIX threads is available.
The following functions are present:
.br
.nf
.in +4

.IR pthread_atfork (),
.IR pthread_attr_destroy (),
.IR pthread_attr_getdetachstate (),
.IR pthread_attr_getschedparam (),
.IR pthread_attr_init (),
.IR pthread_attr_setdetachstate (),
.IR pthread_attr_setschedparam (),
.IR pthread_cancel (),
.IR pthread_cleanup_push (),
.IR pthread_cleanup_pop (),
.IR pthread_cond_broadcast (),
.IR pthread_cond_destroy (),
.IR pthread_cond_init (),
.IR pthread_cond_signal (),
.IR pthread_cond_timedwait (),
.IR pthread_cond_wait (),
.IR pthread_condattr_destroy (),
.IR pthread_condattr_init (),
.IR pthread_create (),
.IR pthread_detach (),
.IR pthread_equal (),
.IR pthread_exit (),
.IR pthread_getspecific (),
.IR pthread_join (),
.IR pthread_key_create (),
.IR pthread_key_delete (),
.IR pthread_mutex_destroy (),
.IR pthread_mutex_init (),
.IR pthread_mutex_lock (),
.IR pthread_mutex_trylock (),
.IR pthread_mutex_unlock (),
.IR pthread_mutexattr_destroy (),
.IR pthread_mutexattr_init (),
.IR pthread_once (),
.IR pthread_rwlock_destroy (),
.IR pthread_rwlock_init (),
.IR pthread_rwlock_rdlock (),
.IR pthread_rwlock_tryrdlock (),
.IR pthread_rwlock_trywrlock (),
.IR pthread_rwlock_unlock (),
.IR pthread_rwlock_wrlock (),
.IR pthread_rwlockattr_destroy (),
.IR pthread_rwlockattr_init (),
.IR pthread_self (),
.IR pthread_setcancelstate (),
.IR pthread_setcanceltype (),
.IR pthread_setspecific (),
.IR pthread_testcancel ().
.in -4
.br
.fi
.SS TMO - _POSIX_TIMEOUTS - _SC_TIMEOUTS
The following functions are present:
.br
.nf
.in +4

.IR mq_timedreceive (),
.IR mq_timedsend (),
.IR pthread_mutex_timedlock (),
.IR pthread_rwlock_timedrdlock (),
.IR pthread_rwlock_timedwrlock (),
.IR sem_timedwait (),
.IR posix_trace_timedgetnext_event ().
.in -4
.br
.fi
.SS TMR - _POSIX_TIMERS - _SC_TIMERS
The following functions are present:
.br
.nf
.in +4

.IR clock_getres (),
.IR clock_gettime (),
.IR clock_settime (),
.IR nanosleep (),
.IR timer_create (),
.IR timer_delete (),
.IR timer_gettime (),
.IR timer_getoverrun (),
.IR timer_settime ().
.in -4
.br
.fi
.SS TRC - _POSIX_TRACE - _SC_TRACE
POSIX tracing is available.
The following functions are present:
.br
.nf
.in +4

.IR posix_trace_attr_destroy (),
.IR posix_trace_attr_getclockres (),
.IR posix_trace_attr_getcreatetime (),
.IR posix_trace_attr_getgenversion (),
.IR posix_trace_attr_getmaxdatasize (),
.IR posix_trace_attr_getmaxsystemeventsize (),
.IR posix_trace_attr_getmaxusereventsize (),
.IR posix_trace_attr_getname (),
.IR posix_trace_attr_getstreamfullpolicy (),
.IR posix_trace_attr_getstreamsize (),
.IR posix_trace_attr_init (),
.IR posix_trace_attr_setmaxdatasize (),
.IR posix_trace_attr_setname (),
.IR posix_trace_attr_setstreamsize (),
.IR posix_trace_attr_setstreamfullpolicy (),
.IR posix_trace_clear (),
.IR posix_trace_create (),
.IR posix_trace_event (),
.IR posix_trace_eventid_equal (),
.IR posix_trace_eventid_get_name (),
.IR posix_trace_eventid_open (),
.IR posix_trace_eventtypelist_getnext_id (),
.IR posix_trace_eventtypelist_rewind (),
.IR posix_trace_flush (),
.IR posix_trace_get_attr (),
.IR posix_trace_get_status (),
.IR posix_trace_getnext_event (),
.IR posix_trace_shutdown (),
.IR posix_trace_start (),
.IR posix_trace_stop (),
.IR posix_trace_trygetnext_event ().
.in -4
.br
.fi
.SS TEF - _POSIX_TRACE_EVENT_FILTER - _SC_TRACE_EVENT_FILTER
This option implies the
.B _POSIX_TRACE
option.
The following functions are present:
.br
.nf
.in +4

.IR posix_trace_eventset_add (),
.IR posix_trace_eventset_del (),
.IR posix_trace_eventset_empty (),
.IR posix_trace_eventset_fill (),
.IR posix_trace_eventset_ismember (),
.IR posix_trace_get_filter (),
.IR posix_trace_set_filter (),
.IR posix_trace_trid_eventid_open ().
.in -4
.br
.fi
.SS TRI - _POSIX_TRACE_INHERIT - _SC_TRACE_INHERIT
Tracing children of the traced process is supported.
This option implies the
.B _POSIX_TRACE
option.
The following functions are present:
.br
.nf
.in +4

.IR posix_trace_attr_getinherited (),
.IR posix_trace_attr_setinherited ().
.in -4
.br
.fi
.SS TRL - _POSIX_TRACE_LOG - _SC_TRACE_LOG
This option implies the
.B _POSIX_TRACE
option.
The following functions are present:
.br
.nf
.in +4

.IR posix_trace_attr_getlogfullpolicy (),
.IR posix_trace_attr_getlogsize (),
.IR posix_trace_attr_setlogfullpolicy (),
.IR posix_trace_attr_setlogsize (),
.IR posix_trace_close (),
.IR posix_trace_create_withlog (),
.IR posix_trace_open (),
.IR posix_trace_rewind ().
.in -4
.br
.fi
.SS TYM - _POSIX_TYPED_MEMORY_OBJECTS - _SC_TYPED_MEMORY_OBJECT
The following functions are present:
.br
.nf
.in +4

.IR posix_mem_offset (),
.IR posix_typed_mem_get_info (),
.IR posix_typed_mem_open ().
.in -4
.br
.fi
.SS --- - _POSIX_VDISABLE
Always present (probably 0).
Value to set a changeable special control
character to indicate that it is disabled.
.SH XOPEN EXTENSIONS
.BR _XOPEN_CRYPT ,
.BR _XOPEN_LEGACY ,
.BR _XOPEN_REALTIME ,
.BR _XOPEN_REALTIME_THREADS ,
.BR _XOPEN_UNIX .
.\" To be described.
.SH SEE ALSO
.BR sysconf (3),
.BR standards (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
'\" t
.\" Copyright (c) 2005 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH PTHREADS 7  2015-05-07 "Linux" "Linux Programmer's Manual"
.SH NAME
pthreads \- POSIX threads
.SH DESCRIPTION
POSIX.1 specifies a set of interfaces (functions, header files) for
threaded programming commonly known as POSIX threads, or Pthreads.
A single process can contain multiple threads,
all of which are executing the same program.
These threads share the same global memory (data and heap segments),
but each thread has its own stack (automatic variables).

POSIX.1 also requires that threads share a range of other attributes
(i.e., these attributes are process-wide rather than per-thread):
.IP \- 3
process ID
.IP \- 3
parent process ID
.IP \- 3
process group ID and session ID
.IP \- 3
controlling terminal
.IP \- 3
user and group IDs
.IP \- 3
open file descriptors
.IP \- 3
record locks (see
.BR fcntl (2))
.IP \- 3
signal dispositions
.IP \- 3
file mode creation mask
.RB ( umask (2))
.IP \- 3
current directory
.RB ( chdir (2))
and
root directory
.RB ( chroot (2))
.IP \- 3
interval timers
.RB ( setitimer (2))
and POSIX timers
.RB ( timer_create (2))
.IP \- 3
nice value
.RB ( setpriority (2))
.IP \- 3
resource limits
.RB ( setrlimit (2))
.IP \- 3
measurements of the consumption of CPU time
.RB ( times (2))
and resources
.RB ( getrusage (2))
.PP
As well as the stack, POSIX.1 specifies that various other
attributes are distinct for each thread, including:
.IP \- 3
thread ID (the
.I pthread_t
data type)
.IP \- 3
signal mask
.RB ( pthread_sigmask (3))
.IP \- 3
the
.I errno
variable
.IP \- 3
alternate signal stack
.RB ( sigaltstack (2))
.IP \- 3
real-time scheduling policy and priority
.RB ( sched (7))
.PP
The following Linux-specific features are also per-thread:
.IP \- 3
capabilities (see
.BR capabilities (7))
.IP \- 3
CPU affinity
.RB ( sched_setaffinity (2))
.SS Pthreads function return values
Most pthreads functions return 0 on success, and an error number of failure.
Note that the pthreads functions do not set
.IR errno .
For each of the pthreads functions that can return an error,
POSIX.1-2001 specifies that the function can never fail with the error
.BR EINTR .
.SS Thread IDs
Each of the threads in a process has a unique thread identifier
(stored in the type
.IR pthread_t ).
This identifier is returned to the caller of
.BR pthread_create (3),
and a thread can obtain its own thread identifier using
.BR pthread_self (3).

Thread IDs are guaranteed to be unique only within a process.
(In all pthreads functions that accept a thread ID as an argument,
that ID by definition refers to a thread in
the same process as the caller.)

The system may reuse a thread ID after a terminated thread has been joined,
or a detached thread has terminated.
POSIX says: "If an application attempts to use a thread ID whose
lifetime has ended, the behavior is undefined."
.SS Thread-safe functions
A thread-safe function is one that can be safely
(i.e., it will deliver the same results regardless of whether it is)
called from multiple threads at the same time.

POSIX.1-2001 and POSIX.1-2008 require that all functions specified
in the standard shall be thread-safe,
except for the following functions:
.in +4n
.nf

asctime()
basename()
catgets()
crypt()
ctermid() if passed a non-NULL argument
ctime()
dbm_clearerr()
dbm_close()
dbm_delete()
dbm_error()
dbm_fetch()
dbm_firstkey()
dbm_nextkey()
dbm_open()
dbm_store()
dirname()
dlerror()
drand48()
ecvt() [POSIX.1-2001 only (function removed in POSIX.1-2008)]
encrypt()
endgrent()
endpwent()
endutxent()
fcvt() [POSIX.1-2001 only (function removed in POSIX.1-2008)]
ftw()
gcvt() [POSIX.1-2001 only (function removed in POSIX.1-2008)]
getc_unlocked()
getchar_unlocked()
getdate()
getenv()
getgrent()
getgrgid()
getgrnam()
gethostbyaddr() [POSIX.1-2001 only (function removed in POSIX.1-2008)]
gethostbyname() [POSIX.1-2001 only (function removed in POSIX.1-2008)]
gethostent()
getlogin()
getnetbyaddr()
getnetbyname()
getnetent()
getopt()
getprotobyname()
getprotobynumber()
getprotoent()
getpwent()
getpwnam()
getpwuid()
getservbyname()
getservbyport()
getservent()
getutxent()
getutxid()
getutxline()
gmtime()
hcreate()
hdestroy()
hsearch()
inet_ntoa()
l64a()
lgamma()
lgammaf()
lgammal()
localeconv()
localtime()
lrand48()
mrand48()
nftw()
nl_langinfo()
ptsname()
putc_unlocked()
putchar_unlocked()
putenv()
pututxline()
rand()
readdir()
setenv()
setgrent()
setkey()
setpwent()
setutxent()
strerror()
strsignal() [Added in POSIX.1-2008]
strtok()
system() [Added in POSIX.1-2008]
tmpnam() if passed a non-NULL argument
ttyname()
unsetenv()
wcrtomb() if its final argument is NULL
wcsrtombs() if its final argument is NULL
wcstombs()
wctomb()
.fi
.in
.SS Async-cancel-safe functions
An async-cancel-safe function is one that can be safely called
in an application where asynchronous cancelability is enabled (see
.BR pthread_setcancelstate (3)).

Only the following functions are required to be async-cancel-safe by
POSIX.1-2001 and POSIX.1-2008:
.in +4n
.nf

pthread_cancel()
pthread_setcancelstate()
pthread_setcanceltype()
.fi
.in
.SS Cancellation points
POSIX.1 specifies that certain functions must,
and certain other functions may, be cancellation points.
If a thread is cancelable, its cancelability type is deferred,
and a cancellation request is pending for the thread,
then the thread is canceled when it calls a function
that is a cancellation point.

The following functions are required to be cancellation points by
POSIX.1-2001 and/or POSIX.1-2008:

.\" FIXME
.\" Document the list of all functions that are cancellation points in glibc
.in +4n
.nf
accept()
aio_suspend()
clock_nanosleep()
close()
connect()
creat()
fcntl() F_SETLKW
fdatasync()
fsync()
getmsg()
getpmsg()
lockf() F_LOCK
mq_receive()
mq_send()
mq_timedreceive()
mq_timedsend()
msgrcv()
msgsnd()
msync()
nanosleep()
open()
openat() [Added in POSIX.1-2008]
pause()
poll()
pread()
pselect()
pthread_cond_timedwait()
pthread_cond_wait()
pthread_join()
pthread_testcancel()
putmsg()
putpmsg()
pwrite()
read()
readv()
recv()
recvfrom()
recvmsg()
select()
sem_timedwait()
sem_wait()
send()
sendmsg()
sendto()
sigpause() [POSIX.1-2001 only (moves to "may" list in POSIX.1-2008)]
sigsuspend()
sigtimedwait()
sigwait()
sigwaitinfo()
sleep()
system()
tcdrain()
usleep() [POSIX.1-2001 only (function removed in POSIX.1-2008)]
wait()
waitid()
waitpid()
write()
writev()
.fi
.in

The following functions may be cancellation points according to
POSIX.1-2001 and/or POSIX.1-2008:

.in +4n
.nf
access()
asctime()
asctime_r()
catclose()
catgets()
catopen()
chmod() [Added in POSIX.1-2008]
chown() [Added in POSIX.1-2008]
closedir()
closelog()
ctermid()
ctime()
ctime_r()
dbm_close()
dbm_delete()
dbm_fetch()
dbm_nextkey()
dbm_open()
dbm_store()
dlclose()
dlopen()
dprintf() [Added in POSIX.1-2008]
endgrent()
endhostent()
endnetent()
endprotoent()
endpwent()
endservent()
endutxent()
faccessat() [Added in POSIX.1-2008]
fchmod() [Added in POSIX.1-2008]
fchmodat() [Added in POSIX.1-2008]
fchown() [Added in POSIX.1-2008]
fchownat() [Added in POSIX.1-2008]
fclose()
fcntl() (for any value of cmd argument)
fflush()
fgetc()
fgetpos()
fgets()
fgetwc()
fgetws()
fmtmsg()
fopen()
fpathconf()
fprintf()
fputc()
fputs()
fputwc()
fputws()
fread()
freopen()
fscanf()
fseek()
fseeko()
fsetpos()
fstat()
fstatat() [Added in POSIX.1-2008]
ftell()
ftello()
ftw()
futimens() [Added in POSIX.1-2008]
fwprintf()
fwrite()
fwscanf()
getaddrinfo()
getc()
getc_unlocked()
getchar()
getchar_unlocked()
getcwd()
getdate()
getdelim() [Added in POSIX.1-2008]
getgrent()
getgrgid()
getgrgid_r()
getgrnam()
getgrnam_r()
gethostbyaddr() [SUSv3 only (function removed in POSIX.1-2008)]
gethostbyname() [SUSv3 only (function removed in POSIX.1-2008)]
gethostent()
gethostid()
gethostname()
getline() [Added in POSIX.1-2008]
getlogin()
getlogin_r()
getnameinfo()
getnetbyaddr()
getnetbyname()
getnetent()
getopt() (if opterr is nonzero)
getprotobyname()
getprotobynumber()
getprotoent()
getpwent()
getpwnam()
getpwnam_r()
getpwuid()
getpwuid_r()
gets()
getservbyname()
getservbyport()
getservent()
getutxent()
getutxid()
getutxline()
getwc()
getwchar()
getwd() [SUSv3 only (function removed in POSIX.1-2008)]
glob()
iconv_close()
iconv_open()
ioctl()
link()
linkat() [Added in POSIX.1-2008]
lio_listio() [Added in POSIX.1-2008]
localtime()
localtime_r()
lockf() [Added in POSIX.1-2008]
lseek()
lstat()
mkdir() [Added in POSIX.1-2008]
mkdirat() [Added in POSIX.1-2008]
mkdtemp() [Added in POSIX.1-2008]
mkfifo() [Added in POSIX.1-2008]
mkfifoat() [Added in POSIX.1-2008]
mknod() [Added in POSIX.1-2008]
mknodat() [Added in POSIX.1-2008]
mkstemp()
mktime()
nftw()
opendir()
openlog()
pathconf()
pclose()
perror()
popen()
posix_fadvise()
posix_fallocate()
posix_madvise()
posix_openpt()
posix_spawn()
posix_spawnp()
posix_trace_clear()
posix_trace_close()
posix_trace_create()
posix_trace_create_withlog()
posix_trace_eventtypelist_getnext_id()
posix_trace_eventtypelist_rewind()
posix_trace_flush()
posix_trace_get_attr()
posix_trace_get_filter()
posix_trace_get_status()
posix_trace_getnext_event()
posix_trace_open()
posix_trace_rewind()
posix_trace_set_filter()
posix_trace_shutdown()
posix_trace_timedgetnext_event()
posix_typed_mem_open()
printf()
psiginfo() [Added in POSIX.1-2008]
psignal() [Added in POSIX.1-2008]
pthread_rwlock_rdlock()
pthread_rwlock_timedrdlock()
pthread_rwlock_timedwrlock()
pthread_rwlock_wrlock()
putc()
putc_unlocked()
putchar()
putchar_unlocked()
puts()
pututxline()
putwc()
putwchar()
readdir()
readdir_r()
readlink() [Added in POSIX.1-2008]
readlinkat() [Added in POSIX.1-2008]
remove()
rename()
renameat() [Added in POSIX.1-2008]
rewind()
rewinddir()
scandir() [Added in POSIX.1-2008]
scanf()
seekdir()
semop()
setgrent()
sethostent()
setnetent()
setprotoent()
setpwent()
setservent()
setutxent()
sigpause() [Added in POSIX.1-2008]
stat()
strerror()
strerror_r()
strftime()
symlink()
symlinkat() [Added in POSIX.1-2008]
sync()
syslog()
tmpfile()
tmpnam()
ttyname()
ttyname_r()
tzset()
ungetc()
ungetwc()
unlink()
unlinkat() [Added in POSIX.1-2008]
utime() [Added in POSIX.1-2008]
utimensat() [Added in POSIX.1-2008]
utimes() [Added in POSIX.1-2008]
vdprintf() [Added in POSIX.1-2008]
vfprintf()
vfwprintf()
vprintf()
vwprintf()
wcsftime()
wordexp()
wprintf()
wscanf()
.fi
.in

An implementation may also mark other functions
not specified in the standard as cancellation points.
In particular, an implementation is likely to mark
any nonstandard function that may block as a cancellation point.
(This includes most functions that can touch files.)
.\" So, scanning "cancellation point" comments in the glibc 2.8 header
.\" files, it looks as though at least the following nonstandard
.\" functions are cancellation points:
.\" endnetgrent
.\" endspent
.\" epoll_pwait
.\" epoll_wait
.\" fcloseall
.\" fdopendir
.\" fflush_unlocked
.\" fgetc_unlocked
.\" fgetgrent
.\" fgetgrent_r
.\" fgetpwent
.\" fgetpwent_r
.\" fgets_unlocked
.\" fgetspent
.\" fgetspent_r
.\" fgetwc_unlocked
.\" fgetws_unlocked
.\" fputc_unlocked
.\" fputs_unlocked
.\" fputwc_unlocked
.\" fputws_unlocked
.\" fread_unlocked
.\" fwrite_unlocked
.\" gai_suspend
.\" getaddrinfo_a
.\" getdate_r
.\" getgrent_r
.\" getgrouplist
.\" gethostbyaddr_r
.\" gethostbyname2
.\" gethostbyname2_r
.\" gethostbyname_r
.\" gethostent_r
.\" getnetbyaddr_r
.\" getnetbyname_r
.\" getnetent_r
.\" getnetgrent
.\" getnetgrent_r
.\" getprotobyname_r
.\" getprotobynumber_r
.\" getprotoent_r
.\" getpw
.\" getpwent_r
.\" getservbyname_r
.\" getservbyport_r
.\" getservent_r
.\" getspent
.\" getspent_r
.\" getspnam
.\" getspnam_r
.\" getutmp
.\" getutmpx
.\" getw
.\" getwc_unlocked
.\" getwchar_unlocked
.\" initgroups
.\" innetgr
.\" mkostemp
.\" mkostemp64
.\" mkstemp64
.\" ppoll
.\" pthread_timedjoin_np
.\" putgrent
.\" putpwent
.\" putspent
.\" putw
.\" putwc_unlocked
.\" putwchar_unlocked
.\" rcmd
.\" rcmd_af
.\" rexec
.\" rexec_af
.\" rresvport
.\" rresvport_af
.\" ruserok
.\" ruserok_af
.\" setnetgrent
.\" setspent
.\" sgetspent
.\" sgetspent_r
.\" updwtmpx
.\" utmpxname
.\" vfscanf
.\" vfwscanf
.\" vscanf
.\" vsyslog
.\" vwscanf
.SS Compiling on Linux
On Linux, programs that use the Pthreads API should be compiled using
.IR "cc \-pthread" .
.SS Linux implementations of POSIX threads
Over time, two threading implementations have been provided by
the GNU C library on Linux:
.TP
.B LinuxThreads
This is the original Pthreads implementation.
Since glibc 2.4, this implementation is no longer supported.
.TP
.BR NPTL " (Native POSIX Threads Library)"
This is the modern Pthreads implementation.
By comparison with LinuxThreads, NPTL provides closer conformance to
the requirements of the POSIX.1 specification and better performance
when creating large numbers of threads.
NPTL is available since glibc 2.3.2,
and requires features that are present in the Linux 2.6 kernel.
.PP
Both of these are so-called 1:1 implementations, meaning that each
thread maps to a kernel scheduling entity.
Both threading implementations employ the Linux
.BR clone (2)
system call.
In NPTL, thread synchronization primitives (mutexes,
thread joining, and so on) are implemented using the Linux
.BR futex (2)
system call.
.SS LinuxThreads
The notable features of this implementation are the following:
.IP \- 3
In addition to the main (initial) thread,
and the threads that the program creates using
.BR pthread_create (3),
the implementation creates a "manager" thread.
This thread handles thread creation and termination.
(Problems can result if this thread is inadvertently killed.)
.IP \- 3
Signals are used internally by the implementation.
On Linux 2.2 and later, the first three real-time signals are used
(see also
.BR signal (7)).
On older Linux kernels,
.B SIGUSR1
and
.B SIGUSR2
are used.
Applications must avoid the use of whichever set of signals is
employed by the implementation.
.IP \- 3
Threads do not share process IDs.
(In effect, LinuxThreads threads are implemented as processes which share
more information than usual, but which do not share a common process ID.)
LinuxThreads threads (including the manager thread)
are visible as separate processes using
.BR ps (1).
.PP
The LinuxThreads implementation deviates from the POSIX.1
specification in a number of ways, including the following:
.IP \- 3
Calls to
.BR getpid (2)
return a different value in each thread.
.IP \- 3
Calls to
.BR getppid (2)
in threads other than the main thread return the process ID of the
manager thread; instead
.BR getppid (2)
in these threads should return the same value as
.BR getppid (2)
in the main thread.
.IP \- 3
When one thread creates a new child process using
.BR fork (2),
any thread should be able to
.BR wait (2)
on the child.
However, the implementation allows only the thread that
created the child to
.BR wait (2)
on it.
.IP \- 3
When a thread calls
.BR execve (2),
all other threads are terminated (as required by POSIX.1).
However, the resulting process has the same PID as the thread that called
.BR execve (2):
it should have the same PID as the main thread.
.IP \- 3
Threads do not share user and group IDs.
This can cause complications with set-user-ID programs and
can cause failures in Pthreads functions if an application
changes its credentials using
.BR seteuid (2)
or similar.
.IP \- 3
Threads do not share a common session ID and process group ID.
.IP \- 3
Threads do not share record locks created using
.BR fcntl (2).
.IP \- 3
The information returned by
.BR times (2)
and
.BR getrusage (2)
is per-thread rather than process-wide.
.IP \- 3
Threads do not share semaphore undo values (see
.BR semop (2)).
.IP \- 3
Threads do not share interval timers.
.IP \- 3
Threads do not share a common nice value.
.IP \- 3
POSIX.1 distinguishes the notions of signals that are directed
to the process as a whole and signals that are directed to individual
threads.
According to POSIX.1, a process-directed signal (sent using
.BR kill (2),
for example) should be handled by a single,
arbitrarily selected thread within the process.
LinuxThreads does not support the notion of process-directed signals:
signals may be sent only to specific threads.
.IP \- 3
Threads have distinct alternate signal stack settings.
However, a new thread's alternate signal stack settings
are copied from the thread that created it, so that
the threads initially share an alternate signal stack.
(A new thread should start with no alternate signal stack defined.
If two threads handle signals on their shared alternate signal
stack at the same time, unpredictable program failures are
likely to occur.)
.SS NPTL
With NPTL, all of the threads in a process are placed
in the same thread group;
all members of a thread group share the same PID.
NPTL does not employ a manager thread.

NPTL makes internal use of the first two real-time signals;
these signals cannot be used in applications.
See
.BR nptl (7)
for further details.

NPTL still has at least one nonconformance with POSIX.1:
.IP \- 3
Threads do not share a common nice value.
.\" FIXME . bug report filed for NPTL nice nonconformance
.\" http://bugzilla.kernel.org/show_bug.cgi?id=6258
.\" Sep 08: there is a patch by Denys Vlasenko to address this
.\" "make setpriority POSIX compliant; introduce PRIO_THREAD extension"
.\" Monitor this to see if it makes it into mainline.
.PP
Some NPTL nonconformances occur only with older kernels:
.IP \- 3
The information returned by
.BR times (2)
and
.BR getrusage (2)
is per-thread rather than process-wide (fixed in kernel 2.6.9).
.IP \- 3
Threads do not share resource limits (fixed in kernel 2.6.10).
.IP \- 3
Threads do not share interval timers (fixed in kernel 2.6.12).
.IP \- 3
Only the main thread is permitted to start a new session using
.BR setsid (2)
(fixed in kernel 2.6.16).
.IP \- 3
Only the main thread is permitted to make the process into a
process group leader using
.BR setpgid (2)
(fixed in kernel 2.6.16).
.IP \- 3
Threads have distinct alternate signal stack settings.
However, a new thread's alternate signal stack settings
are copied from the thread that created it, so that
the threads initially share an alternate signal stack
(fixed in kernel 2.6.16).
.PP
Note the following further points about the NPTL implementation:
.IP \- 3
If the stack size soft resource limit (see the description of
.B RLIMIT_STACK
in
.BR setrlimit (2))
is set to a value other than
.IR unlimited ,
then this value defines the default stack size for new threads.
To be effective, this limit must be set before the program
is executed, perhaps using the
.I ulimit -s
shell built-in command
.RI ( "limit stacksize"
in the C shell).
.SS Determining the threading implementation
Since glibc 2.3.2, the
.BR getconf (1)
command can be used to determine
the system's threading implementation, for example:
.nf
.in +4n

bash$ getconf GNU_LIBPTHREAD_VERSION
NPTL 2.3.4
.in
.fi
.PP
With older glibc versions, a command such as the following should
be sufficient to determine the default threading implementation:
.nf
.in +4n

bash$ $( ldd /bin/ls | grep libc.so | awk \(aq{print $3}\(aq ) | \\
                egrep \-i \(aqthreads|nptl\(aq
        Native POSIX Threads Library by Ulrich Drepper et al
.in
.fi
.SS Selecting the threading implementation: LD_ASSUME_KERNEL
On systems with a glibc that supports both LinuxThreads and NPTL
(i.e., glibc 2.3.\fIx\fP), the
.B LD_ASSUME_KERNEL
environment variable can be used to override
the dynamic linker's default choice of threading implementation.
This variable tells the dynamic linker to assume that it is
running on top of a particular kernel version.
By specifying a kernel version that does not
provide the support required by NPTL, we can force the use
of LinuxThreads.
(The most likely reason for doing this is to run a
(broken) application that depends on some nonconformant behavior
in LinuxThreads.)
For example:
.nf
.in +4n

bash$ $( LD_ASSUME_KERNEL=2.2.5 ldd /bin/ls | grep libc.so | \\
                awk \(aq{print $3}\(aq ) | egrep \-i \(aqthreads|nptl\(aq
        linuxthreads-0.10 by Xavier Leroy
.in
.fi
.SH SEE ALSO
.ad l
.nh
.BR clone (2),
.BR fork (2),
.BR futex (2),
.BR gettid (2),
.BR proc (5),
.BR attributes (7),
.BR futex (7),
.BR nptl (7),
.BR sigevent (7),
.BR signal (7),

Various Pthreads manual pages, for example:
.BR pthread_attr_init (3),
.BR pthread_atfork (3),
.BR pthread_cancel (3),
.BR pthread_cleanup_push (3),
.BR pthread_cond_signal (3),
.BR pthread_cond_wait (3),
.BR pthread_create (3),
.BR pthread_detach (3),
.BR pthread_equal (3),
.BR pthread_exit (3),
.BR pthread_key_create (3),
.BR pthread_kill (3),
.BR pthread_mutex_lock (3),
.BR pthread_mutex_unlock (3),
.BR pthread_once (3),
.BR pthread_setcancelstate (3),
.BR pthread_setcanceltype (3),
.BR pthread_setspecific (3),
.BR pthread_sigmask (3),
.BR pthread_sigqueue (3),
and
.BR pthread_testcancel (3)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2005 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH PTY 7 2005-10-10 "Linux" "Linux Programmer's Manual"
.SH NAME
pty \- pseudoterminal interfaces
.SH DESCRIPTION
A pseudoterminal (sometimes abbreviated "pty")
is a pair of virtual character devices that
provide a bidirectional communication channel.
One end of the channel is called the
.IR master ;
the other end is called the
.IR slave .
The slave end of the pseudoterminal provides an interface
that behaves exactly like a classical terminal.
A process that expects to be connected to a terminal,
can open the slave end of a pseudoterminal and
then be driven by a program that has opened the master end.
Anything that is written on the master end is provided to the process
on the slave end as though it was input typed on a terminal.
For example, writing the interrupt character (usually control-C)
to the master device would cause an interrupt signal
.RB ( SIGINT )
to be generated for the foreground process group
that is connected to the slave.
Conversely, anything that is written to the slave end of the
pseudoterminal can be read by the process that is connected to
the master end.
Pseudoterminals are used by applications such as network login services
.RB ( ssh "(1), " rlogin "(1), " telnet (1)),
terminal emulators,
.BR script (1),
.BR screen (1),
and
.BR expect (1).

Historically, two pseudoterminal APIs have evolved: BSD and System V.
SUSv1 standardized a pseudoterminal API based on the System V API,
and this API should be employed in all new programs that use
pseudoterminals.

Linux provides both BSD-style and (standardized) System V-style
pseudoterminals.
System V-style terminals are commonly called UNIX 98 pseudoterminals
on Linux systems.
Since kernel 2.6.4, BSD-style pseudoterminals are considered deprecated
(they can be disabled when configuring the kernel);
UNIX 98 pseudoterminals should be used in new applications.
.SS UNIX 98 pseudoterminals
An unused UNIX 98 pseudoterminal master is opened by calling
.BR posix_openpt (3).
(This function opens the master clone device,
.IR /dev/ptmx ;
see
.BR pts (4).)
After performing any program-specific initializations,
changing the ownership and permissions of the slave device using
.BR grantpt (3),
and unlocking the slave using
.BR unlockpt (3)),
the corresponding slave device can be opened by passing
the name returned by
.BR ptsname (3)
in a call to
.BR open (2).

The Linux kernel imposes a limit on the number of available
UNIX 98 pseudoterminals.
In kernels up to and including 2.6.3, this limit is configured
at kernel compilation time
.RB ( CONFIG_UNIX98_PTYS ),
and the permitted number of pseudoterminals can be up to 2048,
with a default setting of 256.
Since kernel 2.6.4, the limit is dynamically adjustable via
.IR /proc/sys/kernel/pty/max ,
and a corresponding file,
.IR /proc/sys/kernel/pty/nr ,
indicates how many pseudoterminals are currently in use.
For further details on these two files, see
.BR proc (5).
.SS BSD pseudoterminals
BSD-style pseudoterminals are provided as precreated pairs, with
names of the form
.I /dev/ptyXY
(master) and
.I /dev/ttyXY
(slave),
where X is a letter from the 16-character set [p-za-e],
and Y is a letter from the 16-character set [0-9a-f].
(The precise range of letters in these two sets varies across UNIX
implementations.)
For example,
.I /dev/ptyp1
and
.I /dev/ttyp1
constitute a BSD pseudoterminal pair.
A process finds an unused pseudoterminal pair by trying to
.BR open (2)
each pseudoterminal master until an open succeeds.
The corresponding pseudoterminal slave (substitute "tty"
for "pty" in the name of the master) can then be opened.
.SH FILES
.I /dev/ptmx
(UNIX 98 master clone device)
.br
.I /dev/pts/*
(UNIX 98 slave devices)
.br
.I /dev/pty[p-za-e][0-9a-f]
(BSD master devices)
.br
.I /dev/tty[p-za-e][0-9a-f]
(BSD slave devices)
.SH NOTES
A description of the
.B TIOCPKT
.BR ioctl (2),
which controls packet mode operation, can be found in
.BR tty_ioctl (4).

The BSD
.BR ioctl (2)
operations
.BR TIOCSTOP ,
.BR TIOCSTART ,
.BR TIOCUCNTL ,
and
.BR TIOCREMOTE
have not been implemented under Linux.
.SH SEE ALSO
.BR select (2),
.BR setsid (2),
.BR forkpty (3),
.BR openpty (3),
.BR termios (3),
.BR pts (4),
.BR tty (4),
.BR tty_ioctl (4)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
'\" t
.\" This man page is Copyright (C) 1999 Andi Kleen <ak@muc.de>.
.\"
.\" %%%LICENSE_START(VERBATIM_ONE_PARA)
.\" Permission is granted to distribute possibly modified copies
.\" of this page provided the header is included verbatim,
.\" and in case of nontrivial modification author and date
.\" of the modification is added to the header.
.\" %%%LICENSE_END
.\"
.\" $Id: raw.7,v 1.6 1999/06/05 10:32:08 freitag Exp $
.\"
.TH RAW  7 2015-05-07 "Linux" "Linux Programmer's Manual"
.SH NAME
raw \- Linux IPv4 raw sockets
.SH SYNOPSIS
.B #include <sys/socket.h>
.br
.B #include <netinet/in.h>
.br
.BI "raw_socket = socket(AF_INET, SOCK_RAW, int " protocol );
.SH DESCRIPTION
Raw sockets allow new IPv4 protocols to be implemented in user space.
A raw socket receives or sends the raw datagram not
including link level headers.

The IPv4 layer generates an IP header when sending a packet unless the
.B IP_HDRINCL
socket option is enabled on the socket.
When it is enabled, the packet must contain an IP header.
For receiving, the IP header is always included in the packet.

Only processes with an effective user ID of 0 or the
.B CAP_NET_RAW
capability are allowed to open raw sockets.

All packets or errors matching the
.I protocol
number specified
for the raw socket are passed to this socket.
For a list of the allowed protocols,
see the IANA list of assigned protocol numbers at
.UR http://www.iana.org/assignments/protocol-numbers/
.UE
and
.BR getprotobyname (3).

A protocol of
.B IPPROTO_RAW
implies enabled
.B IP_HDRINCL
and is able to send any IP protocol that is specified in the passed
header.
Receiving of all IP protocols via
.B IPPROTO_RAW
is not possible using raw sockets.
.RS
.TS
tab(:) allbox;
c s
l l.
IP Header fields modified on sending by \fBIP_HDRINCL\fP
IP Checksum:Always filled in
Source Address:Filled in when zero
Packet ID:Filled in when zero
Total Length:Always filled in
.TE
.RE
.sp
.PP
If
.B IP_HDRINCL
is specified and the IP header has a nonzero destination address, then
the destination address of the socket is used to route the packet.
When
.B MSG_DONTROUTE
is specified, the destination address should refer to a local interface,
otherwise a routing table lookup is done anyway but gatewayed routes
are ignored.

If
.B IP_HDRINCL
isn't set, then IP header options can be set on raw sockets with
.BR setsockopt (2);
see
.BR ip (7)
for more information.

Starting with Linux 2.2, all IP header fields and options can be set using
IP socket options.
This means raw sockets are usually needed only for new
protocols or protocols with no user interface (like ICMP).

When a packet is received, it is passed to any raw sockets which have
been bound to its protocol before it is passed to other protocol handlers
(e.g., kernel protocol modules).
.SS Address format
For sending and receiving datagrams
.RB ( sendto (2),
.BR recvfrom (2),
and similar),
raw sockets use the standard
.I sockaddr_in
address structure defined in
.BR ip (7).
The
.I sin_port
field could be used to specify the IP protocol number,
but it is ignored for sending in Linux 2.2 and later, and should be always
set to 0 (see BUGS).
For incoming packets,
.I sin_port
.\" commit f59fc7f30b710d45aadf715460b3e60dbe9d3418
is set to zero.
.SS Socket options
Raw socket options can be set with
.BR setsockopt (2)
and read with
.BR getsockopt (2)
by passing the
.B IPPROTO_RAW
.\" Or SOL_RAW on Linux
family flag.
.TP
.B ICMP_FILTER
Enable a special filter for raw sockets bound to the
.B IPPROTO_ICMP
protocol.
The value has a bit set for each ICMP message type which
should be filtered out.
The default is to filter no ICMP messages.
.PP
In addition, all
.BR ip (7)
.B IPPROTO_IP
socket options valid for datagram sockets are supported.
.SS Error handling
Errors originating from the network are passed to the user only when the
socket is connected or the
.B IP_RECVERR
flag is enabled.
For connected sockets, only
.B EMSGSIZE
and
.B EPROTO
are passed for compatibility.
With
.BR IP_RECVERR ,
all network errors are saved in the error queue.
.SH ERRORS
.TP
.B EACCES
User tried to send to a broadcast address without having the
broadcast flag set on the socket.
.TP
.B EFAULT
An invalid memory address was supplied.
.TP
.B EINVAL
Invalid argument.
.TP
.B EMSGSIZE
Packet too big.
Either Path MTU Discovery is enabled (the
.B IP_MTU_DISCOVER
socket flag) or the packet size exceeds the maximum allowed IPv4
packet size of 64KB.
.TP
.B EOPNOTSUPP
Invalid flag has been passed to a socket call (like
.BR MSG_OOB ).
.TP
.B EPERM
The user doesn't have permission to open raw sockets.
Only processes with an effective user ID of 0 or the
.B CAP_NET_RAW
attribute may do that.
.TP
.B EPROTO
An ICMP error has arrived reporting a parameter problem.
.SH VERSIONS
.B IP_RECVERR
and
.B ICMP_FILTER
are new in Linux 2.2.
They are Linux extensions and should not be used in portable programs.

Linux 2.0 enabled some bug-to-bug compatibility with BSD in the
raw socket code when the
.B SO_BSDCOMPAT
socket option was set; since Linux 2.2,
this option no longer has that effect.
.SH NOTES
By default, raw sockets do path MTU (Maximum Transmission Unit) discovery.
This means the kernel
will keep track of the MTU to a specific target IP address and return
.B EMSGSIZE
when a raw packet write exceeds it.
When this happens, the application should decrease the packet size.
Path MTU discovery can be also turned off using the
.B IP_MTU_DISCOVER
socket option or the
.I /proc/sys/net/ipv4/ip_no_pmtu_disc
file, see
.BR ip (7)
for details.
When turned off, raw sockets will fragment outgoing packets
that exceed the interface MTU.
However, disabling it is not recommended
for performance and reliability reasons.

A raw socket can be bound to a specific local address using the
.BR bind (2)
call.
If it isn't bound, all packets with the specified IP protocol are received.
In addition, a raw socket can be bound to a specific network device using
.BR SO_BINDTODEVICE ;
see
.BR socket (7).

An
.B IPPROTO_RAW
socket is send only.
If you really want to receive all IP packets, use a
.BR packet (7)
socket with the
.B ETH_P_IP
protocol.
Note that packet sockets don't reassemble IP fragments,
unlike raw sockets.

If you want to receive all ICMP packets for a datagram socket,
it is often better to use
.B IP_RECVERR
on that particular socket; see
.BR ip (7).

Raw sockets may tap all IP protocols in Linux, even
protocols like ICMP or TCP which have a protocol module in the kernel.
In this case, the packets are passed to both the kernel module and the raw
socket(s).
This should not be relied upon in portable programs, many other BSD
socket implementation have limitations here.

Linux never changes headers passed from the user (except for filling
in some zeroed fields as described for
.BR IP_HDRINCL ).
This differs from many other implementations of raw sockets.

Raw sockets are generally rather unportable and should be avoided in
programs intended to be portable.

Sending on raw sockets should take the IP protocol from
.IR sin_port ;
this ability was lost in Linux 2.2.
The workaround is to use
.BR IP_HDRINCL .
.SH BUGS
Transparent proxy extensions are not described.

When the
.B IP_HDRINCL
option is set, datagrams will not be fragmented and are limited to
the interface MTU.

Setting the IP protocol for sending in
.I sin_port
got lost in Linux 2.2.
The protocol that the socket was bound to or that
was specified in the initial
.BR socket (2)
call is always used.
.\" .SH AUTHORS
.\" This man page was written by Andi Kleen.
.SH SEE ALSO
.BR recvmsg (2),
.BR sendmsg (2),
.BR capabilities (7),
.BR ip (7),
.BR socket (7)

.B RFC\ 1191
for path MTU discovery.
.B RFC\ 791
and the
.I <linux/ip.h>
header file for the IP protocol.
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" From Henry Spencer's regex package (as found in the apache
.\" distribution). The package carries the following copyright:
.\"
.\"  Copyright 1992, 1993, 1994 Henry Spencer.  All rights reserved.
.\" %%%LICENSE_START(MISC)
.\"  This software is not subject to any license of the American Telephone
.\"  and Telegraph Company or of the Regents of the University of California.
.\"
.\"  Permission is granted to anyone to use this software for any purpose
.\"  on any computer system, and to alter it and redistribute it, subject
.\"  to the following restrictions:
.\"
.\"  1. The author is not responsible for the consequences of use of this
.\"     software, no matter how awful, even if they arise from flaws in it.
.\"
.\"  2. The origin of this software must not be misrepresented, either by
.\"     explicit claim or by omission.  Since few users ever read sources,
.\"     credits must appear in the documentation.
.\"
.\"  3. Altered versions must be plainly marked as such, and must not be
.\"     misrepresented as being the original software.  Since few users
.\"     ever read sources, credits must appear in the documentation.
.\"
.\"  4. This notice may not be removed or altered.
.\" %%%LICENSE_END
.\"
.\" In order to comply with `credits must appear in the documentation'
.\" I added an AUTHOR paragraph below - aeb.
.\"
.\" In the default nroff environment there is no dagger \(dg.
.\"
.\" 2005-05-11 Removed discussion of `[[:<:]]' and `[[:>:]]', which
.\" 	appear not to be in the glibc implementation of regcomp
.\"
.ie t .ds dg \(dg
.el .ds dg (!)
.TH REGEX 7 2009-01-12 "" "Linux Programmer's Manual"
.SH NAME
regex \- POSIX.2 regular expressions
.SH DESCRIPTION
Regular expressions ("RE"s),
as defined in POSIX.2, come in two forms:
modern REs (roughly those of
.IR egrep ;
POSIX.2 calls these "extended" REs)
and obsolete REs (roughly those of
.BR ed (1);
POSIX.2 "basic" REs).
Obsolete REs mostly exist for backward compatibility in some old programs;
they will be discussed at the end.
POSIX.2 leaves some aspects of RE syntax and semantics open;
"\*(dg" marks decisions on these aspects that
may not be fully portable to other POSIX.2 implementations.
.PP
A (modern) RE is one\*(dg or more nonempty\*(dg \fIbranches\fR,
separated by \(aq|\(aq.
It matches anything that matches one of the branches.
.PP
A branch is one\*(dg or more \fIpieces\fR, concatenated.
It matches a match for the first, followed by a match for the second,
and so on.
.PP
A piece is an \fIatom\fR possibly followed
by a single\*(dg \(aq*\(aq, \(aq+\(aq, \(aq?\(aq, or \fIbound\fR.
An atom followed by \(aq*\(aq
matches a sequence of 0 or more matches of the atom.
An atom followed by \(aq+\(aq
matches a sequence of 1 or more matches of the atom.
An atom followed by \(aq?\(aq
matches a sequence of 0 or 1 matches of the atom.
.PP
A \fIbound\fR is \(aq{\(aq followed by an unsigned decimal integer,
possibly followed by \(aq,\(aq
possibly followed by another unsigned decimal integer,
always followed by \(aq}\(aq.
The integers must lie between 0 and
.B RE_DUP_MAX
(255\*(dg) inclusive,
and if there are two of them, the first may not exceed the second.
An atom followed by a bound containing one integer \fIi\fR
and no comma matches
a sequence of exactly \fIi\fR matches of the atom.
An atom followed by a bound
containing one integer \fIi\fR and a comma matches
a sequence of \fIi\fR or more matches of the atom.
An atom followed by a bound
containing two integers \fIi\fR and \fIj\fR matches
a sequence of \fIi\fR through \fIj\fR (inclusive) matches of the atom.
.PP
An atom is a regular expression enclosed in "\fI()\fP"
(matching a match for the regular expression),
an empty set of "\fI()\fP" (matching the null string)\*(dg,
a \fIbracket expression\fR (see below), \(aq.\(aq
(matching any single character), \(aq^\(aq (matching the null string at the
beginning of a line), \(aq$\(aq (matching the null string at the
end of a line), a \(aq\e\(aq followed by one of the characters
"\fI^.[$()|*+?{\e\fP"
(matching that character taken as an ordinary character),
a \(aq\e\(aq followed by any other character\*(dg
(matching that character taken as an ordinary character,
as if the \(aq\e\(aq had not been present\*(dg),
or a single character with no other significance (matching that character).
A \(aq{\(aq followed by a character other than a digit is an ordinary
character, not the beginning of a bound\*(dg.
It is illegal to end an RE with \(aq\e\(aq.
.PP
A \fIbracket expression\fR is a list of characters enclosed in "\fI[]\fP".
It normally matches any single character from the list (but see below).
If the list begins with \(aq^\(aq,
it matches any single character
(but see below) \fInot\fR from the rest of the list.
If two characters in the list are separated by \(aq\-\(aq, this is shorthand
for the full \fIrange\fR of characters between those two (inclusive) in the
collating sequence,
for example, "\fI[0\-9]\fP" in ASCII matches any decimal digit.
It is illegal\*(dg for two ranges to share an
endpoint, for example, "\fIa-c-e\fP".
Ranges are very collating-sequence-dependent,
and portable programs should avoid relying on them.
.PP
To include a literal \(aq]\(aq in the list, make it the first character
(following a possible \(aq^\(aq).
To include a literal \(aq\-\(aq, make it the first or last character,
or the second endpoint of a range.
To use a literal \(aq\-\(aq as the first endpoint of a range,
enclose it in "\fI[.\fP" and "\fI.]\fP"
to make it a collating element (see below).
With the exception of these and some combinations using \(aq[\(aq (see next
paragraphs), all other special characters, including \(aq\e\(aq, lose their
special significance within a bracket expression.
.PP
Within a bracket expression, a collating element (a character,
a multicharacter sequence that collates as if it were a single character,
or a collating-sequence name for either)
enclosed in "\fI[.\fP" and "\fI.]\fP" stands for the
sequence of characters of that collating element.
The sequence is a single element of the bracket expression's list.
A bracket expression containing a multicharacter collating element
can thus match more than one character,
for example, if the collating sequence includes a "ch" collating element,
then the RE "\fI[[.ch.]]*c\fP" matches the first five characters
of "chchcc".
.PP
Within a bracket expression, a collating element enclosed in "\fI[=\fP" and
"\fI=]\fP" is an equivalence class, standing for the sequences of characters
of all collating elements equivalent to that one, including itself.
(If there are no other equivalent collating elements,
the treatment is as if the enclosing delimiters
were "\fI[.\fP" and "\fI.]\fP".)
For example, if o and \o'o^' are the members of an equivalence class,
then "\fI[[=o=]]\fP", "\fI[[=\o'o^'=]]\fP",
and "\fI[o\o'o^']\fP" are all synonymous.
An equivalence class may not\*(dg be an endpoint
of a range.
.PP
Within a bracket expression, the name of a \fIcharacter class\fR enclosed
in "\fI[:\fP" and "\fI:]\fP" stands for the list
of all characters belonging to that
class.
Standard character class names are:
.PP
.RS
.TS
l l l.
alnum	digit	punct
alpha	graph	space
blank	lower	upper
cntrl	print	xdigit
.TE
.RE
.PP
These stand for the character classes defined in
.BR wctype (3).
A locale may provide others.
A character class may not be used as an endpoint of a range.
.\" As per http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=295666
.\" The following does not seem to apply in the glibc implementation
.\" .PP
.\" There are two special cases\*(dg of bracket expressions:
.\" the bracket expressions "\fI[[:<:]]\fP" and "\fI[[:>:]]\fP" match
.\" the null string at the beginning and end of a word respectively.
.\" A word is defined as a sequence of
.\" word characters
.\" which is neither preceded nor followed by
.\" word characters.
.\" A word character is an
.\" .I alnum
.\" character (as defined by
.\" .BR wctype (3))
.\" or an underscore.
.\" This is an extension,
.\" compatible with but not specified by POSIX.2,
.\" and should be used with
.\" caution in software intended to be portable to other systems.
.PP
In the event that an RE could match more than one substring of a given
string,
the RE matches the one starting earliest in the string.
If the RE could match more than one substring starting at that point,
it matches the longest.
Subexpressions also match the longest possible substrings, subject to
the constraint that the whole match be as long as possible,
with subexpressions starting earlier in the RE taking priority over
ones starting later.
Note that higher-level subexpressions thus take priority over
their lower-level component subexpressions.
.PP
Match lengths are measured in characters, not collating elements.
A null string is considered longer than no match at all.
For example,
"\fIbb*\fP" matches the three middle characters of "abbbc",
"\fI(wee|week)(knights|nights)\fP"
matches all ten characters of "weeknights",
when "\fI(.*).*\fP" is matched against "abc" the parenthesized subexpression
matches all three characters, and
when "\fI(a*)*\fP" is matched against "bc"
both the whole RE and the parenthesized
subexpression match the null string.
.PP
If case-independent matching is specified,
the effect is much as if all case distinctions had vanished from the
alphabet.
When an alphabetic that exists in multiple cases appears as an
ordinary character outside a bracket expression, it is effectively
transformed into a bracket expression containing both cases,
for example, \(aqx\(aq becomes "\fI[xX]\fP".
When it appears inside a bracket expression, all case counterparts
of it are added to the bracket expression, so that, for example, "\fI[x]\fP"
becomes "\fI[xX]\fP" and "\fI[^x]\fP" becomes "\fI[^xX]\fP".
.PP
No particular limit is imposed on the length of REs\*(dg.
Programs intended to be portable should not employ REs longer
than 256 bytes,
as an implementation can refuse to accept such REs and remain
POSIX-compliant.
.PP
Obsolete ("basic") regular expressions differ in several respects.
\(aq|\(aq, \(aq+\(aq, and \(aq?\(aq are
ordinary characters and there is no equivalent
for their functionality.
The delimiters for bounds are "\fI\e{\fP" and "\fI\e}\fP",
with \(aq{\(aq and \(aq}\(aq by themselves ordinary characters.
The parentheses for nested subexpressions are "\fI\e(\fP" and "\fI\e)\fP",
with \(aq(\(aq and \(aq)\(aq by themselves ordinary characters.
\(aq^\(aq is an ordinary character except at the beginning of the
RE or\*(dg the beginning of a parenthesized subexpression,
\(aq$\(aq is an ordinary character except at the end of the
RE or\*(dg the end of a parenthesized subexpression,
and \(aq*\(aq is an ordinary character if it appears at the beginning of the
RE or the beginning of a parenthesized subexpression
(after a possible leading \(aq^\(aq).
.PP
Finally, there is one new type of atom, a \fIback reference\fR:
\(aq\e\(aq followed by a nonzero decimal digit \fId\fR
matches the same sequence of characters
matched by the \fId\fRth parenthesized subexpression
(numbering subexpressions by the positions of their opening parentheses,
left to right),
so that, for example, "\fI\e([bc]\e)\e1\fP" matches "bb" or "cc" but not "bc".
.SH BUGS
Having two kinds of REs is a botch.
.PP
The current POSIX.2 spec says that \(aq)\(aq is an ordinary character in
the absence of an unmatched \(aq(\(aq;
this was an unintentional result of a wording error,
and change is likely.
Avoid relying on it.
.PP
Back references are a dreadful botch,
posing major problems for efficient implementations.
They are also somewhat vaguely defined
(does
"\fIa\e(\e(b\e)*\e2\e)*d\fP" match "abbbd"?).
Avoid using them.
.PP
POSIX.2's specification of case-independent matching is vague.
The "one case implies all cases" definition given above
is current consensus among implementors as to the right interpretation.
.\" As per http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=295666
.\" The following does not seem to apply in the glibc implementation
.\" .PP
.\" The syntax for word boundaries is incredibly ugly.
.SH AUTHOR
.\" Sigh... The page license means we must have the author's name
.\" in the formatted output.
This page was taken from Henry Spencer's regex package.
.SH SEE ALSO
.BR grep (1),
.BR regex (3)
.PP
POSIX.2, section 2.8 (Regular Expression Notation).
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2009 Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" 2009-01-12, mtk, Created
.\"
.TH RTLD-AUDIT 7 2012-07-07 "Linux" "Linux Programmer's Manual"
.SH NAME
rtld-audit \- auditing API for the dynamic linker
.SH SYNOPSIS
.BR "#define _GNU_SOURCE" "             /* See feature_test_macros(7) */"

.B #include <link.h>
.SH DESCRIPTION
The GNU dynamic linker (run-time linker)
provides an auditing API that allows an application
to be notified when various dynamic linking events occur.
This API is very similar to the auditing interface provided by the
Solaris run-time linker.
The necessary constants and prototypes are defined by including
.IR <link.h> .

To use this interface, the programmer creates a shared library
that implements a standard set of function names.
Not all of the functions need to be implemented: in most cases,
if the programmer is not interested in a particular class of auditing event,
then no implementation needs to be provided for the corresponding
auditing function.

To employ the auditing interface, the environment variable
.BR LD_AUDIT
must be defined to contain a colon-separated list of shared libraries,
each of which can implement (parts of) the auditing API.
When an auditable event occurs,
the corresponding function is invoked in each library,
in the order that the libraries are listed.
.SS la_version()
\&
.nf
.BI "unsigned int la_version(unsigned int " version );
.fi
.PP
This is the only function that
.I must
be defined by an auditing library:
it performs the initial handshake between the dynamic linker and
the auditing library.
When invoking this function, the dynamic linker passes, in
.IR version ,
the highest version of the auditing interface that the linker supports.
If necessary, the auditing library can check that this version
is sufficient for its requirements.

As its function result,
this function should return the version of the auditing interface
that this auditing library expects to use (returning
.I version
is acceptable).
If the returned value is 0,
or a version that is greater than that supported by the dynamic linker,
then the audit library is ignored.
.SS la_objsearch()
\&
.nf
.BI "char *la_objsearch(const char *" name ", uintptr_t *" cookie ,
.BI "                   unsigned int " flag );
.fi
.PP
The dynamic linker invokes this function to inform the auditing library
that it is about to search for a shared object.
The
.I name
argument is the filename or pathname that is to be searched for.
.I cookie
identifies the shared object that initiated the search.
.I flag
is set to one of the following values:
.TP 17
.B LA_SER_ORIG
This is the original name that is being searched for.
Typically, this name comes from an ELF
.B DT_NEEDED
entry, or is the
.I filename
argument given to
.BR dlopen (3).
.TP
.B LA_SER_LIBPATH
.I name
was created using a directory specified in
.BR LD_LIBRARY_PATH .
.TP
.B LA_SER_RUNPATH
.I name
was created using a directory specified in an ELF
.B DT_RPATH
or
.B DT_RUNPATH
list.
.TP
.B LA_SER_CONFIG
.I name
was found via the
.BR ldconfig (8)
cache
.RI ( /etc/ld.so.cache ).
.TP
.B LA_SER_DEFAULT
.I name
was found via a search of one of the default directories.
.TP
.B LA_SER_SECURE
.I name
is specific to a secure object (unused on Linux).
.PP
As its function result,
.BR la_objsearch ()
returns the pathname that the dynamic linker should use
for further processing.
If NULL is returned, then this pathname is ignored for further processing.
If this audit library simply intends to monitor search paths, then
.I name
should be returned.
.SS la_activity()
\&
.nf
.BI "void la_activity( uintptr_t *" cookie ", unsigned int "flag  );
.fi
.PP
The dynamic linker calls this function to inform the auditing library
that link-map activity is occurring.
.I cookie
identifies the object at the head of the link map.
When the dynamic linker invokes this function,
.I flag
is set to one of the following values:
.TP 19
.B LA_ACT_ADD
New objects are being added to the link map.
.TP
.B LA_ACT_DELETE
Objects are being removed from the link map.
.TP
.B LA_ACT_CONSISTENT
Link-map activity has been completed: the map is once again consistent.
.SS la_objopen()
\&
.nf
.BI "unsigned int la_objopen(struct link_map *" map ", Lmid_t " lmid ,
.BI "                        uintptr_t *" cookie );
.fi
.PP
The dynamic linker calls this function when a new shared object is loaded.
The
.I map
argument is a pointer to a link-map structure that describes the object.
The
.I lmid
field has one of the following values
.TP 17
.B LM_ID_BASE
Link map is part of the initial namespace.
.TP
.B LM_ID_NEWLM
Link map is part of a new namespace requested via
.BR dlmopen (3).
.PP
.I cookie
is a pointer to an identifier for this object.
The identifier is provided to later calls to functions
in the auditing library in order to identify this object.
This identifier is initialized to point to object's link map,
but the audit library can change the identifier to some other value
that it may prefer to use to identify the object.
.PP
As its return value,
.BR la_objopen ()
returns a bit mask created by ORing zero or more of the
following constants,
which allow the auditing library to select the objects to be monitored by
.BR la_symbind* ():
.TP 17
.B LA_FLG_BINDTO
Audit symbol bindings to this object.
.TP
.B LA_FLG_BINDFROM
Audit symbol bindings from this object.
.PP
A return value of 0 from
.BR la_objopen ()
indicates that no symbol bindings should be audited for this object.
.SS la_objclose()
\&
.nf
.BI "unsigned int la_objclose(uintptr_t *" cookie );
.fi
.PP
The dynamic linker invokes this function after any finalization
code for the object has been executed,
before the object is unloaded.
The
.I cookie
argument is the identifier obtained from a previous invocation of
.BR la_objopen ().

In the current implementation, the value returned by
.BR la_objclose ()
is ignored.
.SS la_preinit()
\&
.nf
.BI "void la_preinit(uintptr_t *" cookie );
.fi
.PP
The dynamic linker invokes this function after all shared objects
have been loaded, before control is passed to the application
(i.e., before calling
.IR main ()).
Note that
.IR main ()
may still later dynamically load objects using
.BR dlopen (3).
.SS la_symbind*()
\&
.nf
.BI "uintptr_t la_symbind32(Elf32_Sym *" sym ", unsigned int " ndx ,
.BI "                       uintptr_t *" refcook ", uintptr_t *" defcook ,
.BI "                       unsigned int *" flags ", const char *" symname );
.BI "uintptr_t la_symbind64(Elf64_Sym *" sym ", unsigned int " ndx ,
.BI "                       uintptr_t *" refcook ", uintptr_t *" defcook ,
.BI "                       unsigned int *" flags ", const char *" symname );
.fi
.PP
The dynamic linker invokes one of these functions
when a symbol binding occurs between two shared objects
that have been marked for auditing notification by
.BR la_objopen ().
The
.BR la_symbind32 ()
function is employed on 32-bit platforms;
the
.BR la_symbind64 ()
function is employed on 64-bit platforms.

The
.I sym
argument is a pointer to a structure
that provides information about the symbol being bound.
The structure definition is shown in
.IR <elf.h> .
Among the fields of this structure,
.I st_value
indicates the address to which the symbol is bound.

The
.I ndx
argument gives the index of the symbol in the symbol table
of the bound shared object.

The
.I refcook
argument identifies the shared object that is making the symbol reference;
this is the same identifier that is provided to the
.BR la_objopen ()
function that returned
.BR LA_FLG_BINDFROM .
The
.I defcook
argument identifies the shared object that defines the referenced symbol;
this is the same identifier that is provided to the
.BR la_objopen ()
function that returned
.BR LA_FLG_BINDTO .

The
.I symname
argument points a string containing the name of the symbol.

The
.I flags
argument is a bit mask that both provides information about the symbol
and can be used to modify further auditing of this
PLT (Procedure Linkage Table) entry.
The dynamic linker may supply the following bit values in this argument:
.\" LA_SYMB_STRUCTCALL appears to be unused
.TP 22
.B LA_SYMB_DLSYM
The binding resulted from a call to
.BR dlsym (3).
.TP
.B LA_SYMB_ALTVALUE
A previous
.BR la_symbind* ()
call returned an alternate value for this symbol.
.PP
By default, if the auditing library implements
.BR la_pltenter ()
and
.BR la_pltexit ()
functions (see below), then these functions are invoked, after
.BR la_symbind (),
for PLT entries, each time the symbol is referenced.
.\" pltenter/pltexit are called for non-dynamically loaded libraries,
.\" but don't seem to be called for dynamically loaded libs?
.\" Is this the same on Solaris?
The following flags can be ORed into
.IR *flags
to change this default behavior:
.TP 22
.B LA_SYMB_NOPLTENTER
Don't call
.BR la_pltenter ()
for this symbol.
.TP 22
.B LA_SYMB_NOPLTEXIT
Don't call
.BR la_pltexit ()
for this symbol.
.PP
The return value of
.BR la_symbind32 ()
and
.BR la_symbind64 ()
is the address to which control should be passed after the function returns.
If the auditing library is simply monitoring symbol bindings,
then it should return
.IR sym\->st_value .
A different value may be returned if the library wishes to direct control
to an alternate location.
.SS la_pltenter()
The precise name and argument types for this function
depend on the hardware platform.
(The appropriate definition is supplied by
.IR <link.h> .)
Here is the definition for x86-32:
.nf

.BI "Elf32_Addr la_i86_gnu_pltenter(Elf32_Sym *" sym ", unsigned int " ndx ,
.BI "                 uintptr_t *" refcook ", uintptr_t *" defcook ,
.BI "                 La_i86_regs *" regs ", unsigned int *" flags ,
.BI "                 const char *" symname ", long int *" framesizep );
.fi

This function is invoked just before a PLT entry is called,
between two shared objects that have been marked for binding notification.

The
.IR sym ,
.IR ndx ,
.IR refcook ,
.IR defcook ,
and
.IR symname
are as for
.BR la_symbind* ().

The
.I regs
argument points to a structure (defined in
.IR <link.h> )
containing the values of registers to be used for
the call to this PLT entry.

The
.I flags
argument points to a bit mask that conveys information about,
and can be used to modify subsequent auditing of, this PLT entry, as for
.BR la_symbind* ().

.\" FIXME . Is the following correct?
The
.IR framesizep
argument points to a
.IR "long\ int"
buffer that can be used to explicitly set the frame size
used for the call to this PLT entry.
If different
.BR la_pltenter ()
invocations for this symbol return different values,
then the maximum returned value is used.
The
.BR la_pltenter ()
function is called only if this buffer is
explicitly set to a suitable value.

The return value of
.BR la_pltenter ()
is as for
.BR la_symbind* ().
.SS la_pltexit()
The precise name and argument types for this function
depend on the hardware platform.
(The appropriate definition is supplied by
.IR <link.h> .)
Here is the definition for x86-32:
.nf

.BI "unsigned int la_i86_gnu_pltexit(Elf32_Sym *" sym ", unsigned int " ndx ,
.BI "                 uintptr_t *" refcook ", uintptr_t *" defcook ,
.BI "                 const La_i86_regs *" inregs ", La_i86_retval *" outregs ,
.BI "                 const char *" symname );
.fi
.PP
This function is called when a PLT entry,
made between two shared objects that have been marked
for binding notification, returns.
The function is called just before control returns to the caller
of the PLT entry.
.PP
The
.IR sym ,
.IR ndx ,
.IR refcook ,
.IR defcook ,
and
.IR symname
are as for
.BR la_symbind* ().

The
.I inregs
argument points to a structure (defined in
.IR <link.h> )
containing the values of registers used for the call to this PLT entry.
The
.I outregs
argument points to a structure (defined in
.IR <link.h> )
containing return values for the call to this PLT entry.
These values can be modified by the caller,
and the changes will be visible to the caller of the PLT entry.

In the current GNU implementation, the return value of
.BR la_pltexit ()
is ignored.
.\" This differs from Solaris, where an audit library that monitors
.\" symbol binding should return the value of the 'retval' argument
.\" (not provided by GNU, but equivalent to returning outregs->lrv_eax
.\" on (say) x86-32).
.SH CONFORMING TO
This API is nonstandard, but very similar to the Solaris API,
described in the Solaris
.IR "Linker and Libraries Guide" ,
in the chapter
.IR "Runtime Linker Auditing Interface" .
.SH NOTES
Note the following differences from the Solaris dynamic linker
auditing API:
.IP * 3
The Solaris
.BR la_objfilter ()
interface is not supported by the GNU implementation.
.IP *
The Solaris
.BR la_symbind32 ()
and
.BR la_pltexit ()
functions do not provide a
.I symname
argument.
.IP *
The Solaris
.BR la_pltexit ()
function does not provide
.I inregs
and
.I outregs
arguments (but does provide a
.IR retval
argument with the function return value).
.SH BUGS
In glibc versions up to and include 2.9,
specifying more than one audit library in
.B LD_AUDIT
results in a run-time crash.
This is reportedly fixed in glibc 2.10.
.\" FIXME . Specifying multiple audit libraries doesn't work on GNU.
.\" My simple tests on Solaris work okay, but not on Linux -- mtk, Jan 2009
.\" glibc bug filed: http://sourceware.org/bugzilla/show_bug.cgi?id=9733
.\" Reportedly, this is fixed on 16 Mar 2009 (i.e., for glibc 2.10)
.SH EXAMPLE
.nf
#include <link.h>
#include <stdio.h>

unsigned int
la_version(unsigned int version)
{
    printf("la_version(): %d\\n", version);

    return version;
}

char *
la_objsearch(const char *name, uintptr_t *cookie, unsigned int flag)
{
    printf("la_objsearch(): name = %s; cookie = %x", name, cookie);
    printf("; flag = %s\\n",
            (flag == LA_SER_ORIG) ?    "LA_SER_ORIG" :
            (flag == LA_SER_LIBPATH) ? "LA_SER_LIBPATH" :
            (flag == LA_SER_RUNPATH) ? "LA_SER_RUNPATH" :
            (flag == LA_SER_DEFAULT) ? "LA_SER_DEFAULT" :
            (flag == LA_SER_CONFIG) ?  "LA_SER_CONFIG" :
            (flag == LA_SER_SECURE) ?  "LA_SER_SECURE" :
            "???");

    return name;
}

void
la_activity (uintptr_t *cookie, unsigned int flag)
{
    printf("la_activity(): cookie = %x; flag = %s\\n", cookie,
            (flag == LA_ACT_CONSISTENT) ? "LA_ACT_CONSISTENT" :
            (flag == LA_ACT_ADD) ?        "LA_ACT_ADD" :
            (flag == LA_ACT_DELETE) ?     "LA_ACT_DELETE" :
            "???");
}

unsigned int
la_objopen(struct link_map *map, Lmid_t lmid, uintptr_t *cookie)
{
    printf("la_objopen(): loading \\"%s\\"; lmid = %s; cookie=%x\\n",
            map\->l_name,
            (lmid == LM_ID_BASE) ?  "LM_ID_BASE" :
            (lmid == LM_ID_NEWLM) ? "LM_ID_NEWLM" :
            "???",
            cookie);

    return LA_FLG_BINDTO | LA_FLG_BINDFROM;
}

unsigned int
la_objclose (uintptr_t *cookie)
{
    printf("la_objclose(): %x\\n", cookie);

    return 0;
}

void
la_preinit(uintptr_t *cookie)
{
    printf("la_preinit(): %x\\n", cookie);
}

uintptr_t
la_symbind32(Elf32_Sym *sym, unsigned int ndx, uintptr_t *refcook,
        uintptr_t *defcook, unsigned int *flags, const char *symname)
{
    printf("la_symbind32(): symname = %s; sym\->st_value = %p\\n",
            symname, sym\->st_value);
    printf("        ndx = %d; flags = 0x%x", ndx, *flags);
    printf("; refcook = %x; defcook = %x\\n", refcook, defcook);

    return sym\->st_value;
}

uintptr_t
la_symbind64(Elf64_Sym *sym, unsigned int ndx, uintptr_t *refcook,
        uintptr_t *defcook, unsigned int *flags, const char *symname)
{
    printf("la_symbind64(): symname = %s; sym\->st_value = %p\\n",
            symname, sym\->st_value);
    printf("        ndx = %d; flags = 0x%x", ndx, *flags);
    printf("; refcook = %x; defcook = %x\\n", refcook, defcook);

    return sym\->st_value;
}

Elf32_Addr
la_i86_gnu_pltenter(Elf32_Sym *sym, unsigned int ndx,
        uintptr_t *refcook, uintptr_t *defcook, La_i86_regs *regs,
        unsigned int *flags, const char *symname, long int *framesizep)
{
    printf("la_i86_gnu_pltenter(): %s (%p)\\n", symname, sym\->st_value);

    return sym\->st_value;
}
.fi
.SH SEE ALSO
.BR ldd (1),
.BR dlopen (3),
.BR ld.so (8),
.BR ldconfig (8)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
'\" t
.\" This man page is Copyright (C) 1999 Andi Kleen <ak@muc.de>.
.\"
.\" %%%LICENSE_START(VERBATIM_ONE_PARA)
.\" Permission is granted to distribute possibly modified copies
.\" of this page provided the header is included verbatim,
.\" and in case of nontrivial modification author and date
.\" of the modification is added to the header.
.\" %%%LICENSE_END
.\"
.\" Based on the original comments from Alexey Kuznetsov, written with
.\" help from Matthew Wilcox.
.\" $Id: rtnetlink.7,v 1.8 2000/01/22 01:55:04 freitag Exp $
.\"
.TH RTNETLINK  7 2013-03-05 "Linux" "Linux Programmer's Manual"
.SH NAME
rtnetlink \- Linux IPv4 routing socket
.SH SYNOPSIS
.B #include <asm/types.h>
.br
.B #include <linux/netlink.h>
.br
.B #include <linux/rtnetlink.h>
.br
.B #include <sys/socket.h>
.sp
.BI "rtnetlink_socket = socket(AF_NETLINK, int " socket_type ", NETLINK_ROUTE);"
.SH DESCRIPTION
Rtnetlink allows the kernel's routing tables to be read and altered.
It is used within the kernel to communicate between
various subsystems, though this usage is not documented here, and for
communication with user-space programs.
Network routes, IP addresses, link parameters, neighbor setups, queueing
disciplines, traffic classes and packet classifiers may all be controlled
through
.B NETLINK_ROUTE
sockets.
It is based on netlink messages; see
.BR netlink (7)
for more information.
.\" FIXME . ? all these macros could be moved to rtnetlink(3)
.SS Routing attributes
Some rtnetlink messages have optional attributes after the initial header:

.in +4n
.nf
struct rtattr {
    unsigned short rta_len;    /* Length of option */
    unsigned short rta_type;   /* Type of option */
    /* Data follows */
};
.fi
.in

These attributes should be manipulated using only the RTA_* macros
or libnetlink, see
.BR rtnetlink (3).
.SS Messages
Rtnetlink consists of these message types
(in addition to standard netlink messages):
.TP
.BR RTM_NEWLINK ", " RTM_DELLINK ", " RTM_GETLINK
Create, remove or get information about a specific network interface.
These messages contain an
.I ifinfomsg
structure followed by a series of
.I rtattr
structures.

.nf
struct ifinfomsg {
    unsigned char  ifi_family; /* AF_UNSPEC */
    unsigned short ifi_type;   /* Device type */
    int            ifi_index;  /* Interface index */
    unsigned int   ifi_flags;  /* Device flags  */
    unsigned int   ifi_change; /* change mask */
};
.fi

.\" FIXME Document ifinfomsg.ifi_type
.I ifi_flags
contains the device flags, see
.BR netdevice (7);
.I ifi_index
is the unique interface index
(since Linux 3.7, it is possible to feed a nonzero value with the
.B RTM_NEWLINK
message, thus creating a link with the given
.IR ifindex );
.I ifi_change
is reserved for future use and should be always set to 0xFFFFFFFF.
.TS
tab(:);
c s s
l l l.
Routing attributes
rta_type:value type:description
_
IFLA_UNSPEC:-:unspecified.
IFLA_ADDRESS:hardware address:interface L2 address
IFLA_BROADCAST:hardware address:L2 broadcast address.
IFLA_IFNAME:asciiz string:Device name.
IFLA_MTU:unsigned int:MTU of the device.
IFLA_LINK:int:Link type.
IFLA_QDISC:asciiz string:Queueing discipline.
IFLA_STATS:T{
see below
T}:Interface Statistics.
.TE
.sp
The value type for
.B IFLA_STATS
is
.IR "struct rtnl_link_stats"
.RI ( "struct net_device_stats"
in Linux 2.4 and earlier).
.TP
.BR RTM_NEWADDR ", " RTM_DELADDR ", " RTM_GETADDR
Add, remove or receive information about an IP address associated with
an interface.
In Linux 2.2, an interface can carry multiple IP addresses,
this replaces the alias device concept in 2.0.
In Linux 2.2, these messages
support IPv4 and IPv6 addresses.
They contain an
.I ifaddrmsg
structure, optionally followed by
.I rtattr
routing attributes.

.nf
struct ifaddrmsg {
    unsigned char ifa_family;    /* Address type */
    unsigned char ifa_prefixlen; /* Prefixlength of address */
    unsigned char ifa_flags;     /* Address flags */
    unsigned char ifa_scope;     /* Address scope */
    int           ifa_index;     /* Interface index */
};
.fi

.I ifa_family
is the address family type (currently
.B AF_INET
or
.BR AF_INET6 ),
.I ifa_prefixlen
is the length of the address mask of the address if defined for the
family (like for IPv4),
.I ifa_scope
is the address scope,
.I ifa_index
is the interface index of the interface the address is associated with.
.I ifa_flags
is a flag word of
.B IFA_F_SECONDARY
for secondary address (old alias interface),
.B IFA_F_PERMANENT
for a permanent address set by the user and other undocumented flags.
.TS
tab(:);
c s s
l l l.
Attributes
rta_type:value type:description
_
IFA_UNSPEC:-:unspecified.
IFA_ADDRESS:raw protocol address:interface address
IFA_LOCAL:raw protocol address:local address
IFA_LABEL:asciiz string:name of the interface
IFA_BROADCAST:raw protocol address:broadcast address.
IFA_ANYCAST:raw protocol address:anycast address
IFA_CACHEINFO:struct ifa_cacheinfo:Address information.
.TE
.\" FIXME Document struct ifa_cacheinfo
.TP
.BR RTM_NEWROUTE ", " RTM_DELROUTE ", " RTM_GETROUTE
Create, remove or receive information about a network route.
These messages contain an
.I rtmsg
structure with an optional sequence of
.I rtattr
structures following.
For
.BR RTM_GETROUTE ,
setting
.I rtm_dst_len
and
.I rtm_src_len
to 0 means you get all entries for the specified routing table.
For the other fields, except
.I rtm_table
and
.IR rtm_protocol ,
0 is the wildcard.

.nf
struct rtmsg {
    unsigned char rtm_family;   /* Address family of route */
    unsigned char rtm_dst_len;  /* Length of destination */
    unsigned char rtm_src_len;  /* Length of source */
    unsigned char rtm_tos;      /* TOS filter */

    unsigned char rtm_table;    /* Routing table ID */
    unsigned char rtm_protocol; /* Routing protocol; see below */
    unsigned char rtm_scope;    /* See below */
    unsigned char rtm_type;     /* See below */

    unsigned int  rtm_flags;
};
.fi
.TS
tab(:);
l l.
rtm_type:Route type
_
RTN_UNSPEC:unknown route
RTN_UNICAST:a gateway or direct route
RTN_LOCAL:a local interface route
RTN_BROADCAST:T{
a local broadcast route (sent as a broadcast)
T}
RTN_ANYCAST:T{
a local broadcast route (sent as a unicast)
T}
RTN_MULTICAST:a multicast route
RTN_BLACKHOLE:a packet dropping route
RTN_UNREACHABLE:an unreachable destination
RTN_PROHIBIT:a packet rejection route
RTN_THROW:continue routing lookup in another table
RTN_NAT:a network address translation rule
RTN_XRESOLVE:T{
refer to an external resolver (not implemented)
T}
.TE
.TS
tab(:);
l l.
rtm_protocol:Route origin.
_
RTPROT_UNSPEC:unknown
RTPROT_REDIRECT:T{
by an ICMP redirect (currently unused)
T}
RTPROT_KERNEL:by the kernel
RTPROT_BOOT:during boot
RTPROT_STATIC:by the administrator
.TE

Values larger than
.B RTPROT_STATIC
are not interpreted by the kernel, they are just for user information.
They may be used to tag the source of a routing information or to
distinguish between multiple routing daemons.
See
.I <linux/rtnetlink.h>
for the routing daemon identifiers which are already assigned.

.I rtm_scope
is the distance to the destination:
.TS
tab(:);
l l.
RT_SCOPE_UNIVERSE:global route
RT_SCOPE_SITE:T{
interior route in the local autonomous system
T}
RT_SCOPE_LINK:route on this link
RT_SCOPE_HOST:route on the local host
RT_SCOPE_NOWHERE:destination doesn't exist
.TE

The values between
.B RT_SCOPE_UNIVERSE
and
.B RT_SCOPE_SITE
are available to the user.

The
.I rtm_flags
have the following meanings:
.TS
tab(:);
l l.
RTM_F_NOTIFY:T{
if the route changes, notify the user via rtnetlink
T}
RTM_F_CLONED:route is cloned from another route
RTM_F_EQUALIZE:a multipath equalizer (not yet implemented)
.TE

.I rtm_table
specifies the routing table
.TS
tab(:);
l l.
RT_TABLE_UNSPEC:an unspecified routing table
RT_TABLE_DEFAULT:the default table
RT_TABLE_MAIN:the main table
RT_TABLE_LOCAL:the local table
.TE

The user may assign arbitrary values between
.B RT_TABLE_UNSPEC
and
.BR RT_TABLE_DEFAULT .
.\" Keep table on same page
.bp +1
.TS
tab(:);
c s s
l l l.
Attributes
rta_type:value type:description
_
RTA_UNSPEC:-:ignored.
RTA_DST:protocol address:Route destination address.
RTA_SRC:protocol address:Route source address.
RTA_IIF:int:Input interface index.
RTA_OIF:int:Output interface index.
RTA_GATEWAY:protocol address:The gateway of the route
RTA_PRIORITY:int:Priority of route.
RTA_PREFSRC::
RTA_METRICS:int:Route metric
RTA_MULTIPATH::
RTA_PROTOINFO::
RTA_FLOW::
RTA_CACHEINFO::
.TE

.B Fill these values in!
.TP
.BR RTM_NEWNEIGH ", " RTM_DELNEIGH  ", " RTM_GETNEIGH
Add, remove or receive information about a neighbor table
entry (e.g., an ARP entry).
The message contains an
.I ndmsg
structure.

.nf
struct ndmsg {
    unsigned char ndm_family;
    int           ndm_ifindex;  /* Interface index */
    __u16         ndm_state;    /* State */
    __u8          ndm_flags;    /* Flags */
    __u8          ndm_type;
};

struct nda_cacheinfo {
    __u32         ndm_confirmed;
    __u32         ndm_used;
    __u32         ndm_updated;
    __u32         ndm_refcnt;
};
.fi

.I ndm_state
is a bit mask of the following states:
.TS
tab(:);
l l.
NUD_INCOMPLETE:a currently resolving cache entry
NUD_REACHABLE:a confirmed working cache entry
NUD_STALE:an expired cache entry
NUD_DELAY:an entry waiting for a timer
NUD_PROBE:a cache entry that is currently reprobed
NUD_FAILED:an invalid cache entry
NUD_NOARP:a device with no destination cache
NUD_PERMANENT:a static entry
.TE

Valid
.I ndm_flags
are:
.TS
tab(:);
l l.
NTF_PROXY:a proxy arp entry
NTF_ROUTER:an IPv6 router
.TE

.\" FIXME .
.\" document the members of the struct better
The
.I rtattr
struct has the following meanings for the
.I rta_type
field:
.TS
tab(:);
l l.
NDA_UNSPEC:unknown type
NDA_DST:a neighbor cache n/w layer destination address
NDA_LLADDR:a neighbor cache link layer address
NDA_CACHEINFO:cache statistics.
.TE

If the
.I rta_type
field is
.BR NDA_CACHEINFO ,
then a
.I struct nda_cacheinfo
header follows
.TP
.BR RTM_NEWRULE ", " RTM_DELRULE ", " RTM_GETRULE
Add, delete or retrieve a routing rule.
Carries a
.I struct rtmsg
.TP
.BR RTM_NEWQDISC ", " RTM_DELQDISC ", " RTM_GETQDISC
Add, remove or get a queueing discipline.
The message contains a
.I struct tcmsg
and may be followed by a series of
attributes.

.nf
struct tcmsg {
    unsigned char    tcm_family;
    int              tcm_ifindex;   /* interface index */
    __u32            tcm_handle;    /* Qdisc handle */
    __u32            tcm_parent;    /* Parent qdisc */
    __u32            tcm_info;
};
.fi
.TS
tab(:);
c s s
l2 l2 l.
Attributes
rta_type:value type:Description
_
TCA_UNSPEC:-:unspecified
TCA_KIND:asciiz string:Name of queueing discipline
TCA_OPTIONS:byte sequence:Qdisc-specific options follow
TCA_STATS:struct tc_stats:Qdisc statistics.
TCA_XSTATS:qdisc-specific:Module-specific statistics.
TCA_RATE:struct tc_estimator:Rate limit.
.TE

In addition, various other qdisc-module-specific attributes are allowed.
For more information see the appropriate include files.
.TP
.BR RTM_NEWTCLASS ", " RTM_DELTCLASS ", " RTM_GETTCLASS
Add, remove or get a traffic class.
These messages contain a
.I struct tcmsg
as described above.
.TP
.BR RTM_NEWTFILTER ", " RTM_DELTFILTER ", " RTM_GETTFILTER
Add, remove or receive information about a traffic filter.
These messages contain a
.I struct tcmsg
as described above.
.SH VERSIONS
.B rtnetlink
is a new feature of Linux 2.2.
.SH BUGS
This manual page is incomplete.
.SH SEE ALSO
.BR cmsg (3),
.BR rtnetlink (3),
.BR ip (7),
.BR netlink (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2014 Michael Kerrisk <mtk.manpages@gmail.com>
.\" and Copyright (C) 2014 Peter Zijlstra <peterz@infradead.org>
.\" and Copyright (C) 2014 Juri Lelli <juri.lelli@gmail.com>
.\" Various pieces from the old sched_setscheduler(2) page
.\" 	Copyright (C) Tom Bjorkholm, Markus Kuhn & David A. Wheeler 1996-1999
.\" 	and Copyright (C) 2007 Carsten Emde <Carsten.Emde@osadl.org>
.\" 	and Copyright (C) 2008 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.\" Worth looking at: http://rt.wiki.kernel.org/index.php
.\"
.TH SCHED 7 2014-10-02 "Linux" "Linux Programmer's Manual"
.SH NAME
sched \- overview of scheduling APIs
.SH DESCRIPTION
.SS API summary
The Linux scheduling APIs are as follows:
.TP
.BR sched_setscheduler (2)
Set the scheduling policy and parameters of a specified thread.
.TP
.BR sched_getscheduler (2)
Return the scheduling policy of a specified thread.
.TP
.BR sched_setparam (2)
Set the scheduling parameters of a specified thread.
.TP
.BR sched_getparam (2)
Fetch the scheduling parameters of a specified thread.
.TP
.BR sched_get_priority_max (2)
Return the minimum priority available in a specified scheduling policy.
.TP
.BR sched_get_priority_min (2)
Return the maximum priority available in a specified scheduling policy.
.TP
.BR sched_rr_get_interval (2)
Fetch the quantum used for threads that are scheduled under
the "round-robin" scheduling policy.
.TP
.BR sched_yield (2)
Cause the caller to relinquish the CPU,
so that some other thread be executed.
.TP
.BR sched_setaffinity (2)
(Linux-specific)
Set the CPU affinity of a specified thread.
.TP
.BR sched_getaffinity (2)
(Linux-specific)
Get the CPU affinity of a specified thread.
.TP
.BR sched_setattr (2)
Set the scheduling policy and parameters of a specified thread.
This (Linux-specific) system call provides a superset of the functionality of
.BR sched_setscheduler (2)
and
.BR sched_setparam (2).
.TP
.BR sched_getattr (2)
Fetch the scheduling policy and parameters of a specified thread.
This (Linux-specific) system call provides a superset of the functionality of
.BR sched_getscheduler (2)
and
.BR sched_getparam (2).
.\"
.SS Scheduling policies
The scheduler is the kernel component that decides which runnable thread
will be executed by the CPU next.
Each thread has an associated scheduling policy and a \fIstatic\fP
scheduling priority,
.IR sched_priority .
The scheduler makes its decisions based on knowledge of the scheduling
policy and static priority of all threads on the system.

For threads scheduled under one of the normal scheduling policies
(\fBSCHED_OTHER\fP, \fBSCHED_IDLE\fP, \fBSCHED_BATCH\fP),
\fIsched_priority\fP is not used in scheduling
decisions (it must be specified as 0).

Processes scheduled under one of the real-time policies
(\fBSCHED_FIFO\fP, \fBSCHED_RR\fP) have a
\fIsched_priority\fP value in the range 1 (low) to 99 (high).
(As the numbers imply, real-time threads always have higher priority
than normal threads.)
Note well: POSIX.1-2001 requires an implementation to support only a
minimum 32 distinct priority levels for the real-time policies,
and some systems supply just this minimum.
Portable programs should use
.BR sched_get_priority_min (2)
and
.BR sched_get_priority_max (2)
to find the range of priorities supported for a particular policy.

Conceptually, the scheduler maintains a list of runnable
threads for each possible \fIsched_priority\fP value.
In order to determine which thread runs next, the scheduler looks for
the nonempty list with the highest static priority and selects the
thread at the head of this list.

A thread's scheduling policy determines
where it will be inserted into the list of threads
with equal static priority and how it will move inside this list.

All scheduling is preemptive: if a thread with a higher static
priority becomes ready to run, the currently running thread
will be preempted and
returned to the wait list for its static priority level.
The scheduling policy determines the
ordering only within the list of runnable threads with equal static
priority.
.SS SCHED_FIFO: First in-first out scheduling
\fBSCHED_FIFO\fP can be used only with static priorities higher than
0, which means that when a \fBSCHED_FIFO\fP threads becomes runnable,
it will always immediately preempt any currently running
\fBSCHED_OTHER\fP, \fBSCHED_BATCH\fP, or \fBSCHED_IDLE\fP thread.
\fBSCHED_FIFO\fP is a simple scheduling
algorithm without time slicing.
For threads scheduled under the
\fBSCHED_FIFO\fP policy, the following rules apply:
.IP * 3
A \fBSCHED_FIFO\fP thread that has been preempted by another thread of
higher priority will stay at the head of the list for its priority and
will resume execution as soon as all threads of higher priority are
blocked again.
.IP *
When a \fBSCHED_FIFO\fP thread becomes runnable, it
will be inserted at the end of the list for its priority.
.IP *
A call to
.BR sched_setscheduler (2),
.BR sched_setparam (2),
or
.BR sched_setattr (2)
will put the
\fBSCHED_FIFO\fP (or \fBSCHED_RR\fP) thread identified by
\fIpid\fP at the start of the list if it was runnable.
As a consequence, it may preempt the currently running thread if
it has the same priority.
(POSIX.1-2001 specifies that the thread should go to the end
of the list.)
.\" In 2.2.x and 2.4.x, the thread is placed at the front of the queue
.\" In 2.0.x, the Right Thing happened: the thread went to the back -- MTK
.IP *
A thread calling
.BR sched_yield (2)
will be put at the end of the list.
.PP
No other events will move a thread
scheduled under the \fBSCHED_FIFO\fP policy in the wait list of
runnable threads with equal static priority.

A \fBSCHED_FIFO\fP
thread runs until either it is blocked by an I/O request, it is
preempted by a higher priority thread, or it calls
.BR sched_yield (2).
.SS SCHED_RR: Round-robin scheduling
\fBSCHED_RR\fP is a simple enhancement of \fBSCHED_FIFO\fP.
Everything
described above for \fBSCHED_FIFO\fP also applies to \fBSCHED_RR\fP,
except that each thread is allowed to run only for a maximum time
quantum.
If a \fBSCHED_RR\fP thread has been running for a time
period equal to or longer than the time quantum, it will be put at the
end of the list for its priority.
A \fBSCHED_RR\fP thread that has
been preempted by a higher priority thread and subsequently resumes
execution as a running thread will complete the unexpired portion of
its round-robin time quantum.
The length of the time quantum can be
retrieved using
.BR sched_rr_get_interval (2).
.\" On Linux 2.4, the length of the RR interval is influenced
.\" by the process nice value -- MTK
.\"
.SS SCHED_DEADLINE: Sporadic task model deadline scheduling
Since version 3.14, Linux provides a deadline scheduling policy
.RB ( SCHED_DEADLINE ).
This policy is currently implemented using
GEDF (Global Earliest Deadline First)
in conjunction with CBS (Constant Bandwidth Server).
To set and fetch this policy and associated attributes,
one must use the Linux-specific
.BR sched_setattr (2)
and
.BR sched_getattr (2)
system calls.

A sporadic task is one that has a sequence of jobs, where each
job is activated at most once per period.
Each job also has a
.IR "relative deadline" ,
before which it should finish execution, and a
.IR "computation time" ,
which is the CPU time necessary for executing the job.
The moment when a task wakes up
because a new job has to be executed is called the
.IR "arrival time"
(also referred to as the request time or release time).
The
.IR "start time"
is the time at which a task starts its execution.
The
.I "absolute deadline"
is thus obtained by adding the relative deadline to the arrival time.

The following diagram clarifies these terms:

.in +4n
.nf
arrival/wakeup                    absolute deadline
     |    start time                    |
     |        |                         |
     v        v                         v
-----x--------xooooooooooooooooo--------x--------x---
              |<- comp. time ->|
     |<------- relative deadline ------>|
     |<-------------- period ------------------->|
.fi
.in

When setting a
.B SCHED_DEADLINE
policy for a thread using
.BR sched_setattr (2),
one can specify three parameters:
.IR Runtime ,
.IR Deadline ,
and
.IR Period .
These parameters do not necessarily correspond to the aforementioned terms:
usual practice is to set Runtime to something bigger than the average
computation time (or worst-case execution time for hard real-time tasks),
Deadline to the relative deadline, and Period to the period of the task.
Thus, for
.BR SCHED_DEADLINE
scheduling, we have:

.in +4n
.nf
arrival/wakeup                    absolute deadline
     |    start time                    |
     |        |                         |
     v        v                         v
-----x--------xooooooooooooooooo--------x--------x---
              |<-- Runtime ------->|
     |<----------- Deadline ----------->|
     |<-------------- Period ------------------->|
.fi
.in

The three deadline-scheduling parameters correspond to the
.IR sched_runtime ,
.IR sched_deadline ,
and
.IR sched_period
fields of the
.I sched_attr
structure; see
.BR sched_setattr (2).
These fields express value in nanoseconds.
.\" FIXME It looks as though specifying sched_period as 0 means
.\"       "make sched_period the same as sched_deadline".
.\"       This needs to be documented.
If
.IR sched_period
is specified as 0, then it is made the same as
.IR sched_deadline .

The kernel requires that:

    sched_runtime <= sched_deadline <= sched_period

.\" See __checkparam_dl in kernel/sched/core.c
In addition, under the current implementation,
all of the parameter values must be at least 1024
(i.e., just over one microsecond,
which is the resolution of the implementation), and less than 2^63.
If any of these checks fails,
.BR sched_setattr (2)
fails with the error
.BR EINVAL .

The CBS guarantees non-interference between tasks, by throttling
threads that attempt to over-run their specified Runtime.

To ensure deadline scheduling guarantees,
the kernel must prevent situations where the set of
.B SCHED_DEADLINE
threads is not feasible (schedulable) within the given constraints.
The kernel thus performs an admittance test when setting or changing
.B SCHED_DEADLINE
policy and attributes.
This admission test calculates whether the change is feasible;
if it is not
.BR sched_setattr (2)
fails with the error
.BR EBUSY .

For example, it is required (but not necessarily sufficient) for
the total utilization to be less than or equal to the total number of
CPUs available, where, since each thread can maximally run for
Runtime per Period, that thread's utilization is its
Runtime divided by its Period.

In order to fulfil the guarantees that are made when
a thread is admitted to the
.BR SCHED_DEADLINE
policy,
.BR SCHED_DEADLINE
threads are the highest priority (user controllable) threads in the
system; if any
.BR SCHED_DEADLINE
thread is runnable,
it will preempt any thread scheduled under one of the other policies.

A call to
.BR fork (2)
by a thread scheduled under the
.B SCHED_DEADLINE
policy will fail with the error
.BR EAGAIN ,
unless the thread has its reset-on-fork flag set (see below).

A
.B SCHED_DEADLINE
thread that calls
.BR sched_yield (2)
will yield the current job and wait for a new period to begin.
.\"
.\" FIXME Calling sched_getparam() on a SCHED_DEADLINE thread
.\"       fails with EINVAL, but sched_getscheduler() succeeds.
.\"       Is that intended? (Why?)
.\"
.SS SCHED_OTHER: Default Linux time-sharing scheduling
\fBSCHED_OTHER\fP can be used at only static priority 0.
\fBSCHED_OTHER\fP is the standard Linux time-sharing scheduler that is
intended for all threads that do not require the special
real-time mechanisms.
The thread to run is chosen from the static
priority 0 list based on a \fIdynamic\fP priority that is determined only
inside this list.
The dynamic priority is based on the nice value (set by
.BR nice (2),
.BR setpriority (2),
or
.BR sched_setattr (2))
and increased for each time quantum the thread is ready to run,
but denied to run by the scheduler.
This ensures fair progress among all \fBSCHED_OTHER\fP threads.
.\"
.SS SCHED_BATCH: Scheduling batch processes
(Since Linux 2.6.16.)
\fBSCHED_BATCH\fP can be used only at static priority 0.
This policy is similar to \fBSCHED_OTHER\fP in that it schedules
the thread according to its dynamic priority
(based on the nice value).
The difference is that this policy
will cause the scheduler to always assume
that the thread is CPU-intensive.
Consequently, the scheduler will apply a small scheduling
penalty with respect to wakeup behavior,
so that this thread is mildly disfavored in scheduling decisions.

.\" The following paragraph is drawn largely from the text that
.\" accompanied Ingo Molnar's patch for the implementation of
.\" SCHED_BATCH.
.\" commit b0a9499c3dd50d333e2aedb7e894873c58da3785
This policy is useful for workloads that are noninteractive,
but do not want to lower their nice value,
and for workloads that want a deterministic scheduling policy without
interactivity causing extra preemptions (between the workload's tasks).
.\"
.SS SCHED_IDLE: Scheduling very low priority jobs
(Since Linux 2.6.23.)
\fBSCHED_IDLE\fP can be used only at static priority 0;
the process nice value has no influence for this policy.

This policy is intended for running jobs at extremely low
priority (lower even than a +19 nice value with the
.B SCHED_OTHER
or
.B SCHED_BATCH
policies).
.\"
.SS Resetting scheduling policy for child processes
Each thread has a reset-on-fork scheduling flag.
When this flag is set, children created by
.BR fork (2)
do not inherit privileged scheduling policies.
The reset-on-fork flag can be set by either:
.IP * 3
ORing the
.B SCHED_RESET_ON_FORK
flag into the
.I policy
argument when calling
.BR sched_setscheduler (2)
(since Linux 2.6.32);
or
.IP *
specifying the
.B SCHED_FLAG_RESET_ON_FORK
flag in
.IR attr.sched_flags
when calling
.BR sched_setattr (2).
.PP
Note that the constants used with these two APIs have different names.
The state of the reset-on-fork flag can analogously be retrieved using
.BR sched_getscheduler (2)
and
.BR sched_getattr (2).

The reset-on-fork feature is intended for media-playback applications,
and can be used to prevent applications evading the
.BR RLIMIT_RTTIME
resource limit (see
.BR getrlimit (2))
by creating multiple child processes.

More precisely, if the reset-on-fork flag is set,
the following rules apply for subsequently created children:
.IP * 3
If the calling thread has a scheduling policy of
.B SCHED_FIFO
or
.BR SCHED_RR ,
the policy is reset to
.BR SCHED_OTHER
in child processes.
.IP *
If the calling process has a negative nice value,
the nice value is reset to zero in child processes.
.PP
After the reset-on-fork flag has been enabled,
it can be reset only if the thread has the
.BR CAP_SYS_NICE
capability.
This flag is disabled in child processes created by
.BR fork (2).
.\"
.SS Privileges and resource limits
In Linux kernels before 2.6.12, only privileged
.RB ( CAP_SYS_NICE )
threads can set a nonzero static priority (i.e., set a real-time
scheduling policy).
The only change that an unprivileged thread can make is to set the
.B SCHED_OTHER
policy, and this can be done only if the effective user ID of the caller
matches the real or effective user ID of the target thread
(i.e., the thread specified by
.IR pid )
whose policy is being changed.

A thread must be privileged
.RB ( CAP_SYS_NICE )
in order to set or modify a
.BR SCHED_DEADLINE
policy.

Since Linux 2.6.12, the
.B RLIMIT_RTPRIO
resource limit defines a ceiling on an unprivileged thread's
static priority for the
.B SCHED_RR
and
.B SCHED_FIFO
policies.
The rules for changing scheduling policy and priority are as follows:
.IP * 3
If an unprivileged thread has a nonzero
.B RLIMIT_RTPRIO
soft limit, then it can change its scheduling policy and priority,
subject to the restriction that the priority cannot be set to a
value higher than the maximum of its current priority and its
.B RLIMIT_RTPRIO
soft limit.
.IP *
If the
.B RLIMIT_RTPRIO
soft limit is 0, then the only permitted changes are to lower the priority,
or to switch to a non-real-time policy.
.IP *
Subject to the same rules,
another unprivileged thread can also make these changes,
as long as the effective user ID of the thread making the change
matches the real or effective user ID of the target thread.
.IP *
Special rules apply for the
.BR SCHED_IDLE
policy.
In Linux kernels before 2.6.39,
an unprivileged thread operating under this policy cannot
change its policy, regardless of the value of its
.BR RLIMIT_RTPRIO
resource limit.
In Linux kernels since 2.6.39,
.\" commit c02aa73b1d18e43cfd79c2f193b225e84ca497c8
an unprivileged thread can switch to either the
.BR SCHED_BATCH
or the
.BR SCHED_NORMAL
policy so long as its nice value falls within the range permitted by its
.BR RLIMIT_NICE
resource limit (see
.BR getrlimit (2)).
.PP
Privileged
.RB ( CAP_SYS_NICE )
threads ignore the
.B RLIMIT_RTPRIO
limit; as with older kernels,
they can make arbitrary changes to scheduling policy and priority.
See
.BR getrlimit (2)
for further information on
.BR RLIMIT_RTPRIO .
.SS Limiting the CPU usage of real-time and deadline processes
A nonblocking infinite loop in a thread scheduled under the
.BR SCHED_FIFO ,
.BR SCHED_RR ,
or
.BR SCHED_DEADLINE
policy will block all threads with lower
priority forever.
Prior to Linux 2.6.25, the only way of preventing a runaway real-time
process from freezing the system was to run (at the console)
a shell scheduled under a higher static priority than the tested application.
This allows an emergency kill of tested
real-time applications that do not block or terminate as expected.

Since Linux 2.6.25, there are other techniques for dealing with runaway
real-time and deadline processes.
One of these is to use the
.BR RLIMIT_RTTIME
resource limit to set a ceiling on the CPU time that
a real-time process may consume.
See
.BR getrlimit (2)
for details.

Since version 2.6.25, Linux also provides two
.I /proc
files that can be used to reserve a certain amount of CPU time
to be used by non-real-time processes.
Reserving some CPU time in this fashion allows some CPU time to be
allocated to (say) a root shell that can be used to kill a runaway process.
Both of these files specify time values in microseconds:
.TP
.IR /proc/sys/kernel/sched_rt_period_us
This file specifies a scheduling period that is equivalent to
100% CPU bandwidth.
The value in this file can range from 1 to
.BR INT_MAX ,
giving an operating range of 1 microsecond to around 35 minutes.
The default value in this file is 1,000,000 (1 second).
.TP
.IR /proc/sys/kernel/sched_rt_runtime_us
The value in this file specifies how much of the "period" time
can be used by all real-time and deadline scheduled processes
on the system.
The value in this file can range from \-1 to
.BR INT_MAX \-1.
Specifying \-1 makes the runtime the same as the period;
that is, no CPU time is set aside for non-real-time processes
(which was the Linux behavior before kernel 2.6.25).
The default value in this file is 950,000 (0.95 seconds),
meaning that 5% of the CPU time is reserved for processes that
don't run under a real-time or deadline scheduling policy.
.PP
.SS Response time
A blocked high priority thread waiting for I/O has a certain
response time before it is scheduled again.
The device driver writer
can greatly reduce this response time by using a "slow interrupt"
interrupt handler.
.\" as described in
.\" .BR request_irq (9).
.SS Miscellaneous
Child processes inherit the scheduling policy and parameters across a
.BR fork (2).
The scheduling policy and parameters are preserved across
.BR execve (2).

Memory locking is usually needed for real-time processes to avoid
paging delays; this can be done with
.BR mlock (2)
or
.BR mlockall (2).
.SH NOTES
.PP
Originally, Standard Linux was intended as a general-purpose operating
system being able to handle background processes, interactive
applications, and less demanding real-time applications (applications that
need to usually meet timing deadlines).
Although the Linux kernel 2.6
allowed for kernel preemption and the newly introduced O(1) scheduler
ensures that the time needed to schedule is fixed and deterministic
irrespective of the number of active tasks, true real-time computing
was not possible up to kernel version 2.6.17.
.SS Real-time features in the mainline Linux kernel
.\" FIXME . Probably this text will need some minor tweaking
.\" by about the time of 2.6.30; ask Carsten Emde about this then.
From kernel version 2.6.18 onward, however, Linux is gradually
becoming equipped with real-time capabilities,
most of which are derived from the former
.I realtime-preempt
patches developed by Ingo Molnar, Thomas Gleixner,
Steven Rostedt, and others.
Until the patches have been completely merged into the
mainline kernel
(this is expected to be around kernel version 2.6.30),
they must be installed to achieve the best real-time performance.
These patches are named:
.in +4n
.nf

patch-\fIkernelversion\fP-rt\fIpatchversion\fP
.fi
.in
.PP
and can be downloaded from
.UR http://www.kernel.org\:/pub\:/linux\:/kernel\:/projects\:/rt/
.UE .

Without the patches and prior to their full inclusion into the mainline
kernel, the kernel configuration offers only the three preemption classes
.BR CONFIG_PREEMPT_NONE ,
.BR CONFIG_PREEMPT_VOLUNTARY ,
and
.B CONFIG_PREEMPT_DESKTOP
which respectively provide no, some, and considerable
reduction of the worst-case scheduling latency.

With the patches applied or after their full inclusion into the mainline
kernel, the additional configuration item
.B CONFIG_PREEMPT_RT
becomes available.
If this is selected, Linux is transformed into a regular
real-time operating system.
The FIFO and RR scheduling policies are then used to run a thread
with true real-time priority and a minimum worst-case scheduling latency.
.SH SEE ALSO
.ad l
.nh
.BR chrt (1),
.BR taskset (1),
.BR getpriority (2),
.BR mlock (2),
.BR mlockall (2),
.BR munlock (2),
.BR munlockall (2),
.BR nice (2),
.BR sched_get_priority_max (2),
.BR sched_get_priority_min (2),
.BR sched_getscheduler (2),
.BR sched_getaffinity (2),
.BR sched_getparam (2),
.BR sched_rr_get_interval (2),
.BR sched_setaffinity (2),
.BR sched_setscheduler (2),
.BR sched_setparam (2),
.BR sched_yield (2),
.BR setpriority (2),
.BR pthread_getaffinity_np (3),
.BR pthread_setaffinity_np (3),
.BR sched_getcpu (3),
.BR capabilities (7),
.BR cpuset (7)
.ad
.PP
.I Programming for the real world \- POSIX.4
by Bill O. Gallmeister, O'Reilly & Associates, Inc., ISBN 1-56592-074-0.
.PP
The Linux kernel source files
.IR Documentation/scheduler/sched-deadline.txt ,
.IR Documentation/scheduler/sched-rt-group.txt ,
.IR Documentation/scheduler/sched-design-CFS.txt ,
and
.IR Documentation/scheduler/sched-nice-design.txt
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
'\" t
.\" Copyright (C) 2006 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH SEM_OVERVIEW 7 2012-05-13 "Linux" "Linux Programmer's Manual"
.SH NAME
sem_overview \- overview of POSIX semaphores
.SH DESCRIPTION
POSIX semaphores allow processes and threads to synchronize their actions.

A semaphore is an integer whose value is never allowed to fall below zero.
Two operations can be performed on semaphores:
increment the semaphore value by one
.RB ( sem_post (3));
and decrement the semaphore value by one
.RB ( sem_wait (3)).
If the value of a semaphore is currently zero, then a
.BR sem_wait (3)
operation will block until the value becomes greater than zero.

POSIX semaphores come in two forms: named semaphores and
unnamed semaphores.
.TP
.B Named semaphores
A named semaphore is identified by a name of the form
.IR /somename ;
that is, a null-terminated string of up to
.BI NAME_MAX \-4
(i.e., 251) characters consisting of an initial slash,
.\" glibc allows the initial slash to be omitted, and makes
.\" multiple initial slashes equivalent to a single slash.
.\" This differs from the implementation of POSIX message queues.
followed by one or more characters, none of which are slashes.
.\" glibc allows subdirectory components in the name, in which
.\" case the subdirectory tree must exist under /dev/shm, and
.\" the fist subdirectory component must exist as the name
.\" sem.name, and all of the subdirectory components must allow the
.\" required permissions if a user wants to create a semaphore
.\" object in a subdirectory.
Two processes can operate on the same named semaphore by passing
the same name to
.BR sem_open (3).

The
.BR sem_open (3)
function creates a new named semaphore or opens an existing
named semaphore.
After the semaphore has been opened, it can be operated on using
.BR sem_post (3)
and
.BR sem_wait (3).
When a process has finished using the semaphore, it can use
.BR sem_close (3)
to close the semaphore.
When all processes have finished using the semaphore,
it can be removed from the system using
.BR sem_unlink (3).
.TP
.B Unnamed semaphores (memory-based semaphores)
An unnamed semaphore does not have a name.
Instead the semaphore is placed in a region of memory that
is shared between multiple threads (a
.IR "thread-shared semaphore" )
or processes (a
.IR "process-shared semaphore" ).
A thread-shared semaphore is placed in an area of memory shared
between the threads of a process, for example, a global variable.
A process-shared semaphore must be placed in a shared memory region
(e.g., a System V shared memory segment created using
.BR shmget (2),
or a POSIX shared memory object built created using
.BR shm_open (3)).

Before being used, an unnamed semaphore must be initialized using
.BR sem_init (3).
It can then be operated on using
.BR sem_post (3)
and
.BR sem_wait (3).
When the semaphore is no longer required,
and before the memory in which it is located is deallocated,
the semaphore should be destroyed using
.BR sem_destroy (3).
.PP
The remainder of this section describes some specific details
of the Linux implementation of POSIX semaphores.
.SS Versions
Prior to kernel 2.6, Linux supported only unnamed,
thread-shared semaphores.
On a system with Linux 2.6 and a glibc that provides the NPTL
threading implementation,
a complete implementation of POSIX semaphores is provided.
.SS Persistence
POSIX named semaphores have kernel persistence:
if not removed by
.BR sem_unlink (3),
a semaphore will exist until the system is shut down.
.SS Linking
Programs using the POSIX semaphores API must be compiled with
.I cc \-pthread
to link against the real-time library,
.IR librt .
.SS Accessing named semaphores via the filesystem
On Linux, named semaphores are created in a virtual filesystem,
normally mounted under
.IR /dev/shm ,
with names of the form
.IR \fBsem.\fPsomename .
(This is the reason that semaphore names are limited to
.BI NAME_MAX \-4
rather than
.B NAME_MAX
characters.)

Since Linux 2.6.19, ACLs can be placed on files under this directory,
to control object permissions on a per-user and per-group basis.
.SH CONFORMING TO
POSIX.1-2001.
.SH NOTES
System V semaphores
.RB ( semget (2),
.BR semop (2),
etc.) are an older semaphore API.
POSIX semaphores provide a simpler, and better designed interface than
System V semaphores;
on the other hand POSIX semaphores are less widely available
(especially on older systems) than System V semaphores.
.SH EXAMPLE
An example of the use of various POSIX semaphore functions is shown in
.BR sem_wait (3).
.SH SEE ALSO
.BR sem_close (3),
.BR sem_destroy (3),
.BR sem_getvalue (3),
.BR sem_init (3),
.BR sem_open (3),
.BR sem_post (3),
.BR sem_unlink (3),
.BR sem_wait (3),
.BR pthreads (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
'\" t
.\" Copyright (C) 2008, Linux Foundation, written by Michael Kerrisk
.\" <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH SHM_OVERVIEW 7 2010-09-10 "Linux" "Linux Programmer's Manual"
.SH NAME
shm_overview \- overview of POSIX shared memory
.SH DESCRIPTION
The POSIX shared memory API allows processes to communicate information
by sharing a region of memory.

The interfaces employed in the API are:
.TP 15
.BR shm_open (3)
Create and open a new object, or open an existing object.
This is analogous to
.BR open (2).
The call returns a file descriptor for use by the other
interfaces listed below.
.TP
.BR ftruncate (2)
Set the size of the shared memory object.
(A newly created shared memory object has a length of zero.)
.TP
.BR mmap (2)
Map the shared memory object into the virtual address space
of the calling process.
.TP
.BR munmap (2)
Unmap the shared memory object from the virtual address space
of the calling process.
.TP
.BR shm_unlink (3)
Remove a shared memory object name.
.TP
.BR close (2)
Close the file descriptor allocated by
.BR shm_open (3)
when it is no longer needed.
.TP
.BR fstat (2)
Obtain a
.I stat
structure that describes the shared memory object.
Among the information returned by this call are the object's
size
.RI ( st_size ),
permissions
.RI ( st_mode ),
owner
.RI ( st_uid ),
and group
.RI ( st_gid ).
.TP
.BR fchown (2)
To change the ownership of a shared memory object.
.TP
.BR fchmod (2)
To change the permissions of a shared memory object.
.SS Versions
POSIX shared memory is supported since Linux 2.4 and glibc 2.2.
.SS Persistence
POSIX shared memory objects have kernel persistence:
a shared memory object will exist until the system is shut down,
or until all processes have unmapped the object and it has been deleted with
.BR shm_unlink (3)
.SS Linking
Programs using the POSIX shared memory API must be compiled with
.I cc \-lrt
to link against the real-time library,
.IR librt .
.SS Accessing shared memory objects via the filesystem
On Linux, shared memory objects are created in a
.RI ( tmpfs )
virtual filesystem, normally mounted under
.IR /dev/shm .
Since kernel 2.6.19, Linux supports the use of access control lists (ACLs)
to control the permissions of objects in the virtual filesystem.
.SH CONFORMING TO
POSIX.1-2001.
.SH NOTES
Typically, processes must synchronize their access to a shared
memory object, using, for example, POSIX semaphores.

System V shared memory
.RB ( shmget (2),
.BR shmop (2),
etc.) is an older shared memory API.
POSIX shared memory provides a simpler, and better designed interface;
on the other hand POSIX shared memory is somewhat less widely available
(especially on older systems) than System V shared memory.
.SH SEE ALSO
.BR fchmod (2),
.BR fchown (2),
.BR fstat (2),
.BR ftruncate (2),
.BR mmap (2),
.BR mprotect (2),
.BR munmap (2),
.BR shmget (2),
.BR shmop (2),
.BR shm_open (3),
.BR shm_unlink (3),
.BR sem_overview (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) 2006, 2010 Michael Kerrisk <mtk.manpages@gmail.com>
.\" Copyright (C) 2009 Petr Baudis <pasky@suse.cz>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH SIGEVENT 7 2011-09-09 "GNU" "Linux Programmer's Manual"
.SH NAME
sigevent \- structure for notification from asynchronous routines
.SH SYNOPSIS
.nf

union sigval {          /* Data passed with notification */
    int     sival_int;         /* Integer value */
    void   *sival_ptr;         /* Pointer value */
};

struct sigevent {
    int          sigev_notify; /* Notification method */
    int          sigev_signo;  /* Notification signal */
    union sigval sigev_value;  /* Data passed with
                                  notification */
    void       (*sigev_notify_function) (union sigval);
                     /* Function used for thread
                        notification (SIGEV_THREAD) */
    void        *sigev_notify_attributes;
                     /* Attributes for notification thread
                        (SIGEV_THREAD) */
    pid_t        sigev_notify_thread_id;
                     /* ID of thread to signal (SIGEV_THREAD_ID) */
};
.fi
.SH DESCRIPTION
.PP
The
.I sigevent
structure is used by various APIs
to describe the way a process is to be notified about an event
(e.g., completion of an asynchronous request, expiration of a timer,
or the arrival of a message).
.PP
The definition shown in the SYNOPSIS is approximate:
some of the fields in the
.I sigevent
structure may be defined as part of a union.
Programs should employ only those fields relevant
to the value specified in
.IR sigev_notify .
.PP
The
.I sigev_notify
field specifies how notification is to be performed.
This field can have one of the following values:
.TP 8
.BR SIGEV_NONE
A "null" notification: don't do anything when the event occurs.
.TP
.BR SIGEV_SIGNAL
Notify the process by sending the signal specified in
.IR sigev_signo .
.IP
If the signal is caught with a signal handler that was registered using the
.BR sigaction (2)
.B SA_SIGINFO
flag, then the following fields are set in the
.I siginfo_t
structure that is passed as the second argument of the handler:
.RS 8
.TP 10
.I si_code
This field is set to a value that depends on the API
delivering the notification.
.TP
.I si_signo
This field is set to the signal number (i.e., the same value as in
.IR sigev_signo ).
.TP
.I si_value
This field is set to the value specified in
.IR sigev_value .
.RE
.IP
Depending on the API, other fields may also be set in the
.I siginfo_t
structure.
.IP
The same information is also available if the signal is accepted using
.BR sigwaitinfo (2).
.TP
.BR SIGEV_THREAD
Notify the process by invoking
.I sigev_notify_function
"as if" it were the start function of a new thread.
(Among the implementation possibilities here are that
each timer notification could result in the creation of a new thread,
or that a single thread is created to receive all notifications.)
The function is invoked with
.I sigev_value
as its sole argument.
If
.I sigev_notify_attributes
is not NULL, it should point to a
.I pthread_attr_t
structure that defines attributes for the new thread (see
.BR pthread_attr_init (3)).
.TP
.BR SIGEV_THREAD_ID " (Linux-specific)"
.\" | SIGEV_SIGNAL vs not?
Currently used only by POSIX timers; see
.BR timer_create (2).
.SH CONFORMING TO
POSIX.1-2001.
.SH SEE ALSO
.BR timer_create (2),
.BR aio_fsync (3),
.BR aio_read (3),
.BR aio_write (3),
.BR getaddrinfo_a (3),
.BR lio_listio (3),
.BR mq_notify (3),
.BR aio (7),
.BR pthreads (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
'\" t
.\" Copyright (c) 1993 by Thomas Koenig (ig25@rz.uni-karlsruhe.de)
.\" and Copyright (c) 2002, 2006 by Michael Kerrisk <mtk.manpages@gmail.com>
.\" and Copyright (c) 2008 Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified Sat Jul 24 17:34:08 1993 by Rik Faith (faith@cs.unc.edu)
.\" Modified Sun Jan  7 01:41:27 1996 by Andries Brouwer (aeb@cwi.nl)
.\" Modified Sun Apr 14 12:02:29 1996 by Andries Brouwer (aeb@cwi.nl)
.\" Modified Sat Nov 13 16:28:23 1999 by Andries Brouwer (aeb@cwi.nl)
.\" Modified 10 Apr 2002, by Michael Kerrisk <mtk.manpages@gmail.com>
.\" Modified  7 Jun 2002, by Michael Kerrisk <mtk.manpages@gmail.com>
.\"	Added information on real-time signals
.\" Modified 13 Jun 2002, by Michael Kerrisk <mtk.manpages@gmail.com>
.\"	Noted that SIGSTKFLT is in fact unused
.\" 2004-12-03, Modified mtk, added notes on RLIMIT_SIGPENDING
.\" 2006-04-24, mtk, Added text on changing signal dispositions,
.\"		signal mask, and pending signals.
.\" 2008-07-04, mtk:
.\"     Added section on system call restarting (SA_RESTART)
.\"     Added section on stop/cont signals interrupting syscalls.
.\" 2008-10-05, mtk: various additions
.\"
.TH SIGNAL 7  2015-05-07 "Linux" "Linux Programmer's Manual"
.SH NAME
signal \- overview of signals
.SH DESCRIPTION
Linux supports both POSIX reliable signals (hereinafter
"standard signals") and POSIX real-time signals.
.SS Signal dispositions
Each signal has a current
.IR disposition ,
which determines how the process behaves when it is delivered
the signal.

The entries in the "Action" column of the tables below specify
the default disposition for each signal, as follows:
.IP Term
Default action is to terminate the process.
.IP Ign
Default action is to ignore the signal.
.IP Core
Default action is to terminate the process and dump core (see
.BR core (5)).
.IP Stop
Default action is to stop the process.
.IP Cont
Default action is to continue the process if it is currently stopped.
.PP
A process can change the disposition of a signal using
.BR sigaction (2)
or
.BR signal (2).
(The latter is less portable when establishing a signal handler;
see
.BR signal (2)
for details.)
Using these system calls, a process can elect one of the
following behaviors to occur on delivery of the signal:
perform the default action; ignore the signal;
or catch the signal with a
.IR "signal handler" ,
a programmer-defined function that is automatically invoked
when the signal is delivered.
(By default, the signal handler is invoked on the
normal process stack.
It is possible to arrange that the signal handler
uses an alternate stack; see
.BR sigaltstack (2)
for a discussion of how to do this and when it might be useful.)

The signal disposition is a per-process attribute:
in a multithreaded application, the disposition of a
particular signal is the same for all threads.

A child created via
.BR fork (2)
inherits a copy of its parent's signal dispositions.
During an
.BR execve (2),
the dispositions of handled signals are reset to the default;
the dispositions of ignored signals are left unchanged.
.SS Sending a signal
The following system calls and library functions allow
the caller to send a signal:
.TP 16
.BR raise (3)
Sends a signal to the calling thread.
.TP
.BR kill (2)
Sends a signal to a specified process,
to all members of a specified process group,
or to all processes on the system.
.TP
.BR killpg (2)
Sends a signal to all of the members of a specified process group.
.TP
.BR pthread_kill (3)
Sends a signal to a specified POSIX thread in the same process as
the caller.
.TP
.BR tgkill (2)
Sends a signal to a specified thread within a specific process.
(This is the system call used to implement
.BR pthread_kill (3).)
.TP
.BR sigqueue (3)
Sends a real-time signal with accompanying data to a specified process.
.SS Waiting for a signal to be caught
The following system calls suspend execution of the calling process
or thread until a signal is caught
(or an unhandled signal terminates the process):
.TP 16
.BR pause (2)
Suspends execution until any signal is caught.
.TP
.BR sigsuspend (2)
Temporarily changes the signal mask (see below) and suspends
execution until one of the unmasked signals is caught.
.SS Synchronously accepting a signal
Rather than asynchronously catching a signal via a signal handler,
it is possible to synchronously accept the signal, that is,
to block execution until the signal is delivered,
at which point the kernel returns information about the
signal to the caller.
There are two general ways to do this:
.IP * 2
.BR sigwaitinfo (2),
.BR sigtimedwait (2),
and
.BR sigwait (3)
suspend execution until one of the signals in a specified
set is delivered.
Each of these calls returns information about the delivered signal.
.IP *
.BR signalfd (2)
returns a file descriptor that can be used to read information
about signals that are delivered to the caller.
Each
.BR read (2)
from this file descriptor blocks until one of the signals
in the set specified in the
.BR signalfd (2)
call is delivered to the caller.
The buffer returned by
.BR read (2)
contains a structure describing the signal.
.SS Signal mask and pending signals
A signal may be
.IR blocked ,
which means that it will not be delivered until it is later unblocked.
Between the time when it is generated and when it is delivered
a signal is said to be
.IR pending .

Each thread in a process has an independent
.IR "signal mask" ,
which indicates the set of signals that the thread is currently blocking.
A thread can manipulate its signal mask using
.BR pthread_sigmask (3).
In a traditional single-threaded application,
.BR sigprocmask (2)
can be used to manipulate the signal mask.

A child created via
.BR fork (2)
inherits a copy of its parent's signal mask;
the signal mask is preserved across
.BR execve (2).

A signal may be generated (and thus pending)
for a process as a whole (e.g., when sent using
.BR kill (2))
or for a specific thread (e.g., certain signals,
such as
.B SIGSEGV
and
.BR SIGFPE ,
generated as a
consequence of executing a specific machine-language instruction
are thread directed, as are signals targeted at a specific thread using
.BR pthread_kill (3)).
A process-directed signal may be delivered to any one of the
threads that does not currently have the signal blocked.
If more than one of the threads has the signal unblocked, then the
kernel chooses an arbitrary thread to which to deliver the signal.

A thread can obtain the set of signals that it currently has pending
using
.BR sigpending (2).
This set will consist of the union of the set of pending
process-directed signals and the set of signals pending for
the calling thread.

A child created via
.BR fork (2)
initially has an empty pending signal set;
the pending signal set is preserved across an
.BR execve (2).
.SS Standard signals
Linux supports the standard signals listed below.
Several signal numbers
are architecture-dependent, as indicated in the "Value" column.
(Where three values are given, the first one is usually valid for
alpha and sparc,
the middle one for x86, arm, and most other architectures,
and the last one for mips.
(Values for parisc are
.I not
shown; see the Linux kernel source for signal numbering on that architecture.)
A \- denotes that a signal is absent on the corresponding architecture.)

First the signals described in the original POSIX.1-1990 standard.
.TS
l c c l
____
lB c c l.
Signal	Value	Action	Comment
SIGHUP	\01	Term	Hangup detected on controlling terminal
			or death of controlling process
SIGINT	\02	Term	Interrupt from keyboard
SIGQUIT	\03	Core	Quit from keyboard
SIGILL	\04	Core	Illegal Instruction
SIGABRT	\06	Core	Abort signal from \fBabort\fP(3)
SIGFPE	\08	Core	Floating point exception
SIGKILL	\09	Term	Kill signal
SIGSEGV	11	Core	Invalid memory reference
SIGPIPE	13	Term	Broken pipe: write to pipe with no
			readers
SIGALRM	14	Term	Timer signal from \fBalarm\fP(2)
SIGTERM	15	Term	Termination signal
SIGUSR1	30,10,16	Term	User-defined signal 1
SIGUSR2	31,12,17	Term	User-defined signal 2
SIGCHLD	20,17,18	Ign	Child stopped or terminated
SIGCONT	19,18,25	Cont	Continue if stopped
SIGSTOP	17,19,23	Stop	Stop process
SIGTSTP	18,20,24	Stop	Stop typed at terminal
SIGTTIN	21,21,26	Stop	Terminal input for background process
SIGTTOU	22,22,27	Stop	Terminal output for background process
.TE

The signals
.B SIGKILL
and
.B SIGSTOP
cannot be caught, blocked, or ignored.

Next the signals not in the POSIX.1-1990 standard but described in
SUSv2 and POSIX.1-2001.
.TS
l c c l
____
lB c c l.
Signal	Value	Action	Comment
SIGBUS	10,7,10	Core	Bus error (bad memory access)
SIGPOLL		Term	Pollable event (Sys V).
			Synonym for \fBSIGIO\fP
SIGPROF	27,27,29	Term	Profiling timer expired
SIGSYS	12,31,12	Core	Bad argument to routine (SVr4)
SIGTRAP	5	Core	Trace/breakpoint trap
SIGURG	16,23,21	Ign	Urgent condition on socket (4.2BSD)
SIGVTALRM	26,26,28	Term	Virtual alarm clock (4.2BSD)
SIGXCPU	24,24,30	Core	CPU time limit exceeded (4.2BSD)
SIGXFSZ	25,25,31	Core	File size limit exceeded (4.2BSD)
.TE

Up to and including Linux 2.2, the default behavior for
.BR SIGSYS ", " SIGXCPU ", " SIGXFSZ ", "
and (on architectures other than SPARC and MIPS)
.B SIGBUS
was to terminate the process (without a core dump).
(On some other UNIX systems the default action for
.BR SIGXCPU " and " SIGXFSZ
is to terminate the process without a core dump.)
Linux 2.4 conforms to the POSIX.1-2001 requirements for these signals,
terminating the process with a core dump.

Next various other signals.
.TS
l c c l
____
lB c c l.
Signal	Value	Action	Comment
SIGIOT	6	Core	IOT trap. A synonym for \fBSIGABRT\fP
SIGEMT	7,\-,7	Term
SIGSTKFLT	\-,16,\-	Term	Stack fault on coprocessor (unused)
SIGIO	23,29,22	Term	I/O now possible (4.2BSD)
SIGCLD	\-,\-,18	Ign	A synonym for \fBSIGCHLD\fP
SIGPWR	29,30,19	Term	Power failure (System V)
SIGINFO	29,\-,\-		A synonym for \fBSIGPWR\fP
SIGLOST	\-,\-,\-	Term	File lock lost (unused)
SIGWINCH	28,28,20	Ign	Window resize signal (4.3BSD, Sun)
SIGUNUSED	\-,31,\-	Core	Synonymous with \fBSIGSYS\fP
.TE

(Signal 29 is
.B SIGINFO
/
.B SIGPWR
on an alpha but
.B SIGLOST
on a sparc.)

.B SIGEMT
is not specified in POSIX.1-2001, but nevertheless appears
on most other UNIX systems,
where its default action is typically to terminate
the process with a core dump.

.B SIGPWR
(which is not specified in POSIX.1-2001) is typically ignored
by default on those other UNIX systems where it appears.

.B SIGIO
(which is not specified in POSIX.1-2001) is ignored by default
on several other UNIX systems.

Where defined,
.B SIGUNUSED
is synonymous with
.\" parisc is the only exception: SIGSYS is 12, SIGUNUSED is 31
.B SIGSYS
on most architectures.
.SS Real-time signals
Starting with version 2.2,
Linux supports real-time signals as originally defined in the POSIX.1b
real-time extensions (and now included in POSIX.1-2001).
The range of supported real-time signals is defined by the macros
.B SIGRTMIN
and
.BR SIGRTMAX .
POSIX.1-2001 requires that an implementation support at least
.B _POSIX_RTSIG_MAX
(8) real-time signals.
.PP
The Linux kernel supports a range of 33 different real-time
signals, numbered 32 to 64.
However, the glibc POSIX threads implementation internally uses
two (for NPTL) or three (for LinuxThreads) real-time signals
(see
.BR pthreads (7)),
and adjusts the value of
.B SIGRTMIN
suitably (to 34 or 35).
Because the range of available real-time signals varies according
to the glibc threading implementation (and this variation can occur
at run time according to the available kernel and glibc),
and indeed the range of real-time signals varies across UNIX systems,
programs should
.IR "never refer to real-time signals using hard-coded numbers" ,
but instead should always refer to real-time signals using the notation
.BR SIGRTMIN +n,
and include suitable (run-time) checks that
.BR SIGRTMIN +n
does not exceed
.BR SIGRTMAX .
.PP
Unlike standard signals, real-time signals have no predefined meanings:
the entire set of real-time signals can be used for application-defined
purposes.
.PP
The default action for an unhandled real-time signal is to terminate the
receiving process.
.PP
Real-time signals are distinguished by the following:
.IP 1. 4
Multiple instances of real-time signals can be queued.
By contrast, if multiple instances of a standard signal are delivered
while that signal is currently blocked, then only one instance is queued.
.IP 2. 4
If the signal is sent using
.BR sigqueue (3),
an accompanying value (either an integer or a pointer) can be sent
with the signal.
If the receiving process establishes a handler for this signal using the
.B SA_SIGINFO
flag to
.BR sigaction (2),
then it can obtain this data via the
.I si_value
field of the
.I siginfo_t
structure passed as the second argument to the handler.
Furthermore, the
.I si_pid
and
.I si_uid
fields of this structure can be used to obtain the PID
and real user ID of the process sending the signal.
.IP 3. 4
Real-time signals are delivered in a guaranteed order.
Multiple real-time signals of the same type are delivered in the order
they were sent.
If different real-time signals are sent to a process, they are delivered
starting with the lowest-numbered signal.
(I.e., low-numbered signals have highest priority.)
By contrast, if multiple standard signals are pending for a process,
the order in which they are delivered is unspecified.
.PP
If both standard and real-time signals are pending for a process,
POSIX leaves it unspecified which is delivered first.
Linux, like many other implementations, gives priority
to standard signals in this case.
.PP
According to POSIX, an implementation should permit at least
.B _POSIX_SIGQUEUE_MAX
(32) real-time signals to be queued to
a process.
However, Linux does things differently.
In kernels up to and including 2.6.7, Linux imposes
a system-wide limit on the number of queued real-time signals
for all processes.
This limit can be viewed and (with privilege) changed via the
.I /proc/sys/kernel/rtsig-max
file.
A related file,
.IR /proc/sys/kernel/rtsig-nr ,
can be used to find out how many real-time signals are currently queued.
In Linux 2.6.8, these
.I /proc
interfaces were replaced by the
.B RLIMIT_SIGPENDING
resource limit, which specifies a per-user limit for queued
signals; see
.BR setrlimit (2)
for further details.

The addition or real-time signals required the widening
of the signal set structure
.RI ( sigset_t )
from 32 to 64 bits.
Consequently, various system calls were superseded by new system calls
that supported the larger signal sets.
The old and new system calls are as follows:
.TS
lb lb
l l.
Linux 2.0 and earlier	Linux 2.2 and later
\fBsigaction\fP(2)	\fBrt_sigaction\fP(2)
\fBsigpending\fP(2)	\fBrt_sigpending\fP(2)
\fBsigprocmask\fP(2)	\fBrt_sigprocmask\fP(2)
\fBsigreturn\fP(2)	\fBrt_sigreturn\fP(2)
\fBsigsuspend\fP(2)	\fBrt_sigsuspend\fP(2)
\fBsigtimedwait\fP(2)	\fBrt_sigtimedwait\fP(2)
.TE
.\"
.SS Async-signal-safe functions
.PP
A signal handler function must be very careful,
since processing elsewhere may be interrupted
at some arbitrary point in the execution of the program.
POSIX has the concept of "safe function".
If a signal interrupts the execution of an unsafe function, and
.I handler
calls an unsafe function, then the behavior of the program is undefined.

POSIX.1-2004 (also known as POSIX.1-2001 Technical Corrigendum 2)
requires an implementation to guarantee that the following
functions can be safely called inside a signal handler:

.in +4
.nf
_Exit()
_exit()
abort()
accept()
access()
aio_error()
aio_return()
aio_suspend()
alarm()
bind()
cfgetispeed()
cfgetospeed()
cfsetispeed()
cfsetospeed()
chdir()
chmod()
chown()
clock_gettime()
close()
connect()
creat()
dup()
dup2()
execle()
execve()
fchmod()
fchown()
fcntl()
fdatasync()
fork()
fpathconf()
fstat()
fsync()
ftruncate()
getegid()
geteuid()
getgid()
getgroups()
getpeername()
getpgrp()
getpid()
getppid()
getsockname()
getsockopt()
getuid()
kill()
link()
listen()
lseek()
lstat()
mkdir()
mkfifo()
open()
pathconf()
pause()
pipe()
poll()
posix_trace_event()
pselect()
raise()
read()
readlink()
recv()
recvfrom()
recvmsg()
rename()
rmdir()
select()
sem_post()
send()
sendmsg()
sendto()
setgid()
setpgid()
setsid()
setsockopt()
setuid()
shutdown()
sigaction()
sigaddset()
sigdelset()
sigemptyset()
sigfillset()
sigismember()
signal()
sigpause()
sigpending()
sigprocmask()
sigqueue()
sigset()
sigsuspend()
sleep()
sockatmark()
socket()
socketpair()
stat()
symlink()
sysconf()
tcdrain()
tcflow()
tcflush()
tcgetattr()
tcgetpgrp()
tcsendbreak()
tcsetattr()
tcsetpgrp()
time()
timer_getoverrun()
timer_gettime()
timer_settime()
times()
umask()
uname()
unlink()
utime()
wait()
waitpid()
write()
.fi
.in
.PP
POSIX.1-2008 removes fpathconf(), pathconf(), and sysconf()
from the above list, and adds the following functions:
.PP
.in +4n
.nf
execl()
execv()
faccessat()
fchmodat()
fchownat()
fexecve()
fstatat()
futimens()
linkat()
mkdirat()
mkfifoat()
mknod()
mknodat()
openat()
readlinkat()
renameat()
symlinkat()
unlinkat()
utimensat()
utimes()
.fi
.in
.SS Interruption of system calls and library functions by signal handlers
If a signal handler is invoked while a system call or library
function call is blocked, then either:
.IP * 2
the call is automatically restarted after the signal handler returns; or
.IP *
the call fails with the error
.BR EINTR .
.PP
Which of these two behaviors occurs depends on the interface and
whether or not the signal handler was established using the
.BR SA_RESTART
flag (see
.BR sigaction (2)).
The details vary across UNIX systems;
below, the details for Linux.

If a blocked call to one of the following interfaces is interrupted
by a signal handler, then the call will be automatically restarted
after the signal handler returns if the
.BR SA_RESTART
flag was used; otherwise the call will fail with the error
.BR EINTR :
.\" The following system calls use ERESTARTSYS,
.\" so that they are restartable
.RS 4
.IP * 2
.BR read (2),
.BR readv (2),
.BR write (2),
.BR writev (2),
and
.BR ioctl (2)
calls on "slow" devices.
A "slow" device is one where the I/O call may block for an
indefinite time, for example, a terminal, pipe, or socket.
If an I/O call on a slow device has already transferred some
data by the time it is interrupted by a signal handler,
then the call will return a success status
(normally, the number of bytes transferred).
Note that a (local) disk is not a slow device according to this definition;
I/O operations on disk devices are not interrupted by signals.
.IP *
.BR open (2),
if it can block (e.g., when opening a FIFO; see
.BR fifo (7)).
.IP *
.BR wait (2),
.BR wait3 (2),
.BR wait4 (2),
.BR waitid (2),
and
.BR waitpid (2).
.IP *
Socket interfaces:
.\" If a timeout (setsockopt()) is in effect on the socket, then these
.\" system calls switch to using EINTR.  Consequently, they and are not
.\" automatically restarted, and they show the stop/cont behavior
.\" described below.  (Verified from 2.6.26 source, and by experiment; mtk)
.BR accept (2),
.BR connect (2),
.BR recv (2),
.BR recvfrom (2),
.BR recvmmsg (2),
.BR recvmsg (2),
.BR send (2),
.BR sendto (2),
and
.\" FIXME What about sendmmsg()?
.BR sendmsg (2),
unless a timeout has been set on the socket (see below).
.IP *
File locking interfaces:
.BR flock (2)
and
the
.BR F_SETLKW
and
.BR F_OFD_SETLKW
operations of
.BR fcntl (2)
.IP *
POSIX message queue interfaces:
.BR mq_receive (3),
.BR mq_timedreceive (3),
.BR mq_send (3),
and
.BR mq_timedsend (3).
.IP *
.BR futex (2)
.B FUTEX_WAIT
(since Linux 2.6.22;
.\" commit 72c1bbf308c75a136803d2d76d0e18258be14c7a
beforehand, always failed with
.BR EINTR ).
.IP *
.BR getrandom (2).
.IP *
.BR pthread_mutex_lock (3),
.BR pthread_cond_wait (3),
and related APIs.
.IP *
.BR futex (2)
.BR FUTEX_WAIT_BITSET .
.IP *
POSIX semaphore interfaces:
.BR sem_wait (3)
and
.BR sem_timedwait (3)
(since Linux 2.6.22;
.\" as a consequence of the 2.6.22 changes in the futex() implementation
beforehand, always failed with
.BR EINTR ).
.RE
.PP
The following interfaces are never restarted after
being interrupted by a signal handler,
regardless of the use of
.BR SA_RESTART ;
they always fail with the error
.B EINTR
when interrupted by a signal handler:
.\" These are the system calls that give EINTR or ERESTARTNOHAND
.\" on interruption by a signal handler.
.RS 4
.IP * 2
"Input" socket interfaces, when a timeout
.RB ( SO_RCVTIMEO )
has been set on the socket using
.BR setsockopt (2):
.BR accept (2),
.BR recv (2),
.BR recvfrom (2),
.BR recvmmsg (2)
(also with a non-NULL
.IR timeout
argument),
and
.BR recvmsg (2).
.IP *
"Output" socket interfaces, when a timeout
.RB ( SO_RCVTIMEO )
has been set on the socket using
.BR setsockopt (2):
.BR connect (2),
.BR send (2),
.BR sendto (2),
and
.\" FIXME What about sendmmsg()?
.BR sendmsg (2).
.IP *
Interfaces used to wait for signals:
.BR pause (2),
.BR sigsuspend (2),
.BR sigtimedwait (2),
and
.BR sigwaitinfo (2).
.IP *
File descriptor multiplexing interfaces:
.BR epoll_wait (2),
.BR epoll_pwait (2),
.BR poll (2),
.BR ppoll (2),
.BR select (2),
and
.BR pselect (2).
.IP *
System V IPC interfaces:
.\" On some other systems, SA_RESTART does restart these system calls
.BR msgrcv (2),
.BR msgsnd (2),
.BR semop (2),
and
.BR semtimedop (2).
.IP *
Sleep interfaces:
.BR clock_nanosleep (2),
.BR nanosleep (2),
and
.BR usleep (3).
.IP *
.BR read (2)
from an
.BR inotify (7)
file descriptor.
.IP *
.BR io_getevents (2).
.RE
.PP
The
.BR sleep (3)
function is also never restarted if interrupted by a handler,
but gives a success return: the number of seconds remaining to sleep.
.SS Interruption of system calls and library functions by stop signals
On Linux, even in the absence of signal handlers,
certain blocking interfaces can fail with the error
.BR EINTR
after the process is stopped by one of the stop signals
and then resumed via
.BR SIGCONT .
This behavior is not sanctioned by POSIX.1, and doesn't occur
on other systems.

The Linux interfaces that display this behavior are:
.RS 4
.IP * 2
"Input" socket interfaces, when a timeout
.RB ( SO_RCVTIMEO )
has been set on the socket using
.BR setsockopt (2):
.BR accept (2),
.BR recv (2),
.BR recvfrom (2),
.BR recvmmsg (2)
(also with a non-NULL
.IR timeout
argument),
and
.BR recvmsg (2).
.IP *
"Output" socket interfaces, when a timeout
.RB ( SO_RCVTIMEO )
has been set on the socket using
.BR setsockopt (2):
.BR connect (2),
.BR send (2),
.BR sendto (2),
and
.\" FIXME What about sendmmsg()?
.BR sendmsg (2),
if a send timeout
.RB ( SO_SNDTIMEO )
has been set.
.IP * 2
.BR epoll_wait (2),
.BR epoll_pwait (2).
.IP *
.BR semop (2),
.BR semtimedop (2).
.IP *
.BR sigtimedwait (2),
.BR sigwaitinfo (2).
.IP *
.BR read (2)
from an
.BR inotify (7)
file descriptor.
.IP *
Linux 2.6.21 and earlier:
.BR futex (2)
.BR FUTEX_WAIT ,
.BR sem_timedwait (3),
.BR sem_wait (3).
.IP *
Linux 2.6.8 and earlier:
.BR msgrcv (2),
.BR msgsnd (2).
.IP *
Linux 2.4 and earlier:
.BR nanosleep (2).
.RE
.SH CONFORMING TO
POSIX.1, except as noted.
.\" It must be a *very* long time since this was true:
.\" .SH BUGS
.\" .B SIGIO
.\" and
.\" .B SIGLOST
.\" have the same value.
.\" The latter is commented out in the kernel source, but
.\" the build process of some software still thinks that
.\" signal 29 is
.\" .BR SIGLOST .
.SH SEE ALSO
.BR kill (1),
.BR getrlimit (2),
.BR kill (2),
.BR killpg (2),
.BR restart_syscall (2),
.BR rt_sigqueueinfo (2),
.BR setitimer (2),
.BR setrlimit (2),
.BR sgetmask (2),
.BR sigaction (2),
.BR sigaltstack (2),
.BR signal (2),
.BR signalfd (2),
.BR sigpending (2),
.BR sigprocmask (2),
.BR sigsuspend (2),
.BR sigwaitinfo (2),
.BR abort (3),
.BR bsd_signal (3),
.BR longjmp (3),
.BR raise (3),
.BR pthread_sigqueue (3),
.BR sigqueue (3),
.BR sigset (3),
.BR sigsetops (3),
.BR sigvec (3),
.BR sigwait (3),
.BR strsignal (3),
.BR sysv_signal (3),
.BR core (5),
.BR proc (5),
.BR nptl (7),
.BR pthreads (7),
.BR sigevent (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
'\" t
.\" This man page is Copyright (C) 1999 Andi Kleen <ak@muc.de>.
.\" and copyright (c) 1999 Matthew Wilcox.
.\"
.\" %%%LICENSE_START(VERBATIM_ONE_PARA)
.\" Permission is granted to distribute possibly modified copies
.\" of this page provided the header is included verbatim,
.\" and in case of nontrivial modification author and date
.\" of the modification is added to the header.
.\" %%%LICENSE_END
.\"
.\" 2002-10-30, Michael Kerrisk, <mtk.manpages@gmail.com>
.\"	Added description of SO_ACCEPTCONN
.\" 2004-05-20, aeb, added SO_RCVTIMEO/SO_SNDTIMEO text.
.\" Modified, 27 May 2004, Michael Kerrisk <mtk.manpages@gmail.com>
.\"     Added notes on capability requirements
.\"	A few small grammar fixes
.\" 2010-06-13 Jan Engelhardt <jengelh@medozas.de>
.\"	Documented SO_DOMAIN and SO_PROTOCOL.
.\" FIXME
.\" The following are not yet documented:
.\"	SO_PEERNAME (2.4?)
.\"		get only
.\"		Seems to do something similar to getpeername(), but then
.\"		why is it necessary / how does it differ?
.\"	SO_TIMESTAMPNS (2.6.22)
.\"		Documentation/networking/timestamping.txt
.\"		commit 92f37fd2ee805aa77925c1e64fd56088b46094fc
.\"		Author: Eric Dumazet <dada1@cosmosbay.com>
.\"	SO_TIMESTAMPING (2.6.30)
.\"		Documentation/networking/timestamping.txt
.\"		commit cb9eff097831007afb30d64373f29d99825d0068
.\"		Author: Patrick Ohly <patrick.ohly@intel.com>
.\" 	SO_WIFI_STATUS (3.3)
.\"		commit 6e3e939f3b1bf8534b32ad09ff199d88800835a0
.\"		Author: Johannes Berg <johannes.berg@intel.com>
.\"		Also: SCM_WIFI_STATUS
.\"	SO_NOFCS (3.4)
.\"		commit 3bdc0eba0b8b47797f4a76e377dd8360f317450f
.\"		Author: Ben Greear <greearb@candelatech.com>
.\" 	SO_GET_FILTER (3.8)
.\"		commit a8fc92778080c845eaadc369a0ecf5699a03bef0
.\"		Author: Pavel Emelyanov <xemul@parallels.com>
.\"	SO_LOCK_FILTER (3.9)
.\"		commit d59577b6ffd313d0ab3be39cb1ab47e29bdc9182
.\"		Author: Vincent Bernat <bernat@luffy.cx>
.\"	SO_SELECT_ERR_QUEUE (3.10)
.\"             commit 7d4c04fc170087119727119074e72445f2bb192b
.\"		Author: Keller, Jacob E <jacob.e.keller@intel.com>
.\"     SO_MAX_PACING_RATE (3.13)
.\"             commit 62748f32d501f5d3712a7c372bbb92abc7c62bc7
.\"     SO_BPF_EXTENSIONS (3.14)
.\"             commit ea02f9411d9faa3553ed09ce0ec9f00ceae9885e
.\"
.TH SOCKET 7 2015-05-07 Linux "Linux Programmer's Manual"
.SH NAME
socket \- Linux socket interface
.SH SYNOPSIS
.B #include <sys/socket.h>
.sp
.IB sockfd " = socket(int " socket_family ", int " socket_type ", int " protocol );
.SH DESCRIPTION
This manual page describes the Linux networking socket layer user
interface.
The BSD compatible sockets
are the uniform interface
between the user process and the network protocol stacks in the kernel.
The protocol modules are grouped into
.I protocol families
such as
.BR AF_INET ", " AF_IPX ", and " AF_PACKET ,
and
.I socket types
such as
.B SOCK_STREAM
or
.BR SOCK_DGRAM .
See
.BR socket (2)
for more information on families and types.
.SS Socket-layer functions
These functions are used by the user process to send or receive packets
and to do other socket operations.
For more information see their respective manual pages.

.BR socket (2)
creates a socket,
.BR connect (2)
connects a socket to a remote socket address,
the
.BR bind (2)
function binds a socket to a local socket address,
.BR listen (2)
tells the socket that new connections shall be accepted, and
.BR accept (2)
is used to get a new socket with a new incoming connection.
.BR socketpair (2)
returns two connected anonymous sockets (implemented only for a few
local families like
.BR AF_UNIX )
.PP
.BR send (2),
.BR sendto (2),
and
.BR sendmsg (2)
send data over a socket, and
.BR recv (2),
.BR recvfrom (2),
.BR recvmsg (2)
receive data from a socket.
.BR poll (2)
and
.BR select (2)
wait for arriving data or a readiness to send data.
In addition, the standard I/O operations like
.BR write (2),
.BR writev (2),
.BR sendfile (2),
.BR read (2),
and
.BR readv (2)
can be used to read and write data.
.PP
.BR getsockname (2)
returns the local socket address and
.BR getpeername (2)
returns the remote socket address.
.BR getsockopt (2)
and
.BR setsockopt (2)
are used to set or get socket layer or protocol options.
.BR ioctl (2)
can be used to set or read some other options.
.PP
.BR close (2)
is used to close a socket.
.BR shutdown (2)
closes parts of a full-duplex socket connection.
.PP
Seeking, or calling
.BR pread (2)
or
.BR pwrite (2)
with a nonzero position is not supported on sockets.
.PP
It is possible to do nonblocking I/O on sockets by setting the
.B O_NONBLOCK
flag on a socket file descriptor using
.BR fcntl (2).
Then all operations that would block will (usually)
return with
.B EAGAIN
(operation should be retried later);
.BR connect (2)
will return
.B EINPROGRESS
error.
The user can then wait for various events via
.BR poll (2)
or
.BR select (2).
.TS
tab(:) allbox;
c s s
l l l.
I/O events
Event:Poll flag:Occurrence
Read:POLLIN:T{
New data arrived.
T}
Read:POLLIN:T{
A connection setup has been completed
(for connection-oriented sockets)
T}
Read:POLLHUP:T{
A disconnection request has been initiated by the other end.
T}
Read:POLLHUP:T{
A connection is broken (only for connection-oriented protocols).
When the socket is written
.B SIGPIPE
is also sent.
T}
Write:POLLOUT:T{
Socket has enough send buffer space for writing new data.
T}
Read/Write:T{
POLLIN|
.br
POLLOUT
T}:T{
An outgoing
.BR connect (2)
finished.
T}
Read/Write:POLLERR:An asynchronous error occurred.
Read/Write:POLLHUP:The other end has shut down one direction.
Exception:POLLPRI:T{
Urgent data arrived.
.B SIGURG
is sent then.
T}
.\" FIXME . The following is not true currently:
.\" It is no I/O event when the connection
.\" is broken from the local end using
.\" .BR shutdown (2)
.\" or
.\" .BR close (2).
.TE
.PP
An alternative to
.BR poll (2)
and
.BR select (2)
is to let the kernel inform the application about events
via a
.B SIGIO
signal.
For that the
.B O_ASYNC
flag must be set on a socket file descriptor via
.BR fcntl (2)
and a valid signal handler for
.B SIGIO
must be installed via
.BR sigaction (2).
See the
.I Signals
discussion below.
.SS Socket address structures
Each socket domain has its own format for socket addresses,
with a domain-specific address structure.
Each of these structures begins with an
integer "family" field (typed as
.IR sa_family_t )
that indicates the type of the address structure.
This allows
the various system calls (e.g.,
.BR connect (2),
.BR bind (2),
.BR accept (2),
.BR getsockname (2),
.BR getpeername (2)),
which are generic to all socket domains,
to determine the domain of a particular socket address.

To allow any type of socket address to be passed to
interfaces in the sockets API,
the type
.IR "struct sockaddr"
is defined.
The purpose of this type is purely to allow casting of
domain-specific socket address types to a "generic" type,
so as to avoid compiler warnings about type mismatches in
calls to the sockets API.

In addition, the sockets API provides the data type
.IR "struct sockaddr_storage".
This type
is suitable to accommodate all supported domain-specific socket
address structures; it is large enough and is aligned properly.
(In particular, it is large enough to hold
IPv6 socket addresses.)
The structure includes the following field, which can be used to identify
the type of socket address actually stored in the structure:

.in +4n
.nf
    sa_family_t ss_family;
.fi
.in

The
.I sockaddr_storage
structure is useful in programs that must handle socket addresses
in a generic way
(e.g., programs that must deal with both IPv4 and IPv6 socket addresses).
.SS Socket options
The socket options listed below can be set by using
.BR setsockopt (2)
and read with
.BR getsockopt (2)
with the socket level set to
.B SOL_SOCKET
for all sockets.
Unless otherwise noted,
.I optval
is a pointer to an
.IR int .
.\" FIXME .
.\" In the list below, the text used to describe argument types
.\" for each socket option should be more consistent
.\"
.\" SO_ACCEPTCONN is in POSIX.1-2001, and its origin is explained in
.\" W R Stevens, UNPv1
.TP
.B SO_ACCEPTCONN
Returns a value indicating whether or not this socket has been marked
to accept connections with
.BR listen (2).
The value 0 indicates that this is not a listening socket,
the value 1 indicates that this is a listening socket.
This socket option is read-only.
.TP
.B SO_BINDTODEVICE
Bind this socket to a particular device like \(lqeth0\(rq,
as specified in the passed interface name.
If the
name is an empty string or the option length is zero, the socket device
binding is removed.
The passed option is a variable-length null-terminated
interface name string with the maximum size of
.BR IFNAMSIZ .
If a socket is bound to an interface,
only packets received from that particular interface are processed by the
socket.
Note that this works only for some socket types, particularly
.B AF_INET
sockets.
It is not supported for packet sockets (use normal
.BR bind (2)
there).

Before Linux 3.8,
this socket option could be set, but could not retrieved with
.BR getsockopt (2).
Since Linux 3.8, it is readable.
The
.I optlen
argument should contain the buffer size available
to receive the device name and is recommended to be
.BR IFNAMSZ
bytes.
The real device name length is reported back in the
.I optlen
argument.
.TP
.B SO_BROADCAST
Set or get the broadcast flag.
When enabled, datagram sockets are allowed to send
packets to a broadcast address.
This option has no effect on stream-oriented sockets.
.TP
.B SO_BSDCOMPAT
Enable BSD bug-to-bug compatibility.
This is used by the UDP protocol module in Linux 2.0 and 2.2.
If enabled, ICMP errors received for a UDP socket will not be passed
to the user program.
In later kernel versions, support for this option has been phased out:
Linux 2.4 silently ignores it, and Linux 2.6 generates a kernel warning
(printk()) if a program uses this option.
Linux 2.0 also enabled BSD bug-to-bug compatibility
options (random header changing, skipping of the broadcast flag) for raw
sockets with this option, but that was removed in Linux 2.2.
.TP
.B SO_DEBUG
Enable socket debugging.
Only allowed for processes with the
.B CAP_NET_ADMIN
capability or an effective user ID of 0.
.TP
.BR SO_DOMAIN " (since Linux 2.6.32)"
Retrieves the socket domain as an integer, returning a value such as
.BR AF_INET6 .
See
.BR socket (2)
for details.
This socket option is read-only.
.TP
.B SO_ERROR
Get and clear the pending socket error.
This socket option is read-only.
Expects an integer.
.TP
.B SO_DONTROUTE
Don't send via a gateway, send only to directly connected hosts.
The same effect can be achieved by setting the
.B MSG_DONTROUTE
flag on a socket
.BR send (2)
operation.
Expects an integer boolean flag.
.TP
.B SO_KEEPALIVE
Enable sending of keep-alive messages on connection-oriented sockets.
Expects an integer boolean flag.
.TP
.B SO_LINGER
Sets or gets the
.B SO_LINGER
option.
The argument is a
.I linger
structure.
.sp
.in +4n
.nf
struct linger {
    int l_onoff;    /* linger active */
    int l_linger;   /* how many seconds to linger for */
};
.fi
.in
.IP
When enabled, a
.BR close (2)
or
.BR shutdown (2)
will not return until all queued messages for the socket have been
successfully sent or the linger timeout has been reached.
Otherwise,
the call returns immediately and the closing is done in the background.
When the socket is closed as part of
.BR exit (2),
it always lingers in the background.
.TP
.BR SO_MARK " (since Linux 2.6.25)"
.\" commit 4a19ec5800fc3bb64e2d87c4d9fdd9e636086fe0
.\" and    914a9ab386a288d0f22252fc268ecbc048cdcbd5
Set the mark for each packet sent through this socket
(similar to the netfilter MARK target but socket-based).
Changing the mark can be used for mark-based
routing without netfilter or for packet filtering.
Setting this option requires the
.B CAP_NET_ADMIN
capability.
.TP
.B SO_OOBINLINE
If this option is enabled,
out-of-band data is directly placed into the receive data stream.
Otherwise, out-of-band data is passed only when the
.B MSG_OOB
flag is set during receiving.
.\" don't document it because it can do too much harm.
.\".B SO_NO_CHECK
.\"     The kernel has support for the SO_NO_CHECK socket
.\"     option (boolean: 0 == default, calculate checksum on xmit,
.\"     1 == do not calculate checksum on xmit).
.\" Additional note from Andi Kleen on SO_NO_CHECK (2010-08-30)
.\"     On Linux UDP checksums are essentially free and there's no reason
.\"     to turn them off and it would disable another safety line.
.\"     That is why I didn't document the option.
.TP
.B SO_PASSCRED
Enable or disable the receiving of the
.B SCM_CREDENTIALS
control message.
For more information see
.BR unix (7).
.\" FIXME Document SO_PASSSEC, added in 2.6.18; there is some info
.\" in the 2.6.18 ChangeLog
.TP
.BR SO_PEEK_OFF " (since Linux 3.4)"
.\" commit ef64a54f6e558155b4f149bb10666b9e914b6c54
This option, which is currently supported only for
.BR unix (7)
sockets, sets the value of the "peek offset" for the
.BR recv (2)
system call when used with
.BR MSG_PEEK
flag.

When this option is set to a negative value
(it is set to \-1 for all new sockets),
traditional behavior is provided:
.BR recv (2)
with the
.BR MSG_PEEK
flag will peek data from the front of the queue.

When the option is set to a value greater than or equal to zero,
then the next peek at data queued in the socket will occur at
the byte offset specified by the option value.
At the same time, the "peek offset" will be
incremented by the number of bytes that were peeked from the queue,
so that a subsequent peek will return the next data in the queue.

If data is removed from the front of the queue via a call to
.BR recv (2)
(or similar) without the
.BR MSG_PEEK
flag, the "peek offset" will be decreased by the number of bytes removed.
In other words, receiving data without the
.B MSG_PEEK
flag will cause the "peek offset" to be adjusted to maintain
the correct relative position in the queued data,
so that a subsequent peek will retrieve the data that would have been
retrieved had the data not been removed.

For datagram sockets, if the "peek offset" points to the middle of a packet,
the data returned will be marked with the
.BR MSG_TRUNC
flag.

The following example serves to illustrate the use of
.BR SO_PEEK_OFF .
Suppose a stream socket has the following queued input data:

    aabbccddeeff

.IP
The following sequence of
.BR recv (2)
calls would have the effect noted in the comments:

.in +4n
.nf
int ov = 4;                  // Set peek offset to 4
setsockopt(fd, SOL_SOCKET, SO_PEEK_OFF, &ov, sizeof(ov));

recv(fd, buf, 2, MSG_PEEK);  // Peeks "cc"; offset set to 6
recv(fd, buf, 2, MSG_PEEK);  // Peeks "dd"; offset set to 8
recv(fd, buf, 2, 0);         // Reads "aa"; offset set to 6
recv(fd, buf, 2, MSG_PEEK);  // Peeks "ee"; offset set to 8
.fi
.in
.TP
.B SO_PEERCRED
Return the credentials of the foreign process connected to this socket.
This is possible only for connected
.B AF_UNIX
stream sockets and
.B AF_UNIX
stream and datagram socket pairs created using
.BR socketpair (2);
see
.BR unix (7).
The returned credentials are those that were in effect at the time
of the call to
.BR connect (2)
or
.BR socketpair (2).
The argument is a
.I ucred
structure; define the
.B _GNU_SOURCE
feature test macro to obtain the definition of that structure from
.IR <sys/socket.h> .
This socket option is read-only.
.TP
.B SO_PRIORITY
Set the protocol-defined priority for all packets to be sent on
this socket.
Linux uses this value to order the networking queues:
packets with a higher priority may be processed first depending
on the selected device queueing discipline.
.\" For
.\" .BR ip (7),
.\" this also sets the IP type-of-service (TOS) field for outgoing packets.
Setting a priority outside the range 0 to 6 requires the
.B CAP_NET_ADMIN
capability.
.TP
.BR SO_PROTOCOL " (since Linux 2.6.32)"
Retrieves the socket protocol as an integer, returning a value such as
.BR IPPROTO_SCTP .
See
.BR socket (2)
for details.
This socket option is read-only.
.TP
.B SO_RCVBUF
Sets or gets the maximum socket receive buffer in bytes.
The kernel doubles this value (to allow space for bookkeeping overhead)
when it is set using
.\" Most (all?) other implementations do not do this -- MTK, Dec 05
.BR setsockopt (2),
and this doubled value is returned by
.BR getsockopt (2).
.\" The following thread on LMKL is quite informative:
.\" getsockopt/setsockopt with SO_RCVBUF and SO_SNDBUF "non-standard" behavior
.\" 17 July 2012
.\" http://thread.gmane.org/gmane.linux.kernel/1328935
The default value is set by the
.I /proc/sys/net/core/rmem_default
file, and the maximum allowed value is set by the
.I /proc/sys/net/core/rmem_max
file.
The minimum (doubled) value for this option is 256.
.TP
.BR SO_RCVBUFFORCE " (since Linux 2.6.14)"
Using this socket option, a privileged
.RB ( CAP_NET_ADMIN )
process can perform the same task as
.BR SO_RCVBUF ,
but the
.I rmem_max
limit can be overridden.
.TP
.BR SO_RCVLOWAT " and " SO_SNDLOWAT
Specify the minimum number of bytes in the buffer until the socket layer
will pass the data to the protocol
.RB ( SO_SNDLOWAT )
or the user on receiving
.RB ( SO_RCVLOWAT ).
These two values are initialized to 1.
.B SO_SNDLOWAT
is not changeable on Linux
.RB ( setsockopt (2)
fails with the error
.BR ENOPROTOOPT ).
.B SO_RCVLOWAT
is changeable
only since Linux 2.4.
The
.BR select (2)
and
.BR poll (2)
system calls currently do not respect the
.B SO_RCVLOWAT
setting on Linux,
and mark a socket readable when even a single byte of data is available.
A subsequent read from the socket will block until
.B SO_RCVLOWAT
bytes are available.
.\" See http://marc.theaimsgroup.com/?l=linux-kernel&m=111049368106984&w=2
.\" Tested on kernel 2.6.14 -- mtk, 30 Nov 05
.TP
.BR SO_RCVTIMEO " and " SO_SNDTIMEO
.\" Not implemented in 2.0.
.\" Implemented in 2.1.11 for getsockopt: always return a zero struct.
.\" Implemented in 2.3.41 for setsockopt, and actually used.
Specify the receiving or sending timeouts until reporting an error.
The argument is a
.IR "struct timeval" .
If an input or output function blocks for this period of time, and
data has been sent or received, the return value of that function
will be the amount of data transferred; if no data has been transferred
and the timeout has been reached, then \-1 is returned with
.I errno
set to
.BR EAGAIN
or
.BR EWOULDBLOCK ,
.\" in fact to EAGAIN
or
.B EINPROGRESS
(for
.BR connect (2))
just as if the socket was specified to be nonblocking.
If the timeout is set to zero (the default),
then the operation will never timeout.
Timeouts only have effect for system calls that perform socket I/O (e.g.,
.BR read (2),
.BR recvmsg (2),
.BR send (2),
.BR sendmsg (2));
timeouts have no effect for
.BR select (2),
.BR poll (2),
.BR epoll_wait (2),
and so on.
.TP
.B SO_REUSEADDR
.\"	commit c617f398edd4db2b8567a28e899a88f8f574798d
.\"	https://lwn.net/Articles/542629/
Indicates that the rules used in validating addresses supplied in a
.BR bind (2)
call should allow reuse of local addresses.
For
.B AF_INET
sockets this
means that a socket may bind, except when there
is an active listening socket bound to the address.
When the listening socket is bound to
.B INADDR_ANY
with a specific port then it is not possible
to bind to this port for any local address.
Argument is an integer boolean flag.
.TP
.BR SO_REUSEPORT " (since Linux 3.9)"
Permits multiple
.B AF_INET
or
.B AF_INET6
sockets to be bound to an identical socket address.
This option must be set on each socket (including the first socket)
prior to calling
.BR bind (2)
on the socket.
To prevent port hijacking,
all of the processes binding to the same address must have the same
effective UID.
This option can be employed with both TCP and UDP sockets.

For TCP sockets, this option allows
.BR accept (2)
load distribution in a multi-threaded server to be improved by
using a distinct listener socket for each thread.
This provides improved load distribution as compared
to traditional techniques such using a single
.BR accept (2)ing
thread that distributes connections,
or having multiple threads that compete to
.BR accept (2)
from the same socket.

For UDP sockets,
the use of this option can provide better distribution
of incoming datagrams to multiple processes (or threads) as compared
to the traditional technique of having multiple processes
compete to receive datagrams on the same socket.
.TP
.BR SO_RXQ_OVFL " (since Linux 2.6.33)"
.\" commit 3b885787ea4112eaa80945999ea0901bf742707f
Indicates that an unsigned 32-bit value ancillary message (cmsg)
should be attached to received skbs indicating
the number of packets dropped by the socket between
the last received packet and this received packet.
.TP
.B SO_SNDBUF
Sets or gets the maximum socket send buffer in bytes.
The kernel doubles this value (to allow space for bookkeeping overhead)
when it is set using
.\" Most (all?) other implementations do not do this -- MTK, Dec 05
.\" See also the comment to SO_RCVBUF (17 Jul 2012 LKML mail)
.BR setsockopt (2),
and this doubled value is returned by
.BR getsockopt (2).
The default value is set by the
.I /proc/sys/net/core/wmem_default
file and the maximum allowed value is set by the
.I /proc/sys/net/core/wmem_max
file.
The minimum (doubled) value for this option is 2048.
.TP
.BR SO_SNDBUFFORCE " (since Linux 2.6.14)"
Using this socket option, a privileged
.RB ( CAP_NET_ADMIN )
process can perform the same task as
.BR SO_SNDBUF ,
but the
.I wmem_max
limit can be overridden.
.TP
.B SO_TIMESTAMP
Enable or disable the receiving of the
.B SO_TIMESTAMP
control message.
The timestamp control message is sent with level
.B SOL_SOCKET
and the
.I cmsg_data
field is a
.I "struct timeval"
indicating the
reception time of the last packet passed to the user in this call.
See
.BR cmsg (3)
for details on control messages.
.TP
.B SO_TYPE
Gets the socket type as an integer (e.g.,
.BR SOCK_STREAM ).
This socket option is read-only.
.TP
.BR SO_BUSY_POLL " (since Linux 3.11)"
Sets the approximate time in microseconds to busy poll on a blocking receive
when there is no data.
Increasing this value requires
.BR CAP_NET_ADMIN .
The default for this option is controlled by the
.I /proc/sys/net/core/busy_read
file.

The value in the
.I /proc/sys/net/core/busy_poll
file determines how long
.BR select (2)
and
.BR poll (2)
will busy poll when they operate on sockets with
.BR SO_BUSY_POLL
set and no events to report are found.

In both cases,
busy polling will only be done when the socket last received data
from a network device that supports this option.

While busy polling may improve latency of some applications,
care must be taken when using it since this will increase
both CPU utilization and power usage.
.SS Signals
When writing onto a connection-oriented socket that has been shut down
(by the local or the remote end)
.B SIGPIPE
is sent to the writing process and
.B EPIPE
is returned.
The signal is not sent when the write call
specified the
.B MSG_NOSIGNAL
flag.
.PP
When requested with the
.B FIOSETOWN
.BR fcntl (2)
or
.B SIOCSPGRP
.BR ioctl (2),
.B SIGIO
is sent when an I/O event occurs.
It is possible to use
.BR poll (2)
or
.BR select (2)
in the signal handler to find out which socket the event occurred on.
An alternative (in Linux 2.2) is to set a real-time signal using the
.B F_SETSIG
.BR fcntl (2);
the handler of the real time signal will be called with
the file descriptor in the
.I si_fd
field of its
.IR siginfo_t .
See
.BR fcntl (2)
for more information.
.PP
Under some circumstances (e.g., multiple processes accessing a
single socket), the condition that caused the
.B SIGIO
may have already disappeared when the process reacts to the signal.
If this happens, the process should wait again because Linux
will resend the signal later.
.\" .SS Ancillary messages
.SS /proc interfaces
The core socket networking parameters can be accessed
via files in the directory
.IR /proc/sys/net/core/ .
.TP
.I rmem_default
contains the default setting in bytes of the socket receive buffer.
.TP
.I rmem_max
contains the maximum socket receive buffer size in bytes which a user may
set by using the
.B SO_RCVBUF
socket option.
.TP
.I wmem_default
contains the default setting in bytes of the socket send buffer.
.TP
.I wmem_max
contains the maximum socket send buffer size in bytes which a user may
set by using the
.B SO_SNDBUF
socket option.
.TP
.IR message_cost " and " message_burst
configure the token bucket filter used to load limit warning messages
caused by external network events.
.TP
.I netdev_max_backlog
Maximum number of packets in the global input queue.
.TP
.I optmem_max
Maximum length of ancillary data and user control data like the iovecs
per socket.
.\" netdev_fastroute is not documented because it is experimental
.SS Ioctls
These operations can be accessed using
.BR ioctl (2):

.in +4n
.nf
.IB error " = ioctl(" ip_socket ", " ioctl_type ", " &value_result ");"
.fi
.in
.TP
.B SIOCGSTAMP
Return a
.I struct timeval
with the receive timestamp of the last packet passed to the user.
This is useful for accurate round trip time measurements.
See
.BR setitimer (2)
for a description of
.IR "struct timeval" .
.\"
This ioctl should be used only if the socket option
.B SO_TIMESTAMP
is not set on the socket.
Otherwise, it returns the timestamp of the
last packet that was received while
.B SO_TIMESTAMP
was not set, or it fails if no such packet has been received,
(i.e.,
.BR ioctl (2)
returns \-1 with
.I errno
set to
.BR ENOENT ).
.TP
.B SIOCSPGRP
Set the process or process group to send
.B SIGIO
or
.B SIGURG
signals
to when an
asynchronous I/O operation has finished or urgent data is available.
The argument is a pointer to a
.IR pid_t .
If the argument is positive, send the signals to that process.
If the
argument is negative, send the signals to the process group with the ID
of the absolute value of the argument.
The process may only choose itself or its own process group to receive
signals unless it has the
.B CAP_KILL
capability or an effective UID of 0.
.TP
.B FIOASYNC
Change the
.B O_ASYNC
flag to enable or disable asynchronous I/O mode of the socket.
Asynchronous I/O mode means that the
.B SIGIO
signal or the signal set with
.B F_SETSIG
is raised when a new I/O event occurs.
.IP
Argument is an integer boolean flag.
(This operation is synonymous with the use of
.BR fcntl (2)
to set the
.B O_ASYNC
flag.)
.\"
.TP
.B SIOCGPGRP
Get the current process or process group that receives
.B SIGIO
or
.B SIGURG
signals,
or 0
when none is set.
.PP
Valid
.BR fcntl (2)
operations:
.TP
.B FIOGETOWN
The same as the
.B SIOCGPGRP
.BR ioctl (2).
.TP
.B FIOSETOWN
The same as the
.B SIOCSPGRP
.BR ioctl (2).
.SH VERSIONS
.B SO_BINDTODEVICE
was introduced in Linux 2.0.30.
.B SO_PASSCRED
is new in Linux 2.2.
The
.I /proc
interfaces were introduced in Linux 2.2.
.B SO_RCVTIMEO
and
.B SO_SNDTIMEO
are supported since Linux 2.3.41.
Earlier, timeouts were fixed to
a protocol-specific setting, and could not be read or written.
.SH NOTES
Linux assumes that half of the send/receive buffer is used for internal
kernel structures; thus the values in the corresponding
.I /proc
files are twice what can be observed on the wire.

Linux will allow port reuse only with the
.B SO_REUSEADDR
option
when this option was set both in the previous program that performed a
.BR bind (2)
to the port and in the program that wants to reuse the port.
This differs from some implementations (e.g., FreeBSD)
where only the later program needs to set the
.B SO_REUSEADDR
option.
Typically this difference is invisible, since, for example, a server
program is designed to always set this option.
.SH BUGS
The
.B CONFIG_FILTER
socket options
.B SO_ATTACH_FILTER
and
.B SO_DETACH_FILTER
.\" FIXME Document SO_ATTACH_FILTER and SO_DETACH_FILTER
are not documented.
The suggested interface to use them is via the libpcap
library.
.\" .SH AUTHORS
.\" This man page was written by Andi Kleen.
.SH SEE ALSO
.BR connect (2),
.BR getsockopt (2),
.BR setsockopt (2),
.BR socket (2),
.BR capabilities (7),
.BR ddp (7),
.BR ip (7),
.BR packet (7),
.BR tcp (7),
.BR udp (7),
.BR unix (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) International Business Machines Corp., 2006
.\"
.\" %%%LICENSE_START(GPLv2+_SW_3_PARA)
.\" This program is free software; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" This program is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See
.\" the GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.\" HISTORY:
.\" 2005-09-28, created by Arnd Bergmann <arndb@de.ibm.com>,
.\"   Mark Nutter <mnutter@us.ibm.com> and
.\"   Ulrich Weigand <Ulrich.Weigand@de.ibm.com>
.\" 2006-06-16, revised by Eduardo M. Fleury <efleury@br.ibm.com>
.\" 2007-07-10, quite a lot of polishing by mtk
.\" 2007-09-28, updates for newer kernels by Jeremy Kerr <jk@ozlabs.org>
.\"
.TH SPUFS 7 2007-12-20 Linux "Linux Programmer's Manual"
.SH NAME
spufs \- SPU filesystem
.SH DESCRIPTION
The SPU filesystem is used on PowerPC machines that implement the
Cell Broadband Engine Architecture in order to access Synergistic
Processor Units (SPUs).

The filesystem provides a name space similar to POSIX shared
memory or message queues.
Users that have write permissions
on the filesystem can use
.BR spu_create (2)
to establish SPU contexts under the
.B spufs
root directory.

Every SPU context is represented by a directory containing
a predefined set of files.
These files can be
used for manipulating the state of the logical SPU.
Users can change permissions on the files, but can't
add or remove files.
.SS Mount options
.TP
.B uid=<uid>
Set the user owning the mount point; the default is 0 (root).
.TP
.B gid=<gid>
Set the group owning the mount point; the default is 0 (root).
.TP
.B mode=<mode>
Set the mode of the top-level directory in
.BR spufs ,
as an octal mode string.
The default is 0775.
.SS Files
The files in
.B spufs
mostly follow the standard behavior for regular system calls like
.BR read (2)
or
.BR write (2),
but often support only a subset of the operations
supported on regular filesystems.
This list details the supported
operations and the deviations from the standard behavior described
in the respective man pages.

All files that support the
.BR read (2)
operation also support
.BR readv (2)
and all files that support the
.BR write (2)
operation also support
.BR writev (2).
All files support the
.BR access (2)
and
.BR stat (2)
family of operations, but for the latter call,
the only fields of the returned
.I stat
structure that contain reliable information are
.IR st_mode ,
.IR st_nlink ,
.IR st_uid ,
and
.IR st_gid .

All files support the
.BR chmod (2)/ fchmod (2)
and
.BR chown (2)/ fchown (2)
operations, but will not be able to grant permissions that contradict
the possible operations (e.g., read access on the
.I wbox
file).

The current set of files is:
.TP
.I /capabilities
Contains a comma-delimited string representing the capabilities of this
SPU context.
Possible capabilities are:
.RS
.TP
.B sched
This context may be scheduled.
.TP
.B step
This context can be run in single-step mode, for debugging.
.PP
New capabilities flags may be added in the future.
.RE
.TP
.I /mem
the contents of the local storage memory of the SPU.
This can be accessed like a regular shared memory
file and contains both code and data in the address
space of the SPU.
The possible operations on an open
.I mem
file are:
.RS
.TP
.BR read "(2), " pread "(2), " write "(2), " pwrite "(2), " lseek (2)
These operate as usual, with the exception that
.BR lseek (2),
.BR write (2),
and
.BR pwrite (2)
are not supported beyond the end of the file.
The file size
is the size of the local storage of the SPU,
which is normally 256 kilobytes.
.TP
.BR mmap (2)
Mapping
.I mem
into the process address space provides access to the SPU local
storage within the process address space.
Only
.B MAP_SHARED
mappings are allowed.
.RE
.TP
.I /regs
Contains the saved general-purpose registers of the SPU context.
This file contains the 128-bit values of each register,
from register 0 to register 127, in order.
This allows the general-purpose registers to be
inspected for debugging.

Reading to or writing from this file requires that the context is
scheduled out, so use of this file is not recommended in normal
program operation.

The
.I regs
file is not present on contexts that have been created with the
.B SPU_CREATE_NOSCHED
flag.
.TP
.I /mbox
The first SPU-to-CPU communication mailbox.
This file is read-only and can be read in units of 4 bytes.
The file can be used only in nonblocking mode \- even
.BR poll (2)
cannot be used to block on this file.
The only possible operation on an open
.I mbox
file is:
.RS
.TP
.BR read (2)
If
.I count
is smaller than four,
.BR read (2)
returns \-1 and sets
.I errno
to
.BR EINVAL .
If there is no data available in the mailbox (i.e., the SPU has not
sent a mailbox message), the return value is set to \-1 and
.I errno
is set to
.BR EAGAIN .
When data
has been read successfully, four bytes are placed in
the data buffer and the value four is returned.
.RE
.TP
.I /ibox
The second SPU-to-CPU communication mailbox.
This file is similar to the first mailbox file, but can be read
in blocking I/O mode, thus calling
.BR read (2)
on an open
.I ibox
file will block until the SPU has written data to its interrupt mailbox
channel (unless the file has been opened with
.BR O_NONBLOCK ,
see below).
Also,
.BR poll (2)
and similar system calls can be used to monitor for the presence
of mailbox data.

The possible operations on an open
.I ibox
file are:
.RS
.TP
.BR read (2)
If
.I count
is smaller than four,
.BR read (2)
returns \-1 and sets
.I errno
to
.BR EINVAL .
If there is no data available in the mailbox and the file
descriptor has been opened with
.BR O_NONBLOCK ,
the return value is set to \-1 and
.I errno
is set to
.BR EAGAIN .

If there is no data available in the mailbox and the file
descriptor has been opened without
.BR O_NONBLOCK ,
the call will
block until the SPU writes to its interrupt mailbox channel.
When data has been read successfully, four bytes are placed in
the data buffer and the value four is returned.
.TP
.BR poll (2)
Poll on the
.I ibox
file returns
.I "(POLLIN | POLLRDNORM)"
whenever data is available for reading.
.RE
.TP
.I /wbox
The CPU-to-SPU communication mailbox.
It is write-only and can be written in units of four bytes.
If the mailbox is full,
.BR write (2)
will block, and
.BR poll (2)
can be used to block until the mailbox is available for writing again.
The possible operations on an open
.I wbox
file are:
.RS
.TP
.BR write (2)
If
.I count
is smaller than four,
.BR write (2)
returns \-1 and sets
.I errno
to
.BR EINVAL .
If there is no space available in the mailbox and the file
descriptor has been opened with
.BR O_NONBLOCK ,
the return
value is set to \-1 and
.I errno
is set to
.BR EAGAIN .

If there is no space available in the mailbox and the file
descriptor has been opened without
.BR O_NONBLOCK ,
the call will block until the SPU reads from its
PPE (PowerPC Processing Element)
mailbox channel.
When data has been written successfully,
the system call returns four as its function result.
.TP
.BR poll (2)
A poll on the
.I wbox
file returns
.I "(POLLOUT | POLLWRNORM)"
whenever space is available for writing.
.RE
.TP
.IR /mbox_stat ", " /ibox_stat ", " /wbox_stat
These are read-only files that contain the length of the current
queue of each mailbox\(emthat is, how many words can be read from
.IR mbox " or " ibox
or how many words can be written to
.I wbox
without blocking.
The files can be read only in four-byte units and return
a big-endian binary integer number.
The only possible operation on an open
.I *box_stat
file is:
.RS
.TP
.BR read (2)
If
.I count
is smaller than four,
.BR read (2)
returns \-1 and sets
.I errno
to
.BR EINVAL .
Otherwise, a four-byte value is placed in the data buffer.
This value is the number of elements that can be read from (for
.IR mbox_stat
and
.IR ibox_stat )
or written to (for
.IR wbox_stat )
the respective mailbox without blocking or returning an
.BR EAGAIN
error.
.RE
.TP
.IR /npc ", " /decr ", " /decr_status ", " /spu_tag_mask ", " \
/event_mask ", " /event_status ", " /srr0 ", " /lslr
Internal registers of the SPU.
These files contain an ASCII string
representing the hex value of the specified register.
Reads and writes on these
files (except for
.IR npc ,
see below) require that the SPU context be scheduled out,
so frequent access to
these files is not recommended for normal program operation.
.IP
The contents of these files are:
.RS
.TP 16
.I npc
Next Program Counter \- valid only when the SPU is in a stopped state.
.TP
.I decr
SPU Decrementer
.TP
.I decr_status
Decrementer Status
.TP
.I spu_tag_mask
MFC tag mask for SPU DMA
.TP
.I event_mask
Event mask for SPU interrupts
.TP
.I event_status
Number of SPU events pending (read-only)
.TP
.I srr0
Interrupt Return address register
.TP
.I lslr
Local Store Limit Register
.RE
.IP
The possible operations on these files are:
.RS
.TP
.BR read (2)
Reads the current register value.
If the register value is larger than the buffer passed to the
.BR read (2)
system call, subsequent reads will continue reading from the same
buffer, until the end of the buffer is reached.

When a complete string has been read, all subsequent read operations
will return zero bytes and a new file descriptor needs to be opened
to read a new value.
.TP
.BR write (2)
A
.BR write (2)
operation on the file sets the register to the
value given in the string.
The string is parsed from the beginning
until the first nonnumeric character or the end of the buffer.
Subsequent writes to the same file descriptor overwrite the
previous setting.

Except for the
.I npc
file, these files are not present on contexts that have been created with
the
.B SPU_CREATE_NOSCHED
flag.
.RE
.TP
.IR /fpcr
This file provides access to the Floating Point Status and
Control Register (fcpr) as a binary, four-byte file.
The operations on the
.I fpcr
file are:
.RS
.TP
.BR read (2)
If
.I count
is smaller than four,
.BR read (2)
returns \-1 and sets
.I errno
to
.BR EINVAL .
Otherwise, a four-byte value is placed in the data buffer;
this is the current value of the
.I fpcr
register.
.TP
.BR write (2)
If
.I count
is smaller than four,
.BR write (2)
returns \-1 and sets
.I errno
to
.BR EINVAL .
Otherwise, a four-byte value is copied from the data buffer,
updating the value of the
.I fpcr
register.
.RE
.TP
.IR /signal1 ", " /signal2
The files provide access to the two signal notification channels
of an SPU.
These are read-write files that operate on four-byte words.
Writing to one of these files triggers an interrupt on the SPU.
The value written to the signal files can
be read from the SPU through a channel read or from
host user space through the file.
After the value has been read by the SPU, it is reset to zero.
The possible operations on an open
.I signal1
or
.I signal2
file are:
.RS
.TP
.BR read (2)
If
.I count
is smaller than four,
.BR read (2)
returns \-1 and sets
.I errno
to
.BR EINVAL .
Otherwise, a four-byte value is placed in the data buffer;
this is the current value of the specified signal notification
register.
.TP
.BR write (2)
If
.I count
is smaller than four,
.BR write (2)
returns \-1 and sets
.I errno
to
.BR EINVAL .
Otherwise, a four-byte value is copied from the data buffer,
updating the value of the specified signal notification
register.
The signal notification register will either be replaced with
the input data or will be updated to the bitwise OR operation
of the old value and the input data, depending on the contents
of the
.IR signal1_type
or
.IR signal2_type
files respectively.
.RE
.TP
.IR /signal1_type ", " /signal2_type
These two files change the behavior of the
.IR signal1
and
.IR signal2
notification files.
They contain a numeric ASCII string which is read
as either "1" or "0".
In mode 0 (overwrite), the hardware replaces the contents
of the signal channel with the data that is written to it.
In mode 1 (logical OR), the hardware accumulates the bits
that are subsequently written to it.
The possible operations on an open
.I signal1_type
or
.I signal2_type
file are:
.RS
.TP
.BR read (2)
When the count supplied to the
.BR read (2)
call is shorter than the required length for the digit (plus a newline
character), subsequent reads from the same file descriptor will
complete the string.
When a complete string has been read, all subsequent read operations
will return zero bytes and a new file descriptor needs to be opened
to read the value again.
.TP
.BR write (2)
A
.BR write (2)
operation on the file sets the register to the
value given in the string.
The string is parsed from the beginning
until the first nonnumeric character or the end of the buffer.
Subsequent writes to the same file descriptor overwrite the
previous setting.
.RE
.TP
.IR /mbox_info ", " /ibox_info ", " /wbox_info ", " /dma_into ", " /proxydma_info
Read-only files that contain the saved state of the SPU mailboxes and
DMA queues.
This allows the SPU status to be inspected, mainly for debugging.
The
.I mbox_info
and
.I ibox_info
files each contain the four-byte mailbox message that has been written
by the SPU.
If no message has been written to these mailboxes, then
contents of these files is undefined.
The
.IR mbox_stat ,
.I ibox_stat
and
.I wbox_stat
files contain the available message count.

The
.I wbox_info
file contains an array of four-byte mailbox messages, which have been
sent to the SPU.
With current CBEA machines, the array is four items in
length, so up to 4 * 4 = 16 bytes can be read from this file.
If any mailbox queue entry is empty,
then the bytes read at the corresponding location are undefined.

The
.I dma_info
file contains the contents of the SPU MFC DMA queue, represented as the
following structure:

.in +4n
.nf
struct spu_dma_info {
    uint64_t         dma_info_type;
    uint64_t         dma_info_mask;
    uint64_t         dma_info_status;
    uint64_t         dma_info_stall_and_notify;
    uint64_t         dma_info_atomic_command_status;
    struct mfc_cq_sr dma_info_command_data[16];
};
.fi
.in

The last member of this data structure is the actual DMA queue,
containing 16 entries.
The
.I mfc_cq_sr
structure is defined as:

.in +4n
.nf
struct mfc_cq_sr {
    uint64_t mfc_cq_data0_RW;
    uint64_t mfc_cq_data1_RW;
    uint64_t mfc_cq_data2_RW;
    uint64_t mfc_cq_data3_RW;
};
.fi
.in

The
.I proxydma_info
file contains similar information, but describes the proxy DMA queue
(i.e., DMAs initiated by entities outside the SPU) instead.
The file is in the following format:

.in +4n
.nf
struct spu_proxydma_info {
    uint64_t         proxydma_info_type;
    uint64_t         proxydma_info_mask;
    uint64_t         proxydma_info_status;
    struct mfc_cq_sr proxydma_info_command_data[8];
};
.fi
.in

Accessing these files requires that the SPU context is scheduled out -
frequent use can be inefficient.
These files should not be used for normal program operation.

These files are not present on contexts that have been created with the
.B SPU_CREATE_NOSCHED
flag.
.TP
.IR /cntl
This file provides access to the SPU Run Control and SPU status
registers, as an ASCII string.
The following operations are supported:
.RS
.TP
.BR read (2)
Reads from the
.I cntl
file will return an ASCII string with the hex
value of the SPU Status register.
.TP
.BR write (2)
Writes to the
.I cntl
file will set the context's SPU Run Control register.
.RE
.TP
.I /mfc
Provides access to the Memory Flow Controller of the SPU.
Reading from the file returns the contents of the
SPU's MFC Tag Status register, and
writing to the file initiates a DMA from the MFC.
The following operations are supported:
.RS
.TP
.BR write (2)
Writes to this file need to be in the format of a MFC DMA command,
defined as follows:

.in +4n
.nf
struct mfc_dma_command {
    int32_t  pad;    /* reserved */
    uint32_t lsa;    /* local storage address */
    uint64_t ea;     /* effective address */
    uint16_t size;   /* transfer size */
    uint16_t tag;    /* command tag */
    uint16_t class;  /* class ID */
    uint16_t cmd;    /* command opcode */
};
.fi
.in

Writes are required to be exactly
.I sizeof(struct mfc_dma_command)
bytes in size.
The command will be sent to the SPU's MFC proxy queue, and the
tag stored in the kernel (see below).
.TP
.BR read (2)
Reads the contents of the tag status register.
If the file is opened in blocking mode (i.e., without
.BR O_NONBLOCK ),
then the read will block until a
DMA tag (as performed by a previous write) is complete.
In nonblocking mode,
the MFC tag status register will be returned without waiting.
.TP
.BR poll (2)
Calling
.BR poll (2)
on the
.I mfc
file will block until a new DMA can be
started (by checking for
.BR POLLOUT )
or until a previously started DMA
(by checking for
.BR POLLIN )
has been completed.

.I /mss
Provides access to the MFC MultiSource Synchronization (MSS) facility.
By
.BR mmap (2)-ing
this file, processes can access the MSS area of the SPU.

The following operations are supported:
.TP
.BR mmap (2)
Mapping
.B mss
into the process address space gives access to the SPU MSS area
within the process address space.
Only
.B MAP_SHARED
mappings are allowed.
.RE
.TP
.I /psmap
Provides access to the whole problem-state mapping of the SPU.
Applications can use this area to interface to the SPU, rather than
writing to individual register files in
.BR spufs .

The following operations are supported:
.RS
.TP
.BR mmap (2)
Mapping
.B psmap
gives a process a direct map of the SPU problem state area.
Only
.B MAP_SHARED
mappings are supported.
.RE
.TP
.I /phys-id
Read-only file containing the physical SPU number that the SPU context
is running on.
When the context is not running, this file contains the
string "\-1".

The physical SPU number is given by an ASCII hex string.
.TP
.I /object-id
Allows applications to store (or retrieve) a single 64-bit ID into the
context.
This ID is later used by profiling tools to uniquely identify
the context.
.RS
.TP
.BR write (2)
By writing an ASCII hex value into this file, applications can set the
object ID of the SPU context.
Any previous value of the object ID is overwritten.
.TP
.BR read (2)
Reading this file gives an ASCII hex string representing the object ID
for this SPU context.
.RE
.SH EXAMPLE
.TP
.IR /etc/fstab "  entry"
none  	/spu  	spufs  	gid=spu  	0	0
.\" .SH AUTHORS
.\" Arnd Bergmann <arndb@de.ibm.com>, Mark Nutter <mnutter@us.ibm.com>,
.\" Ulrich Weigand <Ulrich.Weigand@de.ibm.com>, Jeremy Kerr <jk@ozlabs.org>
.SH SEE ALSO
.BR close (2),
.BR spu_create (2),
.BR spu_run (2),
.BR capabilities (7)

.I The Cell Broadband Engine Architecture (CBEA) specification
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2006, Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.TH STANDARDS 7 2015-03-02 "Linux" "Linux Programmer's Manual"
.SH NAME
standards \- C and UNIX Standards
.SH DESCRIPTION
The CONFORMING TO section that appears in many manual pages identifies
various standards to which the documented interface conforms.
The following list briefly describes these standards.
.TP
.B V7
Version 7 (also known as Seventh Edition) UNIX,
released by AT&T/Bell Labs in 1979.
After this point, UNIX systems diverged into two main dialects:
BSD and System V.
.TP
.B 4.2BSD
This is an implementation standard defined by the 4.2 release
of the
.IR "Berkeley Software Distribution",
released by the University of California at Berkeley.
This was the first Berkeley release that contained a TCP/IP
stack and the sockets API.
4.2BSD was released in 1983.

Earlier major BSD releases included
.IR 3BSD
(1980),
.I 4BSD
(1980),
and
.I 4.1BSD
(1981).
.TP
.B 4.3BSD
The successor to 4.2BSD, released in 1986.
.TP
.B 4.4BSD
The successor to 4.3BSD, released in 1993.
This was the last major Berkeley release.
.TP
.B System V
This is an implementation standard defined by AT&T's milestone 1983
release of its commercial System V (five) release.
The previous major AT&T release was
.IR "System III" ,
released in 1981.
.TP
.B System V release 2 (SVr2)
This was the next System V release, made in 1985.
The SVr2 was formally described in the
.I "System V Interface Definition version 1"
.RI ( "SVID 1" )
published in 1985.
.TP
.B System V release 3 (SVr3)
This was the successor to SVr2, released in 1986.
This release was formally described in the
.I "System V Interface Definition version 2"
.RI ( "SVID 2" ).
.TP
.B System V release 4 (SVr4)
This was the successor to SVr3, released in 1989.
This version of System V is described in the "Programmer's Reference
Manual: Operating System API (Intel processors)" (Prentice-Hall
1992, ISBN 0-13-951294-2)
This release was formally described in the
.I "System V Interface Definition version 3"
.RI ( "SVID 3" ),
and is considered the definitive System V release.
.TP
.B SVID 4
System V Interface Definition version 4, issued in 1995.
Available online at
.UR http://www.sco.com\:/developers\:/devspecs/
.UE .
.TP
.B C89
This was the first C language standard, ratified by ANSI
(American National Standards Institute) in 1989
.RI ( X3.159-1989 ).
Sometimes this is known as
.IR "ANSI C" ,
but since C99 is also an
ANSI standard, this term is ambiguous.
This standard was also ratified by
ISO (International Standards Organization) in 1990
.RI ( "ISO/IEC 9899:1990" ),
and is thus occasionally referred to as
.IR "ISO C90" .
.TP
.B C99
This revision of the C language standard was ratified by ISO in 1999
.RI ( "ISO/IEC 9899:1999" ).
Available online at
.UR http://www.open-std.org\:/jtc1\:/sc22\:/wg14\:/www\:/standards
.UE .
.TP
.B C11
This revision of the C language standard was ratified by ISO in 2011
.RI ( "ISO/IEC 9899:2011" ).
.TP
.B POSIX.1-1990
"Portable Operating System Interface for Computing Environments".
IEEE 1003.1-1990 part 1, ratified by ISO in 1990
.RI ( "ISO/IEC 9945-1:1990" ).
The term "POSIX" was coined by Richard Stallman.
.TP
.B POSIX.2
IEEE Std 1003.2-1992,
describing commands and utilities, ratified by ISO in 1993
.RI ( "ISO/IEC 9945-2:1993" ).
.TP
.BR POSIX.1b " (formerly known as \fIPOSIX.4\fP)"
IEEE Std 1003.1b-1993,
describing real-time facilities
for portable operating systems, ratified by ISO in 1996
.RI ( "ISO/IEC 9945-1:1996" ).
.TP
.B POSIX.1c
IEEE Std 1003.1c-1995, which describes the POSIX threads interfaces.
.TP
.B POSIX.1d
IEEE Std 1003.1c-1999, which describes additional real-time extensions.
.TP
.B POSIX.1g
IEEE Std 1003.1g-2000, which describes networking APIs (including sockets).
.TP
.B POSIX.1j
IEEE Std 1003.1j-2000, which describes advanced real-time extensions.
.TP
.B POSIX.1-1996
A 1996 revision of POSIX.1 which incorporated POSIX.1b and POSIX.1c.
.TP
.B XPG3
Released in 1989, this was the first significant release of the
.IR "X/Open Portability Guide" ,
produced by the
X/Open Company, a multivendor consortium.
This multivolume guide was based on the POSIX standards.
.TP
.B XPG4
A revision of the X/Open Portability Guide, released in 1992.
.TP
.B XPG4v2
A 1994 revision of XPG4.
This is also referred to as
.IR "Spec 1170" ,
where 1170 referred to the number of interfaces
defined by this standard.
.TP
.B "SUS (SUSv1)"
Single UNIX Specification.
This was a repackaging of XPG4v2 and other X/Open standards
(X/Open Curses Issue 4 version 2,
X/Open Networking Service (XNS) Issue 4).
Systems conforming to this standard can be branded
.IR "UNIX 95" .
.TP
.B SUSv2
Single UNIX Specification version 2.
Sometimes also referred to as
.IR XPG5 .
This standard appeared in 1997.
Systems conforming to this standard can be branded
.IR "UNIX 98" .
See also
.UR http://www.UNIX-systems.org\:/version2/
.UE .)
.TP
.B POSIX.1-2001, SUSv3
This was a 2001 revision and consolidation of the
POSIX.1, POSIX.2, and SUS standards into a single document,
conducted under the auspices of the Austin Group
.UR http://www.opengroup.org\:/austin/
.UE .
The standard is available online at
.UR http://www.unix-systems.org\:/version3/
.UE ,
and the interfaces that it describes are also available in the Linux
manual pages package under sections 1p and 3p (e.g., "man 3p open").

The standard defines two levels of conformance:
.IR "POSIX conformance" ,
which is a baseline set of interfaces required of a conforming system;
and
.IR "XSI Conformance",
which additionally mandates a set of interfaces
(the "XSI extension") which are only optional for POSIX conformance.
XSI-conformant systems can be branded
.IR "UNIX 03" .
(XSI conformance constitutes the
.I "Single UNIX Specification version 3"
.RI ( SUSv3 ).)

The POSIX.1-2001 document is broken into four parts:

.BR XBD :
Definitions, terms and concepts, header file specifications.

.BR XSH :
Specifications of functions (i.e., system calls and library
functions in actual implementations).

.BR XCU :
Specifications of commands and utilities
(i.e., the area formerly described by POSIX.2).

.BR XRAT :
Informative text on the other parts of the standard.

POSIX.1-2001 is aligned with C99, so that all of the
library functions standardized in C99 are also
standardized in POSIX.1-2001.

Two Technical Corrigenda (minor fixes and improvements)
of the original 2001 standard have occurred:
TC1 in 2003 (referred to as
.IR POSIX.1-2003 ),
and TC2 in 2004 (referred to as
.IR POSIX.1-2004 ).
.TP
.B POSIX.1-2008, SUSv4
Work on the next revision of POSIX.1/SUS was completed and
ratified in 2008.

The changes in this revision are not as large as those
that occurred for POSIX.1-2001/SUSv3,
but a number of new interfaces are added
and various details of existing specifications are modified.
Many of the interfaces that were optional in
POSIX.1-2001 become mandatory in the 2008 revision of the standard.
A few interfaces that are present in POSIX.1-2001 are marked
as obsolete in POSIX.1-2008, or removed from the standard altogether.

The revised standard is broken into the same four parts as POSIX.1-2001,
and again there are two levels of conformance: the baseline
.IR "POSIX Conformance" ,
and
.IR "XSI Conformance" ,
which mandates an additional set of interfaces
beyond those in the base specification.

In general, where the CONFORMING TO section of a manual page
lists POSIX.1-2001, it can be assumed that the interface also
conforms to POSIX.1-2008, unless otherwise noted.

Technical Corrigendum 1 (minor fixes and improvements)
of this standard was released in 2013
(referred to as
.IR POSIX.1-2013 ).

Further information can be found on the Austin Group web site,
.UR http://www.opengroup.org\:/austin/
.UE .
.SH SEE ALSO
.BR attributes (7),
.BR feature_test_macros (7),
.BR libc (7),
.BR posixoptions (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1993 by Thomas Koenig (ig25@rz.uni-karlsruhe.de)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified Sat Jul 24 17:35:15 1993 by Rik Faith <faith@cs.unc.edu>
.\" Modified Sun Feb 19 22:02:32 1995 by Rik Faith <faith@cs.unc.edu>
.\" Modified Tue Oct 22 23:28:12 1996 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified Sun Jan 26 21:56:56 1997 by Ralph Schleicher
.\"    <rs@purple.UL.BaWue.DE>
.\" Modified Mon Jun 16 20:24:58 1997 by Nicolás Lichtmaier <nick@debian.org>
.\" Modified Sun Oct 18 22:11:28 1998 by Joseph S. Myers <jsm28@cam.ac.uk>
.\" Modified Mon Nov 16 17:24:47 1998 by Andries Brouwer <aeb@cwi.nl>
.\" Modified Thu Nov 16 23:28:25 2000 by David A. Wheeler
.\"    <dwheeler@dwheeler.com>
.\"
.\" "nroff" ("man") (or "tbl") needs a long page to avoid warnings
.\" from "grotty" (at imagined page breaks).  Bug in grotty?
.if n .pl 1000v
.TH SUFFIXES 7  2000-11-16 "Linux" "Linux Programmer's Manual"
.SH NAME
suffixes \- list of file suffixes
.SH DESCRIPTION
It is customary to indicate the contents of a file with the file suffix,
which consists of a period, followed by one or more letters.
Many standard utilities, such as compilers, use this to recognize the type of
file they are dealing with.
The
.BR make (1)
utility is driven by rules based on file suffix.
.PP
Following is a list of suffixes which are likely to be found on a
Linux system.
.PP
.TS
l | l
_ | _
lI |  l .
Suffix	File type
 ,v	files for RCS (Revision Control System)
 -	backup file
 .C	C++ source code, equivalent to \fI.cc\fP
 .F	Fortran source with \fBcpp\fP(1) directives
	or file compressed using freeze
 .S	assembler source with \fBcpp\fP(1) directives
 .Y	file compressed using yabba
 .Z	file compressed using \fBcompress\fP(1)
 .[0-9]+gf	TeX generic font files
 .[0-9]+pk	TeX packed font files
 .[1-9]	manual page for the corresponding section
 .[1-9][a-z]	manual page for section plus subsection
 .a	static object code library
 .ad	X application default resource file
 .ada	Ada source (may be body, spec, or combination)
 .adb	Ada body source
 .ads	Ada spec source
 .afm	PostScript font metrics
 .al	Perl autoload file
 .am	\fBautomake\fP(1) input file
 .arc	\fBarc\fP(1) archive
 .arj	\fBarj\fP(1) archive
 .asc	PGP ASCII-armored data
 .asm	(GNU) assembler source file
 .au	Audio sound file
 .aux	LaTeX auxiliary file
 .avi	(msvideo) movie
 .awk	AWK language program
 .b	LILO boot loader image
 .bak	backup file
 .bash	\fBbash\fP(1) shell script
 .bb	basic block list data produced by
	gcc \-ftest\-coverage
 .bbg	basic block graph data produced by
	gcc \-ftest\-coverage
 .bbl	BibTeX output
 .bdf	X font file
 .bib	TeX bibliographic database, BibTeX input
 .bm	bitmap source
 .bmp	bitmap
 .bz2	file compressed using \fBbzip2\fP(1)
 .c	C source
 .cat	message catalog files
 .cc	C++ source
 .cf	configuration file
 .cfg	configuration file
 .cgi	WWW content generating script or program
 .cls	LaTeX Class definition
 .class	Java compiled byte-code
 .conf	configuration file
 .config	configuration file
 .cpp	equivalent to \fI.cc\fR
 .csh	\fBcsh\fP(1) shell script
 .cxx	equivalent to \fI.cc\fR
 .dat	data file
 .deb	Debian software package
 .def	Modula-2 source for definition modules
 .def	other definition files
 .desc	initial part of mail message unpacked with
	\fBmunpack\fP(1)
 .diff	file differences (\fBdiff\fP(1) command output)
 .dir	dbm data base directory file
 .doc	documentation file
 .dsc	Debian Source Control (source package)
 .dtx	LaTeX package source file
 .dvi	TeX's device independent output
 .el	Emacs-Lisp source
 .elc	compiled Emacs-Lisp source
 .eps	encapsulated PostScript
 .exp	Expect source code
 .f	Fortran source
 .f77	Fortran 77 source
 .f90	Fortran 90 source
 .fas	precompiled Common-Lisp
 .fi	Fortran include files
 .fig	FIG image file (used by \fBxfig\fP(1))
 .fmt	TeX format file
 .gif	Compuserve Graphics Image File format
 .gmo	GNU format message catalog
 .gsf	Ghostscript fonts
 .gz	file compressed using \fBgzip\fP(1)
 .h	C or C++ header files
 .help	help file
 .hf	equivalent to \fI.help\fP
 .hlp	equivalent to \fI.help\fP
 .htm	poor man's \fI.html\fP
 .html	HTML document used with the World Wide Web
 .hqx	7-bit encoded Macintosh file
 .i	C source after preprocessing
 .icon	bitmap source
 .idx	reference or datum-index file for hypertext
	or database system
 .image	bitmap source
 .in	configuration template, especially for GNU Autoconf
 .info	files for the Emacs info browser
 .info-[0-9]+	split info files
 .ins	LaTeX package install file for docstrip
 .itcl	itcl source code;
	itcl ([incr Tcl]) is an OO extension of tcl
 .java	a Java source file
 .jpeg	Joint Photographic Experts Group format
 .jpg	poor man's \fI.jpeg\fP
 .kmap	\fBlyx\fP(1) keymap
 .l	equivalent to \fI.lex\fP or \fI.lisp\fP
 .lex	\fBlex\fP(1) or \fBflex\fP(1) files
 .lha	lharc archive
 .lib	Common-Lisp library
 .lisp	Lisp source
 .ln	files for use with \fBlint\fP(1)
 .log	log file, in particular produced by TeX
 .lsm	Linux Software Map entry
 .lsp	Common-Lisp source
 .lzh	lharc archive
 .m	Objective-C source code
 .m4	\fBm4\fP(1) source
 .mac	macro files for various programs
 .man	manual page (usually source rather than formatted)
 .map	map files for various programs
 .me	Nroff source using the me macro package
 .mf	Metafont (font generator for TeX) source
 .mgp	MagicPoint file
 .mm	sources for \fBgroff\fP(1) in mm - format
 .mo	Message catalog binary file
 .mod	Modula-2 source for implementation modules
 .mov	(quicktime) movie
 .mp	Metapost source
 .mp2	MPEG Layer 2 (audio) file
 .mp3	MPEG Layer 3 (audio) file
 .mpeg	movie file
 .o	object file
 .old	old or backup file
 .orig	backup (original) version of a file, from \fBpatch\fP(1)
 .out	output file, often executable program (a.out)
 .p	Pascal source
 .pag	dbm data base data file
 .patch	file differences for \fBpatch\fP(1)
 .pbm	portable bitmap format
 .pcf	X11 font files
 .pdf	Adobe Portable Data Format
	(use Acrobat/\fBacroread\fP or \fBxpdf\fP)
 .perl	Perl source (see .ph, .pl and .pm)
 .pfa	PostScript font definition files, ASCII format
 .pfb	PostScript font definition files, binary format
 .pgm	portable greymap format
 .pgp	PGP binary data
 .ph	Perl header file
 .php	PHP program file
 .php3	PHP3 program file
 .pid	File to store daemon PID (e.g., crond.pid)
 .pl	TeX property list file or Perl library file
 .pm	Perl module
 .png	Portable Network Graphics file
 .po	Message catalog source
 .pod	\fBperldoc\fP(1) file
 .ppm	portable pixmap format
 .pr	bitmap source
 .ps	PostScript file
 .py	Python source
 .pyc	compiled python
 .qt	quicktime movie
 .r	RATFOR source (obsolete)
 .rej	patches that \fBpatch\fP(1) couldn't apply
 .rpm	RPM software package
 .rtf	Rich Text Format file
 .rules	rules for something
 .s	assembler source
 .sa	stub libraries for a.out shared libraries
 .sc	\fBsc\fP(1) spreadsheet commands
 .scm	Scheme source code
 .sed	sed source file
 .sgml	SGML source file
 .sh	\fBsh\fP(1) scripts
 .shar	archive created by the \fBshar\fP(1) utility
 .so	Shared library or dynamically loadable object
 .sql	SQL source
 .sqml	SQML schema or query program
 .sty	LaTeX style files
 .sym	Modula-2 compiled definition modules
 .tar	archive created by the \fBtar\fP(1) utility
 .tar.Z	tar(1) archive compressed with \fBcompress\fP(1)
 .tar.bz2	tar(1) archive compressed with \fBbzip2\fP(1)
 .tar.gz	tar(1) archive compressed with \fBgzip\fP(1)
 .taz	tar(1) archive compressed with \fBcompress\fP(1)
 .tcl	tcl source code
 .tex	TeX or LaTeX source
 .texi	equivalent to \fI.texinfo\fP
 .texinfo	Texinfo documentation source
 .text	text file
 .tfm	TeX font metric file
 .tgz	tar archive compressed with \fBgzip\fP(1)
 .tif	poor man's \fI.tiff\fP
 .tiff	Tagged Image File Format
 .tk	tcl/tk script
 .tmp	temporary file
 .tmpl	template files
 .txt	equivalent to \fI.text\fP
 .uu	equivalent to \fI.uue\fP
 .uue	binary file encoded with \fBuuencode\fP(1)
 .vf	TeX virtual font file
 .vpl	TeX virtual property list file
 .w	Silvio Levi's CWEB
 .wav	wave sound file
 .web	Donald Knuth's WEB
 .wml	Source file for Web Meta Language
 .xbm	X11 bitmap source
 .xcf	GIMP graphic
 .xml	eXtended Markup Language file
 .xpm	X11 pixmap source
 .xs	Perl xsub file produced by h2xs
 .xsl	XSL stylesheet
 .y	\fByacc\fP(1) or \fBbison\fP(1) (parser generator) files
 .z	File compressed using \fBpack\fP(1) (or an old \fBgzip\fP(1))
 .zip	\fBzip\fP(1) archive
 .zoo	\fBzoo\fP(1) archive
 ~	Emacs or \fBpatch\fP(1) backup file
 rc	startup (`run control') file, e.g., \fI.newsrc\fP
.TE
.SH CONFORMING TO
General UNIX conventions.
.SH BUGS
This list is not exhaustive.
.SH SEE ALSO
.BR file (1),
.BR make (1)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright 1993 Giorgio Ciucci (giorgio@crcc.it)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" FIXME . There is now duplication of some of the information
.\" below in semctl.2, msgctl.2, and shmctl.2 -- MTK, Nov 04
.\"
.\" FIXME . Ultimately, there should probably be
.\" svmq_overview(7), svshm_overview(7), and sem_overview(7)
.\" that provide an overview of each System V IPC mechanism.
.\" In that case:
.\"   * Those files should add a discussion of the /proc/sysvipc
.\"     interfaces.
.\"   * Documentation of the various /proc interfaces should move into
.\"     those files (from proc(5)), and references in the various *.2
.\"     pages that refer to the /proc files should be adjusted.
.\"   * The only part that uniquely belongs in svipc(7) is perphaps
.\"     the discussion of ipc_perm.
.\"
.TH SVIPC 7 2014-09-21 "Linux" "Linux Programmer's Manual"
.SH NAME
svipc \- System V interprocess communication mechanisms
.SH SYNOPSIS
.nf
.B #include <sys/msg.h>
.B #include <sys/sem.h>
.B #include <sys/shm.h>
.fi
.SH DESCRIPTION
This manual page refers to the Linux implementation of the System V
interprocess communication (IPC) mechanisms:
message queues, semaphore sets, and shared memory segments.
In the following, the word
.I resource
means an instantiation of one among such mechanisms.
.SS Resource access permissions
For each resource, the system uses a common structure of type
.I "struct ipc_perm"
to store information needed in determining permissions to perform an
IPC operation.
The
.I ipc_perm
structure includes the following members:
.in +4n
.nf

struct ipc_perm {
    uid_t          cuid;   /* creator user ID */
    gid_t          cgid;   /* creator group ID */
    uid_t          uid;    /* owner user ID */
    gid_t          gid;    /* owner group ID */
    unsigned short mode;   /* r/w permissions */
};
.fi
.in
.PP
The
.I mode
member of the
.I ipc_perm
structure defines, with its lower 9 bits, the access permissions to the
resource for a process executing an IPC system call.
The permissions are interpreted as follows:
.sp
.nf
    0400    Read by user.
    0200    Write by user.
.sp .5
    0040    Read by group.
    0020    Write by group.
.sp .5
    0004    Read by others.
    0002    Write by others.
.fi
.PP
Bits 0100, 0010, and 0001 (the execute bits) are unused by the system.
Furthermore,
"write"
effectively means
"alter"
for a semaphore set.
.PP
The same system header file also defines the following symbolic
constants:
.TP 14
.B IPC_CREAT
Create entry if key doesn't exist.
.TP
.B IPC_EXCL
Fail if key exists.
.TP
.B IPC_NOWAIT
Error if request must wait.
.TP
.B IPC_PRIVATE
Private key.
.TP
.B IPC_RMID
Remove resource.
.TP
.B IPC_SET
Set resource options.
.TP
.B IPC_STAT
Get resource options.
.PP
Note that
.B IPC_PRIVATE
is a
.I key_t
type, while all the other symbolic constants are flag fields and can
be OR'ed into an
.I int
type variable.
.SS Message queues
A message queue is uniquely identified by a positive integer
.RI "(its " msqid )
and has an associated data structure of type
.IR "struct msqid_ds" ,
defined in
.IR <sys/msg.h> ,
containing the following members:
.in +4n
.nf

struct msqid_ds {
    struct ipc_perm msg_perm;
    msgqnum_t       msg_qnum;    /* no of messages on queue */
    msglen_t        msg_qbytes;  /* bytes max on a queue */
    pid_t           msg_lspid;   /* PID of last msgsnd(2) call */
    pid_t           msg_lrpid;   /* PID of last msgrcv(2) call */
    time_t          msg_stime;   /* last msgsnd(2) time */
    time_t          msg_rtime;   /* last msgrcv(2) time */
    time_t          msg_ctime;   /* last change time */
};
.fi
.in
.TP 11
.I msg_perm
.I ipc_perm
structure that specifies the access permissions on the message
queue.
.TP
.I msg_qnum
Number of messages currently on the message queue.
.TP
.I msg_qbytes
Maximum number of bytes of message text allowed on the message
queue.
.TP
.I msg_lspid
ID of the process that performed the last
.BR msgsnd (2)
system call.
.TP
.I msg_lrpid
ID of the process that performed the last
.BR msgrcv (2)
system call.
.TP
.I msg_stime
Time of the last
.BR msgsnd (2)
system call.
.TP
.I msg_rtime
Time of the last
.BR msgrcv (2)
system call.
.TP
.I msg_ctime
Time of the last
system call that changed a member of the
.I msqid_ds
structure.
.SS Semaphore sets
A semaphore set is uniquely identified by a positive integer
.RI "(its " semid )
and has an associated data structure of type
.IR "struct semid_ds" ,
defined in
.IR <sys/sem.h> ,
containing the following members:
.in +4n
.nf

struct semid_ds {
    struct ipc_perm sem_perm;
    time_t          sem_otime;   /* last operation time */
    time_t          sem_ctime;   /* last change time */
    unsigned long   sem_nsems;   /* count of sems in set */
};
.fi
.in
.TP 11
.I sem_perm
.I ipc_perm
structure that specifies the access permissions on the semaphore
set.
.TP
.I sem_otime
Time of last
.BR semop (2)
system call.
.TP
.I sem_ctime
Time of last
.BR semctl (2)
system call that changed a member of the above structure or of one
semaphore belonging to the set.
.TP
.I sem_nsems
Number of semaphores in the set.
Each semaphore of the set is referenced by a nonnegative integer
ranging from
.B 0
to
.IR sem_nsems\-1 .
.PP
A semaphore is a data structure of type
.I "struct sem"
containing the following members:
.in +4n
.nf

struct sem {
    int semval;  /* semaphore value */
    int sempid;  /* PID for last operation */
.\"    unsigned short semncnt; /* nr awaiting semval to increase */
.\"    unsigned short semzcnt; /* nr awaiting semval = 0 */
};
.fi
.in
.TP 11
.I semval
Semaphore value: a nonnegative integer.
.TP
.I sempid
ID of the last process that performed a semaphore operation
on this semaphore.
.\".TP
.\".I semncnt
.\"Number of processes suspended awaiting for
.\".I semval
.\"to increase.
.\".TP
.\".I semznt
.\"Number of processes suspended awaiting for
.\".I semval
.\"to become zero.
.SS Shared memory segments
A shared memory segment is uniquely identified by a positive integer
.RI "(its " shmid )
and has an associated data structure of type
.IR "struct shmid_ds" ,
defined in
.IR <sys/shm.h> ,
containing the following members:
.in +4n
.nf

struct shmid_ds {
    struct ipc_perm shm_perm;
    size_t          shm_segsz;   /* size of segment */
    pid_t           shm_cpid;    /* PID of creator */
    pid_t           shm_lpid;    /* PID, last operation */
    shmatt_t        shm_nattch;  /* no. of current attaches */
    time_t          shm_atime;   /* time of last attach */
    time_t          shm_dtime;   /* time of last detach */
    time_t          shm_ctime;   /* time of last change */
};
.fi
.in
.TP 11
.I shm_perm
.I ipc_perm
structure that specifies the access permissions on the shared memory
segment.
.TP
.I shm_segsz
Size in bytes of the shared memory segment.
.TP
.I shm_cpid
ID of the process that created the shared memory segment.
.TP
.I shm_lpid
ID of the last process that executed a
.BR shmat (2)
or
.BR shmdt (2)
system call.
.TP
.I shm_nattch
Number of current alive attaches for this shared memory segment.
.TP
.I shm_atime
Time of the last
.BR shmat (2)
system call.
.TP
.I shm_dtime
Time of the last
.BR shmdt (2)
system call.
.TP
.I shm_ctime
Time of the last
.BR shmctl (2)
system call that changed
.IR shmid_ds .
.SS IPC namespaces
For a discussion of the interaction of System V IPC objects and
IPC namespaces, see
.BR namespaces (7).
.SH SEE ALSO
.BR ipcmk (1),
.BR ipcrm (1),
.BR ipcs (1),
.BR ipc (2),
.BR msgctl (2),
.BR msgget (2),
.BR msgrcv (2),
.BR msgsnd (2),
.BR semctl (2),
.BR semget (2),
.BR semop (2),
.BR shmat (2),
.BR shmctl (2),
.BR shmdt (2),
.BR shmget (2),
.BR ftok (3),
.BR namespaces (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 1992, 1993, 1994
.\"	The Regents of the University of California.  All rights reserved.
.\" and Copyright (C) 2008, 2014 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(BSD_3_CLAUSE_UCB)
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\" %%%LICENSE_END
.\"
.\"	@(#)symlink.7	8.3 (Berkeley) 3/31/94
.\" $FreeBSD: src/bin/ln/symlink.7,v 1.30 2005/02/13 22:25:09 ru Exp $
.\"
.\" 2008-06-11, mtk, Taken from FreeBSD 6.2 and heavily edited for
.\"     specific Linux details, improved readability, and man-pages style.
.\"
.TH SYMLINK 7 2014-04-06 "Linux" "Linux Programmer's Manual"
.SH NAME
symlink \- symbolic link handling
.SH DESCRIPTION
Symbolic links are files that act as pointers to other files.
To understand their behavior, you must first understand how hard links
work.

A hard link to a file is indistinguishable from the original file because
it is a reference to the object underlying the original filename.
(To be precise: each of the hard links to a file is a reference to
the same
.IR "inode number" ,
where an inode number is an index into the inode table,
which contains metadata about all files on a filesystem.
See
.BR stat (2).)
Changes to a file are independent of the name used to reference the file.
Hard links may not refer to directories
(to prevent the possibility of loops within the filesystem tree,
which would confuse many programs)
and may not refer to files on different filesystems
(because inode numbers are not unique across filesystems).

A symbolic link is a special type of file whose contents are a string
that is the pathname of another file, the file to which the link refers.
(The contents of a symbolic link can be read using
.BR readlink (2).)
In other words, a symbolic link is a pointer to another name,
and not to an underlying object.
For this reason, symbolic links may refer to directories and may cross
filesystem boundaries.

There is no requirement that the pathname referred to by a symbolic link
should exist.
A symbolic link that refers to a pathname that does not exist is said
to be a
.IR "dangling link" .

Because a symbolic link and its referenced object coexist in the filesystem
name space, confusion can arise in distinguishing between the link itself
and the referenced object.
On historical systems,
commands and system calls adopted their own link-following
conventions in a somewhat ad-hoc fashion.
Rules for a more uniform approach,
as they are implemented on Linux and other systems,
are outlined here.
It is important that site-local applications also conform to these rules,
so that the user interface can be as consistent as possible.
.SS Symbolic link ownership, permissions, and timestamps
The owner and group of an existing symbolic link can be changed
using
.BR lchown (2).
The only time that the ownership of a symbolic link matters is
when the link is being removed or renamed in a directory that
has the sticky bit set (see
.BR stat (2)).

The last access and last modification timestamps
of a symbolic link can be changed using
.BR utimensat (2)
or
.BR lutimes (3).

On Linux, the permissions of a symbolic link are not used
in any operations; the permissions are always
0777 (read, write, and execute for all user categories),
.\" Linux does not currently implement an lchmod(2).
and can't be changed.
.\"
.\" The
.\" 4.4BSD
.\" system differs from historical
.\" 4BSD
.\" systems in that the system call
.\" .BR chown (2)
.\" has been changed to follow symbolic links.
.\" The
.\" .BR lchown (2)
.\" system call was added later when the limitations of the new
.\" .BR chown (2)
.\" became apparent.
.SS Obtaining a file descriptor that refers to a symbolic link
Using the combination of the
.B O_PATH
and
.BR O_NOFOLLOW
flags to
.BR open (2)
yields a file descriptor that can be passed as the
.IR dirfd
argument in system calls such as
.BR fstatat (2),
.BR fchownat (2),
.BR fchmodat (2),
.BR linkat (2),
and
.BR readlinkat (2),
in order to operate on the symbolic link itself
(rather than the file to which it refers).

By default
(i.e., if the
.BR AT_SYMLINK_FOLLOW
flag is not specified), if
.BR name_to_handle_at (2)
is applied to a symbolic link, it yields a handle for the symbolic link
(rather than the file to which it refers).
One can then obtain a file descriptor for the symbolic link
(rather than the file to which it refers)
by specifying the
.B O_PATH
flag in a subsequent call to
.BR open_by_handle_at (2).
Again, that file descriptor can be used in the
aforementioned system calls to operate on the symbolic link itself.
.SS Handling of symbolic links by system calls and commands
Symbolic links are handled either by operating on the link itself,
or by operating on the object referred to by the link.
In the latter case,
an application or system call is said to
.I follow
the link.
Symbolic links may refer to other symbolic links,
in which case the links are dereferenced until an object that is
not a symbolic link is found,
a symbolic link that refers to a file which does not exist is found,
or a loop is detected.
(Loop detection is done by placing an upper limit on the number of
links that may be followed, and an error results if this limit is
exceeded.)

There are three separate areas that need to be discussed.
They are as follows:
.IP 1. 3
Symbolic links used as filename arguments for system calls.
.IP 2.
Symbolic links specified as command-line arguments to utilities that
are not traversing a file tree.
.IP 3.
Symbolic links encountered by utilities that are traversing a file tree
(either specified on the command line or encountered as part of the
file hierarchy walk).
.SS System calls
The first area is symbolic links used as filename arguments for
system calls.

Except as noted below, all system calls follow symbolic links.
For example, if there were a symbolic link
.I slink
which pointed to a file named
.IR afile ,
the system call
.I "open(""slink"" ...\&)"
would return a file descriptor referring to the file
.IR afile .

Various system calls do not follow links, and operate
on the symbolic link itself.
They are:
.BR lchown (2),
.BR lgetxattr (2),
.BR llistxattr (2),
.BR lremovexattr (2),
.BR lsetxattr (2),
.BR lstat (2),
.BR readlink (2),
.BR rename (2),
.BR rmdir (2),
and
.BR unlink (2).

Certain other system calls optionally follow symbolic links.
They are:
.BR faccessat (2),
.\" Maybe one day: .BR fchownat (2)
.BR fchownat (2),
.BR fstatat (2),
.BR linkat (2),
.BR name_to_handle_at (2),
.BR open (2),
.BR openat (2),
.BR open_by_handle_at (2),
and
.BR utimensat (2);
see their manual pages for details.
Because
.BR remove (3)
is an alias for
.BR unlink (2),
that library function also does not follow symbolic links.
When
.BR rmdir (2)
is applied to a symbolic link, it fails with the error
.BR ENOTDIR .

The
.BR link (2)
warrants special discussion.
POSIX.1-2001 specifies that
.BR link (2)
should dereference
.I oldpath
if it is a symbolic link.
However, Linux does not do this.
(By default, Solaris is the same,
but the POSIX.1-2001 specified behavior can be obtained with
suitable compiler options.)
The upcoming POSIX.1 revision changes the specification to allow
either behavior in an implementation.
.SS Commands not traversing a file tree
The second area is symbolic links, specified as command-line
filename arguments, to commands which are not traversing a file tree.

Except as noted below, commands follow symbolic links named as
command-line arguments.
For example, if there were a symbolic link
.I slink
which pointed to a file named
.IR afile ,
the command
.I "cat slink"
would display the contents of the file
.IR afile .

It is important to realize that this rule includes commands which may
optionally traverse file trees; for example, the command
.I "chown file"
is included in this rule, while the command
.IR "chown\ \-R file" ,
which performs a tree traversal, is not.
(The latter is described in the third area, below.)

If it is explicitly intended that the command operate on the symbolic
link instead of following the symbolic link\(emfor example, it is desired that
.I "chown slink"
change the ownership of the file that
.I slink
is, whether it is a symbolic link or not\(emthe
.I \-h
option should be used.
In the above example,
.I "chown root slink"
would change the ownership of the file referred to by
.IR slink ,
while
.I "chown\ \-h root slink"
would change the ownership of
.I slink
itself.

There are some exceptions to this rule:
.IP * 2
The
.BR mv (1)
and
.BR rm (1)
commands do not follow symbolic links named as arguments,
but respectively attempt to rename and delete them.
(Note, if the symbolic link references a file via a relative path,
moving it to another directory may very well cause it to stop working,
since the path may no longer be correct.)
.IP *
The
.BR ls (1)
command is also an exception to this rule.
For compatibility with historic systems (when
.BR ls (1)
is not doing a tree walk\(emthat is,
.I \-R
option is not specified),
the
.BR ls (1)
command follows symbolic links named as arguments if the
.I \-H
or
.I \-L
option is specified,
or if the
.IR \-F ,
.IR \-d ,
or
.I \-l
options are not specified.
(The
.BR ls (1)
command is the only command where the
.I \-H
and
.I \-L
options affect its behavior even though it is not doing a walk of
a file tree.)
.IP *
The
.BR file (1)
command is also an exception to this rule.
The
.BR file (1)
command does not follow symbolic links named as argument by default.
The
.BR file (1)
command does follow symbolic links named as argument if the
.I \-L
option is specified.
.\"
.\"The 4.4BSD system differs from historical 4BSD systems in that the
.\".BR chown (1)
.\"and
.\".BR chgrp (1)
.\"commands follow symbolic links specified on the command line.
.SS Commands traversing a file tree
The following commands either optionally or always traverse file trees:
.BR chgrp (1),
.BR chmod (1),
.BR chown (1),
.BR cp (1),
.BR du (1),
.BR find (1),
.BR ls (1),
.BR pax (1),
.BR rm (1),
and
.BR tar (1).

It is important to realize that the following rules apply equally to
symbolic links encountered during the file tree traversal and symbolic
links listed as command-line arguments.

The \fIfirst rule\fP applies to symbolic links that reference files other
than directories.
Operations that apply to symbolic links are performed on the links
themselves, but otherwise the links are ignored.

The command
.I "rm\ \-r slink directory"
will remove
.IR slink ,
as well as any symbolic links encountered in the tree traversal of
.IR directory ,
because symbolic links may be removed.
In no case will
.BR rm (1)
affect the file referred to by
.IR slink .

The \fIsecond rule\fP applies to symbolic links that refer to directories.
Symbolic links that refer to directories are never followed by default.
This is often referred to as a "physical" walk, as opposed to a "logical"
walk (where symbolic links the refer to directories are followed).

Certain conventions are (should be) followed as consistently as
possible by commands that perform file tree walks:
.IP * 2
A command can be made to follow
any symbolic links named on the command line,
regardless of the type of file they reference, by specifying the
.I \-H
(for "half-logical") flag.
This flag is intended to make the command-line name space look
like the logical name space.
(Note, for commands that do not always do file tree traversals, the
.I \-H
flag will be ignored if the
.I \-R
flag is not also specified.)

For example, the command
.I "chown\ \-HR user slink"
will traverse the file hierarchy rooted in the file pointed to by
.IR slink .
Note, the
.I \-H
is not the same as the previously discussed
.I \-h
flag.
The
.I \-H
flag causes symbolic links specified on the command line to be
dereferenced for the purposes of both the action to be performed
and the tree walk, and it is as if the user had specified the
name of the file to which the symbolic link pointed.
.IP *
A command can be made to
follow any symbolic links named on the command line,
as well as any symbolic links encountered during the traversal,
regardless of the type of file they reference, by specifying the
.I \-L
(for "logical") flag.
This flag is intended to make the entire name space look like
the logical name space.
(Note, for commands that do not always do file tree traversals, the
.I \-L
flag will be ignored if the
.I \-R
flag is not also specified.)

For example, the command
.I "chown\ \-LR user slink"
will change the owner of the file referred to by
.IR slink .
If
.I slink
refers to a directory,
.B chown
will traverse the file hierarchy rooted in the directory that it
references.
In addition, if any symbolic links are encountered in any file tree that
.B chown
traverses, they will be treated in the same fashion as
.IR slink .
.IP *
A command can be made to
provide the default behavior by specifying the
.I \-P
(for "physical") flag.
This flag is intended to make the entire name space look like the
physical name space.
.PP
For commands that do not by default do file tree traversals, the
.IR \-H ,
.IR \-L ,
and
.I \-P
flags are ignored if the
.I \-R
flag is not also specified.
In addition, you may specify the
.IR \-H ,
.IR \-L ,
and
.I \-P
options more than once;
the last one specified determines the command's behavior.
This is intended to permit you to alias commands to behave one way
or the other, and then override that behavior on the command line.

The
.BR ls (1)
and
.BR rm (1)
commands have exceptions to these rules:
.IP * 2
The
.BR rm (1)
command operates on the symbolic link, and not the file it references,
and therefore never follows a symbolic link.
The
.BR rm (1)
command does not support the
.IR \-H ,
.IR \-L ,
or
.I \-P
options.
.IP *
To maintain compatibility with historic systems,
the
.BR ls (1)
command acts a little differently.
If you do not specify the
.IR \-F ,
.IR \-d
or
.I \-l
options,
.BR ls (1)
will follow symbolic links specified on the command line.
If the
.I \-L
flag is specified,
.BR ls (1)
follows all symbolic links,
regardless of their type,
whether specified on the command line or encountered in the tree walk.
.SH SEE ALSO
.BR chgrp (1),
.BR chmod (1),
.BR find (1),
.BR ln (1),
.BR ls (1),
.BR mv (1),
.BR rm (1),
.BR lchown (2),
.BR link (2),
.BR lstat (2),
.BR readlink (2),
.BR rename (2),
.BR symlink (2),
.BR unlink (2),
.BR utimensat (2),
.BR lutimes (3),
.BR path_resolution (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" This man page is Copyright (C) 1999 Andi Kleen <ak@muc.de>.
.\" and Copyright (C) 2008 Michael Kerrisk <mtk.manpages@gmail.com>
.\" Note also that many pieces are drawn from the kernel source file
.\" Documentation/networking/ip-sysctl.txt.
.\"
.\" %%%LICENSE_START(VERBATIM_ONE_PARA)
.\" Permission is granted to distribute possibly modified copies
.\" of this page provided the header is included verbatim,
.\" and in case of nontrivial modification author and date
.\" of the modification is added to the header.
.\" %%%LICENSE_END
.\"
.\" 2.4 Updates by Nivedita Singhvi 4/20/02 <nivedita@us.ibm.com>.
.\" Modified, 2004-11-11, Michael Kerrisk and Andries Brouwer
.\"	Updated details of interaction of TCP_CORK and TCP_NODELAY.
.\"
.\" 2008-11-21, mtk, many, many updates.
.\"     The descriptions of /proc files and socket options should now
.\"     be more or less up to date and complete as at Linux 2.6.27
.\"     (other than the remaining FIXMEs in the page source below).
.\"
.\" FIXME The following need to be documented
.\"	TCP_MD5SIG (2.6.20)
.\"	    commit cfb6eeb4c860592edd123fdea908d23c6ad1c7dc
.\"	    Author was yoshfuji@linux-ipv6.org
.\"	    Needs CONFIG_TCP_MD5SIG
.\"	    From net/inet/Kconfig
.\"	    bool "TCP: MD5 Signature Option support (RFC2385) (EXPERIMENTAL)"
.\"	    RFC2385 specifies a method of giving MD5 protection to TCP sessions.
.\"	    Its main (only?) use is to protect BGP sessions between core routers
.\"	    on the Internet.
.\"
.\"	    There is a TCP_MD5SIG option documented in FreeBSD's tcp(4),
.\"	    but probably many details are different on Linux
.\"	    http://thread.gmane.org/gmane.linux.network/47490
.\"	    http://www.daemon-systems.org/man/tcp.4.html
.\"	    http://article.gmane.org/gmane.os.netbsd.devel.network/3767/match=tcp_md5sig+freebsd
.\"	TCP_COOKIE_TRANSACTIONS (2.6.33)
.\"	    commit 519855c508b9a17878c0977a3cdefc09b59b30df
.\"	    Author: William Allen Simpson <william.allen.simpson@gmail.com>
.\"	    commit e56fb50f2b7958b931c8a2fc0966061b3f3c8f3a
.\"	    Author: William Allen Simpson <william.allen.simpson@gmail.com>
.\"
.\"	    REMOVED in Linux 3.10
.\" 		commit 1a2c6181c4a1922021b4d7df373bba612c3e5f04
.\"		Author: Christoph Paasch <christoph.paasch@uclouvain.be>
.\"
.\"	TCP_THIN_LINEAR_TIMEOUTS (2.6.34)
.\"	    commit 36e31b0af58728071e8023cf8e20c5166b700717
.\"	    Author: Andreas Petlund <apetlund@simula.no>
.\"	TCP_THIN_DUPACK (2.6.34)
.\"	    commit 7e38017557bc0b87434d184f8804cadb102bb903
.\"	    Author: Andreas Petlund <apetlund@simula.no>
.\"	TCP_REPAIR (3.5)
.\"	    commit ee9952831cfd0bbe834f4a26489d7dce74582e37
.\"	    Author: Pavel Emelyanov <xemul@parallels.com>
.\"	    See also
.\"		http://criu.org/TCP_connection
.\"		https://lwn.net/Articles/495304/
.\"	TCP_REPAIR_QUEUE (3.5)
.\"	    commit ee9952831cfd0bbe834f4a26489d7dce74582e37
.\"	    Author: Pavel Emelyanov <xemul@parallels.com>
.\"	TCP_QUEUE_SEQ (3.5)
.\"	    commit ee9952831cfd0bbe834f4a26489d7dce74582e37
.\"	    Author: Pavel Emelyanov <xemul@parallels.com>
.\"	TCP_REPAIR_OPTIONS (3.5)
.\"	    commit b139ba4e90dccbf4cd4efb112af96a5c9e0b098c
.\"	    Author: Pavel Emelyanov <xemul@parallels.com>
.\"     TCP_FASTOPEN (3.6)
.\"         (Fast Open server side implementation completed in 3.7)
.\"	    http://lwn.net/Articles/508865/
.\"     TCP_TIMESTAMP (3.9)
.\"        commit 93be6ce0e91b6a94783e012b1857a347a5e6e9f2
.\"        Author: Andrey Vagin <avagin@openvz.org>
.\"     TCP_NOTSENT_LOWAT (3.12)
.\"        commit c9bee3b7fdecb0c1d070c7b54113b3bdfb9a3d36
.\"        Author: Eric Dumazet <edumazet@google.com>
.\"
.TH TCP  7 2015-03-29 "Linux" "Linux Programmer's Manual"
.SH NAME
tcp \- TCP protocol
.SH SYNOPSIS
.B #include <sys/socket.h>
.br
.B #include <netinet/in.h>
.br
.B #include <netinet/tcp.h>
.sp
.B tcp_socket = socket(AF_INET, SOCK_STREAM, 0);
.SH DESCRIPTION
This is an implementation of the TCP protocol defined in
RFC\ 793, RFC\ 1122 and RFC\ 2001 with the NewReno and SACK
extensions.
It provides a reliable, stream-oriented,
full-duplex connection between two sockets on top of
.BR ip (7),
for both v4 and v6 versions.
TCP guarantees that the data arrives in order and
retransmits lost packets.
It generates and checks a per-packet checksum to catch
transmission errors.
TCP does not preserve record boundaries.

A newly created TCP socket has no remote or local address and is not
fully specified.
To create an outgoing TCP connection use
.BR connect (2)
to establish a connection to another TCP socket.
To receive new incoming connections, first
.BR bind (2)
the socket to a local address and port and then call
.BR listen (2)
to put the socket into the listening state.
After that a new socket for each incoming connection can be accepted using
.BR accept (2).
A socket which has had
.BR accept (2)
or
.BR connect (2)
successfully called on it is fully specified and may transmit data.
Data cannot be transmitted on listening or not yet connected sockets.

Linux supports RFC\ 1323 TCP high performance
extensions.
These include Protection Against Wrapped
Sequence Numbers (PAWS), Window Scaling and Timestamps.
Window scaling allows the use
of large (> 64K) TCP windows in order to support links with high
latency or bandwidth.
To make use of them, the send and receive buffer sizes must be increased.
They can be set globally with the
.I /proc/sys/net/ipv4/tcp_wmem
and
.I /proc/sys/net/ipv4/tcp_rmem
files, or on individual sockets by using the
.B SO_SNDBUF
and
.B SO_RCVBUF
socket options with the
.BR setsockopt (2)
call.

The maximum sizes for socket buffers declared via the
.B SO_SNDBUF
and
.B SO_RCVBUF
mechanisms are limited by the values in the
.I /proc/sys/net/core/rmem_max
and
.I /proc/sys/net/core/wmem_max
files.
Note that TCP actually allocates twice the size of
the buffer requested in the
.BR setsockopt (2)
call, and so a succeeding
.BR getsockopt (2)
call will not return the same size of buffer as requested in the
.BR setsockopt (2)
call.
TCP uses the extra space for administrative purposes and internal
kernel structures, and the
.I /proc
file values reflect the
larger sizes compared to the actual TCP windows.
On individual connections, the socket buffer size must be set prior to the
.BR listen (2)
or
.BR connect (2)
calls in order to have it take effect.
See
.BR socket (7)
for more information.
.PP
TCP supports urgent data.
Urgent data is used to signal the
receiver that some important message is part of the data
stream and that it should be processed as soon as possible.
To send urgent data specify the
.B MSG_OOB
option to
.BR send (2).
When urgent data is received, the kernel sends a
.B SIGURG
signal to the process or process group that has been set as the
socket "owner" using the
.B SIOCSPGRP
or
.B FIOSETOWN
ioctls (or the POSIX.1-2001-specified
.BR fcntl (2)
.B F_SETOWN
operation).
When the
.B SO_OOBINLINE
socket option is enabled, urgent data is put into the normal
data stream (a program can test for its location using the
.B SIOCATMARK
ioctl described below),
otherwise it can be received only when the
.B MSG_OOB
flag is set for
.BR recv (2)
or
.BR recvmsg (2).

Linux 2.4 introduced a number of changes for improved
throughput and scaling, as well as enhanced functionality.
Some of these features include support for zero-copy
.BR sendfile (2),
Explicit Congestion Notification, new
management of TIME_WAIT sockets, keep-alive socket options
and support for Duplicate SACK extensions.
.SS Address formats
TCP is built on top of IP (see
.BR ip (7)).
The address formats defined by
.BR ip (7)
apply to TCP.
TCP supports point-to-point communication only;
broadcasting and multicasting are not
supported.
.SS /proc interfaces
System-wide TCP parameter settings can be accessed by files in the directory
.IR /proc/sys/net/ipv4/ .
In addition, most IP
.I /proc
interfaces also apply to TCP; see
.BR ip (7).
Variables described as
.I Boolean
take an integer value, with a nonzero value ("true") meaning that
the corresponding option is enabled, and a zero value ("false")
meaning that the option is disabled.
.TP
.IR tcp_abc " (Integer; default: 0; since Linux 2.6.15)"
.\" The following is from 2.6.28-rc4: Documentation/networking/ip-sysctl.txt
Control the Appropriate Byte Count (ABC), defined in RFC 3465.
ABC is a way of increasing the congestion window
.RI ( cwnd )
more slowly in response to partial acknowledgments.
Possible values are:
.RS
.IP 0 3
increase
.I cwnd
once per acknowledgment (no ABC)
.IP 1
increase
.I cwnd
once per acknowledgment of full sized segment
.IP 2
allow increase
.I cwnd
by two if acknowledgment is
of two segments to compensate for delayed acknowledgments.
.RE
.TP
.IR tcp_abort_on_overflow " (Boolean; default: disabled; since Linux 2.4)"
.\" Since 2.3.41
Enable resetting connections if the listening service is too
slow and unable to keep up and accept them.
It means that if overflow occurred due
to a burst, the connection will recover.
Enable this option
.I only
if you are really sure that the listening daemon
cannot be tuned to accept connections faster.
Enabling this option can harm the clients of your server.
.TP
.IR tcp_adv_win_scale " (integer; default: 2; since Linux 2.4)"
.\" Since 2.4.0-test7
Count buffering overhead as
.IR "bytes/2^tcp_adv_win_scale" ,
if
.I tcp_adv_win_scale
is greater than 0; or
.IR "bytes-bytes/2^(\-tcp_adv_win_scale)" ,
if
.I tcp_adv_win_scale
is less than or equal to zero.

The socket receive buffer space is shared between the
application and kernel.
TCP maintains part of the buffer as
the TCP window, this is the size of the receive window
advertised to the other end.
The rest of the space is used
as the "application" buffer, used to isolate the network
from scheduling and application latencies.
The
.I tcp_adv_win_scale
default value of 2 implies that the space
used for the application buffer is one fourth that of the total.
.TP
.IR tcp_allowed_congestion_control " (String; default: see text; since Linux 2.4.20)"
.\" The following is from 2.6.28-rc4: Documentation/networking/ip-sysctl.txt
Show/set the congestion control algorithm choices available to unprivileged
processes (see the description of the
.B TCP_CONGESTION
socket option).
The items in the list are separated by white space and
terminated by a newline character.
The list is a subset of those listed in
.IR tcp_available_congestion_control .
The default value for this list is "reno" plus the default setting of
.IR tcp_congestion_control .
.TP
.IR tcp_autocorking " (Boolean; default: enabled; since Linux 3.14)"
.\" commit f54b311142a92ea2e42598e347b84e1655caf8e3
.\" Text heavily based on Documentation/networking/ip-sysctl.txt
If this option is enabled, the kernel tries to coalesce small writes
(from consecutive
.BR write (2)
and
.BR sendmsg (2)
calls) as much as possible,
in order to decrease the total number of sent packets.
Coalescing is done if at least one prior packet for the flow
is waiting in Qdisc queues or device transmit queue.
Applications can still use the
.B TCP_CORK
socket option to obtain optimal behavior
when they know how/when to uncork their sockets.
.TP
.IR tcp_available_congestion_control " (String; read-only; since Linux 2.4.20)"
.\" The following is from 2.6.28-rc4: Documentation/networking/ip-sysctl.txt
Show a list of the congestion-control algorithms
that are registered.
The items in the list are separated by white space and
terminated by a newline character.
This list is a limiting set for the list in
.IR tcp_allowed_congestion_control .
More congestion-control algorithms may be available as modules,
but not loaded.
.TP
.IR tcp_app_win  " (integer; default: 31; since Linux 2.4)"
.\" Since 2.4.0-test7
This variable defines how many
bytes of the TCP window are reserved for buffering overhead.

A maximum of (\fIwindow/2^tcp_app_win\fP, mss) bytes in the window
are reserved for the application buffer.
A value of 0 implies that no amount is reserved.
.\"
.\" The following is from 2.6.28-rc4: Documentation/networking/ip-sysctl.txt
.TP
.IR tcp_base_mss " (Integer; default: 512; since Linux 2.6.17)
The initial value of
.I search_low
to be used by the packetization layer Path MTU discovery (MTU probing).
If MTU probing is enabled,
this is the initial MSS used by the connection.
.\"
.\" The following is from 2.6.12: Documentation/networking/ip-sysctl.txt
.TP
.IR tcp_bic " (Boolean; default: disabled; Linux 2.4.27/2.6.6 to 2.6.13)"
Enable BIC TCP congestion control algorithm.
BIC-TCP is a sender-side-only change that ensures a linear RTT
fairness under large windows while offering both scalability and
bounded TCP-friendliness.
The protocol combines two schemes
called additive increase and binary search increase.
When the congestion window is large, additive increase with a large
increment ensures linear RTT fairness as well as good scalability.
Under small congestion windows, binary search
increase provides TCP friendliness.
.\"
.\" The following is from 2.6.12: Documentation/networking/ip-sysctl.txt
.TP
.IR tcp_bic_low_window " (integer; default: 14; Linux 2.4.27/2.6.6 to 2.6.13)"
Set the threshold window (in packets) where BIC TCP starts to
adjust the congestion window.
Below this threshold BIC TCP behaves the same as the default TCP Reno.
.\"
.\" The following is from 2.6.12: Documentation/networking/ip-sysctl.txt
.TP
.IR tcp_bic_fast_convergence " (Boolean; default: enabled; Linux 2.4.27/2.6.6 to 2.6.13)"
Force BIC TCP to more quickly respond to changes in congestion window.
Allows two flows sharing the same connection to converge more rapidly.
.TP
.IR tcp_congestion_control " (String; default: see text; since Linux 2.4.13)"
.\" The following is from 2.6.28-rc4: Documentation/networking/ip-sysctl.txt
Set the default congestion-control algorithm to be used for new connections.
The algorithm "reno" is always available,
but additional choices may be available depending on kernel configuration.
The default value for this file is set as part of kernel configuration.
.TP
.IR tcp_dma_copybreak " (integer; default: 4096; since Linux 2.6.24)"
Lower limit, in bytes, of the size of socket reads that will be
offloaded to a DMA copy engine, if one is present in the system
and the kernel was configured with the
.B CONFIG_NET_DMA
option.
.TP
.IR tcp_dsack " (Boolean; default: enabled; since Linux 2.4)"
.\" Since 2.4.0-test7
Enable RFC\ 2883 TCP Duplicate SACK support.
.TP
.IR tcp_ecn " (Boolean; default: disabled; since Linux 2.4)"
.\" Since 2.4.0-test7
Enable RFC\ 2884 Explicit Congestion Notification.
When enabled, connectivity to some
destinations could be affected due to older, misbehaving
routers along the path causing connections to be dropped.
.TP
.IR tcp_fack " (Boolean; default: enabled; since Linux 2.2)"
.\" Since 2.1.92
Enable TCP Forward Acknowledgement support.
.TP
.IR tcp_fin_timeout " (integer; default: 60; since Linux 2.2)"
.\" Since 2.1.53
This specifies how many seconds to wait for a final FIN packet before the
socket is forcibly closed.
This is strictly a violation of the TCP specification,
but required to prevent denial-of-service attacks.
In Linux 2.2, the default value was 180.
.\"
.\" The following is from 2.6.12: Documentation/networking/ip-sysctl.txt
.TP
.IR tcp_frto " (integer; default: 0; since Linux 2.4.21/2.6)"
.\" Since 2.4.21/2.5.43
Enable F-RTO, an enhanced recovery algorithm for TCP retransmission
timeouts (RTOs).
It is particularly beneficial in wireless environments
where packet loss is typically due to random radio interference
rather than intermediate router congestion.
See RFC 4138 for more details.

This file can have one of the following values:
.RS
.IP 0 3
Disabled.
.IP 1
The basic version F-RTO algorithm is enabled.
.IP 2
Enable SACK-enhanced F-RTO if flow uses SACK.
The basic version can be used also when
SACK is in use though in that case scenario(s) exists where F-RTO
interacts badly with the packet counting of the SACK-enabled TCP flow.
.RE
.IP
Before Linux 2.6.22, this parameter was a Boolean value,
supporting just values 0 and 1 above.
.TP
.IR tcp_frto_response " (integer; default: 0; since Linux 2.6.22)"
When F-RTO has detected that a TCP retransmission timeout was spurious
(i.e, the timeout would have been avoided had TCP set a
longer retransmission timeout),
TCP has several options concerning what to do next.
Possible values are:
.RS
.IP 0 3
Rate halving based; a smooth and conservative response,
results in halved congestion window
.RI ( cwnd )
and slow-start threshold
.RI ( ssthresh )
after one RTT.
.IP 1
Very conservative response; not recommended because even
though being valid, it interacts poorly with the rest of Linux TCP; halves
.I cwnd
and
.I ssthresh
immediately.
.IP 2
Aggressive response; undoes congestion-control measures
that are now known to be unnecessary
(ignoring the possibility of a lost retransmission that would require
TCP to be more cautious);
.I cwnd
and
.I ssthresh
are restored to the values prior to timeout.
.RE
.TP
.IR tcp_keepalive_intvl " (integer; default: 75; since Linux 2.4)"
.\" Since 2.3.18
The number of seconds between TCP keep-alive probes.
.TP
.IR tcp_keepalive_probes " (integer; default: 9; since Linux 2.2)"
.\" Since 2.1.43
The maximum number of TCP keep-alive probes to send
before giving up and killing the connection if
no response is obtained from the other end.
.TP
.IR tcp_keepalive_time " (integer; default: 7200; since Linux 2.2)"
.\" Since 2.1.43
The number of seconds a connection needs to be idle
before TCP begins sending out keep-alive probes.
Keep-alives are sent only when the
.B SO_KEEPALIVE
socket option is enabled.
The default value is 7200 seconds (2 hours).
An idle connection is terminated after
approximately an additional 11 minutes (9 probes an interval
of 75 seconds apart) when keep-alive is enabled.

Note that underlying connection tracking mechanisms and
application timeouts may be much shorter.
.\"
.\" The following is from 2.6.12: Documentation/networking/ip-sysctl.txt
.TP
.IR tcp_low_latency  " (Boolean; default: disabled; since Linux 2.4.21/2.6)"
.\" Since 2.4.21/2.5.60
If enabled, the TCP stack makes decisions that prefer lower
latency as opposed to higher throughput.
It this option is disabled, then higher throughput is preferred.
An example of an application where this default should be
changed would be a Beowulf compute cluster.
.TP
.IR tcp_max_orphans  " (integer; default: see below; since Linux 2.4)"
.\" Since 2.3.41
The maximum number of orphaned (not attached to any user file
handle) TCP sockets allowed in the system.
When this number is exceeded,
the orphaned connection is reset and a warning is printed.
This limit exists only to prevent simple denial-of-service attacks.
Lowering this limit is not recommended.
Network conditions might require you to increase the number of
orphans allowed, but note that each orphan can eat up to ~64K
of unswappable memory.
The default initial value is set equal to the kernel parameter NR_FILE.
This initial default is adjusted depending on the memory in the system.
.TP
.IR tcp_max_syn_backlog " (integer; default: see below; since Linux 2.2)"
.\" Since 2.1.53
The maximum number of queued connection requests which have
still not received an acknowledgement from the connecting client.
If this number is exceeded, the kernel will begin
dropping requests.
The default value of 256 is increased to
1024 when the memory present in the system is adequate or
greater (>= 128Mb), and reduced to 128 for those systems with
very low memory (<= 32Mb).

Prior to Linux 2.6.20,
.\" commit 72a3effaf633bcae9034b7e176bdbd78d64a71db
it was recommended that if this needed to be increased above 1024,
the size of the SYNACK hash table
.RB ( TCP_SYNQ_HSIZE )
in
.I include/net/tcp.h
should be modified to keep

    TCP_SYNQ_HSIZE * 16 <= tcp_max_syn_backlog

and the kernel should be
recompiled.
In Linux 2.6.20, the fixed sized
.B TCP_SYNQ_HSIZE
was removed in favor of dynamic sizing.
.TP
.IR tcp_max_tw_buckets " (integer; default: see below; since Linux 2.4)"
.\" Since 2.3.41
The maximum number of sockets in TIME_WAIT state allowed in
the system.
This limit exists only to prevent simple denial-of-service attacks.
The default value of NR_FILE*2 is adjusted
depending on the memory in the system.
If this number is
exceeded, the socket is closed and a warning is printed.
.TP
.IR tcp_moderate_rcvbuf " (Boolean; default: enabled; since Linux 2.4.17/2.6.7)"
.\" The following is from 2.6.28-rc4: Documentation/networking/ip-sysctl.txt
If enabled, TCP performs receive buffer auto-tuning,
attempting to automatically size the buffer (no greater than
.IR tcp_rmem[2] )
to match the size required by the path for full throughput.
.TP
.IR tcp_mem " (since Linux 2.4)
.\" Since 2.4.0-test7
This is a vector of 3 integers: [low, pressure, high].
These bounds, measured in units of the system page size,
are used by TCP to track its memory usage.
The defaults are calculated at boot time from the amount of
available memory.
(TCP can only use
.I "low memory"
for this, which is limited to around 900 megabytes on 32-bit systems.
64-bit systems do not suffer this limitation.)
.RS
.TP 10
.I low
TCP doesn't regulate its memory allocation when the number
of pages it has allocated globally is below this number.
.TP
.I pressure
When the amount of memory allocated by TCP
exceeds this number of pages, TCP moderates its memory consumption.
This memory pressure state is exited
once the number of pages allocated falls below
the
.I low
mark.
.TP
.I high
The maximum number of pages, globally, that TCP will allocate.
This value overrides any other limits imposed by the kernel.
.RE
.TP
.IR tcp_mtu_probing " (integer; default: 0; since Linux 2.6.17)"
.\" The following is from 2.6.28-rc4: Documentation/networking/ip-sysctl.txt
This parameter controls TCP Packetization-Layer Path MTU Discovery.
The following values may be assigned to the file:
.RS
.IP 0 3
Disabled
.IP 1
Disabled by default, enabled when an ICMP black hole detected
.IP 2
Always enabled, use initial MSS of
.IR tcp_base_mss .
.RE
.TP
.IR tcp_no_metrics_save " (Boolean; default: disabled; since Linux 2.6.6)"
.\" The following is from 2.6.28-rc4: Documentation/networking/ip-sysctl.txt
By default, TCP saves various connection metrics in the route cache
when the connection closes, so that connections established in the
near future can use these to set initial conditions.
Usually, this increases overall performance,
but it may sometimes cause performance degradation.
If
.I tcp_no_metrics_save
is enabled, TCP will not cache metrics on closing connections.
.TP
.IR tcp_orphan_retries " (integer; default: 8; since Linux 2.4)"
.\" Since 2.3.41
The maximum number of attempts made to probe the other
end of a connection which has been closed by our end.
.TP
.IR tcp_reordering " (integer; default: 3; since Linux 2.4)"
.\" Since 2.4.0-test7
The maximum a packet can be reordered in a TCP packet stream
without TCP assuming packet loss and going into slow start.
It is not advisable to change this number.
This is a packet reordering detection metric designed to
minimize unnecessary back off and retransmits provoked by
reordering of packets on a connection.
.TP
.IR tcp_retrans_collapse " (Boolean; default: enabled; since Linux 2.2)"
.\" Since 2.1.96
Try to send full-sized packets during retransmit.
.TP
.IR tcp_retries1 " (integer; default: 3; since Linux 2.2)"
.\" Since 2.1.43
The number of times TCP will attempt to retransmit a
packet on an established connection normally,
without the extra effort of getting the network layers involved.
Once we exceed this number of
retransmits, we first have the network layer
update the route if possible before each new retransmit.
The default is the RFC specified minimum of 3.
.TP
.IR tcp_retries2 " (integer; default: 15; since Linux 2.2)"
.\" Since 2.1.43
The maximum number of times a TCP packet is retransmitted
in established state before giving up.
The default value is 15, which corresponds to a duration of
approximately between 13 to 30 minutes, depending
on the retransmission timeout.
The RFC\ 1122 specified
minimum limit of 100 seconds is typically deemed too short.
.TP
.IR tcp_rfc1337 " (Boolean; default: disabled; since Linux 2.2)"
.\" Since 2.1.90
Enable TCP behavior conformant with RFC\ 1337.
When disabled,
if a RST is received in TIME_WAIT state, we close
the socket immediately without waiting for the end
of the TIME_WAIT period.
.TP
.IR tcp_rmem " (since Linux 2.4)"
.\" Since 2.4.0-test7
This is a vector of 3 integers: [min, default, max].
These parameters are used by TCP to regulate receive buffer sizes.
TCP dynamically adjusts the size of the
receive buffer from the defaults listed below, in the range
of these values, depending on memory available in the system.
.RS
.TP 10
.I min
minimum size of the receive buffer used by each TCP socket.
The default value is the system page size.
(On Linux 2.4, the default value is 4K, lowered to
.B PAGE_SIZE
bytes in low-memory systems.)
This value
is used to ensure that in memory pressure mode,
allocations below this size will still succeed.
This is not
used to bound the size of the receive buffer declared
using
.B SO_RCVBUF
on a socket.
.TP
.I default
the default size of the receive buffer for a TCP socket.
This value overwrites the initial default buffer size from
the generic global
.I net.core.rmem_default
defined for all protocols.
The default value is 87380 bytes.
(On Linux 2.4, this will be lowered to 43689 in low-memory systems.)
If larger receive buffer sizes are desired, this value should
be increased (to affect all sockets).
To employ large TCP windows, the
.I net.ipv4.tcp_window_scaling
must be enabled (default).
.TP
.I max
the maximum size of the receive buffer used by each TCP socket.
This value does not override the global
.IR net.core.rmem_max .
This is not used to limit the size of the receive buffer declared using
.B SO_RCVBUF
on a socket.
The default value is calculated using the formula

    max(87380, min(4MB, \fItcp_mem\fP[1]*PAGE_SIZE/128))

(On Linux 2.4, the default is 87380*2 bytes,
lowered to 87380 in low-memory systems).
.RE
.TP
.IR tcp_sack " (Boolean; default: enabled; since Linux 2.2)"
.\" Since 2.1.36
Enable RFC\ 2018 TCP Selective Acknowledgements.
.TP
.IR tcp_slow_start_after_idle " (Boolean; default: enabled; since Linux 2.6.18)"
.\" The following is from 2.6.28-rc4: Documentation/networking/ip-sysctl.txt
If enabled, provide RFC 2861 behavior and time out the congestion
window after an idle period.
An idle period is defined as the current RTO (retransmission timeout).
If disabled, the congestion window will not
be timed out after an idle period.
.TP
.IR tcp_stdurg " (Boolean; default: disabled; since Linux 2.2)"
.\" Since 2.1.44
If this option is enabled, then use the RFC\ 1122 interpretation
of the TCP urgent-pointer field.
.\" RFC 793 was ambiguous in its specification of the meaning of the
.\" urgent pointer.  RFC 1122 (and RFC 961) fixed on a particular
.\" resolution of this ambiguity (unfortunately the "wrong" one).
According to this interpretation, the urgent pointer points
to the last byte of urgent data.
If this option is disabled, then use the BSD-compatible interpretation of
the urgent pointer:
the urgent pointer points to the first byte after the urgent data.
Enabling this option may lead to interoperability problems.
.TP
.IR tcp_syn_retries  " (integer; default: 5; since Linux 2.2)"
.\" Since 2.1.38
The maximum number of times initial SYNs for an active TCP
connection attempt will be retransmitted.
This value should not be higher than 255.
The default value is 5, which corresponds to approximately 180 seconds.
.TP
.IR tcp_synack_retries " (integer; default: 5; since Linux 2.2)"
.\" Since 2.1.38
The maximum number of times a SYN/ACK segment
for a passive TCP connection will be retransmitted.
This number should not be higher than 255.
.TP
.IR tcp_syncookies " (Boolean; since Linux 2.2)"
.\" Since 2.1.43
Enable TCP syncookies.
The kernel must be compiled with
.BR CONFIG_SYN_COOKIES .
Send out syncookies when the syn backlog queue of a socket overflows.
The syncookies feature attempts to protect a
socket from a SYN flood attack.
This should be used as a last resort, if at all.
This is a violation of the TCP protocol,
and conflicts with other areas of TCP such as TCP extensions.
It can cause problems for clients and relays.
It is not recommended as a tuning mechanism for heavily
loaded servers to help with overloaded or misconfigured conditions.
For recommended alternatives see
.IR tcp_max_syn_backlog ,
.IR tcp_synack_retries ,
and
.IR tcp_abort_on_overflow .
.TP
.IR tcp_timestamps " (Boolean; default: enabled; since Linux 2.2)"
.\" Since 2.1.36
Enable RFC\ 1323 TCP timestamps.
.TP
.IR tcp_tso_win_divisor " (integer; default: 3; since Linux 2.6.9)"
This parameter controls what percentage of the congestion window
can be consumed by a single TCP Segmentation Offload (TSO) frame.
The setting of this parameter is a tradeoff between burstiness and
building larger TSO frames.
.TP
.IR tcp_tw_recycle " (Boolean; default: disabled; since Linux 2.4)"
.\" Since 2.3.15
Enable fast recycling of TIME_WAIT sockets.
Enabling this option is
not recommended for devices communicating with the general Internet
or using NAT (Network Address Translation).
Since some NAT gateways
pass through IP timestamp values, one IP can appear to have
non-increasing timestamps.
See RFC 1323 (PAWS), RFC 6191.
.\"
.\" The following is from 2.6.12: Documentation/networking/ip-sysctl.txt
.TP
.IR tcp_tw_reuse " (Boolean; default: disabled; since Linux 2.4.19/2.6)"
.\" Since 2.4.19/2.5.43
Allow to reuse TIME_WAIT sockets for new connections when it is
safe from protocol viewpoint.
It should not be changed without advice/request of technical experts.
.\"
.\" The following is from 2.6.12: Documentation/networking/ip-sysctl.txt
.TP
.IR tcp_vegas_cong_avoid  " (Boolean; default: disabled; Linux 2.2 to 2.6.13)"
.\" Since 2.1.8; removed in 2.6.13
Enable TCP Vegas congestion avoidance algorithm.
TCP Vegas is a sender-side-only change to TCP that anticipates
the onset of congestion by estimating the bandwidth.
TCP Vegas adjusts the sending rate by modifying the congestion window.
TCP Vegas should provide less packet loss, but it is
not as aggressive as TCP Reno.
.\"
.\" The following is from 2.6.12: Documentation/networking/ip-sysctl.txt
.TP
.IR tcp_westwood " (Boolean; default: disabled; Linux 2.4.26/2.6.3 to 2.6.13)"
Enable TCP Westwood+ congestion control algorithm.
TCP Westwood+ is a sender-side-only modification of the TCP Reno
protocol stack that optimizes the performance of TCP congestion control.
It is based on end-to-end bandwidth estimation to set
congestion window and slow start threshold after a congestion episode.
Using this estimation, TCP Westwood+ adaptively sets a
slow start threshold and a congestion window which takes into
account the bandwidth used at the time congestion is experienced.
TCP Westwood+ significantly increases fairness with respect to
TCP Reno in wired networks and throughput over wireless links.
.TP
.IR tcp_window_scaling " (Boolean; default: enabled; since Linux 2.2)"
.\" Since 2.1.36
Enable RFC\ 1323 TCP window scaling.
This feature allows the use of a large window
(> 64K) on a TCP connection, should the other end support it.
Normally, the 16 bit window length field in the TCP header
limits the window size to less than 64K bytes.
If larger windows are desired, applications can increase the size of
their socket buffers and the window scaling option will be employed.
If
.I tcp_window_scaling
is disabled, TCP will not negotiate the use of window
scaling with the other end during connection setup.
.TP
.IR tcp_wmem " (since Linux 2.4)"
.\" Since 2.4.0-test7
This is a vector of 3 integers: [min, default, max].
These parameters are used by TCP to regulate send buffer sizes.
TCP dynamically adjusts the size of the send buffer from the
default values listed below, in the range of these values,
depending on memory available.
.RS
.TP 10
.I min
Minimum size of the send buffer used by each TCP socket.
The default value is the system page size.
(On Linux 2.4, the default value is 4K bytes.)
This value is used to ensure that in memory pressure mode,
allocations below this size will still succeed.
This is not used to bound the size of the send buffer declared using
.B SO_SNDBUF
on a socket.
.TP
.I default
The default size of the send buffer for a TCP socket.
This value overwrites the initial default buffer size from
the generic global
.I /proc/sys/net/core/wmem_default
defined for all protocols.
The default value is 16K bytes.
.\" True in Linux 2.4 and 2.6
If larger send buffer sizes are desired, this value
should be increased (to affect all sockets).
To employ large TCP windows, the
.I /proc/sys/net/ipv4/tcp_window_scaling
must be set to a nonzero value (default).
.TP
.I max
The maximum size of the send buffer used by each TCP socket.
This value does not override the value in
.IR /proc/sys/net/core/wmem_max .
This is not used to limit the size of the send buffer declared using
.B SO_SNDBUF
on a socket.
The default value is calculated using the formula

    max(65536, min(4MB, \fItcp_mem\fP[1]*PAGE_SIZE/128))

(On Linux 2.4, the default value is 128K bytes,
lowered 64K depending on low-memory systems.)
.RE
.TP
.IR tcp_workaround_signed_windows " (Boolean; default: disabled; since Linux 2.6.26)"
If enabled, assume that no receipt of a window-scaling option means that the
remote TCP is broken and treats the window as a signed quantity.
If disabled, assume that the remote TCP is not broken even if we do
not receive a window scaling option from it.
.SS Socket options
To set or get a TCP socket option, call
.BR getsockopt (2)
to read or
.BR setsockopt (2)
to write the option with the option level argument set to
.BR IPPROTO_TCP .
Unless otherwise noted,
.I optval
is a pointer to an
.IR int .
.\" or SOL_TCP on Linux
In addition,
most
.B IPPROTO_IP
socket options are valid on TCP sockets.
For more information see
.BR ip (7).
.TP
.BR TCP_CONGESTION " (since Linux 2.6.13)"
.\"	    commit 5f8ef48d240963093451bcf83df89f1a1364f51d
.\"	    Author: Stephen Hemminger <shemminger@osdl.org>
The argument for this option is a string.
This option allows the caller to set the TCP congestion control
algorithm to be used, on a per-socket basis.
Unprivileged processes are restricted to choosing one of the algorithms in
.IR tcp_allowed_congestion_control
(described above).
Privileged processes
.RB ( CAP_NET_ADMIN )
can choose from any of the available congestion-control algorithms
(see the description of
.IR tcp_available_congestion_control
above).
.TP
.BR TCP_CORK " (since Linux 2.2)"
.\" precisely: since 2.1.127
If set, don't send out partial frames.
All queued partial frames are sent when the option is cleared again.
This is useful for prepending headers before calling
.BR sendfile (2),
or for throughput optimization.
As currently implemented, there is a 200 millisecond ceiling on the time
for which output is corked by
.BR TCP_CORK .
If this ceiling is reached, then queued data is automatically transmitted.
This option can be combined with
.B TCP_NODELAY
only since Linux 2.5.71.
This option should not be used in code intended to be portable.
.TP
.BR TCP_DEFER_ACCEPT " (since Linux 2.4)"
.\" Precisely: since 2.3.38
.\" Useful references:
.\" http://www.techrepublic.com/article/take-advantage-of-tcp-ip-options-to-optimize-data-transmission/
.\" http://unix.stackexchange.com/questions/94104/real-world-use-of-tcp-defer-accept
Allow a listener to be awakened only when data arrives on the socket.
Takes an integer value (seconds), this can
bound the maximum number of attempts TCP will make to
complete the connection.
This option should not be used in code intended to be portable.
.TP
.BR TCP_INFO " (since Linux 2.4)"
Used to collect information about this socket.
The kernel returns a \fIstruct tcp_info\fP as defined in the file
.IR /usr/include/linux/tcp.h .
This option should not be used in code intended to be portable.
.TP
.BR TCP_KEEPCNT " (since Linux 2.4)"
.\" Precisely: since 2.3.18
The maximum number of keepalive probes TCP should send
before dropping the connection.
This option should not be
used in code intended to be portable.
.TP
.BR TCP_KEEPIDLE " (since Linux 2.4)"
.\" Precisely: since 2.3.18
The time (in seconds) the connection needs to remain idle
before TCP starts sending keepalive probes, if the socket
option
.B SO_KEEPALIVE
has been set on this socket.
This option should not be used in code intended to be portable.
.TP
.BR TCP_KEEPINTVL " (since Linux 2.4)"
.\" Precisely: since 2.3.18
The time (in seconds) between individual keepalive probes.
This option should not be used in code intended to be portable.
.TP
.BR TCP_LINGER2 " (since Linux 2.4)"
.\" Precisely: since 2.3.41
The lifetime of orphaned FIN_WAIT2 state sockets.
This option can be used to override the system-wide setting in the file
.I /proc/sys/net/ipv4/tcp_fin_timeout
for this socket.
This is not to be confused with the
.BR socket (7)
level option
.BR SO_LINGER .
This option should not be used in code intended to be portable.
.TP
.B TCP_MAXSEG
.\" Present in Linux 1.0
The maximum segment size for outgoing TCP packets.
In Linux 2.2 and earlier, and in Linux 2.6.28 and later,
if this option is set before connection establishment, it also
changes the MSS value announced to the other end in the initial packet.
Values greater than the (eventual) interface MTU have no effect.
TCP will also impose
its minimum and maximum bounds over the value provided.
.TP
.B TCP_NODELAY
.\" Present in Linux 1.0
If set, disable the Nagle algorithm.
This means that segments
are always sent as soon as possible, even if there is only a
small amount of data.
When not set, data is buffered until there
is a sufficient amount to send out, thereby avoiding the
frequent sending of small packets, which results in poor
utilization of the network.
This option is overridden by
.BR TCP_CORK ;
however, setting this option forces an explicit flush of
pending output, even if
.B TCP_CORK
is currently set.
.TP
.BR TCP_QUICKACK " (since Linux 2.4.4)"
Enable quickack mode if set or disable quickack
mode if cleared.
In quickack mode, acks are sent
immediately, rather than delayed if needed in accordance
to normal TCP operation.
This flag is not permanent,
it only enables a switch to or from quickack mode.
Subsequent operation of the TCP protocol will
once again enter/leave quickack mode depending on
internal protocol processing and factors such as
delayed ack timeouts occurring and data transfer.
This option should not be used in code intended to be
portable.
.TP
.BR TCP_SYNCNT " (since Linux 2.4)"
.\" Precisely: since 2.3.18
Set the number of SYN retransmits that TCP should send before
aborting the attempt to connect.
It cannot exceed 255.
This option should not be used in code intended to be portable.
.TP
.BR TCP_USER_TIMEOUT " (since Linux 2.6.37)"
.\"	    commit dca43c75e7e545694a9dd6288553f55c53e2a3a3
.\"	    Author: Jerry Chu <hkchu@google.com>
.\" The following text taken nearly verbatim from Jerry Chu's (excellent)
.\" commit message.
.\"
This option takes an
.IR "unsigned int"
as an argument.
When the value is greater than 0,
it specifies the maximum amount of time in milliseconds that transmitted
data may remain unacknowledged before TCP will forcibly close the
corresponding connection and return
.B ETIMEDOUT
to the application.
If the option value is specified as 0,
TCP will to use the system default.

Increasing user timeouts allows a TCP connection to survive extended
periods without end-to-end connectivity.
Decreasing user timeouts
allows applications to "fail fast", if so desired.
Otherwise, failure may take up to 20 minutes with
the current system defaults in a normal WAN environment.

This option can be set during any state of a TCP connection,
but is effective only during the synchronized states of a connection
(ESTABLISHED, FIN-WAIT-1, FIN-WAIT-2, CLOSE-WAIT, CLOSING, and LAST-ACK).
Moreover, when used with the TCP keepalive
.RB ( SO_KEEPALIVE )
option,
.B TCP_USER_TIMEOUT
will override keepalive to determine when to close a
connection due to keepalive failure.

The option has no effect on when TCP retransmits a packet,
nor when a keepalive probe is sent.

This option, like many others, will be inherited by the socket returned by
.BR accept (2),
if it was set on the listening socket.

Further details on the user timeout feature can be found in
RFC\ 793 and RFC\ 5482 ("TCP User Timeout Option").
.TP
.BR TCP_WINDOW_CLAMP " (since Linux 2.4)"
.\" Precisely: since 2.3.41
Bound the size of the advertised window to this value.
The kernel imposes a minimum size of SOCK_MIN_RCVBUF/2.
This option should not be used in code intended to be
portable.
.SS Sockets API
TCP provides limited support for out-of-band data,
in the form of (a single byte of) urgent data.
In Linux this means if the other end sends newer out-of-band
data the older urgent data is inserted as normal data into
the stream (even when
.B SO_OOBINLINE
is not set).
This differs from BSD-based stacks.
.PP
Linux uses the BSD compatible interpretation of the urgent
pointer field by default.
This violates RFC\ 1122, but is
required for interoperability with other stacks.
It can be changed via
.IR /proc/sys/net/ipv4/tcp_stdurg .

It is possible to peek at out-of-band data using the
.BR recv (2)
.B MSG_PEEK
flag.

Since version 2.4, Linux supports the use of
.B MSG_TRUNC
in the
.I flags
argument of
.BR recv (2)
(and
.BR recvmsg (2)).
This flag causes the received bytes of data to be discarded,
rather than passed back in a caller-supplied buffer.
Since Linux 2.4.4,
.BR MSG_TRUNC
also has this effect when used in conjunction with
.BR MSG_OOB
to receive out-of-band data.
.SS Ioctls
The following
.BR ioctl (2)
calls return information in
.IR value .
The correct syntax is:
.PP
.RS
.nf
.BI int " value";
.IB error " = ioctl(" tcp_socket ", " ioctl_type ", &" value ");"
.fi
.RE
.PP
.I ioctl_type
is one of the following:
.TP
.B SIOCINQ
Returns the amount of queued unread data in the receive buffer.
The socket must not be in LISTEN state, otherwise an error
.RB ( EINVAL )
is returned.
.B SIOCINQ
is defined in
.IR <linux/sockios.h> .
.\" FIXME http://sources.redhat.com/bugzilla/show_bug.cgi?id=12002,
.\" filed 2010-09-10, may cause SIOCINQ to be defined in glibc headers
Alternatively,
you can use the synonymous
.BR FIONREAD ,
defined in
.IR <sys/ioctl.h> .
.TP
.B SIOCATMARK
Returns true (i.e.,
.I value
is nonzero) if the inbound data stream is at the urgent mark.

If the
.B SO_OOBINLINE
socket option is set, and
.B SIOCATMARK
returns true, then the
next read from the socket will return the urgent data.
If the
.B SO_OOBINLINE
socket option is not set, and
.B SIOCATMARK
returns true, then the
next read from the socket will return the bytes following
the urgent data (to actually read the urgent data requires the
.B recv(MSG_OOB)
flag).

Note that a read never reads across the urgent mark.
If an application is informed of the presence of urgent data via
.BR select (2)
(using the
.I exceptfds
argument) or through delivery of a
.B SIGURG
signal,
then it can advance up to the mark using a loop which repeatedly tests
.B SIOCATMARK
and performs a read (requesting any number of bytes) as long as
.B SIOCATMARK
returns false.
.TP
.B SIOCOUTQ
Returns the amount of unsent data in the socket send queue.
The socket must not be in LISTEN state, otherwise an error
.RB ( EINVAL )
is returned.
.B SIOCOUTQ
is defined in
.IR <linux/sockios.h> .
.\" FIXME . http://sources.redhat.com/bugzilla/show_bug.cgi?id=12002,
.\" filed 2010-09-10, may cause SIOCOUTQ to be defined in glibc headers
Alternatively,
you can use the synonymous
.BR TIOCOUTQ ,
defined in
.IR <sys/ioctl.h> .
.SS Error handling
When a network error occurs, TCP tries to resend the packet.
If it doesn't succeed after some time, either
.B ETIMEDOUT
or the last received error on this connection is reported.
.PP
Some applications require a quicker error notification.
This can be enabled with the
.B IPPROTO_IP
level
.B IP_RECVERR
socket option.
When this option is enabled, all incoming
errors are immediately passed to the user program.
Use this option with care \(em it makes TCP less tolerant to routing
changes and other normal network conditions.
.SH ERRORS
.TP
.B EAFNOTSUPPORT
Passed socket address type in
.I sin_family
was not
.BR AF_INET .
.TP
.B EPIPE
The other end closed the socket unexpectedly or a read is
executed on a shut down socket.
.TP
.B ETIMEDOUT
The other end didn't acknowledge retransmitted data after some time.
.PP
Any errors defined for
.BR ip (7)
or the generic socket layer may also be returned for TCP.
.SH VERSIONS
Support for Explicit Congestion Notification, zero-copy
.BR sendfile (2),
reordering support and some SACK extensions
(DSACK) were introduced in 2.4.
Support for forward acknowledgement (FACK), TIME_WAIT recycling,
and per-connection keepalive socket options were introduced in 2.3.
.SH BUGS
Not all errors are documented.
.br
IPv6 is not described.
.\" Only a single Linux kernel version is described
.\" Info for 2.2 was lost. Should be added again,
.\" or put into a separate page.
.\" .SH AUTHORS
.\" This man page was originally written by Andi Kleen.
.\" It was updated for 2.4 by Nivedita Singhvi with input from
.\" Alexey Kuznetsov's Documentation/networking/ip-sysctl.txt
.\" document.
.SH SEE ALSO
.BR accept (2),
.BR bind (2),
.BR connect (2),
.BR getsockopt (2),
.BR listen (2),
.BR recvmsg (2),
.BR sendfile (2),
.BR sendmsg (2),
.BR socket (2),
.BR ip (7),
.BR socket (7)
.sp
RFC\ 793 for the TCP specification.
.br
RFC\ 1122 for the TCP requirements and a description of the Nagle algorithm.
.br
RFC\ 1323 for TCP timestamp and window scaling options.
.br
RFC\ 1337 for a description of TIME_WAIT assassination hazards.
.br
RFC\ 3168 for a description of Explicit Congestion Notification.
.br
RFC\ 2581 for TCP congestion control algorithms.
.br
RFC\ 2018 and RFC\ 2883 for SACK and extensions to SACK.
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2006 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" 28 Dec 2006 - Initial Creation
.\"
.TH TERMIO 7 2013-02-12 "Linux" "Linux Programmer's Manual"
.SH NAME
termio \- System V terminal driver interface
.SH DESCRIPTION
.B termio
is the name of the old System V terminal driver interface.
This interface defined a
.I termio
structure used to store terminal settings, and a range of
.BR ioctl (2)
operations to get and set terminal attributes.

The
.B termio
interface is now obsolete: POSIX.1-1990 standardized a modified
version of this interface, under the name
.BR termios .
The POSIX.1 data structure differs slightly from the
System V version, and POSIX.1 defined a suite of functions
to replace the various
.BR ioctl (2)
operations that existed in System V.
(This was done because
.BR ioctl (2)
was unstandardized, and its variadic third argument
does not allow argument type checking.)

If you're looking for page called "termio", then you can probably
find most of the information that you seek in either
.BR termios (3)
or
.BR tty_ioctl (4).
.SH SEE ALSO
.BR reset (1),
.BR setterm (1),
.BR stty (1),
.BR termios (3),
.BR tty (4),
.BR tty_ioctl (4)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2006 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" 2008-06-24, mtk: added some details about where jiffies come into
.\"     play; added section on high-resolution timers.
.\"
.TH TIME 7 2012-10-28 "Linux" "Linux Programmer's Manual"
.SH NAME
time \- overview of time and timers
.SH DESCRIPTION
.SS Real time and process time
.I "Real time"
is defined as time measured from some fixed point,
either from a standard point in the past
(see the description of the Epoch and calendar time below),
or from some point (e.g., the start) in the life of a process
.RI ( "elapsed time" ).

.I "Process time"
is defined as the amount of CPU time used by a process.
This is sometimes divided into
.I user
and
.I system
components.
User CPU time is the time spent executing code in user mode.
System CPU time is the time spent by the kernel executing
in system mode on behalf of the process (e.g., executing system calls).
The
.BR time (1)
command can be used to determine the amount of CPU time consumed
during the execution of a program.
A program can determine the amount of CPU time it has consumed using
.BR times (2),
.BR getrusage (2),
or
.BR clock (3).
.SS The hardware clock
Most computers have a (battery-powered) hardware clock which the kernel
reads at boot time in order to initialize the software clock.
For further details, see
.BR rtc (4)
and
.BR hwclock (8).
.SS The software clock, HZ, and jiffies
The accuracy of various system calls that set timeouts,
(e.g.,
.BR select (2),
.BR sigtimedwait (2))
.\" semtimedop(), mq_timedwait(), io_getevents(), poll() are the same
.\" futexes and thus sem_timedwait() seem to use high-res timers.
and measure CPU time (e.g.,
.BR getrusage (2))
is limited by the resolution of the
.IR "software clock" ,
a clock maintained by the kernel which measures time in
.IR jiffies .
The size of a jiffy is determined by the value of the kernel constant
.IR HZ .

The value of
.I HZ
varies across kernel versions and hardware platforms.
On i386 the situation is as follows:
on kernels up to and including 2.4.x, HZ was 100,
giving a jiffy value of 0.01 seconds;
starting with 2.6.0, HZ was raised to 1000, giving a jiffy of
0.001 seconds.
Since kernel 2.6.13, the HZ value is a kernel
configuration parameter and can be 100, 250 (the default) or 1000,
yielding a jiffies value of, respectively, 0.01, 0.004, or 0.001 seconds.
Since kernel 2.6.20, a further frequency is available:
300, a number that divides evenly for the common video
frame rates (PAL, 25 HZ; NTSC, 30 HZ).

The
.BR times (2)
system call is a special case.
It reports times with a granularity defined by the kernel constant
.IR USER_HZ .
User-space applications can determine the value of this constant using
.IR sysconf(_SC_CLK_TCK) .
.\" glibc gets this info with a little help from the ELF loader;
.\" see glibc elf/dl-support.c and kernel fs/binfmt_elf.c.
.\"
.SS High-resolution timers
Before Linux 2.6.21, the accuracy of timer and sleep system calls
(see below) was also limited by the size of the jiffy.

Since Linux 2.6.21, Linux supports high-resolution timers (HRTs),
optionally configurable via
.BR CONFIG_HIGH_RES_TIMERS .
On a system that supports HRTs, the accuracy of sleep and timer
system calls is no longer constrained by the jiffy,
but instead can be as accurate as the hardware allows
(microsecond accuracy is typical of modern hardware).
You can determine whether high-resolution timers are supported by
checking the resolution returned by a call to
.BR clock_getres (2)
or looking at the "resolution" entries in
.IR /proc/timer_list .

HRTs are not supported on all hardware architectures.
(Support is provided on x86, arm, and powerpc, among others.)
.SS The Epoch
UNIX systems represent time in seconds since the
.IR Epoch ,
1970-01-01 00:00:00 +0000 (UTC).

A program can determine the
.I "calendar time"
using
.BR gettimeofday (2),
which returns time (in seconds and microseconds) that have
elapsed since the Epoch;
.BR time (2)
provides similar information, but only with accuracy to the
nearest second.
The system time can be changed using
.BR settimeofday (2).
.SS Broken-down time
Certain library functions use a structure of
type
.I tm
to represent
.IR "broken-down time" ,
which stores time value separated out into distinct components
(year, month, day, hour, minute, second, etc.).
This structure is described in
.BR ctime (3),
which also describes functions that convert between calendar time and
broken-down time.
Functions for converting between broken-down time and printable
string representations of the time are described in
.BR ctime (3),
.BR strftime (3),
and
.BR strptime (3).
.SS Sleeping and setting timers
Various system calls and functions allow a program to sleep
(suspend execution) for a specified period of time; see
.BR nanosleep (2),
.BR clock_nanosleep (2),
and
.BR sleep (3).

Various system calls allow a process to set a timer that expires
at some point in the future, and optionally at repeated intervals;
see
.BR alarm (2),
.BR getitimer (2),
.BR timerfd_create (2),
and
.BR timer_create (2).
.SS Timer slack
Since Linux 2.6.28, it is possible to control the "timer slack"
value for a thread.
The timer slack is the length of time by
which the kernel may delay the wake-up of certain
system calls that block with a timeout.
Permitting this delay allows the kernel to coalesce wake-up events,
thus possibly reducing the number of system wake-ups and saving power.
For more details, see the description of
.B PR_SET_TIMERSLACK
in
.BR prctl (2).
.SH SEE ALSO
.ad l
.nh
.BR date (1),
.BR time (1),
.BR adjtimex (2),
.BR alarm (2),
.BR clock_gettime (2),
.BR clock_nanosleep (2),
.BR getitimer (2),
.BR getrlimit (2),
.BR getrusage (2),
.BR gettimeofday (2),
.BR nanosleep (2),
.BR stat (2),
.BR time (2),
.BR timer_create (2),
.BR timerfd_create (2),
.BR times (2),
.BR utime (2),
.BR adjtime (3),
.BR clock (3),
.BR clock_getcpuclockid (3),
.BR ctime (3),
.BR pthread_getcpuclockid (3),
.BR sleep (3),
.BR strftime (3),
.BR strptime (3),
.BR timeradd (3),
.BR usleep (3),
.BR rtc (4),
.BR hwclock (8)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" This man page is Copyright (C) 1999 Andi Kleen <ak@muc.de>.
.\"
.\" %%%LICENSE_START(VERBATIM_ONE_PARA)
.\" Permission is granted to distribute possibly modified copies
.\" of this page provided the header is included verbatim,
.\" and in case of nontrivial modification author and date
.\" of the modification is added to the header.
.\" %%%LICENSE_END
.\"
.\" $Id: udp.7,v 1.7 2000/01/22 01:55:05 freitag Exp $
.\"
.TH UDP  7 2013-07-31 "Linux" "Linux Programmer's Manual"
.SH NAME
udp \- User Datagram Protocol for IPv4
.SH SYNOPSIS
.B #include <sys/socket.h>
.br
.B #include <netinet/in.h>
.br
.B #include <netinet/udp.h>
.sp
.B udp_socket = socket(AF_INET, SOCK_DGRAM, 0);
.SH DESCRIPTION
This is an implementation of the User Datagram Protocol
described in RFC\ 768.
It implements a connectionless, unreliable datagram packet service.
Packets may be reordered or duplicated before they arrive.
UDP generates and checks checksums to catch transmission errors.

When a UDP socket is created,
its local and remote addresses are unspecified.
Datagrams can be sent immediately using
.BR sendto (2)
or
.BR sendmsg (2)
with a valid destination address as an argument.
When
.BR connect (2)
is called on the socket, the default destination address is set and
datagrams can now be sent using
.BR send (2)
or
.BR write (2)
without specifying a destination address.
It is still possible to send to other destinations by passing an
address to
.BR sendto (2)
or
.BR sendmsg (2).
In order to receive packets, the socket can be bound to a local
address first by using
.BR bind (2).
Otherwise, the socket layer will automatically assign
a free local port out of the range defined by
.I /proc/sys/net/ipv4/ip_local_port_range
and bind the socket to
.BR INADDR_ANY .

All receive operations return only one packet.
When the packet is smaller than the passed buffer, only that much
data is returned; when it is bigger, the packet is truncated and the
.B MSG_TRUNC
flag is set.
.B MSG_WAITALL
is not supported.

IP options may be sent or received using the socket options described in
.BR ip (7).
They are processed by the kernel only when the appropriate
.I /proc
parameter
is enabled (but still passed to the user even when it is turned off).
See
.BR ip (7).

When the
.B MSG_DONTROUTE
flag is set on sending, the destination address must refer to a local
interface address and the packet is sent only to that interface.

By default, Linux UDP does path MTU (Maximum Transmission Unit) discovery.
This means the kernel
will keep track of the MTU to a specific target IP address and return
.B EMSGSIZE
when a UDP packet write exceeds it.
When this happens, the application should decrease the packet size.
Path MTU discovery can be also turned off using the
.B IP_MTU_DISCOVER
socket option or the
.I /proc/sys/net/ipv4/ip_no_pmtu_disc
file; see
.BR ip (7)
for details.
When turned off, UDP will fragment outgoing UDP packets
that exceed the interface MTU.
However, disabling it is not recommended
for performance and reliability reasons.
.SS Address format
UDP uses the IPv4
.I sockaddr_in
address format described in
.BR ip (7).
.SS Error handling
All fatal errors will be passed to the user as an error return even
when the socket is not connected.
This includes asynchronous errors
received from the network.
You may get an error for an earlier packet
that was sent on the same socket.
This behavior differs from many other BSD socket implementations
which don't pass any errors unless the socket is connected.
Linux's behavior is mandated by
.BR RFC\ 1122 .

For compatibility with legacy code, in Linux 2.0 and 2.2
it was possible to set the
.B SO_BSDCOMPAT
.B SOL_SOCKET
option to receive remote errors only when the socket has been
connected (except for
.B EPROTO
and
.BR EMSGSIZE ).
Locally generated errors are always passed.
Support for this socket option was removed in later kernels; see
.BR socket (7)
for further information.

When the
.B IP_RECVERR
option is enabled, all errors are stored in the socket error queue,
and can be received by
.BR recvmsg (2)
with the
.B MSG_ERRQUEUE
flag set.
.SS /proc interfaces
System-wide UDP parameter settings can be accessed by files in the directory
.IR /proc/sys/net/ipv4/ .
.TP
.IR udp_mem " (since Linux 2.6.25)"
This is a vector of three integers governing the number
of pages allowed for queueing by all UDP sockets.
.RS
.TP 10
.I min
Below this number of pages, UDP is not bothered about its
memory appetite.
When the amount of memory allocated by UDP exceeds
this number, UDP starts to moderate memory usage.
.TP
.I pressure
This value was introduced to follow the format of
.IR tcp_mem
(see
.BR tcp (7)).
.TP
.I max
Number of pages allowed for queueing by all UDP sockets.
.RE
.IP
Defaults values for these three items are
calculated at boot time from the amount of available memory.
.TP
.IR udp_rmem_min " (integer; default value: PAGE_SIZE; since Linux 2.6.25)"
Minimal size, in bytes, of receive buffers used by UDP sockets in moderation.
Each UDP socket is able to use the size for receiving data,
even if total pages of UDP sockets exceed
.I udp_mem
pressure.
.TP
.IR udp_wmem_min " (integer; default value: PAGE_SIZE; since Linux 2.6.25)"
Minimal size, in bytes, of send buffer used by UDP sockets in moderation.
Each UDP socket is able to use the size for sending data,
even if total pages of UDP sockets exceed
.I udp_mem
pressure.
.SS Socket options
To set or get a UDP socket option, call
.BR getsockopt (2)
to read or
.BR setsockopt (2)
to write the option with the option level argument set to
.BR IPPROTO_UDP .
Unless otherwise noted,
.I optval
is a pointer to an
.IR int .
.TP
.BR UDP_CORK " (since Linux 2.5.44)"
If this option is enabled, then all data output on this socket
is accumulated into a single datagram that is transmitted when
the option is disabled.
This option should not be used in code intended to be
portable.
.\" FIXME document UDP_ENCAP (new in kernel 2.5.67)
.\" From include/linux/udp.h:
.\" /* UDP encapsulation types */
.\" #define UDP_ENCAP_ESPINUDP_NON_IKE      1 /* draft-ietf-ipsec-nat-t-ike-00/01 */
.\" #define UDP_ENCAP_ESPINUDP      2 /* draft-ietf-ipsec-udp-encaps-06 */
.\" #define UDP_ENCAP_L2TPINUDP     3 /* rfc2661 */
.SS Ioctls
These ioctls can be accessed using
.BR ioctl (2).
The correct syntax is:
.PP
.RS
.nf
.BI int " value";
.IB error " = ioctl(" udp_socket ", " ioctl_type ", &" value ");"
.fi
.RE
.TP
.BR FIONREAD " (" SIOCINQ )
Gets a pointer to an integer as argument.
Returns the size of the next pending datagram in the integer in bytes,
or 0 when no datagram is pending.
.B Warning:
Using
.BR FIONREAD ,
it is impossible to distinguish the case where no datagram is pending
from the case where the next pending datagram contains zero bytes of data.
It is safer to use
.BR select (2),
.BR poll (2),
or
.BR epoll (7)
to distinguish these cases.
.\" See http://www.securiteam.com/unixfocus/5KP0I15IKO.html
.\" "GNUnet DoS (UDP Socket Unreachable)", 14 May 2006
.TP
.BR TIOCOUTQ " (" SIOCOUTQ )
Returns the number of data bytes in the local send queue.
Only supported with Linux 2.4 and above.
.PP
In addition, all ioctls documented in
.BR ip (7)
and
.BR socket (7)
are supported.
.SH ERRORS
All errors documented for
.BR socket (7)
or
.BR ip (7)
may be returned by a send or receive on a UDP socket.
.TP
.B ECONNREFUSED
No receiver was associated with the destination address.
This might be caused by a previous packet sent over the socket.
.SH VERSIONS
.B IP_RECVERR
is a new feature in Linux 2.2.
.\" .SH CREDITS
.\" This man page was written by Andi Kleen.
.SH SEE ALSO
.BR ip (7),
.BR raw (7),
.BR socket (7),
.BR udplite (7)

RFC\ 768 for the User Datagram Protocol.
.br
RFC\ 1122 for the host requirements.
.br
RFC\ 1191 for a description of path MTU discovery.
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2008 by Gerrit Renker <gerrit@erg.abdn.ac.uk>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" $Id: udplite.7,v 1.12 2008/07/23 15:22:22 gerrit Exp gerrit $
.\"
.TH UDPLITE  7 2014-07-08 "Linux" "Linux Programmer's Manual"
.SH NAME
udplite \- Lightweight User Datagram Protocol
.SH SYNOPSIS
.B #include <sys/socket.h>
.br
.\" FIXME . see #defines under `BUGS',
.\"        when glibc supports this, add
.\"        #include <netinet/udplite.h>
.sp
.B sockfd = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDPLITE);
.SH DESCRIPTION
This is an implementation of the Lightweight User Datagram Protocol
(UDP-Lite), as described in RFC\ 3828.

UDP-Lite is an extension of UDP (RFC\ 768) to support variable-length
checksums.
This has advantages for some types of multimedia transport that
may be able to make use of slightly damaged datagrams,
rather than having them discarded by lower-layer protocols.

The variable-length checksum coverage is set via a
.BR setsockopt (2)
option.
If this option is not set, the only difference to UDP is
in using a different IP protocol identifier (IANA number 136).

The UDP-Lite implementation is a full extension of
.BR udp (7)\(emthat
is, it shares the same API and API behavior, and in addition
offers two socket options to control the checksum coverage.
.SS Address format
UDP-Litev4 uses the
.I sockaddr_in
address format described in
.BR ip (7).
UDP-Litev6 uses the
.I sockaddr_in6
address format described in
.BR ipv6 (7).
.SS Socket options
To set or get a UDP-Lite socket option, call
.BR getsockopt (2)
to read or
.BR setsockopt (2)
to write the option with the option level argument set to
.BR IPPROTO_UDPLITE .
In addition, all
.B IPPROTO_UDP
socket options are valid on a UDP-Lite socket.
See
.BR udp (7)
for more information.

The following two options are specific to UDP-Lite.
.TP
.BR UDPLITE_SEND_CSCOV
This option sets the sender checksum coverage and takes an
.I int
as argument, with a checksum coverage value in the range 0..2^16-1.

A value of 0 means that the entire datagram is always covered.
Values from 1-7 are illegal (RFC\ 3828, 3.1) and are rounded up to
the minimum coverage of 8.

With regard to IPv6 jumbograms (RFC\ 2675), the UDP-Litev6 checksum
coverage is limited to the first 2^16-1 octets, as per RFC\ 3828, 3.5.
Higher values are therefore silently truncated to 2^16-1.
If in doubt, the current coverage value can always be queried using
.BR getsockopt (2).
.TP
.BR UDPLITE_RECV_CSCOV
This is the receiver-side analogue and uses the same argument format
and value range as
.BR UDPLITE_SEND_CSCOV .
This option is not required to enable traffic with partial checksum
coverage.
Its function is that of a traffic filter: when enabled, it
instructs the kernel to drop all packets which have a coverage
.I less
than the specified coverage value.

When the value of
.B UDPLITE_RECV_CSCOV
exceeds the actual packet coverage, incoming packets are silently dropped,
but may generate a warning message in the system log.
.\" SO_NO_CHECK exists and is supported by UDPv4, but is
.\" commented out in socket(7), hence also commented out here
.\".PP
.\"Since UDP-Lite mandates checksums, checksumming can not be disabled
.\"via the
.\".B SO_NO_CHECK
.\"option from
.\".BR socket (7).
.SH ERRORS
All errors documented for
.BR udp (7)
may be returned.
UDP-Lite does not add further errors.
.SH FILES
.I /proc/net/snmp
\- basic UDP-Litev4 statistics counters.
.br
.I /proc/net/snmp6
\- basic UDP-Litev6 statistics counters.
.SH VERSIONS
UDP-Litev4/v6 first appeared in Linux 2.6.20.
.SH BUGS
.\" FIXME . remove this section once glibc supports UDP-Lite
Where glibc support is missing, the following definitions are needed:
.in +4n
.nf

#define IPPROTO_UDPLITE     136
.\" The following two are defined in the kernel in linux/net/udplite.h
#define UDPLITE_SEND_CSCOV  10
#define UDPLITE_RECV_CSCOV  11
.fi
.in
.SH SEE ALSO
.BR ip (7),
.BR ipv6 (7),
.BR socket (7),
.BR udp (7)

RFC\ 3828 for the Lightweight User Datagram Protocol (UDP-Lite).

.I Documentation/networking/udplite.txt
in the Linux kernel source tree
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) Markus Kuhn, 1995, 2001
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.\" 1995-11-26  Markus Kuhn <mskuhn@cip.informatik.uni-erlangen.de>
.\"      First version written
.\" 2001-05-11  Markus Kuhn <mgk25@cl.cam.ac.uk>
.\"      Update
.\"
.TH UNICODE 7 2014-06-13 "GNU" "Linux Programmer's Manual"
.SH NAME
Unicode \- universal character set
.SH DESCRIPTION
The international standard ISO 10646 defines the
Universal Character Set (UCS).
UCS contains all characters of all other character set standards.
It also guarantees "round-trip compatibility";
in other words,
conversion tables can be built such that no information is lost
when a string is converted from any other encoding to UCS and back.

UCS contains the characters required to represent practically all
known languages.
This includes not only the Latin, Greek, Cyrillic,
Hebrew, Arabic, Armenian, and Georgian scripts, but also Chinese,
Japanese and Korean Han ideographs as well as scripts such as
Hiragana, Katakana, Hangul, Devanagari, Bengali, Gurmukhi, Gujarati,
Oriya, Tamil, Telugu, Kannada, Malayalam, Thai, Lao, Khmer, Bopomofo,
Tibetan, Runic, Ethiopic, Canadian Syllabics, Cherokee, Mongolian,
Ogham, Myanmar, Sinhala, Thaana, Yi, and others.
For scripts not yet
covered, research on how to best encode them for computer usage is
still going on and they will be added eventually.
This might
eventually include not only Hieroglyphs and various historic
Indo-European languages, but even some selected artistic scripts such
as Tengwar, Cirth, and Klingon.
UCS also covers a large number of
graphical, typographical, mathematical, and scientific symbols,
including those provided by TeX, Postscript, APL, MS-DOS, MS-Windows,
Macintosh, OCR fonts, as well as many word processing and publishing
systems, and more are being added.

The UCS standard (ISO 10646) describes a
31-bit character set architecture
consisting of 128 24-bit
.IR groups ,
each divided into 256 16-bit
.I planes
made up of 256 8-bit
.I rows
with 256
.I column
positions, one for each character.
Part 1 of the standard (ISO 10646-1)
defines the first 65534 code positions (0x0000 to 0xfffd), which form
the
.IR "Basic Multilingual Plane"
(BMP), that is plane 0 in group 0.
Part 2 of the standard (ISO 10646-2)
adds characters to group 0 outside the BMP in several
.I "supplementary planes"
in the range 0x10000 to 0x10ffff.
There are no plans to add characters
beyond 0x10ffff to the standard, therefore of the entire code space,
only a small fraction of group 0 will ever be actually used in the
foreseeable future.
The BMP contains all characters found in the
commonly used other character sets.
The supplemental planes added by
ISO 10646-2 cover only more exotic characters for special scientific,
dictionary printing, publishing industry, higher-level protocol and
enthusiast needs.
.PP
The representation of each UCS character as a 2-byte word is referred
to as the UCS-2 form (only for BMP characters),
whereas UCS-4 is the representation of each character by a 4-byte word.
In addition, there exist two encoding forms UTF-8
for backward compatibility with ASCII processing software and UTF-16
for the backward-compatible handling of non-BMP characters up to
0x10ffff by UCS-2 software.
.PP
The UCS characters 0x0000 to 0x007f are identical to those of the
classic US-ASCII
character set and the characters in the range 0x0000 to 0x00ff
are identical to those in
ISO 8859-1 (Latin-1).
.SS Combining characters
Some code points in UCS
have been assigned to
.IR "combining characters" .
These are similar to the nonspacing accent keys on a typewriter.
A combining character just adds an accent to the previous character.
The most important accented characters have codes of their own in UCS,
however, the combining character mechanism allows us to add accents
and other diacritical marks to any character.
The combining characters
always follow the character which they modify.
For example, the German
character Umlaut-A ("Latin capital letter A with diaeresis") can
either be represented by the precomposed UCS code 0x00c4, or
alternatively as the combination of a normal "Latin capital letter A"
followed by a "combining diaeresis": 0x0041 0x0308.
.PP
Combining characters are essential for instance for encoding the Thai
script or for mathematical typesetting and users of the International
Phonetic Alphabet.
.SS Implementation levels
As not all systems are expected to support advanced mechanisms like
combining characters, ISO 10646-1 specifies the following three
.I implementation levels
of UCS:
.TP 0.9i
Level 1
Combining characters and Hangul Jamo
(a variant encoding of the Korean script, where a Hangul syllable
glyph is coded as a triplet or pair of vovel/consonant codes) are not
supported.
.TP
Level 2
In addition to level 1, combining characters are now allowed for some
languages where they are essential (e.g., Thai, Lao, Hebrew,
Arabic, Devanagari, Malayalam).
.TP
Level 3
All UCS characters are supported.
.PP
The Unicode 3.0 Standard
published by the Unicode Consortium
contains exactly the UCS Basic Multilingual Plane
at implementation level 3, as described in ISO 10646-1:2000.
Unicode 3.1 added the supplemental planes of ISO 10646-2.
The Unicode standard and
technical reports published by the Unicode Consortium provide much
additional information on the semantics and recommended usages of
various characters.
They provide guidelines and algorithms for
editing, sorting, comparing, normalizing, converting, and displaying
Unicode strings.
.SS Unicode under Linux
Under GNU/Linux, the C type
.I wchar_t
is a signed 32-bit integer type.
Its values are always interpreted
by the C library as UCS
code values (in all locales), a convention that is signaled by the GNU
C library to applications by defining the constant
.B __STDC_ISO_10646__
as specified in the ISO C99 standard.

UCS/Unicode can be used just like ASCII in input/output streams,
terminal communication, plaintext files, filenames, and environment
variables in the ASCII compatible UTF-8 multibyte encoding.
To signal the use of UTF-8 as the character
encoding to all applications, a suitable
.I locale
has to be selected via environment variables (e.g.,
"LANG=en_GB.UTF-8").
.PP
The
.B nl_langinfo(CODESET)
function returns the name of the selected encoding.
Library functions such as
.BR wctomb (3)
and
.BR mbsrtowcs (3)
can be used to transform the internal
.I wchar_t
characters and strings into the system character encoding and back
and
.BR wcwidth (3)
tells, how many positions (0\(en2) the cursor is advanced by the
output of a character.
.PP
.SS Private area
In the Basic Multilingual Plane,
the range 0xe000 to 0xf8ff will never be assigned to any characters by
the standard and is reserved for private usage.
For the Linux
community, this private area has been subdivided further into the
range 0xe000 to 0xefff which can be used individually by any end-user
and the Linux zone in the range 0xf000 to 0xf8ff where extensions are
coordinated among all Linux users.
The registry of the characters
assigned to the Linux zone is maintained by LANANA and the registry
itself is
.I Documentation/unicode.txt
in the Linux kernel sources.
.SS Literature
.IP * 3
Information technology \(em Universal Multiple-Octet Coded Character
Set (UCS) \(em Part 1: Architecture and Basic Multilingual Plane.
International Standard ISO/IEC 10646-1, International Organization
for Standardization, Geneva, 2000.

This is the official specification of UCS .
Available from
.UR http://www.iso.ch/
.UE .
.IP *
The Unicode Standard, Version 3.0.
The Unicode Consortium, Addison-Wesley,
Reading, MA, 2000, ISBN 0-201-61633-5.
.IP *
S. Harbison, G. Steele. C: A Reference Manual. Fourth edition,
Prentice Hall, Englewood Cliffs, 1995, ISBN 0-13-326224-3.

A good reference book about the C programming language.
The fourth
edition covers the 1994 Amendment 1 to the ISO C90 standard, which
adds a large number of new C library functions for handling wide and
multibyte character encodings, but it does not yet cover ISO C99,
which improved wide and multibyte character support even further.
.IP *
Unicode Technical Reports.
.RS
.UR http://www.unicode.org\:/reports/
.UE
.RE
.IP *
Markus Kuhn: UTF-8 and Unicode FAQ for UNIX/Linux.
.RS
.UR http://www.cl.cam.ac.uk\:/~mgk25\:/unicode.html
.UE
.RE
.IP *
Bruno Haible: Unicode HOWTO.
.RS
.UR http://www.tldp.org\:/HOWTO\:/Unicode-HOWTO.html
.UE
.RE
.\" .SH AUTHOR
.\" Markus Kuhn <mgk25@cl.cam.ac.uk>
.SH SEE ALSO
.BR locale (1),
.BR setlocale (3),
.BR charsets (7),
.BR utf-8 (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
'\" t
.\" Copyright (C) 2001 Andries Brouwer <aeb@cwi.nl>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH UNITS 7 2012-08-05 "Linux" "Linux Programmer's Manual"
.SH NAME
units, kilo, kibi, mega, mebi, giga, gibi \- decimal and binary prefixes
.SH DESCRIPTION
.SS Decimal prefixes
The SI system of units uses prefixes that indicate powers of ten.
A kilometer is 1000 meter, and a megawatt is 1000000 watt.
Below the standard prefixes.
.RS
.TS
l l l.
Prefix	Name	Value
y	yocto	10^-24 = 0.000000000000000000000001
z	zepto	10^-21 = 0.000000000000000000001
a	atto	10^-18 = 0.000000000000000001
f	femto	10^-15 = 0.000000000000001
p	pico	10^-12 = 0.000000000001
n	nano	10^-9  = 0.000000001
\(mc	micro	10^-6  = 0.000001
m	milli	10^-3  = 0.001
c	centi	10^-2  = 0.01
d	deci	10^-1  = 0.1
da	deka	10^ 1  = 10
h	hecto	10^ 2  = 100
k	kilo	10^ 3  = 1000
M	mega	10^ 6  = 1000000
G	giga	10^ 9  = 1000000000
T	tera	10^12  = 1000000000000
P	peta	10^15  = 1000000000000000
E	exa	10^18  = 1000000000000000000
Z	zetta	10^21  = 1000000000000000000000
Y	yotta	10^24  = 1000000000000000000000000
.TE
.RE

The symbol for micro is the Greek letter mu, often written u
in an ASCII context where this Greek letter is not available.
See also
.sp
.RS
.UR http://physics.nist.gov\:/cuu\:/Units\:/prefixes.html
.UE
.RE
.SS Binary prefixes
The binary prefixes resemble the decimal ones,
but have an additional \(aqi\(aq
(and "Ki" starts with a capital \(aqK\(aq).
The names are formed by taking the
first syllable of the names of the decimal prefix with roughly the same
size, followed by "bi" for "binary".
.RS
.TS
l l l.
Prefix	Name	Value
Ki	kibi	2^10 = 1024
Mi	mebi	2^20 = 1048576
Gi	gibi	2^30 = 1073741824
Ti	tebi	2^40 = 1099511627776
Pi	pebi	2^50 = 1125899906842624
Ei	exbi	2^60 = 1152921504606846976
.TE
.RE

See also
.sp
.UR http://physics.nist.gov\:/cuu\:/Units\:/binary.html
.UE
.SS Discussion
Before these binary prefixes were introduced, it was fairly
common to use k=1000 and K=1024, just like b=bit, B=byte.
Unfortunately, the M is capital already, and cannot be
capitalized to indicate binary-ness.

At first that didn't matter too much, since memory modules
and disks came in sizes that were powers of two, so everyone
knew that in such contexts "kilobyte" and "megabyte" meant
1024 and 1048576 bytes, respectively.
What originally was a
sloppy use of the prefixes "kilo" and "mega" started to become
regarded as the "real true meaning" when computers were involved.
But then disk technology changed, and disk sizes became arbitrary numbers.
After a period of uncertainty all disk manufacturers settled on the
standard, namely k=1000, M=1000k, G=1000M.

The situation was messy: in the 14k4 modems, k=1000; in the 1.44MB
.\" also common: 14.4k modem
diskettes, M=1024000; and so on.
In 1998 the IEC approved the standard
that defines the binary prefixes given above, enabling people
to be precise and unambiguous.

Thus, today, MB = 1000000B and MiB = 1048576B.

In the free software world programs are slowly
being changed to conform.
When the Linux kernel boots and says

.RS
.nf
hda: 120064896 sectors (61473 MB) w/2048KiB Cache
.fi
.RE

the MB are megabytes and the KiB are kibibytes.
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" This man page is Copyright (C) 1999 Andi Kleen <ak@muc.de>.
.\" and Copyright (C) 2008-2014, Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM_ONE_PARA)
.\" and Copyright (C) 2008, 2012 Michael Kerrisk <mtk.manpages@gmail.com>
.\" Permission is granted to distribute possibly modified copies
.\" of this page provided the header is included verbatim,
.\" and in case of nontrivial modification author and date
.\" of the modification is added to the header.
.\" %%%LICENSE_END
.\"
.\" Modified, 2003-12-02, Michael Kerrisk, <mtk.manpages@gmail.com>
.\" Modified, 2003-09-23, Adam Langley
.\" Modified, 2004-05-27, Michael Kerrisk, <mtk.manpages@gmail.com>
.\"	Added SOCK_SEQPACKET
.\" 2008-05-27, mtk, Provide a clear description of the three types of
.\"     address that can appear in the sockaddr_un structure: pathname,
.\"     unnamed, and abstract.
.\"
.TH UNIX  7 2015-05-07 "Linux" "Linux Programmer's Manual"
.SH NAME
unix \- sockets for local interprocess communication
.SH SYNOPSIS
.B #include <sys/socket.h>
.br
.B #include <sys/un.h>

.IB unix_socket " = socket(AF_UNIX, type, 0);"
.br
.IB error " = socketpair(AF_UNIX, type, 0, int *" sv ");"
.SH DESCRIPTION
The
.B AF_UNIX
(also known as
.BR AF_LOCAL )
socket family is used to communicate between processes on the same machine
efficiently.
Traditionally, UNIX domain sockets can be either unnamed,
or bound to a filesystem pathname (marked as being of type socket).
Linux also supports an abstract namespace which is independent of the
filesystem.

Valid socket types in the UNIX domain are:
.BR SOCK_STREAM ,
for a stream-oriented socket;
.BR SOCK_DGRAM ,
for a datagram-oriented socket that preserves message boundaries
(as on most UNIX implementations, UNIX domain datagram
sockets are always reliable and don't reorder datagrams);
and (since Linux 2.6.4)
.BR SOCK_SEQPACKET ,
for a connection-oriented socket that preserves message boundaries
and delivers messages in the order that they were sent.

UNIX domain sockets support passing file descriptors or process credentials
to other processes using ancillary data.
.SS Address format
A UNIX domain socket address is represented in the following structure:
.in +4n
.nf

.\" #define UNIX_PATH_MAX    108
.\"
struct sockaddr_un {
    sa_family_t sun_family;               /* AF_UNIX */
    char        sun_path[108];            /* pathname */
};
.fi
.in
.PP
The
.I sun_family
field always contains
.BR AF_UNIX .
On Linux
.I sun_path
is 108 bytes in size; see also NOTES, below.

Various systems calls (for example,
.BR bind (2),
.BR connect (2),
and
.BR sendto (2))
take a
.I sockaddr_un
argument as input.
Some other system calls (for example,
.BR getsockname (2),
.BR getpeername (2),
.BR recvfrom (2),
and
.BR accept (2))
return an argument of this type.

Three types of address are distinguished in the
.I sockaddr_un
structure:
.IP * 3
.IR pathname :
a UNIX domain socket can be bound to a null-terminated
filesystem pathname using
.BR bind (2).
When the address of a pathname socket is returned
(by one of the system calls noted above),
its length is

    offsetof(struct sockaddr_un, sun_path) + strlen(sun_path) + 1

and
.I sun_path
contains the null-terminated pathname.
(On Linux, the above
.BR offsetof ()
expression equates to the same value as
.IR sizeof(sa_family_t) ,
but some other implementations include other fields before
.IR sun_path ,
so the
.BR offsetof ()
expression more portably describes the size of the address structure.)
.IP
For further details of pathname sockets, see below.
.IP *
.IR unnamed :
A stream socket that has not been bound to a pathname using
.BR bind (2)
has no name.
Likewise, the two sockets created by
.BR socketpair (2)
are unnamed.
When the address of an unnamed socket is returned,
its length is
.IR "sizeof(sa_family_t)" ,
and
.I sun_path
should not be inspected.
.\" There is quite some variation across implementations: FreeBSD
.\" says the length is 16 bytes, HP-UX 11 says it's zero bytes.
.IP *
.IR abstract :
an abstract socket address is distinguished (from a pathname socket)
by the fact that
.IR sun_path[0]
is a null byte (\(aq\\0\(aq).
The socket's address in this namespace is given by the additional
bytes in
.IR sun_path
that are covered by the specified length of the address structure.
(Null bytes in the name have no special significance.)
The name has no connection with filesystem pathnames.
When the address of an abstract socket is returned,
the returned
.I addrlen
is greater than
.IR "sizeof(sa_family_t)"
(i.e., greater than 2), and the name of the socket is contained in
the first
.IR "(addrlen \- sizeof(sa_family_t))"
bytes of
.IR sun_path .
The abstract socket namespace is a nonportable Linux extension.
.SS Pathname sockets
When binding a socket to a pathname, a few rules should be observed
for maximum portability and ease of coding:
.IP * 3
The pathname in
.I sun_path
should be null-terminated.
.IP *
The length of the pathname, including the terminating null byte,
should not exceed the size of
.IR sun_path .
.IP *
The
.I addrlen
argument that describes the enclosing
.I sockaddr_un
structure should have a value of at least:

.nf
    offsetof(struct sockaddr_un, sun_path)+strlen(addr.sun_path)+1
.fi
.IP
or, more simply,
.I addrlen
can be specified as
.IR "sizeof(struct sockaddr_un)" .
.PP
There is some variation in how implementations handle UNIX domain
socket addresses that do not follow the above rules.
For example, some (but not all) implementations
.\" Linux does this, including for the case where the supplied path
.\" is 108 bytes
append a null terminator if none is present in the supplied
.IR sun_path .

When coding portable applications,
keep in mind that some implementations
.\" HP-UX
have
.I sun_path
as short as 92 bytes.
.\" Modern BSDs generally have 104, Tru64 and AIX have 104,
.\" Solaris and Irix have 108

Various system calls
.RB ( accept (2),
.BR recvfrom (2),
.BR getsockname (2),
.BR getpeername (2))
return socket address structures.
When applied to UNIX domain sockets, the value-result
.I addrlen
argument supplied to the call should be initialized as above.
Upon return, the argument is set to indicate the
.I actual
size of the address structure.
The caller should check the value returned in this argument:
if the output value exceeds the input value,
then there is no guarantee that a null terminator is present in
.IR sun_path .
(See BUGS.)
.SS Socket options
For historical reasons, these socket options are specified with a
.B SOL_SOCKET
type even though they are
.B AF_UNIX
specific.
They can be set with
.BR setsockopt (2)
and read with
.BR getsockopt (2)
by specifying
.B SOL_SOCKET
as the socket family.
.TP
.B SO_PASSCRED
Enables the receiving of the credentials of the sending process in an
ancillary message.
When this option is set and the socket is not yet connected
a unique name in the abstract namespace will be generated automatically.
Expects an integer boolean flag.
.SS Autobind feature
If a
.BR bind (2)
call specifies
.I addrlen
as
.IR sizeof(sa_family_t) ,
.\" i.e., sizeof(short)
or the
.BR SO_PASSCRED
socket option was specified for a socket that was
not explicitly bound to an address,
then the socket is autobound to an abstract address.
The address consists of a null byte
followed by 5 bytes in the character set
.IR [0-9a-f] .
Thus, there is a limit of 2^20 autobind addresses.
(From Linux 2.1.15, when the autobind feature was added,
8 bytes were used, and the limit was thus 2^32 autobind addresses.
The change to 5 bytes came in Linux 2.3.15.)
.SS Sockets API
The following paragraphs describe domain-specific details and
unsupported features of the sockets API for UNIX domain sockets on Linux.

UNIX domain sockets do not support the transmission of
out-of-band data (the
.B MSG_OOB
flag for
.BR send (2)
and
.BR recv (2)).

The
.BR send (2)
.B MSG_MORE
flag is not supported by UNIX domain sockets.

The use of
.B MSG_TRUNC
in the
.I flags
argument of
.BR recv (2)
is not supported by UNIX domain sockets.

The
.B SO_SNDBUF
socket option does have an effect for UNIX domain sockets, but the
.B SO_RCVBUF
option does not.
For datagram sockets, the
.B SO_SNDBUF
value imposes an upper limit on the size of outgoing datagrams.
This limit is calculated as the doubled (see
.BR socket (7))
option value less 32 bytes used for overhead.
.SS Ancillary messages
Ancillary data is sent and received using
.BR sendmsg (2)
and
.BR recvmsg (2).
For historical reasons the ancillary message types listed below
are specified with a
.B SOL_SOCKET
type even though they are
.B AF_UNIX
specific.
To send them set the
.I cmsg_level
field of the struct
.I cmsghdr
to
.B SOL_SOCKET
and the
.I cmsg_type
field to the type.
For more information see
.BR cmsg (3).
.TP
.B SCM_RIGHTS
Send or receive a set of open file descriptors from another process.
The data portion contains an integer array of the file descriptors.
The passed file descriptors behave as though they have been created with
.BR dup (2).
.TP
.B SCM_CREDENTIALS
Send or receive UNIX credentials.
This can be used for authentication.
The credentials are passed as a
.I struct ucred
ancillary message.
Thus structure is defined in
.I <sys/socket.h>
as follows:

.in +4n
.nf
struct ucred {
    pid_t pid;    /* process ID of the sending process */
    uid_t uid;    /* user ID of the sending process */
    gid_t gid;    /* group ID of the sending process */
};
.fi
.in

Since glibc 2.8, the
.B _GNU_SOURCE
feature test macro must be defined (before including
.I any
header files) in order to obtain the definition
of this structure.

The credentials which the sender specifies are checked by the kernel.
A process with effective user ID 0 is allowed to specify values that do
not match its own.
The sender must specify its own process ID (unless it has the capability
.BR CAP_SYS_ADMIN ),
its user ID, effective user ID, or saved set-user-ID (unless it has
.BR CAP_SETUID ),
and its group ID, effective group ID, or saved set-group-ID
(unless it has
.BR CAP_SETGID ).
To receive a
.I struct ucred
message the
.B SO_PASSCRED
option must be enabled on the socket.
.SS Ioctls
The following
.BR ioctl (2)
calls return information in
.IR value .
The correct syntax is:
.PP
.RS
.nf
.BI int " value";
.IB error " = ioctl(" unix_socket ", " ioctl_type ", &" value ");"
.fi
.RE
.PP
.I ioctl_type
can be:
.TP
.B SIOCINQ
For
.B SOCK_STREAM
socket the function returns the amount of queued unread data in the receive buffer.
The socket must not be in LISTEN state, otherwise an error
.RB ( EINVAL )
is returned.
.B SIOCINQ
is defined in
.IR <linux/sockios.h> .
.\" FIXME . http://sources.redhat.com/bugzilla/show_bug.cgi?id=12002,
.\" filed 2010-09-10, may cause SIOCINQ to be defined in glibc headers
Alternatively,
you can use the synonymous
.BR FIONREAD ,
defined in
.IR <sys/ioctl.h> .
.\" SIOCOUTQ also has an effect for UNIX domain sockets, but not
.\" quite what userland might expect. It seems to return the number
.\" of bytes allocated for buffers containing pending output.
.\" That number is normally larger than the number of bytes of pending
.\" output. Since this info is, from userland's point of view, imprecise,
.\" and it may well change, probably best not to document this now.
For
.B SOCK_DGRAM
socket,
the returned value is the same as
for Internet domain datagram socket;
see
.BR udp (7).
.SH ERRORS
.TP
.B EADDRINUSE
The specified local address is already in use or the filesystem socket
object already exists.
.TP
.B ECONNREFUSED
The remote address specified by
.BR connect (2)
was not a listening socket.
This error can also occur if the target pathname is not a socket.
.TP
.B ECONNRESET
Remote socket was unexpectedly closed.
.TP
.B EFAULT
User memory address was not valid.
.TP
.B EINVAL
Invalid argument passed.
A common cause is that the value
.B AF_UNIX
was not specified in the
.I sun_type
field of passed addresses, or the socket was in an
invalid state for the applied operation.
.TP
.B EISCONN
.BR connect (2)
called on an already connected socket or a target address was
specified on a connected socket.
.TP
.B ENOENT
The pathname in the remote address specified to
.BR connect (2)
did not exist.
.TP
.B ENOMEM
Out of memory.
.TP
.B ENOTCONN
Socket operation needs a target address, but the socket is not connected.
.TP
.B EOPNOTSUPP
Stream operation called on non-stream oriented socket or tried to
use the out-of-band data option.
.TP
.B EPERM
The sender passed invalid credentials in the
.IR "struct ucred" .
.TP
.B EPIPE
Remote socket was closed on a stream socket.
If enabled, a
.B SIGPIPE
is sent as well.
This can be avoided by passing the
.B MSG_NOSIGNAL
flag to
.BR sendmsg (2)
or
.BR recvmsg (2).
.TP
.B EPROTONOSUPPORT
Passed protocol is not
.BR AF_UNIX .
.TP
.B EPROTOTYPE
Remote socket does not match the local socket type
.RB ( SOCK_DGRAM
versus
.BR SOCK_STREAM )
.TP
.B ESOCKTNOSUPPORT
Unknown socket type.
.PP
Other errors can be generated by the generic socket layer or
by the filesystem while generating a filesystem socket object.
See the appropriate manual pages for more information.
.SH VERSIONS
.B SCM_CREDENTIALS
and the abstract namespace were introduced with Linux 2.2 and should not
be used in portable programs.
(Some BSD-derived systems also support credential passing,
but the implementation details differ.)
.SH NOTES
In the Linux implementation, sockets which are visible in the
filesystem honor the permissions of the directory they are in.
Their owner, group, and permissions can be changed.
Creation of a new socket will fail if the process does not have write and
search (execute) permission on the directory the socket is created in.
Connecting to the socket object requires read/write permission.
This behavior differs from many BSD-derived systems which
ignore permissions for UNIX domain sockets.
Portable programs should not rely on
this feature for security.

Binding to a socket with a filename creates a socket
in the filesystem that must be deleted by the caller when it is no
longer needed (using
.BR unlink (2)).
The usual UNIX close-behind semantics apply; the socket can be unlinked
at any time and will be finally removed from the filesystem when the last
reference to it is closed.

To pass file descriptors or credentials over a
.BR SOCK_STREAM ,
you need
to send or receive at least one byte of nonancillary data in the same
.BR sendmsg (2)
or
.BR recvmsg (2)
call.

UNIX domain stream sockets do not support the notion of out-of-band data.
.\"
.SH BUGS
When binding a socket to an address,
Linux is one of the implementations that appends a null terminator
if none is supplied in
.IR sun_path .
In most cases this is unproblematic:
when the socket address is retrieved,
it will be one byte longer than that supplied when the socket was bound.
However, there is one case where confusing behavior can result:
if 108 non-null bytes are supplied when a socket is bound,
then the addition of the null terminator takes the length of
the pathname beyond
.IR sizeof(sun_path) .
Consequently, when retrieving the socket address
(for example, via
.BR accept (2)),
.\" The behavior on Solaris is quite similar.
if the input
.I addrlen
argument for the retrieving call is specified as
.IR "sizeof(struct sockaddr_un)" ,
then the returned address structure
.I won't
have a null terminator in
.IR sun_path .

In addition, some implementations
.\" i.e., traditional BSD
don't require a null terminator when binding a socket (the
.I addrlen
argument is used to determine the length of
.IR sun_path )
and when the socket address is retrieved on these implementations,
there is no null terminator in
.IR sun_path .

Applications that retrieve socket addresses can (portably) code
to handle the possibility that there is no null terminator in
.IR sun_path
by respecting the fact that the number of valid bytes in the pathname is:

    strnlen(addr.sun_path, addrlen \- offsetof(sockaddr_un, sun_path))
.\" The following patch to amend kernel behavior was rejected:
.\" http://thread.gmane.org/gmane.linux.kernel.api/2437
.\" Subject: [patch] Fix handling of overlength pathname in AF_UNIX sun_path
.\" 2012-04-17
.\" And there was a related discussion in the Austin list:
.\" http://thread.gmane.org/gmane.comp.standards.posix.austin.general/5735
.\" Subject: Having a sun_path with no null terminator
.\" 2012-04-18
.\"
.\" FIXME . Track http://austingroupbugs.net/view.php?id=561

Alternatively, an application can retrieve
the socket address by allocating a buffer of size
.I "sizeof(struct sockaddr_un)+1"
that is zeroed out before the retrieval.
The retrieving call can specify
.I addrlen
as
.IR "sizeof(struct sockaddr_un)" ,
and the extra zero byte ensures that there will be
a null terminator for the string returned in
.IR sun_path :

.nf
.in +3
void *addrp;

addrlen = sizeof(struct sockaddr_un);
addrp = malloc(addrlen + 1);
if (addrp == NULL)
    /* Handle error */ ;
memset(addrp, 0, addrlen + 1);

if (getsockname(sfd, (struct sockaddr *) addrp, &addrlen)) == \-1)
    /* handle error */ ;

printf("sun_path = %s\\n", ((struct sockaddr_un *) addrp)\->sun_path);
.in
.fi

This sort of messiness can be avoided if it is guaranteed
that the applications that
.I create
pathname sockets follow the rules outlined above under
.IR "Pathname sockets" .
.SH EXAMPLE
See
.BR bind (2).

For an example of the use of
.BR SCM_RIGHTS
see
.BR cmsg (3).
.SH SEE ALSO
.BR recvmsg (2),
.BR sendmsg (2),
.BR socket (2),
.BR socketpair (2),
.BR cmsg (3),
.BR capabilities (7),
.BR credentials (7),
.BR socket (7),
.BR udp (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" (C) Copyright 1999-2000 David A. Wheeler (dwheeler@dwheeler.com)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Fragments of this document are directly derived from IETF standards.
.\" For those fragments which are directly derived from such standards,
.\" the following notice applies, which is the standard copyright and
.\" rights announcement of The Internet Society:
.\"
.\" Copyright (C) The Internet Society (1998).  All Rights Reserved.
.\" This document and translations of it may be copied and furnished to
.\" others, and derivative works that comment on or otherwise explain it
.\" or assist in its implementation may be prepared, copied, published
.\" and distributed, in whole or in part, without restriction of any
.\" kind, provided that the above copyright notice and this paragraph are
.\" included on all such copies and derivative works.  However, this
.\" document itself may not be modified in any way, such as by removing
.\" the copyright notice or references to the Internet Society or other
.\" Internet organizations, except as needed for the purpose of
.\" developing Internet standards in which case the procedures for
.\" copyrights defined in the Internet Standards process must be
.\" followed, or as required to translate it into languages other than English.
.\"
.\" Modified Fri Jul 25 23:00:00 1999 by David A. Wheeler (dwheeler@dwheeler.com)
.\" Modified Fri Aug 21 23:00:00 1999 by David A. Wheeler (dwheeler@dwheeler.com)
.\" Modified Tue Mar 14 2000 by David A. Wheeler (dwheeler@dwheeler.com)
.\"
.TH URI 7 2014-03-18 "Linux" "Linux Programmer's Manual"
.SH NAME
uri, url, urn \- uniform resource identifier (URI), including a URL or URN
.SH SYNOPSIS
.nf
.HP 0.2i
URI = [ absoluteURI | relativeURI ] [ "#" fragment ]
.HP
absoluteURI = scheme ":" ( hierarchical_part | opaque_part )
.HP
relativeURI = ( net_path | absolute_path | relative_path ) [ "?" query ]
.HP
scheme = "http" | "ftp" | "gopher" | "mailto" | "news" | "telnet" |
         "file" | "man" | "info" | "whatis" | "ldap" | "wais" | \&...
.HP
hierarchical_part = ( net_path | absolute_path ) [ "?" query ]
.HP
net_path = "//" authority [ absolute_path ]
.HP
absolute_path = "/"  path_segments
.HP
relative_path = relative_segment [ absolute_path ]
.fi
.SH DESCRIPTION
.PP
A Uniform Resource Identifier (URI) is a short string of characters
identifying an abstract or physical resource (for example, a web page).
A Uniform Resource Locator (URL) is a URI
that identifies a resource through its primary access
mechanism (e.g., its network "location"), rather than
by name or some other attribute of that resource.
A Uniform Resource Name (URN) is a URI
that must remain globally unique and persistent even when
the resource ceases to exist or becomes unavailable.
.PP
URIs are the standard way to name hypertext link destinations
for tools such as web browsers.
The string "http://www.kernelnotes.org" is a URL (and thus it
is also a URI).
Many people use the term URL loosely as a synonym for URI
(though technically URLs are a subset of URIs).
.PP
URIs can be absolute or relative.
An absolute identifier refers to a resource independent of
context, while a relative
identifier refers to a resource by describing the difference
from the current context.
Within a relative path reference, the complete path segments "." and
".." have special meanings: "the current hierarchy level" and "the
level above this hierarchy level", respectively, just like they do in
UNIX-like systems.
A path segment which contains a colon
character can't be used as the first segment of a relative URI path
(e.g., "this:that"), because it would be mistaken for a scheme name;
precede such segments with ./ (e.g., "./this:that").
Note that descendants of MS-DOS (e.g., Microsoft Windows) replace
devicename colons with the vertical bar ("|") in URIs, so "C:" becomes "C|".
.PP
A fragment identifier, if included, refers to a particular named portion
(fragment) of a resource; text after a \(aq#\(aq identifies the fragment.
A URI beginning with \(aq#\(aq refers to that fragment in the current resource.
.SS Usage
There are many different URI schemes, each with specific
additional rules and meanings, but they are intentionally made to be
as similar as possible.
For example, many URL schemes
permit the authority to be the following format, called here an
.I ip_server
(square brackets show what's optional):
.HP
.IR "ip_server = " [ user " [ : " password " ] @ ] " host " [ : " port ]
.PP
This format allows you to optionally insert a username,
a user plus password, and/or a port number.
The
.I host
is the name of the host computer, either its name as determined by DNS
or an IP address (numbers separated by periods).
Thus the URI
<http://fred:fredpassword@xyz.com:8080/>
logs into a web server on host xyz.com
as fred (using fredpassword) using port 8080.
Avoid including a password in a URI if possible because of the many
security risks of having a password written down.
If the URL supplies a username but no password, and the remote
server requests a password, the program interpreting the URL
should request one from the user.
.PP
Here are some of the most common schemes in use on UNIX-like systems
that are understood by many tools.
Note that many tools using URIs also have internal schemes or specialized
schemes; see those tools' documentation for information on those schemes.
.PP
.B "http \- Web (HTTP) server"
.PP
.RI http:// ip_server / path
.br
.RI http:// ip_server / path ? query
.PP
This is a URL accessing a web (HTTP) server.
The default port is 80.
If the path refers to a directory, the web server will choose what
to return; usually if there is a file named "index.html" or "index.htm"
its content is returned, otherwise, a list of the files in the current
directory (with appropriate links) is generated and returned.
An example is <http://lwn.net>.
.PP
A query can be given in the archaic "isindex" format, consisting of a
word or phrase and not including an equal sign (=).
A query can also be in the longer "GET" format, which has one or more
query entries of the form
.IR key = value
separated by the ampersand character (&).
Note that
.I key
can be repeated more than once, though it's up to the web server
and its application programs to determine if there's any meaning to that.
There is an unfortunate interaction with HTML/XML/SGML and
the GET query format; when such URIs with more than one key
are embedded in SGML/XML documents (including HTML), the ampersand
(&) has to be rewritten as &amp;.
Note that not all queries use this format; larger forms
may be too long to store as a URI, so they use a different
interaction mechanism (called POST) which does
not include the data in the URI.
See the Common Gateway Interface specification at
.UR http://www.w3.org\:/CGI
.UE
for more information.
.PP
.B "ftp \- File Transfer Protocol (FTP)"
.PP
.RI ftp:// ip_server / path
.PP
This is a URL accessing a file through the file transfer protocol (FTP).
The default port (for control) is 21.
If no username is included, the username "anonymous" is supplied, and
in that case many clients provide as the password the requestor's
Internet email address.
An example is
<ftp://ftp.is.co.za/rfc/rfc1808.txt>.
.PP
.B "gopher \- Gopher server"
.PP
.RI gopher:// ip_server / "gophertype selector"
.br
.RI gopher:// ip_server / "gophertype selector" %09 search
.br
.RI gopher:// ip_server / "gophertype selector" %09 search %09 gopher+_string
.br
.PP
The default gopher port is 70.
.I gophertype
is a single-character field to denote the
Gopher type of the resource to
which the URL refers.
The entire path may also be empty, in
which case the delimiting "/" is also optional and the gophertype
defaults to "1".
.PP
.I selector
is the Gopher selector string.
In the Gopher protocol,
Gopher selector strings are a sequence of octets which may contain
any octets except 09 hexadecimal (US-ASCII HT or tab), 0A hexadecimal
(US-ASCII character LF), and 0D (US-ASCII character CR).
.PP
.B "mailto \- Email address"
.PP
.RI mailto: email-address
.PP
This is an email address, usually of the form
.IR name @ hostname .
See
.BR mailaddr (7)
for more information on the correct format of an email address.
Note that any % character must be rewritten as %25.
An example is <mailto:dwheeler@dwheeler.com>.
.PP
.B "news \- Newsgroup or News message"
.PP
.RI news: newsgroup-name
.br
.RI news: message-id
.PP
A
.I newsgroup-name
is a period-delimited hierarchical name, such as
"comp.infosystems.www.misc".
If <newsgroup-name> is "*" (as in <news:*>), it is used to refer
to "all available news groups".
An example is <news:comp.lang.ada>.
.PP
A
.I message-id
corresponds to the Message-ID of
.UR http://www.ietf.org\:/rfc\:/rfc1036.txt
IETF RFC\ 1036,
.UE
without the enclosing "<"
and ">"; it takes the form
.IR unique @ full_domain_name .
A message identifier may be distinguished from a news group name by the
presence of the "@" character.
.PP
.B "telnet \- Telnet login"
.PP
.RI telnet:// ip_server /
.PP
The Telnet URL scheme is used to designate interactive text services that
may be accessed by the Telnet protocol.
The final "/" character may be omitted.
The default port is 23.
An example is <telnet://melvyl.ucop.edu/>.
.PP
.B "file \- Normal file"
.PP
.RI file:// ip_server / path_segments
.br
.RI file: path_segments
.PP
This represents a file or directory accessible locally.
As a special case,
.I ip_server
can be the string "localhost" or the empty
string; this is interpreted as "the machine from which the URL is
being interpreted".
If the path is to a directory, the viewer should display the
directory's contents with links to each containee;
not all viewers currently do this.
KDE supports generated files through the URL <file:/cgi-bin>.
If the given file isn't found, browser writers may want to try to expand
the filename via filename globbing
(see
.BR glob (7)
and
.BR glob (3)).
.PP
The second format (e.g., <file:/etc/passwd>)
is a correct format for referring to
a local file.
However, older standards did not permit this format,
and some programs don't recognize this as a URI.
A more portable syntax is to use an empty string as the server name,
for example,
<file:///etc/passwd>; this form does the same thing
and is easily recognized by pattern matchers and older programs as a URI.
Note that if you really mean to say "start from the current location," don't
specify the scheme at all; use a relative address like <../test.txt>,
which has the side-effect of being scheme-independent.
An example of this scheme is <file:///etc/passwd>.
.PP
.B "man \- Man page documentation"
.PP
.RI man: command-name
.br
.RI man: command-name ( section )
.PP
This refers to local online manual (man) reference pages.
The command name can optionally be followed by a
parenthesis and section number; see
.BR man (7)
for more information on the meaning of the section numbers.
This URI scheme is unique to UNIX-like systems (such as Linux)
and is not currently registered by the IETF.
An example is <man:ls(1)>.
.PP
.B "info \- Info page documentation"
.PP
.RI info: virtual-filename
.br
.RI info: virtual-filename # nodename
.br
.RI info:( virtual-filename )
.br
.RI info:( virtual-filename ) nodename
.PP
This scheme refers to online info reference pages (generated from
texinfo files),
a documentation format used by programs such as the GNU tools.
This URI scheme is unique to UNIX-like systems (such as Linux)
and is not currently registered by the IETF.
As of this writing, GNOME and KDE differ in their URI syntax
and do not accept the other's syntax.
The first two formats are the GNOME format; in nodenames all spaces
are written as underscores.
The second two formats are the KDE format;
spaces in nodenames must be written as spaces, even though this
is forbidden by the URI standards.
It's hoped that in the future most tools will understand all of these
formats and will always accept underscores for spaces in nodenames.
In both GNOME and KDE, if the form without the nodename is used the
nodename is assumed to be "Top".
Examples of the GNOME format are <info:gcc> and <info:gcc#G++_and_GCC>.
Examples of the KDE format are <info:(gcc)> and <info:(gcc)G++ and GCC>.
.PP
.B "whatis \- Documentation search"
.PP
.RI whatis: string
.PP
This scheme searches the database of short (one-line) descriptions of
commands and returns a list of descriptions containing that string.
Only complete word matches are returned.
See
.BR whatis (1).
This URI scheme is unique to UNIX-like systems (such as Linux)
and is not currently registered by the IETF.
.PP
.B "ghelp \- GNOME help documentation"
.PP
.RI ghelp: name-of-application
.PP
This loads GNOME help for the given application.
Note that not much documentation currently exists in this format.
.PP
.B "ldap \- Lightweight Directory Access Protocol"
.PP
.RI ldap:// hostport
.br
.RI ldap:// hostport /
.br
.RI ldap:// hostport / dn
.br
.RI ldap:// hostport / dn ? attributes
.br
.RI ldap:// hostport / dn ? attributes ? scope
.br
.RI ldap:// hostport / dn ? attributes ? scope ? filter
.br
.RI ldap:// hostport / dn ? attributes ? scope ? filter ? extensions
.PP
This scheme supports queries to the
Lightweight Directory Access Protocol (LDAP), a protocol for querying
a set of servers for hierarchically organized information
(such as people and computing resources).
See
.UR http://www.ietf.org\:/rfc\:/rfc2255.txt
RFC\ 2255
.UE
for more information on the LDAP URL scheme.
The components of this URL are:
.IP hostport 12
the LDAP server to query, written as a hostname optionally followed by
a colon and the port number.
The default LDAP port is TCP port 389.
If empty, the client determines which the LDAP server to use.
.IP dn
the LDAP Distinguished Name, which identifies
the base object of the LDAP search (see
.UR http://www.ietf.org\:/rfc\:/rfc2253.txt
RFC\ 2253
.UE
section 3).
.IP attributes
a comma-separated list of attributes to be returned;
see RFC\ 2251 section 4.1.5.
If omitted, all attributes should be returned.
.IP scope
specifies the scope of the search, which can be one of
"base" (for a base object search), "one" (for a one-level search),
or "sub" (for a subtree search).
If scope is omitted, "base" is assumed.
.IP filter
specifies the search filter (subset of entries
to return).
If omitted, all entries should be returned.
See
.UR http://www.ietf.org\:/rfc\:/rfc2254.txt
RFC\ 2254
.UE
section 4.
.IP extensions
a comma-separated list of type=value
pairs, where the =value portion may be omitted for options not
requiring it.
An extension prefixed with a \(aq!\(aq is critical
(must be supported to be valid), otherwise it is noncritical (optional).
.PP
LDAP queries are easiest to explain by example.
Here's a query that asks ldap.itd.umich.edu for information about
the University of Michigan in the U.S.:
.PP
.nf
ldap://ldap.itd.umich.edu/o=University%20of%20Michigan,c=US
.fi
.PP
To just get its postal address attribute, request:
.PP
.nf
ldap://ldap.itd.umich.edu/o=University%20of%20Michigan,c=US?postalAddress
.fi
.PP
To ask a host.com at port 6666 for information about the person
with common name (cn) "Babs Jensen" at University of Michigan, request:
.PP
.nf
ldap://host.com:6666/o=University%20of%20Michigan,c=US??sub?(cn=Babs%20Jensen)
.fi
.PP
.B "wais \- Wide Area Information Servers"
.PP
.RI wais:// hostport / database
.br
.RI wais:// hostport / database ? search
.br
.RI wais:// hostport / database / wtype / wpath
.PP
This scheme designates a WAIS database, search, or document
(see
.UR http://www.ietf.org\:/rfc\:/rfc1625.txt
IETF RFC\ 1625
.UE
for more information on WAIS).
Hostport is the hostname, optionally followed by a colon and port number
(the default port number is 210).
.PP
The first form designates a WAIS database for searching.
The second form designates a particular search of the WAIS database
.IR database .
The third form designates a particular document within a WAIS
database to be retrieved.
.I wtype
is the WAIS designation of the type of the object and
.I wpath
is the WAIS document-id.
.PP
.B "other schemes"
.PP
There are many other URI schemes.
Most tools that accept URIs support a set of internal URIs
(e.g., Mozilla has the about: scheme for internal information,
and the GNOME help browser has the toc: scheme for various starting
locations).
There are many schemes that have been defined but are not as widely
used at the current time
(e.g., prospero).
The nntp: scheme is deprecated in favor of the news: scheme.
URNs are to be supported by the urn: scheme, with a hierarchical name space
(e.g., urn:ietf:... would identify IETF documents); at this time
URNs are not widely implemented.
Not all tools support all schemes.
.SS Character encoding
.PP
URIs use a limited number of characters so that they can be
typed in and used in a variety of situations.
.PP
The following characters are reserved, that is, they may appear in a
URI but their use is limited to their reserved purpose
(conflicting data must be escaped before forming the URI):
.IP
   ; / ? : @ & = + $ ,
.PP
Unreserved characters may be included in a URI.
Unreserved characters
include uppercase and lowercase English letters,
decimal digits, and the following
limited set of punctuation marks and symbols:
.IP
 \- _ . ! ~ * ' ( )
.PP
All other characters must be escaped.
An escaped octet is encoded as a character triplet, consisting of the
percent character "%" followed by the two hexadecimal digits
representing the octet code (you can use uppercase or lowercase letters
for the hexadecimal digits).
For example, a blank space must be escaped
as "%20", a tab character as "%09", and the "&" as "%26".
Because the percent "%" character always has the reserved purpose of
being the escape indicator, it must be escaped as "%25".
It is common practice to escape space characters as the plus symbol (+)
in query text; this practice isn't uniformly defined
in the relevant RFCs (which recommend %20 instead) but any tool accepting
URIs with query text should be prepared for them.
A URI is always shown in its "escaped" form.
.PP
Unreserved characters can be escaped without changing the semantics
of the URI, but this should not be done unless the URI is being used
in a context that does not allow the unescaped character to appear.
For example, "%7e" is sometimes used instead of "~" in an HTTP URL
path, but the two are equivalent for an HTTP URL.
.PP
For URIs which must handle characters outside the US ASCII character set,
the HTML 4.01 specification (section B.2) and
IETF RFC\ 2718 (section 2.2.5) recommend the following approach:
.IP 1. 4
translate the character sequences into UTF-8 (IETF RFC\ 2279)\(emsee
.BR utf-8 (7)\(emand
then
.IP 2.
use the URI escaping mechanism, that is,
use the %HH encoding for unsafe octets.
.SS Writing a URI
When written, URIs should be placed inside double quotes
(e.g., "http://www.kernelnotes.org"),
enclosed in angle brackets (e.g., <http://lwn.net>),
or placed on a line by themselves.
A warning for those who use double-quotes:
.B never
move extraneous punctuation (such as the period ending a sentence or the
comma in a list)
inside a URI, since this will change the value of the URI.
Instead, use angle brackets instead, or
switch to a quoting system that never includes extraneous characters
inside quotation marks.
This latter system, called the 'new' or 'logical' quoting system by
"Hart's Rules" and the "Oxford Dictionary for Writers and Editors",
is preferred practice in Great Britain and hackers worldwide
(see the
Jargon File's section on Hacker Writing Style,
.UR http://www.fwi.uva.nl\:/~mes\:/jargon\:/h\:/HackerWritingStyle.html
.UE ,
for more information).
Older documents suggested inserting the prefix "URL:"
just before the URI, but this form has never caught on.
.PP
The URI syntax was designed to be unambiguous.
However, as URIs have become commonplace, traditional media
(television, radio, newspapers, billboards, etc.) have increasingly
used abbreviated URI references consisting of
only the authority and path portions of the identified resource
(e.g., <www.w3.org/Addressing>).
Such references are primarily
intended for human interpretation rather than machine, with the
assumption that context-based heuristics are sufficient to complete
the URI (e.g., hostnames beginning with "www" are likely to have
a URI prefix of "http://" and hostnames beginning with "ftp" likely
to have a prefix of "ftp://").
Many client implementations heuristically resolve these references.
Such heuristics may
change over time, particularly when new schemes are introduced.
Since an abbreviated URI has the same syntax as a relative URL path,
abbreviated URI references cannot be used where relative URIs are
permitted, and can be used only when there is no defined base
(such as in dialog boxes).
Don't use abbreviated URIs as hypertext links inside a document;
use the standard format as described here.
.SH CONFORMING TO
.PP
.UR http://www.ietf.org\:/rfc\:/rfc2396.txt
(IETF RFC\ 2396)
.UE ,
.UR http://www.w3.org\:/TR\:/REC-html40
(HTML 4.0)
.UE .
.SH NOTES
Any tool accepting URIs (e.g., a web browser) on a Linux system should
be able to handle (directly or indirectly) all of the
schemes described here, including the man: and info: schemes.
Handling them by invoking some other program is
fine and in fact encouraged.
.PP
Technically the fragment isn't part of the URI.
.PP
For information on how to embed URIs (including URLs) in a data format,
see documentation on that format.
HTML uses the format <A HREF="\fIuri\fP">
.I text
</A>.
Texinfo files use the format @uref{\fIuri\fP}.
Man and mdoc have the recently added UR macro, or just include the
URI in the text (viewers should be able to detect :// as part of a URI).
.PP
The GNOME and KDE desktop environments currently vary in the URIs
they accept, in particular in their respective help browsers.
To list man pages, GNOME uses <toc:man> while KDE uses <man:(index)>, and
to list info pages, GNOME uses <toc:info> while KDE uses <info:(dir)>
(the author of this man page prefers the KDE approach here, though a more
regular format would be even better).
In general, KDE uses <file:/cgi-bin/> as a prefix to a set of generated
files.
KDE prefers documentation in HTML, accessed via the
<file:/cgi-bin/helpindex>.
GNOME prefers the ghelp scheme to store and find documentation.
Neither browser handles file: references to directories at the time
of this writing, making it difficult to refer to an entire directory with
a browsable URI.
As noted above, these environments differ in how they handle the
info: scheme, probably the most important variation.
It is expected that GNOME and KDE
will converge to common URI formats, and a future
version of this man page will describe the converged result.
Efforts to aid this convergence are encouraged.
.SS Security
.PP
A URI does not in itself pose a security threat.
There is no general guarantee that a URL, which at one time
located a given resource, will continue to do so.
Nor is there any
guarantee that a URL will not locate a different resource at some
later point in time; such a guarantee can be
obtained only from the person(s) controlling that namespace and the
resource in question.
.PP
It is sometimes possible to construct a URL such that an attempt to
perform a seemingly harmless operation, such as the
retrieval of an entity associated with the resource, will in fact
cause a possibly damaging remote operation to occur.
The unsafe URL
is typically constructed by specifying a port number other than that
reserved for the network protocol in question.
The client unwittingly contacts a site that is in fact
running a different protocol.
The content of the URL contains instructions that, when
interpreted according to this other protocol, cause an unexpected
operation.
An example has been the use of a gopher URL to cause an
unintended or impersonating message to be sent via a SMTP server.
.PP
Caution should be used when using any URL that specifies a port
number other than the default for the protocol, especially when it is
a number within the reserved space.
.PP
Care should be taken when a URI contains escaped delimiters for a
given protocol (for example, CR and LF characters for telnet
protocols) that these are not unescaped before transmission.
This might violate the protocol, but avoids the potential for such
characters to be used to simulate an extra operation or parameter in
that protocol, which might lead to an unexpected and possibly harmful
remote operation to be performed.
.PP
It is clearly unwise to use a URI that contains a password which is
intended to be secret.
In particular, the use of a password within
the "userinfo" component of a URI is strongly recommended against except
in those rare cases where the "password" parameter is intended to be public.
.SH BUGS
.PP
Documentation may be placed in a variety of locations, so there
currently isn't a good URI scheme for general online documentation
in arbitrary formats.
References of the form
<file:///usr/doc/ZZZ> don't work because different distributions and
local installation requirements may place the files in different
directories
(it may be in /usr/doc, or /usr/local/doc, or /usr/share,
or somewhere else).
Also, the directory ZZZ usually changes when a version changes
(though filename globbing could partially overcome this).
Finally, using the file: scheme doesn't easily support people
who dynamically load documentation from the Internet (instead of
loading the files onto a local filesystem).
A future URI scheme may be added (e.g., "userdoc:") to permit
programs to include cross-references to more detailed documentation
without having to know the exact location of that documentation.
Alternatively, a future version of the filesystem specification may
specify file locations sufficiently so that the file: scheme will
be able to locate documentation.
.PP
Many programs and file formats don't include a way to incorporate
or implement links using URIs.
.PP
Many programs can't handle all of these different URI formats; there
should be a standard mechanism to load an arbitrary URI that automatically
detects the users' environment (e.g., text or graphics,
desktop environment, local user preferences, and currently executing
tools) and invokes the right tool for any URI.
.\" .SH AUTHOR
.\" David A. Wheeler (dwheeler@dwheeler.com) wrote this man page.
.SH SEE ALSO
.BR lynx (1),
.BR man2html (1),
.BR mailaddr (7),
.BR utf-8 (7)

.UR http://www.ietf.org\:/rfc\:/rfc2255.txt
IETF RFC\ 2255
.UE
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (c) 2013, 2014 by Michael Kerrisk <mtk.manpages@gmail.com>
.\" and Copyright (c) 2012, 2014 by Eric W. Biederman <ebiederm@xmission.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\"
.TH USER_NAMESPACES 7 2015-03-29 "Linux" "Linux Programmer's Manual"
.SH NAME
user_namespaces \- overview of Linux user namespaces
.SH DESCRIPTION
For an overview of namespaces, see
.BR namespaces (7).

User namespaces isolate security-related identifiers and attributes,
in particular,
user IDs and group IDs (see
.BR credentials (7)),
the root directory,
keys (see
.BR keyctl (2)),
.\" FIXME: This page says very little about the interaction
.\" of user namespaces and keys. Add something on this topic.
and capabilities (see
.BR capabilities (7)).
A process's user and group IDs can be different
inside and outside a user namespace.
In particular,
a process can have a normal unprivileged user ID outside a user namespace
while at the same time having a user ID of 0 inside the namespace;
in other words,
the process has full privileges for operations inside the user namespace,
but is unprivileged for operations outside the namespace.
.\"
.\" ============================================================
.\"
.SS Nested namespaces, namespace membership
User namespaces can be nested;
that is, each user namespace\(emexcept the initial ("root")
namespace\(emhas a parent user namespace,
and can have zero or more child user namespaces.
The parent user namespace is the user namespace
of the process that creates the user namespace via a call to
.BR unshare (2)
or
.BR clone (2)
with the
.BR CLONE_NEWUSER
flag.

The kernel imposes (since version 3.11) a limit of 32 nested levels of
.\" commit 8742f229b635bf1c1c84a3dfe5e47c814c20b5c8
user namespaces.
.\" FIXME Explain the rationale for this limit. (What is the rationale?)
Calls to
.BR unshare (2)
or
.BR clone (2)
that would cause this limit to be exceeded fail with the error
.BR EUSERS .

Each process is a member of exactly one user namespace.
A process created via
.BR fork (2)
or
.BR clone (2)
without the
.BR CLONE_NEWUSER
flag is a member of the same user namespace as its parent.
A single-threaded process can join another user namespace with
.BR setns (2)
if it has the
.BR CAP_SYS_ADMIN
in that namespace;
upon doing so, it gains a full set of capabilities in that namespace.

A call to
.BR clone (2)
or
.BR unshare (2)
with the
.BR CLONE_NEWUSER
flag makes the new child process (for
.BR clone (2))
or the caller (for
.BR unshare (2))
a member of the new user namespace created by the call.
.\"
.\" ============================================================
.\"
.SS Capabilities
The child process created by
.BR clone (2)
with the
.BR CLONE_NEWUSER
flag starts out with a complete set
of capabilities in the new user namespace.
Likewise, a process that creates a new user namespace using
.BR unshare (2)
or joins an existing user namespace using
.BR setns (2)
gains a full set of capabilities in that namespace.
On the other hand,
that process has no capabilities in the parent (in the case of
.BR clone (2))
or previous (in the case of
.BR unshare (2)
and
.BR setns (2))
user namespace,
even if the new namespace is created or joined by the root user
(i.e., a process with user ID 0 in the root namespace).

Note that a call to
.BR execve (2)
will cause a process's capabilities to be recalculated in the usual way (see
.BR capabilities (7)),
so that usually,
unless it has a user ID of 0 within the namespace or the executable file
has a nonempty inheritable capabilities mask,
it will lose all capabilities.
See the discussion of user and group ID mappings, below.

A call to
.BR clone (2),
.BR unshare (2),
or
.BR setns (2)
using the
.BR CLONE_NEWUSER
flag sets the "securebits" flags
(see
.BR capabilities (7))
to their default values (all flags disabled) in the child (for
.BR clone (2))
or caller (for
.BR unshare (2),
or
.BR setns (2)).
Note that because the caller no longer has capabilities
in its original user namespace after a call to
.BR setns (2),
it is not possible for a process to reset its "securebits" flags while
retaining its user namespace membership by using a pair of
.BR setns (2)
calls to move to another user namespace and then return to
its original user namespace.

Having a capability inside a user namespace
permits a process to perform operations (that require privilege)
only on resources governed by that namespace.
The rules for determining whether or not a process has a capability
in a particular user namespace are as follows:
.IP 1. 3
A process has a capability inside a user namespace
if it is a member of that namespace and
it has the capability in its effective capability set.
A process can gain capabilities in its effective capability
set in various ways.
For example, it may execute a set-user-ID program or an
executable with associated file capabilities.
In addition,
a process may gain capabilities via the effect of
.BR clone (2),
.BR unshare (2),
or
.BR setns (2),
as already described.
.\" In the 3.8 sources, see security/commoncap.c::cap_capable():
.IP 2.
If a process has a capability in a user namespace,
then it has that capability in all child (and further removed descendant)
namespaces as well.
.IP 3.
.\" * The owner of the user namespace in the parent of the
.\" * user namespace has all caps.
When a user namespace is created, the kernel records the effective
user ID of the creating process as being the "owner" of the namespace.
.\" (and likewise associates the effective group ID of the creating process
.\" with the namespace).
A process that resides
in the parent of the user namespace
.\" See kernel commit 520d9eabce18edfef76a60b7b839d54facafe1f9 for a fix
.\" on this point
and whose effective user ID matches the owner of the namespace
has all capabilities in the namespace.
.\"     This includes the case where the process executes a set-user-ID
.\"     program that confers the effective UID of the creator of the namespace.
By virtue of the previous rule,
this means that the process has all capabilities in all
further removed descendant user namespaces as well.
.\"
.\" ============================================================
.\"
.SS Interaction of user namespaces and other types of namespaces
Starting in Linux 3.8, unprivileged processes can create user namespaces,
and mount, PID, IPC, network, and UTS namespaces can be created with just the
.B CAP_SYS_ADMIN
capability in the caller's user namespace.

When a non-user-namespace is created,
it is owned by the user namespace in which the creating process
was a member at the time of the creation of the namespace.
Actions on the non-user-namespace
require capabilities in the corresponding user namespace.

If
.BR CLONE_NEWUSER
is specified along with other
.B CLONE_NEW*
flags in a single
.BR clone (2)
or
.BR unshare (2)
call, the user namespace is guaranteed to be created first,
giving the child
.RB ( clone (2))
or caller
.RB ( unshare (2))
privileges over the remaining namespaces created by the call.
Thus, it is possible for an unprivileged caller to specify this combination
of flags.

When a new IPC, mount, network, PID, or UTS namespace is created via
.BR clone (2)
or
.BR unshare (2),
the kernel records the user namespace of the creating process against
the new namespace.
(This association can't be changed.)
When a process in the new namespace subsequently performs
privileged operations that operate on global
resources isolated by the namespace,
the permission checks are performed according to the process's capabilities
in the user namespace that the kernel associated with the new namespace.
.\"
.\" ============================================================
.\"
.SS Restrictions on mount namespaces

Note the following points with respect to mount namespaces:
.IP * 3
A mount namespace has an owner user namespace.
A mount namespace whose owner user namespace is different from
the owner user namespace of its parent mount namespace is
considered a less privileged mount namespace.
.IP *
When creating a less privileged mount namespace,
shared mounts are reduced to slave mounts.
This ensures that mappings performed in less
privileged mount namespaces will not propagate to more privileged
mount namespaces.
.IP *
.\" FIXME .
.\"	What does "come as a single unit from more privileged mount" mean?
Mounts that come as a single unit from more privileged mount are
locked together and may not be separated in a less privileged mount
namespace.
(The
.BR unshare (2)
.B CLONE_NEWNS
operation brings across all of the mounts from the original
mount namespace as a single unit,
and recursive mounts that propagate between
mount namespaces propagate as a single unit.)
.IP *
The
.BR mount (2)
flags
.BR MS_RDONLY ,
.BR MS_NOSUID ,
.BR MS_NOEXEC ,
and the "atime" flags
.RB ( MS_NOATIME ,
.BR MS_NODIRATIME ,
.BR MS_RELATIME )
settings become locked
.\" commit 9566d6742852c527bf5af38af5cbb878dad75705
.\" Author: Eric W. Biederman <ebiederm@xmission.com>
.\" Date:   Mon Jul 28 17:26:07 2014 -0700
.\"
.\"      mnt: Correct permission checks in do_remount
.\"
when propagated from a more privileged to
a less privileged mount namespace,
and may not be changed in the less privileged mount namespace.
.IP *
.\" (As of 3.18-rc1 (in Al Viro's 2014-08-30 vfs.git#for-next tree))
A file or directory that is a mount point in one namespace that is not
a mount point in another namespace, may be renamed, unlinked, or removed
.RB ( rmdir (2))
in the mount namespace in which it is not a mount point
(subject to the usual permission checks).
.IP
Previously, attempting to unlink, rename, or remove a file or directory
that was a mount point in another mount namespace would result in the error
.BR EBUSY .
That behavior had technical problems of enforcement (e.g., for NFS)
and permitted denial-of-service attacks against more privileged users.
(i.e., preventing individual files from being updated
by bind mounting on top of them).
.\"
.\" ============================================================
.\"
.SS User and group ID mappings: uid_map and gid_map
When a user namespace is created,
it starts out without a mapping of user IDs (group IDs)
to the parent user namespace.
The
.IR /proc/[pid]/uid_map
and
.IR /proc/[pid]/gid_map
files (available since Linux 3.5)
.\" commit 22d917d80e842829d0ca0a561967d728eb1d6303
expose the mappings for user and group IDs
inside the user namespace for the process
.IR pid .
These files can be read to view the mappings in a user namespace and
written to (once) to define the mappings.

The description in the following paragraphs explains the details for
.IR uid_map ;
.IR gid_map
is exactly the same,
but each instance of "user ID" is replaced by "group ID".

The
.I uid_map
file exposes the mapping of user IDs from the user namespace
of the process
.IR pid
to the user namespace of the process that opened
.IR uid_map
(but see a qualification to this point below).
In other words, processes that are in different user namespaces
will potentially see different values when reading from a particular
.I uid_map
file, depending on the user ID mappings for the user namespaces
of the reading processes.

Each line in the
.I uid_map
file specifies a 1-to-1 mapping of a range of contiguous
user IDs between two user namespaces.
(When a user namespace is first created, this file is empty.)
The specification in each line takes the form of
three numbers delimited by white space.
The first two numbers specify the starting user ID in
each of the two user namespaces.
The third number specifies the length of the mapped range.
In detail, the fields are interpreted as follows:
.IP (1) 4
The start of the range of user IDs in
the user namespace of the process
.IR pid .
.IP (2)
The start of the range of user
IDs to which the user IDs specified by field one map.
How field two is interpreted depends on whether the process that opened
.I uid_map
and the process
.IR pid
are in the same user namespace, as follows:
.RS
.IP a) 3
If the two processes are in different user namespaces:
field two is the start of a range of
user IDs in the user namespace of the process that opened
.IR uid_map .
.IP b)
If the two processes are in the same user namespace:
field two is the start of the range of
user IDs in the parent user namespace of the process
.IR pid .
This case enables the opener of
.I uid_map
(the common case here is opening
.IR /proc/self/uid_map )
to see the mapping of user IDs into the user namespace of the process
that created this user namespace.
.RE
.IP (3)
The length of the range of user IDs that is mapped between the two
user namespaces.
.PP
System calls that return user IDs (group IDs)\(emfor example,
.BR getuid (2),
.BR getgid (2),
and the credential fields in the structure returned by
.BR stat (2)\(emreturn
the user ID (group ID) mapped into the caller's user namespace.

When a process accesses a file, its user and group IDs
are mapped into the initial user namespace for the purpose of permission
checking and assigning IDs when creating a file.
When a process retrieves file user and group IDs via
.BR stat (2),
the IDs are mapped in the opposite direction,
to produce values relative to the process user and group ID mappings.

The initial user namespace has no parent namespace,
but, for consistency, the kernel provides dummy user and group
ID mapping files for this namespace.
Looking at the
.I uid_map
file
.RI ( gid_map
is the same) from a shell in the initial namespace shows:

.in +4n
.nf
$ \fBcat /proc/$$/uid_map\fP
         0          0 4294967295
.fi
.in

This mapping tells us
that the range starting at user ID 0 in this namespace
maps to a range starting at 0 in the (nonexistent) parent namespace,
and the length of the range is the largest 32-bit unsigned integer.
This leaves 4294967295 (the 32-bit signed \-1 value) unmapped.
This is deliberate:
.IR "(uid_t)\ \-1"
is used in several interfaces (e.g.,
.BR setreuid (2))
as a way to specify "no user ID".
Leaving
.IR "(uid_t)\ \-1"
unmapped and unusable guarantees that there will be no
confusion when using these interfaces.
.\"
.\" ============================================================
.\"
.SS Defining user and group ID mappings: writing to uid_map and gid_map
.PP
After the creation of a new user namespace, the
.I uid_map
file of
.I one
of the processes in the namespace may be written to
.I once
to define the mapping of user IDs in the new user namespace.
An attempt to write more than once to a
.I uid_map
file in a user namespace fails with the error
.BR EPERM .
Similar rules apply for
.I gid_map
files.

The lines written to
.IR uid_map
.RI ( gid_map )
must conform to the following rules:
.IP * 3
The three fields must be valid numbers,
and the last field must be greater than 0.
.IP *
Lines are terminated by newline characters.
.IP *
There is an (arbitrary) limit on the number of lines in the file.
As at Linux 3.18, the limit is five lines.
In addition, the number of bytes written to
the file must be less than the system page size,
.\" FIXME(Eric): the restriction "less than" rather than "less than or equal"
.\" seems strangely arbitrary. Furthermore, the comment does not agree
.\" with the code in kernel/user_namespace.c. Which is correct?
and the write must be performed at the start of the file (i.e.,
.BR lseek (2)
and
.BR pwrite (2)
can't be used to write to nonzero offsets in the file).
.IP *
The range of user IDs (group IDs)
specified in each line cannot overlap with the ranges
in any other lines.
In the initial implementation (Linux 3.8), this requirement was
satisfied by a simplistic implementation that imposed the further
requirement that
the values in both field 1 and field 2 of successive lines must be
in ascending numerical order,
which prevented some otherwise valid maps from being created.
Linux 3.9 and later
.\" commit 0bd14b4fd72afd5df41e9fd59f356740f22fceba
fix this limitation, allowing any valid set of nonoverlapping maps.
.IP *
At least one line must be written to the file.
.PP
Writes that violate the above rules fail with the error
.BR EINVAL .

In order for a process to write to the
.I /proc/[pid]/uid_map
.RI ( /proc/[pid]/gid_map )
file, all of the following requirements must be met:
.IP 1. 3
The writing process must have the
.BR CAP_SETUID
.RB ( CAP_SETGID )
capability in the user namespace of the process
.IR pid .
.IP 2.
The writing process must either be in the user namespace of the process
.I pid
or be in the parent user namespace of the process
.IR pid .
.IP 3.
The mapped user IDs (group IDs) must in turn have a mapping
in the parent user namespace.
.IP 4.
One of the following two cases applies:
.RS
.IP * 3
.IR Either
the writing process has the
.BR CAP_SETUID
.RB ( CAP_SETGID )
capability in the
.I parent
user namespace.
.RS
.IP + 3
No further restrictions apply:
the process can make mappings to arbitrary user IDs (group IDs)
in the parent user namespace.
.RE
.IP * 3
.IR Or
otherwise all of the following restrictions apply:
.RS
.IP + 3
The data written to
.I uid_map
.RI ( gid_map )
must consist of a single line that maps
the writing process's effective user ID
(group ID) in the parent user namespace to a user ID (group ID)
in the user namespace.
.IP +
The writing process must have the same effective user ID as the process
that created the user namespace.
.IP +
In the case of
.IR gid_map ,
use of the
.BR setgroups (2)
system call must first be denied by writing
.RI \(dq deny \(dq
to the
.I /proc/[pid]/setgroups
file (see below) before writing to
.IR gid_map .
.RE
.RE
.PP
Writes that violate the above rules fail with the error
.BR EPERM .
.\"
.\" ============================================================
.\"
.SS Interaction with system calls that change process UIDs or GIDs
In a user namespace where the
.I uid_map
file has not been written, the system calls that change user IDs will fail.
Similarly, if the
.I gid_map
file has not been written, the system calls that change group IDs will fail.
After the
.I uid_map
and
.I gid_map
files have been written, only the mapped values may be used in
system calls that change user and group IDs.

For user IDs, the relevant system calls include
.BR setuid (2),
.BR setfsuid (2),
.BR setreuid (2),
and
.BR setresuid (2).
For group IDs, the relevant system calls include
.BR setgid (2),
.BR setfsgid (2),
.BR setregid (2),
.BR setresgid (2),
and
.BR setgroups (2).

Writing
.RI \(dq deny \(dq
to the
.I /proc/[pid]/setgroups
file before writing to
.I /proc/[pid]/gid_map
.\" Things changed in Linux 3.19
.\" commit 9cc46516ddf497ea16e8d7cb986ae03a0f6b92f8
.\" commit 66d2f338ee4c449396b6f99f5e75cd18eb6df272
.\" http://lwn.net/Articles/626665/
will permanently disable
.BR setgroups (2)
in a user namespace and allow writing to
.I /proc/[pid]/gid_map
without having the
.BR CAP_SETGID
capability in the parent user namespace.
.\"
.\" ============================================================
.\"
.SS The /proc/[pid]/setgroups file
.\"
.\" commit 9cc46516ddf497ea16e8d7cb986ae03a0f6b92f8
.\" commit 66d2f338ee4c449396b6f99f5e75cd18eb6df272
.\" http://lwn.net/Articles/626665/
.\" http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-8989
.\"
The
.I /proc/[pid]/setgroups
file displays the string
.RI \(dq allow \(dq
if processes in the user namespace that contains the process
.I pid
are permitted to employ the
.BR setgroups (2)
system call; it displays
.RI \(dq deny \(dq
if
.BR setgroups (2)
is not permitted in that user namespace.
Note that regardless of the value in the
.I /proc/[pid]/setgroups
file (and regardless of the process's capabilities), calls to
.BR setgroups (2)
are also not permitted if
.IR /proc/[pid]/gid_map
has not yet been set.

A privileged process (one with the
.BR CAP_SYS_ADMIN
capability in the namespace) may write either of the strings
.RI \(dq allow \(dq
or
.RI \(dq deny \(dq
to this file
.I before
writing a group ID mapping
for this user namespace to the file
.IR /proc/[pid]/gid_map .
Writing the string
.RI \(dq deny \(dq
prevents any process in the user namespace from employing
.BR setgroups (2).

The essence of the restrictions described in the preceding
paragraph is that it is permitted to write to
.I /proc/[pid]/setgroups
only so long as calling
.BR setgroups (2)
is disallowed because
.I /proc/[pid]gid_map
has not been set.
This ensures that a process cannot transition from a state where
.BR setgroups (2)
is allowed to a state where
.BR setgroups (2)
is denied;
a process can only transition from
.BR setgroups (2)
being disallowed to
.BR setgroups (2)
being allowed.

The default value of this file in the initial user namespace is
.RI \(dq allow \(dq.

Once
.IR /proc/[pid]/gid_map
has been written to
(which has the effect of enabling
.BR setgroups (2)
in the user namespace),
it is no longer possible to disallow
.BR setgroups (2)
by writing
.RI \(dq deny \(dq.
to
.IR /proc/[pid]/setgroups
(the write fails with the error
.BR EPERM ).

A child user namespace inherits the
.IR /proc/[pid]/setgroups
setting from its parent.

If the
.I setgroups
file has the value
.RI \(dq deny \(dq,
then the
.BR setgroups (2)
system call can't subsequently be reenabled (by writing
.RI \(dq allow \(dq
to the file) in this user namespace.
(Attempts to do so will fail with the error
.BR EPERM .)
This restriction also propagates down to all child user namespaces of
this user namespace.

The
.I /proc/[pid]/setgroups
file was added in Linux 3.19,
but was backported to many earlier stable kernel series,
because it addresses a security issue.
The issue concerned files with permissions such as "rwx\-\-\-rwx".
Such files give fewer permissions to "group" than they do to "other".
This means that dropping groups using
.BR setgroups (2)
might allow a process file access that it did not formerly have.
Before the existence of user namespaces this was not a concern,
since only a privileged process (one with the
.BR CAP_SETGID
capability) could call
.BR setgroups (2).
However, with the introduction of user namespaces,
it became possible for an unprivileged process to create
a new namespace in which the user had all privileges.
This then allowed formerly unprivileged
users to drop groups and thus gain file access
that they did not previously have.
The
.I /proc/[pid]/setgroups
file was added to address this security issue,
by denying any pathway for an unprivileged process to drop groups with
.BR setgroups (2).
.\"
.\" /proc/PID/setgroups
.\"	[allow == setgroups() is allowed, "deny" == setgroups() is disallowed]
.\"	* Can write if have CAP_SYS_ADMIN in NS
.\"	* Must write BEFORE writing to /proc/PID/gid_map
.\"
.\" setgroups()
.\"	* Must already have written to gid_maps
.\"	* /proc/PID/setgroups must be "allow"
.\"
.\" /proc/PID/gid_map -- writing
.\"	* Must already have written "deny" to /proc/PID/setgroups
.\"
.\" ============================================================
.\"
.SS Unmapped user and group IDs
.PP
There are various places where an unmapped user ID (group ID)
may be exposed to user space.
For example, the first process in a new user namespace may call
.BR getuid ()
before a user ID mapping has been defined for the namespace.
In most such cases, an unmapped user ID is converted
.\" from_kuid_munged(), from_kgid_munged()
to the overflow user ID (group ID);
the default value for the overflow user ID (group ID) is 65534.
See the descriptions of
.IR /proc/sys/kernel/overflowuid
and
.IR /proc/sys/kernel/overflowgid
in
.BR proc (5).

The cases where unmapped IDs are mapped in this fashion include
system calls that return user IDs
.RB ( getuid (2),
.BR getgid (2),
and similar),
credentials passed over a UNIX domain socket,
.\" also SO_PEERCRED
credentials returned by
.BR stat (2),
.BR waitid (2),
and the System V IPC "ctl"
.B IPC_STAT
operations,
credentials exposed by
.IR /proc/PID/status
and the files in
.IR /proc/sysvipc/* ,
credentials returned via the
.I si_uid
field in the
.I siginfo_t
received with a signal (see
.BR sigaction (2)),
credentials written to the process accounting file (see
.BR acct (5)),
and credentials returned with POSIX message queue notifications (see
.BR mq_notify (3)).

There is one notable case where unmapped user and group IDs are
.I not
.\" from_kuid(), from_kgid()
.\" Also F_GETOWNER_UIDS is an exception
converted to the corresponding overflow ID value.
When viewing a
.I uid_map
or
.I gid_map
file in which there is no mapping for the second field,
that field is displayed as 4294967295 (\-1 as an unsigned integer);
.\"
.\" ============================================================
.\"
.SS Set-user-ID and set-group-ID programs
.PP
When a process inside a user namespace executes
a set-user-ID (set-group-ID) program,
the process's effective user (group) ID inside the namespace is changed
to whatever value is mapped for the user (group) ID of the file.
However, if either the user
.I or
the group ID of the file has no mapping inside the namespace,
the set-user-ID (set-group-ID) bit is silently ignored:
the new program is executed,
but the process's effective user (group) ID is left unchanged.
(This mirrors the semantics of executing a set-user-ID or set-group-ID
program that resides on a filesystem that was mounted with the
.BR MS_NOSUID
flag, as described in
.BR mount (2).)
.\"
.\" ============================================================
.\"
.SS Miscellaneous
.PP
When a process's user and group IDs are passed over a UNIX domain socket
to a process in a different user namespace (see the description of
.B SCM_CREDENTIALS
in
.BR unix (7)),
they are translated into the corresponding values as per the
receiving process's user and group ID mappings.
.\"
.SH CONFORMING TO
Namespaces are a Linux-specific feature.
.\"
.SH NOTES
Over the years, there have been a lot of features that have been added
to the Linux kernel that have been made available only to privileged users
because of their potential to confuse set-user-ID-root applications.
In general, it becomes safe to allow the root user in a user namespace to
use those features because it is impossible, while in a user namespace,
to gain more privilege than the root user of a user namespace has.
.\"
.\" ============================================================
.\"
.SS Availability
Use of user namespaces requires a kernel that is configured with the
.B CONFIG_USER_NS
option.
User namespaces require support in a range of subsystems across
the kernel.
When an unsupported subsystem is configured into the kernel,
it is not possible to configure user namespaces support.

As at Linux 3.8, most relevant subsystems supported user namespaces,
but a number of filesystems did not have the infrastructure needed
to map user and group IDs between user namespaces.
Linux 3.9 added the required infrastructure support for many of
the remaining unsupported filesystems
(Plan 9 (9P), Andrew File System (AFS), Ceph, CIFS, CODA, NFS, and OCFS2).
Linux 3.11 added support the last of the unsupported major filesystems,
.\" commit d6970d4b726cea6d7a9bc4120814f95c09571fc3
XFS.
.\"
.SH EXAMPLE
The program below is designed to allow experimenting with
user namespaces, as well as other types of namespaces.
It creates namespaces as specified by command-line options and then executes
a command inside those namespaces.
The comments and
.I usage()
function inside the program provide a full explanation of the program.
The following shell session demonstrates its use.

First, we look at the run-time environment:

.in +4n
.nf
$ \fBuname -rs\fP     # Need Linux 3.8 or later
Linux 3.8.0
$ \fBid -u\fP         # Running as unprivileged user
1000
$ \fBid -g\fP
1000
.fi
.in

Now start a new shell in new user
.RI ( \-U ),
mount
.RI ( \-m ),
and PID
.RI ( \-p )
namespaces, with user ID
.RI ( \-M )
and group ID
.RI ( \-G )
1000 mapped to 0 inside the user namespace:

.in +4n
.nf
$ \fB./userns_child_exec -p -m -U -M '0 1000 1' -G '0 1000 1' bash\fP
.fi
.in

The shell has PID 1, because it is the first process in the new
PID namespace:

.in +4n
.nf
bash$ \fBecho $$\fP
1
.fi
.in

Inside the user namespace, the shell has user and group ID 0,
and a full set of permitted and effective capabilities:

.in +4n
.nf
bash$ \fBcat /proc/$$/status | egrep '^[UG]id'\fP
Uid:	0	0	0	0
Gid:	0	0	0	0
bash$ \fBcat /proc/$$/status | egrep '^Cap(Prm|Inh|Eff)'\fP
CapInh:	0000000000000000
CapPrm:	0000001fffffffff
CapEff:	0000001fffffffff
.fi
.in

Mounting a new
.I /proc
filesystem and listing all of the processes visible
in the new PID namespace shows that the shell can't see
any processes outside the PID namespace:

.in +4n
.nf
bash$ \fBmount -t proc proc /proc\fP
bash$ \fBps ax\fP
  PID TTY      STAT   TIME COMMAND
    1 pts/3    S      0:00 bash
   22 pts/3    R+     0:00 ps ax
.fi
.in
.SS Program source
\&
.nf
/* userns_child_exec.c

   Licensed under GNU General Public License v2 or later

   Create a child process that executes a shell command in new
   namespace(s); allow UID and GID mappings to be specified when
   creating a user namespace.
*/
#define _GNU_SOURCE
#include <sched.h>
#include <unistd.h>
#include <stdlib.h>
#include <sys/wait.h>
#include <signal.h>
#include <fcntl.h>
#include <stdio.h>
#include <string.h>
#include <limits.h>
#include <errno.h>

/* A simple error\-handling function: print an error message based
   on the value in \(aqerrno\(aq and terminate the calling process */

#define errExit(msg)    do { perror(msg); exit(EXIT_FAILURE); \\
                        } while (0)

struct child_args {
    char **argv;        /* Command to be executed by child, with args */
    int    pipe_fd[2];  /* Pipe used to synchronize parent and child */
};

static int verbose;

static void
usage(char *pname)
{
    fprintf(stderr, "Usage: %s [options] cmd [arg...]\\n\\n", pname);
    fprintf(stderr, "Create a child process that executes a shell "
            "command in a new user namespace,\\n"
            "and possibly also other new namespace(s).\\n\\n");
    fprintf(stderr, "Options can be:\\n\\n");
#define fpe(str) fprintf(stderr, "    %s", str);
    fpe("\-i          New IPC namespace\\n");
    fpe("\-m          New mount namespace\\n");
    fpe("\-n          New network namespace\\n");
    fpe("\-p          New PID namespace\\n");
    fpe("\-u          New UTS namespace\\n");
    fpe("\-U          New user namespace\\n");
    fpe("\-M uid_map  Specify UID map for user namespace\\n");
    fpe("\-G gid_map  Specify GID map for user namespace\\n");
    fpe("\-z          Map user\(aqs UID and GID to 0 in user namespace\\n");
    fpe("            (equivalent to: \-M \(aq0 <uid> 1\(aq \-G \(aq0 <gid> 1\(aq)\\n");
    fpe("\-v          Display verbose messages\\n");
    fpe("\\n");
    fpe("If \-z, \-M, or \-G is specified, \-U is required.\\n");
    fpe("It is not permitted to specify both \-z and either \-M or \-G.\\n");
    fpe("\\n");
    fpe("Map strings for \-M and \-G consist of records of the form:\\n");
    fpe("\\n");
    fpe("    ID\-inside\-ns   ID\-outside\-ns   len\\n");
    fpe("\\n");
    fpe("A map string can contain multiple records, separated"
        " by commas;\\n");
    fpe("the commas are replaced by newlines before writing"
        " to map files.\\n");

    exit(EXIT_FAILURE);
}

/* Update the mapping file \(aqmap_file\(aq, with the value provided in
   \(aqmapping\(aq, a string that defines a UID or GID mapping. A UID or
   GID mapping consists of one or more newline\-delimited records
   of the form:

       ID_inside\-ns    ID\-outside\-ns   length

   Requiring the user to supply a string that contains newlines is
   of course inconvenient for command\-line use. Thus, we permit the
   use of commas to delimit records in this string, and replace them
   with newlines before writing the string to the file. */

static void
update_map(char *mapping, char *map_file)
{
    int fd, j;
    size_t map_len;     /* Length of \(aqmapping\(aq */

    /* Replace commas in mapping string with newlines */

    map_len = strlen(mapping);
    for (j = 0; j < map_len; j++)
        if (mapping[j] == \(aq,\(aq)
            mapping[j] = \(aq\\n\(aq;

    fd = open(map_file, O_RDWR);
    if (fd == \-1) {
        fprintf(stderr, "ERROR: open %s: %s\\n", map_file,
                strerror(errno));
        exit(EXIT_FAILURE);
    }

    if (write(fd, mapping, map_len) != map_len) {
        fprintf(stderr, "ERROR: write %s: %s\\n", map_file,
                strerror(errno));
        exit(EXIT_FAILURE);
    }

    close(fd);
}

/* Linux 3.19 made a change in the handling of setgroups(2) and the
   \(aqgid_map\(aq file to address a security issue. The issue allowed
   *unprivileged* users to employ user namespaces in order to drop
   The upshot of the 3.19 changes is that in order to update the
   \(aqgid_maps\(aq file, use of the setgroups() system call in this
   user namespace must first be disabled by writing "deny" to one of
   the /proc/PID/setgroups files for this namespace.  That is the
   purpose of the following function. */

static void
proc_setgroups_write(pid_t child_pid, char *str)
{
    char setgroups_path[PATH_MAX];
    int fd;

    snprintf(setgroups_path, PATH_MAX, "/proc/%ld/setgroups",
            (long) child_pid);

    fd = open(setgroups_path, O_RDWR);
    if (fd == \-1) {

        /* We may be on a system that doesn\(aqt support
           /proc/PID/setgroups. In that case, the file won\(aqt exist,
           and the system won\(aqt impose the restrictions that Linux 3.19
           added. That\(aqs fine: we don\(aqt need to do anything in order
           to permit \(aqgid_map\(aq to be updated.

           However, if the error from open() was something other than
           the ENOENT error that is expected for that case,  let the
           user know. */

        if (errno != ENOENT)
            fprintf(stderr, "ERROR: open %s: %s\\n", setgroups_path,
                strerror(errno));
        return;
    }

    if (write(fd, str, strlen(str)) == \-1)
        fprintf(stderr, "ERROR: write %s: %s\\n", setgroups_path,
            strerror(errno));

    close(fd);
}

static int              /* Start function for cloned child */
childFunc(void *arg)
{
    struct child_args *args = (struct child_args *) arg;
    char ch;

    /* Wait until the parent has updated the UID and GID mappings.
       See the comment in main(). We wait for end of file on a
       pipe that will be closed by the parent process once it has
       updated the mappings. */

    close(args\->pipe_fd[1]);    /* Close our descriptor for the write
                                   end of the pipe so that we see EOF
                                   when parent closes its descriptor */
    if (read(args\->pipe_fd[0], &ch, 1) != 0) {
        fprintf(stderr,
                "Failure in child: read from pipe returned != 0\\n");
        exit(EXIT_FAILURE);
    }

    /* Execute a shell command */

    printf("About to exec %s\\n", args\->argv[0]);
    execvp(args\->argv[0], args\->argv);
    errExit("execvp");
}

#define STACK_SIZE (1024 * 1024)

static char child_stack[STACK_SIZE];    /* Space for child\(aqs stack */

int
main(int argc, char *argv[])
{
    int flags, opt, map_zero;
    pid_t child_pid;
    struct child_args args;
    char *uid_map, *gid_map;
    const int MAP_BUF_SIZE = 100;
    char map_buf[MAP_BUF_SIZE];
    char map_path[PATH_MAX];

    /* Parse command\-line options. The initial \(aq+\(aq character in
       the final getopt() argument prevents GNU\-style permutation
       of command\-line options. That\(aqs useful, since sometimes
       the \(aqcommand\(aq to be executed by this program itself
       has command\-line options. We don\(aqt want getopt() to treat
       those as options to this program. */

    flags = 0;
    verbose = 0;
    gid_map = NULL;
    uid_map = NULL;
    map_zero = 0;
    while ((opt = getopt(argc, argv, "+imnpuUM:G:zv")) != \-1) {
        switch (opt) {
        case \(aqi\(aq: flags |= CLONE_NEWIPC;        break;
        case \(aqm\(aq: flags |= CLONE_NEWNS;         break;
        case \(aqn\(aq: flags |= CLONE_NEWNET;        break;
        case \(aqp\(aq: flags |= CLONE_NEWPID;        break;
        case \(aqu\(aq: flags |= CLONE_NEWUTS;        break;
        case \(aqv\(aq: verbose = 1;                  break;
        case \(aqz\(aq: map_zero = 1;                 break;
        case \(aqM\(aq: uid_map = optarg;             break;
        case \(aqG\(aq: gid_map = optarg;             break;
        case \(aqU\(aq: flags |= CLONE_NEWUSER;       break;
        default:  usage(argv[0]);
        }
    }

    /* \-M or \-G without \-U is nonsensical */

    if (((uid_map != NULL || gid_map != NULL || map_zero) &&
                !(flags & CLONE_NEWUSER)) ||
            (map_zero && (uid_map != NULL || gid_map != NULL)))
        usage(argv[0]);

    args.argv = &argv[optind];

    /* We use a pipe to synchronize the parent and child, in order to
       ensure that the parent sets the UID and GID maps before the child
       calls execve(). This ensures that the child maintains its
       capabilities during the execve() in the common case where we
       want to map the child\(aqs effective user ID to 0 in the new user
       namespace. Without this synchronization, the child would lose
       its capabilities if it performed an execve() with nonzero
       user IDs (see the capabilities(7) man page for details of the
       transformation of a process\(aqs capabilities during execve()). */

    if (pipe(args.pipe_fd) == \-1)
        errExit("pipe");

    /* Create the child in new namespace(s) */

    child_pid = clone(childFunc, child_stack + STACK_SIZE,
                      flags | SIGCHLD, &args);
    if (child_pid == \-1)
        errExit("clone");

    /* Parent falls through to here */

    if (verbose)
        printf("%s: PID of child created by clone() is %ld\\n",
                argv[0], (long) child_pid);

    /* Update the UID and GID maps in the child */

    if (uid_map != NULL || map_zero) {
        snprintf(map_path, PATH_MAX, "/proc/%ld/uid_map",
                (long) child_pid);
        if (map_zero) {
            snprintf(map_buf, MAP_BUF_SIZE, "0 %ld 1", (long) getuid());
            uid_map = map_buf;
        }
        update_map(uid_map, map_path);
    }

    if (gid_map != NULL || map_zero) {
        proc_setgroups_write(child_pid, "deny");

        snprintf(map_path, PATH_MAX, "/proc/%ld/gid_map",
                (long) child_pid);
        if (map_zero) {
            snprintf(map_buf, MAP_BUF_SIZE, "0 %ld 1", (long) getgid());
            gid_map = map_buf;
        }
        update_map(gid_map, map_path);
    }

    /* Close the write end of the pipe, to signal to the child that we
       have updated the UID and GID maps */

    close(args.pipe_fd[1]);

    if (waitpid(child_pid, NULL, 0) == \-1)      /* Wait for child */
        errExit("waitpid");

    if (verbose)
        printf("%s: terminating\\n", argv[0]);

    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR newgidmap (1),      \" From the shadow package
.BR newuidmap (1),      \" From the shadow package
.BR clone (2),
.BR setns (2),
.BR unshare (2),
.BR proc (5),
.BR subgid (5),         \" From the shadow package
.BR subuid (5),         \" From the shadow package
.BR credentials (7),
.BR capabilities (7),
.BR namespaces (7),
.BR pid_namespaces (7)
.sp
The kernel source file
.IR Documentation/namespaces/resource-control.txt .
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Copyright (C) Markus Kuhn, 1996, 2001
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.\" 1995-11-26  Markus Kuhn <mskuhn@cip.informatik.uni-erlangen.de>
.\"      First version written
.\" 2001-05-11  Markus Kuhn <mgk25@cl.cam.ac.uk>
.\"      Update
.\"
.TH UTF-8 7 2014-06-13 "GNU" "Linux Programmer's Manual"
.SH NAME
UTF-8 \- an ASCII compatible multibyte Unicode encoding
.SH DESCRIPTION
The Unicode 3.0 character set occupies a 16-bit code space.
The most obvious
Unicode encoding (known as UCS-2)
consists of a sequence of 16-bit words.
Such strings can contain\(emas part of many 16-bit characters\(embytes
such as \(aq\\0\(aq or \(aq/\(aq, which have a
special meaning in filenames and other C library function arguments.
In addition, the majority of UNIX tools expect ASCII files and can't
read 16-bit words as characters without major modifications.
For these reasons,
UCS-2 is not a suitable external encoding of Unicode
in filenames, text files, environment variables, and so on.
The ISO 10646 Universal Character Set (UCS),
a superset of Unicode, occupies an even larger code
space\(em31\ bits\(emand the obvious
UCS-4 encoding for it (a sequence of 32-bit words) has the same problems.

The UTF-8 encoding of Unicode and UCS
does not have these problems and is the common way in which
Unicode is used on UNIX-style operating systems.
.SS Properties
The UTF-8 encoding has the following nice properties:
.TP 0.2i
*
UCS
characters 0x00000000 to 0x0000007f (the classic US-ASCII
characters) are encoded simply as bytes 0x00 to 0x7f (ASCII
compatibility).
This means that files and strings which contain only
7-bit ASCII characters have the same encoding under both
ASCII
and
UTF-8 .
.TP
*
All UCS characters greater than 0x7f are encoded as a multibyte sequence
consisting only of bytes in the range 0x80 to 0xfd, so no ASCII
byte can appear as part of another character and there are no
problems with, for example,  \(aq\\0\(aq or \(aq/\(aq.
.TP
*
The lexicographic sorting order of UCS-4 strings is preserved.
.TP
*
All possible 2^31 UCS codes can be encoded using UTF-8.
.TP
*
The bytes 0xc0, 0xc1, 0xfe, and 0xff are never used in the UTF-8 encoding.
.TP
*
The first byte of a multibyte sequence which represents a single non-ASCII
UCS character is always in the range 0xc2 to 0xfd and indicates how long
this multibyte sequence is.
All further bytes in a multibyte sequence
are in the range 0x80 to 0xbf.
This allows easy resynchronization and
makes the encoding stateless and robust against missing bytes.
.TP
*
UTF-8 encoded UCS characters may be up to six bytes long, however the
Unicode standard specifies no characters above 0x10ffff, so Unicode characters
can be only up to four bytes long in
UTF-8.
.SS Encoding
The following byte sequences are used to represent a character.
The sequence to be used depends on the UCS code number of the character:
.TP 0.4i
0x00000000 \- 0x0000007F:
.RI 0 xxxxxxx
.TP
0x00000080 \- 0x000007FF:
.RI 110 xxxxx
.RI 10 xxxxxx
.TP
0x00000800 \- 0x0000FFFF:
.RI 1110 xxxx
.RI 10 xxxxxx
.RI 10 xxxxxx
.TP
0x00010000 \- 0x001FFFFF:
.RI 11110 xxx
.RI 10 xxxxxx
.RI 10 xxxxxx
.RI 10 xxxxxx
.TP
0x00200000 \- 0x03FFFFFF:
.RI 111110 xx
.RI 10 xxxxxx
.RI 10 xxxxxx
.RI 10 xxxxxx
.RI 10 xxxxxx
.TP
0x04000000 \- 0x7FFFFFFF:
.RI 1111110 x
.RI 10 xxxxxx
.RI 10 xxxxxx
.RI 10 xxxxxx
.RI 10 xxxxxx
.RI 10 xxxxxx
.PP
The
.I xxx
bit positions are filled with the bits of the character code number in
binary representation.
Only the shortest possible multibyte sequence
which can represent the code number of the character can be used.
.PP
The UCS code values 0xd800\(en0xdfff (UTF-16 surrogates) as well as 0xfffe and
0xffff (UCS noncharacters) should not appear in conforming UTF-8 streams.
.SS Example
The Unicode character 0xa9 = 1010 1001 (the copyright sign) is encoded
in UTF-8 as
.PP
.RS
11000010 10101001 = 0xc2 0xa9
.RE
.PP
and character 0x2260 = 0010 0010 0110 0000 (the "not equal" symbol) is
encoded as:
.PP
.RS
11100010 10001001 10100000 = 0xe2 0x89 0xa0
.RE
.SS Application notes
Users have to select a UTF-8 locale, for example with
.PP
.RS
export LANG=en_GB.UTF-8
.RE
.PP
in order to activate the UTF-8 support in applications.
.PP
Application software that has to be aware of the used character
encoding should always set the locale with for example
.PP
.RS
setlocale(LC_CTYPE, "")
.RE
.PP
and programmers can then test the expression
.PP
.RS
strcmp(nl_langinfo(CODESET), "UTF-8") == 0
.RE
.PP
to determine whether a UTF-8 locale has been selected and whether
therefore all plaintext standard input and output, terminal
communication, plaintext file content, filenames and environment
variables are encoded in UTF-8.
.PP
Programmers accustomed to single-byte encodings such as US-ASCII or ISO 8859
have to be aware that two assumptions made so far are no longer valid
in UTF-8 locales.
Firstly, a single byte does not necessarily correspond any
more to a single character.
Secondly, since modern terminal emulators in UTF-8
mode also support Chinese, Japanese, and Korean
double-width characters as well as nonspacing combining characters,
outputting a single character does not necessarily advance the cursor
by one position as it did in ASCII.
Library functions such as
.BR mbsrtowcs (3)
and
.BR wcswidth (3)
should be used today to count characters and cursor positions.
.PP
The official ESC sequence to switch from an ISO 2022
encoding scheme (as used for instance by VT100 terminals) to
UTF-8 is ESC % G
("\\x1b%G").
The corresponding return sequence from
UTF-8 to ISO 2022 is ESC % @ ("\\x1b%@").
Other ISO 2022 sequences (such as
for switching the G0 and G1 sets) are not applicable in UTF-8 mode.
.SS Security
The Unicode and UCS standards require that producers of UTF-8
shall use the shortest form possible, for example, producing a two-byte
sequence with first byte 0xc0 is nonconforming.
Unicode 3.1 has added the requirement that conforming programs must not accept
non-shortest forms in their input.
This is for security reasons: if
user input is checked for possible security violations, a program
might check only for the ASCII
version of "/../" or ";" or NUL and overlook that there are many
non-ASCII ways to represent these things in a non-shortest UTF-8
encoding.
.SS Standards
ISO/IEC 10646-1:2000, Unicode 3.1, RFC\ 3629, Plan 9.
.\" .SH AUTHOR
.\" Markus Kuhn <mgk25@cl.cam.ac.uk>
.SH SEE ALSO
.BR locale (1),
.BR nl_langinfo (3),
.BR setlocale (3),
.BR charsets (7),
.BR unicode (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Written by Mike Frysinger <vapier@gentoo.org>
.\"
.\" %%%LICENSE_START(PUBLIC_DOMAIN)
.\" This page is in the public domain.
.\" %%%LICENSE_END
.\"
.\" Useful background:
.\"   http://articles.manugarg.com/systemcallinlinux2_6.html
.\"   https://lwn.net/Articles/446528/
.\"   http://www.linuxjournal.com/content/creating-vdso-colonels-other-chicken
.\"   http://www.trilithium.com/johan/2005/08/linux-gate/
.\"
.TH VDSO 7 2014-08-19 "Linux" "Linux Programmer's Manual"
.SH NAME
vDSO \- overview of the virtual ELF dynamic shared object
.SH SYNOPSIS
.B #include <sys/auxv.h>

.B void *vdso = (uintptr_t) getauxval(AT_SYSINFO_EHDR);
.SH DESCRIPTION
The "vDSO" (virtual dynamic shared object) is a small shared library that
the kernel automatically maps into the
address space of all user-space applications.
Applications usually do not need to concern themselves with these details
as the vDSO is most commonly called by the C library.
This way you can code in the normal way using standard functions
and the C library will take care
of using any functionality that is available via the vDSO.

Why does the vDSO exist at all?
There are some system calls the kernel provides that
user-space code ends up using frequently,
to the point that such calls can dominate overall performance.
This is due both to the frequency of the call as well as the
context-switch overhead that results
from exiting user space and entering the kernel.

The rest of this documentation is geared toward the curious and/or
C library writers rather than general developers.
If you're trying to call the vDSO in your own application rather than using
the C library, you're most likely doing it wrong.
.SS Example background
Making system calls can be slow.
In x86 32-bit systems, you can trigger a software interrupt
.RI ( "int $0x80" )
to tell the kernel you wish to make a system call.
However, this instruction is expensive: it goes through
the full interrupt-handling paths
in the processor's microcode as well as in the kernel.
Newer processors have faster (but backward incompatible) instructions to
initiate system calls.
Rather than require the C library to figure out if this functionality is
available at run time,
the C library can use functions provided by the kernel in
the vDSO.

Note that the terminology can be confusing.
On x86 systems, the vDSO function
used to determine the preferred method of making a system call is
named "__kernel_vsyscall", but on x86_64,
the term "vsyscall" also refers to an obsolete way to ask the kernel
what time it is or what CPU the caller is on.

One frequently used system call is
.BR gettimeofday (2).
This system call is called both directly by user-space applications
as well as indirectly by
the C library.
Think timestamps or timing loops or polling\(emall of these
frequently need to know what time it is right now.
This information is also not secret\(emany application in any
privilege mode (root or any unprivileged user) will get the same answer.
Thus the kernel arranges for the information required to answer
this question to be placed in memory the process can access.
Now a call to
.BR gettimeofday (2)
changes from a system call to a normal function
call and a few memory accesses.
.SS Finding the vDSO
The base address of the vDSO (if one exists) is passed by the kernel to
each program in the initial auxiliary vector (see
.BR getauxval (3)),
via the
.B AT_SYSINFO_EHDR
tag.

You must not assume the vDSO is mapped at any particular location in the
user's memory map.
The base address will usually be randomized at run time every time a new
process image is created (at
.BR execve (2)
time).
This is done for security reasons,
to prevent "return-to-libc" attacks.

For some architectures, there is also an
.B AT_SYSINFO
tag.
This is used only for locating the vsyscall entry point and is frequently
omitted or set to 0 (meaning it's not available).
This tag is a throwback to the initial vDSO work (see
.IR History
below) and its use should be avoided.
.SS File format
Since the vDSO is a fully formed ELF image, you can do symbol lookups on it.
This allows new symbols to be added with newer kernel releases,
and allows the C library to detect available functionality at
run time when running under different kernel versions.
Oftentimes the C library will do detection with the first call and then
cache the result for subsequent calls.

All symbols are also versioned (using the GNU version format).
This allows the kernel to update the function signature without breaking
backward compatibility.
This means changing the arguments that the function accepts as well as the
return value.
Thus, when looking up a symbol in the vDSO,
you must always include the version
to match the ABI you expect.

Typically the vDSO follows the naming convention of prefixing
all symbols with "__vdso_" or "__kernel_"
so as to distinguish them from other standard symbols.
For example, the "gettimeofday" function is named "__vdso_gettimeofday".

You use the standard C calling conventions when calling
any of these functions.
No need to worry about weird register or stack behavior.
.SH NOTES
.SS Source
When you compile the kernel,
it will automatically compile and link the vDSO code for you.
You will frequently find it under the architecture-specific directory:

    find arch/$ARCH/ -name '*vdso*.so*' -o -name '*gate*.so*'

.SS vDSO names
The name of the vDSO varies across architectures.
It will often show up in things like glibc's
.BR ldd (1)
output.
The exact name should not matter to any code, so do not hardcode it.
.if t \{\
.ft CW
\}
.TS
l l.
user ABI	vDSO name
_
aarch64	linux-vdso.so.1
ia64	linux-gate.so.1
ppc/32	linux-vdso32.so.1
ppc/64	linux-vdso64.so.1
s390	linux-vdso32.so.1
s390x	linux-vdso64.so.1
sh	linux-gate.so.1
i386	linux-gate.so.1
x86_64	linux-vdso.so.1
x86/x32	linux-vdso.so.1
.TE
.if t \{\
.in
.ft P
\}
.SH ARCHITECTURE-SPECIFIC NOTES
The subsections below provide architecture-specific notes
on the vDSO.

Note that the vDSO that is used is based on the ABI of your user-space code
and not the ABI of the kernel.
Thus, for example,
when you run an i386 32-bit ELF binary,
you'll get the same vDSO regardless of whether you run it under
an i386 32-bit kernel or under an x86_64 64-bit kernel.
Therefore, the name of the user-space ABI should be used to determine
which of the sections below is relevant.
.SS ARM functions
.\" See linux/arch/arm/kernel/entry-armv.S
.\" See linux/Documentation/arm/kernel_user_helpers.txt
The ARM port has a code page full of utility functions.
Since it's just a raw page of code, there is no ELF information for doing
symbol lookups or versioning.
It does provide support for different versions though.

For information on this code page,
it's best to refer to the kernel documentation
as it's extremely detailed and covers everything you need to know:
.IR Documentation/arm/kernel_user_helpers.txt .
.SS aarch64 functions
.\" See linux/arch/arm64/kernel/vdso/vdso.lds.S
The table below lists the symbols exported by the vDSO.
.if t \{\
.ft CW
\}
.TS
l l.
symbol	version
_
__kernel_rt_sigreturn	LINUX_2.6.39
__kernel_gettimeofday	LINUX_2.6.39
__kernel_clock_gettime	LINUX_2.6.39
__kernel_clock_getres	LINUX_2.6.39
.TE
.if t \{\
.in
.ft P
\}
.SS bfin (Blackfin) functions
.\" See linux/arch/blackfin/kernel/fixed_code.S
.\" See http://docs.blackfin.uclinux.org/doku.php?id=linux-kernel:fixed-code
As this CPU lacks a memory management unit (MMU),
it doesn't set up a vDSO in the normal sense.
Instead, it maps at boot time a few raw functions into
a fixed location in memory.
User-space applications then call directly into that region.
There is no provision for backward compatibility
beyond sniffing raw opcodes,
but as this is an embedded CPU, it can get away with things\(emsome of the
object formats it runs aren't even ELF based (they're bFLT/FLAT).

For information on this code page,
it's best to refer to the public documentation:
.br
http://docs.blackfin.uclinux.org/doku.php?id=linux-kernel:fixed-code
.SS ia64 (Itanium) functions
.\" See linux/arch/ia64/kernel/gate.lds.S
.\" Also linux/arch/ia64/kernel/fsys.S and linux/Documentation/ia64/fsys.txt
The table below lists the symbols exported by the vDSO.
.if t \{\
.ft CW
\}
.TS
l l.
symbol	version
_
__kernel_sigtramp	LINUX_2.5
__kernel_syscall_via_break	LINUX_2.5
__kernel_syscall_via_epc	LINUX_2.5
.TE
.if t \{\
.in
.ft P
\}

The Itanium port is somewhat tricky.
In addition to the vDSO above, it also has "light-weight system calls"
(also known as "fast syscalls" or "fsys").
You can invoke these via the
.I __kernel_syscall_via_epc
vDSO helper.
The system calls listed here have the same semantics as if you called them
directly via
.BR syscall (2),
so refer to the relevant
documentation for each.
The table below lists the functions available via this mechanism.
.if t \{\
.ft CW
\}
.TS
l.
function
_
clock_gettime
getcpu
getpid
getppid
gettimeofday
set_tid_address
.TE
.if t \{\
.in
.ft P
\}
.SS parisc (hppa) functions
.\" See linux/arch/parisc/kernel/syscall.S
.\" See linux/Documentation/parisc/registers
The parisc port has a code page full of utility functions
called a gateway page.
Rather than use the normal ELF auxiliary vector approach,
it passes the address of
the page to the process via the SR2 register.
The permissions on the page are such that merely executing those addresses
automatically executes with kernel privileges and not in user space.
This is done to match the way HP-UX works.

Since it's just a raw page of code, there is no ELF information for doing
symbol lookups or versioning.
Simply call into the appropriate offset via the branch instruction,
for example:

    ble <offset>(%sr2, %r0)
.if t \{\
.ft CW
\}
.TS
l l.
offset	function
_
00b0	lws_entry
00e0	set_thread_pointer
0100	linux_gateway_entry (syscall)
0268	syscall_nosys
0274	tracesys
0324	tracesys_next
0368	tracesys_exit
03a0	tracesys_sigexit
03b8	lws_start
03dc	lws_exit_nosys
03e0	lws_exit
03e4	lws_compare_and_swap64
03e8	lws_compare_and_swap
0404	cas_wouldblock
0410	cas_action
.TE
.if t \{\
.in
.ft P
\}
.SS ppc/32 functions
.\" See linux/arch/powerpc/kernel/vdso32/vdso32.lds.S
The table below lists the symbols exported by the vDSO.
The functions marked with a
.I *
are available only when the kernel is
a PowerPC64 (64-bit) kernel.
.if t \{\
.ft CW
\}
.TS
l l.
symbol	version
_
__kernel_clock_getres	LINUX_2.6.15
__kernel_clock_gettime	LINUX_2.6.15
__kernel_datapage_offset	LINUX_2.6.15
__kernel_get_syscall_map	LINUX_2.6.15
__kernel_get_tbfreq	LINUX_2.6.15
__kernel_getcpu \fI*\fR	LINUX_2.6.15
__kernel_gettimeofday	LINUX_2.6.15
__kernel_sigtramp_rt32	LINUX_2.6.15
__kernel_sigtramp32	LINUX_2.6.15
__kernel_sync_dicache	LINUX_2.6.15
__kernel_sync_dicache_p5	LINUX_2.6.15
.TE
.if t \{\
.in
.ft P
\}
.SS ppc/64 functions
.\" See linux/arch/powerpc/kernel/vdso64/vdso64.lds.S
The table below lists the symbols exported by the vDSO.
.if t \{\
.ft CW
\}
.TS
l l.
symbol	version
_
__kernel_clock_getres	LINUX_2.6.15
__kernel_clock_gettime	LINUX_2.6.15
__kernel_datapage_offset	LINUX_2.6.15
__kernel_get_syscall_map	LINUX_2.6.15
__kernel_get_tbfreq	LINUX_2.6.15
__kernel_getcpu	LINUX_2.6.15
__kernel_gettimeofday	LINUX_2.6.15
__kernel_sigtramp_rt64	LINUX_2.6.15
__kernel_sync_dicache	LINUX_2.6.15
__kernel_sync_dicache_p5	LINUX_2.6.15
.TE
.if t \{\
.in
.ft P
\}
.SS s390 functions
.\" See linux/arch/s390/kernel/vdso32/vdso32.lds.S
The table below lists the symbols exported by the vDSO.
.if t \{\
.ft CW
\}
.TS
l l.
symbol	version
_
__kernel_clock_getres	LINUX_2.6.29
__kernel_clock_gettime	LINUX_2.6.29
__kernel_gettimeofday	LINUX_2.6.29
.TE
.if t \{\
.in
.ft P
\}
.SS s390x functions
.\" See linux/arch/s390/kernel/vdso64/vdso64.lds.S
The table below lists the symbols exported by the vDSO.
.if t \{\
.ft CW
\}
.TS
l l.
symbol	version
_
__kernel_clock_getres	LINUX_2.6.29
__kernel_clock_gettime	LINUX_2.6.29
__kernel_gettimeofday	LINUX_2.6.29
.TE
.if t \{\
.in
.ft P
\}
.SS sh (SuperH) functions
.\" See linux/arch/sh/kernel/vsyscall/vsyscall.lds.S
The table below lists the symbols exported by the vDSO.
.if t \{\
.ft CW
\}
.TS
l l.
symbol	version
_
__kernel_rt_sigreturn	LINUX_2.6
__kernel_sigreturn	LINUX_2.6
__kernel_vsyscall	LINUX_2.6
.TE
.if t \{\
.in
.ft P
\}
.SS i386 functions
.\" See linux/arch/x86/vdso/vdso32/vdso32.lds.S
The table below lists the symbols exported by the vDSO.
.if t \{\
.ft CW
\}
.TS
l l.
symbol	version
_
__kernel_sigreturn	LINUX_2.5
__kernel_rt_sigreturn	LINUX_2.5
__kernel_vsyscall	LINUX_2.5
.\" Added in 7a59ed415f5b57469e22e41fc4188d5399e0b194 and updated
.\" in 37c975545ec63320789962bf307f000f08fabd48.
__vdso_clock_gettime	LINUX_2.6 (exported since Linux 3.15)
__vdso_gettimeofday	LINUX_2.6 (exported since Linux 3.15)
__vdso_time	LINUX_2.6 (exported since Linux 3.15)
.TE
.if t \{\
.in
.ft P
\}
.SS x86_64 functions
.\" See linux/arch/x86/vdso/vdso.lds.S
The table below lists the symbols exported by the vDSO.
All of these symbols are also available without the "__vdso_" prefix, but
you should ignore those and stick to the names below.
.if t \{\
.ft CW
\}
.TS
l l.
symbol	version
_
__vdso_clock_gettime	LINUX_2.6
__vdso_getcpu	LINUX_2.6
__vdso_gettimeofday	LINUX_2.6
__vdso_time	LINUX_2.6
.TE
.if t \{\
.in
.ft P
\}
.SS x86/x32 functions
.\" See linux/arch/x86/vdso/vdso32.lds.S
The table below lists the symbols exported by the vDSO.
.if t \{\
.ft CW
\}
.TS
l l.
symbol	version
_
__vdso_clock_gettime	LINUX_2.6
__vdso_getcpu	LINUX_2.6
__vdso_gettimeofday	LINUX_2.6
__vdso_time	LINUX_2.6
.TE
.if t \{\
.in
.ft P
\}
.SS History
The vDSO was originally just a single function\(emthe vsyscall.
In older kernels, you might see that name
in a process's memory map rather than "vdso".
Over time, people realized that this mechanism
was a great way to pass more functionality
to user space, so it was reconceived as a vDSO in the current format.
.SH SEE ALSO
.BR syscalls (2),
.BR getauxval (3),
.BR proc (5)

The documents, examples, and source code in the Linux source code tree:
.in +4n
.nf

Documentation/ABI/stable/vdso
Documentation/ia64/fsys.txt
Documentation/vDSO/* (includes examples of using the vDSO)

find arch/ -iname '*vdso*' -o -iname '*gate*'
.fi
.in
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" This man page is Copyright (C) 1998 Heiner Eisen.
.\"
.\" %%%LICENSE_START(VERBATIM_ONE_PARA)
.\" Permission is granted to distribute possibly modified copies
.\" of this page provided the header is included verbatim,
.\" and in case of nontrivial modification author and date
.\" of the modification is added to the header.
.\" %%%LICENSE_END
.\"
.\" $Id: x25.7,v 1.4 1999/05/18 10:35:12 freitag Exp $
.\"
.TH X25 7 2012-08-05 "Linux" "Linux Programmer's Manual"
.SH NAME
x25 \- ITU-T X.25 / ISO-8208 protocol interface.
.SH SYNOPSIS
.B #include <sys/socket.h>
.br
.B #include <linux/x25.h>
.sp
.B x25_socket = socket(AF_X25, SOCK_SEQPACKET, 0);
.SH DESCRIPTION
X25 sockets provide an interface to the X.25 packet layer protocol.
This allows applications to
communicate over a public X.25 data network as standardized by
International Telecommunication Union's recommendation X.25
(X.25 DTE-DCE mode).
X25 sockets can also be used for communication
without an intermediate X.25 network (X.25 DTE-DTE mode) as described
in ISO-8208.
.PP
Message boundaries are preserved \(em a
.BR read (2)
from a socket will
retrieve the same chunk of data as output with the corresponding
.BR write (2)
to the peer socket.
When necessary, the kernel takes care
of segmenting and reassembling long messages by means of
the X.25 M-bit.
There is no hard-coded upper limit for the
message size.
However, reassembling of a long message might fail if
there is a temporary lack of system resources or when other constraints
(such as socket memory or buffer size limits) become effective.
If that
occurs, the X.25 connection will be reset.
.SS Socket addresses
The
.B AF_X25
socket address family uses the
.I struct sockaddr_x25
for representing network addresses as defined in ITU-T
recommendation X.121.
.PP
.in +4n
.nf
struct sockaddr_x25 {
    sa_family_t sx25_family;    /* must be AF_X25 */
    x25_address sx25_addr;      /* X.121 Address */
};
.fi
.in
.PP
.I sx25_addr
contains a char array
.I x25_addr[]
to be interpreted as a null-terminated string.
.I sx25_addr.x25_addr[]
consists of up to 15 (not counting the terminating null byte) ASCII
characters forming the X.121 address.
Only the decimal digit characters from \(aq0\(aq to \(aq9\(aq are allowed.
.SS Socket options
The following X.25-specific socket options can be set by using
.BR setsockopt (2)
and read with
.BR getsockopt (2)
with the
.I level
argument set to
.BR SOL_X25 .
.TP
.B X25_QBITINCL
Controls whether the X.25 Q-bit (Qualified Data Bit) is accessible by the
user.
It expects an integer argument.
If set to 0 (default),
the Q-bit is never set for outgoing packets and the Q-bit of incoming
packets is ignored.
If set to 1, an additional first byte is prepended
to each message read from or written to the socket.
For data read from
the socket, a 0 first byte indicates that the Q-bits of the corresponding
incoming data packets were not set.
A first byte with value 1 indicates
that the Q-bit of the corresponding incoming data packets was set.
If the first byte of the data written to the socket is 1, the Q-bit of the
corresponding outgoing data packets will be set.
If the first byte is 0,
the Q-bit will not be set.
.SH VERSIONS
The AF_X25 protocol family is a new feature of Linux 2.2.
.SH BUGS
Plenty, as the X.25 PLP implementation is
.BR CONFIG_EXPERIMENTAL .
.PP
This man page is incomplete.
.PP
There is no dedicated application programmer's header file yet;
you need to include the kernel header file
.IR <linux/x25.h> .
.B CONFIG_EXPERIMENTAL
might also imply that future versions of the
interface are not binary compatible.
.PP
X.25 N-Reset events are not propagated to the user process yet.
Thus,
if a reset occurred, data might be lost without notice.
.SH SEE ALSO
.BR socket (2),
.BR socket (7)
.PP
Jonathan Simon Naylor:
\(lqThe Re-Analysis and Re-Implementation of X.25.\(rq
The URL is
.UR ftp://ftp.pspt.fi\:/pub\:/ham\:/linux\:/ax25\:/x25doc.tgz
.UE .
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
.\" Extended attributes manual page
.\"
.\" Copyright (C) 2000, 2002, 2007  Andreas Gruenbacher <agruen@suse.de>
.\" Copyright (C) 2001, 2002, 2004, 2007 Silicon Graphics, Inc.
.\" All rights reserved.
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual.  If not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.TH XATTR 7 2015-05-01 "Linux" "Linux Programmer's Manual"
.SH NAME
attr - Extended attributes
.SH DESCRIPTION
Extended attributes are name:value pairs associated permanently with
files and directories, similar to the environment strings associated
with a process.
An attribute may be defined or undefined.
If it is defined, its value may be empty or non-empty.
.PP
Extended attributes are extensions to the normal attributes which are
associated with all inodes in the system (i.e., the
.BR stat (2)
data).
They are often used to provide additional functionality
to a filesystem\(emfor example, additional security features such as
Access Control Lists (ACLs) may be implemented using extended attributes.
.PP
Users with search access to a file or directory may use
.BR listxattr (2)
to retrieve a list of attribute names defined for that file or directory.
.PP
Extended attributes are accessed as atomic objects.
Reading
.RB ( getxattr (2))
retrieves the whole value of an attribute and stores it in a buffer.
Writing
.RB ( setxattr (2))
replaces any previous value with the new value.
.PP
Space consumed for extended attributes may be counted towards the disk quotas
of the file owner and file group.
.SS Extended attribute namespaces
Attribute names are null-terminated strings.
The attribute name is always specified in the fully qualified
.IR namespace.attribute
form, for example,
.IR user.mime_type ,
.IR trusted.md5sum ,
.IR system.posix_acl_access ,
or
.IR security.selinux .
.PP
The namespace mechanism is used to define different classes of extended
attributes.
These different classes exist for several reasons;
for example, the permissions
and capabilities required for manipulating extended attributes of one
namespace may differ to another.
.PP
Currently, the
.IR security ,
.IR system ,
.IR trusted ,
and
.IR user
extended attribute classes are defined as described below.
Additional classes may be added in the future.
.SS Extended security attributes
The security attribute namespace is used by kernel security modules,
such as Security Enhanced Linux, and also to implement file capabilities (see
.BR capabilities (7)).
Read and write access permissions to security attributes depend on the
policy implemented for each security attribute by the security module.
When no security module is loaded, all processes have read access to
extended security attributes, and write access is limited to processes
that have the
.B CAP_SYS_ADMIN
capability.
.SS Extended system attributes
Extended system attributes are used by the kernel to store system
objects such as Access Control Lists.
Read and write
access permissions to system attributes depend on the policy implemented
for each system attribute implemented by filesystems in the kernel.
.SS Trusted extended attributes
Trusted extended attributes are visible and accessible only to processes that
have the
.B CAP_SYS_ADMIN
capability.
Attributes in this class are used to implement mechanisms in user
space (i.e., outside the kernel) which keep information in extended attributes
to which ordinary processes should not have access.
.SS Extended user attributes
Extended user attributes may be assigned to files and directories for
storing arbitrary additional information such as the mime type,
character set or encoding of a file.
The access permissions for user
attributes are defined by the file permission bits:
read permission is required to retrieve the attribute value,
and writer permission is required to change it.
.PP
The file permission bits of regular files and directories are
interpreted differently from the file permission bits of special files
and symbolic links.
For regular files and directories the file
permission bits define access to the file's contents, while for device special
files they define access to the device described by the special file.
The file permissions of symbolic links are not used in access checks.
These differences would allow users to consume filesystem resources in
a way not controllable by disk quotas for group or world writable
special files and directories.
.PP
For this reason,
extended user attributes are allowed only for regular files and directories,
and access to extended user attributes is restricted to the
owner and to users with appropriate capabilities for directories with the
sticky bit set (see the
.BR chmod (1)
manual page for an explanation of the sticky bit).
.SS Filesystem differences
The kernel and the filesystem may place limits on the maximum number
and size of extended attributes that can be associated with a file.
The VFS imposes limitations that an attribute names is limited to 255 bytes
and an attribute value is limited to 64 kB.
The list of attribute names that
can be returned is also limited to 64 kB
(see BUGS in
.BR listxattr (2)).

Some filesystems, such as Reiserfs (and, historically, ext2 and ext3),
require the filesystem to be mounted with the
.B user_xattr
mount option in order for extended user attributes to be used.
.PP
In the current ext2, ext3, and ext4 filesystem implementations,
the total bytes used by the names and values of all of a files
extended attributes must fit in a single filesystem block (1024, 2048
or 4096 bytes, depending on the block size specified when the
filesystem was created).
.PP
In the Btrfs, XFS, and Reiserfs filesystem implementations, there is no
practical limit on the number of extended attributes
associated with a file, and the algorithms used to store extended
attribute information on disk are scalable.

In the JFS, XFS, and Reiserfs filesystem implementations,
the limit on bytes used in an EA value is the ceiling imposed by the VFS.

In the Btrfs filesystem implementation,
the total bytes used for the name, value, and implementation overhead bytes
is limited to the filesystem
.I nodesize
value (16 kB by default).
.SH CONFORMING TO
Extended attributes are not specified in POSIX.1, but some other systems
(e.g., the BSDs and Solaris) provide a similar feature.
.SH NOTES
Since the filesystems on which extended attributes are stored might also
be used on architectures with a different byte order and machine word
size, care should be taken to store attribute values in an
architecture-independent format.

This page was formerly named
.BR attr (5).
.\" .SH AUTHORS
.\" Andreas Gruenbacher,
.\" .RI < a.gruenbacher@bestbits.at >
.\" and the SGI XFS development team,
.\" .RI < linux-xfs@oss.sgi.com >.
.SH SEE ALSO
.BR getfattr (1),
.BR setfattr (1),
.BR getxattr (2),
.BR listxattr (2),
.BR removexattr (2),
.BR setxattr (2),
.BR acl (5),
.BR capabilities (7)
.SH COLOPHON
This page is part of release 4.00 of the Linux
.I man-pages
project.
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
